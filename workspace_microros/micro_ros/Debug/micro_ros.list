
micro_ros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011064  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d8c  08011208  08011208  00012208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f94  08011f94  000132c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011f94  08011f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f9c  08011f9c  000132c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011f9c  08011f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011fa4  08011fa4  00012fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  08011fa8  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000daa4  200002c8  08012270  000132c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000dd6c  08012270  00013d6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ae1  00000000  00000000  000132f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a4  00000000  00000000  00027dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0002b380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cab  00000000  00000000  0002c428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000088c9  00000000  00000000  0002d0d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001489d  00000000  00000000  0003599c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f6f2  00000000  00000000  0004a239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000069  00000000  00000000  000e992b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051bc  00000000  00000000  000e9994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000eeb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080111ec 	.word	0x080111ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	080111ec 	.word	0x080111ec

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ce:	f000 b9d3 	b.w	8000678 <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000364:	f000 b988 	b.w	8000678 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	468e      	mov	lr, r1
 8000388:	4604      	mov	r4, r0
 800038a:	4688      	mov	r8, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4617      	mov	r7, r2
 8000394:	d962      	bls.n	800045c <__udivmoddi4+0xdc>
 8000396:	fab2 f682 	clz	r6, r2
 800039a:	b14e      	cbz	r6, 80003b0 <__udivmoddi4+0x30>
 800039c:	f1c6 0320 	rsb	r3, r6, #32
 80003a0:	fa01 f806 	lsl.w	r8, r1, r6
 80003a4:	fa20 f303 	lsr.w	r3, r0, r3
 80003a8:	40b7      	lsls	r7, r6
 80003aa:	ea43 0808 	orr.w	r8, r3, r8
 80003ae:	40b4      	lsls	r4, r6
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003bc:	0c23      	lsrs	r3, r4, #16
 80003be:	fb0e 8811 	mls	r8, lr, r1, r8
 80003c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003c6:	fb01 f20c 	mul.w	r2, r1, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80003d4:	f080 80ea 	bcs.w	80005ac <__udivmoddi4+0x22c>
 80003d8:	429a      	cmp	r2, r3
 80003da:	f240 80e7 	bls.w	80005ac <__udivmoddi4+0x22c>
 80003de:	3902      	subs	r1, #2
 80003e0:	443b      	add	r3, r7
 80003e2:	1a9a      	subs	r2, r3, r2
 80003e4:	b2a3      	uxth	r3, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003f6:	459c      	cmp	ip, r3
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x8e>
 80003fa:	18fb      	adds	r3, r7, r3
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000400:	f080 80d6 	bcs.w	80005b0 <__udivmoddi4+0x230>
 8000404:	459c      	cmp	ip, r3
 8000406:	f240 80d3 	bls.w	80005b0 <__udivmoddi4+0x230>
 800040a:	443b      	add	r3, r7
 800040c:	3802      	subs	r0, #2
 800040e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000412:	eba3 030c 	sub.w	r3, r3, ip
 8000416:	2100      	movs	r1, #0
 8000418:	b11d      	cbz	r5, 8000422 <__udivmoddi4+0xa2>
 800041a:	40f3      	lsrs	r3, r6
 800041c:	2200      	movs	r2, #0
 800041e:	e9c5 3200 	strd	r3, r2, [r5]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d905      	bls.n	8000436 <__udivmoddi4+0xb6>
 800042a:	b10d      	cbz	r5, 8000430 <__udivmoddi4+0xb0>
 800042c:	e9c5 0100 	strd	r0, r1, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	4608      	mov	r0, r1
 8000434:	e7f5      	b.n	8000422 <__udivmoddi4+0xa2>
 8000436:	fab3 f183 	clz	r1, r3
 800043a:	2900      	cmp	r1, #0
 800043c:	d146      	bne.n	80004cc <__udivmoddi4+0x14c>
 800043e:	4573      	cmp	r3, lr
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0xc8>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 8105 	bhi.w	8000652 <__udivmoddi4+0x2d2>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb6e 0203 	sbc.w	r2, lr, r3
 800044e:	2001      	movs	r0, #1
 8000450:	4690      	mov	r8, r2
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0e5      	beq.n	8000422 <__udivmoddi4+0xa2>
 8000456:	e9c5 4800 	strd	r4, r8, [r5]
 800045a:	e7e2      	b.n	8000422 <__udivmoddi4+0xa2>
 800045c:	2a00      	cmp	r2, #0
 800045e:	f000 8090 	beq.w	8000582 <__udivmoddi4+0x202>
 8000462:	fab2 f682 	clz	r6, r2
 8000466:	2e00      	cmp	r6, #0
 8000468:	f040 80a4 	bne.w	80005b4 <__udivmoddi4+0x234>
 800046c:	1a8a      	subs	r2, r1, r2
 800046e:	0c03      	lsrs	r3, r0, #16
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	b280      	uxth	r0, r0
 8000476:	b2bc      	uxth	r4, r7
 8000478:	2101      	movs	r1, #1
 800047a:	fbb2 fcfe 	udiv	ip, r2, lr
 800047e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000486:	fb04 f20c 	mul.w	r2, r4, ip
 800048a:	429a      	cmp	r2, r3
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x11e>
 800048e:	18fb      	adds	r3, r7, r3
 8000490:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000494:	d202      	bcs.n	800049c <__udivmoddi4+0x11c>
 8000496:	429a      	cmp	r2, r3
 8000498:	f200 80e0 	bhi.w	800065c <__udivmoddi4+0x2dc>
 800049c:	46c4      	mov	ip, r8
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004a4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004a8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ac:	fb02 f404 	mul.w	r4, r2, r4
 80004b0:	429c      	cmp	r4, r3
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x144>
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0x142>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f200 80ca 	bhi.w	8000656 <__udivmoddi4+0x2d6>
 80004c2:	4602      	mov	r2, r0
 80004c4:	1b1b      	subs	r3, r3, r4
 80004c6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004ca:	e7a5      	b.n	8000418 <__udivmoddi4+0x98>
 80004cc:	f1c1 0620 	rsb	r6, r1, #32
 80004d0:	408b      	lsls	r3, r1
 80004d2:	fa22 f706 	lsr.w	r7, r2, r6
 80004d6:	431f      	orrs	r7, r3
 80004d8:	fa0e f401 	lsl.w	r4, lr, r1
 80004dc:	fa20 f306 	lsr.w	r3, r0, r6
 80004e0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004e4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004e8:	4323      	orrs	r3, r4
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	fa1f fc87 	uxth.w	ip, r7
 80004f2:	fbbe f0f9 	udiv	r0, lr, r9
 80004f6:	0c1c      	lsrs	r4, r3, #16
 80004f8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004fc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000500:	fb00 fe0c 	mul.w	lr, r0, ip
 8000504:	45a6      	cmp	lr, r4
 8000506:	fa02 f201 	lsl.w	r2, r2, r1
 800050a:	d909      	bls.n	8000520 <__udivmoddi4+0x1a0>
 800050c:	193c      	adds	r4, r7, r4
 800050e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000512:	f080 809c 	bcs.w	800064e <__udivmoddi4+0x2ce>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f240 8099 	bls.w	800064e <__udivmoddi4+0x2ce>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	eba4 040e 	sub.w	r4, r4, lr
 8000524:	fa1f fe83 	uxth.w	lr, r3
 8000528:	fbb4 f3f9 	udiv	r3, r4, r9
 800052c:	fb09 4413 	mls	r4, r9, r3, r4
 8000530:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000534:	fb03 fc0c 	mul.w	ip, r3, ip
 8000538:	45a4      	cmp	ip, r4
 800053a:	d908      	bls.n	800054e <__udivmoddi4+0x1ce>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000542:	f080 8082 	bcs.w	800064a <__udivmoddi4+0x2ca>
 8000546:	45a4      	cmp	ip, r4
 8000548:	d97f      	bls.n	800064a <__udivmoddi4+0x2ca>
 800054a:	3b02      	subs	r3, #2
 800054c:	443c      	add	r4, r7
 800054e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000552:	eba4 040c 	sub.w	r4, r4, ip
 8000556:	fba0 ec02 	umull	lr, ip, r0, r2
 800055a:	4564      	cmp	r4, ip
 800055c:	4673      	mov	r3, lr
 800055e:	46e1      	mov	r9, ip
 8000560:	d362      	bcc.n	8000628 <__udivmoddi4+0x2a8>
 8000562:	d05f      	beq.n	8000624 <__udivmoddi4+0x2a4>
 8000564:	b15d      	cbz	r5, 800057e <__udivmoddi4+0x1fe>
 8000566:	ebb8 0203 	subs.w	r2, r8, r3
 800056a:	eb64 0409 	sbc.w	r4, r4, r9
 800056e:	fa04 f606 	lsl.w	r6, r4, r6
 8000572:	fa22 f301 	lsr.w	r3, r2, r1
 8000576:	431e      	orrs	r6, r3
 8000578:	40cc      	lsrs	r4, r1
 800057a:	e9c5 6400 	strd	r6, r4, [r5]
 800057e:	2100      	movs	r1, #0
 8000580:	e74f      	b.n	8000422 <__udivmoddi4+0xa2>
 8000582:	fbb1 fcf2 	udiv	ip, r1, r2
 8000586:	0c01      	lsrs	r1, r0, #16
 8000588:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800058c:	b280      	uxth	r0, r0
 800058e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000592:	463b      	mov	r3, r7
 8000594:	4638      	mov	r0, r7
 8000596:	463c      	mov	r4, r7
 8000598:	46b8      	mov	r8, r7
 800059a:	46be      	mov	lr, r7
 800059c:	2620      	movs	r6, #32
 800059e:	fbb1 f1f7 	udiv	r1, r1, r7
 80005a2:	eba2 0208 	sub.w	r2, r2, r8
 80005a6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005aa:	e766      	b.n	800047a <__udivmoddi4+0xfa>
 80005ac:	4601      	mov	r1, r0
 80005ae:	e718      	b.n	80003e2 <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e72c      	b.n	800040e <__udivmoddi4+0x8e>
 80005b4:	f1c6 0220 	rsb	r2, r6, #32
 80005b8:	fa2e f302 	lsr.w	r3, lr, r2
 80005bc:	40b7      	lsls	r7, r6
 80005be:	40b1      	lsls	r1, r6
 80005c0:	fa20 f202 	lsr.w	r2, r0, r2
 80005c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005c8:	430a      	orrs	r2, r1
 80005ca:	fbb3 f8fe 	udiv	r8, r3, lr
 80005ce:	b2bc      	uxth	r4, r7
 80005d0:	fb0e 3318 	mls	r3, lr, r8, r3
 80005d4:	0c11      	lsrs	r1, r2, #16
 80005d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005da:	fb08 f904 	mul.w	r9, r8, r4
 80005de:	40b0      	lsls	r0, r6
 80005e0:	4589      	cmp	r9, r1
 80005e2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005e6:	b280      	uxth	r0, r0
 80005e8:	d93e      	bls.n	8000668 <__udivmoddi4+0x2e8>
 80005ea:	1879      	adds	r1, r7, r1
 80005ec:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80005f0:	d201      	bcs.n	80005f6 <__udivmoddi4+0x276>
 80005f2:	4589      	cmp	r9, r1
 80005f4:	d81f      	bhi.n	8000636 <__udivmoddi4+0x2b6>
 80005f6:	eba1 0109 	sub.w	r1, r1, r9
 80005fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fe:	fb09 f804 	mul.w	r8, r9, r4
 8000602:	fb0e 1119 	mls	r1, lr, r9, r1
 8000606:	b292      	uxth	r2, r2
 8000608:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800060c:	4542      	cmp	r2, r8
 800060e:	d229      	bcs.n	8000664 <__udivmoddi4+0x2e4>
 8000610:	18ba      	adds	r2, r7, r2
 8000612:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000616:	d2c4      	bcs.n	80005a2 <__udivmoddi4+0x222>
 8000618:	4542      	cmp	r2, r8
 800061a:	d2c2      	bcs.n	80005a2 <__udivmoddi4+0x222>
 800061c:	f1a9 0102 	sub.w	r1, r9, #2
 8000620:	443a      	add	r2, r7
 8000622:	e7be      	b.n	80005a2 <__udivmoddi4+0x222>
 8000624:	45f0      	cmp	r8, lr
 8000626:	d29d      	bcs.n	8000564 <__udivmoddi4+0x1e4>
 8000628:	ebbe 0302 	subs.w	r3, lr, r2
 800062c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000630:	3801      	subs	r0, #1
 8000632:	46e1      	mov	r9, ip
 8000634:	e796      	b.n	8000564 <__udivmoddi4+0x1e4>
 8000636:	eba7 0909 	sub.w	r9, r7, r9
 800063a:	4449      	add	r1, r9
 800063c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000640:	fbb1 f9fe 	udiv	r9, r1, lr
 8000644:	fb09 f804 	mul.w	r8, r9, r4
 8000648:	e7db      	b.n	8000602 <__udivmoddi4+0x282>
 800064a:	4673      	mov	r3, lr
 800064c:	e77f      	b.n	800054e <__udivmoddi4+0x1ce>
 800064e:	4650      	mov	r0, sl
 8000650:	e766      	b.n	8000520 <__udivmoddi4+0x1a0>
 8000652:	4608      	mov	r0, r1
 8000654:	e6fd      	b.n	8000452 <__udivmoddi4+0xd2>
 8000656:	443b      	add	r3, r7
 8000658:	3a02      	subs	r2, #2
 800065a:	e733      	b.n	80004c4 <__udivmoddi4+0x144>
 800065c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000660:	443b      	add	r3, r7
 8000662:	e71c      	b.n	800049e <__udivmoddi4+0x11e>
 8000664:	4649      	mov	r1, r9
 8000666:	e79c      	b.n	80005a2 <__udivmoddi4+0x222>
 8000668:	eba1 0109 	sub.w	r1, r1, r9
 800066c:	46c4      	mov	ip, r8
 800066e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000672:	fb09 f804 	mul.w	r8, r9, r4
 8000676:	e7c4      	b.n	8000602 <__udivmoddi4+0x282>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	@ 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000688:	f004 ff5c 	bl	8005544 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800068c:	4b5a      	ldr	r3, [pc, #360]	@ (80007f8 <pvPortMallocMicroROS+0x17c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d101      	bne.n	8000698 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000694:	f000 f986 	bl	80009a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000698:	4b58      	ldr	r3, [pc, #352]	@ (80007fc <pvPortMallocMicroROS+0x180>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4013      	ands	r3, r2
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	f040 8090 	bne.w	80007c6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d01e      	beq.n	80006ea <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80006ac:	2208      	movs	r2, #8
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d015      	beq.n	80006ea <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f023 0307 	bic.w	r3, r3, #7
 80006c4:	3308      	adds	r3, #8
 80006c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00b      	beq.n	80006ea <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006d6:	f383 8811 	msr	BASEPRI, r3
 80006da:	f3bf 8f6f 	isb	sy
 80006de:	f3bf 8f4f 	dsb	sy
 80006e2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	e7fd      	b.n	80006e6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d06a      	beq.n	80007c6 <pvPortMallocMicroROS+0x14a>
 80006f0:	4b43      	ldr	r3, [pc, #268]	@ (8000800 <pvPortMallocMicroROS+0x184>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d865      	bhi.n	80007c6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006fa:	4b42      	ldr	r3, [pc, #264]	@ (8000804 <pvPortMallocMicroROS+0x188>)
 80006fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006fe:	4b41      	ldr	r3, [pc, #260]	@ (8000804 <pvPortMallocMicroROS+0x188>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000704:	e004      	b.n	8000710 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000708:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800070a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	429a      	cmp	r2, r3
 8000718:	d903      	bls.n	8000722 <pvPortMallocMicroROS+0xa6>
 800071a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d1f1      	bne.n	8000706 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000722:	4b35      	ldr	r3, [pc, #212]	@ (80007f8 <pvPortMallocMicroROS+0x17c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000728:	429a      	cmp	r2, r3
 800072a:	d04c      	beq.n	80007c6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800072c:	6a3b      	ldr	r3, [r7, #32]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2208      	movs	r2, #8
 8000732:	4413      	add	r3, r2
 8000734:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	6a3b      	ldr	r3, [r7, #32]
 800073c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800073e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000740:	685a      	ldr	r2, [r3, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	1ad2      	subs	r2, r2, r3
 8000746:	2308      	movs	r3, #8
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	429a      	cmp	r2, r3
 800074c:	d920      	bls.n	8000790 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800074e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4413      	add	r3, r2
 8000754:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	f003 0307 	and.w	r3, r3, #7
 800075c:	2b00      	cmp	r3, #0
 800075e:	d00b      	beq.n	8000778 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000764:	f383 8811 	msr	BASEPRI, r3
 8000768:	f3bf 8f6f 	isb	sy
 800076c:	f3bf 8f4f 	dsb	sy
 8000770:	613b      	str	r3, [r7, #16]
}
 8000772:	bf00      	nop
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800077a:	685a      	ldr	r2, [r3, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	1ad2      	subs	r2, r2, r3
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800078a:	69b8      	ldr	r0, [r7, #24]
 800078c:	f000 f96c 	bl	8000a68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <pvPortMallocMicroROS+0x184>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	4a19      	ldr	r2, [pc, #100]	@ (8000800 <pvPortMallocMicroROS+0x184>)
 800079c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800079e:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <pvPortMallocMicroROS+0x184>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <pvPortMallocMicroROS+0x18c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d203      	bcs.n	80007b2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <pvPortMallocMicroROS+0x184>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a16      	ldr	r2, [pc, #88]	@ (8000808 <pvPortMallocMicroROS+0x18c>)
 80007b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b4:	685a      	ldr	r2, [r3, #4]
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <pvPortMallocMicroROS+0x180>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	431a      	orrs	r2, r3
 80007bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007c6:	f004 fecb 	bl	8005560 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	f003 0307 	and.w	r3, r3, #7
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00b      	beq.n	80007ec <pvPortMallocMicroROS+0x170>
	__asm volatile
 80007d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007d8:	f383 8811 	msr	BASEPRI, r3
 80007dc:	f3bf 8f6f 	isb	sy
 80007e0:	f3bf 8f4f 	dsb	sy
 80007e4:	60fb      	str	r3, [r7, #12]
}
 80007e6:	bf00      	nop
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80007ec:	69fb      	ldr	r3, [r7, #28]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3728      	adds	r7, #40	@ 0x28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20003eec 	.word	0x20003eec
 80007fc:	20003ef8 	.word	0x20003ef8
 8000800:	20003ef0 	.word	0x20003ef0
 8000804:	20003ee4 	.word	0x20003ee4
 8000808:	20003ef4 	.word	0x20003ef4

0800080c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d04a      	beq.n	80008b4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800081e:	2308      	movs	r3, #8
 8000820:	425b      	negs	r3, r3
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	4413      	add	r3, r2
 8000826:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <vPortFreeMicroROS+0xb0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4013      	ands	r3, r2
 8000836:	2b00      	cmp	r3, #0
 8000838:	d10b      	bne.n	8000852 <vPortFreeMicroROS+0x46>
	__asm volatile
 800083a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800083e:	f383 8811 	msr	BASEPRI, r3
 8000842:	f3bf 8f6f 	isb	sy
 8000846:	f3bf 8f4f 	dsb	sy
 800084a:	60fb      	str	r3, [r7, #12]
}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	e7fd      	b.n	800084e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00b      	beq.n	8000872 <vPortFreeMicroROS+0x66>
	__asm volatile
 800085a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800085e:	f383 8811 	msr	BASEPRI, r3
 8000862:	f3bf 8f6f 	isb	sy
 8000866:	f3bf 8f4f 	dsb	sy
 800086a:	60bb      	str	r3, [r7, #8]
}
 800086c:	bf00      	nop
 800086e:	bf00      	nop
 8000870:	e7fd      	b.n	800086e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	685a      	ldr	r2, [r3, #4]
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <vPortFreeMicroROS+0xb0>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4013      	ands	r3, r2
 800087c:	2b00      	cmp	r3, #0
 800087e:	d019      	beq.n	80008b4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d115      	bne.n	80008b4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <vPortFreeMicroROS+0xb0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	43db      	mvns	r3, r3
 8000892:	401a      	ands	r2, r3
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000898:	f004 fe54 	bl	8005544 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	685a      	ldr	r2, [r3, #4]
 80008a0:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <vPortFreeMicroROS+0xb4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4413      	add	r3, r2
 80008a6:	4a06      	ldr	r2, [pc, #24]	@ (80008c0 <vPortFreeMicroROS+0xb4>)
 80008a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008aa:	6938      	ldr	r0, [r7, #16]
 80008ac:	f000 f8dc 	bl	8000a68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008b0:	f004 fe56 	bl	8005560 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008b4:	bf00      	nop
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20003ef8 	.word	0x20003ef8
 80008c0:	20003ef0 	.word	0x20003ef0

080008c4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008c4:	b480      	push	{r7}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80008d0:	2308      	movs	r3, #8
 80008d2:	425b      	negs	r3, r3
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	4413      	add	r3, r2
 80008d8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	685a      	ldr	r2, [r3, #4]
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <getBlockSize+0x38>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	43db      	mvns	r3, r3
 80008e8:	4013      	ands	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]

	return count;
 80008ec:	68fb      	ldr	r3, [r7, #12]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	371c      	adds	r7, #28
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20003ef8 	.word	0x20003ef8

08000900 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800090a:	f004 fe1b 	bl	8005544 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800090e:	6838      	ldr	r0, [r7, #0]
 8000910:	f7ff feb4 	bl	800067c <pvPortMallocMicroROS>
 8000914:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d017      	beq.n	800094c <pvPortReallocMicroROS+0x4c>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d014      	beq.n	800094c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ffce 	bl	80008c4 <getBlockSize>
 8000928:	4603      	mov	r3, r0
 800092a:	2208      	movs	r2, #8
 800092c:	1a9b      	subs	r3, r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	429a      	cmp	r2, r3
 8000936:	d201      	bcs.n	800093c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	68b8      	ldr	r0, [r7, #8]
 8000942:	f00f fd66 	bl	8010412 <memcpy>

		vPortFreeMicroROS(pv);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ff60 	bl	800080c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800094c:	f004 fe08 	bl	8005560 <xTaskResumeAll>

	return newmem;
 8000950:	68bb      	ldr	r3, [r7, #8]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b086      	sub	sp, #24
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000964:	f004 fdee 	bl	8005544 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	fb02 f303 	mul.w	r3, r2, r3
 8000970:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000972:	6978      	ldr	r0, [r7, #20]
 8000974:	f7ff fe82 	bl	800067c <pvPortMallocMicroROS>
 8000978:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800097e:	e004      	b.n	800098a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	613a      	str	r2, [r7, #16]
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	1e5a      	subs	r2, r3, #1
 800098e:	617a      	str	r2, [r7, #20]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1f5      	bne.n	8000980 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000994:	f004 fde4 	bl	8005560 <xTaskResumeAll>
  	return mem;
 8000998:	68fb      	ldr	r3, [r7, #12]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009aa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80009ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009b0:	4b27      	ldr	r3, [pc, #156]	@ (8000a50 <prvHeapInit+0xac>)
 80009b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d00c      	beq.n	80009d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	3307      	adds	r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f023 0307 	bic.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009cc:	68ba      	ldr	r2, [r7, #8]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a50 <prvHeapInit+0xac>)
 80009d4:	4413      	add	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a54 <prvHeapInit+0xb0>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <prvHeapInit+0xb0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	4413      	add	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009f0:	2208      	movs	r2, #8
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	1a9b      	subs	r3, r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f023 0307 	bic.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4a15      	ldr	r2, [pc, #84]	@ (8000a58 <prvHeapInit+0xb4>)
 8000a04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <prvHeapInit+0xb4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <prvHeapInit+0xb4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	1ad2      	subs	r2, r2, r3
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <prvHeapInit+0xb4>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <prvHeapInit+0xb8>)
 8000a32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	4a09      	ldr	r2, [pc, #36]	@ (8000a60 <prvHeapInit+0xbc>)
 8000a3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <prvHeapInit+0xc0>)
 8000a3e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a42:	601a      	str	r2, [r3, #0]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	200002e4 	.word	0x200002e4
 8000a54:	20003ee4 	.word	0x20003ee4
 8000a58:	20003eec 	.word	0x20003eec
 8000a5c:	20003ef4 	.word	0x20003ef4
 8000a60:	20003ef0 	.word	0x20003ef0
 8000a64:	20003ef8 	.word	0x20003ef8

08000a68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a70:	4b28      	ldr	r3, [pc, #160]	@ (8000b14 <prvInsertBlockIntoFreeList+0xac>)
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	e002      	b.n	8000a7c <prvInsertBlockIntoFreeList+0x14>
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d8f7      	bhi.n	8000a76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	4413      	add	r3, r2
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d108      	bne.n	8000aaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	441a      	add	r2, r3
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	441a      	add	r2, r3
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d118      	bne.n	8000af0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <prvInsertBlockIntoFreeList+0xb0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d00d      	beq.n	8000ae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	441a      	add	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	e008      	b.n	8000af8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <prvInsertBlockIntoFreeList+0xb0>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	e003      	b.n	8000af8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d002      	beq.n	8000b06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20003ee4 	.word	0x20003ee4
 8000b18:	20003eec 	.word	0x20003eec

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b20:	f000 fdce 	bl	80016c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b24:	f000 f81a 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b28:	f000 f8c8 	bl	8000cbc <MX_GPIO_Init>
  MX_DMA_Init();
 8000b2c:	f000 f89e 	bl	8000c6c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b30:	f000 f872 	bl	8000c18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b34:	f003 fbe8 	bl	8004308 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b38:	4a05      	ldr	r2, [pc, #20]	@ (8000b50 <main+0x34>)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <main+0x38>)
 8000b3e:	f003 fc2d 	bl	800439c <osThreadNew>
 8000b42:	4603      	mov	r3, r0
 8000b44:	4a04      	ldr	r2, [pc, #16]	@ (8000b58 <main+0x3c>)
 8000b46:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b48:	f003 fc02 	bl	8004350 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <main+0x30>
 8000b50:	080112a0 	.word	0x080112a0
 8000b54:	08000d29 	.word	0x08000d29
 8000b58:	20004004 	.word	0x20004004

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b094      	sub	sp, #80	@ 0x50
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0320 	add.w	r3, r7, #32
 8000b66:	2230      	movs	r2, #48	@ 0x30
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00f fb76 	bl	801025c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	4b22      	ldr	r3, [pc, #136]	@ (8000c10 <SystemClock_Config+0xb4>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b88:	4a21      	ldr	r2, [pc, #132]	@ (8000c10 <SystemClock_Config+0xb4>)
 8000b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b90:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <SystemClock_Config+0xb4>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <SystemClock_Config+0xb8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c14 <SystemClock_Config+0xb8>)
 8000ba6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <SystemClock_Config+0xb8>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc0:	2310      	movs	r3, #16
 8000bc2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc8:	f107 0320 	add.w	r3, r7, #32
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 fc81 	bl	80024d4 <HAL_RCC_OscConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000bd8:	f000 f930 	bl	8000e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bdc:	230f      	movs	r3, #15
 8000bde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 fee4 	bl	80029c4 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c02:	f000 f91b 	bl	8000e3c <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3750      	adds	r7, #80	@ 0x50
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40007000 	.word	0x40007000

08000c18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <MX_USART2_UART_Init+0x50>)
 8000c20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c50:	f002 f898 	bl	8002d84 <HAL_UART_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c5a:	f000 f8ef 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20003efc 	.word	0x20003efc
 8000c68:	40004400 	.word	0x40004400

08000c6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <MX_DMA_Init+0x4c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb8 <MX_DMA_Init+0x4c>)
 8000c7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <MX_DMA_Init+0x4c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2105      	movs	r1, #5
 8000c92:	2010      	movs	r0, #16
 8000c94:	f000 fe61 	bl	800195a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c98:	2010      	movs	r0, #16
 8000c9a:	f000 fe7a 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2105      	movs	r1, #5
 8000ca2:	2011      	movs	r0, #17
 8000ca4:	f000 fe59 	bl	800195a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ca8:	2011      	movs	r0, #17
 8000caa:	f000 fe72 	bl	8001992 <HAL_NVIC_EnableIRQ>

}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b17      	ldr	r3, [pc, #92]	@ (8000d24 <MX_GPIO_Init+0x68>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a16      	ldr	r2, [pc, #88]	@ (8000d24 <MX_GPIO_Init+0x68>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <MX_GPIO_Init+0x68>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <MX_GPIO_Init+0x68>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d24 <MX_GPIO_Init+0x68>)
 8000ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <MX_GPIO_Init+0x68>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <MX_GPIO_Init+0x68>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a08      	ldr	r2, [pc, #32]	@ (8000d24 <MX_GPIO_Init+0x68>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <MX_GPIO_Init+0x68>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800

08000d28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b0a6      	sub	sp, #152	@ 0x98
 8000d2c:	af02      	add	r7, sp, #8
 8000d2e:	61f8      	str	r0, [r7, #28]
	  /* USER CODE BEGIN 5 */

	  // micro-ROS configuration

	  rmw_uros_set_custom_transport(
 8000d30:	4b34      	ldr	r3, [pc, #208]	@ (8000e04 <StartDefaultTask+0xdc>)
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	4b34      	ldr	r3, [pc, #208]	@ (8000e08 <StartDefaultTask+0xe0>)
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	4b34      	ldr	r3, [pc, #208]	@ (8000e0c <StartDefaultTask+0xe4>)
 8000d3a:	4a35      	ldr	r2, [pc, #212]	@ (8000e10 <StartDefaultTask+0xe8>)
 8000d3c:	4935      	ldr	r1, [pc, #212]	@ (8000e14 <StartDefaultTask+0xec>)
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f006 fabe 	bl	80072c0 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000d44:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f006 fa33 	bl	80071b4 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8000d4e:	4b32      	ldr	r3, [pc, #200]	@ (8000e18 <StartDefaultTask+0xf0>)
 8000d50:	67bb      	str	r3, [r7, #120]	@ 0x78
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8000d52:	4b32      	ldr	r3, [pc, #200]	@ (8000e1c <StartDefaultTask+0xf4>)
 8000d54:	67fb      	str	r3, [r7, #124]	@ 0x7c
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8000d56:	4b32      	ldr	r3, [pc, #200]	@ (8000e20 <StartDefaultTask+0xf8>)
 8000d58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000d5c:	4b31      	ldr	r3, [pc, #196]	@ (8000e24 <StartDefaultTask+0xfc>)
 8000d5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000d62:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000d66:	4618      	mov	r0, r3
 8000d68:	f006 fa40 	bl	80071ec <rcutils_set_default_allocator>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	f083 0301 	eor.w	r3, r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d004      	beq.n	8000d82 <StartDefaultTask+0x5a>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8000d78:	f240 113f 	movw	r1, #319	@ 0x13f
 8000d7c:	482a      	ldr	r0, [pc, #168]	@ (8000e28 <StartDefaultTask+0x100>)
 8000d7e:	f00f f9a5 	bl	80100cc <iprintf>
	  std_msgs__msg__Int32 msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 8000d82:	463b      	mov	r3, r7
 8000d84:	4618      	mov	r0, r3
 8000d86:	f006 fa23 	bl	80071d0 <rcutils_get_default_allocator>
 8000d8a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000d8e:	463d      	mov	r5, r7
 8000d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d94:	682b      	ldr	r3, [r5, #0]
 8000d96:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8000d98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d9c:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8000da0:	2200      	movs	r2, #0
 8000da2:	2100      	movs	r1, #0
 8000da4:	f006 f944 	bl	8007030 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000da8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000dac:	f107 0020 	add.w	r0, r7, #32
 8000db0:	4a1e      	ldr	r2, [pc, #120]	@ (8000e2c <StartDefaultTask+0x104>)
 8000db2:	491f      	ldr	r1, [pc, #124]	@ (8000e30 <StartDefaultTask+0x108>)
 8000db4:	f006 f986 	bl	80070c4 <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 8000db8:	f006 ff12 	bl	8007be0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f107 0120 	add.w	r1, r7, #32
 8000dc2:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e34 <StartDefaultTask+0x10c>)
 8000dc8:	f006 f9b8 	bl	800713c <rclc_publisher_init_default>
	    &publisher,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    "cubemx_publisher");

	  msg.data = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	673b      	str	r3, [r7, #112]	@ 0x70

	  for(;;)
	  {
	    rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8000dd0:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8000dd4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000dd8:	2200      	movs	r2, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f006 f902 	bl	8006fe4 <rcl_publish>
 8000de0:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	    if (ret != RCL_RET_OK)
 8000de4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d004      	beq.n	8000df6 <StartDefaultTask+0xce>
	    {
	      printf("Error publishing (line %d)\n", __LINE__);
 8000dec:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8000df0:	4811      	ldr	r0, [pc, #68]	@ (8000e38 <StartDefaultTask+0x110>)
 8000df2:	f00f f96b 	bl	80100cc <iprintf>
	    }

	    msg.data++;
 8000df6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000df8:	3301      	adds	r3, #1
 8000dfa:	673b      	str	r3, [r7, #112]	@ 0x70
	    osDelay(1);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f003 fb5f 	bl	80044c0 <osDelay>
	  {
 8000e02:	e7e5      	b.n	8000dd0 <StartDefaultTask+0xa8>
 8000e04:	080015c5 	.word	0x080015c5
 8000e08:	0800155d 	.word	0x0800155d
 8000e0c:	0800153d 	.word	0x0800153d
 8000e10:	08001511 	.word	0x08001511
 8000e14:	20003efc 	.word	0x20003efc
 8000e18:	08000e49 	.word	0x08000e49
 8000e1c:	08000e8d 	.word	0x08000e8d
 8000e20:	08000ec5 	.word	0x08000ec5
 8000e24:	08000f31 	.word	0x08000f31
 8000e28:	08011214 	.word	0x08011214
 8000e2c:	0801123c 	.word	0x0801123c
 8000e30:	08011240 	.word	0x08011240
 8000e34:	0801124c 	.word	0x0801124c
 8000e38:	08011260 	.word	0x08011260

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <Error_Handler+0x8>

08000e48 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000e52:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <microros_allocate+0x3c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <microros_allocate+0x3c>)
 8000e60:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <microros_allocate+0x40>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <microros_allocate+0x40>)
 8000e70:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff fc02 	bl	800067c <pvPortMallocMicroROS>
 8000e78:	4603      	mov	r3, r0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20004008 	.word	0x20004008
 8000e88:	2000400c 	.word	0x2000400c

08000e8c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d00c      	beq.n	8000eb6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff fd11 	bl	80008c4 <getBlockSize>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4a06      	ldr	r2, [pc, #24]	@ (8000ec0 <microros_deallocate+0x34>)
 8000ea6:	6812      	ldr	r2, [r2, #0]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <microros_deallocate+0x34>)
 8000eae:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff fcab 	bl	800080c <vPortFreeMicroROS>
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000400c 	.word	0x2000400c

08000ec4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <microros_reallocate+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	4413      	add	r3, r2
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <microros_reallocate+0x64>)
 8000ede:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <microros_reallocate+0x68>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	4413      	add	r3, r2
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <microros_reallocate+0x68>)
 8000eee:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d104      	bne.n	8000f00 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8000ef6:	68b8      	ldr	r0, [r7, #8]
 8000ef8:	f7ff fbc0 	bl	800067c <pvPortMallocMicroROS>
 8000efc:	4603      	mov	r3, r0
 8000efe:	e00e      	b.n	8000f1e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f7ff fcdf 	bl	80008c4 <getBlockSize>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a08      	ldr	r2, [pc, #32]	@ (8000f2c <microros_reallocate+0x68>)
 8000f0a:	6812      	ldr	r2, [r2, #0]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <microros_reallocate+0x68>)
 8000f12:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	68f8      	ldr	r0, [r7, #12]
 8000f18:	f7ff fcf2 	bl	8000900 <pvPortReallocMicroROS>
 8000f1c:	4603      	mov	r3, r0
  }
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20004008 	.word	0x20004008
 8000f2c:	2000400c 	.word	0x2000400c

08000f30 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	fb02 f303 	mul.w	r3, r2, r3
 8000f44:	4a0c      	ldr	r2, [pc, #48]	@ (8000f78 <microros_zero_allocate+0x48>)
 8000f46:	6812      	ldr	r2, [r2, #0]
 8000f48:	4413      	add	r3, r2
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <microros_zero_allocate+0x48>)
 8000f4e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	fb02 f303 	mul.w	r3, r2, r3
 8000f58:	4a08      	ldr	r2, [pc, #32]	@ (8000f7c <microros_zero_allocate+0x4c>)
 8000f5a:	6812      	ldr	r2, [r2, #0]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <microros_zero_allocate+0x4c>)
 8000f62:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f7ff fcf7 	bl	800095a <pvPortCallocMicroROS>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20004008 	.word	0x20004008
 8000f7c:	2000400c 	.word	0x2000400c

08000f80 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8000f80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8000f92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f96:	a320      	add	r3, pc, #128	@ (adr r3, 8001018 <UTILS_NanosecondsToTimespec+0x98>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	f7ff f988 	bl	80002b0 <__aeabi_ldivmod>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8000faa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fae:	a31a      	add	r3, pc, #104	@ (adr r3, 8001018 <UTILS_NanosecondsToTimespec+0x98>)
 8000fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb4:	f7ff f97c 	bl	80002b0 <__aeabi_ldivmod>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	da20      	bge.n	8001006 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	4a11      	ldr	r2, [pc, #68]	@ (8001010 <UTILS_NanosecondsToTimespec+0x90>)
 8000fca:	fb82 1203 	smull	r1, r2, r2, r3
 8000fce:	1712      	asrs	r2, r2, #28
 8000fd0:	17db      	asrs	r3, r3, #31
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	6979      	ldr	r1, [r7, #20]
 8000fe0:	17c8      	asrs	r0, r1, #31
 8000fe2:	460c      	mov	r4, r1
 8000fe4:	4605      	mov	r5, r0
 8000fe6:	ebb2 0804 	subs.w	r8, r2, r4
 8000fea:	eb63 0905 	sbc.w	r9, r3, r5
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	4906      	ldr	r1, [pc, #24]	@ (8001014 <UTILS_NanosecondsToTimespec+0x94>)
 8000ffc:	fb01 f303 	mul.w	r3, r1, r3
 8001000:	441a      	add	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	609a      	str	r2, [r3, #8]
    }
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001010:	44b82fa1 	.word	0x44b82fa1
 8001014:	3b9aca00 	.word	0x3b9aca00
 8001018:	3b9aca00 	.word	0x3b9aca00
 800101c:	00000000 	.word	0x00000000

08001020 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001024:	b08e      	sub	sp, #56	@ 0x38
 8001026:	af00      	add	r7, sp, #0
 8001028:	6278      	str	r0, [r7, #36]	@ 0x24
 800102a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800102c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001030:	2300      	movs	r3, #0
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001042:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001046:	4618      	mov	r0, r3
 8001048:	f004 fd06 	bl	8005a58 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800104c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800104e:	17da      	asrs	r2, r3, #31
 8001050:	61bb      	str	r3, [r7, #24]
 8001052:	61fa      	str	r2, [r7, #28]
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	f04f 0300 	mov.w	r3, #0
 800105c:	69b9      	ldr	r1, [r7, #24]
 800105e:	000b      	movs	r3, r1
 8001060:	2200      	movs	r2, #0
 8001062:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001068:	2200      	movs	r2, #0
 800106a:	461c      	mov	r4, r3
 800106c:	4615      	mov	r5, r2
 800106e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001072:	1911      	adds	r1, r2, r4
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	416b      	adcs	r3, r5
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800107e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001082:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	f04f 0400 	mov.w	r4, #0
 800108e:	f04f 0500 	mov.w	r5, #0
 8001092:	015d      	lsls	r5, r3, #5
 8001094:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001098:	0154      	lsls	r4, r2, #5
 800109a:	4622      	mov	r2, r4
 800109c:	462b      	mov	r3, r5
 800109e:	ebb2 0800 	subs.w	r8, r2, r0
 80010a2:	eb63 0901 	sbc.w	r9, r3, r1
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	f04f 0300 	mov.w	r3, #0
 80010ae:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80010b2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80010b6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80010ba:	4690      	mov	r8, r2
 80010bc:	4699      	mov	r9, r3
 80010be:	eb18 0a00 	adds.w	sl, r8, r0
 80010c2:	eb49 0b01 	adc.w	fp, r9, r1
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	f04f 0300 	mov.w	r3, #0
 80010ce:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80010d2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80010d6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80010da:	ebb2 040a 	subs.w	r4, r2, sl
 80010de:	603c      	str	r4, [r7, #0]
 80010e0:	eb63 030b 	sbc.w	r3, r3, fp
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80010ea:	4623      	mov	r3, r4
 80010ec:	181b      	adds	r3, r3, r0
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	462b      	mov	r3, r5
 80010f2:	eb41 0303 	adc.w	r3, r1, r3
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	6a3a      	ldr	r2, [r7, #32]
 80010fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010fe:	f7ff ff3f 	bl	8000f80 <UTILS_NanosecondsToTimespec>

    return 0;
 8001102:	2300      	movs	r3, #0
 8001104:	4618      	mov	r0, r3
 8001106:	3738      	adds	r7, #56	@ 0x38
 8001108:	46bd      	mov	sp, r7
 800110a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <HAL_MspInit+0x54>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	4a11      	ldr	r2, [pc, #68]	@ (8001164 <HAL_MspInit+0x54>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001124:	6453      	str	r3, [r2, #68]	@ 0x44
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <HAL_MspInit+0x54>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <HAL_MspInit+0x54>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <HAL_MspInit+0x54>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001140:	6413      	str	r3, [r2, #64]	@ 0x40
 8001142:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <HAL_MspInit+0x54>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	210f      	movs	r1, #15
 8001152:	f06f 0001 	mvn.w	r0, #1
 8001156:	f000 fc00 	bl	800195a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800

08001168 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	@ 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a4c      	ldr	r2, [pc, #304]	@ (80012b8 <HAL_UART_MspInit+0x150>)
 8001186:	4293      	cmp	r3, r2
 8001188:	f040 8092 	bne.w	80012b0 <HAL_UART_MspInit+0x148>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	4b4a      	ldr	r3, [pc, #296]	@ (80012bc <HAL_UART_MspInit+0x154>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	4a49      	ldr	r2, [pc, #292]	@ (80012bc <HAL_UART_MspInit+0x154>)
 8001196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800119a:	6413      	str	r3, [r2, #64]	@ 0x40
 800119c:	4b47      	ldr	r3, [pc, #284]	@ (80012bc <HAL_UART_MspInit+0x154>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	4b43      	ldr	r3, [pc, #268]	@ (80012bc <HAL_UART_MspInit+0x154>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b0:	4a42      	ldr	r2, [pc, #264]	@ (80012bc <HAL_UART_MspInit+0x154>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b8:	4b40      	ldr	r3, [pc, #256]	@ (80012bc <HAL_UART_MspInit+0x154>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011c4:	230c      	movs	r3, #12
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d4:	2307      	movs	r3, #7
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4838      	ldr	r0, [pc, #224]	@ (80012c0 <HAL_UART_MspInit+0x158>)
 80011e0:	f000 fff4 	bl	80021cc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80011e4:	4b37      	ldr	r3, [pc, #220]	@ (80012c4 <HAL_UART_MspInit+0x15c>)
 80011e6:	4a38      	ldr	r2, [pc, #224]	@ (80012c8 <HAL_UART_MspInit+0x160>)
 80011e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80011ea:	4b36      	ldr	r3, [pc, #216]	@ (80012c4 <HAL_UART_MspInit+0x15c>)
 80011ec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011f2:	4b34      	ldr	r3, [pc, #208]	@ (80012c4 <HAL_UART_MspInit+0x15c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f8:	4b32      	ldr	r3, [pc, #200]	@ (80012c4 <HAL_UART_MspInit+0x15c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011fe:	4b31      	ldr	r3, [pc, #196]	@ (80012c4 <HAL_UART_MspInit+0x15c>)
 8001200:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001204:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001206:	4b2f      	ldr	r3, [pc, #188]	@ (80012c4 <HAL_UART_MspInit+0x15c>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800120c:	4b2d      	ldr	r3, [pc, #180]	@ (80012c4 <HAL_UART_MspInit+0x15c>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001212:	4b2c      	ldr	r3, [pc, #176]	@ (80012c4 <HAL_UART_MspInit+0x15c>)
 8001214:	2200      	movs	r2, #0
 8001216:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001218:	4b2a      	ldr	r3, [pc, #168]	@ (80012c4 <HAL_UART_MspInit+0x15c>)
 800121a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800121e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001220:	4b28      	ldr	r3, [pc, #160]	@ (80012c4 <HAL_UART_MspInit+0x15c>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001226:	4827      	ldr	r0, [pc, #156]	@ (80012c4 <HAL_UART_MspInit+0x15c>)
 8001228:	f000 fbce 	bl	80019c8 <HAL_DMA_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001232:	f7ff fe03 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a22      	ldr	r2, [pc, #136]	@ (80012c4 <HAL_UART_MspInit+0x15c>)
 800123a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800123c:	4a21      	ldr	r2, [pc, #132]	@ (80012c4 <HAL_UART_MspInit+0x15c>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001242:	4b22      	ldr	r3, [pc, #136]	@ (80012cc <HAL_UART_MspInit+0x164>)
 8001244:	4a22      	ldr	r2, [pc, #136]	@ (80012d0 <HAL_UART_MspInit+0x168>)
 8001246:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001248:	4b20      	ldr	r3, [pc, #128]	@ (80012cc <HAL_UART_MspInit+0x164>)
 800124a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800124e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001250:	4b1e      	ldr	r3, [pc, #120]	@ (80012cc <HAL_UART_MspInit+0x164>)
 8001252:	2240      	movs	r2, #64	@ 0x40
 8001254:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001256:	4b1d      	ldr	r3, [pc, #116]	@ (80012cc <HAL_UART_MspInit+0x164>)
 8001258:	2200      	movs	r2, #0
 800125a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800125c:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <HAL_UART_MspInit+0x164>)
 800125e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001262:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001264:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <HAL_UART_MspInit+0x164>)
 8001266:	2200      	movs	r2, #0
 8001268:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800126a:	4b18      	ldr	r3, [pc, #96]	@ (80012cc <HAL_UART_MspInit+0x164>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001270:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <HAL_UART_MspInit+0x164>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001276:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <HAL_UART_MspInit+0x164>)
 8001278:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800127c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800127e:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <HAL_UART_MspInit+0x164>)
 8001280:	2200      	movs	r2, #0
 8001282:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001284:	4811      	ldr	r0, [pc, #68]	@ (80012cc <HAL_UART_MspInit+0x164>)
 8001286:	f000 fb9f 	bl	80019c8 <HAL_DMA_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001290:	f7ff fdd4 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a0d      	ldr	r2, [pc, #52]	@ (80012cc <HAL_UART_MspInit+0x164>)
 8001298:	639a      	str	r2, [r3, #56]	@ 0x38
 800129a:	4a0c      	ldr	r2, [pc, #48]	@ (80012cc <HAL_UART_MspInit+0x164>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2105      	movs	r1, #5
 80012a4:	2026      	movs	r0, #38	@ 0x26
 80012a6:	f000 fb58 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012aa:	2026      	movs	r0, #38	@ 0x26
 80012ac:	f000 fb71 	bl	8001992 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	@ 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40004400 	.word	0x40004400
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	20003f44 	.word	0x20003f44
 80012c8:	40026088 	.word	0x40026088
 80012cc:	20003fa4 	.word	0x20003fa4
 80012d0:	400260a0 	.word	0x400260a0

080012d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <NMI_Handler+0x4>

080012dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <MemManage_Handler+0x4>

080012ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130e:	f000 fa29 	bl	8001764 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001312:	f004 fd25 	bl	8005d60 <xTaskGetSchedulerState>
 8001316:	4603      	mov	r3, r0
 8001318:	2b01      	cmp	r3, #1
 800131a:	d001      	beq.n	8001320 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800131c:	f005 fb1c 	bl	8006958 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001328:	4802      	ldr	r0, [pc, #8]	@ (8001334 <DMA1_Stream5_IRQHandler+0x10>)
 800132a:	f000 fce5 	bl	8001cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20003f44 	.word	0x20003f44

08001338 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800133c:	4802      	ldr	r0, [pc, #8]	@ (8001348 <DMA1_Stream6_IRQHandler+0x10>)
 800133e:	f000 fcdb 	bl	8001cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20003fa4 	.word	0x20003fa4

0800134c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001350:	4802      	ldr	r0, [pc, #8]	@ (800135c <USART2_IRQHandler+0x10>)
 8001352:	f001 fe87 	bl	8003064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20003efc 	.word	0x20003efc

08001360 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return 1;
 8001364:	2301      	movs	r3, #1
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_kill>:

int _kill(int pid, int sig)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800137a:	f00f f815 	bl	80103a8 <__errno>
 800137e:	4603      	mov	r3, r0
 8001380:	2216      	movs	r2, #22
 8001382:	601a      	str	r2, [r3, #0]
  return -1;
 8001384:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_exit>:

void _exit (int status)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001398:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ffe7 	bl	8001370 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013a2:	bf00      	nop
 80013a4:	e7fd      	b.n	80013a2 <_exit+0x12>

080013a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e00a      	b.n	80013ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013b8:	f3af 8000 	nop.w
 80013bc:	4601      	mov	r1, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	60ba      	str	r2, [r7, #8]
 80013c4:	b2ca      	uxtb	r2, r1
 80013c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	3301      	adds	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	dbf0      	blt.n	80013b8 <_read+0x12>
  }

  return len;
 80013d6:	687b      	ldr	r3, [r7, #4]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	e009      	b.n	8001406 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	60ba      	str	r2, [r7, #8]
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	429a      	cmp	r2, r3
 800140c:	dbf1      	blt.n	80013f2 <_write+0x12>
  }
  return len;
 800140e:	687b      	ldr	r3, [r7, #4]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_close>:

int _close(int file)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001440:	605a      	str	r2, [r3, #4]
  return 0;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_isatty>:

int _isatty(int file)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001466:	b480      	push	{r7}
 8001468:	b085      	sub	sp, #20
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001488:	4a14      	ldr	r2, [pc, #80]	@ (80014dc <_sbrk+0x5c>)
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <_sbrk+0x60>)
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001494:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <_sbrk+0x64>)
 800149e:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <_sbrk+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d207      	bcs.n	80014c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b0:	f00e ff7a 	bl	80103a8 <__errno>
 80014b4:	4603      	mov	r3, r0
 80014b6:	220c      	movs	r2, #12
 80014b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014be:	e009      	b.n	80014d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c6:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	4a05      	ldr	r2, [pc, #20]	@ (80014e4 <_sbrk+0x64>)
 80014d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20020000 	.word	0x20020000
 80014e0:	00000400 	.word	0x00000400
 80014e4:	20004014 	.word	0x20004014
 80014e8:	2000dd70 	.word	0x2000dd70

080014ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <SystemInit+0x20>)
 80014f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014f6:	4a05      	ldr	r2, [pc, #20]	@ (800150c <SystemInit+0x20>)
 80014f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800151e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001520:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001524:	4904      	ldr	r1, [pc, #16]	@ (8001538 <cubemx_transport_open+0x28>)
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f001 fcf8 	bl	8002f1c <HAL_UART_Receive_DMA>
    return true;
 800152c:	2301      	movs	r3, #1
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20004018 	.word	0x20004018

0800153c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800154a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f001 fd0a 	bl	8002f66 <HAL_UART_DMAStop>
    return true;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001570:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b20      	cmp	r3, #32
 800157c:	d11c      	bne.n	80015b8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	b29b      	uxth	r3, r3
 8001582:	461a      	mov	r2, r3
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	6978      	ldr	r0, [r7, #20]
 8001588:	f001 fc4c 	bl	8002e24 <HAL_UART_Transmit_DMA>
 800158c:	4603      	mov	r3, r0
 800158e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001590:	e002      	b.n	8001598 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001592:	2001      	movs	r0, #1
 8001594:	f002 ff94 	bl	80044c0 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001598:	7cfb      	ldrb	r3, [r7, #19]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d105      	bne.n	80015aa <cubemx_transport_write+0x4e>
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b20      	cmp	r3, #32
 80015a8:	d1f3      	bne.n	8001592 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80015aa:	7cfb      	ldrb	r3, [r7, #19]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <cubemx_transport_write+0x58>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	e002      	b.n	80015ba <cubemx_transport_write+0x5e>
 80015b4:	2300      	movs	r3, #0
 80015b6:	e000      	b.n	80015ba <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80015b8:	2300      	movs	r3, #0
    }
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
 80015d0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015d8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80015de:	b672      	cpsid	i
}
 80015e0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001660 <cubemx_transport_read+0x9c>)
 80015f0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015f2:	b662      	cpsie	i
}
 80015f4:	bf00      	nop
        __enable_irq();
        ms_used++;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3301      	adds	r3, #1
 80015fa:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f002 ff5f 	bl	80044c0 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001602:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <cubemx_transport_read+0xa0>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <cubemx_transport_read+0x9c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d103      	bne.n	8001616 <cubemx_transport_read+0x52>
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	dbe3      	blt.n	80015de <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800161a:	e011      	b.n	8001640 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <cubemx_transport_read+0xa0>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	440b      	add	r3, r1
 8001626:	4910      	ldr	r1, [pc, #64]	@ (8001668 <cubemx_transport_read+0xa4>)
 8001628:	5c8a      	ldrb	r2, [r1, r2]
 800162a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800162c:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <cubemx_transport_read+0xa0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	3301      	adds	r3, #1
 8001632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001636:	4a0b      	ldr	r2, [pc, #44]	@ (8001664 <cubemx_transport_read+0xa0>)
 8001638:	6013      	str	r3, [r2, #0]
        wrote++;
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	3301      	adds	r3, #1
 800163e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <cubemx_transport_read+0xa0>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <cubemx_transport_read+0x9c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d003      	beq.n	8001654 <cubemx_transport_read+0x90>
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	d3e3      	bcc.n	800161c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001654:	69bb      	ldr	r3, [r7, #24]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3720      	adds	r7, #32
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2000481c 	.word	0x2000481c
 8001664:	20004818 	.word	0x20004818
 8001668:	20004018 	.word	0x20004018

0800166c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001670:	f7ff ff3c 	bl	80014ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001674:	480c      	ldr	r0, [pc, #48]	@ (80016a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001676:	490d      	ldr	r1, [pc, #52]	@ (80016ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001678:	4a0d      	ldr	r2, [pc, #52]	@ (80016b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800168c:	4c0a      	ldr	r4, [pc, #40]	@ (80016b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169a:	f00e fe8b 	bl	80103b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169e:	f7ff fa3d 	bl	8000b1c <main>
  bx  lr    
 80016a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 80016b0:	08011fa8 	.word	0x08011fa8
  ldr r2, =_sbss
 80016b4:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 80016b8:	2000dd6c 	.word	0x2000dd6c

080016bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC_IRQHandler>
	...

080016c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001700 <HAL_Init+0x40>)
 80016ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <HAL_Init+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001700 <HAL_Init+0x40>)
 80016d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a07      	ldr	r2, [pc, #28]	@ (8001700 <HAL_Init+0x40>)
 80016e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 f92b 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ee:	200f      	movs	r0, #15
 80016f0:	f000 f808 	bl	8001704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f4:	f7ff fd0c 	bl	8001110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023c00 	.word	0x40023c00

08001704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_InitTick+0x54>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b12      	ldr	r3, [pc, #72]	@ (800175c <HAL_InitTick+0x58>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171a:	fbb3 f3f1 	udiv	r3, r3, r1
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f943 	bl	80019ae <HAL_SYSTICK_Config>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e00e      	b.n	8001750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d80a      	bhi.n	800174e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001740:	f000 f90b 	bl	800195a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001744:	4a06      	ldr	r2, [pc, #24]	@ (8001760 <HAL_InitTick+0x5c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000004 	.word	0x20000004
 800175c:	2000000c 	.word	0x2000000c
 8001760:	20000008 	.word	0x20000008

08001764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_IncTick+0x20>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_IncTick+0x24>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <HAL_IncTick+0x24>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	2000000c 	.word	0x2000000c
 8001788:	20004820 	.word	0x20004820

0800178c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;
 8001790:	4b03      	ldr	r3, [pc, #12]	@ (80017a0 <HAL_GetTick+0x14>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20004820 	.word	0x20004820

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4907      	ldr	r1, [pc, #28]	@ (8001840 <__NVIC_EnableIRQ+0x38>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	@ (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	@ (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	@ 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	@ 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001924:	f7ff ff8e 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	@ (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff29 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff3e 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff8e 	bl	8001898 <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5d 	bl	8001844 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff31 	bl	8001808 <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffa2 	bl	8001900 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7ff feda 	bl	800178c <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e099      	b.n	8001b18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a04:	e00f      	b.n	8001a26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a06:	f7ff fec1 	bl	800178c <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d908      	bls.n	8001a26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2220      	movs	r2, #32
 8001a18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e078      	b.n	8001b18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1e8      	bne.n	8001a06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	4b38      	ldr	r3, [pc, #224]	@ (8001b20 <HAL_DMA_Init+0x158>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d107      	bne.n	8001a90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f023 0307 	bic.w	r3, r3, #7
 8001aa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d117      	bne.n	8001aea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00e      	beq.n	8001aea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 fb01 	bl	80020d4 <DMA_CheckFifoParam>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2240      	movs	r2, #64	@ 0x40
 8001adc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e016      	b.n	8001b18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 fab8 	bl	8002068 <DMA_CalcBaseAndBitshift>
 8001af8:	4603      	mov	r3, r0
 8001afa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b00:	223f      	movs	r2, #63	@ 0x3f
 8001b02:	409a      	lsls	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	f010803f 	.word	0xf010803f

08001b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_DMA_Start_IT+0x26>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e040      	b.n	8001bcc <HAL_DMA_Start_IT+0xa8>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d12f      	bne.n	8001bbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2202      	movs	r2, #2
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 fa4a 	bl	800200c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7c:	223f      	movs	r2, #63	@ 0x3f
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0216 	orr.w	r2, r2, #22
 8001b92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d007      	beq.n	8001bac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0208 	orr.w	r2, r2, #8
 8001baa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e005      	b.n	8001bca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001be2:	f7ff fdd3 	bl	800178c <HAL_GetTick>
 8001be6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d008      	beq.n	8001c06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2280      	movs	r2, #128	@ 0x80
 8001bf8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e052      	b.n	8001cac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0216 	bic.w	r2, r2, #22
 8001c14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d103      	bne.n	8001c36 <HAL_DMA_Abort+0x62>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d007      	beq.n	8001c46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0208 	bic.w	r2, r2, #8
 8001c44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0201 	bic.w	r2, r2, #1
 8001c54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c56:	e013      	b.n	8001c80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c58:	f7ff fd98 	bl	800178c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d90c      	bls.n	8001c80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2203      	movs	r2, #3
 8001c70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e015      	b.n	8001cac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1e4      	bne.n	8001c58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c92:	223f      	movs	r2, #63	@ 0x3f
 8001c94:	409a      	lsls	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d004      	beq.n	8001cd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2280      	movs	r2, #128	@ 0x80
 8001ccc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00c      	b.n	8001cec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2205      	movs	r2, #5
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d04:	4b8e      	ldr	r3, [pc, #568]	@ (8001f40 <HAL_DMA_IRQHandler+0x248>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a8e      	ldr	r2, [pc, #568]	@ (8001f44 <HAL_DMA_IRQHandler+0x24c>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	0a9b      	lsrs	r3, r3, #10
 8001d10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d22:	2208      	movs	r2, #8
 8001d24:	409a      	lsls	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d01a      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d013      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0204 	bic.w	r2, r2, #4
 8001d4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d50:	2208      	movs	r2, #8
 8001d52:	409a      	lsls	r2, r3
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d5c:	f043 0201 	orr.w	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d68:	2201      	movs	r2, #1
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d012      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00b      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d86:	2201      	movs	r2, #1
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d92:	f043 0202 	orr.w	r2, r3, #2
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9e:	2204      	movs	r2, #4
 8001da0:	409a      	lsls	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d012      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00b      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc8:	f043 0204 	orr.w	r2, r3, #4
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd4:	2210      	movs	r2, #16
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d043      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d03c      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df2:	2210      	movs	r2, #16
 8001df4:	409a      	lsls	r2, r3
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d018      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d108      	bne.n	8001e28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d024      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	4798      	blx	r3
 8001e26:	e01f      	b.n	8001e68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01b      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	4798      	blx	r3
 8001e38:	e016      	b.n	8001e68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d107      	bne.n	8001e58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0208 	bic.w	r2, r2, #8
 8001e56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 808f 	beq.w	8001f98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 8087 	beq.w	8001f98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8e:	2220      	movs	r2, #32
 8001e90:	409a      	lsls	r2, r3
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	d136      	bne.n	8001f10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0216 	bic.w	r2, r2, #22
 8001eb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695a      	ldr	r2, [r3, #20]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ec0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <HAL_DMA_IRQHandler+0x1da>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0208 	bic.w	r2, r2, #8
 8001ee0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee6:	223f      	movs	r2, #63	@ 0x3f
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d07e      	beq.n	8002004 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	4798      	blx	r3
        }
        return;
 8001f0e:	e079      	b.n	8002004 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d01d      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10d      	bne.n	8001f48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d031      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	4798      	blx	r3
 8001f3c:	e02c      	b.n	8001f98 <HAL_DMA_IRQHandler+0x2a0>
 8001f3e:	bf00      	nop
 8001f40:	20000004 	.word	0x20000004
 8001f44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d023      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	4798      	blx	r3
 8001f58:	e01e      	b.n	8001f98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10f      	bne.n	8001f88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0210 	bic.w	r2, r2, #16
 8001f76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d032      	beq.n	8002006 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d022      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2205      	movs	r2, #5
 8001fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0201 	bic.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d307      	bcc.n	8001fe0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f2      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x2cc>
 8001fde:	e000      	b.n	8001fe2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fe0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
 8002002:	e000      	b.n	8002006 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002004:	bf00      	nop
    }
  }
}
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002028:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b40      	cmp	r3, #64	@ 0x40
 8002038:	d108      	bne.n	800204c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800204a:	e007      	b.n	800205c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	60da      	str	r2, [r3, #12]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	3b10      	subs	r3, #16
 8002078:	4a14      	ldr	r2, [pc, #80]	@ (80020cc <DMA_CalcBaseAndBitshift+0x64>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	091b      	lsrs	r3, r3, #4
 8002080:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002082:	4a13      	ldr	r2, [pc, #76]	@ (80020d0 <DMA_CalcBaseAndBitshift+0x68>)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b03      	cmp	r3, #3
 8002094:	d909      	bls.n	80020aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	1d1a      	adds	r2, r3, #4
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80020a8:	e007      	b.n	80020ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020b2:	f023 0303 	bic.w	r3, r3, #3
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	aaaaaaab 	.word	0xaaaaaaab
 80020d0:	080112dc 	.word	0x080112dc

080020d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d11f      	bne.n	800212e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d856      	bhi.n	80021a2 <DMA_CheckFifoParam+0xce>
 80020f4:	a201      	add	r2, pc, #4	@ (adr r2, 80020fc <DMA_CheckFifoParam+0x28>)
 80020f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fa:	bf00      	nop
 80020fc:	0800210d 	.word	0x0800210d
 8002100:	0800211f 	.word	0x0800211f
 8002104:	0800210d 	.word	0x0800210d
 8002108:	080021a3 	.word	0x080021a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d046      	beq.n	80021a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800211c:	e043      	b.n	80021a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002122:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002126:	d140      	bne.n	80021aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800212c:	e03d      	b.n	80021aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002136:	d121      	bne.n	800217c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2b03      	cmp	r3, #3
 800213c:	d837      	bhi.n	80021ae <DMA_CheckFifoParam+0xda>
 800213e:	a201      	add	r2, pc, #4	@ (adr r2, 8002144 <DMA_CheckFifoParam+0x70>)
 8002140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002144:	08002155 	.word	0x08002155
 8002148:	0800215b 	.word	0x0800215b
 800214c:	08002155 	.word	0x08002155
 8002150:	0800216d 	.word	0x0800216d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
      break;
 8002158:	e030      	b.n	80021bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d025      	beq.n	80021b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800216a:	e022      	b.n	80021b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002170:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002174:	d11f      	bne.n	80021b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800217a:	e01c      	b.n	80021b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d903      	bls.n	800218a <DMA_CheckFifoParam+0xb6>
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d003      	beq.n	8002190 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002188:	e018      	b.n	80021bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
      break;
 800218e:	e015      	b.n	80021bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002194:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00e      	beq.n	80021ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
      break;
 80021a0:	e00b      	b.n	80021ba <DMA_CheckFifoParam+0xe6>
      break;
 80021a2:	bf00      	nop
 80021a4:	e00a      	b.n	80021bc <DMA_CheckFifoParam+0xe8>
      break;
 80021a6:	bf00      	nop
 80021a8:	e008      	b.n	80021bc <DMA_CheckFifoParam+0xe8>
      break;
 80021aa:	bf00      	nop
 80021ac:	e006      	b.n	80021bc <DMA_CheckFifoParam+0xe8>
      break;
 80021ae:	bf00      	nop
 80021b0:	e004      	b.n	80021bc <DMA_CheckFifoParam+0xe8>
      break;
 80021b2:	bf00      	nop
 80021b4:	e002      	b.n	80021bc <DMA_CheckFifoParam+0xe8>
      break;   
 80021b6:	bf00      	nop
 80021b8:	e000      	b.n	80021bc <DMA_CheckFifoParam+0xe8>
      break;
 80021ba:	bf00      	nop
    }
  } 
  
  return status; 
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop

080021cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	@ 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	e159      	b.n	800249c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021e8:	2201      	movs	r2, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	429a      	cmp	r2, r3
 8002202:	f040 8148 	bne.w	8002496 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d005      	beq.n	800221e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221a:	2b02      	cmp	r3, #2
 800221c:	d130      	bne.n	8002280 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	2203      	movs	r2, #3
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002254:	2201      	movs	r2, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 0201 	and.w	r2, r3, #1
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b03      	cmp	r3, #3
 800228a:	d017      	beq.n	80022bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d123      	bne.n	8002310 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	08da      	lsrs	r2, r3, #3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3208      	adds	r2, #8
 80022d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	220f      	movs	r2, #15
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	08da      	lsrs	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3208      	adds	r2, #8
 800230a:	69b9      	ldr	r1, [r7, #24]
 800230c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	2203      	movs	r2, #3
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0203 	and.w	r2, r3, #3
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80a2 	beq.w	8002496 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	4b57      	ldr	r3, [pc, #348]	@ (80024b4 <HAL_GPIO_Init+0x2e8>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235a:	4a56      	ldr	r2, [pc, #344]	@ (80024b4 <HAL_GPIO_Init+0x2e8>)
 800235c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002360:	6453      	str	r3, [r2, #68]	@ 0x44
 8002362:	4b54      	ldr	r3, [pc, #336]	@ (80024b4 <HAL_GPIO_Init+0x2e8>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002366:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800236e:	4a52      	ldr	r2, [pc, #328]	@ (80024b8 <HAL_GPIO_Init+0x2ec>)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	3302      	adds	r3, #2
 8002376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	220f      	movs	r2, #15
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4013      	ands	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a49      	ldr	r2, [pc, #292]	@ (80024bc <HAL_GPIO_Init+0x2f0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d019      	beq.n	80023ce <HAL_GPIO_Init+0x202>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a48      	ldr	r2, [pc, #288]	@ (80024c0 <HAL_GPIO_Init+0x2f4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d013      	beq.n	80023ca <HAL_GPIO_Init+0x1fe>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a47      	ldr	r2, [pc, #284]	@ (80024c4 <HAL_GPIO_Init+0x2f8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00d      	beq.n	80023c6 <HAL_GPIO_Init+0x1fa>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a46      	ldr	r2, [pc, #280]	@ (80024c8 <HAL_GPIO_Init+0x2fc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d007      	beq.n	80023c2 <HAL_GPIO_Init+0x1f6>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a45      	ldr	r2, [pc, #276]	@ (80024cc <HAL_GPIO_Init+0x300>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d101      	bne.n	80023be <HAL_GPIO_Init+0x1f2>
 80023ba:	2304      	movs	r3, #4
 80023bc:	e008      	b.n	80023d0 <HAL_GPIO_Init+0x204>
 80023be:	2307      	movs	r3, #7
 80023c0:	e006      	b.n	80023d0 <HAL_GPIO_Init+0x204>
 80023c2:	2303      	movs	r3, #3
 80023c4:	e004      	b.n	80023d0 <HAL_GPIO_Init+0x204>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e002      	b.n	80023d0 <HAL_GPIO_Init+0x204>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_GPIO_Init+0x204>
 80023ce:	2300      	movs	r3, #0
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	f002 0203 	and.w	r2, r2, #3
 80023d6:	0092      	lsls	r2, r2, #2
 80023d8:	4093      	lsls	r3, r2
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e0:	4935      	ldr	r1, [pc, #212]	@ (80024b8 <HAL_GPIO_Init+0x2ec>)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	3302      	adds	r3, #2
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ee:	4b38      	ldr	r3, [pc, #224]	@ (80024d0 <HAL_GPIO_Init+0x304>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002412:	4a2f      	ldr	r2, [pc, #188]	@ (80024d0 <HAL_GPIO_Init+0x304>)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002418:	4b2d      	ldr	r3, [pc, #180]	@ (80024d0 <HAL_GPIO_Init+0x304>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800243c:	4a24      	ldr	r2, [pc, #144]	@ (80024d0 <HAL_GPIO_Init+0x304>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002442:	4b23      	ldr	r3, [pc, #140]	@ (80024d0 <HAL_GPIO_Init+0x304>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002466:	4a1a      	ldr	r2, [pc, #104]	@ (80024d0 <HAL_GPIO_Init+0x304>)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800246c:	4b18      	ldr	r3, [pc, #96]	@ (80024d0 <HAL_GPIO_Init+0x304>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002490:	4a0f      	ldr	r2, [pc, #60]	@ (80024d0 <HAL_GPIO_Init+0x304>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3301      	adds	r3, #1
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b0f      	cmp	r3, #15
 80024a0:	f67f aea2 	bls.w	80021e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	3724      	adds	r7, #36	@ 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40013800 	.word	0x40013800
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40020400 	.word	0x40020400
 80024c4:	40020800 	.word	0x40020800
 80024c8:	40020c00 	.word	0x40020c00
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40013c00 	.word	0x40013c00

080024d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e267      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d075      	beq.n	80025de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024f2:	4b88      	ldr	r3, [pc, #544]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d00c      	beq.n	8002518 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fe:	4b85      	ldr	r3, [pc, #532]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002506:	2b08      	cmp	r3, #8
 8002508:	d112      	bne.n	8002530 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250a:	4b82      	ldr	r3, [pc, #520]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002512:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002516:	d10b      	bne.n	8002530 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	4b7e      	ldr	r3, [pc, #504]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d05b      	beq.n	80025dc <HAL_RCC_OscConfig+0x108>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d157      	bne.n	80025dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e242      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002538:	d106      	bne.n	8002548 <HAL_RCC_OscConfig+0x74>
 800253a:	4b76      	ldr	r3, [pc, #472]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a75      	ldr	r2, [pc, #468]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e01d      	b.n	8002584 <HAL_RCC_OscConfig+0xb0>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0x98>
 8002552:	4b70      	ldr	r3, [pc, #448]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6f      	ldr	r2, [pc, #444]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b6d      	ldr	r3, [pc, #436]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a6c      	ldr	r2, [pc, #432]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e00b      	b.n	8002584 <HAL_RCC_OscConfig+0xb0>
 800256c:	4b69      	ldr	r3, [pc, #420]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a68      	ldr	r2, [pc, #416]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b66      	ldr	r3, [pc, #408]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a65      	ldr	r2, [pc, #404]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800257e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7ff f8fe 	bl	800178c <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002594:	f7ff f8fa 	bl	800178c <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	@ 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e207      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0xc0>
 80025b2:	e014      	b.n	80025de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7ff f8ea 	bl	800178c <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025bc:	f7ff f8e6 	bl	800178c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	@ 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e1f3      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ce:	4b51      	ldr	r3, [pc, #324]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0xe8>
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d063      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f6:	4b47      	ldr	r3, [pc, #284]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d11c      	bne.n	800263c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002602:	4b44      	ldr	r3, [pc, #272]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d116      	bne.n	800263c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	4b41      	ldr	r3, [pc, #260]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_RCC_OscConfig+0x152>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e1c7      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002626:	4b3b      	ldr	r3, [pc, #236]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4937      	ldr	r1, [pc, #220]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	e03a      	b.n	80026b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d020      	beq.n	8002686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002644:	4b34      	ldr	r3, [pc, #208]	@ (8002718 <HAL_RCC_OscConfig+0x244>)
 8002646:	2201      	movs	r2, #1
 8002648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7ff f89f 	bl	800178c <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002652:	f7ff f89b 	bl	800178c <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e1a8      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002664:	4b2b      	ldr	r3, [pc, #172]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002670:	4b28      	ldr	r3, [pc, #160]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4925      	ldr	r1, [pc, #148]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]
 8002684:	e015      	b.n	80026b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002686:	4b24      	ldr	r3, [pc, #144]	@ (8002718 <HAL_RCC_OscConfig+0x244>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7ff f87e 	bl	800178c <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002694:	f7ff f87a 	bl	800178c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e187      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d036      	beq.n	800272c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d016      	beq.n	80026f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c6:	4b15      	ldr	r3, [pc, #84]	@ (800271c <HAL_RCC_OscConfig+0x248>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7ff f85e 	bl	800178c <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d4:	f7ff f85a 	bl	800178c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e167      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80026e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x200>
 80026f2:	e01b      	b.n	800272c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f4:	4b09      	ldr	r3, [pc, #36]	@ (800271c <HAL_RCC_OscConfig+0x248>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fa:	f7ff f847 	bl	800178c <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002700:	e00e      	b.n	8002720 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002702:	f7ff f843 	bl	800178c <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d907      	bls.n	8002720 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e150      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
 8002714:	40023800 	.word	0x40023800
 8002718:	42470000 	.word	0x42470000
 800271c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002720:	4b88      	ldr	r3, [pc, #544]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1ea      	bne.n	8002702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8097 	beq.w	8002868 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273e:	4b81      	ldr	r3, [pc, #516]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10f      	bne.n	800276a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	4b7d      	ldr	r3, [pc, #500]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	4a7c      	ldr	r2, [pc, #496]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	@ 0x40
 800275a:	4b7a      	ldr	r3, [pc, #488]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	4b77      	ldr	r3, [pc, #476]	@ (8002948 <HAL_RCC_OscConfig+0x474>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d118      	bne.n	80027a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002776:	4b74      	ldr	r3, [pc, #464]	@ (8002948 <HAL_RCC_OscConfig+0x474>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a73      	ldr	r2, [pc, #460]	@ (8002948 <HAL_RCC_OscConfig+0x474>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002782:	f7ff f803 	bl	800178c <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278a:	f7fe ffff 	bl	800178c <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e10c      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	4b6a      	ldr	r3, [pc, #424]	@ (8002948 <HAL_RCC_OscConfig+0x474>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x2ea>
 80027b0:	4b64      	ldr	r3, [pc, #400]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b4:	4a63      	ldr	r2, [pc, #396]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80027bc:	e01c      	b.n	80027f8 <HAL_RCC_OscConfig+0x324>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b05      	cmp	r3, #5
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x30c>
 80027c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80027de:	e00b      	b.n	80027f8 <HAL_RCC_OscConfig+0x324>
 80027e0:	4b58      	ldr	r3, [pc, #352]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e4:	4a57      	ldr	r2, [pc, #348]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027e6:	f023 0301 	bic.w	r3, r3, #1
 80027ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ec:	4b55      	ldr	r3, [pc, #340]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f0:	4a54      	ldr	r2, [pc, #336]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027f2:	f023 0304 	bic.w	r3, r3, #4
 80027f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d015      	beq.n	800282c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe ffc4 	bl	800178c <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe ffc0 	bl	800178c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0cb      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281e:	4b49      	ldr	r3, [pc, #292]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0ee      	beq.n	8002808 <HAL_RCC_OscConfig+0x334>
 800282a:	e014      	b.n	8002856 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282c:	f7fe ffae 	bl	800178c <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002832:	e00a      	b.n	800284a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002834:	f7fe ffaa 	bl	800178c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e0b5      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284a:	4b3e      	ldr	r3, [pc, #248]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1ee      	bne.n	8002834 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285c:	4b39      	ldr	r3, [pc, #228]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	4a38      	ldr	r2, [pc, #224]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002866:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80a1 	beq.w	80029b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002872:	4b34      	ldr	r3, [pc, #208]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b08      	cmp	r3, #8
 800287c:	d05c      	beq.n	8002938 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d141      	bne.n	800290a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002886:	4b31      	ldr	r3, [pc, #196]	@ (800294c <HAL_RCC_OscConfig+0x478>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe ff7e 	bl	800178c <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe ff7a 	bl	800178c <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e087      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	4b27      	ldr	r3, [pc, #156]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	019b      	lsls	r3, r3, #6
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	085b      	lsrs	r3, r3, #1
 80028ca:	3b01      	subs	r3, #1
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	491b      	ldr	r1, [pc, #108]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028dc:	4b1b      	ldr	r3, [pc, #108]	@ (800294c <HAL_RCC_OscConfig+0x478>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fe ff53 	bl	800178c <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe ff4f 	bl	800178c <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e05c      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fc:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x416>
 8002908:	e054      	b.n	80029b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290a:	4b10      	ldr	r3, [pc, #64]	@ (800294c <HAL_RCC_OscConfig+0x478>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe ff3c 	bl	800178c <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe ff38 	bl	800178c <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e045      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x444>
 8002936:	e03d      	b.n	80029b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d107      	bne.n	8002950 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e038      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
 8002944:	40023800 	.word	0x40023800
 8002948:	40007000 	.word	0x40007000
 800294c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002950:	4b1b      	ldr	r3, [pc, #108]	@ (80029c0 <HAL_RCC_OscConfig+0x4ec>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d028      	beq.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d121      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d11a      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002980:	4013      	ands	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002988:	4293      	cmp	r3, r2
 800298a:	d111      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002996:	085b      	lsrs	r3, r3, #1
 8002998:	3b01      	subs	r3, #1
 800299a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800

080029c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0cc      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029d8:	4b68      	ldr	r3, [pc, #416]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d90c      	bls.n	8002a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b65      	ldr	r3, [pc, #404]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b63      	ldr	r3, [pc, #396]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0b8      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d020      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a18:	4b59      	ldr	r3, [pc, #356]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	4a58      	ldr	r2, [pc, #352]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a30:	4b53      	ldr	r3, [pc, #332]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4a52      	ldr	r2, [pc, #328]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a3c:	4b50      	ldr	r3, [pc, #320]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	494d      	ldr	r1, [pc, #308]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d044      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d107      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	4b47      	ldr	r3, [pc, #284]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d119      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e07f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d003      	beq.n	8002a82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a82:	4b3f      	ldr	r3, [pc, #252]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e06f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a92:	4b3b      	ldr	r3, [pc, #236]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e067      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa2:	4b37      	ldr	r3, [pc, #220]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f023 0203 	bic.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4934      	ldr	r1, [pc, #208]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab4:	f7fe fe6a 	bl	800178c <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7fe fe66 	bl	800178c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e04f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 020c 	and.w	r2, r3, #12
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d1eb      	bne.n	8002abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b25      	ldr	r3, [pc, #148]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d20c      	bcs.n	8002b0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b22      	ldr	r3, [pc, #136]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b20      	ldr	r3, [pc, #128]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e032      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b18:	4b19      	ldr	r3, [pc, #100]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4916      	ldr	r1, [pc, #88]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b36:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	490e      	ldr	r1, [pc, #56]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b4a:	f000 f821 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	490a      	ldr	r1, [pc, #40]	@ (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5c:	5ccb      	ldrb	r3, [r1, r3]
 8002b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b62:	4a09      	ldr	r2, [pc, #36]	@ (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b66:	4b09      	ldr	r3, [pc, #36]	@ (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe fdca 	bl	8001704 <HAL_InitTick>

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023c00 	.word	0x40023c00
 8002b80:	40023800 	.word	0x40023800
 8002b84:	080112c4 	.word	0x080112c4
 8002b88:	20000004 	.word	0x20000004
 8002b8c:	20000008 	.word	0x20000008

08002b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b94:	b090      	sub	sp, #64	@ 0x40
 8002b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ba8:	4b59      	ldr	r3, [pc, #356]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 030c 	and.w	r3, r3, #12
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d00d      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	f200 80a1 	bhi.w	8002cfc <HAL_RCC_GetSysClockFreq+0x16c>
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d003      	beq.n	8002bca <HAL_RCC_GetSysClockFreq+0x3a>
 8002bc2:	e09b      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc4:	4b53      	ldr	r3, [pc, #332]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bc8:	e09b      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bca:	4b53      	ldr	r3, [pc, #332]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bce:	e098      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bd0:	4b4f      	ldr	r3, [pc, #316]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bd8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bda:	4b4d      	ldr	r3, [pc, #308]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d028      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be6:	4b4a      	ldr	r3, [pc, #296]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	099b      	lsrs	r3, r3, #6
 8002bec:	2200      	movs	r2, #0
 8002bee:	623b      	str	r3, [r7, #32]
 8002bf0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4b47      	ldr	r3, [pc, #284]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bfc:	fb03 f201 	mul.w	r2, r3, r1
 8002c00:	2300      	movs	r3, #0
 8002c02:	fb00 f303 	mul.w	r3, r0, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	4a43      	ldr	r2, [pc, #268]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c0a:	fba0 1202 	umull	r1, r2, r0, r2
 8002c0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c10:	460a      	mov	r2, r1
 8002c12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c16:	4413      	add	r3, r2
 8002c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	61bb      	str	r3, [r7, #24]
 8002c20:	61fa      	str	r2, [r7, #28]
 8002c22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c2a:	f7fd fb91 	bl	8000350 <__aeabi_uldivmod>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4613      	mov	r3, r2
 8002c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c36:	e053      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c38:	4b35      	ldr	r3, [pc, #212]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	099b      	lsrs	r3, r3, #6
 8002c3e:	2200      	movs	r2, #0
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	617a      	str	r2, [r7, #20]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c4a:	f04f 0b00 	mov.w	fp, #0
 8002c4e:	4652      	mov	r2, sl
 8002c50:	465b      	mov	r3, fp
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	f04f 0100 	mov.w	r1, #0
 8002c5a:	0159      	lsls	r1, r3, #5
 8002c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c60:	0150      	lsls	r0, r2, #5
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	ebb2 080a 	subs.w	r8, r2, sl
 8002c6a:	eb63 090b 	sbc.w	r9, r3, fp
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c82:	ebb2 0408 	subs.w	r4, r2, r8
 8002c86:	eb63 0509 	sbc.w	r5, r3, r9
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	00eb      	lsls	r3, r5, #3
 8002c94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c98:	00e2      	lsls	r2, r4, #3
 8002c9a:	4614      	mov	r4, r2
 8002c9c:	461d      	mov	r5, r3
 8002c9e:	eb14 030a 	adds.w	r3, r4, sl
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	eb45 030b 	adc.w	r3, r5, fp
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	028b      	lsls	r3, r1, #10
 8002cba:	4621      	mov	r1, r4
 8002cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	028a      	lsls	r2, r1, #10
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	60fa      	str	r2, [r7, #12]
 8002cd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cd4:	f7fd fb3c 	bl	8000350 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4613      	mov	r3, r2
 8002cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	3301      	adds	r3, #1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002cf0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cfa:	e002      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3740      	adds	r7, #64	@ 0x40
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800
 8002d14:	00f42400 	.word	0x00f42400
 8002d18:	017d7840 	.word	0x017d7840

08002d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d20:	4b03      	ldr	r3, [pc, #12]	@ (8002d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000004 	.word	0x20000004

08002d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d38:	f7ff fff0 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	0a9b      	lsrs	r3, r3, #10
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	4903      	ldr	r1, [pc, #12]	@ (8002d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d4a:	5ccb      	ldrb	r3, [r1, r3]
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40023800 	.word	0x40023800
 8002d58:	080112d4 	.word	0x080112d4

08002d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d60:	f7ff ffdc 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b05      	ldr	r3, [pc, #20]	@ (8002d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	0b5b      	lsrs	r3, r3, #13
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	4903      	ldr	r1, [pc, #12]	@ (8002d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	080112d4 	.word	0x080112d4

08002d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e042      	b.n	8002e1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fe f9dc 	bl	8001168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2224      	movs	r2, #36	@ 0x24
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fff5 	bl	8003db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08c      	sub	sp, #48	@ 0x30
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d162      	bne.n	8002f04 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_UART_Transmit_DMA+0x26>
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e05b      	b.n	8002f06 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	88fa      	ldrh	r2, [r7, #6]
 8002e58:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	88fa      	ldrh	r2, [r7, #6]
 8002e5e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2221      	movs	r2, #33	@ 0x21
 8002e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e72:	4a27      	ldr	r2, [pc, #156]	@ (8002f10 <HAL_UART_Transmit_DMA+0xec>)
 8002e74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7a:	4a26      	ldr	r2, [pc, #152]	@ (8002f14 <HAL_UART_Transmit_DMA+0xf0>)
 8002e7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e82:	4a25      	ldr	r2, [pc, #148]	@ (8002f18 <HAL_UART_Transmit_DMA+0xf4>)
 8002e84:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8002e8e:	f107 0308 	add.w	r3, r7, #8
 8002e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e9a:	6819      	ldr	r1, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	f7fe fe3d 	bl	8001b24 <HAL_DMA_Start_IT>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2210      	movs	r2, #16
 8002eb4:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e021      	b.n	8002f06 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002eca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3314      	adds	r3, #20
 8002ed2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	e853 3f00 	ldrex	r3, [r3]
 8002eda:	617b      	str	r3, [r7, #20]
   return(result);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3314      	adds	r3, #20
 8002eea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002eec:	627a      	str	r2, [r7, #36]	@ 0x24
 8002eee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef0:	6a39      	ldr	r1, [r7, #32]
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef4:	e841 2300 	strex	r3, r2, [r1]
 8002ef8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1e5      	bne.n	8002ecc <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	e000      	b.n	8002f06 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8002f04:	2302      	movs	r3, #2
  }
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3730      	adds	r7, #48	@ 0x30
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	08003635 	.word	0x08003635
 8002f14:	080036cf 	.word	0x080036cf
 8002f18:	08003853 	.word	0x08003853

08002f1c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	4613      	mov	r3, r2
 8002f28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d112      	bne.n	8002f5c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <HAL_UART_Receive_DMA+0x26>
 8002f3c:	88fb      	ldrh	r3, [r7, #6]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e00b      	b.n	8002f5e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fcc8 	bl	80038e8 <UART_Start_Receive_DMA>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	e000      	b.n	8002f5e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002f5c:	2302      	movs	r3, #2
  }
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b090      	sub	sp, #64	@ 0x40
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7c:	2b80      	cmp	r3, #128	@ 0x80
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b21      	cmp	r3, #33	@ 0x21
 8002f92:	d128      	bne.n	8002fe6 <HAL_UART_DMAStop+0x80>
 8002f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d025      	beq.n	8002fe6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3314      	adds	r3, #20
 8002fa0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	e853 3f00 	ldrex	r3, [r3]
 8002fa8:	623b      	str	r3, [r7, #32]
   return(result);
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3314      	adds	r3, #20
 8002fb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fba:	633a      	str	r2, [r7, #48]	@ 0x30
 8002fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fc2:	e841 2300 	strex	r3, r2, [r1]
 8002fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1e5      	bne.n	8002f9a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d004      	beq.n	8002fe0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fdfa 	bl	8001bd4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fd27 	bl	8003a34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff0:	2b40      	cmp	r3, #64	@ 0x40
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b22      	cmp	r3, #34	@ 0x22
 8003006:	d128      	bne.n	800305a <HAL_UART_DMAStop+0xf4>
 8003008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d025      	beq.n	800305a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3314      	adds	r3, #20
 8003014:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	60fb      	str	r3, [r7, #12]
   return(result);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003024:	637b      	str	r3, [r7, #52]	@ 0x34
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3314      	adds	r3, #20
 800302c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800302e:	61fa      	str	r2, [r7, #28]
 8003030:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	69b9      	ldr	r1, [r7, #24]
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	617b      	str	r3, [r7, #20]
   return(result);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e5      	bne.n	800300e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003046:	2b00      	cmp	r3, #0
 8003048:	d004      	beq.n	8003054 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe fdc0 	bl	8001bd4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fd15 	bl	8003a84 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3740      	adds	r7, #64	@ 0x40
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b0ba      	sub	sp, #232	@ 0xe8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800308a:	2300      	movs	r3, #0
 800308c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003090:	2300      	movs	r3, #0
 8003092:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80030a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10f      	bne.n	80030ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d009      	beq.n	80030ca <HAL_UART_IRQHandler+0x66>
 80030b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fdba 	bl	8003c3c <UART_Receive_IT>
      return;
 80030c8:	e273      	b.n	80035b2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80de 	beq.w	8003290 <HAL_UART_IRQHandler+0x22c>
 80030d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d106      	bne.n	80030ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80d1 	beq.w	8003290 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00b      	beq.n	8003112 <HAL_UART_IRQHandler+0xae>
 80030fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	f043 0201 	orr.w	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00b      	beq.n	8003136 <HAL_UART_IRQHandler+0xd2>
 800311e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312e:	f043 0202 	orr.w	r2, r3, #2
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <HAL_UART_IRQHandler+0xf6>
 8003142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003152:	f043 0204 	orr.w	r2, r3, #4
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800315a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d011      	beq.n	800318a <HAL_UART_IRQHandler+0x126>
 8003166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b00      	cmp	r3, #0
 8003170:	d105      	bne.n	800317e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	f043 0208 	orr.w	r2, r3, #8
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 820a 	beq.w	80035a8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_UART_IRQHandler+0x14e>
 80031a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fd45 	bl	8003c3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031bc:	2b40      	cmp	r3, #64	@ 0x40
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d103      	bne.n	80031de <HAL_UART_IRQHandler+0x17a>
 80031d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d04f      	beq.n	800327e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fc50 	bl	8003a84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ee:	2b40      	cmp	r3, #64	@ 0x40
 80031f0:	d141      	bne.n	8003276 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3314      	adds	r3, #20
 80031f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003200:	e853 3f00 	ldrex	r3, [r3]
 8003204:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003208:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800320c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003210:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3314      	adds	r3, #20
 800321a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800321e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003222:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003226:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800322a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800322e:	e841 2300 	strex	r3, r2, [r1]
 8003232:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1d9      	bne.n	80031f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003242:	2b00      	cmp	r3, #0
 8003244:	d013      	beq.n	800326e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324a:	4a8a      	ldr	r2, [pc, #552]	@ (8003474 <HAL_UART_IRQHandler+0x410>)
 800324c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe fd2e 	bl	8001cb4 <HAL_DMA_Abort_IT>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d016      	beq.n	800328c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003268:	4610      	mov	r0, r2
 800326a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326c:	e00e      	b.n	800328c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f9ca 	bl	8003608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003274:	e00a      	b.n	800328c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f9c6 	bl	8003608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327c:	e006      	b.n	800328c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f9c2 	bl	8003608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800328a:	e18d      	b.n	80035a8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328c:	bf00      	nop
    return;
 800328e:	e18b      	b.n	80035a8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003294:	2b01      	cmp	r3, #1
 8003296:	f040 8167 	bne.w	8003568 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800329a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8160 	beq.w	8003568 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80032a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8159 	beq.w	8003568 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d6:	2b40      	cmp	r3, #64	@ 0x40
 80032d8:	f040 80ce 	bne.w	8003478 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80a9 	beq.w	8003444 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80032f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032fa:	429a      	cmp	r2, r3
 80032fc:	f080 80a2 	bcs.w	8003444 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003306:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003312:	f000 8088 	beq.w	8003426 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	330c      	adds	r3, #12
 800331c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003320:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800332c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	330c      	adds	r3, #12
 800333e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003342:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003346:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800334e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003352:	e841 2300 	strex	r3, r2, [r1]
 8003356:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800335a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1d9      	bne.n	8003316 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3314      	adds	r3, #20
 8003368:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800336c:	e853 3f00 	ldrex	r3, [r3]
 8003370:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003372:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003374:	f023 0301 	bic.w	r3, r3, #1
 8003378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3314      	adds	r3, #20
 8003382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003386:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800338a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800338e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003392:	e841 2300 	strex	r3, r2, [r1]
 8003396:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003398:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1e1      	bne.n	8003362 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3314      	adds	r3, #20
 80033a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80033ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3314      	adds	r3, #20
 80033be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1e3      	bne.n	800339e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	330c      	adds	r3, #12
 80033ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033ee:	e853 3f00 	ldrex	r3, [r3]
 80033f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033f6:	f023 0310 	bic.w	r3, r3, #16
 80033fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	330c      	adds	r3, #12
 8003404:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003408:	65ba      	str	r2, [r7, #88]	@ 0x58
 800340a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800340e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003410:	e841 2300 	strex	r3, r2, [r1]
 8003414:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e3      	bne.n	80033e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003420:	4618      	mov	r0, r3
 8003422:	f7fe fbd7 	bl	8001bd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2202      	movs	r2, #2
 800342a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003434:	b29b      	uxth	r3, r3
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	b29b      	uxth	r3, r3
 800343a:	4619      	mov	r1, r3
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f8ed 	bl	800361c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003442:	e0b3      	b.n	80035ac <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003448:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800344c:	429a      	cmp	r2, r3
 800344e:	f040 80ad 	bne.w	80035ac <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800345c:	f040 80a6 	bne.w	80035ac <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800346a:	4619      	mov	r1, r3
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f8d5 	bl	800361c <HAL_UARTEx_RxEventCallback>
      return;
 8003472:	e09b      	b.n	80035ac <HAL_UART_IRQHandler+0x548>
 8003474:	08003b4b 	.word	0x08003b4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003480:	b29b      	uxth	r3, r3
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 808e 	beq.w	80035b0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003494:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8089 	beq.w	80035b0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	330c      	adds	r3, #12
 80034a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	330c      	adds	r3, #12
 80034be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80034c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e3      	bne.n	800349e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3314      	adds	r3, #20
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	623b      	str	r3, [r7, #32]
   return(result);
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3314      	adds	r3, #20
 80034f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80034fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e3      	bne.n	80034d6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	330c      	adds	r3, #12
 8003522:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	e853 3f00 	ldrex	r3, [r3]
 800352a:	60fb      	str	r3, [r7, #12]
   return(result);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0310 	bic.w	r3, r3, #16
 8003532:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003540:	61fa      	str	r2, [r7, #28]
 8003542:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003544:	69b9      	ldr	r1, [r7, #24]
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	e841 2300 	strex	r3, r2, [r1]
 800354c:	617b      	str	r3, [r7, #20]
   return(result);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e3      	bne.n	800351c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800355a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800355e:	4619      	mov	r1, r3
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f85b 	bl	800361c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003566:	e023      	b.n	80035b0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800356c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003570:	2b00      	cmp	r3, #0
 8003572:	d009      	beq.n	8003588 <HAL_UART_IRQHandler+0x524>
 8003574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 faf3 	bl	8003b6c <UART_Transmit_IT>
    return;
 8003586:	e014      	b.n	80035b2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800358c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00e      	beq.n	80035b2 <HAL_UART_IRQHandler+0x54e>
 8003594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fb33 	bl	8003c0c <UART_EndTransmit_IT>
    return;
 80035a6:	e004      	b.n	80035b2 <HAL_UART_IRQHandler+0x54e>
    return;
 80035a8:	bf00      	nop
 80035aa:	e002      	b.n	80035b2 <HAL_UART_IRQHandler+0x54e>
      return;
 80035ac:	bf00      	nop
 80035ae:	e000      	b.n	80035b2 <HAL_UART_IRQHandler+0x54e>
      return;
 80035b0:	bf00      	nop
  }
}
 80035b2:	37e8      	adds	r7, #232	@ 0xe8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b090      	sub	sp, #64	@ 0x40
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003640:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d137      	bne.n	80036c0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003652:	2200      	movs	r2, #0
 8003654:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3314      	adds	r3, #20
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	623b      	str	r3, [r7, #32]
   return(result);
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800366c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800366e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3314      	adds	r3, #20
 8003674:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003676:	633a      	str	r2, [r7, #48]	@ 0x30
 8003678:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800367c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1e5      	bne.n	8003656 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800368a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	330c      	adds	r3, #12
 8003690:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	e853 3f00 	ldrex	r3, [r3]
 8003698:	60fb      	str	r3, [r7, #12]
   return(result);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80036a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	330c      	adds	r3, #12
 80036a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036aa:	61fa      	str	r2, [r7, #28]
 80036ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ae:	69b9      	ldr	r1, [r7, #24]
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	e841 2300 	strex	r3, r2, [r1]
 80036b6:	617b      	str	r3, [r7, #20]
   return(result);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e5      	bne.n	800368a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80036be:	e002      	b.n	80036c6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80036c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80036c2:	f7ff ff79 	bl	80035b8 <HAL_UART_TxCpltCallback>
}
 80036c6:	bf00      	nop
 80036c8:	3740      	adds	r7, #64	@ 0x40
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f7ff ff75 	bl	80035cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b09c      	sub	sp, #112	@ 0x70
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003702:	2b00      	cmp	r3, #0
 8003704:	d172      	bne.n	80037ec <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003706:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003708:	2200      	movs	r2, #0
 800370a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800370c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	330c      	adds	r3, #12
 8003712:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003716:	e853 3f00 	ldrex	r3, [r3]
 800371a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800371c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800371e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003722:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003724:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330c      	adds	r3, #12
 800372a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800372c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800372e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003732:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003734:	e841 2300 	strex	r3, r2, [r1]
 8003738:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800373a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e5      	bne.n	800370c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003740:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3314      	adds	r3, #20
 8003746:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800374a:	e853 3f00 	ldrex	r3, [r3]
 800374e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003752:	f023 0301 	bic.w	r3, r3, #1
 8003756:	667b      	str	r3, [r7, #100]	@ 0x64
 8003758:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3314      	adds	r3, #20
 800375e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003760:	647a      	str	r2, [r7, #68]	@ 0x44
 8003762:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003766:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800376e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e5      	bne.n	8003740 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003774:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3314      	adds	r3, #20
 800377a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	623b      	str	r3, [r7, #32]
   return(result);
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800378a:	663b      	str	r3, [r7, #96]	@ 0x60
 800378c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3314      	adds	r3, #20
 8003792:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003794:	633a      	str	r2, [r7, #48]	@ 0x30
 8003796:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800379a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e5      	bne.n	8003774 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d119      	bne.n	80037ec <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	330c      	adds	r3, #12
 80037be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	e853 3f00 	ldrex	r3, [r3]
 80037c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0310 	bic.w	r3, r3, #16
 80037ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	330c      	adds	r3, #12
 80037d6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80037d8:	61fa      	str	r2, [r7, #28]
 80037da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037dc:	69b9      	ldr	r1, [r7, #24]
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	e841 2300 	strex	r3, r2, [r1]
 80037e4:	617b      	str	r3, [r7, #20]
   return(result);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e5      	bne.n	80037b8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037ee:	2200      	movs	r2, #0
 80037f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d106      	bne.n	8003808 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037fe:	4619      	mov	r1, r3
 8003800:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003802:	f7ff ff0b 	bl	800361c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003806:	e002      	b.n	800380e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003808:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800380a:	f7ff fee9 	bl	80035e0 <HAL_UART_RxCpltCallback>
}
 800380e:	bf00      	nop
 8003810:	3770      	adds	r7, #112	@ 0x70
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003822:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382e:	2b01      	cmp	r3, #1
 8003830:	d108      	bne.n	8003844 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	b29b      	uxth	r3, r3
 800383a:	4619      	mov	r1, r3
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f7ff feed 	bl	800361c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003842:	e002      	b.n	800384a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f7ff fed5 	bl	80035f4 <HAL_UART_RxHalfCpltCallback>
}
 800384a:	bf00      	nop
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003862:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800386e:	2b80      	cmp	r3, #128	@ 0x80
 8003870:	bf0c      	ite	eq
 8003872:	2301      	moveq	r3, #1
 8003874:	2300      	movne	r3, #0
 8003876:	b2db      	uxtb	r3, r3
 8003878:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b21      	cmp	r3, #33	@ 0x21
 8003884:	d108      	bne.n	8003898 <UART_DMAError+0x46>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2200      	movs	r2, #0
 8003890:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003892:	68b8      	ldr	r0, [r7, #8]
 8003894:	f000 f8ce 	bl	8003a34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a2:	2b40      	cmp	r3, #64	@ 0x40
 80038a4:	bf0c      	ite	eq
 80038a6:	2301      	moveq	r3, #1
 80038a8:	2300      	movne	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b22      	cmp	r3, #34	@ 0x22
 80038b8:	d108      	bne.n	80038cc <UART_DMAError+0x7a>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2200      	movs	r2, #0
 80038c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80038c6:	68b8      	ldr	r0, [r7, #8]
 80038c8:	f000 f8dc 	bl	8003a84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d0:	f043 0210 	orr.w	r2, r3, #16
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038d8:	68b8      	ldr	r0, [r7, #8]
 80038da:	f7ff fe95 	bl	8003608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b098      	sub	sp, #96	@ 0x60
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	4613      	mov	r3, r2
 80038f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	88fa      	ldrh	r2, [r7, #6]
 8003900:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2222      	movs	r2, #34	@ 0x22
 800390c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003914:	4a44      	ldr	r2, [pc, #272]	@ (8003a28 <UART_Start_Receive_DMA+0x140>)
 8003916:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391c:	4a43      	ldr	r2, [pc, #268]	@ (8003a2c <UART_Start_Receive_DMA+0x144>)
 800391e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003924:	4a42      	ldr	r2, [pc, #264]	@ (8003a30 <UART_Start_Receive_DMA+0x148>)
 8003926:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800392c:	2200      	movs	r2, #0
 800392e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003930:	f107 0308 	add.w	r3, r7, #8
 8003934:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3304      	adds	r3, #4
 8003940:	4619      	mov	r1, r3
 8003942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	f7fe f8ec 	bl	8001b24 <HAL_DMA_Start_IT>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d008      	beq.n	8003964 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2210      	movs	r2, #16
 8003956:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e05d      	b.n	8003a20 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003964:	2300      	movs	r3, #0
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d019      	beq.n	80039b6 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	330c      	adds	r3, #12
 8003988:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003998:	65bb      	str	r3, [r7, #88]	@ 0x58
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	330c      	adds	r3, #12
 80039a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039a2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80039a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80039a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80039b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1e5      	bne.n	8003982 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3314      	adds	r3, #20
 80039bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c0:	e853 3f00 	ldrex	r3, [r3]
 80039c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3314      	adds	r3, #20
 80039d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80039d6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80039d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80039dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e5      	bne.n	80039b6 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3314      	adds	r3, #20
 80039f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	617b      	str	r3, [r7, #20]
   return(result);
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a00:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3314      	adds	r3, #20
 8003a08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003a0a:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	6a39      	ldr	r1, [r7, #32]
 8003a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e5      	bne.n	80039ea <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3760      	adds	r7, #96	@ 0x60
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	080036eb 	.word	0x080036eb
 8003a2c:	08003817 	.word	0x08003817
 8003a30:	08003853 	.word	0x08003853

08003a34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b089      	sub	sp, #36	@ 0x24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	330c      	adds	r3, #12
 8003a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	e853 3f00 	ldrex	r3, [r3]
 8003a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003a52:	61fb      	str	r3, [r7, #28]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	61ba      	str	r2, [r7, #24]
 8003a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	6979      	ldr	r1, [r7, #20]
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	e841 2300 	strex	r3, r2, [r1]
 8003a68:	613b      	str	r3, [r7, #16]
   return(result);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e5      	bne.n	8003a3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003a78:	bf00      	nop
 8003a7a:	3724      	adds	r7, #36	@ 0x24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b095      	sub	sp, #84	@ 0x54
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	330c      	adds	r3, #12
 8003a92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a96:	e853 3f00 	ldrex	r3, [r3]
 8003a9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	330c      	adds	r3, #12
 8003aaa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003aac:	643a      	str	r2, [r7, #64]	@ 0x40
 8003aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ab2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ab4:	e841 2300 	strex	r3, r2, [r1]
 8003ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e5      	bne.n	8003a8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3314      	adds	r3, #20
 8003ac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	e853 3f00 	ldrex	r3, [r3]
 8003ace:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f023 0301 	bic.w	r3, r3, #1
 8003ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3314      	adds	r3, #20
 8003ade:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ae0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ae8:	e841 2300 	strex	r3, r2, [r1]
 8003aec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e5      	bne.n	8003ac0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d119      	bne.n	8003b30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	330c      	adds	r3, #12
 8003b02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	e853 3f00 	ldrex	r3, [r3]
 8003b0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f023 0310 	bic.w	r3, r3, #16
 8003b12:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b1c:	61ba      	str	r2, [r7, #24]
 8003b1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b20:	6979      	ldr	r1, [r7, #20]
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	e841 2300 	strex	r3, r2, [r1]
 8003b28:	613b      	str	r3, [r7, #16]
   return(result);
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1e5      	bne.n	8003afc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b3e:	bf00      	nop
 8003b40:	3754      	adds	r7, #84	@ 0x54
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f7ff fd52 	bl	8003608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b21      	cmp	r3, #33	@ 0x21
 8003b7e:	d13e      	bne.n	8003bfe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b88:	d114      	bne.n	8003bb4 <UART_Transmit_IT+0x48>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d110      	bne.n	8003bb4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	1c9a      	adds	r2, r3, #2
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	621a      	str	r2, [r3, #32]
 8003bb2:	e008      	b.n	8003bc6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	1c59      	adds	r1, r3, #1
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6211      	str	r1, [r2, #32]
 8003bbe:	781a      	ldrb	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10f      	bne.n	8003bfa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003be8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bf8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
  }
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff fcc3 	bl	80035b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08c      	sub	sp, #48	@ 0x30
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b22      	cmp	r3, #34	@ 0x22
 8003c56:	f040 80aa 	bne.w	8003dae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c62:	d115      	bne.n	8003c90 <UART_Receive_IT+0x54>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d111      	bne.n	8003c90 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c70:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c82:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c88:	1c9a      	adds	r2, r3, #2
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c8e:	e024      	b.n	8003cda <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c9e:	d007      	beq.n	8003cb0 <UART_Receive_IT+0x74>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <UART_Receive_IT+0x82>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d106      	bne.n	8003cbe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	e008      	b.n	8003cd0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d15d      	bne.n	8003daa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0220 	bic.w	r2, r2, #32
 8003cfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0201 	bic.w	r2, r2, #1
 8003d1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d135      	bne.n	8003da0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	613b      	str	r3, [r7, #16]
   return(result);
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f023 0310 	bic.w	r3, r3, #16
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	330c      	adds	r3, #12
 8003d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d5a:	623a      	str	r2, [r7, #32]
 8003d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	69f9      	ldr	r1, [r7, #28]
 8003d60:	6a3a      	ldr	r2, [r7, #32]
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e5      	bne.n	8003d3a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b10      	cmp	r3, #16
 8003d7a:	d10a      	bne.n	8003d92 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d96:	4619      	mov	r1, r3
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff fc3f 	bl	800361c <HAL_UARTEx_RxEventCallback>
 8003d9e:	e002      	b.n	8003da6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff fc1d 	bl	80035e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	e002      	b.n	8003db0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	e000      	b.n	8003db0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003dae:	2302      	movs	r3, #2
  }
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3730      	adds	r7, #48	@ 0x30
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dbc:	b0c0      	sub	sp, #256	@ 0x100
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd4:	68d9      	ldr	r1, [r3, #12]
 8003dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	ea40 0301 	orr.w	r3, r0, r1
 8003de0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e10:	f021 010c 	bic.w	r1, r1, #12
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e32:	6999      	ldr	r1, [r3, #24]
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	ea40 0301 	orr.w	r3, r0, r1
 8003e3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	4b8f      	ldr	r3, [pc, #572]	@ (8004084 <UART_SetConfig+0x2cc>)
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d005      	beq.n	8003e58 <UART_SetConfig+0xa0>
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4b8d      	ldr	r3, [pc, #564]	@ (8004088 <UART_SetConfig+0x2d0>)
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d104      	bne.n	8003e62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e58:	f7fe ff80 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8003e5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e60:	e003      	b.n	8003e6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e62:	f7fe ff67 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 8003e66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e74:	f040 810c 	bne.w	8004090 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e8a:	4622      	mov	r2, r4
 8003e8c:	462b      	mov	r3, r5
 8003e8e:	1891      	adds	r1, r2, r2
 8003e90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e92:	415b      	adcs	r3, r3
 8003e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e9a:	4621      	mov	r1, r4
 8003e9c:	eb12 0801 	adds.w	r8, r2, r1
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	eb43 0901 	adc.w	r9, r3, r1
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eba:	4690      	mov	r8, r2
 8003ebc:	4699      	mov	r9, r3
 8003ebe:	4623      	mov	r3, r4
 8003ec0:	eb18 0303 	adds.w	r3, r8, r3
 8003ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ec8:	462b      	mov	r3, r5
 8003eca:	eb49 0303 	adc.w	r3, r9, r3
 8003ece:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ede:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ee2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	18db      	adds	r3, r3, r3
 8003eea:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eec:	4613      	mov	r3, r2
 8003eee:	eb42 0303 	adc.w	r3, r2, r3
 8003ef2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ef4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ef8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003efc:	f7fc fa28 	bl	8000350 <__aeabi_uldivmod>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4b61      	ldr	r3, [pc, #388]	@ (800408c <UART_SetConfig+0x2d4>)
 8003f06:	fba3 2302 	umull	r2, r3, r3, r2
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	011c      	lsls	r4, r3, #4
 8003f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f12:	2200      	movs	r2, #0
 8003f14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f20:	4642      	mov	r2, r8
 8003f22:	464b      	mov	r3, r9
 8003f24:	1891      	adds	r1, r2, r2
 8003f26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f28:	415b      	adcs	r3, r3
 8003f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f30:	4641      	mov	r1, r8
 8003f32:	eb12 0a01 	adds.w	sl, r2, r1
 8003f36:	4649      	mov	r1, r9
 8003f38:	eb43 0b01 	adc.w	fp, r3, r1
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f50:	4692      	mov	sl, r2
 8003f52:	469b      	mov	fp, r3
 8003f54:	4643      	mov	r3, r8
 8003f56:	eb1a 0303 	adds.w	r3, sl, r3
 8003f5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f5e:	464b      	mov	r3, r9
 8003f60:	eb4b 0303 	adc.w	r3, fp, r3
 8003f64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	18db      	adds	r3, r3, r3
 8003f80:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f82:	4613      	mov	r3, r2
 8003f84:	eb42 0303 	adc.w	r3, r2, r3
 8003f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f92:	f7fc f9dd 	bl	8000350 <__aeabi_uldivmod>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800408c <UART_SetConfig+0x2d4>)
 8003f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	2264      	movs	r2, #100	@ 0x64
 8003fa6:	fb02 f303 	mul.w	r3, r2, r3
 8003faa:	1acb      	subs	r3, r1, r3
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fb2:	4b36      	ldr	r3, [pc, #216]	@ (800408c <UART_SetConfig+0x2d4>)
 8003fb4:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fc0:	441c      	add	r4, r3
 8003fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fcc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003fd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003fd4:	4642      	mov	r2, r8
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	1891      	adds	r1, r2, r2
 8003fda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fdc:	415b      	adcs	r3, r3
 8003fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fe0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fe4:	4641      	mov	r1, r8
 8003fe6:	1851      	adds	r1, r2, r1
 8003fe8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fea:	4649      	mov	r1, r9
 8003fec:	414b      	adcs	r3, r1
 8003fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ffc:	4659      	mov	r1, fp
 8003ffe:	00cb      	lsls	r3, r1, #3
 8004000:	4651      	mov	r1, sl
 8004002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004006:	4651      	mov	r1, sl
 8004008:	00ca      	lsls	r2, r1, #3
 800400a:	4610      	mov	r0, r2
 800400c:	4619      	mov	r1, r3
 800400e:	4603      	mov	r3, r0
 8004010:	4642      	mov	r2, r8
 8004012:	189b      	adds	r3, r3, r2
 8004014:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004018:	464b      	mov	r3, r9
 800401a:	460a      	mov	r2, r1
 800401c:	eb42 0303 	adc.w	r3, r2, r3
 8004020:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004030:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004034:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004038:	460b      	mov	r3, r1
 800403a:	18db      	adds	r3, r3, r3
 800403c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800403e:	4613      	mov	r3, r2
 8004040:	eb42 0303 	adc.w	r3, r2, r3
 8004044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004046:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800404a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800404e:	f7fc f97f 	bl	8000350 <__aeabi_uldivmod>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4b0d      	ldr	r3, [pc, #52]	@ (800408c <UART_SetConfig+0x2d4>)
 8004058:	fba3 1302 	umull	r1, r3, r3, r2
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	2164      	movs	r1, #100	@ 0x64
 8004060:	fb01 f303 	mul.w	r3, r1, r3
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	3332      	adds	r3, #50	@ 0x32
 800406a:	4a08      	ldr	r2, [pc, #32]	@ (800408c <UART_SetConfig+0x2d4>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	f003 0207 	and.w	r2, r3, #7
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4422      	add	r2, r4
 800407e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004080:	e106      	b.n	8004290 <UART_SetConfig+0x4d8>
 8004082:	bf00      	nop
 8004084:	40011000 	.word	0x40011000
 8004088:	40011400 	.word	0x40011400
 800408c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004094:	2200      	movs	r2, #0
 8004096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800409a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800409e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040a2:	4642      	mov	r2, r8
 80040a4:	464b      	mov	r3, r9
 80040a6:	1891      	adds	r1, r2, r2
 80040a8:	6239      	str	r1, [r7, #32]
 80040aa:	415b      	adcs	r3, r3
 80040ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040b2:	4641      	mov	r1, r8
 80040b4:	1854      	adds	r4, r2, r1
 80040b6:	4649      	mov	r1, r9
 80040b8:	eb43 0501 	adc.w	r5, r3, r1
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	00eb      	lsls	r3, r5, #3
 80040c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ca:	00e2      	lsls	r2, r4, #3
 80040cc:	4614      	mov	r4, r2
 80040ce:	461d      	mov	r5, r3
 80040d0:	4643      	mov	r3, r8
 80040d2:	18e3      	adds	r3, r4, r3
 80040d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040d8:	464b      	mov	r3, r9
 80040da:	eb45 0303 	adc.w	r3, r5, r3
 80040de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040fe:	4629      	mov	r1, r5
 8004100:	008b      	lsls	r3, r1, #2
 8004102:	4621      	mov	r1, r4
 8004104:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004108:	4621      	mov	r1, r4
 800410a:	008a      	lsls	r2, r1, #2
 800410c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004110:	f7fc f91e 	bl	8000350 <__aeabi_uldivmod>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4b60      	ldr	r3, [pc, #384]	@ (800429c <UART_SetConfig+0x4e4>)
 800411a:	fba3 2302 	umull	r2, r3, r3, r2
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	011c      	lsls	r4, r3, #4
 8004122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004126:	2200      	movs	r2, #0
 8004128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800412c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004130:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004134:	4642      	mov	r2, r8
 8004136:	464b      	mov	r3, r9
 8004138:	1891      	adds	r1, r2, r2
 800413a:	61b9      	str	r1, [r7, #24]
 800413c:	415b      	adcs	r3, r3
 800413e:	61fb      	str	r3, [r7, #28]
 8004140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004144:	4641      	mov	r1, r8
 8004146:	1851      	adds	r1, r2, r1
 8004148:	6139      	str	r1, [r7, #16]
 800414a:	4649      	mov	r1, r9
 800414c:	414b      	adcs	r3, r1
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800415c:	4659      	mov	r1, fp
 800415e:	00cb      	lsls	r3, r1, #3
 8004160:	4651      	mov	r1, sl
 8004162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004166:	4651      	mov	r1, sl
 8004168:	00ca      	lsls	r2, r1, #3
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	4603      	mov	r3, r0
 8004170:	4642      	mov	r2, r8
 8004172:	189b      	adds	r3, r3, r2
 8004174:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004178:	464b      	mov	r3, r9
 800417a:	460a      	mov	r2, r1
 800417c:	eb42 0303 	adc.w	r3, r2, r3
 8004180:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800418e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800419c:	4649      	mov	r1, r9
 800419e:	008b      	lsls	r3, r1, #2
 80041a0:	4641      	mov	r1, r8
 80041a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041a6:	4641      	mov	r1, r8
 80041a8:	008a      	lsls	r2, r1, #2
 80041aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041ae:	f7fc f8cf 	bl	8000350 <__aeabi_uldivmod>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4611      	mov	r1, r2
 80041b8:	4b38      	ldr	r3, [pc, #224]	@ (800429c <UART_SetConfig+0x4e4>)
 80041ba:	fba3 2301 	umull	r2, r3, r3, r1
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2264      	movs	r2, #100	@ 0x64
 80041c2:	fb02 f303 	mul.w	r3, r2, r3
 80041c6:	1acb      	subs	r3, r1, r3
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	3332      	adds	r3, #50	@ 0x32
 80041cc:	4a33      	ldr	r2, [pc, #204]	@ (800429c <UART_SetConfig+0x4e4>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041d8:	441c      	add	r4, r3
 80041da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041de:	2200      	movs	r2, #0
 80041e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80041e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80041e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041e8:	4642      	mov	r2, r8
 80041ea:	464b      	mov	r3, r9
 80041ec:	1891      	adds	r1, r2, r2
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	415b      	adcs	r3, r3
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041f8:	4641      	mov	r1, r8
 80041fa:	1851      	adds	r1, r2, r1
 80041fc:	6039      	str	r1, [r7, #0]
 80041fe:	4649      	mov	r1, r9
 8004200:	414b      	adcs	r3, r1
 8004202:	607b      	str	r3, [r7, #4]
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004210:	4659      	mov	r1, fp
 8004212:	00cb      	lsls	r3, r1, #3
 8004214:	4651      	mov	r1, sl
 8004216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800421a:	4651      	mov	r1, sl
 800421c:	00ca      	lsls	r2, r1, #3
 800421e:	4610      	mov	r0, r2
 8004220:	4619      	mov	r1, r3
 8004222:	4603      	mov	r3, r0
 8004224:	4642      	mov	r2, r8
 8004226:	189b      	adds	r3, r3, r2
 8004228:	66bb      	str	r3, [r7, #104]	@ 0x68
 800422a:	464b      	mov	r3, r9
 800422c:	460a      	mov	r2, r1
 800422e:	eb42 0303 	adc.w	r3, r2, r3
 8004232:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	663b      	str	r3, [r7, #96]	@ 0x60
 800423e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800424c:	4649      	mov	r1, r9
 800424e:	008b      	lsls	r3, r1, #2
 8004250:	4641      	mov	r1, r8
 8004252:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004256:	4641      	mov	r1, r8
 8004258:	008a      	lsls	r2, r1, #2
 800425a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800425e:	f7fc f877 	bl	8000350 <__aeabi_uldivmod>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4b0d      	ldr	r3, [pc, #52]	@ (800429c <UART_SetConfig+0x4e4>)
 8004268:	fba3 1302 	umull	r1, r3, r3, r2
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	2164      	movs	r1, #100	@ 0x64
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	3332      	adds	r3, #50	@ 0x32
 800427a:	4a08      	ldr	r2, [pc, #32]	@ (800429c <UART_SetConfig+0x4e4>)
 800427c:	fba2 2303 	umull	r2, r3, r2, r3
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	f003 020f 	and.w	r2, r3, #15
 8004286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4422      	add	r2, r4
 800428e:	609a      	str	r2, [r3, #8]
}
 8004290:	bf00      	nop
 8004292:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004296:	46bd      	mov	sp, r7
 8004298:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800429c:	51eb851f 	.word	0x51eb851f

080042a0 <__NVIC_SetPriority>:
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	6039      	str	r1, [r7, #0]
 80042aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	db0a      	blt.n	80042ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	490c      	ldr	r1, [pc, #48]	@ (80042ec <__NVIC_SetPriority+0x4c>)
 80042ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042be:	0112      	lsls	r2, r2, #4
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	440b      	add	r3, r1
 80042c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80042c8:	e00a      	b.n	80042e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	4908      	ldr	r1, [pc, #32]	@ (80042f0 <__NVIC_SetPriority+0x50>)
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	3b04      	subs	r3, #4
 80042d8:	0112      	lsls	r2, r2, #4
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	440b      	add	r3, r1
 80042de:	761a      	strb	r2, [r3, #24]
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	e000e100 	.word	0xe000e100
 80042f0:	e000ed00 	.word	0xe000ed00

080042f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80042f8:	2100      	movs	r1, #0
 80042fa:	f06f 0004 	mvn.w	r0, #4
 80042fe:	f7ff ffcf 	bl	80042a0 <__NVIC_SetPriority>
#endif
}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800430e:	f3ef 8305 	mrs	r3, IPSR
 8004312:	603b      	str	r3, [r7, #0]
  return(result);
 8004314:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800431a:	f06f 0305 	mvn.w	r3, #5
 800431e:	607b      	str	r3, [r7, #4]
 8004320:	e00c      	b.n	800433c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004322:	4b0a      	ldr	r3, [pc, #40]	@ (800434c <osKernelInitialize+0x44>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d105      	bne.n	8004336 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800432a:	4b08      	ldr	r3, [pc, #32]	@ (800434c <osKernelInitialize+0x44>)
 800432c:	2201      	movs	r2, #1
 800432e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004330:	2300      	movs	r3, #0
 8004332:	607b      	str	r3, [r7, #4]
 8004334:	e002      	b.n	800433c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004336:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800433a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800433c:	687b      	ldr	r3, [r7, #4]
}
 800433e:	4618      	mov	r0, r3
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	20004824 	.word	0x20004824

08004350 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004356:	f3ef 8305 	mrs	r3, IPSR
 800435a:	603b      	str	r3, [r7, #0]
  return(result);
 800435c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004362:	f06f 0305 	mvn.w	r3, #5
 8004366:	607b      	str	r3, [r7, #4]
 8004368:	e010      	b.n	800438c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800436a:	4b0b      	ldr	r3, [pc, #44]	@ (8004398 <osKernelStart+0x48>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d109      	bne.n	8004386 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004372:	f7ff ffbf 	bl	80042f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004376:	4b08      	ldr	r3, [pc, #32]	@ (8004398 <osKernelStart+0x48>)
 8004378:	2202      	movs	r2, #2
 800437a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800437c:	f001 f87a 	bl	8005474 <vTaskStartScheduler>
      stat = osOK;
 8004380:	2300      	movs	r3, #0
 8004382:	607b      	str	r3, [r7, #4]
 8004384:	e002      	b.n	800438c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800438a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800438c:	687b      	ldr	r3, [r7, #4]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20004824 	.word	0x20004824

0800439c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800439c:	b580      	push	{r7, lr}
 800439e:	b08e      	sub	sp, #56	@ 0x38
 80043a0:	af04      	add	r7, sp, #16
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043ac:	f3ef 8305 	mrs	r3, IPSR
 80043b0:	617b      	str	r3, [r7, #20]
  return(result);
 80043b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d17e      	bne.n	80044b6 <osThreadNew+0x11a>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d07b      	beq.n	80044b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80043be:	2380      	movs	r3, #128	@ 0x80
 80043c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80043c2:	2318      	movs	r3, #24
 80043c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80043ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80043ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d045      	beq.n	8004462 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <osThreadNew+0x48>
        name = attr->name;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <osThreadNew+0x6e>
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	2b38      	cmp	r3, #56	@ 0x38
 80043fc:	d805      	bhi.n	800440a <osThreadNew+0x6e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <osThreadNew+0x72>
        return (NULL);
 800440a:	2300      	movs	r3, #0
 800440c:	e054      	b.n	80044b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	089b      	lsrs	r3, r3, #2
 800441c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00e      	beq.n	8004444 <osThreadNew+0xa8>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2b5b      	cmp	r3, #91	@ 0x5b
 800442c:	d90a      	bls.n	8004444 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004432:	2b00      	cmp	r3, #0
 8004434:	d006      	beq.n	8004444 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <osThreadNew+0xa8>
        mem = 1;
 800443e:	2301      	movs	r3, #1
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	e010      	b.n	8004466 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10c      	bne.n	8004466 <osThreadNew+0xca>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d108      	bne.n	8004466 <osThreadNew+0xca>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d104      	bne.n	8004466 <osThreadNew+0xca>
          mem = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	61bb      	str	r3, [r7, #24]
 8004460:	e001      	b.n	8004466 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d110      	bne.n	800448e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004474:	9202      	str	r2, [sp, #8]
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	6a3a      	ldr	r2, [r7, #32]
 8004480:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fe1a 	bl	80050bc <xTaskCreateStatic>
 8004488:	4603      	mov	r3, r0
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	e013      	b.n	80044b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d110      	bne.n	80044b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	b29a      	uxth	r2, r3
 8004498:	f107 0310 	add.w	r3, r7, #16
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 fe68 	bl	800517c <xTaskCreate>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d001      	beq.n	80044b6 <osThreadNew+0x11a>
            hTask = NULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80044b6:	693b      	ldr	r3, [r7, #16]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3728      	adds	r7, #40	@ 0x28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044c8:	f3ef 8305 	mrs	r3, IPSR
 80044cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80044ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <osDelay+0x1c>
    stat = osErrorISR;
 80044d4:	f06f 0305 	mvn.w	r3, #5
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e007      	b.n	80044ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 ff8e 	bl	8005408 <vTaskDelay>
    }
  }

  return (stat);
 80044ec:	68fb      	ldr	r3, [r7, #12]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4a07      	ldr	r2, [pc, #28]	@ (8004524 <vApplicationGetIdleTaskMemory+0x2c>)
 8004508:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4a06      	ldr	r2, [pc, #24]	@ (8004528 <vApplicationGetIdleTaskMemory+0x30>)
 800450e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2280      	movs	r2, #128	@ 0x80
 8004514:	601a      	str	r2, [r3, #0]
}
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20004828 	.word	0x20004828
 8004528:	20004884 	.word	0x20004884

0800452c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4a07      	ldr	r2, [pc, #28]	@ (8004558 <vApplicationGetTimerTaskMemory+0x2c>)
 800453c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4a06      	ldr	r2, [pc, #24]	@ (800455c <vApplicationGetTimerTaskMemory+0x30>)
 8004542:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800454a:	601a      	str	r2, [r3, #0]
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	20004a84 	.word	0x20004a84
 800455c:	20004ae0 	.word	0x20004ae0

08004560 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f103 0208 	add.w	r2, r3, #8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004578:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f103 0208 	add.w	r2, r3, #8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f103 0208 	add.w	r2, r3, #8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045ba:	b480      	push	{r7}
 80045bc:	b085      	sub	sp, #20
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004602:	b480      	push	{r7}
 8004604:	b085      	sub	sp, #20
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004618:	d103      	bne.n	8004622 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e00c      	b.n	800463c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3308      	adds	r3, #8
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	e002      	b.n	8004630 <vListInsert+0x2e>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	429a      	cmp	r2, r3
 800463a:	d2f6      	bcs.n	800462a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	601a      	str	r2, [r3, #0]
}
 8004668:	bf00      	nop
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6892      	ldr	r2, [r2, #8]
 800468a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6852      	ldr	r2, [r2, #4]
 8004694:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	429a      	cmp	r2, r3
 800469e:	d103      	bne.n	80046a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	1e5a      	subs	r2, r3, #1
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10b      	bne.n	80046f4 <xQueueGenericReset+0x2c>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	60bb      	str	r3, [r7, #8]
}
 80046ee:	bf00      	nop
 80046f0:	bf00      	nop
 80046f2:	e7fd      	b.n	80046f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80046f4:	f002 f8a0 	bl	8006838 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004700:	68f9      	ldr	r1, [r7, #12]
 8004702:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	441a      	add	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004724:	3b01      	subs	r3, #1
 8004726:	68f9      	ldr	r1, [r7, #12]
 8004728:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	441a      	add	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	22ff      	movs	r2, #255	@ 0xff
 8004738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	22ff      	movs	r2, #255	@ 0xff
 8004740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d114      	bne.n	8004774 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d01a      	beq.n	8004788 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3310      	adds	r3, #16
 8004756:	4618      	mov	r0, r3
 8004758:	f001 f91a 	bl	8005990 <xTaskRemoveFromEventList>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d012      	beq.n	8004788 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004762:	4b0d      	ldr	r3, [pc, #52]	@ (8004798 <xQueueGenericReset+0xd0>)
 8004764:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	e009      	b.n	8004788 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	3310      	adds	r3, #16
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fef1 	bl	8004560 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3324      	adds	r3, #36	@ 0x24
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff feec 	bl	8004560 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004788:	f002 f888 	bl	800689c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800478c:	2301      	movs	r3, #1
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	e000ed04 	.word	0xe000ed04

0800479c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08e      	sub	sp, #56	@ 0x38
 80047a0:	af02      	add	r7, sp, #8
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10b      	bne.n	80047c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80047c2:	bf00      	nop
 80047c4:	bf00      	nop
 80047c6:	e7fd      	b.n	80047c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10b      	bne.n	80047e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	e7fd      	b.n	80047e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <xQueueGenericCreateStatic+0x56>
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <xQueueGenericCreateStatic+0x5a>
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <xQueueGenericCreateStatic+0x5c>
 80047f6:	2300      	movs	r3, #0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10b      	bne.n	8004814 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	623b      	str	r3, [r7, #32]
}
 800480e:	bf00      	nop
 8004810:	bf00      	nop
 8004812:	e7fd      	b.n	8004810 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d102      	bne.n	8004820 <xQueueGenericCreateStatic+0x84>
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <xQueueGenericCreateStatic+0x88>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <xQueueGenericCreateStatic+0x8a>
 8004824:	2300      	movs	r3, #0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10b      	bne.n	8004842 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	61fb      	str	r3, [r7, #28]
}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	e7fd      	b.n	800483e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004842:	2350      	movs	r3, #80	@ 0x50
 8004844:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2b50      	cmp	r3, #80	@ 0x50
 800484a:	d00b      	beq.n	8004864 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	61bb      	str	r3, [r7, #24]
}
 800485e:	bf00      	nop
 8004860:	bf00      	nop
 8004862:	e7fd      	b.n	8004860 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004864:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800486a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00d      	beq.n	800488c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004878:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800487c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	4613      	mov	r3, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f805 	bl	8004896 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800488c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800488e:	4618      	mov	r0, r3
 8004890:	3730      	adds	r7, #48	@ 0x30
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
 80048a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d103      	bne.n	80048b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	e002      	b.n	80048b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048c4:	2101      	movs	r1, #1
 80048c6:	69b8      	ldr	r0, [r7, #24]
 80048c8:	f7ff fefe 	bl	80046c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	78fa      	ldrb	r2, [r7, #3]
 80048d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80048d4:	bf00      	nop
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08e      	sub	sp, #56	@ 0x38
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048ea:	2300      	movs	r3, #0
 80048ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80048f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10b      	bne.n	8004910 <xQueueGenericSend+0x34>
	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800490a:	bf00      	nop
 800490c:	bf00      	nop
 800490e:	e7fd      	b.n	800490c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <xQueueGenericSend+0x42>
 8004916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <xQueueGenericSend+0x46>
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <xQueueGenericSend+0x48>
 8004922:	2300      	movs	r3, #0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10b      	bne.n	8004940 <xQueueGenericSend+0x64>
	__asm volatile
 8004928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800493a:	bf00      	nop
 800493c:	bf00      	nop
 800493e:	e7fd      	b.n	800493c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d103      	bne.n	800494e <xQueueGenericSend+0x72>
 8004946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <xQueueGenericSend+0x76>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <xQueueGenericSend+0x78>
 8004952:	2300      	movs	r3, #0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10b      	bne.n	8004970 <xQueueGenericSend+0x94>
	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	623b      	str	r3, [r7, #32]
}
 800496a:	bf00      	nop
 800496c:	bf00      	nop
 800496e:	e7fd      	b.n	800496c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004970:	f001 f9f6 	bl	8005d60 <xTaskGetSchedulerState>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d102      	bne.n	8004980 <xQueueGenericSend+0xa4>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <xQueueGenericSend+0xa8>
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <xQueueGenericSend+0xaa>
 8004984:	2300      	movs	r3, #0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10b      	bne.n	80049a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	61fb      	str	r3, [r7, #28]
}
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	e7fd      	b.n	800499e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049a2:	f001 ff49 	bl	8006838 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d302      	bcc.n	80049b8 <xQueueGenericSend+0xdc>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d129      	bne.n	8004a0c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	68b9      	ldr	r1, [r7, #8]
 80049bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049be:	f000 fa0f 	bl	8004de0 <prvCopyDataToQueue>
 80049c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d010      	beq.n	80049ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ce:	3324      	adds	r3, #36	@ 0x24
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 ffdd 	bl	8005990 <xTaskRemoveFromEventList>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d013      	beq.n	8004a04 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049dc:	4b3f      	ldr	r3, [pc, #252]	@ (8004adc <xQueueGenericSend+0x200>)
 80049de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	e00a      	b.n	8004a04 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d007      	beq.n	8004a04 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049f4:	4b39      	ldr	r3, [pc, #228]	@ (8004adc <xQueueGenericSend+0x200>)
 80049f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a04:	f001 ff4a 	bl	800689c <vPortExitCritical>
				return pdPASS;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e063      	b.n	8004ad4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d103      	bne.n	8004a1a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a12:	f001 ff43 	bl	800689c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	e05c      	b.n	8004ad4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d106      	bne.n	8004a2e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a20:	f107 0314 	add.w	r3, r7, #20
 8004a24:	4618      	mov	r0, r3
 8004a26:	f001 f83f 	bl	8005aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a2e:	f001 ff35 	bl	800689c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a32:	f000 fd87 	bl	8005544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a36:	f001 feff 	bl	8006838 <vPortEnterCritical>
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a40:	b25b      	sxtb	r3, r3
 8004a42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a46:	d103      	bne.n	8004a50 <xQueueGenericSend+0x174>
 8004a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a56:	b25b      	sxtb	r3, r3
 8004a58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a5c:	d103      	bne.n	8004a66 <xQueueGenericSend+0x18a>
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a66:	f001 ff19 	bl	800689c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a6a:	1d3a      	adds	r2, r7, #4
 8004a6c:	f107 0314 	add.w	r3, r7, #20
 8004a70:	4611      	mov	r1, r2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f001 f82e 	bl	8005ad4 <xTaskCheckForTimeOut>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d124      	bne.n	8004ac8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a80:	f000 faa6 	bl	8004fd0 <prvIsQueueFull>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d018      	beq.n	8004abc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8c:	3310      	adds	r3, #16
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	4611      	mov	r1, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 ff2a 	bl	80058ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a9a:	f000 fa31 	bl	8004f00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a9e:	f000 fd5f 	bl	8005560 <xTaskResumeAll>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f47f af7c 	bne.w	80049a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8004adc <xQueueGenericSend+0x200>)
 8004aac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	e772      	b.n	80049a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004abc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004abe:	f000 fa1f 	bl	8004f00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ac2:	f000 fd4d 	bl	8005560 <xTaskResumeAll>
 8004ac6:	e76c      	b.n	80049a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ac8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004aca:	f000 fa19 	bl	8004f00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ace:	f000 fd47 	bl	8005560 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ad2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3738      	adds	r7, #56	@ 0x38
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	e000ed04 	.word	0xe000ed04

08004ae0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b090      	sub	sp, #64	@ 0x40
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10b      	bne.n	8004b10 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b0a:	bf00      	nop
 8004b0c:	bf00      	nop
 8004b0e:	e7fd      	b.n	8004b0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <xQueueGenericSendFromISR+0x3e>
 8004b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <xQueueGenericSendFromISR+0x42>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <xQueueGenericSendFromISR+0x44>
 8004b22:	2300      	movs	r3, #0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10b      	bne.n	8004b40 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b3a:	bf00      	nop
 8004b3c:	bf00      	nop
 8004b3e:	e7fd      	b.n	8004b3c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d103      	bne.n	8004b4e <xQueueGenericSendFromISR+0x6e>
 8004b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <xQueueGenericSendFromISR+0x72>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <xQueueGenericSendFromISR+0x74>
 8004b52:	2300      	movs	r3, #0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10b      	bne.n	8004b70 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	623b      	str	r3, [r7, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	bf00      	nop
 8004b6e:	e7fd      	b.n	8004b6c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b70:	f001 ff42 	bl	80069f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b74:	f3ef 8211 	mrs	r2, BASEPRI
 8004b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	61fa      	str	r2, [r7, #28]
 8004b8a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b8e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d302      	bcc.n	8004ba2 <xQueueGenericSendFromISR+0xc2>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d12f      	bne.n	8004c02 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ba8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004bb8:	f000 f912 	bl	8004de0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004bbc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bc4:	d112      	bne.n	8004bec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d016      	beq.n	8004bfc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd0:	3324      	adds	r3, #36	@ 0x24
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fedc 	bl	8005990 <xTaskRemoveFromEventList>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00e      	beq.n	8004bfc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00b      	beq.n	8004bfc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	e007      	b.n	8004bfc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	b25a      	sxtb	r2, r3
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004c00:	e001      	b.n	8004c06 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c08:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3740      	adds	r7, #64	@ 0x40
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08c      	sub	sp, #48	@ 0x30
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10b      	bne.n	8004c4e <xQueueReceive+0x32>
	__asm volatile
 8004c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	623b      	str	r3, [r7, #32]
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	e7fd      	b.n	8004c4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d103      	bne.n	8004c5c <xQueueReceive+0x40>
 8004c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <xQueueReceive+0x44>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <xQueueReceive+0x46>
 8004c60:	2300      	movs	r3, #0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10b      	bne.n	8004c7e <xQueueReceive+0x62>
	__asm volatile
 8004c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	61fb      	str	r3, [r7, #28]
}
 8004c78:	bf00      	nop
 8004c7a:	bf00      	nop
 8004c7c:	e7fd      	b.n	8004c7a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c7e:	f001 f86f 	bl	8005d60 <xTaskGetSchedulerState>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d102      	bne.n	8004c8e <xQueueReceive+0x72>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <xQueueReceive+0x76>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e000      	b.n	8004c94 <xQueueReceive+0x78>
 8004c92:	2300      	movs	r3, #0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10b      	bne.n	8004cb0 <xQueueReceive+0x94>
	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	61bb      	str	r3, [r7, #24]
}
 8004caa:	bf00      	nop
 8004cac:	bf00      	nop
 8004cae:	e7fd      	b.n	8004cac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cb0:	f001 fdc2 	bl	8006838 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01f      	beq.n	8004d00 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cc4:	f000 f8f6 	bl	8004eb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cca:	1e5a      	subs	r2, r3, #1
 8004ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00f      	beq.n	8004cf8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cda:	3310      	adds	r3, #16
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 fe57 	bl	8005990 <xTaskRemoveFromEventList>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d007      	beq.n	8004cf8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ce8:	4b3c      	ldr	r3, [pc, #240]	@ (8004ddc <xQueueReceive+0x1c0>)
 8004cea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cf8:	f001 fdd0 	bl	800689c <vPortExitCritical>
				return pdPASS;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e069      	b.n	8004dd4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d06:	f001 fdc9 	bl	800689c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e062      	b.n	8004dd4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d106      	bne.n	8004d22 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d14:	f107 0310 	add.w	r3, r7, #16
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fec5 	bl	8005aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d22:	f001 fdbb 	bl	800689c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d26:	f000 fc0d 	bl	8005544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d2a:	f001 fd85 	bl	8006838 <vPortEnterCritical>
 8004d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d34:	b25b      	sxtb	r3, r3
 8004d36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d3a:	d103      	bne.n	8004d44 <xQueueReceive+0x128>
 8004d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d4a:	b25b      	sxtb	r3, r3
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d50:	d103      	bne.n	8004d5a <xQueueReceive+0x13e>
 8004d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d5a:	f001 fd9f 	bl	800689c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d5e:	1d3a      	adds	r2, r7, #4
 8004d60:	f107 0310 	add.w	r3, r7, #16
 8004d64:	4611      	mov	r1, r2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 feb4 	bl	8005ad4 <xTaskCheckForTimeOut>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d123      	bne.n	8004dba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d74:	f000 f916 	bl	8004fa4 <prvIsQueueEmpty>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d017      	beq.n	8004dae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d80:	3324      	adds	r3, #36	@ 0x24
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	4611      	mov	r1, r2
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fdb0 	bl	80058ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d8e:	f000 f8b7 	bl	8004f00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d92:	f000 fbe5 	bl	8005560 <xTaskResumeAll>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d189      	bne.n	8004cb0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004ddc <xQueueReceive+0x1c0>)
 8004d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	e780      	b.n	8004cb0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004dae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004db0:	f000 f8a6 	bl	8004f00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004db4:	f000 fbd4 	bl	8005560 <xTaskResumeAll>
 8004db8:	e77a      	b.n	8004cb0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004dba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dbc:	f000 f8a0 	bl	8004f00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dc0:	f000 fbce 	bl	8005560 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dc6:	f000 f8ed 	bl	8004fa4 <prvIsQueueEmpty>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f43f af6f 	beq.w	8004cb0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004dd2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3730      	adds	r7, #48	@ 0x30
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	e000ed04 	.word	0xe000ed04

08004de0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10d      	bne.n	8004e1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d14d      	bne.n	8004ea2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 ffc6 	bl	8005d9c <xTaskPriorityDisinherit>
 8004e10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	609a      	str	r2, [r3, #8]
 8004e18:	e043      	b.n	8004ea2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d119      	bne.n	8004e54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6858      	ldr	r0, [r3, #4]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e28:	461a      	mov	r2, r3
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	f00b faf1 	bl	8010412 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e38:	441a      	add	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d32b      	bcc.n	8004ea2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	605a      	str	r2, [r3, #4]
 8004e52:	e026      	b.n	8004ea2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	68d8      	ldr	r0, [r3, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	f00b fad7 	bl	8010412 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6c:	425b      	negs	r3, r3
 8004e6e:	441a      	add	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d207      	bcs.n	8004e90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e88:	425b      	negs	r3, r3
 8004e8a:	441a      	add	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d105      	bne.n	8004ea2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004eaa:	697b      	ldr	r3, [r7, #20]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d018      	beq.n	8004ef8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ece:	441a      	add	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d303      	bcc.n	8004ee8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68d9      	ldr	r1, [r3, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	6838      	ldr	r0, [r7, #0]
 8004ef4:	f00b fa8d 	bl	8010412 <memcpy>
	}
}
 8004ef8:	bf00      	nop
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f08:	f001 fc96 	bl	8006838 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f14:	e011      	b.n	8004f3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d012      	beq.n	8004f44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3324      	adds	r3, #36	@ 0x24
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fd34 	bl	8005990 <xTaskRemoveFromEventList>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f2e:	f000 fe35 	bl	8005b9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	dce9      	bgt.n	8004f16 <prvUnlockQueue+0x16>
 8004f42:	e000      	b.n	8004f46 <prvUnlockQueue+0x46>
					break;
 8004f44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	22ff      	movs	r2, #255	@ 0xff
 8004f4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004f4e:	f001 fca5 	bl	800689c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f52:	f001 fc71 	bl	8006838 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f5e:	e011      	b.n	8004f84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d012      	beq.n	8004f8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3310      	adds	r3, #16
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fd0f 	bl	8005990 <xTaskRemoveFromEventList>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f78:	f000 fe10 	bl	8005b9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f7c:	7bbb      	ldrb	r3, [r7, #14]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	dce9      	bgt.n	8004f60 <prvUnlockQueue+0x60>
 8004f8c:	e000      	b.n	8004f90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	22ff      	movs	r2, #255	@ 0xff
 8004f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f98:	f001 fc80 	bl	800689c <vPortExitCritical>
}
 8004f9c:	bf00      	nop
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fac:	f001 fc44 	bl	8006838 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d102      	bne.n	8004fbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	e001      	b.n	8004fc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fc2:	f001 fc6b 	bl	800689c <vPortExitCritical>

	return xReturn;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fd8:	f001 fc2e 	bl	8006838 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d102      	bne.n	8004fee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	e001      	b.n	8004ff2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ff2:	f001 fc53 	bl	800689c <vPortExitCritical>

	return xReturn;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	e014      	b.n	800503a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005010:	4a0f      	ldr	r2, [pc, #60]	@ (8005050 <vQueueAddToRegistry+0x50>)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10b      	bne.n	8005034 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800501c:	490c      	ldr	r1, [pc, #48]	@ (8005050 <vQueueAddToRegistry+0x50>)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005026:	4a0a      	ldr	r2, [pc, #40]	@ (8005050 <vQueueAddToRegistry+0x50>)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	4413      	add	r3, r2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005032:	e006      	b.n	8005042 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3301      	adds	r3, #1
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b07      	cmp	r3, #7
 800503e:	d9e7      	bls.n	8005010 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005040:	bf00      	nop
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	20004ee0 	.word	0x20004ee0

08005054 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005064:	f001 fbe8 	bl	8006838 <vPortEnterCritical>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800506e:	b25b      	sxtb	r3, r3
 8005070:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005074:	d103      	bne.n	800507e <vQueueWaitForMessageRestricted+0x2a>
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005084:	b25b      	sxtb	r3, r3
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800508a:	d103      	bne.n	8005094 <vQueueWaitForMessageRestricted+0x40>
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005094:	f001 fc02 	bl	800689c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509c:	2b00      	cmp	r3, #0
 800509e:	d106      	bne.n	80050ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	3324      	adds	r3, #36	@ 0x24
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 fc45 	bl	8005938 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050ae:	6978      	ldr	r0, [r7, #20]
 80050b0:	f7ff ff26 	bl	8004f00 <prvUnlockQueue>
	}
 80050b4:	bf00      	nop
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08e      	sub	sp, #56	@ 0x38
 80050c0:	af04      	add	r7, sp, #16
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10b      	bne.n	80050e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	623b      	str	r3, [r7, #32]
}
 80050e2:	bf00      	nop
 80050e4:	bf00      	nop
 80050e6:	e7fd      	b.n	80050e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10b      	bne.n	8005106 <xTaskCreateStatic+0x4a>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	61fb      	str	r3, [r7, #28]
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	e7fd      	b.n	8005102 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005106:	235c      	movs	r3, #92	@ 0x5c
 8005108:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b5c      	cmp	r3, #92	@ 0x5c
 800510e:	d00b      	beq.n	8005128 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	61bb      	str	r3, [r7, #24]
}
 8005122:	bf00      	nop
 8005124:	bf00      	nop
 8005126:	e7fd      	b.n	8005124 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005128:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512c:	2b00      	cmp	r3, #0
 800512e:	d01e      	beq.n	800516e <xTaskCreateStatic+0xb2>
 8005130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005132:	2b00      	cmp	r3, #0
 8005134:	d01b      	beq.n	800516e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800513e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	2202      	movs	r2, #2
 8005144:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005148:	2300      	movs	r3, #0
 800514a:	9303      	str	r3, [sp, #12]
 800514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514e:	9302      	str	r3, [sp, #8]
 8005150:	f107 0314 	add.w	r3, r7, #20
 8005154:	9301      	str	r3, [sp, #4]
 8005156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f850 	bl	8005206 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005166:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005168:	f000 f8de 	bl	8005328 <prvAddNewTaskToReadyList>
 800516c:	e001      	b.n	8005172 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005172:	697b      	ldr	r3, [r7, #20]
	}
 8005174:	4618      	mov	r0, r3
 8005176:	3728      	adds	r7, #40	@ 0x28
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08c      	sub	sp, #48	@ 0x30
 8005180:	af04      	add	r7, sp, #16
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	4613      	mov	r3, r2
 800518a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800518c:	88fb      	ldrh	r3, [r7, #6]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4618      	mov	r0, r3
 8005192:	f001 fc73 	bl	8006a7c <pvPortMalloc>
 8005196:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00e      	beq.n	80051bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800519e:	205c      	movs	r0, #92	@ 0x5c
 80051a0:	f001 fc6c 	bl	8006a7c <pvPortMalloc>
 80051a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80051b2:	e005      	b.n	80051c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051b4:	6978      	ldr	r0, [r7, #20]
 80051b6:	f001 fd2f 	bl	8006c18 <vPortFree>
 80051ba:	e001      	b.n	80051c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d017      	beq.n	80051f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051ce:	88fa      	ldrh	r2, [r7, #6]
 80051d0:	2300      	movs	r3, #0
 80051d2:	9303      	str	r3, [sp, #12]
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	9302      	str	r3, [sp, #8]
 80051d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f80e 	bl	8005206 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051ea:	69f8      	ldr	r0, [r7, #28]
 80051ec:	f000 f89c 	bl	8005328 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051f0:	2301      	movs	r3, #1
 80051f2:	61bb      	str	r3, [r7, #24]
 80051f4:	e002      	b.n	80051fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80051fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051fc:	69bb      	ldr	r3, [r7, #24]
	}
 80051fe:	4618      	mov	r0, r3
 8005200:	3720      	adds	r7, #32
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b088      	sub	sp, #32
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	607a      	str	r2, [r7, #4]
 8005212:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005216:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	461a      	mov	r2, r3
 800521e:	21a5      	movs	r1, #165	@ 0xa5
 8005220:	f00b f81c 	bl	801025c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005226:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800522e:	3b01      	subs	r3, #1
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f023 0307 	bic.w	r3, r3, #7
 800523c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00b      	beq.n	8005260 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	617b      	str	r3, [r7, #20]
}
 800525a:	bf00      	nop
 800525c:	bf00      	nop
 800525e:	e7fd      	b.n	800525c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d01f      	beq.n	80052a6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	e012      	b.n	8005292 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	7819      	ldrb	r1, [r3, #0]
 8005274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	4413      	add	r3, r2
 800527a:	3334      	adds	r3, #52	@ 0x34
 800527c:	460a      	mov	r2, r1
 800527e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	4413      	add	r3, r2
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d006      	beq.n	800529a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	3301      	adds	r3, #1
 8005290:	61fb      	str	r3, [r7, #28]
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	2b0f      	cmp	r3, #15
 8005296:	d9e9      	bls.n	800526c <prvInitialiseNewTask+0x66>
 8005298:	e000      	b.n	800529c <prvInitialiseNewTask+0x96>
			{
				break;
 800529a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052a4:	e003      	b.n	80052ae <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b0:	2b37      	cmp	r3, #55	@ 0x37
 80052b2:	d901      	bls.n	80052b8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052b4:	2337      	movs	r3, #55	@ 0x37
 80052b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052c2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c6:	2200      	movs	r2, #0
 80052c8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052cc:	3304      	adds	r3, #4
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff f966 	bl	80045a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d6:	3318      	adds	r3, #24
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff f961 	bl	80045a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80052ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052f2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f6:	2200      	movs	r2, #0
 80052f8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	68f9      	ldr	r1, [r7, #12]
 8005306:	69b8      	ldr	r0, [r7, #24]
 8005308:	f001 f966 	bl	80065d8 <pxPortInitialiseStack>
 800530c:	4602      	mov	r2, r0
 800530e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005310:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800531c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800531e:	bf00      	nop
 8005320:	3720      	adds	r7, #32
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005330:	f001 fa82 	bl	8006838 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005334:	4b2d      	ldr	r3, [pc, #180]	@ (80053ec <prvAddNewTaskToReadyList+0xc4>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3301      	adds	r3, #1
 800533a:	4a2c      	ldr	r2, [pc, #176]	@ (80053ec <prvAddNewTaskToReadyList+0xc4>)
 800533c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800533e:	4b2c      	ldr	r3, [pc, #176]	@ (80053f0 <prvAddNewTaskToReadyList+0xc8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d109      	bne.n	800535a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005346:	4a2a      	ldr	r2, [pc, #168]	@ (80053f0 <prvAddNewTaskToReadyList+0xc8>)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800534c:	4b27      	ldr	r3, [pc, #156]	@ (80053ec <prvAddNewTaskToReadyList+0xc4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d110      	bne.n	8005376 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005354:	f000 fc46 	bl	8005be4 <prvInitialiseTaskLists>
 8005358:	e00d      	b.n	8005376 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800535a:	4b26      	ldr	r3, [pc, #152]	@ (80053f4 <prvAddNewTaskToReadyList+0xcc>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005362:	4b23      	ldr	r3, [pc, #140]	@ (80053f0 <prvAddNewTaskToReadyList+0xc8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536c:	429a      	cmp	r2, r3
 800536e:	d802      	bhi.n	8005376 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005370:	4a1f      	ldr	r2, [pc, #124]	@ (80053f0 <prvAddNewTaskToReadyList+0xc8>)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005376:	4b20      	ldr	r3, [pc, #128]	@ (80053f8 <prvAddNewTaskToReadyList+0xd0>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3301      	adds	r3, #1
 800537c:	4a1e      	ldr	r2, [pc, #120]	@ (80053f8 <prvAddNewTaskToReadyList+0xd0>)
 800537e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005380:	4b1d      	ldr	r3, [pc, #116]	@ (80053f8 <prvAddNewTaskToReadyList+0xd0>)
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800538c:	4b1b      	ldr	r3, [pc, #108]	@ (80053fc <prvAddNewTaskToReadyList+0xd4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d903      	bls.n	800539c <prvAddNewTaskToReadyList+0x74>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005398:	4a18      	ldr	r2, [pc, #96]	@ (80053fc <prvAddNewTaskToReadyList+0xd4>)
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a0:	4613      	mov	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4a15      	ldr	r2, [pc, #84]	@ (8005400 <prvAddNewTaskToReadyList+0xd8>)
 80053aa:	441a      	add	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3304      	adds	r3, #4
 80053b0:	4619      	mov	r1, r3
 80053b2:	4610      	mov	r0, r2
 80053b4:	f7ff f901 	bl	80045ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053b8:	f001 fa70 	bl	800689c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053bc:	4b0d      	ldr	r3, [pc, #52]	@ (80053f4 <prvAddNewTaskToReadyList+0xcc>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00e      	beq.n	80053e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053c4:	4b0a      	ldr	r3, [pc, #40]	@ (80053f0 <prvAddNewTaskToReadyList+0xc8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d207      	bcs.n	80053e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005404 <prvAddNewTaskToReadyList+0xdc>)
 80053d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	200053f4 	.word	0x200053f4
 80053f0:	20004f20 	.word	0x20004f20
 80053f4:	20005400 	.word	0x20005400
 80053f8:	20005410 	.word	0x20005410
 80053fc:	200053fc 	.word	0x200053fc
 8005400:	20004f24 	.word	0x20004f24
 8005404:	e000ed04 	.word	0xe000ed04

08005408 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d018      	beq.n	800544c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800541a:	4b14      	ldr	r3, [pc, #80]	@ (800546c <vTaskDelay+0x64>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00b      	beq.n	800543a <vTaskDelay+0x32>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	60bb      	str	r3, [r7, #8]
}
 8005434:	bf00      	nop
 8005436:	bf00      	nop
 8005438:	e7fd      	b.n	8005436 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800543a:	f000 f883 	bl	8005544 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800543e:	2100      	movs	r1, #0
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fd1b 	bl	8005e7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005446:	f000 f88b 	bl	8005560 <xTaskResumeAll>
 800544a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d107      	bne.n	8005462 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005452:	4b07      	ldr	r3, [pc, #28]	@ (8005470 <vTaskDelay+0x68>)
 8005454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005462:	bf00      	nop
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	2000541c 	.word	0x2000541c
 8005470:	e000ed04 	.word	0xe000ed04

08005474 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	@ 0x28
 8005478:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800547a:	2300      	movs	r3, #0
 800547c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800547e:	2300      	movs	r3, #0
 8005480:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005482:	463a      	mov	r2, r7
 8005484:	1d39      	adds	r1, r7, #4
 8005486:	f107 0308 	add.w	r3, r7, #8
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff f834 	bl	80044f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005490:	6839      	ldr	r1, [r7, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	9202      	str	r2, [sp, #8]
 8005498:	9301      	str	r3, [sp, #4]
 800549a:	2300      	movs	r3, #0
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	2300      	movs	r3, #0
 80054a0:	460a      	mov	r2, r1
 80054a2:	4922      	ldr	r1, [pc, #136]	@ (800552c <vTaskStartScheduler+0xb8>)
 80054a4:	4822      	ldr	r0, [pc, #136]	@ (8005530 <vTaskStartScheduler+0xbc>)
 80054a6:	f7ff fe09 	bl	80050bc <xTaskCreateStatic>
 80054aa:	4603      	mov	r3, r0
 80054ac:	4a21      	ldr	r2, [pc, #132]	@ (8005534 <vTaskStartScheduler+0xc0>)
 80054ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054b0:	4b20      	ldr	r3, [pc, #128]	@ (8005534 <vTaskStartScheduler+0xc0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054b8:	2301      	movs	r3, #1
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	e001      	b.n	80054c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054be:	2300      	movs	r3, #0
 80054c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d102      	bne.n	80054ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054c8:	f000 fd2c 	bl	8005f24 <xTimerCreateTimerTask>
 80054cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d116      	bne.n	8005502 <vTaskStartScheduler+0x8e>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	613b      	str	r3, [r7, #16]
}
 80054e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054e8:	4b13      	ldr	r3, [pc, #76]	@ (8005538 <vTaskStartScheduler+0xc4>)
 80054ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054f0:	4b12      	ldr	r3, [pc, #72]	@ (800553c <vTaskStartScheduler+0xc8>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054f6:	4b12      	ldr	r3, [pc, #72]	@ (8005540 <vTaskStartScheduler+0xcc>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054fc:	f001 f8f8 	bl	80066f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005500:	e00f      	b.n	8005522 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005508:	d10b      	bne.n	8005522 <vTaskStartScheduler+0xae>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	60fb      	str	r3, [r7, #12]
}
 800551c:	bf00      	nop
 800551e:	bf00      	nop
 8005520:	e7fd      	b.n	800551e <vTaskStartScheduler+0xaa>
}
 8005522:	bf00      	nop
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	0801127c 	.word	0x0801127c
 8005530:	08005bb5 	.word	0x08005bb5
 8005534:	20005418 	.word	0x20005418
 8005538:	20005414 	.word	0x20005414
 800553c:	20005400 	.word	0x20005400
 8005540:	200053f8 	.word	0x200053f8

08005544 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005548:	4b04      	ldr	r3, [pc, #16]	@ (800555c <vTaskSuspendAll+0x18>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3301      	adds	r3, #1
 800554e:	4a03      	ldr	r2, [pc, #12]	@ (800555c <vTaskSuspendAll+0x18>)
 8005550:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005552:	bf00      	nop
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	2000541c 	.word	0x2000541c

08005560 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800556a:	2300      	movs	r3, #0
 800556c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800556e:	4b42      	ldr	r3, [pc, #264]	@ (8005678 <xTaskResumeAll+0x118>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10b      	bne.n	800558e <xTaskResumeAll+0x2e>
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	603b      	str	r3, [r7, #0]
}
 8005588:	bf00      	nop
 800558a:	bf00      	nop
 800558c:	e7fd      	b.n	800558a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800558e:	f001 f953 	bl	8006838 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005592:	4b39      	ldr	r3, [pc, #228]	@ (8005678 <xTaskResumeAll+0x118>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3b01      	subs	r3, #1
 8005598:	4a37      	ldr	r2, [pc, #220]	@ (8005678 <xTaskResumeAll+0x118>)
 800559a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800559c:	4b36      	ldr	r3, [pc, #216]	@ (8005678 <xTaskResumeAll+0x118>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d162      	bne.n	800566a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055a4:	4b35      	ldr	r3, [pc, #212]	@ (800567c <xTaskResumeAll+0x11c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d05e      	beq.n	800566a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055ac:	e02f      	b.n	800560e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ae:	4b34      	ldr	r3, [pc, #208]	@ (8005680 <xTaskResumeAll+0x120>)
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3318      	adds	r3, #24
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff f85a 	bl	8004674 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3304      	adds	r3, #4
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff f855 	bl	8004674 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005684 <xTaskResumeAll+0x124>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d903      	bls.n	80055de <xTaskResumeAll+0x7e>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055da:	4a2a      	ldr	r2, [pc, #168]	@ (8005684 <xTaskResumeAll+0x124>)
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4a27      	ldr	r2, [pc, #156]	@ (8005688 <xTaskResumeAll+0x128>)
 80055ec:	441a      	add	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	3304      	adds	r3, #4
 80055f2:	4619      	mov	r1, r3
 80055f4:	4610      	mov	r0, r2
 80055f6:	f7fe ffe0 	bl	80045ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055fe:	4b23      	ldr	r3, [pc, #140]	@ (800568c <xTaskResumeAll+0x12c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005604:	429a      	cmp	r2, r3
 8005606:	d302      	bcc.n	800560e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005608:	4b21      	ldr	r3, [pc, #132]	@ (8005690 <xTaskResumeAll+0x130>)
 800560a:	2201      	movs	r2, #1
 800560c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800560e:	4b1c      	ldr	r3, [pc, #112]	@ (8005680 <xTaskResumeAll+0x120>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1cb      	bne.n	80055ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800561c:	f000 fb80 	bl	8005d20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005620:	4b1c      	ldr	r3, [pc, #112]	@ (8005694 <xTaskResumeAll+0x134>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d010      	beq.n	800564e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800562c:	f000 f846 	bl	80056bc <xTaskIncrementTick>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005636:	4b16      	ldr	r3, [pc, #88]	@ (8005690 <xTaskResumeAll+0x130>)
 8005638:	2201      	movs	r2, #1
 800563a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	3b01      	subs	r3, #1
 8005640:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1f1      	bne.n	800562c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005648:	4b12      	ldr	r3, [pc, #72]	@ (8005694 <xTaskResumeAll+0x134>)
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800564e:	4b10      	ldr	r3, [pc, #64]	@ (8005690 <xTaskResumeAll+0x130>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d009      	beq.n	800566a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005656:	2301      	movs	r3, #1
 8005658:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800565a:	4b0f      	ldr	r3, [pc, #60]	@ (8005698 <xTaskResumeAll+0x138>)
 800565c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800566a:	f001 f917 	bl	800689c <vPortExitCritical>

	return xAlreadyYielded;
 800566e:	68bb      	ldr	r3, [r7, #8]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	2000541c 	.word	0x2000541c
 800567c:	200053f4 	.word	0x200053f4
 8005680:	200053b4 	.word	0x200053b4
 8005684:	200053fc 	.word	0x200053fc
 8005688:	20004f24 	.word	0x20004f24
 800568c:	20004f20 	.word	0x20004f20
 8005690:	20005408 	.word	0x20005408
 8005694:	20005404 	.word	0x20005404
 8005698:	e000ed04 	.word	0xe000ed04

0800569c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80056a2:	4b05      	ldr	r3, [pc, #20]	@ (80056b8 <xTaskGetTickCount+0x1c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056a8:	687b      	ldr	r3, [r7, #4]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	200053f8 	.word	0x200053f8

080056bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056c2:	2300      	movs	r3, #0
 80056c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056c6:	4b4f      	ldr	r3, [pc, #316]	@ (8005804 <xTaskIncrementTick+0x148>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f040 8090 	bne.w	80057f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056d0:	4b4d      	ldr	r3, [pc, #308]	@ (8005808 <xTaskIncrementTick+0x14c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3301      	adds	r3, #1
 80056d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056d8:	4a4b      	ldr	r2, [pc, #300]	@ (8005808 <xTaskIncrementTick+0x14c>)
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d121      	bne.n	8005728 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80056e4:	4b49      	ldr	r3, [pc, #292]	@ (800580c <xTaskIncrementTick+0x150>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00b      	beq.n	8005706 <xTaskIncrementTick+0x4a>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	603b      	str	r3, [r7, #0]
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	e7fd      	b.n	8005702 <xTaskIncrementTick+0x46>
 8005706:	4b41      	ldr	r3, [pc, #260]	@ (800580c <xTaskIncrementTick+0x150>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	4b40      	ldr	r3, [pc, #256]	@ (8005810 <xTaskIncrementTick+0x154>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a3e      	ldr	r2, [pc, #248]	@ (800580c <xTaskIncrementTick+0x150>)
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	4a3e      	ldr	r2, [pc, #248]	@ (8005810 <xTaskIncrementTick+0x154>)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	4b3e      	ldr	r3, [pc, #248]	@ (8005814 <xTaskIncrementTick+0x158>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3301      	adds	r3, #1
 8005720:	4a3c      	ldr	r2, [pc, #240]	@ (8005814 <xTaskIncrementTick+0x158>)
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	f000 fafc 	bl	8005d20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005728:	4b3b      	ldr	r3, [pc, #236]	@ (8005818 <xTaskIncrementTick+0x15c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	429a      	cmp	r2, r3
 8005730:	d349      	bcc.n	80057c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005732:	4b36      	ldr	r3, [pc, #216]	@ (800580c <xTaskIncrementTick+0x150>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d104      	bne.n	8005746 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800573c:	4b36      	ldr	r3, [pc, #216]	@ (8005818 <xTaskIncrementTick+0x15c>)
 800573e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005742:	601a      	str	r2, [r3, #0]
					break;
 8005744:	e03f      	b.n	80057c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005746:	4b31      	ldr	r3, [pc, #196]	@ (800580c <xTaskIncrementTick+0x150>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	429a      	cmp	r2, r3
 800575c:	d203      	bcs.n	8005766 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800575e:	4a2e      	ldr	r2, [pc, #184]	@ (8005818 <xTaskIncrementTick+0x15c>)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005764:	e02f      	b.n	80057c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	3304      	adds	r3, #4
 800576a:	4618      	mov	r0, r3
 800576c:	f7fe ff82 	bl	8004674 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005774:	2b00      	cmp	r3, #0
 8005776:	d004      	beq.n	8005782 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	3318      	adds	r3, #24
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe ff79 	bl	8004674 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005786:	4b25      	ldr	r3, [pc, #148]	@ (800581c <xTaskIncrementTick+0x160>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d903      	bls.n	8005796 <xTaskIncrementTick+0xda>
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005792:	4a22      	ldr	r2, [pc, #136]	@ (800581c <xTaskIncrementTick+0x160>)
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005820 <xTaskIncrementTick+0x164>)
 80057a4:	441a      	add	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	3304      	adds	r3, #4
 80057aa:	4619      	mov	r1, r3
 80057ac:	4610      	mov	r0, r2
 80057ae:	f7fe ff04 	bl	80045ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005824 <xTaskIncrementTick+0x168>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057bc:	429a      	cmp	r2, r3
 80057be:	d3b8      	bcc.n	8005732 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80057c0:	2301      	movs	r3, #1
 80057c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057c4:	e7b5      	b.n	8005732 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057c6:	4b17      	ldr	r3, [pc, #92]	@ (8005824 <xTaskIncrementTick+0x168>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057cc:	4914      	ldr	r1, [pc, #80]	@ (8005820 <xTaskIncrementTick+0x164>)
 80057ce:	4613      	mov	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	440b      	add	r3, r1
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d901      	bls.n	80057e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80057de:	2301      	movs	r3, #1
 80057e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80057e2:	4b11      	ldr	r3, [pc, #68]	@ (8005828 <xTaskIncrementTick+0x16c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d007      	beq.n	80057fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80057ea:	2301      	movs	r3, #1
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	e004      	b.n	80057fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057f0:	4b0e      	ldr	r3, [pc, #56]	@ (800582c <xTaskIncrementTick+0x170>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3301      	adds	r3, #1
 80057f6:	4a0d      	ldr	r2, [pc, #52]	@ (800582c <xTaskIncrementTick+0x170>)
 80057f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057fa:	697b      	ldr	r3, [r7, #20]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	2000541c 	.word	0x2000541c
 8005808:	200053f8 	.word	0x200053f8
 800580c:	200053ac 	.word	0x200053ac
 8005810:	200053b0 	.word	0x200053b0
 8005814:	2000540c 	.word	0x2000540c
 8005818:	20005414 	.word	0x20005414
 800581c:	200053fc 	.word	0x200053fc
 8005820:	20004f24 	.word	0x20004f24
 8005824:	20004f20 	.word	0x20004f20
 8005828:	20005408 	.word	0x20005408
 800582c:	20005404 	.word	0x20005404

08005830 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005836:	4b28      	ldr	r3, [pc, #160]	@ (80058d8 <vTaskSwitchContext+0xa8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800583e:	4b27      	ldr	r3, [pc, #156]	@ (80058dc <vTaskSwitchContext+0xac>)
 8005840:	2201      	movs	r2, #1
 8005842:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005844:	e042      	b.n	80058cc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005846:	4b25      	ldr	r3, [pc, #148]	@ (80058dc <vTaskSwitchContext+0xac>)
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800584c:	4b24      	ldr	r3, [pc, #144]	@ (80058e0 <vTaskSwitchContext+0xb0>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	e011      	b.n	8005878 <vTaskSwitchContext+0x48>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10b      	bne.n	8005872 <vTaskSwitchContext+0x42>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	607b      	str	r3, [r7, #4]
}
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	e7fd      	b.n	800586e <vTaskSwitchContext+0x3e>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3b01      	subs	r3, #1
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	491a      	ldr	r1, [pc, #104]	@ (80058e4 <vTaskSwitchContext+0xb4>)
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	440b      	add	r3, r1
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0e3      	beq.n	8005854 <vTaskSwitchContext+0x24>
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4a13      	ldr	r2, [pc, #76]	@ (80058e4 <vTaskSwitchContext+0xb4>)
 8005898:	4413      	add	r3, r2
 800589a:	60bb      	str	r3, [r7, #8]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	605a      	str	r2, [r3, #4]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	3308      	adds	r3, #8
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d104      	bne.n	80058bc <vTaskSwitchContext+0x8c>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	605a      	str	r2, [r3, #4]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	4a09      	ldr	r2, [pc, #36]	@ (80058e8 <vTaskSwitchContext+0xb8>)
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	4a06      	ldr	r2, [pc, #24]	@ (80058e0 <vTaskSwitchContext+0xb0>)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6013      	str	r3, [r2, #0]
}
 80058cc:	bf00      	nop
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	2000541c 	.word	0x2000541c
 80058dc:	20005408 	.word	0x20005408
 80058e0:	200053fc 	.word	0x200053fc
 80058e4:	20004f24 	.word	0x20004f24
 80058e8:	20004f20 	.word	0x20004f20

080058ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	60fb      	str	r3, [r7, #12]
}
 800590e:	bf00      	nop
 8005910:	bf00      	nop
 8005912:	e7fd      	b.n	8005910 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005914:	4b07      	ldr	r3, [pc, #28]	@ (8005934 <vTaskPlaceOnEventList+0x48>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3318      	adds	r3, #24
 800591a:	4619      	mov	r1, r3
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7fe fe70 	bl	8004602 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005922:	2101      	movs	r1, #1
 8005924:	6838      	ldr	r0, [r7, #0]
 8005926:	f000 faa9 	bl	8005e7c <prvAddCurrentTaskToDelayedList>
}
 800592a:	bf00      	nop
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20004f20 	.word	0x20004f20

08005938 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10b      	bne.n	8005962 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	617b      	str	r3, [r7, #20]
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	e7fd      	b.n	800595e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005962:	4b0a      	ldr	r3, [pc, #40]	@ (800598c <vTaskPlaceOnEventListRestricted+0x54>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3318      	adds	r3, #24
 8005968:	4619      	mov	r1, r3
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f7fe fe25 	bl	80045ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005976:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800597a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	68b8      	ldr	r0, [r7, #8]
 8005980:	f000 fa7c 	bl	8005e7c <prvAddCurrentTaskToDelayedList>
	}
 8005984:	bf00      	nop
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	20004f20 	.word	0x20004f20

08005990 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	60fb      	str	r3, [r7, #12]
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	e7fd      	b.n	80059ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	3318      	adds	r3, #24
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fe fe56 	bl	8004674 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005a40 <xTaskRemoveFromEventList+0xb0>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d11d      	bne.n	8005a0c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	3304      	adds	r3, #4
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fe fe4d 	bl	8004674 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059de:	4b19      	ldr	r3, [pc, #100]	@ (8005a44 <xTaskRemoveFromEventList+0xb4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d903      	bls.n	80059ee <xTaskRemoveFromEventList+0x5e>
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ea:	4a16      	ldr	r2, [pc, #88]	@ (8005a44 <xTaskRemoveFromEventList+0xb4>)
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4a13      	ldr	r2, [pc, #76]	@ (8005a48 <xTaskRemoveFromEventList+0xb8>)
 80059fc:	441a      	add	r2, r3
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	3304      	adds	r3, #4
 8005a02:	4619      	mov	r1, r3
 8005a04:	4610      	mov	r0, r2
 8005a06:	f7fe fdd8 	bl	80045ba <vListInsertEnd>
 8005a0a:	e005      	b.n	8005a18 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	3318      	adds	r3, #24
 8005a10:	4619      	mov	r1, r3
 8005a12:	480e      	ldr	r0, [pc, #56]	@ (8005a4c <xTaskRemoveFromEventList+0xbc>)
 8005a14:	f7fe fdd1 	bl	80045ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a50 <xTaskRemoveFromEventList+0xc0>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d905      	bls.n	8005a32 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a26:	2301      	movs	r3, #1
 8005a28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a54 <xTaskRemoveFromEventList+0xc4>)
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	e001      	b.n	8005a36 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a36:	697b      	ldr	r3, [r7, #20]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	2000541c 	.word	0x2000541c
 8005a44:	200053fc 	.word	0x200053fc
 8005a48:	20004f24 	.word	0x20004f24
 8005a4c:	200053b4 	.word	0x200053b4
 8005a50:	20004f20 	.word	0x20004f20
 8005a54:	20005408 	.word	0x20005408

08005a58 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10b      	bne.n	8005a7e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8005a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	60fb      	str	r3, [r7, #12]
}
 8005a78:	bf00      	nop
 8005a7a:	bf00      	nop
 8005a7c:	e7fd      	b.n	8005a7a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8005a7e:	f000 fedb 	bl	8006838 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a82:	4b07      	ldr	r3, [pc, #28]	@ (8005aa0 <vTaskSetTimeOutState+0x48>)
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8005a8a:	4b06      	ldr	r3, [pc, #24]	@ (8005aa4 <vTaskSetTimeOutState+0x4c>)
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8005a92:	f000 ff03 	bl	800689c <vPortExitCritical>
}
 8005a96:	bf00      	nop
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	2000540c 	.word	0x2000540c
 8005aa4:	200053f8 	.word	0x200053f8

08005aa8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ab0:	4b06      	ldr	r3, [pc, #24]	@ (8005acc <vTaskInternalSetTimeOutState+0x24>)
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ab8:	4b05      	ldr	r3, [pc, #20]	@ (8005ad0 <vTaskInternalSetTimeOutState+0x28>)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	605a      	str	r2, [r3, #4]
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	2000540c 	.word	0x2000540c
 8005ad0:	200053f8 	.word	0x200053f8

08005ad4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10b      	bne.n	8005afc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	613b      	str	r3, [r7, #16]
}
 8005af6:	bf00      	nop
 8005af8:	bf00      	nop
 8005afa:	e7fd      	b.n	8005af8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10b      	bne.n	8005b1a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	60fb      	str	r3, [r7, #12]
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop
 8005b18:	e7fd      	b.n	8005b16 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005b1a:	f000 fe8d 	bl	8006838 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8005b94 <xTaskCheckForTimeOut+0xc0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b36:	d102      	bne.n	8005b3e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	e023      	b.n	8005b86 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	4b15      	ldr	r3, [pc, #84]	@ (8005b98 <xTaskCheckForTimeOut+0xc4>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d007      	beq.n	8005b5a <xTaskCheckForTimeOut+0x86>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d302      	bcc.n	8005b5a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b54:	2301      	movs	r3, #1
 8005b56:	61fb      	str	r3, [r7, #28]
 8005b58:	e015      	b.n	8005b86 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d20b      	bcs.n	8005b7c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	1ad2      	subs	r2, r2, r3
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff ff99 	bl	8005aa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b76:	2300      	movs	r3, #0
 8005b78:	61fb      	str	r3, [r7, #28]
 8005b7a:	e004      	b.n	8005b86 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b82:	2301      	movs	r3, #1
 8005b84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b86:	f000 fe89 	bl	800689c <vPortExitCritical>

	return xReturn;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3720      	adds	r7, #32
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	200053f8 	.word	0x200053f8
 8005b98:	2000540c 	.word	0x2000540c

08005b9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ba0:	4b03      	ldr	r3, [pc, #12]	@ (8005bb0 <vTaskMissedYield+0x14>)
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]
}
 8005ba6:	bf00      	nop
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	20005408 	.word	0x20005408

08005bb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bbc:	f000 f852 	bl	8005c64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bc0:	4b06      	ldr	r3, [pc, #24]	@ (8005bdc <prvIdleTask+0x28>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d9f9      	bls.n	8005bbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bc8:	4b05      	ldr	r3, [pc, #20]	@ (8005be0 <prvIdleTask+0x2c>)
 8005bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bd8:	e7f0      	b.n	8005bbc <prvIdleTask+0x8>
 8005bda:	bf00      	nop
 8005bdc:	20004f24 	.word	0x20004f24
 8005be0:	e000ed04 	.word	0xe000ed04

08005be4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bea:	2300      	movs	r3, #0
 8005bec:	607b      	str	r3, [r7, #4]
 8005bee:	e00c      	b.n	8005c0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4a12      	ldr	r2, [pc, #72]	@ (8005c44 <prvInitialiseTaskLists+0x60>)
 8005bfc:	4413      	add	r3, r2
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fe fcae 	bl	8004560 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3301      	adds	r3, #1
 8005c08:	607b      	str	r3, [r7, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b37      	cmp	r3, #55	@ 0x37
 8005c0e:	d9ef      	bls.n	8005bf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c10:	480d      	ldr	r0, [pc, #52]	@ (8005c48 <prvInitialiseTaskLists+0x64>)
 8005c12:	f7fe fca5 	bl	8004560 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c16:	480d      	ldr	r0, [pc, #52]	@ (8005c4c <prvInitialiseTaskLists+0x68>)
 8005c18:	f7fe fca2 	bl	8004560 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c1c:	480c      	ldr	r0, [pc, #48]	@ (8005c50 <prvInitialiseTaskLists+0x6c>)
 8005c1e:	f7fe fc9f 	bl	8004560 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c22:	480c      	ldr	r0, [pc, #48]	@ (8005c54 <prvInitialiseTaskLists+0x70>)
 8005c24:	f7fe fc9c 	bl	8004560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c28:	480b      	ldr	r0, [pc, #44]	@ (8005c58 <prvInitialiseTaskLists+0x74>)
 8005c2a:	f7fe fc99 	bl	8004560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c5c <prvInitialiseTaskLists+0x78>)
 8005c30:	4a05      	ldr	r2, [pc, #20]	@ (8005c48 <prvInitialiseTaskLists+0x64>)
 8005c32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c34:	4b0a      	ldr	r3, [pc, #40]	@ (8005c60 <prvInitialiseTaskLists+0x7c>)
 8005c36:	4a05      	ldr	r2, [pc, #20]	@ (8005c4c <prvInitialiseTaskLists+0x68>)
 8005c38:	601a      	str	r2, [r3, #0]
}
 8005c3a:	bf00      	nop
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20004f24 	.word	0x20004f24
 8005c48:	20005384 	.word	0x20005384
 8005c4c:	20005398 	.word	0x20005398
 8005c50:	200053b4 	.word	0x200053b4
 8005c54:	200053c8 	.word	0x200053c8
 8005c58:	200053e0 	.word	0x200053e0
 8005c5c:	200053ac 	.word	0x200053ac
 8005c60:	200053b0 	.word	0x200053b0

08005c64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c6a:	e019      	b.n	8005ca0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c6c:	f000 fde4 	bl	8006838 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c70:	4b10      	ldr	r3, [pc, #64]	@ (8005cb4 <prvCheckTasksWaitingTermination+0x50>)
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fe fcf9 	bl	8004674 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c82:	4b0d      	ldr	r3, [pc, #52]	@ (8005cb8 <prvCheckTasksWaitingTermination+0x54>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	4a0b      	ldr	r2, [pc, #44]	@ (8005cb8 <prvCheckTasksWaitingTermination+0x54>)
 8005c8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005cbc <prvCheckTasksWaitingTermination+0x58>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3b01      	subs	r3, #1
 8005c92:	4a0a      	ldr	r2, [pc, #40]	@ (8005cbc <prvCheckTasksWaitingTermination+0x58>)
 8005c94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c96:	f000 fe01 	bl	800689c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f810 	bl	8005cc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ca0:	4b06      	ldr	r3, [pc, #24]	@ (8005cbc <prvCheckTasksWaitingTermination+0x58>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e1      	bne.n	8005c6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	200053c8 	.word	0x200053c8
 8005cb8:	200053f4 	.word	0x200053f4
 8005cbc:	200053dc 	.word	0x200053dc

08005cc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d108      	bne.n	8005ce4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 ff9e 	bl	8006c18 <vPortFree>
				vPortFree( pxTCB );
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 ff9b 	bl	8006c18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ce2:	e019      	b.n	8005d18 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d103      	bne.n	8005cf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 ff92 	bl	8006c18 <vPortFree>
	}
 8005cf4:	e010      	b.n	8005d18 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d00b      	beq.n	8005d18 <prvDeleteTCB+0x58>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	60fb      	str	r3, [r7, #12]
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	e7fd      	b.n	8005d14 <prvDeleteTCB+0x54>
	}
 8005d18:	bf00      	nop
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d26:	4b0c      	ldr	r3, [pc, #48]	@ (8005d58 <prvResetNextTaskUnblockTime+0x38>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d104      	bne.n	8005d3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d30:	4b0a      	ldr	r3, [pc, #40]	@ (8005d5c <prvResetNextTaskUnblockTime+0x3c>)
 8005d32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d38:	e008      	b.n	8005d4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d3a:	4b07      	ldr	r3, [pc, #28]	@ (8005d58 <prvResetNextTaskUnblockTime+0x38>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	4a04      	ldr	r2, [pc, #16]	@ (8005d5c <prvResetNextTaskUnblockTime+0x3c>)
 8005d4a:	6013      	str	r3, [r2, #0]
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	200053ac 	.word	0x200053ac
 8005d5c:	20005414 	.word	0x20005414

08005d60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d66:	4b0b      	ldr	r3, [pc, #44]	@ (8005d94 <xTaskGetSchedulerState+0x34>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d102      	bne.n	8005d74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	607b      	str	r3, [r7, #4]
 8005d72:	e008      	b.n	8005d86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d74:	4b08      	ldr	r3, [pc, #32]	@ (8005d98 <xTaskGetSchedulerState+0x38>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d102      	bne.n	8005d82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	607b      	str	r3, [r7, #4]
 8005d80:	e001      	b.n	8005d86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d82:	2300      	movs	r3, #0
 8005d84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d86:	687b      	ldr	r3, [r7, #4]
	}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	20005400 	.word	0x20005400
 8005d98:	2000541c 	.word	0x2000541c

08005d9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d058      	beq.n	8005e64 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005db2:	4b2f      	ldr	r3, [pc, #188]	@ (8005e70 <xTaskPriorityDisinherit+0xd4>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d00b      	beq.n	8005dd4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	60fb      	str	r3, [r7, #12]
}
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
 8005dd2:	e7fd      	b.n	8005dd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10b      	bne.n	8005df4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	60bb      	str	r3, [r7, #8]
}
 8005dee:	bf00      	nop
 8005df0:	bf00      	nop
 8005df2:	e7fd      	b.n	8005df0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005df8:	1e5a      	subs	r2, r3, #1
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d02c      	beq.n	8005e64 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d128      	bne.n	8005e64 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	3304      	adds	r3, #4
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fe fc2c 	bl	8004674 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e34:	4b0f      	ldr	r3, [pc, #60]	@ (8005e74 <xTaskPriorityDisinherit+0xd8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d903      	bls.n	8005e44 <xTaskPriorityDisinherit+0xa8>
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e40:	4a0c      	ldr	r2, [pc, #48]	@ (8005e74 <xTaskPriorityDisinherit+0xd8>)
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e48:	4613      	mov	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4a09      	ldr	r2, [pc, #36]	@ (8005e78 <xTaskPriorityDisinherit+0xdc>)
 8005e52:	441a      	add	r2, r3
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	3304      	adds	r3, #4
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	f7fe fbad 	bl	80045ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e60:	2301      	movs	r3, #1
 8005e62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e64:	697b      	ldr	r3, [r7, #20]
	}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20004f20 	.word	0x20004f20
 8005e74:	200053fc 	.word	0x200053fc
 8005e78:	20004f24 	.word	0x20004f24

08005e7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e86:	4b21      	ldr	r3, [pc, #132]	@ (8005f0c <prvAddCurrentTaskToDelayedList+0x90>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e8c:	4b20      	ldr	r3, [pc, #128]	@ (8005f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3304      	adds	r3, #4
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fe fbee 	bl	8004674 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e9e:	d10a      	bne.n	8005eb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d007      	beq.n	8005eb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8005f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	4619      	mov	r1, r3
 8005eae:	4819      	ldr	r0, [pc, #100]	@ (8005f14 <prvAddCurrentTaskToDelayedList+0x98>)
 8005eb0:	f7fe fb83 	bl	80045ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005eb4:	e026      	b.n	8005f04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4413      	add	r3, r2
 8005ebc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ebe:	4b14      	ldr	r3, [pc, #80]	@ (8005f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d209      	bcs.n	8005ee2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ece:	4b12      	ldr	r3, [pc, #72]	@ (8005f18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8005f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4610      	mov	r0, r2
 8005edc:	f7fe fb91 	bl	8004602 <vListInsert>
}
 8005ee0:	e010      	b.n	8005f04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8005f1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8005f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4619      	mov	r1, r3
 8005eee:	4610      	mov	r0, r2
 8005ef0:	f7fe fb87 	bl	8004602 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8005f20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d202      	bcs.n	8005f04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005efe:	4a08      	ldr	r2, [pc, #32]	@ (8005f20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	6013      	str	r3, [r2, #0]
}
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	200053f8 	.word	0x200053f8
 8005f10:	20004f20 	.word	0x20004f20
 8005f14:	200053e0 	.word	0x200053e0
 8005f18:	200053b0 	.word	0x200053b0
 8005f1c:	200053ac 	.word	0x200053ac
 8005f20:	20005414 	.word	0x20005414

08005f24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08a      	sub	sp, #40	@ 0x28
 8005f28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f2e:	f000 fb13 	bl	8006558 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f32:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa8 <xTimerCreateTimerTask+0x84>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d021      	beq.n	8005f7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f42:	1d3a      	adds	r2, r7, #4
 8005f44:	f107 0108 	add.w	r1, r7, #8
 8005f48:	f107 030c 	add.w	r3, r7, #12
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fe faed 	bl	800452c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	9202      	str	r2, [sp, #8]
 8005f5a:	9301      	str	r3, [sp, #4]
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	2300      	movs	r3, #0
 8005f62:	460a      	mov	r2, r1
 8005f64:	4911      	ldr	r1, [pc, #68]	@ (8005fac <xTimerCreateTimerTask+0x88>)
 8005f66:	4812      	ldr	r0, [pc, #72]	@ (8005fb0 <xTimerCreateTimerTask+0x8c>)
 8005f68:	f7ff f8a8 	bl	80050bc <xTaskCreateStatic>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	4a11      	ldr	r2, [pc, #68]	@ (8005fb4 <xTimerCreateTimerTask+0x90>)
 8005f70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f72:	4b10      	ldr	r3, [pc, #64]	@ (8005fb4 <xTimerCreateTimerTask+0x90>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10b      	bne.n	8005f9c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	613b      	str	r3, [r7, #16]
}
 8005f96:	bf00      	nop
 8005f98:	bf00      	nop
 8005f9a:	e7fd      	b.n	8005f98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f9c:	697b      	ldr	r3, [r7, #20]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20005450 	.word	0x20005450
 8005fac:	08011284 	.word	0x08011284
 8005fb0:	080060f1 	.word	0x080060f1
 8005fb4:	20005454 	.word	0x20005454

08005fb8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	@ 0x28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
 8005fc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10b      	bne.n	8005fe8 <xTimerGenericCommand+0x30>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	623b      	str	r3, [r7, #32]
}
 8005fe2:	bf00      	nop
 8005fe4:	bf00      	nop
 8005fe6:	e7fd      	b.n	8005fe4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005fe8:	4b19      	ldr	r3, [pc, #100]	@ (8006050 <xTimerGenericCommand+0x98>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d02a      	beq.n	8006046 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b05      	cmp	r3, #5
 8006000:	dc18      	bgt.n	8006034 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006002:	f7ff fead 	bl	8005d60 <xTaskGetSchedulerState>
 8006006:	4603      	mov	r3, r0
 8006008:	2b02      	cmp	r3, #2
 800600a:	d109      	bne.n	8006020 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800600c:	4b10      	ldr	r3, [pc, #64]	@ (8006050 <xTimerGenericCommand+0x98>)
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	f107 0110 	add.w	r1, r7, #16
 8006014:	2300      	movs	r3, #0
 8006016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006018:	f7fe fc60 	bl	80048dc <xQueueGenericSend>
 800601c:	6278      	str	r0, [r7, #36]	@ 0x24
 800601e:	e012      	b.n	8006046 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006020:	4b0b      	ldr	r3, [pc, #44]	@ (8006050 <xTimerGenericCommand+0x98>)
 8006022:	6818      	ldr	r0, [r3, #0]
 8006024:	f107 0110 	add.w	r1, r7, #16
 8006028:	2300      	movs	r3, #0
 800602a:	2200      	movs	r2, #0
 800602c:	f7fe fc56 	bl	80048dc <xQueueGenericSend>
 8006030:	6278      	str	r0, [r7, #36]	@ 0x24
 8006032:	e008      	b.n	8006046 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006034:	4b06      	ldr	r3, [pc, #24]	@ (8006050 <xTimerGenericCommand+0x98>)
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	f107 0110 	add.w	r1, r7, #16
 800603c:	2300      	movs	r3, #0
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	f7fe fd4e 	bl	8004ae0 <xQueueGenericSendFromISR>
 8006044:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006048:	4618      	mov	r0, r3
 800604a:	3728      	adds	r7, #40	@ 0x28
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20005450 	.word	0x20005450

08006054 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b088      	sub	sp, #32
 8006058:	af02      	add	r7, sp, #8
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800605e:	4b23      	ldr	r3, [pc, #140]	@ (80060ec <prvProcessExpiredTimer+0x98>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	3304      	adds	r3, #4
 800606c:	4618      	mov	r0, r3
 800606e:	f7fe fb01 	bl	8004674 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d023      	beq.n	80060c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	699a      	ldr	r2, [r3, #24]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	18d1      	adds	r1, r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	6978      	ldr	r0, [r7, #20]
 800608e:	f000 f8d5 	bl	800623c <prvInsertTimerInActiveList>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d020      	beq.n	80060da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006098:	2300      	movs	r3, #0
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	2300      	movs	r3, #0
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	2100      	movs	r1, #0
 80060a2:	6978      	ldr	r0, [r7, #20]
 80060a4:	f7ff ff88 	bl	8005fb8 <xTimerGenericCommand>
 80060a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d114      	bne.n	80060da <prvProcessExpiredTimer+0x86>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	60fb      	str	r3, [r7, #12]
}
 80060c2:	bf00      	nop
 80060c4:	bf00      	nop
 80060c6:	e7fd      	b.n	80060c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060ce:	f023 0301 	bic.w	r3, r3, #1
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	6978      	ldr	r0, [r7, #20]
 80060e0:	4798      	blx	r3
}
 80060e2:	bf00      	nop
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20005448 	.word	0x20005448

080060f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060f8:	f107 0308 	add.w	r3, r7, #8
 80060fc:	4618      	mov	r0, r3
 80060fe:	f000 f859 	bl	80061b4 <prvGetNextExpireTime>
 8006102:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4619      	mov	r1, r3
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 f805 	bl	8006118 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800610e:	f000 f8d7 	bl	80062c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006112:	bf00      	nop
 8006114:	e7f0      	b.n	80060f8 <prvTimerTask+0x8>
	...

08006118 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006122:	f7ff fa0f 	bl	8005544 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006126:	f107 0308 	add.w	r3, r7, #8
 800612a:	4618      	mov	r0, r3
 800612c:	f000 f866 	bl	80061fc <prvSampleTimeNow>
 8006130:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d130      	bne.n	800619a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <prvProcessTimerOrBlockTask+0x3c>
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	429a      	cmp	r2, r3
 8006144:	d806      	bhi.n	8006154 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006146:	f7ff fa0b 	bl	8005560 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800614a:	68f9      	ldr	r1, [r7, #12]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7ff ff81 	bl	8006054 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006152:	e024      	b.n	800619e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d008      	beq.n	800616c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800615a:	4b13      	ldr	r3, [pc, #76]	@ (80061a8 <prvProcessTimerOrBlockTask+0x90>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <prvProcessTimerOrBlockTask+0x50>
 8006164:	2301      	movs	r3, #1
 8006166:	e000      	b.n	800616a <prvProcessTimerOrBlockTask+0x52>
 8006168:	2300      	movs	r3, #0
 800616a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800616c:	4b0f      	ldr	r3, [pc, #60]	@ (80061ac <prvProcessTimerOrBlockTask+0x94>)
 800616e:	6818      	ldr	r0, [r3, #0]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	4619      	mov	r1, r3
 800617a:	f7fe ff6b 	bl	8005054 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800617e:	f7ff f9ef 	bl	8005560 <xTaskResumeAll>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10a      	bne.n	800619e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006188:	4b09      	ldr	r3, [pc, #36]	@ (80061b0 <prvProcessTimerOrBlockTask+0x98>)
 800618a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	f3bf 8f6f 	isb	sy
}
 8006198:	e001      	b.n	800619e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800619a:	f7ff f9e1 	bl	8005560 <xTaskResumeAll>
}
 800619e:	bf00      	nop
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	2000544c 	.word	0x2000544c
 80061ac:	20005450 	.word	0x20005450
 80061b0:	e000ed04 	.word	0xe000ed04

080061b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061bc:	4b0e      	ldr	r3, [pc, #56]	@ (80061f8 <prvGetNextExpireTime+0x44>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <prvGetNextExpireTime+0x16>
 80061c6:	2201      	movs	r2, #1
 80061c8:	e000      	b.n	80061cc <prvGetNextExpireTime+0x18>
 80061ca:	2200      	movs	r2, #0
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d105      	bne.n	80061e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061d8:	4b07      	ldr	r3, [pc, #28]	@ (80061f8 <prvGetNextExpireTime+0x44>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	e001      	b.n	80061e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061e8:	68fb      	ldr	r3, [r7, #12]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	20005448 	.word	0x20005448

080061fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006204:	f7ff fa4a 	bl	800569c <xTaskGetTickCount>
 8006208:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800620a:	4b0b      	ldr	r3, [pc, #44]	@ (8006238 <prvSampleTimeNow+0x3c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	429a      	cmp	r2, r3
 8006212:	d205      	bcs.n	8006220 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006214:	f000 f93a 	bl	800648c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	e002      	b.n	8006226 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006226:	4a04      	ldr	r2, [pc, #16]	@ (8006238 <prvSampleTimeNow+0x3c>)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800622c:	68fb      	ldr	r3, [r7, #12]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	20005458 	.word	0x20005458

0800623c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
 8006248:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800624a:	2300      	movs	r3, #0
 800624c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	429a      	cmp	r2, r3
 8006260:	d812      	bhi.n	8006288 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	1ad2      	subs	r2, r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	429a      	cmp	r2, r3
 800626e:	d302      	bcc.n	8006276 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006270:	2301      	movs	r3, #1
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	e01b      	b.n	80062ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006276:	4b10      	ldr	r3, [pc, #64]	@ (80062b8 <prvInsertTimerInActiveList+0x7c>)
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3304      	adds	r3, #4
 800627e:	4619      	mov	r1, r3
 8006280:	4610      	mov	r0, r2
 8006282:	f7fe f9be 	bl	8004602 <vListInsert>
 8006286:	e012      	b.n	80062ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	429a      	cmp	r2, r3
 800628e:	d206      	bcs.n	800629e <prvInsertTimerInActiveList+0x62>
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	d302      	bcc.n	800629e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006298:	2301      	movs	r3, #1
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	e007      	b.n	80062ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800629e:	4b07      	ldr	r3, [pc, #28]	@ (80062bc <prvInsertTimerInActiveList+0x80>)
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3304      	adds	r3, #4
 80062a6:	4619      	mov	r1, r3
 80062a8:	4610      	mov	r0, r2
 80062aa:	f7fe f9aa 	bl	8004602 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062ae:	697b      	ldr	r3, [r7, #20]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	2000544c 	.word	0x2000544c
 80062bc:	20005448 	.word	0x20005448

080062c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08e      	sub	sp, #56	@ 0x38
 80062c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062c6:	e0ce      	b.n	8006466 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	da19      	bge.n	8006302 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80062ce:	1d3b      	adds	r3, r7, #4
 80062d0:	3304      	adds	r3, #4
 80062d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10b      	bne.n	80062f2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	61fb      	str	r3, [r7, #28]
}
 80062ec:	bf00      	nop
 80062ee:	bf00      	nop
 80062f0:	e7fd      	b.n	80062ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80062f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062f8:	6850      	ldr	r0, [r2, #4]
 80062fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062fc:	6892      	ldr	r2, [r2, #8]
 80062fe:	4611      	mov	r1, r2
 8006300:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f2c0 80ae 	blt.w	8006466 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800630e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d004      	beq.n	8006320 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006318:	3304      	adds	r3, #4
 800631a:	4618      	mov	r0, r3
 800631c:	f7fe f9aa 	bl	8004674 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006320:	463b      	mov	r3, r7
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff ff6a 	bl	80061fc <prvSampleTimeNow>
 8006328:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b09      	cmp	r3, #9
 800632e:	f200 8097 	bhi.w	8006460 <prvProcessReceivedCommands+0x1a0>
 8006332:	a201      	add	r2, pc, #4	@ (adr r2, 8006338 <prvProcessReceivedCommands+0x78>)
 8006334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006338:	08006361 	.word	0x08006361
 800633c:	08006361 	.word	0x08006361
 8006340:	08006361 	.word	0x08006361
 8006344:	080063d7 	.word	0x080063d7
 8006348:	080063eb 	.word	0x080063eb
 800634c:	08006437 	.word	0x08006437
 8006350:	08006361 	.word	0x08006361
 8006354:	08006361 	.word	0x08006361
 8006358:	080063d7 	.word	0x080063d7
 800635c:	080063eb 	.word	0x080063eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006362:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006366:	f043 0301 	orr.w	r3, r3, #1
 800636a:	b2da      	uxtb	r2, r3
 800636c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	18d1      	adds	r1, r2, r3
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800637e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006380:	f7ff ff5c 	bl	800623c <prvInsertTimerInActiveList>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d06c      	beq.n	8006464 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800638a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006390:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006394:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d061      	beq.n	8006464 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	441a      	add	r2, r3
 80063a8:	2300      	movs	r3, #0
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	2300      	movs	r3, #0
 80063ae:	2100      	movs	r1, #0
 80063b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063b2:	f7ff fe01 	bl	8005fb8 <xTimerGenericCommand>
 80063b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d152      	bne.n	8006464 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	61bb      	str	r3, [r7, #24]
}
 80063d0:	bf00      	nop
 80063d2:	bf00      	nop
 80063d4:	e7fd      	b.n	80063d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063dc:	f023 0301 	bic.w	r3, r3, #1
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80063e8:	e03d      	b.n	8006466 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063f0:	f043 0301 	orr.w	r3, r3, #1
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006400:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10b      	bne.n	8006422 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	617b      	str	r3, [r7, #20]
}
 800641c:	bf00      	nop
 800641e:	bf00      	nop
 8006420:	e7fd      	b.n	800641e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006424:	699a      	ldr	r2, [r3, #24]
 8006426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006428:	18d1      	adds	r1, r2, r3
 800642a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800642e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006430:	f7ff ff04 	bl	800623c <prvInsertTimerInActiveList>
					break;
 8006434:	e017      	b.n	8006466 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006438:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d103      	bne.n	800644c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006446:	f000 fbe7 	bl	8006c18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800644a:	e00c      	b.n	8006466 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800644c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006452:	f023 0301 	bic.w	r3, r3, #1
 8006456:	b2da      	uxtb	r2, r3
 8006458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800645e:	e002      	b.n	8006466 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006460:	bf00      	nop
 8006462:	e000      	b.n	8006466 <prvProcessReceivedCommands+0x1a6>
					break;
 8006464:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006466:	4b08      	ldr	r3, [pc, #32]	@ (8006488 <prvProcessReceivedCommands+0x1c8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	1d39      	adds	r1, r7, #4
 800646c:	2200      	movs	r2, #0
 800646e:	4618      	mov	r0, r3
 8006470:	f7fe fbd4 	bl	8004c1c <xQueueReceive>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	f47f af26 	bne.w	80062c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800647c:	bf00      	nop
 800647e:	bf00      	nop
 8006480:	3730      	adds	r7, #48	@ 0x30
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20005450 	.word	0x20005450

0800648c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006492:	e049      	b.n	8006528 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006494:	4b2e      	ldr	r3, [pc, #184]	@ (8006550 <prvSwitchTimerLists+0xc4>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800649e:	4b2c      	ldr	r3, [pc, #176]	@ (8006550 <prvSwitchTimerLists+0xc4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3304      	adds	r3, #4
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fe f8e1 	bl	8004674 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064c0:	f003 0304 	and.w	r3, r3, #4
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d02f      	beq.n	8006528 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4413      	add	r3, r2
 80064d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d90e      	bls.n	80064f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064e6:	4b1a      	ldr	r3, [pc, #104]	@ (8006550 <prvSwitchTimerLists+0xc4>)
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	3304      	adds	r3, #4
 80064ee:	4619      	mov	r1, r3
 80064f0:	4610      	mov	r0, r2
 80064f2:	f7fe f886 	bl	8004602 <vListInsert>
 80064f6:	e017      	b.n	8006528 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064f8:	2300      	movs	r3, #0
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	2300      	movs	r3, #0
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	2100      	movs	r1, #0
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f7ff fd58 	bl	8005fb8 <xTimerGenericCommand>
 8006508:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10b      	bne.n	8006528 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	603b      	str	r3, [r7, #0]
}
 8006522:	bf00      	nop
 8006524:	bf00      	nop
 8006526:	e7fd      	b.n	8006524 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006528:	4b09      	ldr	r3, [pc, #36]	@ (8006550 <prvSwitchTimerLists+0xc4>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1b0      	bne.n	8006494 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006532:	4b07      	ldr	r3, [pc, #28]	@ (8006550 <prvSwitchTimerLists+0xc4>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006538:	4b06      	ldr	r3, [pc, #24]	@ (8006554 <prvSwitchTimerLists+0xc8>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a04      	ldr	r2, [pc, #16]	@ (8006550 <prvSwitchTimerLists+0xc4>)
 800653e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006540:	4a04      	ldr	r2, [pc, #16]	@ (8006554 <prvSwitchTimerLists+0xc8>)
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	6013      	str	r3, [r2, #0]
}
 8006546:	bf00      	nop
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20005448 	.word	0x20005448
 8006554:	2000544c 	.word	0x2000544c

08006558 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800655e:	f000 f96b 	bl	8006838 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006562:	4b15      	ldr	r3, [pc, #84]	@ (80065b8 <prvCheckForValidListAndQueue+0x60>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d120      	bne.n	80065ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800656a:	4814      	ldr	r0, [pc, #80]	@ (80065bc <prvCheckForValidListAndQueue+0x64>)
 800656c:	f7fd fff8 	bl	8004560 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006570:	4813      	ldr	r0, [pc, #76]	@ (80065c0 <prvCheckForValidListAndQueue+0x68>)
 8006572:	f7fd fff5 	bl	8004560 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006576:	4b13      	ldr	r3, [pc, #76]	@ (80065c4 <prvCheckForValidListAndQueue+0x6c>)
 8006578:	4a10      	ldr	r2, [pc, #64]	@ (80065bc <prvCheckForValidListAndQueue+0x64>)
 800657a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800657c:	4b12      	ldr	r3, [pc, #72]	@ (80065c8 <prvCheckForValidListAndQueue+0x70>)
 800657e:	4a10      	ldr	r2, [pc, #64]	@ (80065c0 <prvCheckForValidListAndQueue+0x68>)
 8006580:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006582:	2300      	movs	r3, #0
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	4b11      	ldr	r3, [pc, #68]	@ (80065cc <prvCheckForValidListAndQueue+0x74>)
 8006588:	4a11      	ldr	r2, [pc, #68]	@ (80065d0 <prvCheckForValidListAndQueue+0x78>)
 800658a:	2110      	movs	r1, #16
 800658c:	200a      	movs	r0, #10
 800658e:	f7fe f905 	bl	800479c <xQueueGenericCreateStatic>
 8006592:	4603      	mov	r3, r0
 8006594:	4a08      	ldr	r2, [pc, #32]	@ (80065b8 <prvCheckForValidListAndQueue+0x60>)
 8006596:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006598:	4b07      	ldr	r3, [pc, #28]	@ (80065b8 <prvCheckForValidListAndQueue+0x60>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d005      	beq.n	80065ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80065a0:	4b05      	ldr	r3, [pc, #20]	@ (80065b8 <prvCheckForValidListAndQueue+0x60>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	490b      	ldr	r1, [pc, #44]	@ (80065d4 <prvCheckForValidListAndQueue+0x7c>)
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fe fd2a 	bl	8005000 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065ac:	f000 f976 	bl	800689c <vPortExitCritical>
}
 80065b0:	bf00      	nop
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20005450 	.word	0x20005450
 80065bc:	20005420 	.word	0x20005420
 80065c0:	20005434 	.word	0x20005434
 80065c4:	20005448 	.word	0x20005448
 80065c8:	2000544c 	.word	0x2000544c
 80065cc:	200054fc 	.word	0x200054fc
 80065d0:	2000545c 	.word	0x2000545c
 80065d4:	0801128c 	.word	0x0801128c

080065d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	3b04      	subs	r3, #4
 80065e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3b04      	subs	r3, #4
 80065f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f023 0201 	bic.w	r2, r3, #1
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3b04      	subs	r3, #4
 8006606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006608:	4a0c      	ldr	r2, [pc, #48]	@ (800663c <pxPortInitialiseStack+0x64>)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3b14      	subs	r3, #20
 8006612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3b04      	subs	r3, #4
 800661e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f06f 0202 	mvn.w	r2, #2
 8006626:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3b20      	subs	r3, #32
 800662c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800662e:	68fb      	ldr	r3, [r7, #12]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	08006641 	.word	0x08006641

08006640 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006646:	2300      	movs	r3, #0
 8006648:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800664a:	4b13      	ldr	r3, [pc, #76]	@ (8006698 <prvTaskExitError+0x58>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006652:	d00b      	beq.n	800666c <prvTaskExitError+0x2c>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	60fb      	str	r3, [r7, #12]
}
 8006666:	bf00      	nop
 8006668:	bf00      	nop
 800666a:	e7fd      	b.n	8006668 <prvTaskExitError+0x28>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	60bb      	str	r3, [r7, #8]
}
 800667e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006680:	bf00      	nop
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0fc      	beq.n	8006682 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006688:	bf00      	nop
 800668a:	bf00      	nop
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	20000010 	.word	0x20000010
 800669c:	00000000 	.word	0x00000000

080066a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066a0:	4b07      	ldr	r3, [pc, #28]	@ (80066c0 <pxCurrentTCBConst2>)
 80066a2:	6819      	ldr	r1, [r3, #0]
 80066a4:	6808      	ldr	r0, [r1, #0]
 80066a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066aa:	f380 8809 	msr	PSP, r0
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f04f 0000 	mov.w	r0, #0
 80066b6:	f380 8811 	msr	BASEPRI, r0
 80066ba:	4770      	bx	lr
 80066bc:	f3af 8000 	nop.w

080066c0 <pxCurrentTCBConst2>:
 80066c0:	20004f20 	.word	0x20004f20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop

080066c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066c8:	4808      	ldr	r0, [pc, #32]	@ (80066ec <prvPortStartFirstTask+0x24>)
 80066ca:	6800      	ldr	r0, [r0, #0]
 80066cc:	6800      	ldr	r0, [r0, #0]
 80066ce:	f380 8808 	msr	MSP, r0
 80066d2:	f04f 0000 	mov.w	r0, #0
 80066d6:	f380 8814 	msr	CONTROL, r0
 80066da:	b662      	cpsie	i
 80066dc:	b661      	cpsie	f
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	df00      	svc	0
 80066e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066ea:	bf00      	nop
 80066ec:	e000ed08 	.word	0xe000ed08

080066f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066f6:	4b47      	ldr	r3, [pc, #284]	@ (8006814 <xPortStartScheduler+0x124>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a47      	ldr	r2, [pc, #284]	@ (8006818 <xPortStartScheduler+0x128>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d10b      	bne.n	8006718 <xPortStartScheduler+0x28>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	60fb      	str	r3, [r7, #12]
}
 8006712:	bf00      	nop
 8006714:	bf00      	nop
 8006716:	e7fd      	b.n	8006714 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006718:	4b3e      	ldr	r3, [pc, #248]	@ (8006814 <xPortStartScheduler+0x124>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a3f      	ldr	r2, [pc, #252]	@ (800681c <xPortStartScheduler+0x12c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d10b      	bne.n	800673a <xPortStartScheduler+0x4a>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	613b      	str	r3, [r7, #16]
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop
 8006738:	e7fd      	b.n	8006736 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800673a:	4b39      	ldr	r3, [pc, #228]	@ (8006820 <xPortStartScheduler+0x130>)
 800673c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	b2db      	uxtb	r3, r3
 8006744:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	22ff      	movs	r2, #255	@ 0xff
 800674a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006754:	78fb      	ldrb	r3, [r7, #3]
 8006756:	b2db      	uxtb	r3, r3
 8006758:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800675c:	b2da      	uxtb	r2, r3
 800675e:	4b31      	ldr	r3, [pc, #196]	@ (8006824 <xPortStartScheduler+0x134>)
 8006760:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006762:	4b31      	ldr	r3, [pc, #196]	@ (8006828 <xPortStartScheduler+0x138>)
 8006764:	2207      	movs	r2, #7
 8006766:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006768:	e009      	b.n	800677e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800676a:	4b2f      	ldr	r3, [pc, #188]	@ (8006828 <xPortStartScheduler+0x138>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3b01      	subs	r3, #1
 8006770:	4a2d      	ldr	r2, [pc, #180]	@ (8006828 <xPortStartScheduler+0x138>)
 8006772:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006774:	78fb      	ldrb	r3, [r7, #3]
 8006776:	b2db      	uxtb	r3, r3
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	b2db      	uxtb	r3, r3
 800677c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800677e:	78fb      	ldrb	r3, [r7, #3]
 8006780:	b2db      	uxtb	r3, r3
 8006782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006786:	2b80      	cmp	r3, #128	@ 0x80
 8006788:	d0ef      	beq.n	800676a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800678a:	4b27      	ldr	r3, [pc, #156]	@ (8006828 <xPortStartScheduler+0x138>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f1c3 0307 	rsb	r3, r3, #7
 8006792:	2b04      	cmp	r3, #4
 8006794:	d00b      	beq.n	80067ae <xPortStartScheduler+0xbe>
	__asm volatile
 8006796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	60bb      	str	r3, [r7, #8]
}
 80067a8:	bf00      	nop
 80067aa:	bf00      	nop
 80067ac:	e7fd      	b.n	80067aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006828 <xPortStartScheduler+0x138>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006828 <xPortStartScheduler+0x138>)
 80067b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006828 <xPortStartScheduler+0x138>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80067c0:	4a19      	ldr	r2, [pc, #100]	@ (8006828 <xPortStartScheduler+0x138>)
 80067c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067cc:	4b17      	ldr	r3, [pc, #92]	@ (800682c <xPortStartScheduler+0x13c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a16      	ldr	r2, [pc, #88]	@ (800682c <xPortStartScheduler+0x13c>)
 80067d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80067d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067d8:	4b14      	ldr	r3, [pc, #80]	@ (800682c <xPortStartScheduler+0x13c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a13      	ldr	r2, [pc, #76]	@ (800682c <xPortStartScheduler+0x13c>)
 80067de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80067e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067e4:	f000 f8da 	bl	800699c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067e8:	4b11      	ldr	r3, [pc, #68]	@ (8006830 <xPortStartScheduler+0x140>)
 80067ea:	2200      	movs	r2, #0
 80067ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067ee:	f000 f8f9 	bl	80069e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067f2:	4b10      	ldr	r3, [pc, #64]	@ (8006834 <xPortStartScheduler+0x144>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a0f      	ldr	r2, [pc, #60]	@ (8006834 <xPortStartScheduler+0x144>)
 80067f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80067fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067fe:	f7ff ff63 	bl	80066c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006802:	f7ff f815 	bl	8005830 <vTaskSwitchContext>
	prvTaskExitError();
 8006806:	f7ff ff1b 	bl	8006640 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	e000ed00 	.word	0xe000ed00
 8006818:	410fc271 	.word	0x410fc271
 800681c:	410fc270 	.word	0x410fc270
 8006820:	e000e400 	.word	0xe000e400
 8006824:	2000554c 	.word	0x2000554c
 8006828:	20005550 	.word	0x20005550
 800682c:	e000ed20 	.word	0xe000ed20
 8006830:	20000010 	.word	0x20000010
 8006834:	e000ef34 	.word	0xe000ef34

08006838 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	607b      	str	r3, [r7, #4]
}
 8006850:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006852:	4b10      	ldr	r3, [pc, #64]	@ (8006894 <vPortEnterCritical+0x5c>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3301      	adds	r3, #1
 8006858:	4a0e      	ldr	r2, [pc, #56]	@ (8006894 <vPortEnterCritical+0x5c>)
 800685a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800685c:	4b0d      	ldr	r3, [pc, #52]	@ (8006894 <vPortEnterCritical+0x5c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d110      	bne.n	8006886 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006864:	4b0c      	ldr	r3, [pc, #48]	@ (8006898 <vPortEnterCritical+0x60>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00b      	beq.n	8006886 <vPortEnterCritical+0x4e>
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	603b      	str	r3, [r7, #0]
}
 8006880:	bf00      	nop
 8006882:	bf00      	nop
 8006884:	e7fd      	b.n	8006882 <vPortEnterCritical+0x4a>
	}
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	20000010 	.word	0x20000010
 8006898:	e000ed04 	.word	0xe000ed04

0800689c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068a2:	4b12      	ldr	r3, [pc, #72]	@ (80068ec <vPortExitCritical+0x50>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10b      	bne.n	80068c2 <vPortExitCritical+0x26>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	607b      	str	r3, [r7, #4]
}
 80068bc:	bf00      	nop
 80068be:	bf00      	nop
 80068c0:	e7fd      	b.n	80068be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80068c2:	4b0a      	ldr	r3, [pc, #40]	@ (80068ec <vPortExitCritical+0x50>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	4a08      	ldr	r2, [pc, #32]	@ (80068ec <vPortExitCritical+0x50>)
 80068ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068cc:	4b07      	ldr	r3, [pc, #28]	@ (80068ec <vPortExitCritical+0x50>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d105      	bne.n	80068e0 <vPortExitCritical+0x44>
 80068d4:	2300      	movs	r3, #0
 80068d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	f383 8811 	msr	BASEPRI, r3
}
 80068de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	20000010 	.word	0x20000010

080068f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068f0:	f3ef 8009 	mrs	r0, PSP
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	4b15      	ldr	r3, [pc, #84]	@ (8006950 <pxCurrentTCBConst>)
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	f01e 0f10 	tst.w	lr, #16
 8006900:	bf08      	it	eq
 8006902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800690a:	6010      	str	r0, [r2, #0]
 800690c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006910:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006914:	f380 8811 	msr	BASEPRI, r0
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f7fe ff86 	bl	8005830 <vTaskSwitchContext>
 8006924:	f04f 0000 	mov.w	r0, #0
 8006928:	f380 8811 	msr	BASEPRI, r0
 800692c:	bc09      	pop	{r0, r3}
 800692e:	6819      	ldr	r1, [r3, #0]
 8006930:	6808      	ldr	r0, [r1, #0]
 8006932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006936:	f01e 0f10 	tst.w	lr, #16
 800693a:	bf08      	it	eq
 800693c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006940:	f380 8809 	msr	PSP, r0
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	f3af 8000 	nop.w

08006950 <pxCurrentTCBConst>:
 8006950:	20004f20 	.word	0x20004f20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop

08006958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	607b      	str	r3, [r7, #4]
}
 8006970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006972:	f7fe fea3 	bl	80056bc <xTaskIncrementTick>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800697c:	4b06      	ldr	r3, [pc, #24]	@ (8006998 <xPortSysTickHandler+0x40>)
 800697e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	2300      	movs	r3, #0
 8006986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	f383 8811 	msr	BASEPRI, r3
}
 800698e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	e000ed04 	.word	0xe000ed04

0800699c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069a0:	4b0b      	ldr	r3, [pc, #44]	@ (80069d0 <vPortSetupTimerInterrupt+0x34>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069a6:	4b0b      	ldr	r3, [pc, #44]	@ (80069d4 <vPortSetupTimerInterrupt+0x38>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069ac:	4b0a      	ldr	r3, [pc, #40]	@ (80069d8 <vPortSetupTimerInterrupt+0x3c>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a0a      	ldr	r2, [pc, #40]	@ (80069dc <vPortSetupTimerInterrupt+0x40>)
 80069b2:	fba2 2303 	umull	r2, r3, r2, r3
 80069b6:	099b      	lsrs	r3, r3, #6
 80069b8:	4a09      	ldr	r2, [pc, #36]	@ (80069e0 <vPortSetupTimerInterrupt+0x44>)
 80069ba:	3b01      	subs	r3, #1
 80069bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069be:	4b04      	ldr	r3, [pc, #16]	@ (80069d0 <vPortSetupTimerInterrupt+0x34>)
 80069c0:	2207      	movs	r2, #7
 80069c2:	601a      	str	r2, [r3, #0]
}
 80069c4:	bf00      	nop
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	e000e010 	.word	0xe000e010
 80069d4:	e000e018 	.word	0xe000e018
 80069d8:	20000004 	.word	0x20000004
 80069dc:	10624dd3 	.word	0x10624dd3
 80069e0:	e000e014 	.word	0xe000e014

080069e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80069f4 <vPortEnableVFP+0x10>
 80069e8:	6801      	ldr	r1, [r0, #0]
 80069ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80069ee:	6001      	str	r1, [r0, #0]
 80069f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069f2:	bf00      	nop
 80069f4:	e000ed88 	.word	0xe000ed88

080069f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069fe:	f3ef 8305 	mrs	r3, IPSR
 8006a02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b0f      	cmp	r3, #15
 8006a08:	d915      	bls.n	8006a36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a0a:	4a18      	ldr	r2, [pc, #96]	@ (8006a6c <vPortValidateInterruptPriority+0x74>)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a14:	4b16      	ldr	r3, [pc, #88]	@ (8006a70 <vPortValidateInterruptPriority+0x78>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	7afa      	ldrb	r2, [r7, #11]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d20b      	bcs.n	8006a36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	607b      	str	r3, [r7, #4]
}
 8006a30:	bf00      	nop
 8006a32:	bf00      	nop
 8006a34:	e7fd      	b.n	8006a32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a36:	4b0f      	ldr	r3, [pc, #60]	@ (8006a74 <vPortValidateInterruptPriority+0x7c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a78 <vPortValidateInterruptPriority+0x80>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d90b      	bls.n	8006a5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	603b      	str	r3, [r7, #0]
}
 8006a58:	bf00      	nop
 8006a5a:	bf00      	nop
 8006a5c:	e7fd      	b.n	8006a5a <vPortValidateInterruptPriority+0x62>
	}
 8006a5e:	bf00      	nop
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	e000e3f0 	.word	0xe000e3f0
 8006a70:	2000554c 	.word	0x2000554c
 8006a74:	e000ed0c 	.word	0xe000ed0c
 8006a78:	20005550 	.word	0x20005550

08006a7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08a      	sub	sp, #40	@ 0x28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a84:	2300      	movs	r3, #0
 8006a86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a88:	f7fe fd5c 	bl	8005544 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a8c:	4b5c      	ldr	r3, [pc, #368]	@ (8006c00 <pvPortMalloc+0x184>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a94:	f000 f924 	bl	8006ce0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a98:	4b5a      	ldr	r3, [pc, #360]	@ (8006c04 <pvPortMalloc+0x188>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f040 8095 	bne.w	8006bd0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d01e      	beq.n	8006aea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006aac:	2208      	movs	r2, #8
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d015      	beq.n	8006aea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f023 0307 	bic.w	r3, r3, #7
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f003 0307 	and.w	r3, r3, #7
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00b      	beq.n	8006aea <pvPortMalloc+0x6e>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	617b      	str	r3, [r7, #20]
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop
 8006ae8:	e7fd      	b.n	8006ae6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d06f      	beq.n	8006bd0 <pvPortMalloc+0x154>
 8006af0:	4b45      	ldr	r3, [pc, #276]	@ (8006c08 <pvPortMalloc+0x18c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d86a      	bhi.n	8006bd0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006afa:	4b44      	ldr	r3, [pc, #272]	@ (8006c0c <pvPortMalloc+0x190>)
 8006afc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006afe:	4b43      	ldr	r3, [pc, #268]	@ (8006c0c <pvPortMalloc+0x190>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b04:	e004      	b.n	8006b10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d903      	bls.n	8006b22 <pvPortMalloc+0xa6>
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1f1      	bne.n	8006b06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b22:	4b37      	ldr	r3, [pc, #220]	@ (8006c00 <pvPortMalloc+0x184>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d051      	beq.n	8006bd0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2208      	movs	r2, #8
 8006b32:	4413      	add	r3, r2
 8006b34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	1ad2      	subs	r2, r2, r3
 8006b46:	2308      	movs	r3, #8
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d920      	bls.n	8006b90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4413      	add	r3, r2
 8006b54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00b      	beq.n	8006b78 <pvPortMalloc+0xfc>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	613b      	str	r3, [r7, #16]
}
 8006b72:	bf00      	nop
 8006b74:	bf00      	nop
 8006b76:	e7fd      	b.n	8006b74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	1ad2      	subs	r2, r2, r3
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b8a:	69b8      	ldr	r0, [r7, #24]
 8006b8c:	f000 f90a 	bl	8006da4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b90:	4b1d      	ldr	r3, [pc, #116]	@ (8006c08 <pvPortMalloc+0x18c>)
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006c08 <pvPortMalloc+0x18c>)
 8006b9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006c08 <pvPortMalloc+0x18c>)
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c10 <pvPortMalloc+0x194>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d203      	bcs.n	8006bb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006baa:	4b17      	ldr	r3, [pc, #92]	@ (8006c08 <pvPortMalloc+0x18c>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a18      	ldr	r2, [pc, #96]	@ (8006c10 <pvPortMalloc+0x194>)
 8006bb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	4b13      	ldr	r3, [pc, #76]	@ (8006c04 <pvPortMalloc+0x188>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006bc6:	4b13      	ldr	r3, [pc, #76]	@ (8006c14 <pvPortMalloc+0x198>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	4a11      	ldr	r2, [pc, #68]	@ (8006c14 <pvPortMalloc+0x198>)
 8006bce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006bd0:	f7fe fcc6 	bl	8005560 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00b      	beq.n	8006bf6 <pvPortMalloc+0x17a>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	60fb      	str	r3, [r7, #12]
}
 8006bf0:	bf00      	nop
 8006bf2:	bf00      	nop
 8006bf4:	e7fd      	b.n	8006bf2 <pvPortMalloc+0x176>
	return pvReturn;
 8006bf6:	69fb      	ldr	r3, [r7, #28]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3728      	adds	r7, #40	@ 0x28
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	2000915c 	.word	0x2000915c
 8006c04:	20009170 	.word	0x20009170
 8006c08:	20009160 	.word	0x20009160
 8006c0c:	20009154 	.word	0x20009154
 8006c10:	20009164 	.word	0x20009164
 8006c14:	20009168 	.word	0x20009168

08006c18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d04f      	beq.n	8006cca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	425b      	negs	r3, r3
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	4413      	add	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	4b25      	ldr	r3, [pc, #148]	@ (8006cd4 <vPortFree+0xbc>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4013      	ands	r3, r2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10b      	bne.n	8006c5e <vPortFree+0x46>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	60fb      	str	r3, [r7, #12]
}
 8006c58:	bf00      	nop
 8006c5a:	bf00      	nop
 8006c5c:	e7fd      	b.n	8006c5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00b      	beq.n	8006c7e <vPortFree+0x66>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	60bb      	str	r3, [r7, #8]
}
 8006c78:	bf00      	nop
 8006c7a:	bf00      	nop
 8006c7c:	e7fd      	b.n	8006c7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	4b14      	ldr	r3, [pc, #80]	@ (8006cd4 <vPortFree+0xbc>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4013      	ands	r3, r2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d01e      	beq.n	8006cca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d11a      	bne.n	8006cca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	4b0e      	ldr	r3, [pc, #56]	@ (8006cd4 <vPortFree+0xbc>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	43db      	mvns	r3, r3
 8006c9e:	401a      	ands	r2, r3
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ca4:	f7fe fc4e 	bl	8005544 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd8 <vPortFree+0xc0>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	4a09      	ldr	r2, [pc, #36]	@ (8006cd8 <vPortFree+0xc0>)
 8006cb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cb6:	6938      	ldr	r0, [r7, #16]
 8006cb8:	f000 f874 	bl	8006da4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006cbc:	4b07      	ldr	r3, [pc, #28]	@ (8006cdc <vPortFree+0xc4>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	4a06      	ldr	r2, [pc, #24]	@ (8006cdc <vPortFree+0xc4>)
 8006cc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006cc6:	f7fe fc4b 	bl	8005560 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006cca:	bf00      	nop
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20009170 	.word	0x20009170
 8006cd8:	20009160 	.word	0x20009160
 8006cdc:	2000916c 	.word	0x2000916c

08006ce0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ce6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006cea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cec:	4b27      	ldr	r3, [pc, #156]	@ (8006d8c <prvHeapInit+0xac>)
 8006cee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00c      	beq.n	8006d14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3307      	adds	r3, #7
 8006cfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 0307 	bic.w	r3, r3, #7
 8006d06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8006d8c <prvHeapInit+0xac>)
 8006d10:	4413      	add	r3, r2
 8006d12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d18:	4a1d      	ldr	r2, [pc, #116]	@ (8006d90 <prvHeapInit+0xb0>)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8006d90 <prvHeapInit+0xb0>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	4413      	add	r3, r2
 8006d2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d2c:	2208      	movs	r2, #8
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	1a9b      	subs	r3, r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0307 	bic.w	r3, r3, #7
 8006d3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4a15      	ldr	r2, [pc, #84]	@ (8006d94 <prvHeapInit+0xb4>)
 8006d40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d42:	4b14      	ldr	r3, [pc, #80]	@ (8006d94 <prvHeapInit+0xb4>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2200      	movs	r2, #0
 8006d48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d4a:	4b12      	ldr	r3, [pc, #72]	@ (8006d94 <prvHeapInit+0xb4>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	1ad2      	subs	r2, r2, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d60:	4b0c      	ldr	r3, [pc, #48]	@ (8006d94 <prvHeapInit+0xb4>)
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d98 <prvHeapInit+0xb8>)
 8006d6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	4a09      	ldr	r2, [pc, #36]	@ (8006d9c <prvHeapInit+0xbc>)
 8006d76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d78:	4b09      	ldr	r3, [pc, #36]	@ (8006da0 <prvHeapInit+0xc0>)
 8006d7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d7e:	601a      	str	r2, [r3, #0]
}
 8006d80:	bf00      	nop
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	20005554 	.word	0x20005554
 8006d90:	20009154 	.word	0x20009154
 8006d94:	2000915c 	.word	0x2000915c
 8006d98:	20009164 	.word	0x20009164
 8006d9c:	20009160 	.word	0x20009160
 8006da0:	20009170 	.word	0x20009170

08006da4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006dac:	4b28      	ldr	r3, [pc, #160]	@ (8006e50 <prvInsertBlockIntoFreeList+0xac>)
 8006dae:	60fb      	str	r3, [r7, #12]
 8006db0:	e002      	b.n	8006db8 <prvInsertBlockIntoFreeList+0x14>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d8f7      	bhi.n	8006db2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	4413      	add	r3, r2
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d108      	bne.n	8006de6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	441a      	add	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	441a      	add	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d118      	bne.n	8006e2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	4b15      	ldr	r3, [pc, #84]	@ (8006e54 <prvInsertBlockIntoFreeList+0xb0>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d00d      	beq.n	8006e22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	441a      	add	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	e008      	b.n	8006e34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e22:	4b0c      	ldr	r3, [pc, #48]	@ (8006e54 <prvInsertBlockIntoFreeList+0xb0>)
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	e003      	b.n	8006e34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d002      	beq.n	8006e42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e42:	bf00      	nop
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	20009154 	.word	0x20009154
 8006e54:	2000915c 	.word	0x2000915c

08006e58 <rcl_get_zero_initialized_publisher>:
 8006e58:	4b01      	ldr	r3, [pc, #4]	@ (8006e60 <rcl_get_zero_initialized_publisher+0x8>)
 8006e5a:	6818      	ldr	r0, [r3, #0]
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	080112e4 	.word	0x080112e4

08006e64 <rcl_publisher_init>:
 8006e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e68:	b088      	sub	sp, #32
 8006e6a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8006e6c:	2d00      	cmp	r5, #0
 8006e6e:	d06a      	beq.n	8006f46 <rcl_publisher_init+0xe2>
 8006e70:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8006e74:	4604      	mov	r4, r0
 8006e76:	4648      	mov	r0, r9
 8006e78:	460e      	mov	r6, r1
 8006e7a:	4690      	mov	r8, r2
 8006e7c:	461f      	mov	r7, r3
 8006e7e:	f000 f9d3 	bl	8007228 <rcutils_allocator_is_valid>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d05f      	beq.n	8006f46 <rcl_publisher_init+0xe2>
 8006e86:	2c00      	cmp	r4, #0
 8006e88:	d05d      	beq.n	8006f46 <rcl_publisher_init+0xe2>
 8006e8a:	f8d4 a000 	ldr.w	sl, [r4]
 8006e8e:	f1ba 0f00 	cmp.w	sl, #0
 8006e92:	d004      	beq.n	8006e9e <rcl_publisher_init+0x3a>
 8006e94:	2764      	movs	r7, #100	@ 0x64
 8006e96:	4638      	mov	r0, r7
 8006e98:	b008      	add	sp, #32
 8006e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f004 fefe 	bl	800bca0 <rcl_node_is_valid>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d053      	beq.n	8006f50 <rcl_publisher_init+0xec>
 8006ea8:	f1b8 0f00 	cmp.w	r8, #0
 8006eac:	d04b      	beq.n	8006f46 <rcl_publisher_init+0xe2>
 8006eae:	2f00      	cmp	r7, #0
 8006eb0:	d049      	beq.n	8006f46 <rcl_publisher_init+0xe2>
 8006eb2:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8006eb6:	aa07      	add	r2, sp, #28
 8006eb8:	9205      	str	r2, [sp, #20]
 8006eba:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8006ebe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ec2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006ec6:	f8cd a01c 	str.w	sl, [sp, #28]
 8006eca:	4639      	mov	r1, r7
 8006ecc:	e899 000c 	ldmia.w	r9, {r2, r3}
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	f004 ff75 	bl	800bdc0 <rcl_node_resolve_name>
 8006ed6:	4607      	mov	r7, r0
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d150      	bne.n	8006f7e <rcl_publisher_init+0x11a>
 8006edc:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 8006ee0:	21c8      	movs	r1, #200	@ 0xc8
 8006ee2:	2001      	movs	r0, #1
 8006ee4:	4798      	blx	r3
 8006ee6:	6020      	str	r0, [r4, #0]
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d04e      	beq.n	8006f8a <rcl_publisher_init+0x126>
 8006eec:	4630      	mov	r0, r6
 8006eee:	f004 fef9 	bl	800bce4 <rcl_node_get_rmw_handle>
 8006ef2:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	9a07      	ldr	r2, [sp, #28]
 8006efa:	6827      	ldr	r7, [r4, #0]
 8006efc:	462b      	mov	r3, r5
 8006efe:	4641      	mov	r1, r8
 8006f00:	f000 fa58 	bl	80073b4 <rmw_create_publisher>
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 8006f0a:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8006f0e:	b370      	cbz	r0, 8006f6e <rcl_publisher_init+0x10a>
 8006f10:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8006f14:	f000 fb2a 	bl	800756c <rmw_publisher_get_actual_qos>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	4607      	mov	r7, r0
 8006f1c:	b9d0      	cbnz	r0, 8006f54 <rcl_publisher_init+0xf0>
 8006f1e:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 8006f22:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8006f26:	4629      	mov	r1, r5
 8006f28:	2270      	movs	r2, #112	@ 0x70
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f009 fa71 	bl	8010412 <memcpy>
 8006f30:	6832      	ldr	r2, [r6, #0]
 8006f32:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8006f36:	9807      	ldr	r0, [sp, #28]
 8006f38:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8006f3a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8006f3c:	4798      	blx	r3
 8006f3e:	4638      	mov	r0, r7
 8006f40:	b008      	add	sp, #32
 8006f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f46:	270b      	movs	r7, #11
 8006f48:	4638      	mov	r0, r7
 8006f4a:	b008      	add	sp, #32
 8006f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f50:	27c8      	movs	r7, #200	@ 0xc8
 8006f52:	e7a0      	b.n	8006e96 <rcl_publisher_init+0x32>
 8006f54:	b18b      	cbz	r3, 8006f7a <rcl_publisher_init+0x116>
 8006f56:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8006f5a:	b142      	cbz	r2, 8006f6e <rcl_publisher_init+0x10a>
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f004 fec1 	bl	800bce4 <rcl_node_get_rmw_handle>
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8006f68:	f000 fb0e 	bl	8007588 <rmw_destroy_publisher>
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8006f70:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8006f72:	4618      	mov	r0, r3
 8006f74:	4790      	blx	r2
 8006f76:	2300      	movs	r3, #0
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	2701      	movs	r7, #1
 8006f7c:	e7db      	b.n	8006f36 <rcl_publisher_init+0xd2>
 8006f7e:	2867      	cmp	r0, #103	@ 0x67
 8006f80:	d0d9      	beq.n	8006f36 <rcl_publisher_init+0xd2>
 8006f82:	2869      	cmp	r0, #105	@ 0x69
 8006f84:	d003      	beq.n	8006f8e <rcl_publisher_init+0x12a>
 8006f86:	280a      	cmp	r0, #10
 8006f88:	d1f7      	bne.n	8006f7a <rcl_publisher_init+0x116>
 8006f8a:	270a      	movs	r7, #10
 8006f8c:	e7d3      	b.n	8006f36 <rcl_publisher_init+0xd2>
 8006f8e:	2767      	movs	r7, #103	@ 0x67
 8006f90:	e7d1      	b.n	8006f36 <rcl_publisher_init+0xd2>
 8006f92:	bf00      	nop

08006f94 <rcl_publisher_get_default_options>:
 8006f94:	b530      	push	{r4, r5, lr}
 8006f96:	4912      	ldr	r1, [pc, #72]	@ (8006fe0 <rcl_publisher_get_default_options+0x4c>)
 8006f98:	b083      	sub	sp, #12
 8006f9a:	2250      	movs	r2, #80	@ 0x50
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	f009 fa38 	bl	8010412 <memcpy>
 8006fa2:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006fa6:	f000 f913 	bl	80071d0 <rcutils_get_default_allocator>
 8006faa:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8006fae:	f000 f983 	bl	80072b8 <rmw_get_default_publisher_options>
 8006fb2:	2500      	movs	r5, #0
 8006fb4:	f10d 0007 	add.w	r0, sp, #7
 8006fb8:	f88d 5007 	strb.w	r5, [sp, #7]
 8006fbc:	f004 fe98 	bl	800bcf0 <rcl_get_disable_loaned_message>
 8006fc0:	b930      	cbnz	r0, 8006fd0 <rcl_publisher_get_default_options+0x3c>
 8006fc2:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8006fc6:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 8006fca:	4620      	mov	r0, r4
 8006fcc:	b003      	add	sp, #12
 8006fce:	bd30      	pop	{r4, r5, pc}
 8006fd0:	f000 f956 	bl	8007280 <rcutils_reset_error>
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 8006fda:	b003      	add	sp, #12
 8006fdc:	bd30      	pop	{r4, r5, pc}
 8006fde:	bf00      	nop
 8006fe0:	080112e8 	.word	0x080112e8

08006fe4 <rcl_publish>:
 8006fe4:	b308      	cbz	r0, 800702a <rcl_publish+0x46>
 8006fe6:	6803      	ldr	r3, [r0, #0]
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	4604      	mov	r4, r0
 8006fec:	b1c3      	cbz	r3, 8007020 <rcl_publish+0x3c>
 8006fee:	4616      	mov	r6, r2
 8006ff0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8006ff4:	b1a2      	cbz	r2, 8007020 <rcl_publish+0x3c>
 8006ff6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8006ffa:	460d      	mov	r5, r1
 8006ffc:	f004 faa2 	bl	800b544 <rcl_context_is_valid>
 8007000:	b160      	cbz	r0, 800701c <rcl_publish+0x38>
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8007008:	b150      	cbz	r0, 8007020 <rcl_publish+0x3c>
 800700a:	b165      	cbz	r5, 8007026 <rcl_publish+0x42>
 800700c:	4632      	mov	r2, r6
 800700e:	4629      	mov	r1, r5
 8007010:	f000 f970 	bl	80072f4 <rmw_publish>
 8007014:	3800      	subs	r0, #0
 8007016:	bf18      	it	ne
 8007018:	2001      	movne	r0, #1
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	f000 f912 	bl	8007244 <rcutils_error_is_set>
 8007020:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8007024:	bd70      	pop	{r4, r5, r6, pc}
 8007026:	200b      	movs	r0, #11
 8007028:	bd70      	pop	{r4, r5, r6, pc}
 800702a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800702e:	4770      	bx	lr

08007030 <rclc_support_init>:
 8007030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007034:	b086      	sub	sp, #24
 8007036:	b3b8      	cbz	r0, 80070a8 <rclc_support_init+0x78>
 8007038:	461c      	mov	r4, r3
 800703a:	b3ab      	cbz	r3, 80070a8 <rclc_support_init+0x78>
 800703c:	460f      	mov	r7, r1
 800703e:	4690      	mov	r8, r2
 8007040:	4606      	mov	r6, r0
 8007042:	f004 fbe9 	bl	800b818 <rcl_get_zero_initialized_init_options>
 8007046:	f104 030c 	add.w	r3, r4, #12
 800704a:	9005      	str	r0, [sp, #20]
 800704c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007050:	e88d 0003 	stmia.w	sp, {r0, r1}
 8007054:	a805      	add	r0, sp, #20
 8007056:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800705a:	f004 fbdf 	bl	800b81c <rcl_init_options_init>
 800705e:	4605      	mov	r5, r0
 8007060:	b9e0      	cbnz	r0, 800709c <rclc_support_init+0x6c>
 8007062:	ad02      	add	r5, sp, #8
 8007064:	4628      	mov	r0, r5
 8007066:	f004 fa69 	bl	800b53c <rcl_get_zero_initialized_context>
 800706a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800706e:	4633      	mov	r3, r6
 8007070:	e886 0003 	stmia.w	r6, {r0, r1}
 8007074:	aa05      	add	r2, sp, #20
 8007076:	4641      	mov	r1, r8
 8007078:	4638      	mov	r0, r7
 800707a:	f004 fac9 	bl	800b610 <rcl_init>
 800707e:	4605      	mov	r5, r0
 8007080:	b9b8      	cbnz	r0, 80070b2 <rclc_support_init+0x82>
 8007082:	60b4      	str	r4, [r6, #8]
 8007084:	4622      	mov	r2, r4
 8007086:	f106 010c 	add.w	r1, r6, #12
 800708a:	2003      	movs	r0, #3
 800708c:	f004 ff5a 	bl	800bf44 <rcl_clock_init>
 8007090:	4605      	mov	r5, r0
 8007092:	b970      	cbnz	r0, 80070b2 <rclc_support_init+0x82>
 8007094:	a805      	add	r0, sp, #20
 8007096:	f004 fc1d 	bl	800b8d4 <rcl_init_options_fini>
 800709a:	b108      	cbz	r0, 80070a0 <rclc_support_init+0x70>
 800709c:	f000 f8f0 	bl	8007280 <rcutils_reset_error>
 80070a0:	4628      	mov	r0, r5
 80070a2:	b006      	add	sp, #24
 80070a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070a8:	250b      	movs	r5, #11
 80070aa:	4628      	mov	r0, r5
 80070ac:	b006      	add	sp, #24
 80070ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070b2:	f000 f8e5 	bl	8007280 <rcutils_reset_error>
 80070b6:	a805      	add	r0, sp, #20
 80070b8:	f004 fc0c 	bl	800b8d4 <rcl_init_options_fini>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d0ef      	beq.n	80070a0 <rclc_support_init+0x70>
 80070c0:	e7ec      	b.n	800709c <rclc_support_init+0x6c>
 80070c2:	bf00      	nop

080070c4 <rclc_node_init_default>:
 80070c4:	b3b8      	cbz	r0, 8007136 <rclc_node_init_default+0x72>
 80070c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070ca:	460d      	mov	r5, r1
 80070cc:	b0a1      	sub	sp, #132	@ 0x84
 80070ce:	b329      	cbz	r1, 800711c <rclc_node_init_default+0x58>
 80070d0:	4616      	mov	r6, r2
 80070d2:	b31a      	cbz	r2, 800711c <rclc_node_init_default+0x58>
 80070d4:	461f      	mov	r7, r3
 80070d6:	b30b      	cbz	r3, 800711c <rclc_node_init_default+0x58>
 80070d8:	f10d 0810 	add.w	r8, sp, #16
 80070dc:	4604      	mov	r4, r0
 80070de:	4640      	mov	r0, r8
 80070e0:	f004 fc7e 	bl	800b9e0 <rcl_get_zero_initialized_node>
 80070e4:	e898 0003 	ldmia.w	r8, {r0, r1}
 80070e8:	f10d 0918 	add.w	r9, sp, #24
 80070ec:	e884 0003 	stmia.w	r4, {r0, r1}
 80070f0:	4648      	mov	r0, r9
 80070f2:	f004 fe1d 	bl	800bd30 <rcl_node_get_default_options>
 80070f6:	4640      	mov	r0, r8
 80070f8:	f004 fc72 	bl	800b9e0 <rcl_get_zero_initialized_node>
 80070fc:	f8cd 9000 	str.w	r9, [sp]
 8007100:	e898 0003 	ldmia.w	r8, {r0, r1}
 8007104:	463b      	mov	r3, r7
 8007106:	e884 0003 	stmia.w	r4, {r0, r1}
 800710a:	4632      	mov	r2, r6
 800710c:	4629      	mov	r1, r5
 800710e:	4620      	mov	r0, r4
 8007110:	f004 fc70 	bl	800b9f4 <rcl_node_init>
 8007114:	b930      	cbnz	r0, 8007124 <rclc_node_init_default+0x60>
 8007116:	b021      	add	sp, #132	@ 0x84
 8007118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800711c:	200b      	movs	r0, #11
 800711e:	b021      	add	sp, #132	@ 0x84
 8007120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007124:	9003      	str	r0, [sp, #12]
 8007126:	f000 f8ab 	bl	8007280 <rcutils_reset_error>
 800712a:	f000 f8a9 	bl	8007280 <rcutils_reset_error>
 800712e:	9803      	ldr	r0, [sp, #12]
 8007130:	b021      	add	sp, #132	@ 0x84
 8007132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007136:	200b      	movs	r0, #11
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop

0800713c <rclc_publisher_init_default>:
 800713c:	b368      	cbz	r0, 800719a <rclc_publisher_init_default+0x5e>
 800713e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007142:	460d      	mov	r5, r1
 8007144:	b0a0      	sub	sp, #128	@ 0x80
 8007146:	b321      	cbz	r1, 8007192 <rclc_publisher_init_default+0x56>
 8007148:	4616      	mov	r6, r2
 800714a:	b312      	cbz	r2, 8007192 <rclc_publisher_init_default+0x56>
 800714c:	461f      	mov	r7, r3
 800714e:	b303      	cbz	r3, 8007192 <rclc_publisher_init_default+0x56>
 8007150:	4604      	mov	r4, r0
 8007152:	f7ff fe81 	bl	8006e58 <rcl_get_zero_initialized_publisher>
 8007156:	f10d 0810 	add.w	r8, sp, #16
 800715a:	6020      	str	r0, [r4, #0]
 800715c:	4640      	mov	r0, r8
 800715e:	f7ff ff19 	bl	8006f94 <rcl_publisher_get_default_options>
 8007162:	490f      	ldr	r1, [pc, #60]	@ (80071a0 <rclc_publisher_init_default+0x64>)
 8007164:	2250      	movs	r2, #80	@ 0x50
 8007166:	4640      	mov	r0, r8
 8007168:	f009 f953 	bl	8010412 <memcpy>
 800716c:	f8cd 8000 	str.w	r8, [sp]
 8007170:	463b      	mov	r3, r7
 8007172:	4632      	mov	r2, r6
 8007174:	4629      	mov	r1, r5
 8007176:	4620      	mov	r0, r4
 8007178:	f7ff fe74 	bl	8006e64 <rcl_publisher_init>
 800717c:	b910      	cbnz	r0, 8007184 <rclc_publisher_init_default+0x48>
 800717e:	b020      	add	sp, #128	@ 0x80
 8007180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007184:	9003      	str	r0, [sp, #12]
 8007186:	f000 f87b 	bl	8007280 <rcutils_reset_error>
 800718a:	9803      	ldr	r0, [sp, #12]
 800718c:	b020      	add	sp, #128	@ 0x80
 800718e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007192:	200b      	movs	r0, #11
 8007194:	b020      	add	sp, #128	@ 0x80
 8007196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800719a:	200b      	movs	r0, #11
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	08011338 	.word	0x08011338

080071a4 <__default_zero_allocate>:
 80071a4:	f008 bc94 	b.w	800fad0 <calloc>

080071a8 <__default_reallocate>:
 80071a8:	f008 be20 	b.w	800fdec <realloc>

080071ac <__default_deallocate>:
 80071ac:	f008 bcfc 	b.w	800fba8 <free>

080071b0 <__default_allocate>:
 80071b0:	f008 bcf2 	b.w	800fb98 <malloc>

080071b4 <rcutils_get_zero_initialized_allocator>:
 80071b4:	b510      	push	{r4, lr}
 80071b6:	4c05      	ldr	r4, [pc, #20]	@ (80071cc <rcutils_get_zero_initialized_allocator+0x18>)
 80071b8:	4686      	mov	lr, r0
 80071ba:	4684      	mov	ip, r0
 80071bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	f8cc 3000 	str.w	r3, [ip]
 80071c8:	4670      	mov	r0, lr
 80071ca:	bd10      	pop	{r4, pc}
 80071cc:	08011388 	.word	0x08011388

080071d0 <rcutils_get_default_allocator>:
 80071d0:	b510      	push	{r4, lr}
 80071d2:	4c05      	ldr	r4, [pc, #20]	@ (80071e8 <rcutils_get_default_allocator+0x18>)
 80071d4:	4686      	mov	lr, r0
 80071d6:	4684      	mov	ip, r0
 80071d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	f8cc 3000 	str.w	r3, [ip]
 80071e4:	4670      	mov	r0, lr
 80071e6:	bd10      	pop	{r4, pc}
 80071e8:	20000014 	.word	0x20000014

080071ec <rcutils_set_default_allocator>:
 80071ec:	b1a8      	cbz	r0, 800721a <rcutils_set_default_allocator+0x2e>
 80071ee:	6802      	ldr	r2, [r0, #0]
 80071f0:	b1a2      	cbz	r2, 800721c <rcutils_set_default_allocator+0x30>
 80071f2:	6841      	ldr	r1, [r0, #4]
 80071f4:	b1a1      	cbz	r1, 8007220 <rcutils_set_default_allocator+0x34>
 80071f6:	b410      	push	{r4}
 80071f8:	68c4      	ldr	r4, [r0, #12]
 80071fa:	b164      	cbz	r4, 8007216 <rcutils_set_default_allocator+0x2a>
 80071fc:	6880      	ldr	r0, [r0, #8]
 80071fe:	b138      	cbz	r0, 8007210 <rcutils_set_default_allocator+0x24>
 8007200:	4b08      	ldr	r3, [pc, #32]	@ (8007224 <rcutils_set_default_allocator+0x38>)
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	2200      	movs	r2, #0
 8007206:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800720a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800720e:	2001      	movs	r0, #1
 8007210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	4620      	mov	r0, r4
 8007218:	e7fa      	b.n	8007210 <rcutils_set_default_allocator+0x24>
 800721a:	4770      	bx	lr
 800721c:	4610      	mov	r0, r2
 800721e:	4770      	bx	lr
 8007220:	4608      	mov	r0, r1
 8007222:	4770      	bx	lr
 8007224:	20000014 	.word	0x20000014

08007228 <rcutils_allocator_is_valid>:
 8007228:	b158      	cbz	r0, 8007242 <rcutils_allocator_is_valid+0x1a>
 800722a:	6803      	ldr	r3, [r0, #0]
 800722c:	b143      	cbz	r3, 8007240 <rcutils_allocator_is_valid+0x18>
 800722e:	6843      	ldr	r3, [r0, #4]
 8007230:	b133      	cbz	r3, 8007240 <rcutils_allocator_is_valid+0x18>
 8007232:	68c3      	ldr	r3, [r0, #12]
 8007234:	b123      	cbz	r3, 8007240 <rcutils_allocator_is_valid+0x18>
 8007236:	6880      	ldr	r0, [r0, #8]
 8007238:	3800      	subs	r0, #0
 800723a:	bf18      	it	ne
 800723c:	2001      	movne	r0, #1
 800723e:	4770      	bx	lr
 8007240:	4618      	mov	r0, r3
 8007242:	4770      	bx	lr

08007244 <rcutils_error_is_set>:
 8007244:	4b01      	ldr	r3, [pc, #4]	@ (800724c <rcutils_error_is_set+0x8>)
 8007246:	7818      	ldrb	r0, [r3, #0]
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	20009174 	.word	0x20009174

08007250 <rcutils_get_error_string>:
 8007250:	4b06      	ldr	r3, [pc, #24]	@ (800726c <rcutils_get_error_string+0x1c>)
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	b13b      	cbz	r3, 8007266 <rcutils_get_error_string+0x16>
 8007256:	4b06      	ldr	r3, [pc, #24]	@ (8007270 <rcutils_get_error_string+0x20>)
 8007258:	781a      	ldrb	r2, [r3, #0]
 800725a:	b90a      	cbnz	r2, 8007260 <rcutils_get_error_string+0x10>
 800725c:	2201      	movs	r2, #1
 800725e:	701a      	strb	r2, [r3, #0]
 8007260:	4b04      	ldr	r3, [pc, #16]	@ (8007274 <rcutils_get_error_string+0x24>)
 8007262:	7818      	ldrb	r0, [r3, #0]
 8007264:	4770      	bx	lr
 8007266:	4b04      	ldr	r3, [pc, #16]	@ (8007278 <rcutils_get_error_string+0x28>)
 8007268:	7818      	ldrb	r0, [r3, #0]
 800726a:	4770      	bx	lr
 800726c:	20009174 	.word	0x20009174
 8007270:	20009179 	.word	0x20009179
 8007274:	20009178 	.word	0x20009178
 8007278:	0801139c 	.word	0x0801139c
 800727c:	00000000 	.word	0x00000000

08007280 <rcutils_reset_error>:
 8007280:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80072a0 <rcutils_reset_error+0x20>
 8007284:	4a08      	ldr	r2, [pc, #32]	@ (80072a8 <rcutils_reset_error+0x28>)
 8007286:	4809      	ldr	r0, [pc, #36]	@ (80072ac <rcutils_reset_error+0x2c>)
 8007288:	4909      	ldr	r1, [pc, #36]	@ (80072b0 <rcutils_reset_error+0x30>)
 800728a:	2300      	movs	r3, #0
 800728c:	8013      	strh	r3, [r2, #0]
 800728e:	ed82 7b02 	vstr	d7, [r2, #8]
 8007292:	4a08      	ldr	r2, [pc, #32]	@ (80072b4 <rcutils_reset_error+0x34>)
 8007294:	7003      	strb	r3, [r0, #0]
 8007296:	700b      	strb	r3, [r1, #0]
 8007298:	7013      	strb	r3, [r2, #0]
 800729a:	4770      	bx	lr
 800729c:	f3af 8000 	nop.w
	...
 80072a8:	20009180 	.word	0x20009180
 80072ac:	20009179 	.word	0x20009179
 80072b0:	20009178 	.word	0x20009178
 80072b4:	20009174 	.word	0x20009174

080072b8 <rmw_get_default_publisher_options>:
 80072b8:	2200      	movs	r2, #0
 80072ba:	6002      	str	r2, [r0, #0]
 80072bc:	7102      	strb	r2, [r0, #4]
 80072be:	4770      	bx	lr

080072c0 <rmw_uros_set_custom_transport>:
 80072c0:	b470      	push	{r4, r5, r6}
 80072c2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80072c6:	b162      	cbz	r2, 80072e2 <rmw_uros_set_custom_transport+0x22>
 80072c8:	b15b      	cbz	r3, 80072e2 <rmw_uros_set_custom_transport+0x22>
 80072ca:	b155      	cbz	r5, 80072e2 <rmw_uros_set_custom_transport+0x22>
 80072cc:	b14e      	cbz	r6, 80072e2 <rmw_uros_set_custom_transport+0x22>
 80072ce:	4c06      	ldr	r4, [pc, #24]	@ (80072e8 <rmw_uros_set_custom_transport+0x28>)
 80072d0:	7020      	strb	r0, [r4, #0]
 80072d2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80072d6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80072da:	6166      	str	r6, [r4, #20]
 80072dc:	2000      	movs	r0, #0
 80072de:	bc70      	pop	{r4, r5, r6}
 80072e0:	4770      	bx	lr
 80072e2:	200b      	movs	r0, #11
 80072e4:	bc70      	pop	{r4, r5, r6}
 80072e6:	4770      	bx	lr
 80072e8:	20009190 	.word	0x20009190

080072ec <flush_session>:
 80072ec:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 80072ee:	f002 bae1 	b.w	80098b4 <uxr_run_session_until_confirm_delivery>
 80072f2:	bf00      	nop

080072f4 <rmw_publish>:
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d053      	beq.n	80073a0 <rmw_publish+0xac>
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	460d      	mov	r5, r1
 80072fc:	b08e      	sub	sp, #56	@ 0x38
 80072fe:	2900      	cmp	r1, #0
 8007300:	d04b      	beq.n	800739a <rmw_publish+0xa6>
 8007302:	4604      	mov	r4, r0
 8007304:	6800      	ldr	r0, [r0, #0]
 8007306:	f000 fc51 	bl	8007bac <is_uxrce_rmw_identifier_valid>
 800730a:	2800      	cmp	r0, #0
 800730c:	d045      	beq.n	800739a <rmw_publish+0xa6>
 800730e:	6866      	ldr	r6, [r4, #4]
 8007310:	2e00      	cmp	r6, #0
 8007312:	d042      	beq.n	800739a <rmw_publish+0xa6>
 8007314:	69b4      	ldr	r4, [r6, #24]
 8007316:	4628      	mov	r0, r5
 8007318:	6923      	ldr	r3, [r4, #16]
 800731a:	4798      	blx	r3
 800731c:	69f3      	ldr	r3, [r6, #28]
 800731e:	9005      	str	r0, [sp, #20]
 8007320:	b113      	cbz	r3, 8007328 <rmw_publish+0x34>
 8007322:	a805      	add	r0, sp, #20
 8007324:	4798      	blx	r3
 8007326:	9805      	ldr	r0, [sp, #20]
 8007328:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	9000      	str	r0, [sp, #0]
 8007330:	6972      	ldr	r2, [r6, #20]
 8007332:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8007334:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8007338:	ab06      	add	r3, sp, #24
 800733a:	f003 f89d 	bl	800a478 <uxr_prepare_output_stream>
 800733e:	b1d8      	cbz	r0, 8007378 <rmw_publish+0x84>
 8007340:	68a3      	ldr	r3, [r4, #8]
 8007342:	a906      	add	r1, sp, #24
 8007344:	4628      	mov	r0, r5
 8007346:	4798      	blx	r3
 8007348:	6a33      	ldr	r3, [r6, #32]
 800734a:	4604      	mov	r4, r0
 800734c:	b10b      	cbz	r3, 8007352 <rmw_publish+0x5e>
 800734e:	a806      	add	r0, sp, #24
 8007350:	4798      	blx	r3
 8007352:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8007356:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 800735a:	2b01      	cmp	r3, #1
 800735c:	6910      	ldr	r0, [r2, #16]
 800735e:	d021      	beq.n	80073a4 <rmw_publish+0xb0>
 8007360:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8007362:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8007366:	f002 faa5 	bl	80098b4 <uxr_run_session_until_confirm_delivery>
 800736a:	4004      	ands	r4, r0
 800736c:	b2e4      	uxtb	r4, r4
 800736e:	f084 0001 	eor.w	r0, r4, #1
 8007372:	b2c0      	uxtb	r0, r0
 8007374:	b00e      	add	sp, #56	@ 0x38
 8007376:	bd70      	pop	{r4, r5, r6, pc}
 8007378:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800737c:	6918      	ldr	r0, [r3, #16]
 800737e:	4b0c      	ldr	r3, [pc, #48]	@ (80073b0 <rmw_publish+0xbc>)
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	9b05      	ldr	r3, [sp, #20]
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	9602      	str	r6, [sp, #8]
 8007388:	6972      	ldr	r2, [r6, #20]
 800738a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800738c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8007390:	ab06      	add	r3, sp, #24
 8007392:	f003 f8a1 	bl	800a4d8 <uxr_prepare_output_stream_fragmented>
 8007396:	2800      	cmp	r0, #0
 8007398:	d1d2      	bne.n	8007340 <rmw_publish+0x4c>
 800739a:	2001      	movs	r0, #1
 800739c:	b00e      	add	sp, #56	@ 0x38
 800739e:	bd70      	pop	{r4, r5, r6, pc}
 80073a0:	2001      	movs	r0, #1
 80073a2:	4770      	bx	lr
 80073a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80073a8:	f001 ff26 	bl	80091f8 <uxr_flash_output_streams>
 80073ac:	e7df      	b.n	800736e <rmw_publish+0x7a>
 80073ae:	bf00      	nop
 80073b0:	080072ed 	.word	0x080072ed

080073b4 <rmw_create_publisher>:
 80073b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b8:	b087      	sub	sp, #28
 80073ba:	2800      	cmp	r0, #0
 80073bc:	f000 80c9 	beq.w	8007552 <rmw_create_publisher+0x19e>
 80073c0:	460f      	mov	r7, r1
 80073c2:	2900      	cmp	r1, #0
 80073c4:	f000 80c5 	beq.w	8007552 <rmw_create_publisher+0x19e>
 80073c8:	4604      	mov	r4, r0
 80073ca:	6800      	ldr	r0, [r0, #0]
 80073cc:	4615      	mov	r5, r2
 80073ce:	461e      	mov	r6, r3
 80073d0:	f000 fbec 	bl	8007bac <is_uxrce_rmw_identifier_valid>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	f000 80bc 	beq.w	8007552 <rmw_create_publisher+0x19e>
 80073da:	2d00      	cmp	r5, #0
 80073dc:	f000 80b9 	beq.w	8007552 <rmw_create_publisher+0x19e>
 80073e0:	782b      	ldrb	r3, [r5, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 80b5 	beq.w	8007552 <rmw_create_publisher+0x19e>
 80073e8:	2e00      	cmp	r6, #0
 80073ea:	f000 80b2 	beq.w	8007552 <rmw_create_publisher+0x19e>
 80073ee:	485c      	ldr	r0, [pc, #368]	@ (8007560 <rmw_create_publisher+0x1ac>)
 80073f0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80073f4:	f005 fa92 	bl	800c91c <get_memory>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	f000 80aa 	beq.w	8007552 <rmw_create_publisher+0x19e>
 80073fe:	6884      	ldr	r4, [r0, #8]
 8007400:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8007404:	f005 faae 	bl	800c964 <rmw_get_implementation_identifier>
 8007408:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800740c:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8007410:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8007414:	4628      	mov	r0, r5
 8007416:	f7f8 ff43 	bl	80002a0 <strlen>
 800741a:	3001      	adds	r0, #1
 800741c:	283c      	cmp	r0, #60	@ 0x3c
 800741e:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 8007422:	f200 808f 	bhi.w	8007544 <rmw_create_publisher+0x190>
 8007426:	4a4f      	ldr	r2, [pc, #316]	@ (8007564 <rmw_create_publisher+0x1b0>)
 8007428:	462b      	mov	r3, r5
 800742a:	213c      	movs	r1, #60	@ 0x3c
 800742c:	4650      	mov	r0, sl
 800742e:	f008 fe5f 	bl	80100f0 <sniprintf>
 8007432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007436:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8007438:	4631      	mov	r1, r6
 800743a:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800743e:	2250      	movs	r2, #80	@ 0x50
 8007440:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007444:	f008 ffe5 	bl	8010412 <memcpy>
 8007448:	7a33      	ldrb	r3, [r6, #8]
 800744a:	4947      	ldr	r1, [pc, #284]	@ (8007568 <rmw_create_publisher+0x1b4>)
 800744c:	2b02      	cmp	r3, #2
 800744e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007452:	bf0c      	ite	eq
 8007454:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8007458:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800745c:	67a3      	str	r3, [r4, #120]	@ 0x78
 800745e:	2300      	movs	r3, #0
 8007460:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8007464:	4638      	mov	r0, r7
 8007466:	f000 fbaf 	bl	8007bc8 <get_message_typesupport_handle>
 800746a:	2800      	cmp	r0, #0
 800746c:	d06a      	beq.n	8007544 <rmw_create_publisher+0x190>
 800746e:	6842      	ldr	r2, [r0, #4]
 8007470:	61a2      	str	r2, [r4, #24]
 8007472:	2a00      	cmp	r2, #0
 8007474:	d066      	beq.n	8007544 <rmw_create_publisher+0x190>
 8007476:	4629      	mov	r1, r5
 8007478:	4633      	mov	r3, r6
 800747a:	4648      	mov	r0, r9
 800747c:	f005 fcce 	bl	800ce1c <create_topic>
 8007480:	6260      	str	r0, [r4, #36]	@ 0x24
 8007482:	2800      	cmp	r0, #0
 8007484:	d062      	beq.n	800754c <rmw_create_publisher+0x198>
 8007486:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800748a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800748e:	2103      	movs	r1, #3
 8007490:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8007494:	1c42      	adds	r2, r0, #1
 8007496:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800749a:	f001 fd81 	bl	8008fa0 <uxr_object_id>
 800749e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80074a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074a6:	6120      	str	r0, [r4, #16]
 80074a8:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80074ac:	6910      	ldr	r0, [r2, #16]
 80074ae:	2506      	movs	r5, #6
 80074b0:	9500      	str	r5, [sp, #0]
 80074b2:	6819      	ldr	r1, [r3, #0]
 80074b4:	6922      	ldr	r2, [r4, #16]
 80074b6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80074ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80074be:	f001 fcdd 	bl	8008e7c <uxr_buffer_create_publisher_bin>
 80074c2:	4602      	mov	r2, r0
 80074c4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80074c8:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80074cc:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80074d0:	f000 fae6 	bl	8007aa0 <run_xrce_session>
 80074d4:	b3b0      	cbz	r0, 8007544 <rmw_create_publisher+0x190>
 80074d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074de:	2105      	movs	r1, #5
 80074e0:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 80074e4:	1c42      	adds	r2, r0, #1
 80074e6:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 80074ea:	f001 fd59 	bl	8008fa0 <uxr_object_id>
 80074ee:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80074f2:	6160      	str	r0, [r4, #20]
 80074f4:	4631      	mov	r1, r6
 80074f6:	af04      	add	r7, sp, #16
 80074f8:	691e      	ldr	r6, [r3, #16]
 80074fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074fe:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8007502:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 8007506:	4638      	mov	r0, r7
 8007508:	f000 faea 	bl	8007ae0 <convert_qos_profile>
 800750c:	9503      	str	r5, [sp, #12]
 800750e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8007512:	9001      	str	r0, [sp, #4]
 8007514:	f8ad 1008 	strh.w	r1, [sp, #8]
 8007518:	f8db 3010 	ldr.w	r3, [fp, #16]
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8007522:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8007526:	f8da 1000 	ldr.w	r1, [sl]
 800752a:	4630      	mov	r0, r6
 800752c:	f001 fcd4 	bl	8008ed8 <uxr_buffer_create_datawriter_bin>
 8007530:	4602      	mov	r2, r0
 8007532:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8007536:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800753a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800753e:	f000 faaf 	bl	8007aa0 <run_xrce_session>
 8007542:	b940      	cbnz	r0, 8007556 <rmw_create_publisher+0x1a2>
 8007544:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8007546:	b108      	cbz	r0, 800754c <rmw_create_publisher+0x198>
 8007548:	f000 fa46 	bl	80079d8 <rmw_uxrce_fini_topic_memory>
 800754c:	4640      	mov	r0, r8
 800754e:	f000 f9eb 	bl	8007928 <rmw_uxrce_fini_publisher_memory>
 8007552:	f04f 0800 	mov.w	r8, #0
 8007556:	4640      	mov	r0, r8
 8007558:	b007      	add	sp, #28
 800755a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800755e:	bf00      	nop
 8007560:	2000c480 	.word	0x2000c480
 8007564:	080113d4 	.word	0x080113d4
 8007568:	080113a0 	.word	0x080113a0

0800756c <rmw_publisher_get_actual_qos>:
 800756c:	b508      	push	{r3, lr}
 800756e:	4603      	mov	r3, r0
 8007570:	b140      	cbz	r0, 8007584 <rmw_publisher_get_actual_qos+0x18>
 8007572:	4608      	mov	r0, r1
 8007574:	b131      	cbz	r1, 8007584 <rmw_publisher_get_actual_qos+0x18>
 8007576:	6859      	ldr	r1, [r3, #4]
 8007578:	2250      	movs	r2, #80	@ 0x50
 800757a:	3128      	adds	r1, #40	@ 0x28
 800757c:	f008 ff49 	bl	8010412 <memcpy>
 8007580:	2000      	movs	r0, #0
 8007582:	bd08      	pop	{r3, pc}
 8007584:	200b      	movs	r0, #11
 8007586:	bd08      	pop	{r3, pc}

08007588 <rmw_destroy_publisher>:
 8007588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758c:	b128      	cbz	r0, 800759a <rmw_destroy_publisher+0x12>
 800758e:	4604      	mov	r4, r0
 8007590:	6800      	ldr	r0, [r0, #0]
 8007592:	460d      	mov	r5, r1
 8007594:	f000 fb0a 	bl	8007bac <is_uxrce_rmw_identifier_valid>
 8007598:	b918      	cbnz	r0, 80075a2 <rmw_destroy_publisher+0x1a>
 800759a:	2401      	movs	r4, #1
 800759c:	4620      	mov	r0, r4
 800759e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a2:	6863      	ldr	r3, [r4, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d0f8      	beq.n	800759a <rmw_destroy_publisher+0x12>
 80075a8:	2d00      	cmp	r5, #0
 80075aa:	d0f6      	beq.n	800759a <rmw_destroy_publisher+0x12>
 80075ac:	6828      	ldr	r0, [r5, #0]
 80075ae:	f000 fafd 	bl	8007bac <is_uxrce_rmw_identifier_valid>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d0f1      	beq.n	800759a <rmw_destroy_publisher+0x12>
 80075b6:	686c      	ldr	r4, [r5, #4]
 80075b8:	2c00      	cmp	r4, #0
 80075ba:	d0ee      	beq.n	800759a <rmw_destroy_publisher+0x12>
 80075bc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80075be:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 80075c2:	f005 fc7f 	bl	800cec4 <destroy_topic>
 80075c6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80075ca:	6962      	ldr	r2, [r4, #20]
 80075cc:	6918      	ldr	r0, [r3, #16]
 80075ce:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80075d2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80075d6:	6819      	ldr	r1, [r3, #0]
 80075d8:	f001 fba0 	bl	8008d1c <uxr_buffer_delete_entity>
 80075dc:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80075e0:	6922      	ldr	r2, [r4, #16]
 80075e2:	4680      	mov	r8, r0
 80075e4:	6918      	ldr	r0, [r3, #16]
 80075e6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80075ea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80075ee:	6819      	ldr	r1, [r3, #0]
 80075f0:	f001 fb94 	bl	8008d1c <uxr_buffer_delete_entity>
 80075f4:	4606      	mov	r6, r0
 80075f6:	6938      	ldr	r0, [r7, #16]
 80075f8:	4642      	mov	r2, r8
 80075fa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80075fe:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8007602:	f000 fa4d 	bl	8007aa0 <run_xrce_session>
 8007606:	4604      	mov	r4, r0
 8007608:	6938      	ldr	r0, [r7, #16]
 800760a:	4632      	mov	r2, r6
 800760c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8007610:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8007614:	f000 fa44 	bl	8007aa0 <run_xrce_session>
 8007618:	4004      	ands	r4, r0
 800761a:	f084 0401 	eor.w	r4, r4, #1
 800761e:	b2e4      	uxtb	r4, r4
 8007620:	4628      	mov	r0, r5
 8007622:	0064      	lsls	r4, r4, #1
 8007624:	f000 f980 	bl	8007928 <rmw_uxrce_fini_publisher_memory>
 8007628:	e7b8      	b.n	800759c <rmw_destroy_publisher+0x14>
 800762a:	bf00      	nop

0800762c <rmw_uxrce_init_service_memory>:
 800762c:	b1e2      	cbz	r2, 8007668 <rmw_uxrce_init_service_memory+0x3c>
 800762e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007632:	7b05      	ldrb	r5, [r0, #12]
 8007634:	4606      	mov	r6, r0
 8007636:	b9ad      	cbnz	r5, 8007664 <rmw_uxrce_init_service_memory+0x38>
 8007638:	23c8      	movs	r3, #200	@ 0xc8
 800763a:	e9c0 5500 	strd	r5, r5, [r0]
 800763e:	6083      	str	r3, [r0, #8]
 8007640:	f240 1301 	movw	r3, #257	@ 0x101
 8007644:	4617      	mov	r7, r2
 8007646:	8183      	strh	r3, [r0, #12]
 8007648:	460c      	mov	r4, r1
 800764a:	46a8      	mov	r8, r5
 800764c:	4621      	mov	r1, r4
 800764e:	4630      	mov	r0, r6
 8007650:	3501      	adds	r5, #1
 8007652:	f005 f973 	bl	800c93c <put_memory>
 8007656:	42af      	cmp	r7, r5
 8007658:	60a4      	str	r4, [r4, #8]
 800765a:	f884 800c 	strb.w	r8, [r4, #12]
 800765e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8007662:	d1f3      	bne.n	800764c <rmw_uxrce_init_service_memory+0x20>
 8007664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop

0800766c <rmw_uxrce_init_client_memory>:
 800766c:	b1e2      	cbz	r2, 80076a8 <rmw_uxrce_init_client_memory+0x3c>
 800766e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007672:	7b05      	ldrb	r5, [r0, #12]
 8007674:	4606      	mov	r6, r0
 8007676:	b9ad      	cbnz	r5, 80076a4 <rmw_uxrce_init_client_memory+0x38>
 8007678:	23c8      	movs	r3, #200	@ 0xc8
 800767a:	e9c0 5500 	strd	r5, r5, [r0]
 800767e:	6083      	str	r3, [r0, #8]
 8007680:	f240 1301 	movw	r3, #257	@ 0x101
 8007684:	4617      	mov	r7, r2
 8007686:	8183      	strh	r3, [r0, #12]
 8007688:	460c      	mov	r4, r1
 800768a:	46a8      	mov	r8, r5
 800768c:	4621      	mov	r1, r4
 800768e:	4630      	mov	r0, r6
 8007690:	3501      	adds	r5, #1
 8007692:	f005 f953 	bl	800c93c <put_memory>
 8007696:	42af      	cmp	r7, r5
 8007698:	60a4      	str	r4, [r4, #8]
 800769a:	f884 800c 	strb.w	r8, [r4, #12]
 800769e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80076a2:	d1f3      	bne.n	800768c <rmw_uxrce_init_client_memory+0x20>
 80076a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop

080076ac <rmw_uxrce_init_publisher_memory>:
 80076ac:	b1e2      	cbz	r2, 80076e8 <rmw_uxrce_init_publisher_memory+0x3c>
 80076ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076b2:	7b05      	ldrb	r5, [r0, #12]
 80076b4:	4606      	mov	r6, r0
 80076b6:	b9ad      	cbnz	r5, 80076e4 <rmw_uxrce_init_publisher_memory+0x38>
 80076b8:	23d8      	movs	r3, #216	@ 0xd8
 80076ba:	e9c0 5500 	strd	r5, r5, [r0]
 80076be:	6083      	str	r3, [r0, #8]
 80076c0:	f240 1301 	movw	r3, #257	@ 0x101
 80076c4:	4617      	mov	r7, r2
 80076c6:	8183      	strh	r3, [r0, #12]
 80076c8:	460c      	mov	r4, r1
 80076ca:	46a8      	mov	r8, r5
 80076cc:	4621      	mov	r1, r4
 80076ce:	4630      	mov	r0, r6
 80076d0:	3501      	adds	r5, #1
 80076d2:	f005 f933 	bl	800c93c <put_memory>
 80076d6:	42af      	cmp	r7, r5
 80076d8:	60a4      	str	r4, [r4, #8]
 80076da:	f884 800c 	strb.w	r8, [r4, #12]
 80076de:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80076e2:	d1f3      	bne.n	80076cc <rmw_uxrce_init_publisher_memory+0x20>
 80076e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop

080076ec <rmw_uxrce_init_subscription_memory>:
 80076ec:	b1e2      	cbz	r2, 8007728 <rmw_uxrce_init_subscription_memory+0x3c>
 80076ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076f2:	7b05      	ldrb	r5, [r0, #12]
 80076f4:	4606      	mov	r6, r0
 80076f6:	b9ad      	cbnz	r5, 8007724 <rmw_uxrce_init_subscription_memory+0x38>
 80076f8:	23d8      	movs	r3, #216	@ 0xd8
 80076fa:	e9c0 5500 	strd	r5, r5, [r0]
 80076fe:	6083      	str	r3, [r0, #8]
 8007700:	f240 1301 	movw	r3, #257	@ 0x101
 8007704:	4617      	mov	r7, r2
 8007706:	8183      	strh	r3, [r0, #12]
 8007708:	460c      	mov	r4, r1
 800770a:	46a8      	mov	r8, r5
 800770c:	4621      	mov	r1, r4
 800770e:	4630      	mov	r0, r6
 8007710:	3501      	adds	r5, #1
 8007712:	f005 f913 	bl	800c93c <put_memory>
 8007716:	42af      	cmp	r7, r5
 8007718:	60a4      	str	r4, [r4, #8]
 800771a:	f884 800c 	strb.w	r8, [r4, #12]
 800771e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8007722:	d1f3      	bne.n	800770c <rmw_uxrce_init_subscription_memory+0x20>
 8007724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop

0800772c <rmw_uxrce_init_node_memory>:
 800772c:	b1e2      	cbz	r2, 8007768 <rmw_uxrce_init_node_memory+0x3c>
 800772e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007732:	7b05      	ldrb	r5, [r0, #12]
 8007734:	4606      	mov	r6, r0
 8007736:	b9ad      	cbnz	r5, 8007764 <rmw_uxrce_init_node_memory+0x38>
 8007738:	23a4      	movs	r3, #164	@ 0xa4
 800773a:	e9c0 5500 	strd	r5, r5, [r0]
 800773e:	6083      	str	r3, [r0, #8]
 8007740:	f240 1301 	movw	r3, #257	@ 0x101
 8007744:	4617      	mov	r7, r2
 8007746:	8183      	strh	r3, [r0, #12]
 8007748:	460c      	mov	r4, r1
 800774a:	46a8      	mov	r8, r5
 800774c:	4621      	mov	r1, r4
 800774e:	4630      	mov	r0, r6
 8007750:	3501      	adds	r5, #1
 8007752:	f005 f8f3 	bl	800c93c <put_memory>
 8007756:	42af      	cmp	r7, r5
 8007758:	60a4      	str	r4, [r4, #8]
 800775a:	f884 800c 	strb.w	r8, [r4, #12]
 800775e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8007762:	d1f3      	bne.n	800774c <rmw_uxrce_init_node_memory+0x20>
 8007764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop

0800776c <rmw_uxrce_init_session_memory>:
 800776c:	b1ea      	cbz	r2, 80077aa <rmw_uxrce_init_session_memory+0x3e>
 800776e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007772:	7b05      	ldrb	r5, [r0, #12]
 8007774:	4606      	mov	r6, r0
 8007776:	b9b5      	cbnz	r5, 80077a6 <rmw_uxrce_init_session_memory+0x3a>
 8007778:	e9c0 5500 	strd	r5, r5, [r0]
 800777c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8007780:	f240 1301 	movw	r3, #257	@ 0x101
 8007784:	4617      	mov	r7, r2
 8007786:	f8c0 8008 	str.w	r8, [r0, #8]
 800778a:	460c      	mov	r4, r1
 800778c:	8183      	strh	r3, [r0, #12]
 800778e:	46a9      	mov	r9, r5
 8007790:	4621      	mov	r1, r4
 8007792:	4630      	mov	r0, r6
 8007794:	3501      	adds	r5, #1
 8007796:	f005 f8d1 	bl	800c93c <put_memory>
 800779a:	42af      	cmp	r7, r5
 800779c:	60a4      	str	r4, [r4, #8]
 800779e:	f884 900c 	strb.w	r9, [r4, #12]
 80077a2:	4444      	add	r4, r8
 80077a4:	d1f4      	bne.n	8007790 <rmw_uxrce_init_session_memory+0x24>
 80077a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077aa:	4770      	bx	lr

080077ac <rmw_uxrce_init_topic_memory>:
 80077ac:	b1e2      	cbz	r2, 80077e8 <rmw_uxrce_init_topic_memory+0x3c>
 80077ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b2:	7b05      	ldrb	r5, [r0, #12]
 80077b4:	4606      	mov	r6, r0
 80077b6:	b9ad      	cbnz	r5, 80077e4 <rmw_uxrce_init_topic_memory+0x38>
 80077b8:	231c      	movs	r3, #28
 80077ba:	e9c0 5500 	strd	r5, r5, [r0]
 80077be:	6083      	str	r3, [r0, #8]
 80077c0:	f240 1301 	movw	r3, #257	@ 0x101
 80077c4:	4617      	mov	r7, r2
 80077c6:	8183      	strh	r3, [r0, #12]
 80077c8:	460c      	mov	r4, r1
 80077ca:	46a8      	mov	r8, r5
 80077cc:	4621      	mov	r1, r4
 80077ce:	4630      	mov	r0, r6
 80077d0:	3501      	adds	r5, #1
 80077d2:	f005 f8b3 	bl	800c93c <put_memory>
 80077d6:	42af      	cmp	r7, r5
 80077d8:	60a4      	str	r4, [r4, #8]
 80077da:	f884 800c 	strb.w	r8, [r4, #12]
 80077de:	f104 041c 	add.w	r4, r4, #28
 80077e2:	d1f3      	bne.n	80077cc <rmw_uxrce_init_topic_memory+0x20>
 80077e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop

080077ec <rmw_uxrce_init_static_input_buffer_memory>:
 80077ec:	b1ea      	cbz	r2, 800782a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80077ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f2:	7b05      	ldrb	r5, [r0, #12]
 80077f4:	4606      	mov	r6, r0
 80077f6:	b9b5      	cbnz	r5, 8007826 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80077f8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 80077fc:	e9c0 5500 	strd	r5, r5, [r0]
 8007800:	6083      	str	r3, [r0, #8]
 8007802:	f240 1301 	movw	r3, #257	@ 0x101
 8007806:	4617      	mov	r7, r2
 8007808:	8183      	strh	r3, [r0, #12]
 800780a:	460c      	mov	r4, r1
 800780c:	46a8      	mov	r8, r5
 800780e:	4621      	mov	r1, r4
 8007810:	4630      	mov	r0, r6
 8007812:	3501      	adds	r5, #1
 8007814:	f005 f892 	bl	800c93c <put_memory>
 8007818:	42af      	cmp	r7, r5
 800781a:	60a4      	str	r4, [r4, #8]
 800781c:	f884 800c 	strb.w	r8, [r4, #12]
 8007820:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8007824:	d1f3      	bne.n	800780e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8007826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800782a:	4770      	bx	lr

0800782c <rmw_uxrce_init_init_options_impl_memory>:
 800782c:	b1e2      	cbz	r2, 8007868 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800782e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007832:	7b05      	ldrb	r5, [r0, #12]
 8007834:	4606      	mov	r6, r0
 8007836:	b9ad      	cbnz	r5, 8007864 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8007838:	232c      	movs	r3, #44	@ 0x2c
 800783a:	e9c0 5500 	strd	r5, r5, [r0]
 800783e:	6083      	str	r3, [r0, #8]
 8007840:	f240 1301 	movw	r3, #257	@ 0x101
 8007844:	4617      	mov	r7, r2
 8007846:	8183      	strh	r3, [r0, #12]
 8007848:	460c      	mov	r4, r1
 800784a:	46a8      	mov	r8, r5
 800784c:	4621      	mov	r1, r4
 800784e:	4630      	mov	r0, r6
 8007850:	3501      	adds	r5, #1
 8007852:	f005 f873 	bl	800c93c <put_memory>
 8007856:	42af      	cmp	r7, r5
 8007858:	60a4      	str	r4, [r4, #8]
 800785a:	f884 800c 	strb.w	r8, [r4, #12]
 800785e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8007862:	d1f3      	bne.n	800784c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8007864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop

0800786c <rmw_uxrce_init_wait_set_memory>:
 800786c:	b1e2      	cbz	r2, 80078a8 <rmw_uxrce_init_wait_set_memory+0x3c>
 800786e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007872:	7b05      	ldrb	r5, [r0, #12]
 8007874:	4606      	mov	r6, r0
 8007876:	b9ad      	cbnz	r5, 80078a4 <rmw_uxrce_init_wait_set_memory+0x38>
 8007878:	231c      	movs	r3, #28
 800787a:	e9c0 5500 	strd	r5, r5, [r0]
 800787e:	6083      	str	r3, [r0, #8]
 8007880:	f240 1301 	movw	r3, #257	@ 0x101
 8007884:	4617      	mov	r7, r2
 8007886:	8183      	strh	r3, [r0, #12]
 8007888:	460c      	mov	r4, r1
 800788a:	46a8      	mov	r8, r5
 800788c:	4621      	mov	r1, r4
 800788e:	4630      	mov	r0, r6
 8007890:	3501      	adds	r5, #1
 8007892:	f005 f853 	bl	800c93c <put_memory>
 8007896:	42af      	cmp	r7, r5
 8007898:	60a4      	str	r4, [r4, #8]
 800789a:	f884 800c 	strb.w	r8, [r4, #12]
 800789e:	f104 041c 	add.w	r4, r4, #28
 80078a2:	d1f3      	bne.n	800788c <rmw_uxrce_init_wait_set_memory+0x20>
 80078a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop

080078ac <rmw_uxrce_init_guard_condition_memory>:
 80078ac:	b1e2      	cbz	r2, 80078e8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 80078ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b2:	7b05      	ldrb	r5, [r0, #12]
 80078b4:	4606      	mov	r6, r0
 80078b6:	b9ad      	cbnz	r5, 80078e4 <rmw_uxrce_init_guard_condition_memory+0x38>
 80078b8:	2320      	movs	r3, #32
 80078ba:	e9c0 5500 	strd	r5, r5, [r0]
 80078be:	6083      	str	r3, [r0, #8]
 80078c0:	f240 1301 	movw	r3, #257	@ 0x101
 80078c4:	4617      	mov	r7, r2
 80078c6:	8183      	strh	r3, [r0, #12]
 80078c8:	460c      	mov	r4, r1
 80078ca:	46a8      	mov	r8, r5
 80078cc:	4621      	mov	r1, r4
 80078ce:	4630      	mov	r0, r6
 80078d0:	3501      	adds	r5, #1
 80078d2:	f005 f833 	bl	800c93c <put_memory>
 80078d6:	42af      	cmp	r7, r5
 80078d8:	60a4      	str	r4, [r4, #8]
 80078da:	f884 800c 	strb.w	r8, [r4, #12]
 80078de:	f104 0420 	add.w	r4, r4, #32
 80078e2:	d1f3      	bne.n	80078cc <rmw_uxrce_init_guard_condition_memory+0x20>
 80078e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop

080078ec <rmw_uxrce_fini_session_memory>:
 80078ec:	4601      	mov	r1, r0
 80078ee:	4801      	ldr	r0, [pc, #4]	@ (80078f4 <rmw_uxrce_fini_session_memory+0x8>)
 80078f0:	f005 b824 	b.w	800c93c <put_memory>
 80078f4:	2000daf0 	.word	0x2000daf0

080078f8 <rmw_uxrce_fini_node_memory>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	4604      	mov	r4, r0
 80078fc:	6800      	ldr	r0, [r0, #0]
 80078fe:	b128      	cbz	r0, 800790c <rmw_uxrce_fini_node_memory+0x14>
 8007900:	4b07      	ldr	r3, [pc, #28]	@ (8007920 <rmw_uxrce_fini_node_memory+0x28>)
 8007902:	6819      	ldr	r1, [r3, #0]
 8007904:	f7f8 fc6c 	bl	80001e0 <strcmp>
 8007908:	b940      	cbnz	r0, 800791c <rmw_uxrce_fini_node_memory+0x24>
 800790a:	6020      	str	r0, [r4, #0]
 800790c:	6861      	ldr	r1, [r4, #4]
 800790e:	b129      	cbz	r1, 800791c <rmw_uxrce_fini_node_memory+0x24>
 8007910:	2500      	movs	r5, #0
 8007912:	4804      	ldr	r0, [pc, #16]	@ (8007924 <rmw_uxrce_fini_node_memory+0x2c>)
 8007914:	610d      	str	r5, [r1, #16]
 8007916:	f005 f811 	bl	800c93c <put_memory>
 800791a:	6065      	str	r5, [r4, #4]
 800791c:	bd38      	pop	{r3, r4, r5, pc}
 800791e:	bf00      	nop
 8007920:	08011b24 	.word	0x08011b24
 8007924:	2000c534 	.word	0x2000c534

08007928 <rmw_uxrce_fini_publisher_memory>:
 8007928:	b510      	push	{r4, lr}
 800792a:	4604      	mov	r4, r0
 800792c:	6800      	ldr	r0, [r0, #0]
 800792e:	b128      	cbz	r0, 800793c <rmw_uxrce_fini_publisher_memory+0x14>
 8007930:	4b06      	ldr	r3, [pc, #24]	@ (800794c <rmw_uxrce_fini_publisher_memory+0x24>)
 8007932:	6819      	ldr	r1, [r3, #0]
 8007934:	f7f8 fc54 	bl	80001e0 <strcmp>
 8007938:	b938      	cbnz	r0, 800794a <rmw_uxrce_fini_publisher_memory+0x22>
 800793a:	6020      	str	r0, [r4, #0]
 800793c:	6861      	ldr	r1, [r4, #4]
 800793e:	b121      	cbz	r1, 800794a <rmw_uxrce_fini_publisher_memory+0x22>
 8007940:	4803      	ldr	r0, [pc, #12]	@ (8007950 <rmw_uxrce_fini_publisher_memory+0x28>)
 8007942:	f004 fffb 	bl	800c93c <put_memory>
 8007946:	2300      	movs	r3, #0
 8007948:	6063      	str	r3, [r4, #4]
 800794a:	bd10      	pop	{r4, pc}
 800794c:	08011b24 	.word	0x08011b24
 8007950:	2000c480 	.word	0x2000c480

08007954 <rmw_uxrce_fini_subscription_memory>:
 8007954:	b510      	push	{r4, lr}
 8007956:	4604      	mov	r4, r0
 8007958:	6800      	ldr	r0, [r0, #0]
 800795a:	b128      	cbz	r0, 8007968 <rmw_uxrce_fini_subscription_memory+0x14>
 800795c:	4b06      	ldr	r3, [pc, #24]	@ (8007978 <rmw_uxrce_fini_subscription_memory+0x24>)
 800795e:	6819      	ldr	r1, [r3, #0]
 8007960:	f7f8 fc3e 	bl	80001e0 <strcmp>
 8007964:	b938      	cbnz	r0, 8007976 <rmw_uxrce_fini_subscription_memory+0x22>
 8007966:	6020      	str	r0, [r4, #0]
 8007968:	6861      	ldr	r1, [r4, #4]
 800796a:	b121      	cbz	r1, 8007976 <rmw_uxrce_fini_subscription_memory+0x22>
 800796c:	4803      	ldr	r0, [pc, #12]	@ (800797c <rmw_uxrce_fini_subscription_memory+0x28>)
 800796e:	f004 ffe5 	bl	800c93c <put_memory>
 8007972:	2300      	movs	r3, #0
 8007974:	6063      	str	r3, [r4, #4]
 8007976:	bd10      	pop	{r4, pc}
 8007978:	08011b24 	.word	0x08011b24
 800797c:	2000bc00 	.word	0x2000bc00

08007980 <rmw_uxrce_fini_service_memory>:
 8007980:	b510      	push	{r4, lr}
 8007982:	4604      	mov	r4, r0
 8007984:	6800      	ldr	r0, [r0, #0]
 8007986:	b128      	cbz	r0, 8007994 <rmw_uxrce_fini_service_memory+0x14>
 8007988:	4b06      	ldr	r3, [pc, #24]	@ (80079a4 <rmw_uxrce_fini_service_memory+0x24>)
 800798a:	6819      	ldr	r1, [r3, #0]
 800798c:	f7f8 fc28 	bl	80001e0 <strcmp>
 8007990:	b938      	cbnz	r0, 80079a2 <rmw_uxrce_fini_service_memory+0x22>
 8007992:	6020      	str	r0, [r4, #0]
 8007994:	6861      	ldr	r1, [r4, #4]
 8007996:	b121      	cbz	r1, 80079a2 <rmw_uxrce_fini_service_memory+0x22>
 8007998:	4803      	ldr	r0, [pc, #12]	@ (80079a8 <rmw_uxrce_fini_service_memory+0x28>)
 800799a:	f004 ffcf 	bl	800c93c <put_memory>
 800799e:	2300      	movs	r3, #0
 80079a0:	6063      	str	r3, [r4, #4]
 80079a2:	bd10      	pop	{r4, pc}
 80079a4:	08011b24 	.word	0x08011b24
 80079a8:	2000b7b8 	.word	0x2000b7b8

080079ac <rmw_uxrce_fini_client_memory>:
 80079ac:	b510      	push	{r4, lr}
 80079ae:	4604      	mov	r4, r0
 80079b0:	6800      	ldr	r0, [r0, #0]
 80079b2:	b128      	cbz	r0, 80079c0 <rmw_uxrce_fini_client_memory+0x14>
 80079b4:	4b06      	ldr	r3, [pc, #24]	@ (80079d0 <rmw_uxrce_fini_client_memory+0x24>)
 80079b6:	6819      	ldr	r1, [r3, #0]
 80079b8:	f7f8 fc12 	bl	80001e0 <strcmp>
 80079bc:	b938      	cbnz	r0, 80079ce <rmw_uxrce_fini_client_memory+0x22>
 80079be:	6020      	str	r0, [r4, #0]
 80079c0:	6861      	ldr	r1, [r4, #4]
 80079c2:	b121      	cbz	r1, 80079ce <rmw_uxrce_fini_client_memory+0x22>
 80079c4:	4803      	ldr	r0, [pc, #12]	@ (80079d4 <rmw_uxrce_fini_client_memory+0x28>)
 80079c6:	f004 ffb9 	bl	800c93c <put_memory>
 80079ca:	2300      	movs	r3, #0
 80079cc:	6063      	str	r3, [r4, #4]
 80079ce:	bd10      	pop	{r4, pc}
 80079d0:	08011b24 	.word	0x08011b24
 80079d4:	2000b6e0 	.word	0x2000b6e0

080079d8 <rmw_uxrce_fini_topic_memory>:
 80079d8:	b510      	push	{r4, lr}
 80079da:	4604      	mov	r4, r0
 80079dc:	4621      	mov	r1, r4
 80079de:	4803      	ldr	r0, [pc, #12]	@ (80079ec <rmw_uxrce_fini_topic_memory+0x14>)
 80079e0:	f004 ffac 	bl	800c93c <put_memory>
 80079e4:	2300      	movs	r3, #0
 80079e6:	61a3      	str	r3, [r4, #24]
 80079e8:	bd10      	pop	{r4, pc}
 80079ea:	bf00      	nop
 80079ec:	2000b604 	.word	0x2000b604

080079f0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 80079f0:	b082      	sub	sp, #8
 80079f2:	b530      	push	{r4, r5, lr}
 80079f4:	4929      	ldr	r1, [pc, #164]	@ (8007a9c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 80079f6:	ac03      	add	r4, sp, #12
 80079f8:	e884 000c 	stmia.w	r4, {r2, r3}
 80079fc:	680c      	ldr	r4, [r1, #0]
 80079fe:	461d      	mov	r5, r3
 8007a00:	4602      	mov	r2, r0
 8007a02:	2c00      	cmp	r4, #0
 8007a04:	d043      	beq.n	8007a8e <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 8007a06:	4620      	mov	r0, r4
 8007a08:	2100      	movs	r1, #0
 8007a0a:	6883      	ldr	r3, [r0, #8]
 8007a0c:	6840      	ldr	r0, [r0, #4]
 8007a0e:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 8007a12:	429a      	cmp	r2, r3
 8007a14:	bf08      	it	eq
 8007a16:	3101      	addeq	r1, #1
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	d1f6      	bne.n	8007a0a <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 8007a1c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d027      	beq.n	8007a74 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 8007a24:	d906      	bls.n	8007a34 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	d004      	beq.n	8007a34 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8007a2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a2e:	2000      	movs	r0, #0
 8007a30:	b002      	add	sp, #8
 8007a32:	4770      	bx	lr
 8007a34:	b1fd      	cbz	r5, 8007a76 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8007a36:	428d      	cmp	r5, r1
 8007a38:	d81d      	bhi.n	8007a76 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8007a3a:	2c00      	cmp	r4, #0
 8007a3c:	d0f5      	beq.n	8007a2a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8007a3e:	2000      	movs	r0, #0
 8007a40:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8007a44:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8007a48:	e001      	b.n	8007a4e <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 8007a4a:	6864      	ldr	r4, [r4, #4]
 8007a4c:	b1dc      	cbz	r4, 8007a86 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8007a4e:	68a3      	ldr	r3, [r4, #8]
 8007a50:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8007a54:	428a      	cmp	r2, r1
 8007a56:	d1f8      	bne.n	8007a4a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8007a58:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 8007a5c:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8007a60:	4561      	cmp	r1, ip
 8007a62:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8007a66:	eb73 0e05 	sbcs.w	lr, r3, r5
 8007a6a:	daee      	bge.n	8007a4a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8007a6c:	468c      	mov	ip, r1
 8007a6e:	461d      	mov	r5, r3
 8007a70:	4620      	mov	r0, r4
 8007a72:	e7ea      	b.n	8007a4a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8007a74:	b92d      	cbnz	r5, 8007a82 <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 8007a76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a7a:	4808      	ldr	r0, [pc, #32]	@ (8007a9c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 8007a7c:	b002      	add	sp, #8
 8007a7e:	f004 bf4d 	b.w	800c91c <get_memory>
 8007a82:	428d      	cmp	r5, r1
 8007a84:	d8f7      	bhi.n	8007a76 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8007a86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a8a:	b002      	add	sp, #8
 8007a8c:	4770      	bx	lr
 8007a8e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d0ef      	beq.n	8007a76 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8007a96:	d9ee      	bls.n	8007a76 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8007a98:	4621      	mov	r1, r4
 8007a9a:	e7c4      	b.n	8007a26 <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 8007a9c:	2000b450 	.word	0x2000b450

08007aa0 <run_xrce_session>:
 8007aa0:	b500      	push	{lr}
 8007aa2:	f891 c002 	ldrb.w	ip, [r1, #2]
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	f1bc 0f01 	cmp.w	ip, #1
 8007aac:	f8ad 200e 	strh.w	r2, [sp, #14]
 8007ab0:	d00f      	beq.n	8007ad2 <run_xrce_session+0x32>
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	f10d 020e 	add.w	r2, sp, #14
 8007abc:	f10d 0317 	add.w	r3, sp, #23
 8007ac0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8007ac4:	f001 ff1c 	bl	8009900 <uxr_run_session_until_all_status>
 8007ac8:	b100      	cbz	r0, 8007acc <run_xrce_session+0x2c>
 8007aca:	2001      	movs	r0, #1
 8007acc:	b007      	add	sp, #28
 8007ace:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ad2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8007ad6:	f001 fb8f 	bl	80091f8 <uxr_flash_output_streams>
 8007ada:	2001      	movs	r0, #1
 8007adc:	e7f6      	b.n	8007acc <run_xrce_session+0x2c>
 8007ade:	bf00      	nop

08007ae0 <convert_qos_profile>:
 8007ae0:	780a      	ldrb	r2, [r1, #0]
 8007ae2:	f891 c008 	ldrb.w	ip, [r1, #8]
 8007ae6:	f1a2 0202 	sub.w	r2, r2, #2
 8007aea:	fab2 f282 	clz	r2, r2
 8007aee:	0952      	lsrs	r2, r2, #5
 8007af0:	7082      	strb	r2, [r0, #2]
 8007af2:	7a4a      	ldrb	r2, [r1, #9]
 8007af4:	8889      	ldrh	r1, [r1, #4]
 8007af6:	8081      	strh	r1, [r0, #4]
 8007af8:	f1a2 0202 	sub.w	r2, r2, #2
 8007afc:	f1ac 0c02 	sub.w	ip, ip, #2
 8007b00:	fab2 f282 	clz	r2, r2
 8007b04:	fabc fc8c 	clz	ip, ip
 8007b08:	0952      	lsrs	r2, r2, #5
 8007b0a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8007b0e:	0052      	lsls	r2, r2, #1
 8007b10:	f880 c001 	strb.w	ip, [r0, #1]
 8007b14:	7002      	strb	r2, [r0, #0]
 8007b16:	4770      	bx	lr

08007b18 <generate_type_name>:
 8007b18:	b530      	push	{r4, r5, lr}
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	700b      	strb	r3, [r1, #0]
 8007b1e:	6803      	ldr	r3, [r0, #0]
 8007b20:	b087      	sub	sp, #28
 8007b22:	4614      	mov	r4, r2
 8007b24:	b1d3      	cbz	r3, 8007b5c <generate_type_name+0x44>
 8007b26:	4a0f      	ldr	r2, [pc, #60]	@ (8007b64 <generate_type_name+0x4c>)
 8007b28:	4615      	mov	r5, r2
 8007b2a:	9203      	str	r2, [sp, #12]
 8007b2c:	9500      	str	r5, [sp, #0]
 8007b2e:	6842      	ldr	r2, [r0, #4]
 8007b30:	480d      	ldr	r0, [pc, #52]	@ (8007b68 <generate_type_name+0x50>)
 8007b32:	9001      	str	r0, [sp, #4]
 8007b34:	4608      	mov	r0, r1
 8007b36:	490d      	ldr	r1, [pc, #52]	@ (8007b6c <generate_type_name+0x54>)
 8007b38:	9204      	str	r2, [sp, #16]
 8007b3a:	9105      	str	r1, [sp, #20]
 8007b3c:	9102      	str	r1, [sp, #8]
 8007b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8007b70 <generate_type_name+0x58>)
 8007b40:	4621      	mov	r1, r4
 8007b42:	f008 fad5 	bl	80100f0 <sniprintf>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	db05      	blt.n	8007b56 <generate_type_name+0x3e>
 8007b4a:	4284      	cmp	r4, r0
 8007b4c:	bfd4      	ite	le
 8007b4e:	2000      	movle	r0, #0
 8007b50:	2001      	movgt	r0, #1
 8007b52:	b007      	add	sp, #28
 8007b54:	bd30      	pop	{r4, r5, pc}
 8007b56:	2000      	movs	r0, #0
 8007b58:	b007      	add	sp, #28
 8007b5a:	bd30      	pop	{r4, r5, pc}
 8007b5c:	4b05      	ldr	r3, [pc, #20]	@ (8007b74 <generate_type_name+0x5c>)
 8007b5e:	4a01      	ldr	r2, [pc, #4]	@ (8007b64 <generate_type_name+0x4c>)
 8007b60:	461d      	mov	r5, r3
 8007b62:	e7e2      	b.n	8007b2a <generate_type_name+0x12>
 8007b64:	080113c4 	.word	0x080113c4
 8007b68:	080113dc 	.word	0x080113dc
 8007b6c:	080113d8 	.word	0x080113d8
 8007b70:	080113c8 	.word	0x080113c8
 8007b74:	08011668 	.word	0x08011668

08007b78 <generate_topic_name>:
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	4614      	mov	r4, r2
 8007b7e:	9000      	str	r0, [sp, #0]
 8007b80:	4b08      	ldr	r3, [pc, #32]	@ (8007ba4 <generate_topic_name+0x2c>)
 8007b82:	4a09      	ldr	r2, [pc, #36]	@ (8007ba8 <generate_topic_name+0x30>)
 8007b84:	4608      	mov	r0, r1
 8007b86:	4621      	mov	r1, r4
 8007b88:	f008 fab2 	bl	80100f0 <sniprintf>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	db05      	blt.n	8007b9c <generate_topic_name+0x24>
 8007b90:	4284      	cmp	r4, r0
 8007b92:	bfd4      	ite	le
 8007b94:	2000      	movle	r0, #0
 8007b96:	2001      	movgt	r0, #1
 8007b98:	b002      	add	sp, #8
 8007b9a:	bd10      	pop	{r4, pc}
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	b002      	add	sp, #8
 8007ba0:	bd10      	pop	{r4, pc}
 8007ba2:	bf00      	nop
 8007ba4:	080119d0 	.word	0x080119d0
 8007ba8:	080113e0 	.word	0x080113e0

08007bac <is_uxrce_rmw_identifier_valid>:
 8007bac:	b510      	push	{r4, lr}
 8007bae:	4604      	mov	r4, r0
 8007bb0:	b140      	cbz	r0, 8007bc4 <is_uxrce_rmw_identifier_valid+0x18>
 8007bb2:	f004 fed7 	bl	800c964 <rmw_get_implementation_identifier>
 8007bb6:	4601      	mov	r1, r0
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f7f8 fb11 	bl	80001e0 <strcmp>
 8007bbe:	fab0 f080 	clz	r0, r0
 8007bc2:	0940      	lsrs	r0, r0, #5
 8007bc4:	bd10      	pop	{r4, pc}
 8007bc6:	bf00      	nop

08007bc8 <get_message_typesupport_handle>:
 8007bc8:	6883      	ldr	r3, [r0, #8]
 8007bca:	4718      	bx	r3

08007bcc <get_message_typesupport_handle_function>:
 8007bcc:	b510      	push	{r4, lr}
 8007bce:	4604      	mov	r4, r0
 8007bd0:	6800      	ldr	r0, [r0, #0]
 8007bd2:	f7f8 fb05 	bl	80001e0 <strcmp>
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	bf0c      	ite	eq
 8007bda:	4620      	moveq	r0, r4
 8007bdc:	2000      	movne	r0, #0
 8007bde:	bd10      	pop	{r4, pc}

08007be0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8007be0:	4b04      	ldr	r3, [pc, #16]	@ (8007bf4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	b10a      	cbz	r2, 8007bea <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8007be6:	4803      	ldr	r0, [pc, #12]	@ (8007bf4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007be8:	4770      	bx	lr
 8007bea:	4a03      	ldr	r2, [pc, #12]	@ (8007bf8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8007bec:	4801      	ldr	r0, [pc, #4]	@ (8007bf4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007bee:	6812      	ldr	r2, [r2, #0]
 8007bf0:	601a      	str	r2, [r3, #0]
 8007bf2:	4770      	bx	lr
 8007bf4:	20000028 	.word	0x20000028
 8007bf8:	200000d0 	.word	0x200000d0

08007bfc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8007bfc:	4a02      	ldr	r2, [pc, #8]	@ (8007c08 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8007bfe:	4b03      	ldr	r3, [pc, #12]	@ (8007c0c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8007c00:	6812      	ldr	r2, [r2, #0]
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	200000d0 	.word	0x200000d0
 8007c0c:	20000028 	.word	0x20000028

08007c10 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8007c10:	f005 bbb4 	b.w	800d37c <std_msgs__msg__Int32__init>

08007c14 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8007c14:	f005 bbb6 	b.w	800d384 <std_msgs__msg__Int32__fini>

08007c18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8007c18:	4b04      	ldr	r3, [pc, #16]	@ (8007c2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	b10a      	cbz	r2, 8007c22 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8007c1e:	4803      	ldr	r0, [pc, #12]	@ (8007c2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007c20:	4770      	bx	lr
 8007c22:	4a03      	ldr	r2, [pc, #12]	@ (8007c30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8007c24:	4801      	ldr	r0, [pc, #4]	@ (8007c2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007c26:	6812      	ldr	r2, [r2, #0]
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	4770      	bx	lr
 8007c2c:	20000048 	.word	0x20000048
 8007c30:	200000d4 	.word	0x200000d4

08007c34 <_Int32__max_serialized_size>:
 8007c34:	b508      	push	{r3, lr}
 8007c36:	2104      	movs	r1, #4
 8007c38:	2000      	movs	r0, #0
 8007c3a:	f001 f803 	bl	8008c44 <ucdr_alignment>
 8007c3e:	3004      	adds	r0, #4
 8007c40:	bd08      	pop	{r3, pc}
 8007c42:	bf00      	nop

08007c44 <_Int32__cdr_deserialize>:
 8007c44:	b109      	cbz	r1, 8007c4a <_Int32__cdr_deserialize+0x6>
 8007c46:	f000 bf17 	b.w	8008a78 <ucdr_deserialize_int32_t>
 8007c4a:	4608      	mov	r0, r1
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop

08007c50 <get_serialized_size_std_msgs__msg__Int32>:
 8007c50:	b508      	push	{r3, lr}
 8007c52:	b120      	cbz	r0, 8007c5e <get_serialized_size_std_msgs__msg__Int32+0xe>
 8007c54:	4608      	mov	r0, r1
 8007c56:	2104      	movs	r1, #4
 8007c58:	f000 fff4 	bl	8008c44 <ucdr_alignment>
 8007c5c:	3004      	adds	r0, #4
 8007c5e:	bd08      	pop	{r3, pc}

08007c60 <_Int32__cdr_serialize>:
 8007c60:	460a      	mov	r2, r1
 8007c62:	b118      	cbz	r0, 8007c6c <_Int32__cdr_serialize+0xc>
 8007c64:	6801      	ldr	r1, [r0, #0]
 8007c66:	4610      	mov	r0, r2
 8007c68:	f000 be6c 	b.w	8008944 <ucdr_serialize_int32_t>
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop

08007c70 <_Int32__get_serialized_size>:
 8007c70:	b130      	cbz	r0, 8007c80 <_Int32__get_serialized_size+0x10>
 8007c72:	b508      	push	{r3, lr}
 8007c74:	2104      	movs	r1, #4
 8007c76:	2000      	movs	r0, #0
 8007c78:	f000 ffe4 	bl	8008c44 <ucdr_alignment>
 8007c7c:	3004      	adds	r0, #4
 8007c7e:	bd08      	pop	{r3, pc}
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop

08007c84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8007c84:	4800      	ldr	r0, [pc, #0]	@ (8007c88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8007c86:	4770      	bx	lr
 8007c88:	2000009c 	.word	0x2000009c

08007c8c <ucdr_serialize_bool>:
 8007c8c:	b538      	push	{r3, r4, r5, lr}
 8007c8e:	460d      	mov	r5, r1
 8007c90:	2101      	movs	r1, #1
 8007c92:	4604      	mov	r4, r0
 8007c94:	f000 ff8a 	bl	8008bac <ucdr_check_final_buffer_behavior>
 8007c98:	b148      	cbz	r0, 8007cae <ucdr_serialize_bool+0x22>
 8007c9a:	68a3      	ldr	r3, [r4, #8]
 8007c9c:	701d      	strb	r5, [r3, #0]
 8007c9e:	68a2      	ldr	r2, [r4, #8]
 8007ca0:	6923      	ldr	r3, [r4, #16]
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	440a      	add	r2, r1
 8007ca6:	440b      	add	r3, r1
 8007ca8:	60a2      	str	r2, [r4, #8]
 8007caa:	6123      	str	r3, [r4, #16]
 8007cac:	7561      	strb	r1, [r4, #21]
 8007cae:	7da0      	ldrb	r0, [r4, #22]
 8007cb0:	f080 0001 	eor.w	r0, r0, #1
 8007cb4:	bd38      	pop	{r3, r4, r5, pc}
 8007cb6:	bf00      	nop

08007cb8 <ucdr_deserialize_bool>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	460d      	mov	r5, r1
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	f000 ff74 	bl	8008bac <ucdr_check_final_buffer_behavior>
 8007cc4:	b160      	cbz	r0, 8007ce0 <ucdr_deserialize_bool+0x28>
 8007cc6:	68a2      	ldr	r2, [r4, #8]
 8007cc8:	6923      	ldr	r3, [r4, #16]
 8007cca:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007cce:	3900      	subs	r1, #0
 8007cd0:	bf18      	it	ne
 8007cd2:	2101      	movne	r1, #1
 8007cd4:	7029      	strb	r1, [r5, #0]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	2101      	movs	r1, #1
 8007cda:	60a2      	str	r2, [r4, #8]
 8007cdc:	6123      	str	r3, [r4, #16]
 8007cde:	7561      	strb	r1, [r4, #21]
 8007ce0:	7da0      	ldrb	r0, [r4, #22]
 8007ce2:	f080 0001 	eor.w	r0, r0, #1
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}

08007ce8 <ucdr_serialize_uint8_t>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	460d      	mov	r5, r1
 8007cec:	2101      	movs	r1, #1
 8007cee:	4604      	mov	r4, r0
 8007cf0:	f000 ff5c 	bl	8008bac <ucdr_check_final_buffer_behavior>
 8007cf4:	b148      	cbz	r0, 8007d0a <ucdr_serialize_uint8_t+0x22>
 8007cf6:	68a3      	ldr	r3, [r4, #8]
 8007cf8:	701d      	strb	r5, [r3, #0]
 8007cfa:	68a2      	ldr	r2, [r4, #8]
 8007cfc:	6923      	ldr	r3, [r4, #16]
 8007cfe:	2101      	movs	r1, #1
 8007d00:	440a      	add	r2, r1
 8007d02:	440b      	add	r3, r1
 8007d04:	60a2      	str	r2, [r4, #8]
 8007d06:	6123      	str	r3, [r4, #16]
 8007d08:	7561      	strb	r1, [r4, #21]
 8007d0a:	7da0      	ldrb	r0, [r4, #22]
 8007d0c:	f080 0001 	eor.w	r0, r0, #1
 8007d10:	bd38      	pop	{r3, r4, r5, pc}
 8007d12:	bf00      	nop

08007d14 <ucdr_deserialize_uint8_t>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	460d      	mov	r5, r1
 8007d18:	2101      	movs	r1, #1
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	f000 ff46 	bl	8008bac <ucdr_check_final_buffer_behavior>
 8007d20:	b150      	cbz	r0, 8007d38 <ucdr_deserialize_uint8_t+0x24>
 8007d22:	68a3      	ldr	r3, [r4, #8]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	702b      	strb	r3, [r5, #0]
 8007d28:	68a2      	ldr	r2, [r4, #8]
 8007d2a:	6923      	ldr	r3, [r4, #16]
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	440a      	add	r2, r1
 8007d30:	440b      	add	r3, r1
 8007d32:	60a2      	str	r2, [r4, #8]
 8007d34:	6123      	str	r3, [r4, #16]
 8007d36:	7561      	strb	r1, [r4, #21]
 8007d38:	7da0      	ldrb	r0, [r4, #22]
 8007d3a:	f080 0001 	eor.w	r0, r0, #1
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}

08007d40 <ucdr_serialize_uint16_t>:
 8007d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d44:	b082      	sub	sp, #8
 8007d46:	460b      	mov	r3, r1
 8007d48:	2102      	movs	r1, #2
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007d50:	f000 ff80 	bl	8008c54 <ucdr_buffer_alignment>
 8007d54:	4601      	mov	r1, r0
 8007d56:	4620      	mov	r0, r4
 8007d58:	7d67      	ldrb	r7, [r4, #21]
 8007d5a:	f000 ffbf 	bl	8008cdc <ucdr_advance_buffer>
 8007d5e:	2102      	movs	r1, #2
 8007d60:	4620      	mov	r0, r4
 8007d62:	f000 ff17 	bl	8008b94 <ucdr_check_buffer_available_for>
 8007d66:	b1c0      	cbz	r0, 8007d9a <ucdr_serialize_uint16_t+0x5a>
 8007d68:	7d22      	ldrb	r2, [r4, #20]
 8007d6a:	68a3      	ldr	r3, [r4, #8]
 8007d6c:	2a01      	cmp	r2, #1
 8007d6e:	d04e      	beq.n	8007e0e <ucdr_serialize_uint16_t+0xce>
 8007d70:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007d74:	701a      	strb	r2, [r3, #0]
 8007d76:	68a3      	ldr	r3, [r4, #8]
 8007d78:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007d7c:	705a      	strb	r2, [r3, #1]
 8007d7e:	68a2      	ldr	r2, [r4, #8]
 8007d80:	6923      	ldr	r3, [r4, #16]
 8007d82:	3202      	adds	r2, #2
 8007d84:	3302      	adds	r3, #2
 8007d86:	2102      	movs	r1, #2
 8007d88:	60a2      	str	r2, [r4, #8]
 8007d8a:	6123      	str	r3, [r4, #16]
 8007d8c:	7561      	strb	r1, [r4, #21]
 8007d8e:	7da0      	ldrb	r0, [r4, #22]
 8007d90:	f080 0001 	eor.w	r0, r0, #1
 8007d94:	b002      	add	sp, #8
 8007d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d9a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007d9e:	42ab      	cmp	r3, r5
 8007da0:	d923      	bls.n	8007dea <ucdr_serialize_uint16_t+0xaa>
 8007da2:	1b5e      	subs	r6, r3, r5
 8007da4:	60a3      	str	r3, [r4, #8]
 8007da6:	6923      	ldr	r3, [r4, #16]
 8007da8:	f1c6 0802 	rsb	r8, r6, #2
 8007dac:	4433      	add	r3, r6
 8007dae:	6123      	str	r3, [r4, #16]
 8007db0:	4641      	mov	r1, r8
 8007db2:	4620      	mov	r0, r4
 8007db4:	f000 fefa 	bl	8008bac <ucdr_check_final_buffer_behavior>
 8007db8:	b368      	cbz	r0, 8007e16 <ucdr_serialize_uint16_t+0xd6>
 8007dba:	7d23      	ldrb	r3, [r4, #20]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d03b      	beq.n	8007e38 <ucdr_serialize_uint16_t+0xf8>
 8007dc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007dc4:	702b      	strb	r3, [r5, #0]
 8007dc6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007dca:	706b      	strb	r3, [r5, #1]
 8007dcc:	6923      	ldr	r3, [r4, #16]
 8007dce:	68a2      	ldr	r2, [r4, #8]
 8007dd0:	7da0      	ldrb	r0, [r4, #22]
 8007dd2:	3302      	adds	r3, #2
 8007dd4:	4442      	add	r2, r8
 8007dd6:	1b9b      	subs	r3, r3, r6
 8007dd8:	2102      	movs	r1, #2
 8007dda:	f080 0001 	eor.w	r0, r0, #1
 8007dde:	60a2      	str	r2, [r4, #8]
 8007de0:	6123      	str	r3, [r4, #16]
 8007de2:	7561      	strb	r1, [r4, #21]
 8007de4:	b002      	add	sp, #8
 8007de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dea:	2102      	movs	r1, #2
 8007dec:	4620      	mov	r0, r4
 8007dee:	f000 fedd 	bl	8008bac <ucdr_check_final_buffer_behavior>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d0cb      	beq.n	8007d8e <ucdr_serialize_uint16_t+0x4e>
 8007df6:	7d23      	ldrb	r3, [r4, #20]
 8007df8:	68a2      	ldr	r2, [r4, #8]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d018      	beq.n	8007e30 <ucdr_serialize_uint16_t+0xf0>
 8007dfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007e02:	7013      	strb	r3, [r2, #0]
 8007e04:	68a3      	ldr	r3, [r4, #8]
 8007e06:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007e0a:	705a      	strb	r2, [r3, #1]
 8007e0c:	e7b7      	b.n	8007d7e <ucdr_serialize_uint16_t+0x3e>
 8007e0e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007e12:	801a      	strh	r2, [r3, #0]
 8007e14:	e7b3      	b.n	8007d7e <ucdr_serialize_uint16_t+0x3e>
 8007e16:	68a2      	ldr	r2, [r4, #8]
 8007e18:	6923      	ldr	r3, [r4, #16]
 8007e1a:	7da0      	ldrb	r0, [r4, #22]
 8007e1c:	7567      	strb	r7, [r4, #21]
 8007e1e:	1b92      	subs	r2, r2, r6
 8007e20:	1b9b      	subs	r3, r3, r6
 8007e22:	f080 0001 	eor.w	r0, r0, #1
 8007e26:	60a2      	str	r2, [r4, #8]
 8007e28:	6123      	str	r3, [r4, #16]
 8007e2a:	b002      	add	sp, #8
 8007e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007e34:	8013      	strh	r3, [r2, #0]
 8007e36:	e7a2      	b.n	8007d7e <ucdr_serialize_uint16_t+0x3e>
 8007e38:	4628      	mov	r0, r5
 8007e3a:	f10d 0506 	add.w	r5, sp, #6
 8007e3e:	4632      	mov	r2, r6
 8007e40:	4629      	mov	r1, r5
 8007e42:	f008 fae6 	bl	8010412 <memcpy>
 8007e46:	68a0      	ldr	r0, [r4, #8]
 8007e48:	4642      	mov	r2, r8
 8007e4a:	19a9      	adds	r1, r5, r6
 8007e4c:	f008 fae1 	bl	8010412 <memcpy>
 8007e50:	e7bc      	b.n	8007dcc <ucdr_serialize_uint16_t+0x8c>
 8007e52:	bf00      	nop

08007e54 <ucdr_serialize_endian_uint16_t>:
 8007e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e58:	b083      	sub	sp, #12
 8007e5a:	460d      	mov	r5, r1
 8007e5c:	2102      	movs	r1, #2
 8007e5e:	4604      	mov	r4, r0
 8007e60:	f8ad 2006 	strh.w	r2, [sp, #6]
 8007e64:	f000 fef6 	bl	8008c54 <ucdr_buffer_alignment>
 8007e68:	4601      	mov	r1, r0
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007e70:	f000 ff34 	bl	8008cdc <ucdr_advance_buffer>
 8007e74:	2102      	movs	r1, #2
 8007e76:	4620      	mov	r0, r4
 8007e78:	f000 fe8c 	bl	8008b94 <ucdr_check_buffer_available_for>
 8007e7c:	bb60      	cbnz	r0, 8007ed8 <ucdr_serialize_endian_uint16_t+0x84>
 8007e7e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8007e82:	42be      	cmp	r6, r7
 8007e84:	d923      	bls.n	8007ece <ucdr_serialize_endian_uint16_t+0x7a>
 8007e86:	6923      	ldr	r3, [r4, #16]
 8007e88:	60a6      	str	r6, [r4, #8]
 8007e8a:	1bf6      	subs	r6, r6, r7
 8007e8c:	4433      	add	r3, r6
 8007e8e:	f1c6 0902 	rsb	r9, r6, #2
 8007e92:	6123      	str	r3, [r4, #16]
 8007e94:	4649      	mov	r1, r9
 8007e96:	4620      	mov	r0, r4
 8007e98:	f000 fe88 	bl	8008bac <ucdr_check_final_buffer_behavior>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d037      	beq.n	8007f10 <ucdr_serialize_endian_uint16_t+0xbc>
 8007ea0:	2d01      	cmp	r5, #1
 8007ea2:	d043      	beq.n	8007f2c <ucdr_serialize_endian_uint16_t+0xd8>
 8007ea4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007ea8:	703b      	strb	r3, [r7, #0]
 8007eaa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007eae:	707b      	strb	r3, [r7, #1]
 8007eb0:	6923      	ldr	r3, [r4, #16]
 8007eb2:	68a2      	ldr	r2, [r4, #8]
 8007eb4:	7da0      	ldrb	r0, [r4, #22]
 8007eb6:	3302      	adds	r3, #2
 8007eb8:	444a      	add	r2, r9
 8007eba:	1b9b      	subs	r3, r3, r6
 8007ebc:	2102      	movs	r1, #2
 8007ebe:	f080 0001 	eor.w	r0, r0, #1
 8007ec2:	60a2      	str	r2, [r4, #8]
 8007ec4:	6123      	str	r3, [r4, #16]
 8007ec6:	7561      	strb	r1, [r4, #21]
 8007ec8:	b003      	add	sp, #12
 8007eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ece:	2102      	movs	r1, #2
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f000 fe6b 	bl	8008bac <ucdr_check_final_buffer_behavior>
 8007ed6:	b188      	cbz	r0, 8007efc <ucdr_serialize_endian_uint16_t+0xa8>
 8007ed8:	2d01      	cmp	r5, #1
 8007eda:	68a3      	ldr	r3, [r4, #8]
 8007edc:	d014      	beq.n	8007f08 <ucdr_serialize_endian_uint16_t+0xb4>
 8007ede:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007ee2:	701a      	strb	r2, [r3, #0]
 8007ee4:	68a3      	ldr	r3, [r4, #8]
 8007ee6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007eea:	705a      	strb	r2, [r3, #1]
 8007eec:	68a2      	ldr	r2, [r4, #8]
 8007eee:	6923      	ldr	r3, [r4, #16]
 8007ef0:	3202      	adds	r2, #2
 8007ef2:	3302      	adds	r3, #2
 8007ef4:	2102      	movs	r1, #2
 8007ef6:	60a2      	str	r2, [r4, #8]
 8007ef8:	6123      	str	r3, [r4, #16]
 8007efa:	7561      	strb	r1, [r4, #21]
 8007efc:	7da0      	ldrb	r0, [r4, #22]
 8007efe:	f080 0001 	eor.w	r0, r0, #1
 8007f02:	b003      	add	sp, #12
 8007f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f08:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007f0c:	801a      	strh	r2, [r3, #0]
 8007f0e:	e7ed      	b.n	8007eec <ucdr_serialize_endian_uint16_t+0x98>
 8007f10:	68a2      	ldr	r2, [r4, #8]
 8007f12:	6923      	ldr	r3, [r4, #16]
 8007f14:	7da0      	ldrb	r0, [r4, #22]
 8007f16:	f884 8015 	strb.w	r8, [r4, #21]
 8007f1a:	1b92      	subs	r2, r2, r6
 8007f1c:	1b9b      	subs	r3, r3, r6
 8007f1e:	f080 0001 	eor.w	r0, r0, #1
 8007f22:	60a2      	str	r2, [r4, #8]
 8007f24:	6123      	str	r3, [r4, #16]
 8007f26:	b003      	add	sp, #12
 8007f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f2c:	f10d 0506 	add.w	r5, sp, #6
 8007f30:	4632      	mov	r2, r6
 8007f32:	4629      	mov	r1, r5
 8007f34:	4638      	mov	r0, r7
 8007f36:	f008 fa6c 	bl	8010412 <memcpy>
 8007f3a:	68a0      	ldr	r0, [r4, #8]
 8007f3c:	464a      	mov	r2, r9
 8007f3e:	19a9      	adds	r1, r5, r6
 8007f40:	f008 fa67 	bl	8010412 <memcpy>
 8007f44:	e7b4      	b.n	8007eb0 <ucdr_serialize_endian_uint16_t+0x5c>
 8007f46:	bf00      	nop

08007f48 <ucdr_deserialize_uint16_t>:
 8007f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f4c:	460d      	mov	r5, r1
 8007f4e:	2102      	movs	r1, #2
 8007f50:	4604      	mov	r4, r0
 8007f52:	f000 fe7f 	bl	8008c54 <ucdr_buffer_alignment>
 8007f56:	4601      	mov	r1, r0
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007f5e:	f000 febd 	bl	8008cdc <ucdr_advance_buffer>
 8007f62:	2102      	movs	r1, #2
 8007f64:	4620      	mov	r0, r4
 8007f66:	f000 fe15 	bl	8008b94 <ucdr_check_buffer_available_for>
 8007f6a:	b1a8      	cbz	r0, 8007f98 <ucdr_deserialize_uint16_t+0x50>
 8007f6c:	7d22      	ldrb	r2, [r4, #20]
 8007f6e:	68a3      	ldr	r3, [r4, #8]
 8007f70:	2a01      	cmp	r2, #1
 8007f72:	d046      	beq.n	8008002 <ucdr_deserialize_uint16_t+0xba>
 8007f74:	785b      	ldrb	r3, [r3, #1]
 8007f76:	702b      	strb	r3, [r5, #0]
 8007f78:	68a3      	ldr	r3, [r4, #8]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	706b      	strb	r3, [r5, #1]
 8007f7e:	68a2      	ldr	r2, [r4, #8]
 8007f80:	6923      	ldr	r3, [r4, #16]
 8007f82:	3202      	adds	r2, #2
 8007f84:	3302      	adds	r3, #2
 8007f86:	2102      	movs	r1, #2
 8007f88:	60a2      	str	r2, [r4, #8]
 8007f8a:	6123      	str	r3, [r4, #16]
 8007f8c:	7561      	strb	r1, [r4, #21]
 8007f8e:	7da0      	ldrb	r0, [r4, #22]
 8007f90:	f080 0001 	eor.w	r0, r0, #1
 8007f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f98:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8007f9c:	42be      	cmp	r6, r7
 8007f9e:	d920      	bls.n	8007fe2 <ucdr_deserialize_uint16_t+0x9a>
 8007fa0:	6923      	ldr	r3, [r4, #16]
 8007fa2:	60a6      	str	r6, [r4, #8]
 8007fa4:	1bf6      	subs	r6, r6, r7
 8007fa6:	4433      	add	r3, r6
 8007fa8:	f1c6 0902 	rsb	r9, r6, #2
 8007fac:	6123      	str	r3, [r4, #16]
 8007fae:	4649      	mov	r1, r9
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f000 fdfb 	bl	8008bac <ucdr_check_final_buffer_behavior>
 8007fb6:	b338      	cbz	r0, 8008008 <ucdr_deserialize_uint16_t+0xc0>
 8007fb8:	7d23      	ldrb	r3, [r4, #20]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d034      	beq.n	8008028 <ucdr_deserialize_uint16_t+0xe0>
 8007fbe:	787b      	ldrb	r3, [r7, #1]
 8007fc0:	702b      	strb	r3, [r5, #0]
 8007fc2:	783b      	ldrb	r3, [r7, #0]
 8007fc4:	706b      	strb	r3, [r5, #1]
 8007fc6:	6923      	ldr	r3, [r4, #16]
 8007fc8:	68a2      	ldr	r2, [r4, #8]
 8007fca:	7da0      	ldrb	r0, [r4, #22]
 8007fcc:	2102      	movs	r1, #2
 8007fce:	3302      	adds	r3, #2
 8007fd0:	444a      	add	r2, r9
 8007fd2:	1b9b      	subs	r3, r3, r6
 8007fd4:	7561      	strb	r1, [r4, #21]
 8007fd6:	60a2      	str	r2, [r4, #8]
 8007fd8:	6123      	str	r3, [r4, #16]
 8007fda:	f080 0001 	eor.w	r0, r0, #1
 8007fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fe2:	2102      	movs	r1, #2
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f000 fde1 	bl	8008bac <ucdr_check_final_buffer_behavior>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d0cf      	beq.n	8007f8e <ucdr_deserialize_uint16_t+0x46>
 8007fee:	7d23      	ldrb	r3, [r4, #20]
 8007ff0:	68a2      	ldr	r2, [r4, #8]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d015      	beq.n	8008022 <ucdr_deserialize_uint16_t+0xda>
 8007ff6:	7853      	ldrb	r3, [r2, #1]
 8007ff8:	702b      	strb	r3, [r5, #0]
 8007ffa:	68a3      	ldr	r3, [r4, #8]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	706b      	strb	r3, [r5, #1]
 8008000:	e7bd      	b.n	8007f7e <ucdr_deserialize_uint16_t+0x36>
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	802b      	strh	r3, [r5, #0]
 8008006:	e7ba      	b.n	8007f7e <ucdr_deserialize_uint16_t+0x36>
 8008008:	68a2      	ldr	r2, [r4, #8]
 800800a:	6923      	ldr	r3, [r4, #16]
 800800c:	7da0      	ldrb	r0, [r4, #22]
 800800e:	f884 8015 	strb.w	r8, [r4, #21]
 8008012:	1b92      	subs	r2, r2, r6
 8008014:	1b9b      	subs	r3, r3, r6
 8008016:	60a2      	str	r2, [r4, #8]
 8008018:	6123      	str	r3, [r4, #16]
 800801a:	f080 0001 	eor.w	r0, r0, #1
 800801e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008022:	8813      	ldrh	r3, [r2, #0]
 8008024:	802b      	strh	r3, [r5, #0]
 8008026:	e7aa      	b.n	8007f7e <ucdr_deserialize_uint16_t+0x36>
 8008028:	4639      	mov	r1, r7
 800802a:	4632      	mov	r2, r6
 800802c:	4628      	mov	r0, r5
 800802e:	f008 f9f0 	bl	8010412 <memcpy>
 8008032:	68a1      	ldr	r1, [r4, #8]
 8008034:	464a      	mov	r2, r9
 8008036:	19a8      	adds	r0, r5, r6
 8008038:	f008 f9eb 	bl	8010412 <memcpy>
 800803c:	e7c3      	b.n	8007fc6 <ucdr_deserialize_uint16_t+0x7e>
 800803e:	bf00      	nop

08008040 <ucdr_deserialize_endian_uint16_t>:
 8008040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008044:	460e      	mov	r6, r1
 8008046:	2102      	movs	r1, #2
 8008048:	4604      	mov	r4, r0
 800804a:	4615      	mov	r5, r2
 800804c:	f000 fe02 	bl	8008c54 <ucdr_buffer_alignment>
 8008050:	4601      	mov	r1, r0
 8008052:	4620      	mov	r0, r4
 8008054:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008058:	f000 fe40 	bl	8008cdc <ucdr_advance_buffer>
 800805c:	2102      	movs	r1, #2
 800805e:	4620      	mov	r0, r4
 8008060:	f000 fd98 	bl	8008b94 <ucdr_check_buffer_available_for>
 8008064:	bb60      	cbnz	r0, 80080c0 <ucdr_deserialize_endian_uint16_t+0x80>
 8008066:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800806a:	4547      	cmp	r7, r8
 800806c:	d923      	bls.n	80080b6 <ucdr_deserialize_endian_uint16_t+0x76>
 800806e:	6923      	ldr	r3, [r4, #16]
 8008070:	60a7      	str	r7, [r4, #8]
 8008072:	eba7 0708 	sub.w	r7, r7, r8
 8008076:	443b      	add	r3, r7
 8008078:	f1c7 0a02 	rsb	sl, r7, #2
 800807c:	6123      	str	r3, [r4, #16]
 800807e:	4651      	mov	r1, sl
 8008080:	4620      	mov	r0, r4
 8008082:	f000 fd93 	bl	8008bac <ucdr_check_final_buffer_behavior>
 8008086:	2800      	cmp	r0, #0
 8008088:	d032      	beq.n	80080f0 <ucdr_deserialize_endian_uint16_t+0xb0>
 800808a:	2e01      	cmp	r6, #1
 800808c:	d03d      	beq.n	800810a <ucdr_deserialize_endian_uint16_t+0xca>
 800808e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008092:	702b      	strb	r3, [r5, #0]
 8008094:	f898 3000 	ldrb.w	r3, [r8]
 8008098:	706b      	strb	r3, [r5, #1]
 800809a:	6923      	ldr	r3, [r4, #16]
 800809c:	68a2      	ldr	r2, [r4, #8]
 800809e:	7da0      	ldrb	r0, [r4, #22]
 80080a0:	2102      	movs	r1, #2
 80080a2:	3302      	adds	r3, #2
 80080a4:	4452      	add	r2, sl
 80080a6:	1bdb      	subs	r3, r3, r7
 80080a8:	7561      	strb	r1, [r4, #21]
 80080aa:	60a2      	str	r2, [r4, #8]
 80080ac:	6123      	str	r3, [r4, #16]
 80080ae:	f080 0001 	eor.w	r0, r0, #1
 80080b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b6:	2102      	movs	r1, #2
 80080b8:	4620      	mov	r0, r4
 80080ba:	f000 fd77 	bl	8008bac <ucdr_check_final_buffer_behavior>
 80080be:	b178      	cbz	r0, 80080e0 <ucdr_deserialize_endian_uint16_t+0xa0>
 80080c0:	2e01      	cmp	r6, #1
 80080c2:	68a3      	ldr	r3, [r4, #8]
 80080c4:	d011      	beq.n	80080ea <ucdr_deserialize_endian_uint16_t+0xaa>
 80080c6:	785b      	ldrb	r3, [r3, #1]
 80080c8:	702b      	strb	r3, [r5, #0]
 80080ca:	68a3      	ldr	r3, [r4, #8]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	706b      	strb	r3, [r5, #1]
 80080d0:	68a2      	ldr	r2, [r4, #8]
 80080d2:	6923      	ldr	r3, [r4, #16]
 80080d4:	3202      	adds	r2, #2
 80080d6:	3302      	adds	r3, #2
 80080d8:	2102      	movs	r1, #2
 80080da:	60a2      	str	r2, [r4, #8]
 80080dc:	6123      	str	r3, [r4, #16]
 80080de:	7561      	strb	r1, [r4, #21]
 80080e0:	7da0      	ldrb	r0, [r4, #22]
 80080e2:	f080 0001 	eor.w	r0, r0, #1
 80080e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	802b      	strh	r3, [r5, #0]
 80080ee:	e7ef      	b.n	80080d0 <ucdr_deserialize_endian_uint16_t+0x90>
 80080f0:	68a2      	ldr	r2, [r4, #8]
 80080f2:	6923      	ldr	r3, [r4, #16]
 80080f4:	7da0      	ldrb	r0, [r4, #22]
 80080f6:	f884 9015 	strb.w	r9, [r4, #21]
 80080fa:	1bd2      	subs	r2, r2, r7
 80080fc:	1bdb      	subs	r3, r3, r7
 80080fe:	60a2      	str	r2, [r4, #8]
 8008100:	6123      	str	r3, [r4, #16]
 8008102:	f080 0001 	eor.w	r0, r0, #1
 8008106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800810a:	4641      	mov	r1, r8
 800810c:	463a      	mov	r2, r7
 800810e:	4628      	mov	r0, r5
 8008110:	f008 f97f 	bl	8010412 <memcpy>
 8008114:	68a1      	ldr	r1, [r4, #8]
 8008116:	4652      	mov	r2, sl
 8008118:	19e8      	adds	r0, r5, r7
 800811a:	f008 f97a 	bl	8010412 <memcpy>
 800811e:	e7bc      	b.n	800809a <ucdr_deserialize_endian_uint16_t+0x5a>

08008120 <ucdr_serialize_uint32_t>:
 8008120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008124:	b082      	sub	sp, #8
 8008126:	4604      	mov	r4, r0
 8008128:	9101      	str	r1, [sp, #4]
 800812a:	2104      	movs	r1, #4
 800812c:	f000 fd92 	bl	8008c54 <ucdr_buffer_alignment>
 8008130:	4601      	mov	r1, r0
 8008132:	4620      	mov	r0, r4
 8008134:	7d67      	ldrb	r7, [r4, #21]
 8008136:	f000 fdd1 	bl	8008cdc <ucdr_advance_buffer>
 800813a:	2104      	movs	r1, #4
 800813c:	4620      	mov	r0, r4
 800813e:	f000 fd29 	bl	8008b94 <ucdr_check_buffer_available_for>
 8008142:	b300      	cbz	r0, 8008186 <ucdr_serialize_uint32_t+0x66>
 8008144:	7d22      	ldrb	r2, [r4, #20]
 8008146:	68a3      	ldr	r3, [r4, #8]
 8008148:	2a01      	cmp	r2, #1
 800814a:	d05d      	beq.n	8008208 <ucdr_serialize_uint32_t+0xe8>
 800814c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008150:	701a      	strb	r2, [r3, #0]
 8008152:	68a3      	ldr	r3, [r4, #8]
 8008154:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008158:	705a      	strb	r2, [r3, #1]
 800815a:	68a3      	ldr	r3, [r4, #8]
 800815c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008160:	709a      	strb	r2, [r3, #2]
 8008162:	68a3      	ldr	r3, [r4, #8]
 8008164:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008168:	70da      	strb	r2, [r3, #3]
 800816a:	68a2      	ldr	r2, [r4, #8]
 800816c:	6923      	ldr	r3, [r4, #16]
 800816e:	3204      	adds	r2, #4
 8008170:	3304      	adds	r3, #4
 8008172:	2104      	movs	r1, #4
 8008174:	60a2      	str	r2, [r4, #8]
 8008176:	6123      	str	r3, [r4, #16]
 8008178:	7561      	strb	r1, [r4, #21]
 800817a:	7da0      	ldrb	r0, [r4, #22]
 800817c:	f080 0001 	eor.w	r0, r0, #1
 8008180:	b002      	add	sp, #8
 8008182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008186:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800818a:	42ab      	cmp	r3, r5
 800818c:	d92e      	bls.n	80081ec <ucdr_serialize_uint32_t+0xcc>
 800818e:	1b5e      	subs	r6, r3, r5
 8008190:	60a3      	str	r3, [r4, #8]
 8008192:	6923      	ldr	r3, [r4, #16]
 8008194:	f1c6 0804 	rsb	r8, r6, #4
 8008198:	4433      	add	r3, r6
 800819a:	6123      	str	r3, [r4, #16]
 800819c:	4641      	mov	r1, r8
 800819e:	4620      	mov	r0, r4
 80081a0:	f000 fd04 	bl	8008bac <ucdr_check_final_buffer_behavior>
 80081a4:	b398      	cbz	r0, 800820e <ucdr_serialize_uint32_t+0xee>
 80081a6:	7d23      	ldrb	r3, [r4, #20]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d046      	beq.n	800823a <ucdr_serialize_uint32_t+0x11a>
 80081ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80081b0:	702b      	strb	r3, [r5, #0]
 80081b2:	2e01      	cmp	r6, #1
 80081b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80081b8:	706b      	strb	r3, [r5, #1]
 80081ba:	d035      	beq.n	8008228 <ucdr_serialize_uint32_t+0x108>
 80081bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80081c0:	70ab      	strb	r3, [r5, #2]
 80081c2:	2e02      	cmp	r6, #2
 80081c4:	d034      	beq.n	8008230 <ucdr_serialize_uint32_t+0x110>
 80081c6:	3503      	adds	r5, #3
 80081c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80081cc:	702b      	strb	r3, [r5, #0]
 80081ce:	6923      	ldr	r3, [r4, #16]
 80081d0:	68a2      	ldr	r2, [r4, #8]
 80081d2:	7da0      	ldrb	r0, [r4, #22]
 80081d4:	3304      	adds	r3, #4
 80081d6:	4442      	add	r2, r8
 80081d8:	1b9b      	subs	r3, r3, r6
 80081da:	2104      	movs	r1, #4
 80081dc:	f080 0001 	eor.w	r0, r0, #1
 80081e0:	60a2      	str	r2, [r4, #8]
 80081e2:	6123      	str	r3, [r4, #16]
 80081e4:	7561      	strb	r1, [r4, #21]
 80081e6:	b002      	add	sp, #8
 80081e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ec:	2104      	movs	r1, #4
 80081ee:	4620      	mov	r0, r4
 80081f0:	f000 fcdc 	bl	8008bac <ucdr_check_final_buffer_behavior>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d0c0      	beq.n	800817a <ucdr_serialize_uint32_t+0x5a>
 80081f8:	7d23      	ldrb	r3, [r4, #20]
 80081fa:	68a2      	ldr	r2, [r4, #8]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d019      	beq.n	8008234 <ucdr_serialize_uint32_t+0x114>
 8008200:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008204:	7013      	strb	r3, [r2, #0]
 8008206:	e7a4      	b.n	8008152 <ucdr_serialize_uint32_t+0x32>
 8008208:	9a01      	ldr	r2, [sp, #4]
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	e7ad      	b.n	800816a <ucdr_serialize_uint32_t+0x4a>
 800820e:	68a2      	ldr	r2, [r4, #8]
 8008210:	6923      	ldr	r3, [r4, #16]
 8008212:	7da0      	ldrb	r0, [r4, #22]
 8008214:	7567      	strb	r7, [r4, #21]
 8008216:	1b92      	subs	r2, r2, r6
 8008218:	1b9b      	subs	r3, r3, r6
 800821a:	f080 0001 	eor.w	r0, r0, #1
 800821e:	60a2      	str	r2, [r4, #8]
 8008220:	6123      	str	r3, [r4, #16]
 8008222:	b002      	add	sp, #8
 8008224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008228:	68a3      	ldr	r3, [r4, #8]
 800822a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800822e:	701a      	strb	r2, [r3, #0]
 8008230:	68a5      	ldr	r5, [r4, #8]
 8008232:	e7c9      	b.n	80081c8 <ucdr_serialize_uint32_t+0xa8>
 8008234:	9b01      	ldr	r3, [sp, #4]
 8008236:	6013      	str	r3, [r2, #0]
 8008238:	e797      	b.n	800816a <ucdr_serialize_uint32_t+0x4a>
 800823a:	4628      	mov	r0, r5
 800823c:	ad01      	add	r5, sp, #4
 800823e:	4632      	mov	r2, r6
 8008240:	4629      	mov	r1, r5
 8008242:	f008 f8e6 	bl	8010412 <memcpy>
 8008246:	68a0      	ldr	r0, [r4, #8]
 8008248:	4642      	mov	r2, r8
 800824a:	19a9      	adds	r1, r5, r6
 800824c:	f008 f8e1 	bl	8010412 <memcpy>
 8008250:	e7bd      	b.n	80081ce <ucdr_serialize_uint32_t+0xae>
 8008252:	bf00      	nop

08008254 <ucdr_serialize_endian_uint32_t>:
 8008254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008258:	b083      	sub	sp, #12
 800825a:	460d      	mov	r5, r1
 800825c:	2104      	movs	r1, #4
 800825e:	4604      	mov	r4, r0
 8008260:	9201      	str	r2, [sp, #4]
 8008262:	f000 fcf7 	bl	8008c54 <ucdr_buffer_alignment>
 8008266:	4601      	mov	r1, r0
 8008268:	4620      	mov	r0, r4
 800826a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800826e:	f000 fd35 	bl	8008cdc <ucdr_advance_buffer>
 8008272:	2104      	movs	r1, #4
 8008274:	4620      	mov	r0, r4
 8008276:	f000 fc8d 	bl	8008b94 <ucdr_check_buffer_available_for>
 800827a:	2800      	cmp	r0, #0
 800827c:	d137      	bne.n	80082ee <ucdr_serialize_endian_uint32_t+0x9a>
 800827e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008282:	42b7      	cmp	r7, r6
 8008284:	d92e      	bls.n	80082e4 <ucdr_serialize_endian_uint32_t+0x90>
 8008286:	6923      	ldr	r3, [r4, #16]
 8008288:	60a7      	str	r7, [r4, #8]
 800828a:	1bbf      	subs	r7, r7, r6
 800828c:	443b      	add	r3, r7
 800828e:	f1c7 0904 	rsb	r9, r7, #4
 8008292:	6123      	str	r3, [r4, #16]
 8008294:	4649      	mov	r1, r9
 8008296:	4620      	mov	r0, r4
 8008298:	f000 fc88 	bl	8008bac <ucdr_check_final_buffer_behavior>
 800829c:	2800      	cmp	r0, #0
 800829e:	d049      	beq.n	8008334 <ucdr_serialize_endian_uint32_t+0xe0>
 80082a0:	2d01      	cmp	r5, #1
 80082a2:	d05b      	beq.n	800835c <ucdr_serialize_endian_uint32_t+0x108>
 80082a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80082a8:	7033      	strb	r3, [r6, #0]
 80082aa:	2f01      	cmp	r7, #1
 80082ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80082b0:	7073      	strb	r3, [r6, #1]
 80082b2:	d04d      	beq.n	8008350 <ucdr_serialize_endian_uint32_t+0xfc>
 80082b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80082b8:	70b3      	strb	r3, [r6, #2]
 80082ba:	2f02      	cmp	r7, #2
 80082bc:	d04c      	beq.n	8008358 <ucdr_serialize_endian_uint32_t+0x104>
 80082be:	3603      	adds	r6, #3
 80082c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80082c4:	7033      	strb	r3, [r6, #0]
 80082c6:	6923      	ldr	r3, [r4, #16]
 80082c8:	68a2      	ldr	r2, [r4, #8]
 80082ca:	7da0      	ldrb	r0, [r4, #22]
 80082cc:	3304      	adds	r3, #4
 80082ce:	444a      	add	r2, r9
 80082d0:	1bdb      	subs	r3, r3, r7
 80082d2:	2104      	movs	r1, #4
 80082d4:	f080 0001 	eor.w	r0, r0, #1
 80082d8:	60a2      	str	r2, [r4, #8]
 80082da:	6123      	str	r3, [r4, #16]
 80082dc:	7561      	strb	r1, [r4, #21]
 80082de:	b003      	add	sp, #12
 80082e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082e4:	2104      	movs	r1, #4
 80082e6:	4620      	mov	r0, r4
 80082e8:	f000 fc60 	bl	8008bac <ucdr_check_final_buffer_behavior>
 80082ec:	b1c8      	cbz	r0, 8008322 <ucdr_serialize_endian_uint32_t+0xce>
 80082ee:	2d01      	cmp	r5, #1
 80082f0:	68a3      	ldr	r3, [r4, #8]
 80082f2:	d01c      	beq.n	800832e <ucdr_serialize_endian_uint32_t+0xda>
 80082f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80082f8:	701a      	strb	r2, [r3, #0]
 80082fa:	68a3      	ldr	r3, [r4, #8]
 80082fc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008300:	705a      	strb	r2, [r3, #1]
 8008302:	68a3      	ldr	r3, [r4, #8]
 8008304:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008308:	709a      	strb	r2, [r3, #2]
 800830a:	68a3      	ldr	r3, [r4, #8]
 800830c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008310:	70da      	strb	r2, [r3, #3]
 8008312:	68a2      	ldr	r2, [r4, #8]
 8008314:	6923      	ldr	r3, [r4, #16]
 8008316:	3204      	adds	r2, #4
 8008318:	3304      	adds	r3, #4
 800831a:	2104      	movs	r1, #4
 800831c:	60a2      	str	r2, [r4, #8]
 800831e:	6123      	str	r3, [r4, #16]
 8008320:	7561      	strb	r1, [r4, #21]
 8008322:	7da0      	ldrb	r0, [r4, #22]
 8008324:	f080 0001 	eor.w	r0, r0, #1
 8008328:	b003      	add	sp, #12
 800832a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800832e:	9a01      	ldr	r2, [sp, #4]
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	e7ee      	b.n	8008312 <ucdr_serialize_endian_uint32_t+0xbe>
 8008334:	68a2      	ldr	r2, [r4, #8]
 8008336:	6923      	ldr	r3, [r4, #16]
 8008338:	7da0      	ldrb	r0, [r4, #22]
 800833a:	f884 8015 	strb.w	r8, [r4, #21]
 800833e:	1bd2      	subs	r2, r2, r7
 8008340:	1bdb      	subs	r3, r3, r7
 8008342:	f080 0001 	eor.w	r0, r0, #1
 8008346:	60a2      	str	r2, [r4, #8]
 8008348:	6123      	str	r3, [r4, #16]
 800834a:	b003      	add	sp, #12
 800834c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008350:	68a3      	ldr	r3, [r4, #8]
 8008352:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008356:	701a      	strb	r2, [r3, #0]
 8008358:	68a6      	ldr	r6, [r4, #8]
 800835a:	e7b1      	b.n	80082c0 <ucdr_serialize_endian_uint32_t+0x6c>
 800835c:	ad01      	add	r5, sp, #4
 800835e:	463a      	mov	r2, r7
 8008360:	4629      	mov	r1, r5
 8008362:	4630      	mov	r0, r6
 8008364:	f008 f855 	bl	8010412 <memcpy>
 8008368:	68a0      	ldr	r0, [r4, #8]
 800836a:	464a      	mov	r2, r9
 800836c:	19e9      	adds	r1, r5, r7
 800836e:	f008 f850 	bl	8010412 <memcpy>
 8008372:	e7a8      	b.n	80082c6 <ucdr_serialize_endian_uint32_t+0x72>

08008374 <ucdr_deserialize_uint32_t>:
 8008374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008378:	460d      	mov	r5, r1
 800837a:	2104      	movs	r1, #4
 800837c:	4604      	mov	r4, r0
 800837e:	f000 fc69 	bl	8008c54 <ucdr_buffer_alignment>
 8008382:	4601      	mov	r1, r0
 8008384:	4620      	mov	r0, r4
 8008386:	f894 8015 	ldrb.w	r8, [r4, #21]
 800838a:	f000 fca7 	bl	8008cdc <ucdr_advance_buffer>
 800838e:	2104      	movs	r1, #4
 8008390:	4620      	mov	r0, r4
 8008392:	f000 fbff 	bl	8008b94 <ucdr_check_buffer_available_for>
 8008396:	b1d8      	cbz	r0, 80083d0 <ucdr_deserialize_uint32_t+0x5c>
 8008398:	7d22      	ldrb	r2, [r4, #20]
 800839a:	68a3      	ldr	r3, [r4, #8]
 800839c:	2a01      	cmp	r2, #1
 800839e:	d052      	beq.n	8008446 <ucdr_deserialize_uint32_t+0xd2>
 80083a0:	78db      	ldrb	r3, [r3, #3]
 80083a2:	702b      	strb	r3, [r5, #0]
 80083a4:	68a3      	ldr	r3, [r4, #8]
 80083a6:	789b      	ldrb	r3, [r3, #2]
 80083a8:	706b      	strb	r3, [r5, #1]
 80083aa:	68a3      	ldr	r3, [r4, #8]
 80083ac:	785b      	ldrb	r3, [r3, #1]
 80083ae:	70ab      	strb	r3, [r5, #2]
 80083b0:	68a3      	ldr	r3, [r4, #8]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	70eb      	strb	r3, [r5, #3]
 80083b6:	68a2      	ldr	r2, [r4, #8]
 80083b8:	6923      	ldr	r3, [r4, #16]
 80083ba:	3204      	adds	r2, #4
 80083bc:	3304      	adds	r3, #4
 80083be:	2104      	movs	r1, #4
 80083c0:	60a2      	str	r2, [r4, #8]
 80083c2:	6123      	str	r3, [r4, #16]
 80083c4:	7561      	strb	r1, [r4, #21]
 80083c6:	7da0      	ldrb	r0, [r4, #22]
 80083c8:	f080 0001 	eor.w	r0, r0, #1
 80083cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083d0:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80083d4:	42b7      	cmp	r7, r6
 80083d6:	d92a      	bls.n	800842e <ucdr_deserialize_uint32_t+0xba>
 80083d8:	6923      	ldr	r3, [r4, #16]
 80083da:	60a7      	str	r7, [r4, #8]
 80083dc:	1bbf      	subs	r7, r7, r6
 80083de:	443b      	add	r3, r7
 80083e0:	f1c7 0904 	rsb	r9, r7, #4
 80083e4:	6123      	str	r3, [r4, #16]
 80083e6:	4649      	mov	r1, r9
 80083e8:	4620      	mov	r0, r4
 80083ea:	f000 fbdf 	bl	8008bac <ucdr_check_final_buffer_behavior>
 80083ee:	b368      	cbz	r0, 800844c <ucdr_deserialize_uint32_t+0xd8>
 80083f0:	7d23      	ldrb	r3, [r4, #20]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d040      	beq.n	8008478 <ucdr_deserialize_uint32_t+0x104>
 80083f6:	78f3      	ldrb	r3, [r6, #3]
 80083f8:	702b      	strb	r3, [r5, #0]
 80083fa:	78b3      	ldrb	r3, [r6, #2]
 80083fc:	706b      	strb	r3, [r5, #1]
 80083fe:	2f01      	cmp	r7, #1
 8008400:	d031      	beq.n	8008466 <ucdr_deserialize_uint32_t+0xf2>
 8008402:	7873      	ldrb	r3, [r6, #1]
 8008404:	70ab      	strb	r3, [r5, #2]
 8008406:	2f02      	cmp	r7, #2
 8008408:	f105 0503 	add.w	r5, r5, #3
 800840c:	d02f      	beq.n	800846e <ucdr_deserialize_uint32_t+0xfa>
 800840e:	7833      	ldrb	r3, [r6, #0]
 8008410:	702b      	strb	r3, [r5, #0]
 8008412:	6923      	ldr	r3, [r4, #16]
 8008414:	68a2      	ldr	r2, [r4, #8]
 8008416:	7da0      	ldrb	r0, [r4, #22]
 8008418:	2104      	movs	r1, #4
 800841a:	3304      	adds	r3, #4
 800841c:	444a      	add	r2, r9
 800841e:	1bdb      	subs	r3, r3, r7
 8008420:	7561      	strb	r1, [r4, #21]
 8008422:	60a2      	str	r2, [r4, #8]
 8008424:	6123      	str	r3, [r4, #16]
 8008426:	f080 0001 	eor.w	r0, r0, #1
 800842a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800842e:	2104      	movs	r1, #4
 8008430:	4620      	mov	r0, r4
 8008432:	f000 fbbb 	bl	8008bac <ucdr_check_final_buffer_behavior>
 8008436:	2800      	cmp	r0, #0
 8008438:	d0c5      	beq.n	80083c6 <ucdr_deserialize_uint32_t+0x52>
 800843a:	7d23      	ldrb	r3, [r4, #20]
 800843c:	68a2      	ldr	r2, [r4, #8]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d017      	beq.n	8008472 <ucdr_deserialize_uint32_t+0xfe>
 8008442:	78d3      	ldrb	r3, [r2, #3]
 8008444:	e7ad      	b.n	80083a2 <ucdr_deserialize_uint32_t+0x2e>
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	602b      	str	r3, [r5, #0]
 800844a:	e7b4      	b.n	80083b6 <ucdr_deserialize_uint32_t+0x42>
 800844c:	68a2      	ldr	r2, [r4, #8]
 800844e:	6923      	ldr	r3, [r4, #16]
 8008450:	7da0      	ldrb	r0, [r4, #22]
 8008452:	f884 8015 	strb.w	r8, [r4, #21]
 8008456:	1bd2      	subs	r2, r2, r7
 8008458:	1bdb      	subs	r3, r3, r7
 800845a:	60a2      	str	r2, [r4, #8]
 800845c:	6123      	str	r3, [r4, #16]
 800845e:	f080 0001 	eor.w	r0, r0, #1
 8008462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008466:	68a3      	ldr	r3, [r4, #8]
 8008468:	785b      	ldrb	r3, [r3, #1]
 800846a:	70ab      	strb	r3, [r5, #2]
 800846c:	3503      	adds	r5, #3
 800846e:	68a6      	ldr	r6, [r4, #8]
 8008470:	e7cd      	b.n	800840e <ucdr_deserialize_uint32_t+0x9a>
 8008472:	6813      	ldr	r3, [r2, #0]
 8008474:	602b      	str	r3, [r5, #0]
 8008476:	e79e      	b.n	80083b6 <ucdr_deserialize_uint32_t+0x42>
 8008478:	4631      	mov	r1, r6
 800847a:	463a      	mov	r2, r7
 800847c:	4628      	mov	r0, r5
 800847e:	f007 ffc8 	bl	8010412 <memcpy>
 8008482:	68a1      	ldr	r1, [r4, #8]
 8008484:	464a      	mov	r2, r9
 8008486:	19e8      	adds	r0, r5, r7
 8008488:	f007 ffc3 	bl	8010412 <memcpy>
 800848c:	e7c1      	b.n	8008412 <ucdr_deserialize_uint32_t+0x9e>
 800848e:	bf00      	nop

08008490 <ucdr_deserialize_endian_uint32_t>:
 8008490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008494:	460e      	mov	r6, r1
 8008496:	2104      	movs	r1, #4
 8008498:	4604      	mov	r4, r0
 800849a:	4615      	mov	r5, r2
 800849c:	f000 fbda 	bl	8008c54 <ucdr_buffer_alignment>
 80084a0:	4601      	mov	r1, r0
 80084a2:	4620      	mov	r0, r4
 80084a4:	f894 9015 	ldrb.w	r9, [r4, #21]
 80084a8:	f000 fc18 	bl	8008cdc <ucdr_advance_buffer>
 80084ac:	2104      	movs	r1, #4
 80084ae:	4620      	mov	r0, r4
 80084b0:	f000 fb70 	bl	8008b94 <ucdr_check_buffer_available_for>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d137      	bne.n	8008528 <ucdr_deserialize_endian_uint32_t+0x98>
 80084b8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80084bc:	42bb      	cmp	r3, r7
 80084be:	d92e      	bls.n	800851e <ucdr_deserialize_endian_uint32_t+0x8e>
 80084c0:	eba3 0807 	sub.w	r8, r3, r7
 80084c4:	60a3      	str	r3, [r4, #8]
 80084c6:	6923      	ldr	r3, [r4, #16]
 80084c8:	f1c8 0a04 	rsb	sl, r8, #4
 80084cc:	4443      	add	r3, r8
 80084ce:	6123      	str	r3, [r4, #16]
 80084d0:	4651      	mov	r1, sl
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 fb6a 	bl	8008bac <ucdr_check_final_buffer_behavior>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d043      	beq.n	8008564 <ucdr_deserialize_endian_uint32_t+0xd4>
 80084dc:	2e01      	cmp	r6, #1
 80084de:	d056      	beq.n	800858e <ucdr_deserialize_endian_uint32_t+0xfe>
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	702b      	strb	r3, [r5, #0]
 80084e4:	78bb      	ldrb	r3, [r7, #2]
 80084e6:	706b      	strb	r3, [r5, #1]
 80084e8:	f1b8 0f01 	cmp.w	r8, #1
 80084ec:	d049      	beq.n	8008582 <ucdr_deserialize_endian_uint32_t+0xf2>
 80084ee:	787b      	ldrb	r3, [r7, #1]
 80084f0:	70ab      	strb	r3, [r5, #2]
 80084f2:	f1b8 0f02 	cmp.w	r8, #2
 80084f6:	f105 0503 	add.w	r5, r5, #3
 80084fa:	d046      	beq.n	800858a <ucdr_deserialize_endian_uint32_t+0xfa>
 80084fc:	783b      	ldrb	r3, [r7, #0]
 80084fe:	702b      	strb	r3, [r5, #0]
 8008500:	6923      	ldr	r3, [r4, #16]
 8008502:	68a2      	ldr	r2, [r4, #8]
 8008504:	7da0      	ldrb	r0, [r4, #22]
 8008506:	2104      	movs	r1, #4
 8008508:	3304      	adds	r3, #4
 800850a:	4452      	add	r2, sl
 800850c:	eba3 0308 	sub.w	r3, r3, r8
 8008510:	7561      	strb	r1, [r4, #21]
 8008512:	60a2      	str	r2, [r4, #8]
 8008514:	6123      	str	r3, [r4, #16]
 8008516:	f080 0001 	eor.w	r0, r0, #1
 800851a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800851e:	2104      	movs	r1, #4
 8008520:	4620      	mov	r0, r4
 8008522:	f000 fb43 	bl	8008bac <ucdr_check_final_buffer_behavior>
 8008526:	b1a8      	cbz	r0, 8008554 <ucdr_deserialize_endian_uint32_t+0xc4>
 8008528:	2e01      	cmp	r6, #1
 800852a:	68a3      	ldr	r3, [r4, #8]
 800852c:	d017      	beq.n	800855e <ucdr_deserialize_endian_uint32_t+0xce>
 800852e:	78db      	ldrb	r3, [r3, #3]
 8008530:	702b      	strb	r3, [r5, #0]
 8008532:	68a3      	ldr	r3, [r4, #8]
 8008534:	789b      	ldrb	r3, [r3, #2]
 8008536:	706b      	strb	r3, [r5, #1]
 8008538:	68a3      	ldr	r3, [r4, #8]
 800853a:	785b      	ldrb	r3, [r3, #1]
 800853c:	70ab      	strb	r3, [r5, #2]
 800853e:	68a3      	ldr	r3, [r4, #8]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	70eb      	strb	r3, [r5, #3]
 8008544:	68a2      	ldr	r2, [r4, #8]
 8008546:	6923      	ldr	r3, [r4, #16]
 8008548:	3204      	adds	r2, #4
 800854a:	3304      	adds	r3, #4
 800854c:	2104      	movs	r1, #4
 800854e:	60a2      	str	r2, [r4, #8]
 8008550:	6123      	str	r3, [r4, #16]
 8008552:	7561      	strb	r1, [r4, #21]
 8008554:	7da0      	ldrb	r0, [r4, #22]
 8008556:	f080 0001 	eor.w	r0, r0, #1
 800855a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	602b      	str	r3, [r5, #0]
 8008562:	e7ef      	b.n	8008544 <ucdr_deserialize_endian_uint32_t+0xb4>
 8008564:	68a2      	ldr	r2, [r4, #8]
 8008566:	6923      	ldr	r3, [r4, #16]
 8008568:	7da0      	ldrb	r0, [r4, #22]
 800856a:	f884 9015 	strb.w	r9, [r4, #21]
 800856e:	eba2 0208 	sub.w	r2, r2, r8
 8008572:	eba3 0308 	sub.w	r3, r3, r8
 8008576:	60a2      	str	r2, [r4, #8]
 8008578:	6123      	str	r3, [r4, #16]
 800857a:	f080 0001 	eor.w	r0, r0, #1
 800857e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008582:	68a3      	ldr	r3, [r4, #8]
 8008584:	785b      	ldrb	r3, [r3, #1]
 8008586:	70ab      	strb	r3, [r5, #2]
 8008588:	3503      	adds	r5, #3
 800858a:	68a7      	ldr	r7, [r4, #8]
 800858c:	e7b6      	b.n	80084fc <ucdr_deserialize_endian_uint32_t+0x6c>
 800858e:	4639      	mov	r1, r7
 8008590:	4642      	mov	r2, r8
 8008592:	4628      	mov	r0, r5
 8008594:	f007 ff3d 	bl	8010412 <memcpy>
 8008598:	68a1      	ldr	r1, [r4, #8]
 800859a:	4652      	mov	r2, sl
 800859c:	eb05 0008 	add.w	r0, r5, r8
 80085a0:	f007 ff37 	bl	8010412 <memcpy>
 80085a4:	e7ac      	b.n	8008500 <ucdr_deserialize_endian_uint32_t+0x70>
 80085a6:	bf00      	nop

080085a8 <ucdr_serialize_uint64_t>:
 80085a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ac:	2108      	movs	r1, #8
 80085ae:	b082      	sub	sp, #8
 80085b0:	4604      	mov	r4, r0
 80085b2:	e9cd 2300 	strd	r2, r3, [sp]
 80085b6:	f000 fb4d 	bl	8008c54 <ucdr_buffer_alignment>
 80085ba:	4601      	mov	r1, r0
 80085bc:	4620      	mov	r0, r4
 80085be:	7d67      	ldrb	r7, [r4, #21]
 80085c0:	f000 fb8c 	bl	8008cdc <ucdr_advance_buffer>
 80085c4:	2108      	movs	r1, #8
 80085c6:	4620      	mov	r0, r4
 80085c8:	f000 fae4 	bl	8008b94 <ucdr_check_buffer_available_for>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d14d      	bne.n	800866c <ucdr_serialize_uint64_t+0xc4>
 80085d0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80085d4:	42ab      	cmp	r3, r5
 80085d6:	d944      	bls.n	8008662 <ucdr_serialize_uint64_t+0xba>
 80085d8:	1b5e      	subs	r6, r3, r5
 80085da:	60a3      	str	r3, [r4, #8]
 80085dc:	6923      	ldr	r3, [r4, #16]
 80085de:	f1c6 0808 	rsb	r8, r6, #8
 80085e2:	4433      	add	r3, r6
 80085e4:	6123      	str	r3, [r4, #16]
 80085e6:	4641      	mov	r1, r8
 80085e8:	4620      	mov	r0, r4
 80085ea:	f000 fadf 	bl	8008bac <ucdr_check_final_buffer_behavior>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d072      	beq.n	80086d8 <ucdr_serialize_uint64_t+0x130>
 80085f2:	7d23      	ldrb	r3, [r4, #20]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	f000 8092 	beq.w	800871e <ucdr_serialize_uint64_t+0x176>
 80085fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80085fe:	702b      	strb	r3, [r5, #0]
 8008600:	2e01      	cmp	r6, #1
 8008602:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008606:	706b      	strb	r3, [r5, #1]
 8008608:	d073      	beq.n	80086f2 <ucdr_serialize_uint64_t+0x14a>
 800860a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800860e:	70ab      	strb	r3, [r5, #2]
 8008610:	2e02      	cmp	r6, #2
 8008612:	d072      	beq.n	80086fa <ucdr_serialize_uint64_t+0x152>
 8008614:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008618:	70eb      	strb	r3, [r5, #3]
 800861a:	2e03      	cmp	r6, #3
 800861c:	d071      	beq.n	8008702 <ucdr_serialize_uint64_t+0x15a>
 800861e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008622:	712b      	strb	r3, [r5, #4]
 8008624:	2e04      	cmp	r6, #4
 8008626:	d070      	beq.n	800870a <ucdr_serialize_uint64_t+0x162>
 8008628:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800862c:	716b      	strb	r3, [r5, #5]
 800862e:	2e05      	cmp	r6, #5
 8008630:	d06f      	beq.n	8008712 <ucdr_serialize_uint64_t+0x16a>
 8008632:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8008636:	71ab      	strb	r3, [r5, #6]
 8008638:	2e06      	cmp	r6, #6
 800863a:	d06e      	beq.n	800871a <ucdr_serialize_uint64_t+0x172>
 800863c:	3507      	adds	r5, #7
 800863e:	f89d 3000 	ldrb.w	r3, [sp]
 8008642:	702b      	strb	r3, [r5, #0]
 8008644:	6923      	ldr	r3, [r4, #16]
 8008646:	68a2      	ldr	r2, [r4, #8]
 8008648:	7da0      	ldrb	r0, [r4, #22]
 800864a:	3308      	adds	r3, #8
 800864c:	4442      	add	r2, r8
 800864e:	1b9b      	subs	r3, r3, r6
 8008650:	2108      	movs	r1, #8
 8008652:	f080 0001 	eor.w	r0, r0, #1
 8008656:	60a2      	str	r2, [r4, #8]
 8008658:	6123      	str	r3, [r4, #16]
 800865a:	7561      	strb	r1, [r4, #21]
 800865c:	b002      	add	sp, #8
 800865e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008662:	2108      	movs	r1, #8
 8008664:	4620      	mov	r0, r4
 8008666:	f000 faa1 	bl	8008bac <ucdr_check_final_buffer_behavior>
 800866a:	b350      	cbz	r0, 80086c2 <ucdr_serialize_uint64_t+0x11a>
 800866c:	7d22      	ldrb	r2, [r4, #20]
 800866e:	68a3      	ldr	r3, [r4, #8]
 8008670:	2a01      	cmp	r2, #1
 8008672:	d02c      	beq.n	80086ce <ucdr_serialize_uint64_t+0x126>
 8008674:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008678:	701a      	strb	r2, [r3, #0]
 800867a:	68a3      	ldr	r3, [r4, #8]
 800867c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008680:	705a      	strb	r2, [r3, #1]
 8008682:	68a3      	ldr	r3, [r4, #8]
 8008684:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008688:	709a      	strb	r2, [r3, #2]
 800868a:	68a3      	ldr	r3, [r4, #8]
 800868c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008690:	70da      	strb	r2, [r3, #3]
 8008692:	68a3      	ldr	r3, [r4, #8]
 8008694:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008698:	711a      	strb	r2, [r3, #4]
 800869a:	68a3      	ldr	r3, [r4, #8]
 800869c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80086a0:	715a      	strb	r2, [r3, #5]
 80086a2:	68a3      	ldr	r3, [r4, #8]
 80086a4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80086a8:	719a      	strb	r2, [r3, #6]
 80086aa:	68a3      	ldr	r3, [r4, #8]
 80086ac:	f89d 2000 	ldrb.w	r2, [sp]
 80086b0:	71da      	strb	r2, [r3, #7]
 80086b2:	68a2      	ldr	r2, [r4, #8]
 80086b4:	6923      	ldr	r3, [r4, #16]
 80086b6:	3208      	adds	r2, #8
 80086b8:	3308      	adds	r3, #8
 80086ba:	2108      	movs	r1, #8
 80086bc:	60a2      	str	r2, [r4, #8]
 80086be:	6123      	str	r3, [r4, #16]
 80086c0:	7561      	strb	r1, [r4, #21]
 80086c2:	7da0      	ldrb	r0, [r4, #22]
 80086c4:	f080 0001 	eor.w	r0, r0, #1
 80086c8:	b002      	add	sp, #8
 80086ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086d2:	6019      	str	r1, [r3, #0]
 80086d4:	605a      	str	r2, [r3, #4]
 80086d6:	e7ec      	b.n	80086b2 <ucdr_serialize_uint64_t+0x10a>
 80086d8:	68a2      	ldr	r2, [r4, #8]
 80086da:	6923      	ldr	r3, [r4, #16]
 80086dc:	7da0      	ldrb	r0, [r4, #22]
 80086de:	7567      	strb	r7, [r4, #21]
 80086e0:	1b92      	subs	r2, r2, r6
 80086e2:	1b9b      	subs	r3, r3, r6
 80086e4:	f080 0001 	eor.w	r0, r0, #1
 80086e8:	60a2      	str	r2, [r4, #8]
 80086ea:	6123      	str	r3, [r4, #16]
 80086ec:	b002      	add	sp, #8
 80086ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f2:	68a3      	ldr	r3, [r4, #8]
 80086f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80086f8:	701a      	strb	r2, [r3, #0]
 80086fa:	68a3      	ldr	r3, [r4, #8]
 80086fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008700:	701a      	strb	r2, [r3, #0]
 8008702:	68a3      	ldr	r3, [r4, #8]
 8008704:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008708:	701a      	strb	r2, [r3, #0]
 800870a:	68a3      	ldr	r3, [r4, #8]
 800870c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008710:	701a      	strb	r2, [r3, #0]
 8008712:	68a3      	ldr	r3, [r4, #8]
 8008714:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008718:	701a      	strb	r2, [r3, #0]
 800871a:	68a5      	ldr	r5, [r4, #8]
 800871c:	e78f      	b.n	800863e <ucdr_serialize_uint64_t+0x96>
 800871e:	4628      	mov	r0, r5
 8008720:	466d      	mov	r5, sp
 8008722:	4632      	mov	r2, r6
 8008724:	4629      	mov	r1, r5
 8008726:	f007 fe74 	bl	8010412 <memcpy>
 800872a:	68a0      	ldr	r0, [r4, #8]
 800872c:	4642      	mov	r2, r8
 800872e:	19a9      	adds	r1, r5, r6
 8008730:	f007 fe6f 	bl	8010412 <memcpy>
 8008734:	e786      	b.n	8008644 <ucdr_serialize_uint64_t+0x9c>
 8008736:	bf00      	nop

08008738 <ucdr_serialize_int16_t>:
 8008738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800873c:	b082      	sub	sp, #8
 800873e:	460b      	mov	r3, r1
 8008740:	2102      	movs	r1, #2
 8008742:	4604      	mov	r4, r0
 8008744:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008748:	f000 fa84 	bl	8008c54 <ucdr_buffer_alignment>
 800874c:	4601      	mov	r1, r0
 800874e:	4620      	mov	r0, r4
 8008750:	7d67      	ldrb	r7, [r4, #21]
 8008752:	f000 fac3 	bl	8008cdc <ucdr_advance_buffer>
 8008756:	2102      	movs	r1, #2
 8008758:	4620      	mov	r0, r4
 800875a:	f000 fa1b 	bl	8008b94 <ucdr_check_buffer_available_for>
 800875e:	b1c0      	cbz	r0, 8008792 <ucdr_serialize_int16_t+0x5a>
 8008760:	7d22      	ldrb	r2, [r4, #20]
 8008762:	68a3      	ldr	r3, [r4, #8]
 8008764:	2a01      	cmp	r2, #1
 8008766:	d04e      	beq.n	8008806 <ucdr_serialize_int16_t+0xce>
 8008768:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	68a3      	ldr	r3, [r4, #8]
 8008770:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008774:	705a      	strb	r2, [r3, #1]
 8008776:	68a2      	ldr	r2, [r4, #8]
 8008778:	6923      	ldr	r3, [r4, #16]
 800877a:	3202      	adds	r2, #2
 800877c:	3302      	adds	r3, #2
 800877e:	2102      	movs	r1, #2
 8008780:	60a2      	str	r2, [r4, #8]
 8008782:	6123      	str	r3, [r4, #16]
 8008784:	7561      	strb	r1, [r4, #21]
 8008786:	7da0      	ldrb	r0, [r4, #22]
 8008788:	f080 0001 	eor.w	r0, r0, #1
 800878c:	b002      	add	sp, #8
 800878e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008792:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008796:	42ab      	cmp	r3, r5
 8008798:	d923      	bls.n	80087e2 <ucdr_serialize_int16_t+0xaa>
 800879a:	1b5e      	subs	r6, r3, r5
 800879c:	60a3      	str	r3, [r4, #8]
 800879e:	6923      	ldr	r3, [r4, #16]
 80087a0:	f1c6 0802 	rsb	r8, r6, #2
 80087a4:	4433      	add	r3, r6
 80087a6:	6123      	str	r3, [r4, #16]
 80087a8:	4641      	mov	r1, r8
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 f9fe 	bl	8008bac <ucdr_check_final_buffer_behavior>
 80087b0:	b368      	cbz	r0, 800880e <ucdr_serialize_int16_t+0xd6>
 80087b2:	7d23      	ldrb	r3, [r4, #20]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d03b      	beq.n	8008830 <ucdr_serialize_int16_t+0xf8>
 80087b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80087bc:	702b      	strb	r3, [r5, #0]
 80087be:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80087c2:	706b      	strb	r3, [r5, #1]
 80087c4:	6923      	ldr	r3, [r4, #16]
 80087c6:	68a2      	ldr	r2, [r4, #8]
 80087c8:	7da0      	ldrb	r0, [r4, #22]
 80087ca:	3302      	adds	r3, #2
 80087cc:	4442      	add	r2, r8
 80087ce:	1b9b      	subs	r3, r3, r6
 80087d0:	2102      	movs	r1, #2
 80087d2:	f080 0001 	eor.w	r0, r0, #1
 80087d6:	60a2      	str	r2, [r4, #8]
 80087d8:	6123      	str	r3, [r4, #16]
 80087da:	7561      	strb	r1, [r4, #21]
 80087dc:	b002      	add	sp, #8
 80087de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e2:	2102      	movs	r1, #2
 80087e4:	4620      	mov	r0, r4
 80087e6:	f000 f9e1 	bl	8008bac <ucdr_check_final_buffer_behavior>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d0cb      	beq.n	8008786 <ucdr_serialize_int16_t+0x4e>
 80087ee:	7d23      	ldrb	r3, [r4, #20]
 80087f0:	68a2      	ldr	r2, [r4, #8]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d018      	beq.n	8008828 <ucdr_serialize_int16_t+0xf0>
 80087f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80087fa:	7013      	strb	r3, [r2, #0]
 80087fc:	68a3      	ldr	r3, [r4, #8]
 80087fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008802:	705a      	strb	r2, [r3, #1]
 8008804:	e7b7      	b.n	8008776 <ucdr_serialize_int16_t+0x3e>
 8008806:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800880a:	801a      	strh	r2, [r3, #0]
 800880c:	e7b3      	b.n	8008776 <ucdr_serialize_int16_t+0x3e>
 800880e:	68a2      	ldr	r2, [r4, #8]
 8008810:	6923      	ldr	r3, [r4, #16]
 8008812:	7da0      	ldrb	r0, [r4, #22]
 8008814:	7567      	strb	r7, [r4, #21]
 8008816:	1b92      	subs	r2, r2, r6
 8008818:	1b9b      	subs	r3, r3, r6
 800881a:	f080 0001 	eor.w	r0, r0, #1
 800881e:	60a2      	str	r2, [r4, #8]
 8008820:	6123      	str	r3, [r4, #16]
 8008822:	b002      	add	sp, #8
 8008824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008828:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800882c:	8013      	strh	r3, [r2, #0]
 800882e:	e7a2      	b.n	8008776 <ucdr_serialize_int16_t+0x3e>
 8008830:	4628      	mov	r0, r5
 8008832:	f10d 0506 	add.w	r5, sp, #6
 8008836:	4632      	mov	r2, r6
 8008838:	4629      	mov	r1, r5
 800883a:	f007 fdea 	bl	8010412 <memcpy>
 800883e:	68a0      	ldr	r0, [r4, #8]
 8008840:	4642      	mov	r2, r8
 8008842:	19a9      	adds	r1, r5, r6
 8008844:	f007 fde5 	bl	8010412 <memcpy>
 8008848:	e7bc      	b.n	80087c4 <ucdr_serialize_int16_t+0x8c>
 800884a:	bf00      	nop

0800884c <ucdr_deserialize_int16_t>:
 800884c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008850:	460d      	mov	r5, r1
 8008852:	2102      	movs	r1, #2
 8008854:	4604      	mov	r4, r0
 8008856:	f000 f9fd 	bl	8008c54 <ucdr_buffer_alignment>
 800885a:	4601      	mov	r1, r0
 800885c:	4620      	mov	r0, r4
 800885e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008862:	f000 fa3b 	bl	8008cdc <ucdr_advance_buffer>
 8008866:	2102      	movs	r1, #2
 8008868:	4620      	mov	r0, r4
 800886a:	f000 f993 	bl	8008b94 <ucdr_check_buffer_available_for>
 800886e:	b1a8      	cbz	r0, 800889c <ucdr_deserialize_int16_t+0x50>
 8008870:	7d22      	ldrb	r2, [r4, #20]
 8008872:	68a3      	ldr	r3, [r4, #8]
 8008874:	2a01      	cmp	r2, #1
 8008876:	d046      	beq.n	8008906 <ucdr_deserialize_int16_t+0xba>
 8008878:	785b      	ldrb	r3, [r3, #1]
 800887a:	702b      	strb	r3, [r5, #0]
 800887c:	68a3      	ldr	r3, [r4, #8]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	706b      	strb	r3, [r5, #1]
 8008882:	68a2      	ldr	r2, [r4, #8]
 8008884:	6923      	ldr	r3, [r4, #16]
 8008886:	3202      	adds	r2, #2
 8008888:	3302      	adds	r3, #2
 800888a:	2102      	movs	r1, #2
 800888c:	60a2      	str	r2, [r4, #8]
 800888e:	6123      	str	r3, [r4, #16]
 8008890:	7561      	strb	r1, [r4, #21]
 8008892:	7da0      	ldrb	r0, [r4, #22]
 8008894:	f080 0001 	eor.w	r0, r0, #1
 8008898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800889c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80088a0:	42be      	cmp	r6, r7
 80088a2:	d920      	bls.n	80088e6 <ucdr_deserialize_int16_t+0x9a>
 80088a4:	6923      	ldr	r3, [r4, #16]
 80088a6:	60a6      	str	r6, [r4, #8]
 80088a8:	1bf6      	subs	r6, r6, r7
 80088aa:	4433      	add	r3, r6
 80088ac:	f1c6 0902 	rsb	r9, r6, #2
 80088b0:	6123      	str	r3, [r4, #16]
 80088b2:	4649      	mov	r1, r9
 80088b4:	4620      	mov	r0, r4
 80088b6:	f000 f979 	bl	8008bac <ucdr_check_final_buffer_behavior>
 80088ba:	b338      	cbz	r0, 800890c <ucdr_deserialize_int16_t+0xc0>
 80088bc:	7d23      	ldrb	r3, [r4, #20]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d034      	beq.n	800892c <ucdr_deserialize_int16_t+0xe0>
 80088c2:	787b      	ldrb	r3, [r7, #1]
 80088c4:	702b      	strb	r3, [r5, #0]
 80088c6:	783b      	ldrb	r3, [r7, #0]
 80088c8:	706b      	strb	r3, [r5, #1]
 80088ca:	6923      	ldr	r3, [r4, #16]
 80088cc:	68a2      	ldr	r2, [r4, #8]
 80088ce:	7da0      	ldrb	r0, [r4, #22]
 80088d0:	2102      	movs	r1, #2
 80088d2:	3302      	adds	r3, #2
 80088d4:	444a      	add	r2, r9
 80088d6:	1b9b      	subs	r3, r3, r6
 80088d8:	7561      	strb	r1, [r4, #21]
 80088da:	60a2      	str	r2, [r4, #8]
 80088dc:	6123      	str	r3, [r4, #16]
 80088de:	f080 0001 	eor.w	r0, r0, #1
 80088e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088e6:	2102      	movs	r1, #2
 80088e8:	4620      	mov	r0, r4
 80088ea:	f000 f95f 	bl	8008bac <ucdr_check_final_buffer_behavior>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d0cf      	beq.n	8008892 <ucdr_deserialize_int16_t+0x46>
 80088f2:	7d23      	ldrb	r3, [r4, #20]
 80088f4:	68a2      	ldr	r2, [r4, #8]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d015      	beq.n	8008926 <ucdr_deserialize_int16_t+0xda>
 80088fa:	7853      	ldrb	r3, [r2, #1]
 80088fc:	702b      	strb	r3, [r5, #0]
 80088fe:	68a3      	ldr	r3, [r4, #8]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	706b      	strb	r3, [r5, #1]
 8008904:	e7bd      	b.n	8008882 <ucdr_deserialize_int16_t+0x36>
 8008906:	881b      	ldrh	r3, [r3, #0]
 8008908:	802b      	strh	r3, [r5, #0]
 800890a:	e7ba      	b.n	8008882 <ucdr_deserialize_int16_t+0x36>
 800890c:	68a2      	ldr	r2, [r4, #8]
 800890e:	6923      	ldr	r3, [r4, #16]
 8008910:	7da0      	ldrb	r0, [r4, #22]
 8008912:	f884 8015 	strb.w	r8, [r4, #21]
 8008916:	1b92      	subs	r2, r2, r6
 8008918:	1b9b      	subs	r3, r3, r6
 800891a:	60a2      	str	r2, [r4, #8]
 800891c:	6123      	str	r3, [r4, #16]
 800891e:	f080 0001 	eor.w	r0, r0, #1
 8008922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008926:	8813      	ldrh	r3, [r2, #0]
 8008928:	802b      	strh	r3, [r5, #0]
 800892a:	e7aa      	b.n	8008882 <ucdr_deserialize_int16_t+0x36>
 800892c:	4639      	mov	r1, r7
 800892e:	4632      	mov	r2, r6
 8008930:	4628      	mov	r0, r5
 8008932:	f007 fd6e 	bl	8010412 <memcpy>
 8008936:	68a1      	ldr	r1, [r4, #8]
 8008938:	464a      	mov	r2, r9
 800893a:	19a8      	adds	r0, r5, r6
 800893c:	f007 fd69 	bl	8010412 <memcpy>
 8008940:	e7c3      	b.n	80088ca <ucdr_deserialize_int16_t+0x7e>
 8008942:	bf00      	nop

08008944 <ucdr_serialize_int32_t>:
 8008944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008948:	b082      	sub	sp, #8
 800894a:	4604      	mov	r4, r0
 800894c:	9101      	str	r1, [sp, #4]
 800894e:	2104      	movs	r1, #4
 8008950:	f000 f980 	bl	8008c54 <ucdr_buffer_alignment>
 8008954:	4601      	mov	r1, r0
 8008956:	4620      	mov	r0, r4
 8008958:	7d67      	ldrb	r7, [r4, #21]
 800895a:	f000 f9bf 	bl	8008cdc <ucdr_advance_buffer>
 800895e:	2104      	movs	r1, #4
 8008960:	4620      	mov	r0, r4
 8008962:	f000 f917 	bl	8008b94 <ucdr_check_buffer_available_for>
 8008966:	b300      	cbz	r0, 80089aa <ucdr_serialize_int32_t+0x66>
 8008968:	7d22      	ldrb	r2, [r4, #20]
 800896a:	68a3      	ldr	r3, [r4, #8]
 800896c:	2a01      	cmp	r2, #1
 800896e:	d05d      	beq.n	8008a2c <ucdr_serialize_int32_t+0xe8>
 8008970:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008974:	701a      	strb	r2, [r3, #0]
 8008976:	68a3      	ldr	r3, [r4, #8]
 8008978:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800897c:	705a      	strb	r2, [r3, #1]
 800897e:	68a3      	ldr	r3, [r4, #8]
 8008980:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008984:	709a      	strb	r2, [r3, #2]
 8008986:	68a3      	ldr	r3, [r4, #8]
 8008988:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800898c:	70da      	strb	r2, [r3, #3]
 800898e:	68a2      	ldr	r2, [r4, #8]
 8008990:	6923      	ldr	r3, [r4, #16]
 8008992:	3204      	adds	r2, #4
 8008994:	3304      	adds	r3, #4
 8008996:	2104      	movs	r1, #4
 8008998:	60a2      	str	r2, [r4, #8]
 800899a:	6123      	str	r3, [r4, #16]
 800899c:	7561      	strb	r1, [r4, #21]
 800899e:	7da0      	ldrb	r0, [r4, #22]
 80089a0:	f080 0001 	eor.w	r0, r0, #1
 80089a4:	b002      	add	sp, #8
 80089a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089aa:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80089ae:	42ab      	cmp	r3, r5
 80089b0:	d92e      	bls.n	8008a10 <ucdr_serialize_int32_t+0xcc>
 80089b2:	1b5e      	subs	r6, r3, r5
 80089b4:	60a3      	str	r3, [r4, #8]
 80089b6:	6923      	ldr	r3, [r4, #16]
 80089b8:	f1c6 0804 	rsb	r8, r6, #4
 80089bc:	4433      	add	r3, r6
 80089be:	6123      	str	r3, [r4, #16]
 80089c0:	4641      	mov	r1, r8
 80089c2:	4620      	mov	r0, r4
 80089c4:	f000 f8f2 	bl	8008bac <ucdr_check_final_buffer_behavior>
 80089c8:	b398      	cbz	r0, 8008a32 <ucdr_serialize_int32_t+0xee>
 80089ca:	7d23      	ldrb	r3, [r4, #20]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d046      	beq.n	8008a5e <ucdr_serialize_int32_t+0x11a>
 80089d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80089d4:	702b      	strb	r3, [r5, #0]
 80089d6:	2e01      	cmp	r6, #1
 80089d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80089dc:	706b      	strb	r3, [r5, #1]
 80089de:	d035      	beq.n	8008a4c <ucdr_serialize_int32_t+0x108>
 80089e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80089e4:	70ab      	strb	r3, [r5, #2]
 80089e6:	2e02      	cmp	r6, #2
 80089e8:	d034      	beq.n	8008a54 <ucdr_serialize_int32_t+0x110>
 80089ea:	3503      	adds	r5, #3
 80089ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80089f0:	702b      	strb	r3, [r5, #0]
 80089f2:	6923      	ldr	r3, [r4, #16]
 80089f4:	68a2      	ldr	r2, [r4, #8]
 80089f6:	7da0      	ldrb	r0, [r4, #22]
 80089f8:	3304      	adds	r3, #4
 80089fa:	4442      	add	r2, r8
 80089fc:	1b9b      	subs	r3, r3, r6
 80089fe:	2104      	movs	r1, #4
 8008a00:	f080 0001 	eor.w	r0, r0, #1
 8008a04:	60a2      	str	r2, [r4, #8]
 8008a06:	6123      	str	r3, [r4, #16]
 8008a08:	7561      	strb	r1, [r4, #21]
 8008a0a:	b002      	add	sp, #8
 8008a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a10:	2104      	movs	r1, #4
 8008a12:	4620      	mov	r0, r4
 8008a14:	f000 f8ca 	bl	8008bac <ucdr_check_final_buffer_behavior>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d0c0      	beq.n	800899e <ucdr_serialize_int32_t+0x5a>
 8008a1c:	7d23      	ldrb	r3, [r4, #20]
 8008a1e:	68a2      	ldr	r2, [r4, #8]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d019      	beq.n	8008a58 <ucdr_serialize_int32_t+0x114>
 8008a24:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008a28:	7013      	strb	r3, [r2, #0]
 8008a2a:	e7a4      	b.n	8008976 <ucdr_serialize_int32_t+0x32>
 8008a2c:	9a01      	ldr	r2, [sp, #4]
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	e7ad      	b.n	800898e <ucdr_serialize_int32_t+0x4a>
 8008a32:	68a2      	ldr	r2, [r4, #8]
 8008a34:	6923      	ldr	r3, [r4, #16]
 8008a36:	7da0      	ldrb	r0, [r4, #22]
 8008a38:	7567      	strb	r7, [r4, #21]
 8008a3a:	1b92      	subs	r2, r2, r6
 8008a3c:	1b9b      	subs	r3, r3, r6
 8008a3e:	f080 0001 	eor.w	r0, r0, #1
 8008a42:	60a2      	str	r2, [r4, #8]
 8008a44:	6123      	str	r3, [r4, #16]
 8008a46:	b002      	add	sp, #8
 8008a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a4c:	68a3      	ldr	r3, [r4, #8]
 8008a4e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008a52:	701a      	strb	r2, [r3, #0]
 8008a54:	68a5      	ldr	r5, [r4, #8]
 8008a56:	e7c9      	b.n	80089ec <ucdr_serialize_int32_t+0xa8>
 8008a58:	9b01      	ldr	r3, [sp, #4]
 8008a5a:	6013      	str	r3, [r2, #0]
 8008a5c:	e797      	b.n	800898e <ucdr_serialize_int32_t+0x4a>
 8008a5e:	4628      	mov	r0, r5
 8008a60:	ad01      	add	r5, sp, #4
 8008a62:	4632      	mov	r2, r6
 8008a64:	4629      	mov	r1, r5
 8008a66:	f007 fcd4 	bl	8010412 <memcpy>
 8008a6a:	68a0      	ldr	r0, [r4, #8]
 8008a6c:	4642      	mov	r2, r8
 8008a6e:	19a9      	adds	r1, r5, r6
 8008a70:	f007 fccf 	bl	8010412 <memcpy>
 8008a74:	e7bd      	b.n	80089f2 <ucdr_serialize_int32_t+0xae>
 8008a76:	bf00      	nop

08008a78 <ucdr_deserialize_int32_t>:
 8008a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a7c:	460d      	mov	r5, r1
 8008a7e:	2104      	movs	r1, #4
 8008a80:	4604      	mov	r4, r0
 8008a82:	f000 f8e7 	bl	8008c54 <ucdr_buffer_alignment>
 8008a86:	4601      	mov	r1, r0
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008a8e:	f000 f925 	bl	8008cdc <ucdr_advance_buffer>
 8008a92:	2104      	movs	r1, #4
 8008a94:	4620      	mov	r0, r4
 8008a96:	f000 f87d 	bl	8008b94 <ucdr_check_buffer_available_for>
 8008a9a:	b1d8      	cbz	r0, 8008ad4 <ucdr_deserialize_int32_t+0x5c>
 8008a9c:	7d22      	ldrb	r2, [r4, #20]
 8008a9e:	68a3      	ldr	r3, [r4, #8]
 8008aa0:	2a01      	cmp	r2, #1
 8008aa2:	d052      	beq.n	8008b4a <ucdr_deserialize_int32_t+0xd2>
 8008aa4:	78db      	ldrb	r3, [r3, #3]
 8008aa6:	702b      	strb	r3, [r5, #0]
 8008aa8:	68a3      	ldr	r3, [r4, #8]
 8008aaa:	789b      	ldrb	r3, [r3, #2]
 8008aac:	706b      	strb	r3, [r5, #1]
 8008aae:	68a3      	ldr	r3, [r4, #8]
 8008ab0:	785b      	ldrb	r3, [r3, #1]
 8008ab2:	70ab      	strb	r3, [r5, #2]
 8008ab4:	68a3      	ldr	r3, [r4, #8]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	70eb      	strb	r3, [r5, #3]
 8008aba:	68a2      	ldr	r2, [r4, #8]
 8008abc:	6923      	ldr	r3, [r4, #16]
 8008abe:	3204      	adds	r2, #4
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	2104      	movs	r1, #4
 8008ac4:	60a2      	str	r2, [r4, #8]
 8008ac6:	6123      	str	r3, [r4, #16]
 8008ac8:	7561      	strb	r1, [r4, #21]
 8008aca:	7da0      	ldrb	r0, [r4, #22]
 8008acc:	f080 0001 	eor.w	r0, r0, #1
 8008ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ad4:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008ad8:	42b7      	cmp	r7, r6
 8008ada:	d92a      	bls.n	8008b32 <ucdr_deserialize_int32_t+0xba>
 8008adc:	6923      	ldr	r3, [r4, #16]
 8008ade:	60a7      	str	r7, [r4, #8]
 8008ae0:	1bbf      	subs	r7, r7, r6
 8008ae2:	443b      	add	r3, r7
 8008ae4:	f1c7 0904 	rsb	r9, r7, #4
 8008ae8:	6123      	str	r3, [r4, #16]
 8008aea:	4649      	mov	r1, r9
 8008aec:	4620      	mov	r0, r4
 8008aee:	f000 f85d 	bl	8008bac <ucdr_check_final_buffer_behavior>
 8008af2:	b368      	cbz	r0, 8008b50 <ucdr_deserialize_int32_t+0xd8>
 8008af4:	7d23      	ldrb	r3, [r4, #20]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d040      	beq.n	8008b7c <ucdr_deserialize_int32_t+0x104>
 8008afa:	78f3      	ldrb	r3, [r6, #3]
 8008afc:	702b      	strb	r3, [r5, #0]
 8008afe:	78b3      	ldrb	r3, [r6, #2]
 8008b00:	706b      	strb	r3, [r5, #1]
 8008b02:	2f01      	cmp	r7, #1
 8008b04:	d031      	beq.n	8008b6a <ucdr_deserialize_int32_t+0xf2>
 8008b06:	7873      	ldrb	r3, [r6, #1]
 8008b08:	70ab      	strb	r3, [r5, #2]
 8008b0a:	2f02      	cmp	r7, #2
 8008b0c:	f105 0503 	add.w	r5, r5, #3
 8008b10:	d02f      	beq.n	8008b72 <ucdr_deserialize_int32_t+0xfa>
 8008b12:	7833      	ldrb	r3, [r6, #0]
 8008b14:	702b      	strb	r3, [r5, #0]
 8008b16:	6923      	ldr	r3, [r4, #16]
 8008b18:	68a2      	ldr	r2, [r4, #8]
 8008b1a:	7da0      	ldrb	r0, [r4, #22]
 8008b1c:	2104      	movs	r1, #4
 8008b1e:	3304      	adds	r3, #4
 8008b20:	444a      	add	r2, r9
 8008b22:	1bdb      	subs	r3, r3, r7
 8008b24:	7561      	strb	r1, [r4, #21]
 8008b26:	60a2      	str	r2, [r4, #8]
 8008b28:	6123      	str	r3, [r4, #16]
 8008b2a:	f080 0001 	eor.w	r0, r0, #1
 8008b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b32:	2104      	movs	r1, #4
 8008b34:	4620      	mov	r0, r4
 8008b36:	f000 f839 	bl	8008bac <ucdr_check_final_buffer_behavior>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d0c5      	beq.n	8008aca <ucdr_deserialize_int32_t+0x52>
 8008b3e:	7d23      	ldrb	r3, [r4, #20]
 8008b40:	68a2      	ldr	r2, [r4, #8]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d017      	beq.n	8008b76 <ucdr_deserialize_int32_t+0xfe>
 8008b46:	78d3      	ldrb	r3, [r2, #3]
 8008b48:	e7ad      	b.n	8008aa6 <ucdr_deserialize_int32_t+0x2e>
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	602b      	str	r3, [r5, #0]
 8008b4e:	e7b4      	b.n	8008aba <ucdr_deserialize_int32_t+0x42>
 8008b50:	68a2      	ldr	r2, [r4, #8]
 8008b52:	6923      	ldr	r3, [r4, #16]
 8008b54:	7da0      	ldrb	r0, [r4, #22]
 8008b56:	f884 8015 	strb.w	r8, [r4, #21]
 8008b5a:	1bd2      	subs	r2, r2, r7
 8008b5c:	1bdb      	subs	r3, r3, r7
 8008b5e:	60a2      	str	r2, [r4, #8]
 8008b60:	6123      	str	r3, [r4, #16]
 8008b62:	f080 0001 	eor.w	r0, r0, #1
 8008b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b6a:	68a3      	ldr	r3, [r4, #8]
 8008b6c:	785b      	ldrb	r3, [r3, #1]
 8008b6e:	70ab      	strb	r3, [r5, #2]
 8008b70:	3503      	adds	r5, #3
 8008b72:	68a6      	ldr	r6, [r4, #8]
 8008b74:	e7cd      	b.n	8008b12 <ucdr_deserialize_int32_t+0x9a>
 8008b76:	6813      	ldr	r3, [r2, #0]
 8008b78:	602b      	str	r3, [r5, #0]
 8008b7a:	e79e      	b.n	8008aba <ucdr_deserialize_int32_t+0x42>
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	463a      	mov	r2, r7
 8008b80:	4628      	mov	r0, r5
 8008b82:	f007 fc46 	bl	8010412 <memcpy>
 8008b86:	68a1      	ldr	r1, [r4, #8]
 8008b88:	464a      	mov	r2, r9
 8008b8a:	19e8      	adds	r0, r5, r7
 8008b8c:	f007 fc41 	bl	8010412 <memcpy>
 8008b90:	e7c1      	b.n	8008b16 <ucdr_deserialize_int32_t+0x9e>
 8008b92:	bf00      	nop

08008b94 <ucdr_check_buffer_available_for>:
 8008b94:	7d83      	ldrb	r3, [r0, #22]
 8008b96:	b93b      	cbnz	r3, 8008ba8 <ucdr_check_buffer_available_for+0x14>
 8008b98:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8008b9c:	440b      	add	r3, r1
 8008b9e:	4298      	cmp	r0, r3
 8008ba0:	bf34      	ite	cc
 8008ba2:	2000      	movcc	r0, #0
 8008ba4:	2001      	movcs	r0, #1
 8008ba6:	4770      	bx	lr
 8008ba8:	2000      	movs	r0, #0
 8008baa:	4770      	bx	lr

08008bac <ucdr_check_final_buffer_behavior>:
 8008bac:	7d83      	ldrb	r3, [r0, #22]
 8008bae:	b943      	cbnz	r3, 8008bc2 <ucdr_check_final_buffer_behavior+0x16>
 8008bb0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8008bb4:	4291      	cmp	r1, r2
 8008bb6:	b510      	push	{r4, lr}
 8008bb8:	4604      	mov	r4, r0
 8008bba:	d205      	bcs.n	8008bc8 <ucdr_check_final_buffer_behavior+0x1c>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	bd10      	pop	{r4, pc}
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	4770      	bx	lr
 8008bc8:	6982      	ldr	r2, [r0, #24]
 8008bca:	b13a      	cbz	r2, 8008bdc <ucdr_check_final_buffer_behavior+0x30>
 8008bcc:	69c1      	ldr	r1, [r0, #28]
 8008bce:	4790      	blx	r2
 8008bd0:	f080 0301 	eor.w	r3, r0, #1
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	75a0      	strb	r0, [r4, #22]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	bd10      	pop	{r4, pc}
 8008bdc:	2001      	movs	r0, #1
 8008bde:	75a0      	strb	r0, [r4, #22]
 8008be0:	e7fa      	b.n	8008bd8 <ucdr_check_final_buffer_behavior+0x2c>
 8008be2:	bf00      	nop

08008be4 <ucdr_set_on_full_buffer_callback>:
 8008be4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop

08008bec <ucdr_init_buffer_origin_offset_endian>:
 8008bec:	b410      	push	{r4}
 8008bee:	9c01      	ldr	r4, [sp, #4]
 8008bf0:	6001      	str	r1, [r0, #0]
 8008bf2:	440a      	add	r2, r1
 8008bf4:	6042      	str	r2, [r0, #4]
 8008bf6:	190a      	adds	r2, r1, r4
 8008bf8:	441c      	add	r4, r3
 8008bfa:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8008bfe:	6082      	str	r2, [r0, #8]
 8008c00:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008c04:	7503      	strb	r3, [r0, #20]
 8008c06:	2200      	movs	r2, #0
 8008c08:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8008c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c10:	7542      	strb	r2, [r0, #21]
 8008c12:	7582      	strb	r2, [r0, #22]
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop

08008c18 <ucdr_init_buffer_origin_offset>:
 8008c18:	b510      	push	{r4, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	9c04      	ldr	r4, [sp, #16]
 8008c1e:	9400      	str	r4, [sp, #0]
 8008c20:	2401      	movs	r4, #1
 8008c22:	9401      	str	r4, [sp, #4]
 8008c24:	f7ff ffe2 	bl	8008bec <ucdr_init_buffer_origin_offset_endian>
 8008c28:	b002      	add	sp, #8
 8008c2a:	bd10      	pop	{r4, pc}

08008c2c <ucdr_init_buffer_origin>:
 8008c2c:	b510      	push	{r4, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	2400      	movs	r4, #0
 8008c32:	9400      	str	r4, [sp, #0]
 8008c34:	f7ff fff0 	bl	8008c18 <ucdr_init_buffer_origin_offset>
 8008c38:	b002      	add	sp, #8
 8008c3a:	bd10      	pop	{r4, pc}

08008c3c <ucdr_init_buffer>:
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f7ff bff5 	b.w	8008c2c <ucdr_init_buffer_origin>
 8008c42:	bf00      	nop

08008c44 <ucdr_alignment>:
 8008c44:	fbb0 f3f1 	udiv	r3, r0, r1
 8008c48:	fb03 0011 	mls	r0, r3, r1, r0
 8008c4c:	1a08      	subs	r0, r1, r0
 8008c4e:	3901      	subs	r1, #1
 8008c50:	4008      	ands	r0, r1
 8008c52:	4770      	bx	lr

08008c54 <ucdr_buffer_alignment>:
 8008c54:	7d43      	ldrb	r3, [r0, #21]
 8008c56:	428b      	cmp	r3, r1
 8008c58:	d208      	bcs.n	8008c6c <ucdr_buffer_alignment+0x18>
 8008c5a:	6900      	ldr	r0, [r0, #16]
 8008c5c:	fbb0 f3f1 	udiv	r3, r0, r1
 8008c60:	fb01 0013 	mls	r0, r1, r3, r0
 8008c64:	1a08      	subs	r0, r1, r0
 8008c66:	3901      	subs	r1, #1
 8008c68:	4008      	ands	r0, r1
 8008c6a:	4770      	bx	lr
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	4770      	bx	lr

08008c70 <ucdr_align_to>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	4604      	mov	r4, r0
 8008c74:	460d      	mov	r5, r1
 8008c76:	f7ff ffed 	bl	8008c54 <ucdr_buffer_alignment>
 8008c7a:	68a3      	ldr	r3, [r4, #8]
 8008c7c:	6861      	ldr	r1, [r4, #4]
 8008c7e:	6922      	ldr	r2, [r4, #16]
 8008c80:	7565      	strb	r5, [r4, #21]
 8008c82:	4403      	add	r3, r0
 8008c84:	428b      	cmp	r3, r1
 8008c86:	bf28      	it	cs
 8008c88:	460b      	movcs	r3, r1
 8008c8a:	4402      	add	r2, r0
 8008c8c:	60a3      	str	r3, [r4, #8]
 8008c8e:	6122      	str	r2, [r4, #16]
 8008c90:	bd38      	pop	{r3, r4, r5, pc}
 8008c92:	bf00      	nop

08008c94 <ucdr_buffer_length>:
 8008c94:	6882      	ldr	r2, [r0, #8]
 8008c96:	6800      	ldr	r0, [r0, #0]
 8008c98:	1a10      	subs	r0, r2, r0
 8008c9a:	4770      	bx	lr

08008c9c <ucdr_buffer_remaining>:
 8008c9c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8008ca0:	1a10      	subs	r0, r2, r0
 8008ca2:	4770      	bx	lr

08008ca4 <ucdr_check_final_buffer_behavior_array>:
 8008ca4:	b538      	push	{r3, r4, r5, lr}
 8008ca6:	7d83      	ldrb	r3, [r0, #22]
 8008ca8:	b963      	cbnz	r3, 8008cc4 <ucdr_check_final_buffer_behavior_array+0x20>
 8008caa:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	460d      	mov	r5, r1
 8008cb4:	d308      	bcc.n	8008cc8 <ucdr_check_final_buffer_behavior_array+0x24>
 8008cb6:	b139      	cbz	r1, 8008cc8 <ucdr_check_final_buffer_behavior_array+0x24>
 8008cb8:	6983      	ldr	r3, [r0, #24]
 8008cba:	b163      	cbz	r3, 8008cd6 <ucdr_check_final_buffer_behavior_array+0x32>
 8008cbc:	69c1      	ldr	r1, [r0, #28]
 8008cbe:	4798      	blx	r3
 8008cc0:	75a0      	strb	r0, [r4, #22]
 8008cc2:	b108      	cbz	r0, 8008cc8 <ucdr_check_final_buffer_behavior_array+0x24>
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	bd38      	pop	{r3, r4, r5, pc}
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f7ff ffe7 	bl	8008c9c <ucdr_buffer_remaining>
 8008cce:	42a8      	cmp	r0, r5
 8008cd0:	bf28      	it	cs
 8008cd2:	4628      	movcs	r0, r5
 8008cd4:	bd38      	pop	{r3, r4, r5, pc}
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	7583      	strb	r3, [r0, #22]
 8008cda:	e7f3      	b.n	8008cc4 <ucdr_check_final_buffer_behavior_array+0x20>

08008cdc <ucdr_advance_buffer>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	4604      	mov	r4, r0
 8008ce0:	460d      	mov	r5, r1
 8008ce2:	f7ff ff57 	bl	8008b94 <ucdr_check_buffer_available_for>
 8008ce6:	b178      	cbz	r0, 8008d08 <ucdr_advance_buffer+0x2c>
 8008ce8:	6923      	ldr	r3, [r4, #16]
 8008cea:	68a2      	ldr	r2, [r4, #8]
 8008cec:	442b      	add	r3, r5
 8008cee:	6123      	str	r3, [r4, #16]
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	442a      	add	r2, r5
 8008cf4:	7563      	strb	r3, [r4, #21]
 8008cf6:	60a2      	str	r2, [r4, #8]
 8008cf8:	bd38      	pop	{r3, r4, r5, pc}
 8008cfa:	68a2      	ldr	r2, [r4, #8]
 8008cfc:	6923      	ldr	r3, [r4, #16]
 8008cfe:	4402      	add	r2, r0
 8008d00:	4403      	add	r3, r0
 8008d02:	1a2d      	subs	r5, r5, r0
 8008d04:	60a2      	str	r2, [r4, #8]
 8008d06:	6123      	str	r3, [r4, #16]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f7ff ffc9 	bl	8008ca4 <ucdr_check_final_buffer_behavior_array>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d1f1      	bne.n	8008cfa <ucdr_advance_buffer+0x1e>
 8008d16:	2301      	movs	r3, #1
 8008d18:	7563      	strb	r3, [r4, #21]
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}

08008d1c <uxr_buffer_delete_entity>:
 8008d1c:	b510      	push	{r4, lr}
 8008d1e:	2300      	movs	r3, #0
 8008d20:	b08e      	sub	sp, #56	@ 0x38
 8008d22:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008d26:	2303      	movs	r3, #3
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	2204      	movs	r2, #4
 8008d2c:	ab06      	add	r3, sp, #24
 8008d2e:	4604      	mov	r4, r0
 8008d30:	f001 f81c 	bl	8009d6c <uxr_prepare_stream_to_write_submessage>
 8008d34:	b918      	cbnz	r0, 8008d3e <uxr_buffer_delete_entity+0x22>
 8008d36:	4604      	mov	r4, r0
 8008d38:	4620      	mov	r0, r4
 8008d3a:	b00e      	add	sp, #56	@ 0x38
 8008d3c:	bd10      	pop	{r4, pc}
 8008d3e:	9902      	ldr	r1, [sp, #8]
 8008d40:	aa05      	add	r2, sp, #20
 8008d42:	4620      	mov	r0, r4
 8008d44:	f001 f94c 	bl	8009fe0 <uxr_init_base_object_request>
 8008d48:	a905      	add	r1, sp, #20
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	a806      	add	r0, sp, #24
 8008d4e:	f002 fa6b 	bl	800b228 <uxr_serialize_DELETE_Payload>
 8008d52:	4620      	mov	r0, r4
 8008d54:	b00e      	add	sp, #56	@ 0x38
 8008d56:	bd10      	pop	{r4, pc}

08008d58 <uxr_common_create_entity>:
 8008d58:	b510      	push	{r4, lr}
 8008d5a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8008d5e:	b08c      	sub	sp, #48	@ 0x30
 8008d60:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8008d64:	f1bc 0f01 	cmp.w	ip, #1
 8008d68:	bf08      	it	eq
 8008d6a:	f003 0201 	andeq.w	r2, r3, #1
 8008d6e:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8008d72:	bf18      	it	ne
 8008d74:	2200      	movne	r2, #0
 8008d76:	330e      	adds	r3, #14
 8008d78:	441a      	add	r2, r3
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e9cd 3100 	strd	r3, r1, [sp]
 8008d80:	b292      	uxth	r2, r2
 8008d82:	9903      	ldr	r1, [sp, #12]
 8008d84:	ab04      	add	r3, sp, #16
 8008d86:	4604      	mov	r4, r0
 8008d88:	f000 fff0 	bl	8009d6c <uxr_prepare_stream_to_write_submessage>
 8008d8c:	b918      	cbnz	r0, 8008d96 <uxr_common_create_entity+0x3e>
 8008d8e:	4604      	mov	r4, r0
 8008d90:	4620      	mov	r0, r4
 8008d92:	b00c      	add	sp, #48	@ 0x30
 8008d94:	bd10      	pop	{r4, pc}
 8008d96:	9902      	ldr	r1, [sp, #8]
 8008d98:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f001 f920 	bl	8009fe0 <uxr_init_base_object_request>
 8008da0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008da2:	4604      	mov	r4, r0
 8008da4:	a804      	add	r0, sp, #16
 8008da6:	f002 f99d 	bl	800b0e4 <uxr_serialize_CREATE_Payload>
 8008daa:	4620      	mov	r0, r4
 8008dac:	b00c      	add	sp, #48	@ 0x30
 8008dae:	bd10      	pop	{r4, pc}

08008db0 <uxr_buffer_create_participant_bin>:
 8008db0:	b570      	push	{r4, r5, r6, lr}
 8008db2:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8008db6:	ac11      	add	r4, sp, #68	@ 0x44
 8008db8:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	7223      	strb	r3, [r4, #8]
 8008dc0:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8008dc2:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8008dc6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	2100      	movs	r1, #0
 8008dce:	4605      	mov	r5, r0
 8008dd0:	7122      	strb	r2, [r4, #4]
 8008dd2:	f88d 1014 	strb.w	r1, [sp, #20]
 8008dd6:	b1cb      	cbz	r3, 8008e0c <uxr_buffer_create_participant_bin+0x5c>
 8008dd8:	f88d 201c 	strb.w	r2, [sp, #28]
 8008ddc:	9308      	str	r3, [sp, #32]
 8008dde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008de2:	a915      	add	r1, sp, #84	@ 0x54
 8008de4:	a809      	add	r0, sp, #36	@ 0x24
 8008de6:	f7ff ff29 	bl	8008c3c <ucdr_init_buffer>
 8008dea:	a905      	add	r1, sp, #20
 8008dec:	a809      	add	r0, sp, #36	@ 0x24
 8008dee:	f001 fe6f 	bl	800aad0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8008df2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008df4:	9600      	str	r6, [sp, #0]
 8008df6:	9401      	str	r4, [sp, #4]
 8008df8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008dfc:	60e3      	str	r3, [r4, #12]
 8008dfe:	4628      	mov	r0, r5
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	f7ff ffa9 	bl	8008d58 <uxr_common_create_entity>
 8008e06:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8008e0a:	bd70      	pop	{r4, r5, r6, pc}
 8008e0c:	f88d 301c 	strb.w	r3, [sp, #28]
 8008e10:	e7e5      	b.n	8008dde <uxr_buffer_create_participant_bin+0x2e>
 8008e12:	bf00      	nop

08008e14 <uxr_buffer_create_topic_bin>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8008e1a:	4605      	mov	r5, r0
 8008e1c:	9105      	str	r1, [sp, #20]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	a997      	add	r1, sp, #604	@ 0x25c
 8008e22:	2302      	movs	r3, #2
 8008e24:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8008e28:	9204      	str	r2, [sp, #16]
 8008e2a:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8008e2e:	f000 f8d9 	bl	8008fe4 <uxr_object_id_to_raw>
 8008e32:	2303      	movs	r3, #3
 8008e34:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8008e38:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8008e3a:	9306      	str	r3, [sp, #24]
 8008e3c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8008e3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e40:	2301      	movs	r3, #1
 8008e42:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8008e46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	a917      	add	r1, sp, #92	@ 0x5c
 8008e4e:	a80b      	add	r0, sp, #44	@ 0x2c
 8008e50:	f88d 301c 	strb.w	r3, [sp, #28]
 8008e54:	f7ff fef2 	bl	8008c3c <ucdr_init_buffer>
 8008e58:	a906      	add	r1, sp, #24
 8008e5a:	a80b      	add	r0, sp, #44	@ 0x2c
 8008e5c:	f001 fe5a 	bl	800ab14 <uxr_serialize_OBJK_Topic_Binary>
 8008e60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e62:	9316      	str	r3, [sp, #88]	@ 0x58
 8008e64:	ac13      	add	r4, sp, #76	@ 0x4c
 8008e66:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8008e6a:	9600      	str	r6, [sp, #0]
 8008e6c:	9401      	str	r4, [sp, #4]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	4628      	mov	r0, r5
 8008e72:	f7ff ff71 	bl	8008d58 <uxr_common_create_entity>
 8008e76:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8008e7a:	bd70      	pop	{r4, r5, r6, pc}

08008e7c <uxr_buffer_create_publisher_bin>:
 8008e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e7e:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8008e82:	4605      	mov	r5, r0
 8008e84:	9105      	str	r1, [sp, #20]
 8008e86:	4618      	mov	r0, r3
 8008e88:	2603      	movs	r6, #3
 8008e8a:	a992      	add	r1, sp, #584	@ 0x248
 8008e8c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8008e90:	9204      	str	r2, [sp, #16]
 8008e92:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8008e96:	f000 f8a5 	bl	8008fe4 <uxr_object_id_to_raw>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ea0:	a912      	add	r1, sp, #72	@ 0x48
 8008ea2:	a806      	add	r0, sp, #24
 8008ea4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8008ea8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8008eac:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8008eb0:	f7ff fec4 	bl	8008c3c <ucdr_init_buffer>
 8008eb4:	a993      	add	r1, sp, #588	@ 0x24c
 8008eb6:	a806      	add	r0, sp, #24
 8008eb8:	f001 fee2 	bl	800ac80 <uxr_serialize_OBJK_Publisher_Binary>
 8008ebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ebe:	9311      	str	r3, [sp, #68]	@ 0x44
 8008ec0:	ac0e      	add	r4, sp, #56	@ 0x38
 8008ec2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8008ec6:	9700      	str	r7, [sp, #0]
 8008ec8:	9401      	str	r4, [sp, #4]
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	4628      	mov	r0, r5
 8008ece:	f7ff ff43 	bl	8008d58 <uxr_common_create_entity>
 8008ed2:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8008ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ed8 <uxr_buffer_create_datawriter_bin>:
 8008ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eda:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8008ede:	ac1d      	add	r4, sp, #116	@ 0x74
 8008ee0:	9105      	str	r1, [sp, #20]
 8008ee2:	4605      	mov	r5, r0
 8008ee4:	a9a1      	add	r1, sp, #644	@ 0x284
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	2305      	movs	r3, #5
 8008eea:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 8008eee:	9204      	str	r2, [sp, #16]
 8008ef0:	7123      	strb	r3, [r4, #4]
 8008ef2:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 8008ef6:	f000 f875 	bl	8008fe4 <uxr_object_id_to_raw>
 8008efa:	2303      	movs	r3, #3
 8008efc:	a90e      	add	r1, sp, #56	@ 0x38
 8008efe:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8008f00:	7223      	strb	r3, [r4, #8]
 8008f02:	f000 f86f 	bl	8008fe4 <uxr_object_id_to_raw>
 8008f06:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 8008f0a:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 8008f0e:	2200      	movs	r2, #0
 8008f10:	3f00      	subs	r7, #0
 8008f12:	fab3 f383 	clz	r3, r3
 8008f16:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 8008f1a:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 8008f1e:	bf18      	it	ne
 8008f20:	2701      	movne	r7, #1
 8008f22:	095b      	lsrs	r3, r3, #5
 8008f24:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 8008f28:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 8008f2c:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 8008f30:	2201      	movs	r2, #1
 8008f32:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 8008f36:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8008f3a:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 8008f3e:	b919      	cbnz	r1, 8008f48 <uxr_buffer_create_datawriter_bin+0x70>
 8008f40:	f043 0302 	orr.w	r3, r3, #2
 8008f44:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8008f48:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 8008f4c:	2a01      	cmp	r2, #1
 8008f4e:	d022      	beq.n	8008f96 <uxr_buffer_create_datawriter_bin+0xbe>
 8008f50:	2a03      	cmp	r2, #3
 8008f52:	d01b      	beq.n	8008f8c <uxr_buffer_create_datawriter_bin+0xb4>
 8008f54:	b91a      	cbnz	r2, 8008f5e <uxr_buffer_create_datawriter_bin+0x86>
 8008f56:	f043 0308 	orr.w	r3, r3, #8
 8008f5a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8008f5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f62:	a921      	add	r1, sp, #132	@ 0x84
 8008f64:	a806      	add	r0, sp, #24
 8008f66:	f7ff fe69 	bl	8008c3c <ucdr_init_buffer>
 8008f6a:	a90e      	add	r1, sp, #56	@ 0x38
 8008f6c:	a806      	add	r0, sp, #24
 8008f6e:	f001 feed 	bl	800ad4c <uxr_serialize_OBJK_DataWriter_Binary>
 8008f72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f74:	9600      	str	r6, [sp, #0]
 8008f76:	9401      	str	r4, [sp, #4]
 8008f78:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8008f7c:	60e3      	str	r3, [r4, #12]
 8008f7e:	4628      	mov	r0, r5
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	f7ff fee9 	bl	8008d58 <uxr_common_create_entity>
 8008f86:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8008f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f8c:	f043 0320 	orr.w	r3, r3, #32
 8008f90:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8008f94:	e7e3      	b.n	8008f5e <uxr_buffer_create_datawriter_bin+0x86>
 8008f96:	f043 0310 	orr.w	r3, r3, #16
 8008f9a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8008f9e:	e7de      	b.n	8008f5e <uxr_buffer_create_datawriter_bin+0x86>

08008fa0 <uxr_object_id>:
 8008fa0:	b082      	sub	sp, #8
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f88d 1006 	strb.w	r1, [sp, #6]
 8008fa8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008fac:	f360 030f 	bfi	r3, r0, #0, #16
 8008fb0:	f362 431f 	bfi	r3, r2, #16, #16
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	b002      	add	sp, #8
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop

08008fbc <uxr_object_id_from_raw>:
 8008fbc:	7843      	ldrb	r3, [r0, #1]
 8008fbe:	7801      	ldrb	r1, [r0, #0]
 8008fc0:	b082      	sub	sp, #8
 8008fc2:	f003 020f 	and.w	r2, r3, #15
 8008fc6:	f88d 2006 	strb.w	r2, [sp, #6]
 8008fca:	091b      	lsrs	r3, r3, #4
 8008fcc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008fd0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	f363 000f 	bfi	r0, r3, #0, #16
 8008fda:	f362 401f 	bfi	r0, r2, #16, #16
 8008fde:	b002      	add	sp, #8
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop

08008fe4 <uxr_object_id_to_raw>:
 8008fe4:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8008fe8:	b082      	sub	sp, #8
 8008fea:	f3c0 120b 	ubfx	r2, r0, #4, #12
 8008fee:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8008ff2:	700a      	strb	r2, [r1, #0]
 8008ff4:	704b      	strb	r3, [r1, #1]
 8008ff6:	b002      	add	sp, #8
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop

08008ffc <on_get_fragmentation_info>:
 8008ffc:	b500      	push	{lr}
 8008ffe:	b08b      	sub	sp, #44	@ 0x2c
 8009000:	4601      	mov	r1, r0
 8009002:	2204      	movs	r2, #4
 8009004:	a802      	add	r0, sp, #8
 8009006:	f7ff fe19 	bl	8008c3c <ucdr_init_buffer>
 800900a:	f10d 0305 	add.w	r3, sp, #5
 800900e:	f10d 0206 	add.w	r2, sp, #6
 8009012:	a901      	add	r1, sp, #4
 8009014:	a802      	add	r0, sp, #8
 8009016:	f001 f947 	bl	800a2a8 <uxr_read_submessage_header>
 800901a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800901e:	2b0d      	cmp	r3, #13
 8009020:	d003      	beq.n	800902a <on_get_fragmentation_info+0x2e>
 8009022:	2000      	movs	r0, #0
 8009024:	b00b      	add	sp, #44	@ 0x2c
 8009026:	f85d fb04 	ldr.w	pc, [sp], #4
 800902a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800902e:	f013 0f02 	tst.w	r3, #2
 8009032:	bf0c      	ite	eq
 8009034:	2001      	moveq	r0, #1
 8009036:	2002      	movne	r0, #2
 8009038:	b00b      	add	sp, #44	@ 0x2c
 800903a:	f85d fb04 	ldr.w	pc, [sp], #4
 800903e:	bf00      	nop

08009040 <read_submessage_get_info>:
 8009040:	b570      	push	{r4, r5, r6, lr}
 8009042:	2500      	movs	r5, #0
 8009044:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8009048:	4604      	mov	r4, r0
 800904a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800904e:	460e      	mov	r6, r1
 8009050:	a810      	add	r0, sp, #64	@ 0x40
 8009052:	4629      	mov	r1, r5
 8009054:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8009058:	f007 f900 	bl	801025c <memset>
 800905c:	a903      	add	r1, sp, #12
 800905e:	4630      	mov	r0, r6
 8009060:	f002 f8ce 	bl	800b200 <uxr_deserialize_GET_INFO_Payload>
 8009064:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009068:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800906c:	4620      	mov	r0, r4
 800906e:	f000 ffaf 	bl	8009fd0 <uxr_session_header_offset>
 8009072:	462b      	mov	r3, r5
 8009074:	9000      	str	r0, [sp, #0]
 8009076:	220c      	movs	r2, #12
 8009078:	a905      	add	r1, sp, #20
 800907a:	a808      	add	r0, sp, #32
 800907c:	f7ff fdcc 	bl	8008c18 <ucdr_init_buffer_origin_offset>
 8009080:	a910      	add	r1, sp, #64	@ 0x40
 8009082:	a808      	add	r0, sp, #32
 8009084:	f002 f92e 	bl	800b2e4 <uxr_serialize_INFO_Payload>
 8009088:	9b08      	ldr	r3, [sp, #32]
 800908a:	462a      	mov	r2, r5
 800908c:	4629      	mov	r1, r5
 800908e:	4620      	mov	r0, r4
 8009090:	f000 ff4a 	bl	8009f28 <uxr_stamp_session_header>
 8009094:	a808      	add	r0, sp, #32
 8009096:	f7ff fdfd 	bl	8008c94 <ucdr_buffer_length>
 800909a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800909c:	4602      	mov	r2, r0
 800909e:	a905      	add	r1, sp, #20
 80090a0:	e9d3 0400 	ldrd	r0, r4, [r3]
 80090a4:	47a0      	blx	r4
 80090a6:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80090aa:	bd70      	pop	{r4, r5, r6, pc}

080090ac <write_submessage_acknack.isra.0>:
 80090ac:	b570      	push	{r4, r5, r6, lr}
 80090ae:	b092      	sub	sp, #72	@ 0x48
 80090b0:	4605      	mov	r5, r0
 80090b2:	460e      	mov	r6, r1
 80090b4:	4614      	mov	r4, r2
 80090b6:	f000 ff8b 	bl	8009fd0 <uxr_session_header_offset>
 80090ba:	a905      	add	r1, sp, #20
 80090bc:	9000      	str	r0, [sp, #0]
 80090be:	2300      	movs	r3, #0
 80090c0:	a80a      	add	r0, sp, #40	@ 0x28
 80090c2:	2211      	movs	r2, #17
 80090c4:	f7ff fda8 	bl	8008c18 <ucdr_init_buffer_origin_offset>
 80090c8:	2318      	movs	r3, #24
 80090ca:	fb03 5404 	mla	r4, r3, r4, r5
 80090ce:	2205      	movs	r2, #5
 80090d0:	2300      	movs	r3, #0
 80090d2:	3450      	adds	r4, #80	@ 0x50
 80090d4:	210a      	movs	r1, #10
 80090d6:	a80a      	add	r0, sp, #40	@ 0x28
 80090d8:	f001 f8cc 	bl	800a274 <uxr_buffer_submessage_header>
 80090dc:	a903      	add	r1, sp, #12
 80090de:	4620      	mov	r0, r4
 80090e0:	f004 fd48 	bl	800db74 <uxr_compute_acknack>
 80090e4:	ba40      	rev16	r0, r0
 80090e6:	f8ad 000e 	strh.w	r0, [sp, #14]
 80090ea:	a903      	add	r1, sp, #12
 80090ec:	a80a      	add	r0, sp, #40	@ 0x28
 80090ee:	f88d 6010 	strb.w	r6, [sp, #16]
 80090f2:	f002 f967 	bl	800b3c4 <uxr_serialize_ACKNACK_Payload>
 80090f6:	2200      	movs	r2, #0
 80090f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090fa:	4611      	mov	r1, r2
 80090fc:	4628      	mov	r0, r5
 80090fe:	f000 ff13 	bl	8009f28 <uxr_stamp_session_header>
 8009102:	a80a      	add	r0, sp, #40	@ 0x28
 8009104:	f7ff fdc6 	bl	8008c94 <ucdr_buffer_length>
 8009108:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800910a:	4602      	mov	r2, r0
 800910c:	a905      	add	r1, sp, #20
 800910e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8009112:	47a0      	blx	r4
 8009114:	b012      	add	sp, #72	@ 0x48
 8009116:	bd70      	pop	{r4, r5, r6, pc}

08009118 <uxr_init_session>:
 8009118:	b510      	push	{r4, lr}
 800911a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8009150 <uxr_init_session+0x38>
 800911e:	2300      	movs	r3, #0
 8009120:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8009124:	4604      	mov	r4, r0
 8009126:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800912a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800912e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8009132:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8009136:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800913a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800913e:	2181      	movs	r1, #129	@ 0x81
 8009140:	f000 fe56 	bl	8009df0 <uxr_init_session_info>
 8009144:	f104 0008 	add.w	r0, r4, #8
 8009148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800914c:	f000 bfae 	b.w	800a0ac <uxr_init_stream_storage>
	...

08009158 <uxr_set_status_callback>:
 8009158:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop

08009160 <uxr_set_topic_callback>:
 8009160:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop

08009168 <uxr_set_request_callback>:
 8009168:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop

08009170 <uxr_set_reply_callback>:
 8009170:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop

08009178 <uxr_create_output_best_effort_stream>:
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	4604      	mov	r4, r0
 800917e:	460d      	mov	r5, r1
 8009180:	4616      	mov	r6, r2
 8009182:	f000 ff25 	bl	8009fd0 <uxr_session_header_offset>
 8009186:	4632      	mov	r2, r6
 8009188:	4603      	mov	r3, r0
 800918a:	4629      	mov	r1, r5
 800918c:	f104 0008 	add.w	r0, r4, #8
 8009190:	b002      	add	sp, #8
 8009192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009196:	f000 bfd3 	b.w	800a140 <uxr_add_output_best_effort_buffer>
 800919a:	bf00      	nop

0800919c <uxr_create_output_reliable_stream>:
 800919c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800919e:	b085      	sub	sp, #20
 80091a0:	4604      	mov	r4, r0
 80091a2:	460d      	mov	r5, r1
 80091a4:	4616      	mov	r6, r2
 80091a6:	461f      	mov	r7, r3
 80091a8:	f000 ff12 	bl	8009fd0 <uxr_session_header_offset>
 80091ac:	463b      	mov	r3, r7
 80091ae:	9000      	str	r0, [sp, #0]
 80091b0:	4632      	mov	r2, r6
 80091b2:	4629      	mov	r1, r5
 80091b4:	f104 0008 	add.w	r0, r4, #8
 80091b8:	f000 ffd6 	bl	800a168 <uxr_add_output_reliable_buffer>
 80091bc:	b005      	add	sp, #20
 80091be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091c0 <uxr_create_input_best_effort_stream>:
 80091c0:	b082      	sub	sp, #8
 80091c2:	3008      	adds	r0, #8
 80091c4:	b002      	add	sp, #8
 80091c6:	f000 bfe9 	b.w	800a19c <uxr_add_input_best_effort_buffer>
 80091ca:	bf00      	nop

080091cc <uxr_create_input_reliable_stream>:
 80091cc:	b510      	push	{r4, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	4c03      	ldr	r4, [pc, #12]	@ (80091e0 <uxr_create_input_reliable_stream+0x14>)
 80091d2:	9400      	str	r4, [sp, #0]
 80091d4:	3008      	adds	r0, #8
 80091d6:	f000 fff7 	bl	800a1c8 <uxr_add_input_reliable_buffer>
 80091da:	b004      	add	sp, #16
 80091dc:	bd10      	pop	{r4, pc}
 80091de:	bf00      	nop
 80091e0:	08008ffd 	.word	0x08008ffd

080091e4 <uxr_epoch_nanos>:
 80091e4:	b510      	push	{r4, lr}
 80091e6:	4604      	mov	r4, r0
 80091e8:	f001 f8a4 	bl	800a334 <uxr_nanos>
 80091ec:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80091f0:	1ac0      	subs	r0, r0, r3
 80091f2:	eb61 0102 	sbc.w	r1, r1, r2
 80091f6:	bd10      	pop	{r4, pc}

080091f8 <uxr_flash_output_streams>:
 80091f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091fc:	7e03      	ldrb	r3, [r0, #24]
 80091fe:	b084      	sub	sp, #16
 8009200:	4604      	mov	r4, r0
 8009202:	b373      	cbz	r3, 8009262 <uxr_flash_output_streams+0x6a>
 8009204:	2500      	movs	r5, #0
 8009206:	f100 0908 	add.w	r9, r0, #8
 800920a:	f10d 0802 	add.w	r8, sp, #2
 800920e:	4628      	mov	r0, r5
 8009210:	af03      	add	r7, sp, #12
 8009212:	ae02      	add	r6, sp, #8
 8009214:	e006      	b.n	8009224 <uxr_flash_output_streams+0x2c>
 8009216:	7e23      	ldrb	r3, [r4, #24]
 8009218:	3501      	adds	r5, #1
 800921a:	b2e8      	uxtb	r0, r5
 800921c:	4283      	cmp	r3, r0
 800921e:	f109 0910 	add.w	r9, r9, #16
 8009222:	d91e      	bls.n	8009262 <uxr_flash_output_streams+0x6a>
 8009224:	2201      	movs	r2, #1
 8009226:	4611      	mov	r1, r2
 8009228:	f000 ff08 	bl	800a03c <uxr_stream_id>
 800922c:	4643      	mov	r3, r8
 800922e:	4684      	mov	ip, r0
 8009230:	463a      	mov	r2, r7
 8009232:	4631      	mov	r1, r6
 8009234:	4648      	mov	r0, r9
 8009236:	f8cd c004 	str.w	ip, [sp, #4]
 800923a:	f004 fd1f 	bl	800dc7c <uxr_prepare_best_effort_buffer_to_send>
 800923e:	2800      	cmp	r0, #0
 8009240:	d0e9      	beq.n	8009216 <uxr_flash_output_streams+0x1e>
 8009242:	9b02      	ldr	r3, [sp, #8]
 8009244:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8009248:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800924c:	4620      	mov	r0, r4
 800924e:	f000 fe6b 	bl	8009f28 <uxr_stamp_session_header>
 8009252:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009254:	9a03      	ldr	r2, [sp, #12]
 8009256:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800925a:	9902      	ldr	r1, [sp, #8]
 800925c:	6818      	ldr	r0, [r3, #0]
 800925e:	47d0      	blx	sl
 8009260:	e7d9      	b.n	8009216 <uxr_flash_output_streams+0x1e>
 8009262:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8009266:	b37b      	cbz	r3, 80092c8 <uxr_flash_output_streams+0xd0>
 8009268:	f04f 0900 	mov.w	r9, #0
 800926c:	f104 0520 	add.w	r5, r4, #32
 8009270:	f10d 0802 	add.w	r8, sp, #2
 8009274:	af03      	add	r7, sp, #12
 8009276:	ae02      	add	r6, sp, #8
 8009278:	4648      	mov	r0, r9
 800927a:	2201      	movs	r2, #1
 800927c:	2102      	movs	r1, #2
 800927e:	f000 fedd 	bl	800a03c <uxr_stream_id>
 8009282:	9001      	str	r0, [sp, #4]
 8009284:	e00e      	b.n	80092a4 <uxr_flash_output_streams+0xac>
 8009286:	9b02      	ldr	r3, [sp, #8]
 8009288:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800928c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8009290:	4620      	mov	r0, r4
 8009292:	f000 fe49 	bl	8009f28 <uxr_stamp_session_header>
 8009296:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009298:	9a03      	ldr	r2, [sp, #12]
 800929a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800929e:	9902      	ldr	r1, [sp, #8]
 80092a0:	6818      	ldr	r0, [r3, #0]
 80092a2:	47d0      	blx	sl
 80092a4:	4643      	mov	r3, r8
 80092a6:	463a      	mov	r2, r7
 80092a8:	4631      	mov	r1, r6
 80092aa:	4628      	mov	r0, r5
 80092ac:	f004 fefa 	bl	800e0a4 <uxr_prepare_next_reliable_buffer_to_send>
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d1e8      	bne.n	8009286 <uxr_flash_output_streams+0x8e>
 80092b4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80092b8:	f109 0901 	add.w	r9, r9, #1
 80092bc:	fa5f f089 	uxtb.w	r0, r9
 80092c0:	4283      	cmp	r3, r0
 80092c2:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 80092c6:	d8d8      	bhi.n	800927a <uxr_flash_output_streams+0x82>
 80092c8:	b004      	add	sp, #16
 80092ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ce:	bf00      	nop

080092d0 <read_submessage_info>:
 80092d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092d4:	460d      	mov	r5, r1
 80092d6:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80092da:	4669      	mov	r1, sp
 80092dc:	4607      	mov	r7, r0
 80092de:	4628      	mov	r0, r5
 80092e0:	f001 fe9e 	bl	800b020 <uxr_deserialize_BaseObjectReply>
 80092e4:	a902      	add	r1, sp, #8
 80092e6:	4604      	mov	r4, r0
 80092e8:	4628      	mov	r0, r5
 80092ea:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80092ee:	f7fe fce3 	bl	8007cb8 <ucdr_deserialize_bool>
 80092f2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80092f6:	4004      	ands	r4, r0
 80092f8:	b2e4      	uxtb	r4, r4
 80092fa:	b95b      	cbnz	r3, 8009314 <read_submessage_info+0x44>
 80092fc:	a987      	add	r1, sp, #540	@ 0x21c
 80092fe:	4628      	mov	r0, r5
 8009300:	f7fe fcda 	bl	8007cb8 <ucdr_deserialize_bool>
 8009304:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8009308:	4606      	mov	r6, r0
 800930a:	b94b      	cbnz	r3, 8009320 <read_submessage_info+0x50>
 800930c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8009310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009314:	a903      	add	r1, sp, #12
 8009316:	4628      	mov	r0, r5
 8009318:	f001 fd44 	bl	800ada4 <uxr_deserialize_ObjectVariant>
 800931c:	4004      	ands	r4, r0
 800931e:	e7ed      	b.n	80092fc <read_submessage_info+0x2c>
 8009320:	a988      	add	r1, sp, #544	@ 0x220
 8009322:	4628      	mov	r0, r5
 8009324:	f7fe fcf6 	bl	8007d14 <ucdr_deserialize_uint8_t>
 8009328:	4234      	tst	r4, r6
 800932a:	d0ef      	beq.n	800930c <read_submessage_info+0x3c>
 800932c:	2800      	cmp	r0, #0
 800932e:	d0ed      	beq.n	800930c <read_submessage_info+0x3c>
 8009330:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8009334:	2b0d      	cmp	r3, #13
 8009336:	d1e9      	bne.n	800930c <read_submessage_info+0x3c>
 8009338:	a98a      	add	r1, sp, #552	@ 0x228
 800933a:	4628      	mov	r0, r5
 800933c:	f7ff fa86 	bl	800884c <ucdr_deserialize_int16_t>
 8009340:	b140      	cbz	r0, 8009354 <read_submessage_info+0x84>
 8009342:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8009346:	2b00      	cmp	r3, #0
 8009348:	dd07      	ble.n	800935a <read_submessage_info+0x8a>
 800934a:	f1b8 0f00 	cmp.w	r8, #0
 800934e:	bf0c      	ite	eq
 8009350:	2002      	moveq	r0, #2
 8009352:	2001      	movne	r0, #1
 8009354:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8009358:	e7d8      	b.n	800930c <read_submessage_info+0x3c>
 800935a:	2000      	movs	r0, #0
 800935c:	e7fa      	b.n	8009354 <read_submessage_info+0x84>
 800935e:	bf00      	nop

08009360 <read_submessage_list>:
 8009360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009364:	b097      	sub	sp, #92	@ 0x5c
 8009366:	4604      	mov	r4, r0
 8009368:	460d      	mov	r5, r1
 800936a:	9209      	str	r2, [sp, #36]	@ 0x24
 800936c:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8009370:	aa0c      	add	r2, sp, #48	@ 0x30
 8009372:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8009376:	4628      	mov	r0, r5
 8009378:	f000 ff96 	bl	800a2a8 <uxr_read_submessage_header>
 800937c:	2800      	cmp	r0, #0
 800937e:	f000 812c 	beq.w	80095da <read_submessage_list+0x27a>
 8009382:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 8009386:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009388:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 800938c:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 8009390:	3902      	subs	r1, #2
 8009392:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8009396:	290d      	cmp	r1, #13
 8009398:	d8e8      	bhi.n	800936c <read_submessage_list+0xc>
 800939a:	a201      	add	r2, pc, #4	@ (adr r2, 80093a0 <read_submessage_list+0x40>)
 800939c:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 80093a0:	080095d1 	.word	0x080095d1
 80093a4:	0800936d 	.word	0x0800936d
 80093a8:	080095c1 	.word	0x080095c1
 80093ac:	08009563 	.word	0x08009563
 80093b0:	08009559 	.word	0x08009559
 80093b4:	0800936d 	.word	0x0800936d
 80093b8:	0800936d 	.word	0x0800936d
 80093bc:	080094dd 	.word	0x080094dd
 80093c0:	08009475 	.word	0x08009475
 80093c4:	08009435 	.word	0x08009435
 80093c8:	0800936d 	.word	0x0800936d
 80093cc:	0800936d 	.word	0x0800936d
 80093d0:	0800936d 	.word	0x0800936d
 80093d4:	080093d9 	.word	0x080093d9
 80093d8:	a910      	add	r1, sp, #64	@ 0x40
 80093da:	4628      	mov	r0, r5
 80093dc:	f002 f842 	bl	800b464 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80093e0:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 80093e4:	2e00      	cmp	r6, #0
 80093e6:	f000 8100 	beq.w	80095ea <read_submessage_list+0x28a>
 80093ea:	f000 ffa3 	bl	800a334 <uxr_nanos>
 80093ee:	f04f 0800 	mov.w	r8, #0
 80093f2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80093fa:	4990      	ldr	r1, [pc, #576]	@ (800963c <read_submessage_list+0x2dc>)
 80093fc:	46c4      	mov	ip, r8
 80093fe:	fbc0 7c01 	smlal	r7, ip, r0, r1
 8009402:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8009406:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009408:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800940a:	46c6      	mov	lr, r8
 800940c:	fbc0 7e01 	smlal	r7, lr, r0, r1
 8009410:	46bc      	mov	ip, r7
 8009412:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8009416:	fbc0 7801 	smlal	r7, r8, r0, r1
 800941a:	e9cd ce02 	strd	ip, lr, [sp, #8]
 800941e:	e9cd 7800 	strd	r7, r8, [sp]
 8009422:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8009426:	9106      	str	r1, [sp, #24]
 8009428:	4620      	mov	r0, r4
 800942a:	47b0      	blx	r6
 800942c:	2301      	movs	r3, #1
 800942e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8009432:	e79b      	b.n	800936c <read_submessage_list+0xc>
 8009434:	a910      	add	r1, sp, #64	@ 0x40
 8009436:	4628      	mov	r0, r5
 8009438:	f002 f802 	bl	800b440 <uxr_deserialize_HEARTBEAT_Payload>
 800943c:	2100      	movs	r1, #0
 800943e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8009442:	f000 fe17 	bl	800a074 <uxr_stream_id_from_raw>
 8009446:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800944a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800944c:	4631      	mov	r1, r6
 800944e:	f104 0008 	add.w	r0, r4, #8
 8009452:	f000 feef 	bl	800a234 <uxr_get_input_reliable_stream>
 8009456:	2800      	cmp	r0, #0
 8009458:	d088      	beq.n	800936c <read_submessage_list+0xc>
 800945a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800945e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8009462:	f004 fb7b 	bl	800db5c <uxr_process_heartbeat>
 8009466:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800946a:	4632      	mov	r2, r6
 800946c:	4620      	mov	r0, r4
 800946e:	f7ff fe1d 	bl	80090ac <write_submessage_acknack.isra.0>
 8009472:	e77b      	b.n	800936c <read_submessage_list+0xc>
 8009474:	a910      	add	r1, sp, #64	@ 0x40
 8009476:	4628      	mov	r0, r5
 8009478:	f001 ffba 	bl	800b3f0 <uxr_deserialize_ACKNACK_Payload>
 800947c:	2100      	movs	r1, #0
 800947e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8009482:	f000 fdf7 	bl	800a074 <uxr_stream_id_from_raw>
 8009486:	900d      	str	r0, [sp, #52]	@ 0x34
 8009488:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800948c:	f104 0008 	add.w	r0, r4, #8
 8009490:	f000 febc 	bl	800a20c <uxr_get_output_reliable_stream>
 8009494:	4606      	mov	r6, r0
 8009496:	2800      	cmp	r0, #0
 8009498:	f43f af68 	beq.w	800936c <read_submessage_list+0xc>
 800949c:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 80094a0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80094a4:	ba49      	rev16	r1, r1
 80094a6:	b289      	uxth	r1, r1
 80094a8:	f004 fea6 	bl	800e1f8 <uxr_process_acknack>
 80094ac:	4630      	mov	r0, r6
 80094ae:	f004 fe67 	bl	800e180 <uxr_begin_output_nack_buffer_it>
 80094b2:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 80094b6:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80094ba:	e005      	b.n	80094c8 <read_submessage_list+0x168>
 80094bc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80094be:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80094c0:	685f      	ldr	r7, [r3, #4]
 80094c2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80094c4:	6818      	ldr	r0, [r3, #0]
 80094c6:	47b8      	blx	r7
 80094c8:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80094cc:	aa0f      	add	r2, sp, #60	@ 0x3c
 80094ce:	4641      	mov	r1, r8
 80094d0:	4630      	mov	r0, r6
 80094d2:	f004 fe57 	bl	800e184 <uxr_next_reliable_nack_buffer_to_send>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	d1f0      	bne.n	80094bc <read_submessage_list+0x15c>
 80094da:	e747      	b.n	800936c <read_submessage_list+0xc>
 80094dc:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 80094e0:	4641      	mov	r1, r8
 80094e2:	900d      	str	r0, [sp, #52]	@ 0x34
 80094e4:	4628      	mov	r0, r5
 80094e6:	f001 fcfd 	bl	800aee4 <uxr_deserialize_BaseObjectRequest>
 80094ea:	3e04      	subs	r6, #4
 80094ec:	4640      	mov	r0, r8
 80094ee:	a90f      	add	r1, sp, #60	@ 0x3c
 80094f0:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80094f4:	f000 fd92 	bl	800a01c <uxr_parse_base_object_request>
 80094f8:	fa1f f886 	uxth.w	r8, r6
 80094fc:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8009500:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009502:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 8009506:	9110      	str	r1, [sp, #64]	@ 0x40
 8009508:	f007 070e 	and.w	r7, r7, #14
 800950c:	b136      	cbz	r6, 800951c <read_submessage_list+0x1bc>
 800950e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	464a      	mov	r2, r9
 8009516:	2300      	movs	r3, #0
 8009518:	4620      	mov	r0, r4
 800951a:	47b0      	blx	r6
 800951c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800951e:	b16b      	cbz	r3, 800953c <read_submessage_list+0x1dc>
 8009520:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8009522:	2100      	movs	r1, #0
 8009524:	3802      	subs	r0, #2
 8009526:	e002      	b.n	800952e <read_submessage_list+0x1ce>
 8009528:	3101      	adds	r1, #1
 800952a:	428b      	cmp	r3, r1
 800952c:	d006      	beq.n	800953c <read_submessage_list+0x1dc>
 800952e:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8009532:	454e      	cmp	r6, r9
 8009534:	d1f8      	bne.n	8009528 <read_submessage_list+0x1c8>
 8009536:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8009538:	2200      	movs	r2, #0
 800953a:	545a      	strb	r2, [r3, r1]
 800953c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8009540:	9102      	str	r1, [sp, #8]
 8009542:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009544:	9101      	str	r1, [sp, #4]
 8009546:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009548:	9100      	str	r1, [sp, #0]
 800954a:	463b      	mov	r3, r7
 800954c:	4642      	mov	r2, r8
 800954e:	4629      	mov	r1, r5
 8009550:	4620      	mov	r0, r4
 8009552:	f004 fed1 	bl	800e2f8 <read_submessage_format>
 8009556:	e709      	b.n	800936c <read_submessage_list+0xc>
 8009558:	4629      	mov	r1, r5
 800955a:	4620      	mov	r0, r4
 800955c:	f7ff feb8 	bl	80092d0 <read_submessage_info>
 8009560:	e704      	b.n	800936c <read_submessage_list+0xc>
 8009562:	2b00      	cmp	r3, #0
 8009564:	d03c      	beq.n	80095e0 <read_submessage_list+0x280>
 8009566:	a910      	add	r1, sp, #64	@ 0x40
 8009568:	4628      	mov	r0, r5
 800956a:	f001 fe9d 	bl	800b2a8 <uxr_deserialize_STATUS_Payload>
 800956e:	a90e      	add	r1, sp, #56	@ 0x38
 8009570:	a810      	add	r0, sp, #64	@ 0x40
 8009572:	aa0d      	add	r2, sp, #52	@ 0x34
 8009574:	f000 fd52 	bl	800a01c <uxr_parse_base_object_request>
 8009578:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800957c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800957e:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 8009582:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8009586:	910f      	str	r1, [sp, #60]	@ 0x3c
 8009588:	b136      	cbz	r6, 8009598 <read_submessage_list+0x238>
 800958a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	463a      	mov	r2, r7
 8009592:	4643      	mov	r3, r8
 8009594:	4620      	mov	r0, r4
 8009596:	47b0      	blx	r6
 8009598:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800959a:	2a00      	cmp	r2, #0
 800959c:	f43f aee6 	beq.w	800936c <read_submessage_list+0xc>
 80095a0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80095a2:	2100      	movs	r1, #0
 80095a4:	3802      	subs	r0, #2
 80095a6:	e003      	b.n	80095b0 <read_submessage_list+0x250>
 80095a8:	3101      	adds	r1, #1
 80095aa:	4291      	cmp	r1, r2
 80095ac:	f43f aede 	beq.w	800936c <read_submessage_list+0xc>
 80095b0:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 80095b4:	42be      	cmp	r6, r7
 80095b6:	d1f7      	bne.n	80095a8 <read_submessage_list+0x248>
 80095b8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80095ba:	f803 8001 	strb.w	r8, [r3, r1]
 80095be:	e6d5      	b.n	800936c <read_submessage_list+0xc>
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f47f aed3 	bne.w	800936c <read_submessage_list+0xc>
 80095c6:	4629      	mov	r1, r5
 80095c8:	4620      	mov	r0, r4
 80095ca:	f000 fc6f 	bl	8009eac <uxr_read_create_session_status>
 80095ce:	e6cd      	b.n	800936c <read_submessage_list+0xc>
 80095d0:	4629      	mov	r1, r5
 80095d2:	4620      	mov	r0, r4
 80095d4:	f7ff fd34 	bl	8009040 <read_submessage_get_info>
 80095d8:	e6c8      	b.n	800936c <read_submessage_list+0xc>
 80095da:	b017      	add	sp, #92	@ 0x5c
 80095dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095e0:	4629      	mov	r1, r5
 80095e2:	4620      	mov	r0, r4
 80095e4:	f000 fc70 	bl	8009ec8 <uxr_read_delete_session_status>
 80095e8:	e6c0      	b.n	800936c <read_submessage_list+0xc>
 80095ea:	f000 fea3 	bl	800a334 <uxr_nanos>
 80095ee:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 80095f2:	f8df c048 	ldr.w	ip, [pc, #72]	@ 800963c <read_submessage_list+0x2dc>
 80095f6:	4633      	mov	r3, r6
 80095f8:	fbc7 230c 	smlal	r2, r3, r7, ip
 80095fc:	1810      	adds	r0, r2, r0
 80095fe:	eb43 0301 	adc.w	r3, r3, r1
 8009602:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 8009606:	46b6      	mov	lr, r6
 8009608:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 800960c:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 8009610:	fbc1 760c 	smlal	r7, r6, r1, ip
 8009614:	19d2      	adds	r2, r2, r7
 8009616:	eb4e 0106 	adc.w	r1, lr, r6
 800961a:	1a80      	subs	r0, r0, r2
 800961c:	eb63 0301 	sbc.w	r3, r3, r1
 8009620:	0fda      	lsrs	r2, r3, #31
 8009622:	1812      	adds	r2, r2, r0
 8009624:	f143 0300 	adc.w	r3, r3, #0
 8009628:	0852      	lsrs	r2, r2, #1
 800962a:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800962e:	105b      	asrs	r3, r3, #1
 8009630:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8009634:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8009638:	e6f8      	b.n	800942c <read_submessage_list+0xcc>
 800963a:	bf00      	nop
 800963c:	3b9aca00 	.word	0x3b9aca00

08009640 <listen_message_reliably>:
 8009640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009644:	f1b1 0b00 	subs.w	fp, r1, #0
 8009648:	b09f      	sub	sp, #124	@ 0x7c
 800964a:	4606      	mov	r6, r0
 800964c:	bfb8      	it	lt
 800964e:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 8009652:	f000 fe55 	bl	800a300 <uxr_millis>
 8009656:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800965a:	9003      	str	r0, [sp, #12]
 800965c:	9104      	str	r1, [sp, #16]
 800965e:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8009662:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 8009666:	2b00      	cmp	r3, #0
 8009668:	f000 80a4 	beq.w	80097b4 <listen_message_reliably+0x174>
 800966c:	2500      	movs	r5, #0
 800966e:	e9cd b806 	strd	fp, r8, [sp, #24]
 8009672:	f106 0420 	add.w	r4, r6, #32
 8009676:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800967a:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 800967e:	4628      	mov	r0, r5
 8009680:	e011      	b.n	80096a6 <listen_message_reliably+0x66>
 8009682:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8009686:	42ba      	cmp	r2, r7
 8009688:	eb73 0109 	sbcs.w	r1, r3, r9
 800968c:	bfb8      	it	lt
 800968e:	4699      	movlt	r9, r3
 8009690:	f105 0501 	add.w	r5, r5, #1
 8009694:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8009698:	b2e8      	uxtb	r0, r5
 800969a:	bfb8      	it	lt
 800969c:	4617      	movlt	r7, r2
 800969e:	4283      	cmp	r3, r0
 80096a0:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 80096a4:	d94a      	bls.n	800973c <listen_message_reliably+0xfc>
 80096a6:	2201      	movs	r2, #1
 80096a8:	2102      	movs	r1, #2
 80096aa:	f000 fcc7 	bl	800a03c <uxr_stream_id>
 80096ae:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80096b2:	4601      	mov	r1, r0
 80096b4:	4620      	mov	r0, r4
 80096b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80096b8:	f004 fd32 	bl	800e120 <uxr_update_output_stream_heartbeat_timestamp>
 80096bc:	2800      	cmp	r0, #0
 80096be:	d0e0      	beq.n	8009682 <listen_message_reliably+0x42>
 80096c0:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 80096c4:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 80096c8:	9305      	str	r3, [sp, #20]
 80096ca:	4630      	mov	r0, r6
 80096cc:	f000 fc80 	bl	8009fd0 <uxr_session_header_offset>
 80096d0:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 80096d4:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 80096d8:	9000      	str	r0, [sp, #0]
 80096da:	a90e      	add	r1, sp, #56	@ 0x38
 80096dc:	4640      	mov	r0, r8
 80096de:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 80096e2:	2300      	movs	r3, #0
 80096e4:	2211      	movs	r2, #17
 80096e6:	f7ff fa97 	bl	8008c18 <ucdr_init_buffer_origin_offset>
 80096ea:	2300      	movs	r3, #0
 80096ec:	2205      	movs	r2, #5
 80096ee:	210b      	movs	r1, #11
 80096f0:	4640      	mov	r0, r8
 80096f2:	f000 fdbf 	bl	800a274 <uxr_buffer_submessage_header>
 80096f6:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 80096fa:	2101      	movs	r1, #1
 80096fc:	f004 fed0 	bl	800e4a0 <uxr_seq_num_add>
 8009700:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 8009704:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8009708:	4602      	mov	r2, r0
 800970a:	9b05      	ldr	r3, [sp, #20]
 800970c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8009710:	a90c      	add	r1, sp, #48	@ 0x30
 8009712:	4640      	mov	r0, r8
 8009714:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8009718:	f001 fe7e 	bl	800b418 <uxr_serialize_HEARTBEAT_Payload>
 800971c:	2200      	movs	r2, #0
 800971e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009720:	4611      	mov	r1, r2
 8009722:	4630      	mov	r0, r6
 8009724:	f000 fc00 	bl	8009f28 <uxr_stamp_session_header>
 8009728:	4640      	mov	r0, r8
 800972a:	f7ff fab3 	bl	8008c94 <ucdr_buffer_length>
 800972e:	4602      	mov	r2, r0
 8009730:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 8009732:	a90e      	add	r1, sp, #56	@ 0x38
 8009734:	e9d0 0300 	ldrd	r0, r3, [r0]
 8009738:	4798      	blx	r3
 800973a:	e7a2      	b.n	8009682 <listen_message_reliably+0x42>
 800973c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009740:	4599      	cmp	r9, r3
 8009742:	bf08      	it	eq
 8009744:	f1b7 3fff 	cmpeq.w	r7, #4294967295	@ 0xffffffff
 8009748:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 800974c:	d032      	beq.n	80097b4 <listen_message_reliably+0x174>
 800974e:	9b03      	ldr	r3, [sp, #12]
 8009750:	1aff      	subs	r7, r7, r3
 8009752:	2f00      	cmp	r7, #0
 8009754:	bf08      	it	eq
 8009756:	2701      	moveq	r7, #1
 8009758:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800975a:	455f      	cmp	r7, fp
 800975c:	bfa8      	it	ge
 800975e:	465f      	movge	r7, fp
 8009760:	689c      	ldr	r4, [r3, #8]
 8009762:	6818      	ldr	r0, [r3, #0]
 8009764:	4642      	mov	r2, r8
 8009766:	463b      	mov	r3, r7
 8009768:	4651      	mov	r1, sl
 800976a:	47a0      	blx	r4
 800976c:	ebab 0b07 	sub.w	fp, fp, r7
 8009770:	b958      	cbnz	r0, 800978a <listen_message_reliably+0x14a>
 8009772:	f1bb 0f00 	cmp.w	fp, #0
 8009776:	dd44      	ble.n	8009802 <listen_message_reliably+0x1c2>
 8009778:	f000 fdc2 	bl	800a300 <uxr_millis>
 800977c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8009780:	2b00      	cmp	r3, #0
 8009782:	d03c      	beq.n	80097fe <listen_message_reliably+0x1be>
 8009784:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8009788:	e770      	b.n	800966c <listen_message_reliably+0x2c>
 800978a:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800978e:	4604      	mov	r4, r0
 8009790:	a80e      	add	r0, sp, #56	@ 0x38
 8009792:	f7ff fa53 	bl	8008c3c <ucdr_init_buffer>
 8009796:	2500      	movs	r5, #0
 8009798:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 800979c:	aa08      	add	r2, sp, #32
 800979e:	a90e      	add	r1, sp, #56	@ 0x38
 80097a0:	4630      	mov	r0, r6
 80097a2:	f88d 5020 	strb.w	r5, [sp, #32]
 80097a6:	f000 fbd5 	bl	8009f54 <uxr_read_session_header>
 80097aa:	b928      	cbnz	r0, 80097b8 <listen_message_reliably+0x178>
 80097ac:	4620      	mov	r0, r4
 80097ae:	b01f      	add	sp, #124	@ 0x7c
 80097b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b4:	465f      	mov	r7, fp
 80097b6:	e7cc      	b.n	8009752 <listen_message_reliably+0x112>
 80097b8:	4629      	mov	r1, r5
 80097ba:	f89d 0020 	ldrb.w	r0, [sp, #32]
 80097be:	f000 fc59 	bl	800a074 <uxr_stream_id_from_raw>
 80097c2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80097c6:	2f01      	cmp	r7, #1
 80097c8:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 80097cc:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 80097d0:	fa5f f880 	uxtb.w	r8, r0
 80097d4:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80097d8:	d050      	beq.n	800987c <listen_message_reliably+0x23c>
 80097da:	2f02      	cmp	r7, #2
 80097dc:	d016      	beq.n	800980c <listen_message_reliably+0x1cc>
 80097de:	2f00      	cmp	r7, #0
 80097e0:	d1e4      	bne.n	80097ac <listen_message_reliably+0x16c>
 80097e2:	4639      	mov	r1, r7
 80097e4:	4638      	mov	r0, r7
 80097e6:	f000 fc45 	bl	800a074 <uxr_stream_id_from_raw>
 80097ea:	a90e      	add	r1, sp, #56	@ 0x38
 80097ec:	4602      	mov	r2, r0
 80097ee:	4630      	mov	r0, r6
 80097f0:	920c      	str	r2, [sp, #48]	@ 0x30
 80097f2:	f7ff fdb5 	bl	8009360 <read_submessage_list>
 80097f6:	4620      	mov	r0, r4
 80097f8:	b01f      	add	sp, #124	@ 0x7c
 80097fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fe:	465f      	mov	r7, fp
 8009800:	e7aa      	b.n	8009758 <listen_message_reliably+0x118>
 8009802:	4604      	mov	r4, r0
 8009804:	4620      	mov	r0, r4
 8009806:	b01f      	add	sp, #124	@ 0x7c
 8009808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980c:	4629      	mov	r1, r5
 800980e:	f106 0008 	add.w	r0, r6, #8
 8009812:	f000 fd0f 	bl	800a234 <uxr_get_input_reliable_stream>
 8009816:	4681      	mov	r9, r0
 8009818:	b338      	cbz	r0, 800986a <listen_message_reliably+0x22a>
 800981a:	a80e      	add	r0, sp, #56	@ 0x38
 800981c:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 8009820:	f7ff fa3c 	bl	8008c9c <ucdr_buffer_remaining>
 8009824:	4603      	mov	r3, r0
 8009826:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 800982a:	9000      	str	r0, [sp, #0]
 800982c:	465a      	mov	r2, fp
 800982e:	4651      	mov	r1, sl
 8009830:	4648      	mov	r0, r9
 8009832:	f004 f8a1 	bl	800d978 <uxr_receive_reliable_message>
 8009836:	b1c0      	cbz	r0, 800986a <listen_message_reliably+0x22a>
 8009838:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800983c:	b393      	cbz	r3, 80098a4 <listen_message_reliably+0x264>
 800983e:	af16      	add	r7, sp, #88	@ 0x58
 8009840:	f04f 0a02 	mov.w	sl, #2
 8009844:	e00a      	b.n	800985c <listen_message_reliably+0x21c>
 8009846:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 800984a:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 800984e:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 8009852:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009854:	4639      	mov	r1, r7
 8009856:	4630      	mov	r0, r6
 8009858:	f7ff fd82 	bl	8009360 <read_submessage_list>
 800985c:	2204      	movs	r2, #4
 800985e:	4639      	mov	r1, r7
 8009860:	4648      	mov	r0, r9
 8009862:	f004 f903 	bl	800da6c <uxr_next_input_reliable_buffer_available>
 8009866:	2800      	cmp	r0, #0
 8009868:	d1ed      	bne.n	8009846 <listen_message_reliably+0x206>
 800986a:	4630      	mov	r0, r6
 800986c:	462a      	mov	r2, r5
 800986e:	4641      	mov	r1, r8
 8009870:	f7ff fc1c 	bl	80090ac <write_submessage_acknack.isra.0>
 8009874:	4620      	mov	r0, r4
 8009876:	b01f      	add	sp, #124	@ 0x7c
 8009878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987c:	4629      	mov	r1, r5
 800987e:	f106 0008 	add.w	r0, r6, #8
 8009882:	f000 fccd 	bl	800a220 <uxr_get_input_best_effort_stream>
 8009886:	2800      	cmp	r0, #0
 8009888:	d090      	beq.n	80097ac <listen_message_reliably+0x16c>
 800988a:	4651      	mov	r1, sl
 800988c:	f003 ffe4 	bl	800d858 <uxr_receive_best_effort_message>
 8009890:	2800      	cmp	r0, #0
 8009892:	d08b      	beq.n	80097ac <listen_message_reliably+0x16c>
 8009894:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8009898:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800989a:	a90e      	add	r1, sp, #56	@ 0x38
 800989c:	4630      	mov	r0, r6
 800989e:	f7ff fd5f 	bl	8009360 <read_submessage_list>
 80098a2:	e783      	b.n	80097ac <listen_message_reliably+0x16c>
 80098a4:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 80098a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80098aa:	a90e      	add	r1, sp, #56	@ 0x38
 80098ac:	4630      	mov	r0, r6
 80098ae:	f7ff fd57 	bl	8009360 <read_submessage_list>
 80098b2:	e7c4      	b.n	800983e <listen_message_reliably+0x1fe>

080098b4 <uxr_run_session_until_confirm_delivery>:
 80098b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098b8:	4606      	mov	r6, r0
 80098ba:	460d      	mov	r5, r1
 80098bc:	f000 fd20 	bl	800a300 <uxr_millis>
 80098c0:	4607      	mov	r7, r0
 80098c2:	4630      	mov	r0, r6
 80098c4:	f7ff fc98 	bl	80091f8 <uxr_flash_output_streams>
 80098c8:	2d00      	cmp	r5, #0
 80098ca:	db16      	blt.n	80098fa <uxr_run_session_until_confirm_delivery+0x46>
 80098cc:	462c      	mov	r4, r5
 80098ce:	f106 0808 	add.w	r8, r6, #8
 80098d2:	e008      	b.n	80098e6 <uxr_run_session_until_confirm_delivery+0x32>
 80098d4:	4621      	mov	r1, r4
 80098d6:	4630      	mov	r0, r6
 80098d8:	f7ff feb2 	bl	8009640 <listen_message_reliably>
 80098dc:	f000 fd10 	bl	800a300 <uxr_millis>
 80098e0:	1bc1      	subs	r1, r0, r7
 80098e2:	1a6c      	subs	r4, r5, r1
 80098e4:	d404      	bmi.n	80098f0 <uxr_run_session_until_confirm_delivery+0x3c>
 80098e6:	4640      	mov	r0, r8
 80098e8:	f000 fcae 	bl	800a248 <uxr_output_streams_confirmed>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	d0f1      	beq.n	80098d4 <uxr_run_session_until_confirm_delivery+0x20>
 80098f0:	4640      	mov	r0, r8
 80098f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098f6:	f000 bca7 	b.w	800a248 <uxr_output_streams_confirmed>
 80098fa:	f106 0808 	add.w	r8, r6, #8
 80098fe:	e7f7      	b.n	80098f0 <uxr_run_session_until_confirm_delivery+0x3c>

08009900 <uxr_run_session_until_all_status>:
 8009900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009904:	9c08      	ldr	r4, [sp, #32]
 8009906:	4605      	mov	r5, r0
 8009908:	460f      	mov	r7, r1
 800990a:	4690      	mov	r8, r2
 800990c:	461e      	mov	r6, r3
 800990e:	f7ff fc73 	bl	80091f8 <uxr_flash_output_streams>
 8009912:	b124      	cbz	r4, 800991e <uxr_run_session_until_all_status+0x1e>
 8009914:	4622      	mov	r2, r4
 8009916:	21ff      	movs	r1, #255	@ 0xff
 8009918:	4630      	mov	r0, r6
 800991a:	f006 fc9f 	bl	801025c <memset>
 800991e:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 8009922:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8009924:	f000 fcec 	bl	800a300 <uxr_millis>
 8009928:	4639      	mov	r1, r7
 800992a:	4681      	mov	r9, r0
 800992c:	4628      	mov	r0, r5
 800992e:	f7ff fe87 	bl	8009640 <listen_message_reliably>
 8009932:	f000 fce5 	bl	800a300 <uxr_millis>
 8009936:	eba0 0109 	sub.w	r1, r0, r9
 800993a:	1a79      	subs	r1, r7, r1
 800993c:	b36c      	cbz	r4, 800999a <uxr_run_session_until_all_status+0x9a>
 800993e:	1e70      	subs	r0, r6, #1
 8009940:	46c6      	mov	lr, r8
 8009942:	1902      	adds	r2, r0, r4
 8009944:	4684      	mov	ip, r0
 8009946:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800994a:	2bff      	cmp	r3, #255	@ 0xff
 800994c:	d007      	beq.n	800995e <uxr_run_session_until_all_status+0x5e>
 800994e:	4594      	cmp	ip, r2
 8009950:	d00f      	beq.n	8009972 <uxr_run_session_until_all_status+0x72>
 8009952:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8009956:	2bff      	cmp	r3, #255	@ 0xff
 8009958:	f10e 0e02 	add.w	lr, lr, #2
 800995c:	d1f7      	bne.n	800994e <uxr_run_session_until_all_status+0x4e>
 800995e:	4594      	cmp	ip, r2
 8009960:	f8be 3000 	ldrh.w	r3, [lr]
 8009964:	d014      	beq.n	8009990 <uxr_run_session_until_all_status+0x90>
 8009966:	f10e 0e02 	add.w	lr, lr, #2
 800996a:	2b00      	cmp	r3, #0
 800996c:	d0eb      	beq.n	8009946 <uxr_run_session_until_all_status+0x46>
 800996e:	2900      	cmp	r1, #0
 8009970:	dcdc      	bgt.n	800992c <uxr_run_session_until_all_status+0x2c>
 8009972:	2300      	movs	r3, #0
 8009974:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8009976:	e001      	b.n	800997c <uxr_run_session_until_all_status+0x7c>
 8009978:	2b01      	cmp	r3, #1
 800997a:	d812      	bhi.n	80099a2 <uxr_run_session_until_all_status+0xa2>
 800997c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8009980:	4290      	cmp	r0, r2
 8009982:	d1f9      	bne.n	8009978 <uxr_run_session_until_all_status+0x78>
 8009984:	2b01      	cmp	r3, #1
 8009986:	bf8c      	ite	hi
 8009988:	2000      	movhi	r0, #0
 800998a:	2001      	movls	r0, #1
 800998c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009990:	2900      	cmp	r1, #0
 8009992:	ddee      	ble.n	8009972 <uxr_run_session_until_all_status+0x72>
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1c9      	bne.n	800992c <uxr_run_session_until_all_status+0x2c>
 8009998:	e7eb      	b.n	8009972 <uxr_run_session_until_all_status+0x72>
 800999a:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800999c:	2001      	movs	r0, #1
 800999e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099a2:	2000      	movs	r0, #0
 80099a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080099a8 <wait_session_status>:
 80099a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ac:	4604      	mov	r4, r0
 80099ae:	20ff      	movs	r0, #255	@ 0xff
 80099b0:	b09f      	sub	sp, #124	@ 0x7c
 80099b2:	7160      	strb	r0, [r4, #5]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 80bb 	beq.w	8009b30 <wait_session_status+0x188>
 80099ba:	4692      	mov	sl, r2
 80099bc:	469b      	mov	fp, r3
 80099be:	f04f 0800 	mov.w	r8, #0
 80099c2:	9105      	str	r1, [sp, #20]
 80099c4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80099c6:	9905      	ldr	r1, [sp, #20]
 80099c8:	e9d3 0500 	ldrd	r0, r5, [r3]
 80099cc:	4652      	mov	r2, sl
 80099ce:	47a8      	blx	r5
 80099d0:	f000 fc96 	bl	800a300 <uxr_millis>
 80099d4:	2700      	movs	r7, #0
 80099d6:	4605      	mov	r5, r0
 80099d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80099dc:	e009      	b.n	80099f2 <wait_session_status+0x4a>
 80099de:	f000 fc8f 	bl	800a300 <uxr_millis>
 80099e2:	1b43      	subs	r3, r0, r5
 80099e4:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	7962      	ldrb	r2, [r4, #5]
 80099ec:	dd3d      	ble.n	8009a6a <wait_session_status+0xc2>
 80099ee:	2aff      	cmp	r2, #255	@ 0xff
 80099f0:	d13b      	bne.n	8009a6a <wait_session_status+0xc2>
 80099f2:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80099f4:	a90a      	add	r1, sp, #40	@ 0x28
 80099f6:	6896      	ldr	r6, [r2, #8]
 80099f8:	6810      	ldr	r0, [r2, #0]
 80099fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80099fc:	47b0      	blx	r6
 80099fe:	2800      	cmp	r0, #0
 8009a00:	d0ed      	beq.n	80099de <wait_session_status+0x36>
 8009a02:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8009a06:	a80e      	add	r0, sp, #56	@ 0x38
 8009a08:	f7ff f918 	bl	8008c3c <ucdr_init_buffer>
 8009a0c:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 8009a10:	aa09      	add	r2, sp, #36	@ 0x24
 8009a12:	a90e      	add	r1, sp, #56	@ 0x38
 8009a14:	4620      	mov	r0, r4
 8009a16:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 8009a1a:	f000 fa9b 	bl	8009f54 <uxr_read_session_header>
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d0dd      	beq.n	80099de <wait_session_status+0x36>
 8009a22:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8009a26:	2100      	movs	r1, #0
 8009a28:	f000 fb24 	bl	800a074 <uxr_stream_id_from_raw>
 8009a2c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8009a30:	9304      	str	r3, [sp, #16]
 8009a32:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8009a36:	b2c3      	uxtb	r3, r0
 8009a38:	f1b9 0f01 	cmp.w	r9, #1
 8009a3c:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 8009a40:	9303      	str	r3, [sp, #12]
 8009a42:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8009a46:	d05d      	beq.n	8009b04 <wait_session_status+0x15c>
 8009a48:	f1b9 0f02 	cmp.w	r9, #2
 8009a4c:	d01a      	beq.n	8009a84 <wait_session_status+0xdc>
 8009a4e:	f1b9 0f00 	cmp.w	r9, #0
 8009a52:	d1c4      	bne.n	80099de <wait_session_status+0x36>
 8009a54:	4649      	mov	r1, r9
 8009a56:	4648      	mov	r0, r9
 8009a58:	f000 fb0c 	bl	800a074 <uxr_stream_id_from_raw>
 8009a5c:	a90e      	add	r1, sp, #56	@ 0x38
 8009a5e:	4602      	mov	r2, r0
 8009a60:	900d      	str	r0, [sp, #52]	@ 0x34
 8009a62:	4620      	mov	r0, r4
 8009a64:	f7ff fc7c 	bl	8009360 <read_submessage_list>
 8009a68:	e7b9      	b.n	80099de <wait_session_status+0x36>
 8009a6a:	f108 0801 	add.w	r8, r8, #1
 8009a6e:	45c3      	cmp	fp, r8
 8009a70:	d001      	beq.n	8009a76 <wait_session_status+0xce>
 8009a72:	2aff      	cmp	r2, #255	@ 0xff
 8009a74:	d0a6      	beq.n	80099c4 <wait_session_status+0x1c>
 8009a76:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 8009a7a:	bf18      	it	ne
 8009a7c:	2001      	movne	r0, #1
 8009a7e:	b01f      	add	sp, #124	@ 0x7c
 8009a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a84:	4631      	mov	r1, r6
 8009a86:	f104 0008 	add.w	r0, r4, #8
 8009a8a:	f000 fbd3 	bl	800a234 <uxr_get_input_reliable_stream>
 8009a8e:	9006      	str	r0, [sp, #24]
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d031      	beq.n	8009af8 <wait_session_status+0x150>
 8009a94:	aa0e      	add	r2, sp, #56	@ 0x38
 8009a96:	4610      	mov	r0, r2
 8009a98:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009a9a:	9207      	str	r2, [sp, #28]
 8009a9c:	f7ff f8fe 	bl	8008c9c <ucdr_buffer_remaining>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 8009aa6:	9000      	str	r0, [sp, #0]
 8009aa8:	9a07      	ldr	r2, [sp, #28]
 8009aaa:	9904      	ldr	r1, [sp, #16]
 8009aac:	9806      	ldr	r0, [sp, #24]
 8009aae:	f003 ff63 	bl	800d978 <uxr_receive_reliable_message>
 8009ab2:	b308      	cbz	r0, 8009af8 <wait_session_status+0x150>
 8009ab4:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d041      	beq.n	8009b40 <wait_session_status+0x198>
 8009abc:	f8cd 8010 	str.w	r8, [sp, #16]
 8009ac0:	9507      	str	r5, [sp, #28]
 8009ac2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009ac6:	9d06      	ldr	r5, [sp, #24]
 8009ac8:	f04f 0902 	mov.w	r9, #2
 8009acc:	e00a      	b.n	8009ae4 <wait_session_status+0x13c>
 8009ace:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 8009ad2:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 8009ad6:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8009ada:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009adc:	a916      	add	r1, sp, #88	@ 0x58
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f7ff fc3e 	bl	8009360 <read_submessage_list>
 8009ae4:	2204      	movs	r2, #4
 8009ae6:	a916      	add	r1, sp, #88	@ 0x58
 8009ae8:	4628      	mov	r0, r5
 8009aea:	f003 ffbf 	bl	800da6c <uxr_next_input_reliable_buffer_available>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d1ed      	bne.n	8009ace <wait_session_status+0x126>
 8009af2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009af6:	9d07      	ldr	r5, [sp, #28]
 8009af8:	9903      	ldr	r1, [sp, #12]
 8009afa:	4632      	mov	r2, r6
 8009afc:	4620      	mov	r0, r4
 8009afe:	f7ff fad5 	bl	80090ac <write_submessage_acknack.isra.0>
 8009b02:	e76c      	b.n	80099de <wait_session_status+0x36>
 8009b04:	4631      	mov	r1, r6
 8009b06:	f104 0008 	add.w	r0, r4, #8
 8009b0a:	f000 fb89 	bl	800a220 <uxr_get_input_best_effort_stream>
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	f43f af65 	beq.w	80099de <wait_session_status+0x36>
 8009b14:	9904      	ldr	r1, [sp, #16]
 8009b16:	f003 fe9f 	bl	800d858 <uxr_receive_best_effort_message>
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	f43f af5f 	beq.w	80099de <wait_session_status+0x36>
 8009b20:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8009b24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b26:	a90e      	add	r1, sp, #56	@ 0x38
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f7ff fc19 	bl	8009360 <read_submessage_list>
 8009b2e:	e756      	b.n	80099de <wait_session_status+0x36>
 8009b30:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009b32:	e9d3 0400 	ldrd	r0, r4, [r3]
 8009b36:	47a0      	blx	r4
 8009b38:	2001      	movs	r0, #1
 8009b3a:	b01f      	add	sp, #124	@ 0x7c
 8009b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b40:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8009b44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b46:	a90e      	add	r1, sp, #56	@ 0x38
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f7ff fc09 	bl	8009360 <read_submessage_list>
 8009b4e:	e7b5      	b.n	8009abc <wait_session_status+0x114>

08009b50 <uxr_delete_session_retries>:
 8009b50:	b530      	push	{r4, r5, lr}
 8009b52:	b08f      	sub	sp, #60	@ 0x3c
 8009b54:	4604      	mov	r4, r0
 8009b56:	460d      	mov	r5, r1
 8009b58:	f000 fa3a 	bl	8009fd0 <uxr_session_header_offset>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	2210      	movs	r2, #16
 8009b60:	9000      	str	r0, [sp, #0]
 8009b62:	a902      	add	r1, sp, #8
 8009b64:	a806      	add	r0, sp, #24
 8009b66:	f7ff f857 	bl	8008c18 <ucdr_init_buffer_origin_offset>
 8009b6a:	a906      	add	r1, sp, #24
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	f000 f981 	bl	8009e74 <uxr_buffer_delete_session>
 8009b72:	2200      	movs	r2, #0
 8009b74:	4611      	mov	r1, r2
 8009b76:	9b06      	ldr	r3, [sp, #24]
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f000 f9d5 	bl	8009f28 <uxr_stamp_session_header>
 8009b7e:	a806      	add	r0, sp, #24
 8009b80:	f7ff f888 	bl	8008c94 <ucdr_buffer_length>
 8009b84:	462b      	mov	r3, r5
 8009b86:	4602      	mov	r2, r0
 8009b88:	a902      	add	r1, sp, #8
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f7ff ff0c 	bl	80099a8 <wait_session_status>
 8009b90:	b118      	cbz	r0, 8009b9a <uxr_delete_session_retries+0x4a>
 8009b92:	7960      	ldrb	r0, [r4, #5]
 8009b94:	fab0 f080 	clz	r0, r0
 8009b98:	0940      	lsrs	r0, r0, #5
 8009b9a:	b00f      	add	sp, #60	@ 0x3c
 8009b9c:	bd30      	pop	{r4, r5, pc}
 8009b9e:	bf00      	nop

08009ba0 <uxr_create_session>:
 8009ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba4:	f100 0308 	add.w	r3, r0, #8
 8009ba8:	b0ab      	sub	sp, #172	@ 0xac
 8009baa:	4604      	mov	r4, r0
 8009bac:	4618      	mov	r0, r3
 8009bae:	9303      	str	r3, [sp, #12]
 8009bb0:	f000 fa86 	bl	800a0c0 <uxr_reset_stream_storage>
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f000 fa0b 	bl	8009fd0 <uxr_session_header_offset>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	9000      	str	r0, [sp, #0]
 8009bbe:	221c      	movs	r2, #28
 8009bc0:	a90b      	add	r1, sp, #44	@ 0x2c
 8009bc2:	a812      	add	r0, sp, #72	@ 0x48
 8009bc4:	f7ff f828 	bl	8008c18 <ucdr_init_buffer_origin_offset>
 8009bc8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009bca:	8a1a      	ldrh	r2, [r3, #16]
 8009bcc:	3a04      	subs	r2, #4
 8009bce:	b292      	uxth	r2, r2
 8009bd0:	a912      	add	r1, sp, #72	@ 0x48
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f000 f924 	bl	8009e20 <uxr_buffer_create_session>
 8009bd8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 f990 	bl	8009f00 <uxr_stamp_create_session_header>
 8009be0:	a812      	add	r0, sp, #72	@ 0x48
 8009be2:	f7ff f857 	bl	8008c94 <ucdr_buffer_length>
 8009be6:	23ff      	movs	r3, #255	@ 0xff
 8009be8:	4683      	mov	fp, r0
 8009bea:	7163      	strb	r3, [r4, #5]
 8009bec:	f04f 080a 	mov.w	r8, #10
 8009bf0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009bf2:	465a      	mov	r2, fp
 8009bf4:	e9d3 0500 	ldrd	r0, r5, [r3]
 8009bf8:	a90b      	add	r1, sp, #44	@ 0x2c
 8009bfa:	47a8      	blx	r5
 8009bfc:	f000 fb80 	bl	800a300 <uxr_millis>
 8009c00:	2700      	movs	r7, #0
 8009c02:	4605      	mov	r5, r0
 8009c04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009c08:	e009      	b.n	8009c1e <uxr_create_session+0x7e>
 8009c0a:	f000 fb79 	bl	800a300 <uxr_millis>
 8009c0e:	1b43      	subs	r3, r0, r5
 8009c10:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	7962      	ldrb	r2, [r4, #5]
 8009c18:	dd3d      	ble.n	8009c96 <uxr_create_session+0xf6>
 8009c1a:	2aff      	cmp	r2, #255	@ 0xff
 8009c1c:	d13b      	bne.n	8009c96 <uxr_create_session+0xf6>
 8009c1e:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8009c20:	a907      	add	r1, sp, #28
 8009c22:	6896      	ldr	r6, [r2, #8]
 8009c24:	6810      	ldr	r0, [r2, #0]
 8009c26:	aa08      	add	r2, sp, #32
 8009c28:	47b0      	blx	r6
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d0ed      	beq.n	8009c0a <uxr_create_session+0x6a>
 8009c2e:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8009c32:	a81a      	add	r0, sp, #104	@ 0x68
 8009c34:	f7ff f802 	bl	8008c3c <ucdr_init_buffer>
 8009c38:	f10d 031a 	add.w	r3, sp, #26
 8009c3c:	aa06      	add	r2, sp, #24
 8009c3e:	a91a      	add	r1, sp, #104	@ 0x68
 8009c40:	4620      	mov	r0, r4
 8009c42:	f88d 7018 	strb.w	r7, [sp, #24]
 8009c46:	f000 f985 	bl	8009f54 <uxr_read_session_header>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	d0dd      	beq.n	8009c0a <uxr_create_session+0x6a>
 8009c4e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8009c52:	2100      	movs	r1, #0
 8009c54:	f000 fa0e 	bl	800a074 <uxr_stream_id_from_raw>
 8009c58:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8009c5c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8009c60:	9302      	str	r3, [sp, #8]
 8009c62:	f1b9 0f01 	cmp.w	r9, #1
 8009c66:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8009c6a:	fa5f fa80 	uxtb.w	sl, r0
 8009c6e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8009c72:	d056      	beq.n	8009d22 <uxr_create_session+0x182>
 8009c74:	f1b9 0f02 	cmp.w	r9, #2
 8009c78:	d018      	beq.n	8009cac <uxr_create_session+0x10c>
 8009c7a:	f1b9 0f00 	cmp.w	r9, #0
 8009c7e:	d1c4      	bne.n	8009c0a <uxr_create_session+0x6a>
 8009c80:	4649      	mov	r1, r9
 8009c82:	4648      	mov	r0, r9
 8009c84:	f000 f9f6 	bl	800a074 <uxr_stream_id_from_raw>
 8009c88:	a91a      	add	r1, sp, #104	@ 0x68
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f7ff fb66 	bl	8009360 <read_submessage_list>
 8009c94:	e7b9      	b.n	8009c0a <uxr_create_session+0x6a>
 8009c96:	f1b8 0801 	subs.w	r8, r8, #1
 8009c9a:	d001      	beq.n	8009ca0 <uxr_create_session+0x100>
 8009c9c:	2aff      	cmp	r2, #255	@ 0xff
 8009c9e:	d0a7      	beq.n	8009bf0 <uxr_create_session+0x50>
 8009ca0:	2a00      	cmp	r2, #0
 8009ca2:	d05b      	beq.n	8009d5c <uxr_create_session+0x1bc>
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	b02b      	add	sp, #172	@ 0xac
 8009ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cac:	9803      	ldr	r0, [sp, #12]
 8009cae:	4631      	mov	r1, r6
 8009cb0:	f000 fac0 	bl	800a234 <uxr_get_input_reliable_stream>
 8009cb4:	9004      	str	r0, [sp, #16]
 8009cb6:	b370      	cbz	r0, 8009d16 <uxr_create_session+0x176>
 8009cb8:	aa1a      	add	r2, sp, #104	@ 0x68
 8009cba:	4610      	mov	r0, r2
 8009cbc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009cbe:	9205      	str	r2, [sp, #20]
 8009cc0:	f7fe ffec 	bl	8008c9c <ucdr_buffer_remaining>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	f10d 0019 	add.w	r0, sp, #25
 8009cca:	9000      	str	r0, [sp, #0]
 8009ccc:	9a05      	ldr	r2, [sp, #20]
 8009cce:	9902      	ldr	r1, [sp, #8]
 8009cd0:	9804      	ldr	r0, [sp, #16]
 8009cd2:	f003 fe51 	bl	800d978 <uxr_receive_reliable_message>
 8009cd6:	b1f0      	cbz	r0, 8009d16 <uxr_create_session+0x176>
 8009cd8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d035      	beq.n	8009d4c <uxr_create_session+0x1ac>
 8009ce0:	f8cd b008 	str.w	fp, [sp, #8]
 8009ce4:	f04f 0902 	mov.w	r9, #2
 8009ce8:	f8dd b010 	ldr.w	fp, [sp, #16]
 8009cec:	e00a      	b.n	8009d04 <uxr_create_session+0x164>
 8009cee:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 8009cf2:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8009cf6:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8009cfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009cfc:	a922      	add	r1, sp, #136	@ 0x88
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f7ff fb2e 	bl	8009360 <read_submessage_list>
 8009d04:	2204      	movs	r2, #4
 8009d06:	a922      	add	r1, sp, #136	@ 0x88
 8009d08:	4658      	mov	r0, fp
 8009d0a:	f003 feaf 	bl	800da6c <uxr_next_input_reliable_buffer_available>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	d1ed      	bne.n	8009cee <uxr_create_session+0x14e>
 8009d12:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009d16:	4632      	mov	r2, r6
 8009d18:	4651      	mov	r1, sl
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f7ff f9c6 	bl	80090ac <write_submessage_acknack.isra.0>
 8009d20:	e773      	b.n	8009c0a <uxr_create_session+0x6a>
 8009d22:	9803      	ldr	r0, [sp, #12]
 8009d24:	4631      	mov	r1, r6
 8009d26:	f000 fa7b 	bl	800a220 <uxr_get_input_best_effort_stream>
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	f43f af6d 	beq.w	8009c0a <uxr_create_session+0x6a>
 8009d30:	9902      	ldr	r1, [sp, #8]
 8009d32:	f003 fd91 	bl	800d858 <uxr_receive_best_effort_message>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	f43f af67 	beq.w	8009c0a <uxr_create_session+0x6a>
 8009d3c:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8009d40:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d42:	a91a      	add	r1, sp, #104	@ 0x68
 8009d44:	4620      	mov	r0, r4
 8009d46:	f7ff fb0b 	bl	8009360 <read_submessage_list>
 8009d4a:	e75e      	b.n	8009c0a <uxr_create_session+0x6a>
 8009d4c:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8009d50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d52:	a91a      	add	r1, sp, #104	@ 0x68
 8009d54:	4620      	mov	r0, r4
 8009d56:	f7ff fb03 	bl	8009360 <read_submessage_list>
 8009d5a:	e7c1      	b.n	8009ce0 <uxr_create_session+0x140>
 8009d5c:	9803      	ldr	r0, [sp, #12]
 8009d5e:	f000 f9af 	bl	800a0c0 <uxr_reset_stream_storage>
 8009d62:	2001      	movs	r0, #1
 8009d64:	b02b      	add	sp, #172	@ 0xac
 8009d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6a:	bf00      	nop

08009d6c <uxr_prepare_stream_to_write_submessage>:
 8009d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d70:	b082      	sub	sp, #8
 8009d72:	4606      	mov	r6, r0
 8009d74:	4610      	mov	r0, r2
 8009d76:	4614      	mov	r4, r2
 8009d78:	9101      	str	r1, [sp, #4]
 8009d7a:	461f      	mov	r7, r3
 8009d7c:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8009d80:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8009d84:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8009d88:	f000 fab4 	bl	800a2f4 <uxr_submessage_padding>
 8009d8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009d90:	1d21      	adds	r1, r4, #4
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	eb01 0a00 	add.w	sl, r1, r0
 8009d98:	d012      	beq.n	8009dc0 <uxr_prepare_stream_to_write_submessage+0x54>
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	d003      	beq.n	8009da6 <uxr_prepare_stream_to_write_submessage+0x3a>
 8009d9e:	2000      	movs	r0, #0
 8009da0:	b002      	add	sp, #8
 8009da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da6:	4629      	mov	r1, r5
 8009da8:	f106 0008 	add.w	r0, r6, #8
 8009dac:	f000 fa2e 	bl	800a20c <uxr_get_output_reliable_stream>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d0f4      	beq.n	8009d9e <uxr_prepare_stream_to_write_submessage+0x32>
 8009db4:	4651      	mov	r1, sl
 8009db6:	463a      	mov	r2, r7
 8009db8:	f004 f80e 	bl	800ddd8 <uxr_prepare_reliable_buffer_to_write>
 8009dbc:	b968      	cbnz	r0, 8009dda <uxr_prepare_stream_to_write_submessage+0x6e>
 8009dbe:	e7ee      	b.n	8009d9e <uxr_prepare_stream_to_write_submessage+0x32>
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	f106 0008 	add.w	r0, r6, #8
 8009dc6:	f000 fa19 	bl	800a1fc <uxr_get_output_best_effort_stream>
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	d0e7      	beq.n	8009d9e <uxr_prepare_stream_to_write_submessage+0x32>
 8009dce:	4651      	mov	r1, sl
 8009dd0:	463a      	mov	r2, r7
 8009dd2:	f003 ff33 	bl	800dc3c <uxr_prepare_best_effort_buffer_to_write>
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d0e1      	beq.n	8009d9e <uxr_prepare_stream_to_write_submessage+0x32>
 8009dda:	464b      	mov	r3, r9
 8009ddc:	b2a2      	uxth	r2, r4
 8009dde:	4641      	mov	r1, r8
 8009de0:	4638      	mov	r0, r7
 8009de2:	f000 fa47 	bl	800a274 <uxr_buffer_submessage_header>
 8009de6:	2001      	movs	r0, #1
 8009de8:	b002      	add	sp, #8
 8009dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dee:	bf00      	nop

08009df0 <uxr_init_session_info>:
 8009df0:	2300      	movs	r3, #0
 8009df2:	f361 0307 	bfi	r3, r1, #0, #8
 8009df6:	0e11      	lsrs	r1, r2, #24
 8009df8:	f361 230f 	bfi	r3, r1, #8, #8
 8009dfc:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8009e00:	f361 4317 	bfi	r3, r1, #16, #8
 8009e04:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009e08:	f361 631f 	bfi	r3, r1, #24, #8
 8009e0c:	f04f 0c09 	mov.w	ip, #9
 8009e10:	21ff      	movs	r1, #255	@ 0xff
 8009e12:	6003      	str	r3, [r0, #0]
 8009e14:	7102      	strb	r2, [r0, #4]
 8009e16:	f8a0 c006 	strh.w	ip, [r0, #6]
 8009e1a:	7141      	strb	r1, [r0, #5]
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop

08009e20 <uxr_buffer_create_session>:
 8009e20:	b530      	push	{r4, r5, lr}
 8009e22:	4d13      	ldr	r5, [pc, #76]	@ (8009e70 <uxr_buffer_create_session+0x50>)
 8009e24:	b089      	sub	sp, #36	@ 0x24
 8009e26:	2300      	movs	r3, #0
 8009e28:	9307      	str	r3, [sp, #28]
 8009e2a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8009e2e:	682a      	ldr	r2, [r5, #0]
 8009e30:	9200      	str	r2, [sp, #0]
 8009e32:	460c      	mov	r4, r1
 8009e34:	2201      	movs	r2, #1
 8009e36:	88a9      	ldrh	r1, [r5, #4]
 8009e38:	9301      	str	r3, [sp, #4]
 8009e3a:	80c2      	strh	r2, [r0, #6]
 8009e3c:	f8ad 1006 	strh.w	r1, [sp, #6]
 8009e40:	f8d0 1001 	ldr.w	r1, [r0, #1]
 8009e44:	7800      	ldrb	r0, [r0, #0]
 8009e46:	9303      	str	r3, [sp, #12]
 8009e48:	f88d 2004 	strb.w	r2, [sp, #4]
 8009e4c:	9102      	str	r1, [sp, #8]
 8009e4e:	2210      	movs	r2, #16
 8009e50:	4619      	mov	r1, r3
 8009e52:	f88d 000c 	strb.w	r0, [sp, #12]
 8009e56:	4620      	mov	r0, r4
 8009e58:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8009e5c:	9306      	str	r3, [sp, #24]
 8009e5e:	f000 fa09 	bl	800a274 <uxr_buffer_submessage_header>
 8009e62:	4669      	mov	r1, sp
 8009e64:	4620      	mov	r0, r4
 8009e66:	f001 f93b 	bl	800b0e0 <uxr_serialize_CREATE_CLIENT_Payload>
 8009e6a:	b009      	add	sp, #36	@ 0x24
 8009e6c:	bd30      	pop	{r4, r5, pc}
 8009e6e:	bf00      	nop
 8009e70:	08011294 	.word	0x08011294

08009e74 <uxr_buffer_delete_session>:
 8009e74:	b510      	push	{r4, lr}
 8009e76:	4a0c      	ldr	r2, [pc, #48]	@ (8009ea8 <uxr_buffer_delete_session+0x34>)
 8009e78:	b082      	sub	sp, #8
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	2302      	movs	r3, #2
 8009e7e:	8911      	ldrh	r1, [r2, #8]
 8009e80:	80c3      	strh	r3, [r0, #6]
 8009e82:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8009e86:	2300      	movs	r3, #0
 8009e88:	2204      	movs	r2, #4
 8009e8a:	f8ad 1006 	strh.w	r1, [sp, #6]
 8009e8e:	4620      	mov	r0, r4
 8009e90:	2103      	movs	r1, #3
 8009e92:	f8ad c004 	strh.w	ip, [sp, #4]
 8009e96:	f000 f9ed 	bl	800a274 <uxr_buffer_submessage_header>
 8009e9a:	a901      	add	r1, sp, #4
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f001 f9c3 	bl	800b228 <uxr_serialize_DELETE_Payload>
 8009ea2:	b002      	add	sp, #8
 8009ea4:	bd10      	pop	{r4, pc}
 8009ea6:	bf00      	nop
 8009ea8:	08011294 	.word	0x08011294

08009eac <uxr_read_create_session_status>:
 8009eac:	b510      	push	{r4, lr}
 8009eae:	460b      	mov	r3, r1
 8009eb0:	b088      	sub	sp, #32
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	a901      	add	r1, sp, #4
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f001 f9c6 	bl	800b248 <uxr_deserialize_STATUS_AGENT_Payload>
 8009ebc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009ec0:	7163      	strb	r3, [r4, #5]
 8009ec2:	b008      	add	sp, #32
 8009ec4:	bd10      	pop	{r4, pc}
 8009ec6:	bf00      	nop

08009ec8 <uxr_read_delete_session_status>:
 8009ec8:	b510      	push	{r4, lr}
 8009eca:	460b      	mov	r3, r1
 8009ecc:	b082      	sub	sp, #8
 8009ece:	4604      	mov	r4, r0
 8009ed0:	4669      	mov	r1, sp
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f001 f9e8 	bl	800b2a8 <uxr_deserialize_STATUS_Payload>
 8009ed8:	88e3      	ldrh	r3, [r4, #6]
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d001      	beq.n	8009ee2 <uxr_read_delete_session_status+0x1a>
 8009ede:	b002      	add	sp, #8
 8009ee0:	bd10      	pop	{r4, pc}
 8009ee2:	f10d 0002 	add.w	r0, sp, #2
 8009ee6:	f7ff f869 	bl	8008fbc <uxr_object_id_from_raw>
 8009eea:	f8bd 3000 	ldrh.w	r3, [sp]
 8009eee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009ef2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ef6:	bf08      	it	eq
 8009ef8:	7162      	strbeq	r2, [r4, #5]
 8009efa:	b002      	add	sp, #8
 8009efc:	bd10      	pop	{r4, pc}
 8009efe:	bf00      	nop

08009f00 <uxr_stamp_create_session_header>:
 8009f00:	b510      	push	{r4, lr}
 8009f02:	2208      	movs	r2, #8
 8009f04:	b08a      	sub	sp, #40	@ 0x28
 8009f06:	4604      	mov	r4, r0
 8009f08:	eb0d 0002 	add.w	r0, sp, r2
 8009f0c:	f7fe fe96 	bl	8008c3c <ucdr_init_buffer>
 8009f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f14:	9400      	str	r4, [sp, #0]
 8009f16:	2300      	movs	r3, #0
 8009f18:	461a      	mov	r2, r3
 8009f1a:	a802      	add	r0, sp, #8
 8009f1c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8009f20:	f000 fba6 	bl	800a670 <uxr_serialize_message_header>
 8009f24:	b00a      	add	sp, #40	@ 0x28
 8009f26:	bd10      	pop	{r4, pc}

08009f28 <uxr_stamp_session_header>:
 8009f28:	b570      	push	{r4, r5, r6, lr}
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	b08a      	sub	sp, #40	@ 0x28
 8009f2e:	4616      	mov	r6, r2
 8009f30:	2208      	movs	r2, #8
 8009f32:	eb0d 0002 	add.w	r0, sp, r2
 8009f36:	460d      	mov	r5, r1
 8009f38:	4619      	mov	r1, r3
 8009f3a:	f7fe fe7f 	bl	8008c3c <ucdr_init_buffer>
 8009f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f42:	9400      	str	r4, [sp, #0]
 8009f44:	4633      	mov	r3, r6
 8009f46:	462a      	mov	r2, r5
 8009f48:	a802      	add	r0, sp, #8
 8009f4a:	f000 fb91 	bl	800a670 <uxr_serialize_message_header>
 8009f4e:	b00a      	add	sp, #40	@ 0x28
 8009f50:	bd70      	pop	{r4, r5, r6, pc}
 8009f52:	bf00      	nop

08009f54 <uxr_read_session_header>:
 8009f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f56:	4607      	mov	r7, r0
 8009f58:	b085      	sub	sp, #20
 8009f5a:	4608      	mov	r0, r1
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	4615      	mov	r5, r2
 8009f60:	461e      	mov	r6, r3
 8009f62:	f7fe fe9b 	bl	8008c9c <ucdr_buffer_remaining>
 8009f66:	2808      	cmp	r0, #8
 8009f68:	d802      	bhi.n	8009f70 <uxr_read_session_header+0x1c>
 8009f6a:	2000      	movs	r0, #0
 8009f6c:	b005      	add	sp, #20
 8009f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f70:	ab03      	add	r3, sp, #12
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	462a      	mov	r2, r5
 8009f76:	4633      	mov	r3, r6
 8009f78:	f10d 010b 	add.w	r1, sp, #11
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f000 fb95 	bl	800a6ac <uxr_deserialize_message_header>
 8009f82:	783a      	ldrb	r2, [r7, #0]
 8009f84:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d1ee      	bne.n	8009f6a <uxr_read_session_header+0x16>
 8009f8c:	061b      	lsls	r3, r3, #24
 8009f8e:	d41c      	bmi.n	8009fca <uxr_read_session_header+0x76>
 8009f90:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8009f94:	787b      	ldrb	r3, [r7, #1]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d003      	beq.n	8009fa2 <uxr_read_session_header+0x4e>
 8009f9a:	2001      	movs	r0, #1
 8009f9c:	f080 0001 	eor.w	r0, r0, #1
 8009fa0:	e7e4      	b.n	8009f6c <uxr_read_session_header+0x18>
 8009fa2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8009fa6:	78bb      	ldrb	r3, [r7, #2]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	f107 0102 	add.w	r1, r7, #2
 8009fae:	d1f4      	bne.n	8009f9a <uxr_read_session_header+0x46>
 8009fb0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8009fb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d1ee      	bne.n	8009f9a <uxr_read_session_header+0x46>
 8009fbc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8009fc0:	784b      	ldrb	r3, [r1, #1]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d1e9      	bne.n	8009f9a <uxr_read_session_header+0x46>
 8009fc6:	2000      	movs	r0, #0
 8009fc8:	e7e8      	b.n	8009f9c <uxr_read_session_header+0x48>
 8009fca:	2001      	movs	r0, #1
 8009fcc:	e7ce      	b.n	8009f6c <uxr_read_session_header+0x18>
 8009fce:	bf00      	nop

08009fd0 <uxr_session_header_offset>:
 8009fd0:	f990 3000 	ldrsb.w	r3, [r0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	bfb4      	ite	lt
 8009fd8:	2004      	movlt	r0, #4
 8009fda:	2008      	movge	r0, #8
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop

08009fe0 <uxr_init_base_object_request>:
 8009fe0:	b510      	push	{r4, lr}
 8009fe2:	88c3      	ldrh	r3, [r0, #6]
 8009fe4:	b082      	sub	sp, #8
 8009fe6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8009fea:	9101      	str	r1, [sp, #4]
 8009fec:	f1a3 010a 	sub.w	r1, r3, #10
 8009ff0:	b289      	uxth	r1, r1
 8009ff2:	42a1      	cmp	r1, r4
 8009ff4:	d80e      	bhi.n	800a014 <uxr_init_base_object_request+0x34>
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	b29c      	uxth	r4, r3
 8009ffa:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	80c4      	strh	r4, [r0, #6]
 800a002:	9801      	ldr	r0, [sp, #4]
 800a004:	7011      	strb	r1, [r2, #0]
 800a006:	7053      	strb	r3, [r2, #1]
 800a008:	1c91      	adds	r1, r2, #2
 800a00a:	f7fe ffeb 	bl	8008fe4 <uxr_object_id_to_raw>
 800a00e:	4620      	mov	r0, r4
 800a010:	b002      	add	sp, #8
 800a012:	bd10      	pop	{r4, pc}
 800a014:	230a      	movs	r3, #10
 800a016:	2100      	movs	r1, #0
 800a018:	461c      	mov	r4, r3
 800a01a:	e7f1      	b.n	800a000 <uxr_init_base_object_request+0x20>

0800a01c <uxr_parse_base_object_request>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	4604      	mov	r4, r0
 800a020:	3002      	adds	r0, #2
 800a022:	460d      	mov	r5, r1
 800a024:	4616      	mov	r6, r2
 800a026:	f7fe ffc9 	bl	8008fbc <uxr_object_id_from_raw>
 800a02a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800a02e:	8028      	strh	r0, [r5, #0]
 800a030:	806b      	strh	r3, [r5, #2]
 800a032:	8823      	ldrh	r3, [r4, #0]
 800a034:	ba5b      	rev16	r3, r3
 800a036:	8033      	strh	r3, [r6, #0]
 800a038:	bd70      	pop	{r4, r5, r6, pc}
 800a03a:	bf00      	nop

0800a03c <uxr_stream_id>:
 800a03c:	2901      	cmp	r1, #1
 800a03e:	b082      	sub	sp, #8
 800a040:	4603      	mov	r3, r0
 800a042:	d011      	beq.n	800a068 <uxr_stream_id+0x2c>
 800a044:	2902      	cmp	r1, #2
 800a046:	f04f 0c00 	mov.w	ip, #0
 800a04a:	d00a      	beq.n	800a062 <uxr_stream_id+0x26>
 800a04c:	2000      	movs	r0, #0
 800a04e:	f36c 0007 	bfi	r0, ip, #0, #8
 800a052:	f363 200f 	bfi	r0, r3, #8, #8
 800a056:	f361 4017 	bfi	r0, r1, #16, #8
 800a05a:	f362 601f 	bfi	r0, r2, #24, #8
 800a05e:	b002      	add	sp, #8
 800a060:	4770      	bx	lr
 800a062:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800a066:	e7f1      	b.n	800a04c <uxr_stream_id+0x10>
 800a068:	f100 0c01 	add.w	ip, r0, #1
 800a06c:	fa5f fc8c 	uxtb.w	ip, ip
 800a070:	e7ec      	b.n	800a04c <uxr_stream_id+0x10>
 800a072:	bf00      	nop

0800a074 <uxr_stream_id_from_raw>:
 800a074:	b082      	sub	sp, #8
 800a076:	4603      	mov	r3, r0
 800a078:	b130      	cbz	r0, 800a088 <uxr_stream_id_from_raw+0x14>
 800a07a:	0602      	lsls	r2, r0, #24
 800a07c:	d411      	bmi.n	800a0a2 <uxr_stream_id_from_raw+0x2e>
 800a07e:	1e42      	subs	r2, r0, #1
 800a080:	b2d2      	uxtb	r2, r2
 800a082:	f04f 0c01 	mov.w	ip, #1
 800a086:	e001      	b.n	800a08c <uxr_stream_id_from_raw+0x18>
 800a088:	4684      	mov	ip, r0
 800a08a:	4602      	mov	r2, r0
 800a08c:	2000      	movs	r0, #0
 800a08e:	f363 0007 	bfi	r0, r3, #0, #8
 800a092:	f362 200f 	bfi	r0, r2, #8, #8
 800a096:	f36c 4017 	bfi	r0, ip, #16, #8
 800a09a:	f361 601f 	bfi	r0, r1, #24, #8
 800a09e:	b002      	add	sp, #8
 800a0a0:	4770      	bx	lr
 800a0a2:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800a0a6:	f04f 0c02 	mov.w	ip, #2
 800a0aa:	e7ef      	b.n	800a08c <uxr_stream_id_from_raw+0x18>

0800a0ac <uxr_init_stream_storage>:
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	7403      	strb	r3, [r0, #16]
 800a0b0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800a0b4:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800a0b8:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop

0800a0c0 <uxr_reset_stream_storage>:
 800a0c0:	b570      	push	{r4, r5, r6, lr}
 800a0c2:	7c03      	ldrb	r3, [r0, #16]
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	b153      	cbz	r3, 800a0de <uxr_reset_stream_storage+0x1e>
 800a0c8:	4606      	mov	r6, r0
 800a0ca:	2500      	movs	r5, #0
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	f003 fdaf 	bl	800dc30 <uxr_reset_output_best_effort_stream>
 800a0d2:	7c23      	ldrb	r3, [r4, #16]
 800a0d4:	3501      	adds	r5, #1
 800a0d6:	42ab      	cmp	r3, r5
 800a0d8:	f106 0610 	add.w	r6, r6, #16
 800a0dc:	d8f6      	bhi.n	800a0cc <uxr_reset_stream_storage+0xc>
 800a0de:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a0e2:	b163      	cbz	r3, 800a0fe <uxr_reset_stream_storage+0x3e>
 800a0e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0e8:	2500      	movs	r5, #0
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f003 fbb0 	bl	800d850 <uxr_reset_input_best_effort_stream>
 800a0f0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a0f4:	3501      	adds	r5, #1
 800a0f6:	42ab      	cmp	r3, r5
 800a0f8:	f106 0602 	add.w	r6, r6, #2
 800a0fc:	d8f5      	bhi.n	800a0ea <uxr_reset_stream_storage+0x2a>
 800a0fe:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800a102:	b163      	cbz	r3, 800a11e <uxr_reset_stream_storage+0x5e>
 800a104:	f104 0618 	add.w	r6, r4, #24
 800a108:	2500      	movs	r5, #0
 800a10a:	4630      	mov	r0, r6
 800a10c:	f003 fe3a 	bl	800dd84 <uxr_reset_output_reliable_stream>
 800a110:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800a114:	3501      	adds	r5, #1
 800a116:	42ab      	cmp	r3, r5
 800a118:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800a11c:	d8f5      	bhi.n	800a10a <uxr_reset_stream_storage+0x4a>
 800a11e:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800a122:	b163      	cbz	r3, 800a13e <uxr_reset_stream_storage+0x7e>
 800a124:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800a128:	2500      	movs	r5, #0
 800a12a:	4630      	mov	r0, r6
 800a12c:	f003 fc00 	bl	800d930 <uxr_reset_input_reliable_stream>
 800a130:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800a134:	3501      	adds	r5, #1
 800a136:	42ab      	cmp	r3, r5
 800a138:	f106 0618 	add.w	r6, r6, #24
 800a13c:	d8f5      	bhi.n	800a12a <uxr_reset_stream_storage+0x6a>
 800a13e:	bd70      	pop	{r4, r5, r6, pc}

0800a140 <uxr_add_output_best_effort_buffer>:
 800a140:	b510      	push	{r4, lr}
 800a142:	7c04      	ldrb	r4, [r0, #16]
 800a144:	f104 0c01 	add.w	ip, r4, #1
 800a148:	b082      	sub	sp, #8
 800a14a:	f880 c010 	strb.w	ip, [r0, #16]
 800a14e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800a152:	f003 fd63 	bl	800dc1c <uxr_init_output_best_effort_stream>
 800a156:	2201      	movs	r2, #1
 800a158:	4611      	mov	r1, r2
 800a15a:	4620      	mov	r0, r4
 800a15c:	b002      	add	sp, #8
 800a15e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a162:	f7ff bf6b 	b.w	800a03c <uxr_stream_id>
 800a166:	bf00      	nop

0800a168 <uxr_add_output_reliable_buffer>:
 800a168:	b510      	push	{r4, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	4684      	mov	ip, r0
 800a16e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800a172:	9000      	str	r0, [sp, #0]
 800a174:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800a178:	2028      	movs	r0, #40	@ 0x28
 800a17a:	fb00 c004 	mla	r0, r0, r4, ip
 800a17e:	f104 0e01 	add.w	lr, r4, #1
 800a182:	3018      	adds	r0, #24
 800a184:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800a188:	f003 fdc4 	bl	800dd14 <uxr_init_output_reliable_stream>
 800a18c:	2201      	movs	r2, #1
 800a18e:	2102      	movs	r1, #2
 800a190:	4620      	mov	r0, r4
 800a192:	b004      	add	sp, #16
 800a194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a198:	f7ff bf50 	b.w	800a03c <uxr_stream_id>

0800a19c <uxr_add_input_best_effort_buffer>:
 800a19c:	b510      	push	{r4, lr}
 800a19e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800a1a2:	1c62      	adds	r2, r4, #1
 800a1a4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800a1a8:	b082      	sub	sp, #8
 800a1aa:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 800a1ae:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a1b2:	f003 fb49 	bl	800d848 <uxr_init_input_best_effort_stream>
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	b002      	add	sp, #8
 800a1be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1c2:	f7ff bf3b 	b.w	800a03c <uxr_stream_id>
 800a1c6:	bf00      	nop

0800a1c8 <uxr_add_input_reliable_buffer>:
 800a1c8:	b510      	push	{r4, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	4684      	mov	ip, r0
 800a1ce:	9806      	ldr	r0, [sp, #24]
 800a1d0:	9000      	str	r0, [sp, #0]
 800a1d2:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800a1d6:	2018      	movs	r0, #24
 800a1d8:	fb00 c004 	mla	r0, r0, r4, ip
 800a1dc:	f104 0e01 	add.w	lr, r4, #1
 800a1e0:	3048      	adds	r0, #72	@ 0x48
 800a1e2:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800a1e6:	f003 fb77 	bl	800d8d8 <uxr_init_input_reliable_stream>
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	2102      	movs	r1, #2
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	b004      	add	sp, #16
 800a1f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1f6:	f7ff bf21 	b.w	800a03c <uxr_stream_id>
 800a1fa:	bf00      	nop

0800a1fc <uxr_get_output_best_effort_stream>:
 800a1fc:	7c03      	ldrb	r3, [r0, #16]
 800a1fe:	428b      	cmp	r3, r1
 800a200:	bf8c      	ite	hi
 800a202:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800a206:	2000      	movls	r0, #0
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop

0800a20c <uxr_get_output_reliable_stream>:
 800a20c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a210:	428b      	cmp	r3, r1
 800a212:	bf83      	ittte	hi
 800a214:	2328      	movhi	r3, #40	@ 0x28
 800a216:	fb03 0001 	mlahi	r0, r3, r1, r0
 800a21a:	3018      	addhi	r0, #24
 800a21c:	2000      	movls	r0, #0
 800a21e:	4770      	bx	lr

0800a220 <uxr_get_input_best_effort_stream>:
 800a220:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a224:	428b      	cmp	r3, r1
 800a226:	bf86      	itte	hi
 800a228:	3121      	addhi	r1, #33	@ 0x21
 800a22a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800a22e:	2000      	movls	r0, #0
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop

0800a234 <uxr_get_input_reliable_stream>:
 800a234:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800a238:	428b      	cmp	r3, r1
 800a23a:	bf83      	ittte	hi
 800a23c:	2318      	movhi	r3, #24
 800a23e:	fb03 0001 	mlahi	r0, r3, r1, r0
 800a242:	3048      	addhi	r0, #72	@ 0x48
 800a244:	2000      	movls	r0, #0
 800a246:	4770      	bx	lr

0800a248 <uxr_output_streams_confirmed>:
 800a248:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a24c:	b183      	cbz	r3, 800a270 <uxr_output_streams_confirmed+0x28>
 800a24e:	b570      	push	{r4, r5, r6, lr}
 800a250:	4606      	mov	r6, r0
 800a252:	f100 0518 	add.w	r5, r0, #24
 800a256:	2400      	movs	r4, #0
 800a258:	e001      	b.n	800a25e <uxr_output_streams_confirmed+0x16>
 800a25a:	3528      	adds	r5, #40	@ 0x28
 800a25c:	b138      	cbz	r0, 800a26e <uxr_output_streams_confirmed+0x26>
 800a25e:	4628      	mov	r0, r5
 800a260:	f003 fff8 	bl	800e254 <uxr_is_output_up_to_date>
 800a264:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800a268:	3401      	adds	r4, #1
 800a26a:	42a3      	cmp	r3, r4
 800a26c:	d8f5      	bhi.n	800a25a <uxr_output_streams_confirmed+0x12>
 800a26e:	bd70      	pop	{r4, r5, r6, pc}
 800a270:	2001      	movs	r0, #1
 800a272:	4770      	bx	lr

0800a274 <uxr_buffer_submessage_header>:
 800a274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a276:	4604      	mov	r4, r0
 800a278:	460e      	mov	r6, r1
 800a27a:	2104      	movs	r1, #4
 800a27c:	4615      	mov	r5, r2
 800a27e:	461f      	mov	r7, r3
 800a280:	f7fe fcf6 	bl	8008c70 <ucdr_align_to>
 800a284:	2301      	movs	r3, #1
 800a286:	7523      	strb	r3, [r4, #20]
 800a288:	f047 0201 	orr.w	r2, r7, #1
 800a28c:	462b      	mov	r3, r5
 800a28e:	4631      	mov	r1, r6
 800a290:	4620      	mov	r0, r4
 800a292:	f000 fa2b 	bl	800a6ec <uxr_serialize_submessage_header>
 800a296:	4620      	mov	r0, r4
 800a298:	f7fe fd00 	bl	8008c9c <ucdr_buffer_remaining>
 800a29c:	42a8      	cmp	r0, r5
 800a29e:	bf34      	ite	cc
 800a2a0:	2000      	movcc	r0, #0
 800a2a2:	2001      	movcs	r0, #1
 800a2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2a6:	bf00      	nop

0800a2a8 <uxr_read_submessage_header>:
 800a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	460d      	mov	r5, r1
 800a2b0:	2104      	movs	r1, #4
 800a2b2:	4616      	mov	r6, r2
 800a2b4:	4698      	mov	r8, r3
 800a2b6:	f7fe fcdb 	bl	8008c70 <ucdr_align_to>
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f7fe fcee 	bl	8008c9c <ucdr_buffer_remaining>
 800a2c0:	2803      	cmp	r0, #3
 800a2c2:	bf8c      	ite	hi
 800a2c4:	2701      	movhi	r7, #1
 800a2c6:	2700      	movls	r7, #0
 800a2c8:	d802      	bhi.n	800a2d0 <uxr_read_submessage_header+0x28>
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d0:	4633      	mov	r3, r6
 800a2d2:	4642      	mov	r2, r8
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	f000 fa1a 	bl	800a710 <uxr_deserialize_submessage_header>
 800a2dc:	f898 3000 	ldrb.w	r3, [r8]
 800a2e0:	f003 0201 	and.w	r2, r3, #1
 800a2e4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a2e8:	f888 3000 	strb.w	r3, [r8]
 800a2ec:	7522      	strb	r2, [r4, #20]
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a2f4 <uxr_submessage_padding>:
 800a2f4:	f010 0003 	ands.w	r0, r0, #3
 800a2f8:	bf18      	it	ne
 800a2fa:	f1c0 0004 	rsbne	r0, r0, #4
 800a2fe:	4770      	bx	lr

0800a300 <uxr_millis>:
 800a300:	b510      	push	{r4, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	4669      	mov	r1, sp
 800a306:	2001      	movs	r0, #1
 800a308:	f7f6 fe8a 	bl	8001020 <clock_gettime>
 800a30c:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800a310:	4b06      	ldr	r3, [pc, #24]	@ (800a32c <uxr_millis+0x2c>)
 800a312:	fba0 0103 	umull	r0, r1, r0, r3
 800a316:	1900      	adds	r0, r0, r4
 800a318:	fb03 1102 	mla	r1, r3, r2, r1
 800a31c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800a320:	4a03      	ldr	r2, [pc, #12]	@ (800a330 <uxr_millis+0x30>)
 800a322:	2300      	movs	r3, #0
 800a324:	f7f5 ffc4 	bl	80002b0 <__aeabi_ldivmod>
 800a328:	b004      	add	sp, #16
 800a32a:	bd10      	pop	{r4, pc}
 800a32c:	3b9aca00 	.word	0x3b9aca00
 800a330:	000f4240 	.word	0x000f4240

0800a334 <uxr_nanos>:
 800a334:	b510      	push	{r4, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	4669      	mov	r1, sp
 800a33a:	2001      	movs	r0, #1
 800a33c:	f7f6 fe70 	bl	8001020 <clock_gettime>
 800a340:	4a06      	ldr	r2, [pc, #24]	@ (800a35c <uxr_nanos+0x28>)
 800a342:	9800      	ldr	r0, [sp, #0]
 800a344:	9902      	ldr	r1, [sp, #8]
 800a346:	9c01      	ldr	r4, [sp, #4]
 800a348:	fba0 0302 	umull	r0, r3, r0, r2
 800a34c:	1840      	adds	r0, r0, r1
 800a34e:	fb02 3304 	mla	r3, r2, r4, r3
 800a352:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800a356:	b004      	add	sp, #16
 800a358:	bd10      	pop	{r4, pc}
 800a35a:	bf00      	nop
 800a35c:	3b9aca00 	.word	0x3b9aca00

0800a360 <on_full_output_buffer_fragmented>:
 800a360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a364:	460c      	mov	r4, r1
 800a366:	b08a      	sub	sp, #40	@ 0x28
 800a368:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800a36c:	4606      	mov	r6, r0
 800a36e:	f104 0008 	add.w	r0, r4, #8
 800a372:	f7ff ff4b 	bl	800a20c <uxr_get_output_reliable_stream>
 800a376:	4605      	mov	r5, r0
 800a378:	f003 ff76 	bl	800e268 <get_available_free_slots>
 800a37c:	b968      	cbnz	r0, 800a39a <on_full_output_buffer_fragmented+0x3a>
 800a37e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800a382:	4620      	mov	r0, r4
 800a384:	4798      	blx	r3
 800a386:	b918      	cbnz	r0, 800a390 <on_full_output_buffer_fragmented+0x30>
 800a388:	2001      	movs	r0, #1
 800a38a:	b00a      	add	sp, #40	@ 0x28
 800a38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a390:	4628      	mov	r0, r5
 800a392:	f003 ff69 	bl	800e268 <get_available_free_slots>
 800a396:	2800      	cmp	r0, #0
 800a398:	d0f6      	beq.n	800a388 <on_full_output_buffer_fragmented+0x28>
 800a39a:	892a      	ldrh	r2, [r5, #8]
 800a39c:	686b      	ldr	r3, [r5, #4]
 800a39e:	fbb3 f8f2 	udiv	r8, r3, r2
 800a3a2:	89eb      	ldrh	r3, [r5, #14]
 800a3a4:	7b29      	ldrb	r1, [r5, #12]
 800a3a6:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3aa:	fb02 3310 	mls	r3, r2, r0, r3
 800a3ae:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	fb08 f303 	mul.w	r3, r8, r3
 800a3b8:	31fc      	adds	r1, #252	@ 0xfc
 800a3ba:	f1a8 0804 	sub.w	r8, r8, #4
 800a3be:	4441      	add	r1, r8
 800a3c0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800a3c4:	b28f      	uxth	r7, r1
 800a3c6:	6829      	ldr	r1, [r5, #0]
 800a3c8:	3304      	adds	r3, #4
 800a3ca:	1bd2      	subs	r2, r2, r7
 800a3cc:	4419      	add	r1, r3
 800a3ce:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 800a3d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	4642      	mov	r2, r8
 800a3da:	2300      	movs	r3, #0
 800a3dc:	a802      	add	r0, sp, #8
 800a3de:	f7fe fc1b 	bl	8008c18 <ucdr_init_buffer_origin_offset>
 800a3e2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800a3e6:	f102 0308 	add.w	r3, r2, #8
 800a3ea:	4543      	cmp	r3, r8
 800a3ec:	d928      	bls.n	800a440 <on_full_output_buffer_fragmented+0xe0>
 800a3ee:	463a      	mov	r2, r7
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	210d      	movs	r1, #13
 800a3f4:	a802      	add	r0, sp, #8
 800a3f6:	f7ff ff3d 	bl	800a274 <uxr_buffer_submessage_header>
 800a3fa:	8929      	ldrh	r1, [r5, #8]
 800a3fc:	89eb      	ldrh	r3, [r5, #14]
 800a3fe:	fbb3 f2f1 	udiv	r2, r3, r1
 800a402:	fb01 3312 	mls	r3, r1, r2, r3
 800a406:	b29b      	uxth	r3, r3
 800a408:	686a      	ldr	r2, [r5, #4]
 800a40a:	fbb2 f2f1 	udiv	r2, r2, r1
 800a40e:	fb02 f303 	mul.w	r3, r2, r3
 800a412:	682a      	ldr	r2, [r5, #0]
 800a414:	f842 8003 	str.w	r8, [r2, r3]
 800a418:	89e8      	ldrh	r0, [r5, #14]
 800a41a:	2101      	movs	r1, #1
 800a41c:	f004 f840 	bl	800e4a0 <uxr_seq_num_add>
 800a420:	9904      	ldr	r1, [sp, #16]
 800a422:	9a03      	ldr	r2, [sp, #12]
 800a424:	81e8      	strh	r0, [r5, #14]
 800a426:	1a52      	subs	r2, r2, r1
 800a428:	4630      	mov	r0, r6
 800a42a:	f7fe fc07 	bl	8008c3c <ucdr_init_buffer>
 800a42e:	4630      	mov	r0, r6
 800a430:	4910      	ldr	r1, [pc, #64]	@ (800a474 <on_full_output_buffer_fragmented+0x114>)
 800a432:	4622      	mov	r2, r4
 800a434:	f7fe fbd6 	bl	8008be4 <ucdr_set_on_full_buffer_callback>
 800a438:	2000      	movs	r0, #0
 800a43a:	b00a      	add	sp, #40	@ 0x28
 800a43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a440:	b292      	uxth	r2, r2
 800a442:	2302      	movs	r3, #2
 800a444:	210d      	movs	r1, #13
 800a446:	a802      	add	r0, sp, #8
 800a448:	f7ff ff14 	bl	800a274 <uxr_buffer_submessage_header>
 800a44c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800a450:	8928      	ldrh	r0, [r5, #8]
 800a452:	f103 0208 	add.w	r2, r3, #8
 800a456:	89eb      	ldrh	r3, [r5, #14]
 800a458:	fbb3 f1f0 	udiv	r1, r3, r0
 800a45c:	fb00 3311 	mls	r3, r0, r1, r3
 800a460:	b29b      	uxth	r3, r3
 800a462:	6869      	ldr	r1, [r5, #4]
 800a464:	fbb1 f1f0 	udiv	r1, r1, r0
 800a468:	fb01 f303 	mul.w	r3, r1, r3
 800a46c:	6829      	ldr	r1, [r5, #0]
 800a46e:	50ca      	str	r2, [r1, r3]
 800a470:	e7d2      	b.n	800a418 <on_full_output_buffer_fragmented+0xb8>
 800a472:	bf00      	nop
 800a474:	0800a361 	.word	0x0800a361

0800a478 <uxr_prepare_output_stream>:
 800a478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a47a:	b087      	sub	sp, #28
 800a47c:	2707      	movs	r7, #7
 800a47e:	9202      	str	r2, [sp, #8]
 800a480:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a482:	2500      	movs	r5, #0
 800a484:	3204      	adds	r2, #4
 800a486:	e9cd 7500 	strd	r7, r5, [sp]
 800a48a:	461c      	mov	r4, r3
 800a48c:	4606      	mov	r6, r0
 800a48e:	f7ff fc6d 	bl	8009d6c <uxr_prepare_stream_to_write_submessage>
 800a492:	f080 0201 	eor.w	r2, r0, #1
 800a496:	b2d2      	uxtb	r2, r2
 800a498:	75a2      	strb	r2, [r4, #22]
 800a49a:	b112      	cbz	r2, 800a4a2 <uxr_prepare_output_stream+0x2a>
 800a49c:	4628      	mov	r0, r5
 800a49e:	b007      	add	sp, #28
 800a4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4a2:	aa05      	add	r2, sp, #20
 800a4a4:	9902      	ldr	r1, [sp, #8]
 800a4a6:	4630      	mov	r0, r6
 800a4a8:	f7ff fd9a 	bl	8009fe0 <uxr_init_base_object_request>
 800a4ac:	a905      	add	r1, sp, #20
 800a4ae:	4605      	mov	r5, r0
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f000 ff77 	bl	800b3a4 <uxr_serialize_WRITE_DATA_Payload_Data>
 800a4b6:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800a4ba:	69a6      	ldr	r6, [r4, #24]
 800a4bc:	69e7      	ldr	r7, [r4, #28]
 800a4be:	1a52      	subs	r2, r2, r1
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f7fe fbbb 	bl	8008c3c <ucdr_init_buffer>
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	463a      	mov	r2, r7
 800a4ca:	4631      	mov	r1, r6
 800a4cc:	f7fe fb8a 	bl	8008be4 <ucdr_set_on_full_buffer_callback>
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	b007      	add	sp, #28
 800a4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4d6:	bf00      	nop

0800a4d8 <uxr_prepare_output_stream_fragmented>:
 800a4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4dc:	b093      	sub	sp, #76	@ 0x4c
 800a4de:	4605      	mov	r5, r0
 800a4e0:	9107      	str	r1, [sp, #28]
 800a4e2:	3008      	adds	r0, #8
 800a4e4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800a4e8:	9303      	str	r3, [sp, #12]
 800a4ea:	9206      	str	r2, [sp, #24]
 800a4ec:	f7ff fe8e 	bl	800a20c <uxr_get_output_reliable_stream>
 800a4f0:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	f000 8095 	beq.w	800a624 <uxr_prepare_output_stream_fragmented+0x14c>
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	f000 8091 	beq.w	800a624 <uxr_prepare_output_stream_fragmented+0x14c>
 800a502:	f003 feb1 	bl	800e268 <get_available_free_slots>
 800a506:	2800      	cmp	r0, #0
 800a508:	f000 8087 	beq.w	800a61a <uxr_prepare_output_stream_fragmented+0x142>
 800a50c:	8922      	ldrh	r2, [r4, #8]
 800a50e:	89e7      	ldrh	r7, [r4, #14]
 800a510:	fbb7 f3f2 	udiv	r3, r7, r2
 800a514:	fb02 7313 	mls	r3, r2, r3, r7
 800a518:	b29b      	uxth	r3, r3
 800a51a:	6861      	ldr	r1, [r4, #4]
 800a51c:	fbb1 f1f2 	udiv	r1, r1, r2
 800a520:	6822      	ldr	r2, [r4, #0]
 800a522:	9105      	str	r1, [sp, #20]
 800a524:	fb01 f303 	mul.w	r3, r1, r3
 800a528:	3304      	adds	r3, #4
 800a52a:	eb02 0903 	add.w	r9, r2, r3
 800a52e:	7b23      	ldrb	r3, [r4, #12]
 800a530:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800a534:	4543      	cmp	r3, r8
 800a536:	f1a1 0b04 	sub.w	fp, r1, #4
 800a53a:	d37f      	bcc.n	800a63c <uxr_prepare_output_stream_fragmented+0x164>
 800a53c:	f1ab 0a04 	sub.w	sl, fp, #4
 800a540:	ebaa 0a03 	sub.w	sl, sl, r3
 800a544:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a546:	f8cd 8000 	str.w	r8, [sp]
 800a54a:	fa1f f38a 	uxth.w	r3, sl
 800a54e:	9304      	str	r3, [sp, #16]
 800a550:	465a      	mov	r2, fp
 800a552:	2300      	movs	r3, #0
 800a554:	4649      	mov	r1, r9
 800a556:	a80a      	add	r0, sp, #40	@ 0x28
 800a558:	f7fe fb5e 	bl	8008c18 <ucdr_init_buffer_origin_offset>
 800a55c:	f106 0a08 	add.w	sl, r6, #8
 800a560:	45da      	cmp	sl, fp
 800a562:	bf2c      	ite	cs
 800a564:	2300      	movcs	r3, #0
 800a566:	2301      	movcc	r3, #1
 800a568:	9a04      	ldr	r2, [sp, #16]
 800a56a:	005b      	lsls	r3, r3, #1
 800a56c:	210d      	movs	r1, #13
 800a56e:	a80a      	add	r0, sp, #40	@ 0x28
 800a570:	f7ff fe80 	bl	800a274 <uxr_buffer_submessage_header>
 800a574:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800a578:	fbb7 f2fc 	udiv	r2, r7, ip
 800a57c:	fb0c 7212 	mls	r2, ip, r2, r7
 800a580:	b292      	uxth	r2, r2
 800a582:	6863      	ldr	r3, [r4, #4]
 800a584:	fbb3 f3fc 	udiv	r3, r3, ip
 800a588:	fb02 f303 	mul.w	r3, r2, r3
 800a58c:	6822      	ldr	r2, [r4, #0]
 800a58e:	2101      	movs	r1, #1
 800a590:	f842 b003 	str.w	fp, [r2, r3]
 800a594:	4638      	mov	r0, r7
 800a596:	f003 ff83 	bl	800e4a0 <uxr_seq_num_add>
 800a59a:	9b05      	ldr	r3, [sp, #20]
 800a59c:	9e03      	ldr	r6, [sp, #12]
 800a59e:	f1a3 0208 	sub.w	r2, r3, #8
 800a5a2:	f108 0104 	add.w	r1, r8, #4
 800a5a6:	4607      	mov	r7, r0
 800a5a8:	eba2 0208 	sub.w	r2, r2, r8
 800a5ac:	4449      	add	r1, r9
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	f7fe fb44 	bl	8008c3c <ucdr_init_buffer>
 800a5b4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800a5b6:	81e7      	strh	r7, [r4, #14]
 800a5b8:	1d1a      	adds	r2, r3, #4
 800a5ba:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800a5be:	bf28      	it	cs
 800a5c0:	2200      	movcs	r2, #0
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	b292      	uxth	r2, r2
 800a5c6:	2107      	movs	r1, #7
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f7ff fe53 	bl	800a274 <uxr_buffer_submessage_header>
 800a5ce:	9906      	ldr	r1, [sp, #24]
 800a5d0:	aa09      	add	r2, sp, #36	@ 0x24
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	f7ff fd04 	bl	8009fe0 <uxr_init_base_object_request>
 800a5d8:	4604      	mov	r4, r0
 800a5da:	b320      	cbz	r0, 800a626 <uxr_prepare_output_stream_fragmented+0x14e>
 800a5dc:	9e03      	ldr	r6, [sp, #12]
 800a5de:	a909      	add	r1, sp, #36	@ 0x24
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f000 fedf 	bl	800b3a4 <uxr_serialize_WRITE_DATA_Payload_Data>
 800a5e6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	1a52      	subs	r2, r2, r1
 800a5ee:	f7fe fb25 	bl	8008c3c <ucdr_init_buffer>
 800a5f2:	9b07      	ldr	r3, [sp, #28]
 800a5f4:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800a5f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a5fa:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800a5fe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a600:	491a      	ldr	r1, [pc, #104]	@ (800a66c <uxr_prepare_output_stream_fragmented+0x194>)
 800a602:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800a606:	4630      	mov	r0, r6
 800a608:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800a60c:	462a      	mov	r2, r5
 800a60e:	f7fe fae9 	bl	8008be4 <ucdr_set_on_full_buffer_callback>
 800a612:	4620      	mov	r0, r4
 800a614:	b013      	add	sp, #76	@ 0x4c
 800a616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a61c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a61e:	4628      	mov	r0, r5
 800a620:	4798      	blx	r3
 800a622:	b920      	cbnz	r0, 800a62e <uxr_prepare_output_stream_fragmented+0x156>
 800a624:	2400      	movs	r4, #0
 800a626:	4620      	mov	r0, r4
 800a628:	b013      	add	sp, #76	@ 0x4c
 800a62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62e:	4620      	mov	r0, r4
 800a630:	f003 fe1a 	bl	800e268 <get_available_free_slots>
 800a634:	2800      	cmp	r0, #0
 800a636:	f47f af69 	bne.w	800a50c <uxr_prepare_output_stream_fragmented+0x34>
 800a63a:	e7f3      	b.n	800a624 <uxr_prepare_output_stream_fragmented+0x14c>
 800a63c:	4638      	mov	r0, r7
 800a63e:	2101      	movs	r1, #1
 800a640:	f003 ff2e 	bl	800e4a0 <uxr_seq_num_add>
 800a644:	8921      	ldrh	r1, [r4, #8]
 800a646:	fbb0 f2f1 	udiv	r2, r0, r1
 800a64a:	fb01 0212 	mls	r2, r1, r2, r0
 800a64e:	b292      	uxth	r2, r2
 800a650:	6863      	ldr	r3, [r4, #4]
 800a652:	fbb3 f3f1 	udiv	r3, r3, r1
 800a656:	fb02 f303 	mul.w	r3, r2, r3
 800a65a:	6822      	ldr	r2, [r4, #0]
 800a65c:	3304      	adds	r3, #4
 800a65e:	eb02 0903 	add.w	r9, r2, r3
 800a662:	4607      	mov	r7, r0
 800a664:	7b23      	ldrb	r3, [r4, #12]
 800a666:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800a66a:	e767      	b.n	800a53c <uxr_prepare_output_stream_fragmented+0x64>
 800a66c:	0800a361 	.word	0x0800a361

0800a670 <uxr_serialize_message_header>:
 800a670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a674:	4617      	mov	r7, r2
 800a676:	4604      	mov	r4, r0
 800a678:	461e      	mov	r6, r3
 800a67a:	460d      	mov	r5, r1
 800a67c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a680:	f7fd fb32 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800a684:	4639      	mov	r1, r7
 800a686:	4620      	mov	r0, r4
 800a688:	f7fd fb2e 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800a68c:	4632      	mov	r2, r6
 800a68e:	2101      	movs	r1, #1
 800a690:	4620      	mov	r0, r4
 800a692:	f7fd fbdf 	bl	8007e54 <ucdr_serialize_endian_uint16_t>
 800a696:	062b      	lsls	r3, r5, #24
 800a698:	d501      	bpl.n	800a69e <uxr_serialize_message_header+0x2e>
 800a69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a69e:	4641      	mov	r1, r8
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	2204      	movs	r2, #4
 800a6a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a8:	f002 bed2 	b.w	800d450 <ucdr_serialize_array_uint8_t>

0800a6ac <uxr_deserialize_message_header>:
 800a6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b0:	4617      	mov	r7, r2
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	461e      	mov	r6, r3
 800a6b6:	460d      	mov	r5, r1
 800a6b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a6bc:	f7fd fb2a 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800a6c0:	4639      	mov	r1, r7
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f7fd fb26 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800a6c8:	4632      	mov	r2, r6
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f7fd fcb7 	bl	8008040 <ucdr_deserialize_endian_uint16_t>
 800a6d2:	f995 3000 	ldrsb.w	r3, [r5]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	da01      	bge.n	800a6de <uxr_deserialize_message_header+0x32>
 800a6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6de:	4641      	mov	r1, r8
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	2204      	movs	r2, #4
 800a6e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e8:	f002 bf16 	b.w	800d518 <ucdr_deserialize_array_uint8_t>

0800a6ec <uxr_serialize_submessage_header>:
 800a6ec:	b570      	push	{r4, r5, r6, lr}
 800a6ee:	4616      	mov	r6, r2
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	461d      	mov	r5, r3
 800a6f4:	f7fd faf8 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800a6f8:	4631      	mov	r1, r6
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f7fd faf4 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800a700:	462a      	mov	r2, r5
 800a702:	4620      	mov	r0, r4
 800a704:	2101      	movs	r1, #1
 800a706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a70a:	f7fd bba3 	b.w	8007e54 <ucdr_serialize_endian_uint16_t>
 800a70e:	bf00      	nop

0800a710 <uxr_deserialize_submessage_header>:
 800a710:	b570      	push	{r4, r5, r6, lr}
 800a712:	4616      	mov	r6, r2
 800a714:	4604      	mov	r4, r0
 800a716:	461d      	mov	r5, r3
 800a718:	f7fd fafc 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800a71c:	4631      	mov	r1, r6
 800a71e:	4620      	mov	r0, r4
 800a720:	f7fd faf8 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800a724:	462a      	mov	r2, r5
 800a726:	4620      	mov	r0, r4
 800a728:	2101      	movs	r1, #1
 800a72a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a72e:	f7fd bc87 	b.w	8008040 <ucdr_deserialize_endian_uint16_t>
 800a732:	bf00      	nop

0800a734 <uxr_serialize_CLIENT_Representation>:
 800a734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a738:	2204      	movs	r2, #4
 800a73a:	460e      	mov	r6, r1
 800a73c:	4605      	mov	r5, r0
 800a73e:	f002 fe87 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800a742:	2202      	movs	r2, #2
 800a744:	1d31      	adds	r1, r6, #4
 800a746:	4604      	mov	r4, r0
 800a748:	4628      	mov	r0, r5
 800a74a:	f002 fe81 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800a74e:	2202      	movs	r2, #2
 800a750:	4004      	ands	r4, r0
 800a752:	1db1      	adds	r1, r6, #6
 800a754:	4628      	mov	r0, r5
 800a756:	f002 fe7b 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800a75a:	b2e4      	uxtb	r4, r4
 800a75c:	2204      	movs	r2, #4
 800a75e:	4004      	ands	r4, r0
 800a760:	f106 0108 	add.w	r1, r6, #8
 800a764:	4628      	mov	r0, r5
 800a766:	f002 fe73 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800a76a:	7b31      	ldrb	r1, [r6, #12]
 800a76c:	ea00 0804 	and.w	r8, r0, r4
 800a770:	4628      	mov	r0, r5
 800a772:	f7fd fab9 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800a776:	7b71      	ldrb	r1, [r6, #13]
 800a778:	ea08 0800 	and.w	r8, r8, r0
 800a77c:	4628      	mov	r0, r5
 800a77e:	f7fd fa85 	bl	8007c8c <ucdr_serialize_bool>
 800a782:	7b73      	ldrb	r3, [r6, #13]
 800a784:	ea08 0800 	and.w	r8, r8, r0
 800a788:	b93b      	cbnz	r3, 800a79a <uxr_serialize_CLIENT_Representation+0x66>
 800a78a:	8bb1      	ldrh	r1, [r6, #28]
 800a78c:	4628      	mov	r0, r5
 800a78e:	f7fd fad7 	bl	8007d40 <ucdr_serialize_uint16_t>
 800a792:	ea08 0000 	and.w	r0, r8, r0
 800a796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a79a:	6931      	ldr	r1, [r6, #16]
 800a79c:	4628      	mov	r0, r5
 800a79e:	f7fd fcbf 	bl	8008120 <ucdr_serialize_uint32_t>
 800a7a2:	6933      	ldr	r3, [r6, #16]
 800a7a4:	b1e3      	cbz	r3, 800a7e0 <uxr_serialize_CLIENT_Representation+0xac>
 800a7a6:	b1c0      	cbz	r0, 800a7da <uxr_serialize_CLIENT_Representation+0xa6>
 800a7a8:	4637      	mov	r7, r6
 800a7aa:	f04f 0900 	mov.w	r9, #0
 800a7ae:	e001      	b.n	800a7b4 <uxr_serialize_CLIENT_Representation+0x80>
 800a7b0:	3708      	adds	r7, #8
 800a7b2:	b194      	cbz	r4, 800a7da <uxr_serialize_CLIENT_Representation+0xa6>
 800a7b4:	6979      	ldr	r1, [r7, #20]
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	f002 ff6e 	bl	800d698 <ucdr_serialize_string>
 800a7bc:	69b9      	ldr	r1, [r7, #24]
 800a7be:	4604      	mov	r4, r0
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	f002 ff69 	bl	800d698 <ucdr_serialize_string>
 800a7c6:	6933      	ldr	r3, [r6, #16]
 800a7c8:	f109 0901 	add.w	r9, r9, #1
 800a7cc:	4004      	ands	r4, r0
 800a7ce:	4599      	cmp	r9, r3
 800a7d0:	b2e4      	uxtb	r4, r4
 800a7d2:	d3ed      	bcc.n	800a7b0 <uxr_serialize_CLIENT_Representation+0x7c>
 800a7d4:	ea08 0804 	and.w	r8, r8, r4
 800a7d8:	e7d7      	b.n	800a78a <uxr_serialize_CLIENT_Representation+0x56>
 800a7da:	f04f 0800 	mov.w	r8, #0
 800a7de:	e7d4      	b.n	800a78a <uxr_serialize_CLIENT_Representation+0x56>
 800a7e0:	ea08 0800 	and.w	r8, r8, r0
 800a7e4:	e7d1      	b.n	800a78a <uxr_serialize_CLIENT_Representation+0x56>
 800a7e6:	bf00      	nop

0800a7e8 <uxr_deserialize_CLIENT_Representation>:
 800a7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7ec:	2204      	movs	r2, #4
 800a7ee:	460c      	mov	r4, r1
 800a7f0:	4605      	mov	r5, r0
 800a7f2:	f002 fe91 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	1d21      	adds	r1, r4, #4
 800a7fa:	4606      	mov	r6, r0
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	f002 fe8b 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800a802:	2202      	movs	r2, #2
 800a804:	4006      	ands	r6, r0
 800a806:	1da1      	adds	r1, r4, #6
 800a808:	4628      	mov	r0, r5
 800a80a:	f002 fe85 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800a80e:	b2f6      	uxtb	r6, r6
 800a810:	2204      	movs	r2, #4
 800a812:	4006      	ands	r6, r0
 800a814:	f104 0108 	add.w	r1, r4, #8
 800a818:	4628      	mov	r0, r5
 800a81a:	f002 fe7d 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800a81e:	f104 010c 	add.w	r1, r4, #12
 800a822:	ea00 0706 	and.w	r7, r0, r6
 800a826:	4628      	mov	r0, r5
 800a828:	f7fd fa74 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800a82c:	f104 010d 	add.w	r1, r4, #13
 800a830:	4007      	ands	r7, r0
 800a832:	4628      	mov	r0, r5
 800a834:	f7fd fa40 	bl	8007cb8 <ucdr_deserialize_bool>
 800a838:	7b63      	ldrb	r3, [r4, #13]
 800a83a:	4007      	ands	r7, r0
 800a83c:	b93b      	cbnz	r3, 800a84e <uxr_deserialize_CLIENT_Representation+0x66>
 800a83e:	f104 011c 	add.w	r1, r4, #28
 800a842:	4628      	mov	r0, r5
 800a844:	f7fd fb80 	bl	8007f48 <ucdr_deserialize_uint16_t>
 800a848:	4038      	ands	r0, r7
 800a84a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a84e:	f104 0110 	add.w	r1, r4, #16
 800a852:	4628      	mov	r0, r5
 800a854:	f7fd fd8e 	bl	8008374 <ucdr_deserialize_uint32_t>
 800a858:	6923      	ldr	r3, [r4, #16]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d903      	bls.n	800a866 <uxr_deserialize_CLIENT_Representation+0x7e>
 800a85e:	2301      	movs	r3, #1
 800a860:	75ab      	strb	r3, [r5, #22]
 800a862:	2700      	movs	r7, #0
 800a864:	e7eb      	b.n	800a83e <uxr_deserialize_CLIENT_Representation+0x56>
 800a866:	b30b      	cbz	r3, 800a8ac <uxr_deserialize_CLIENT_Representation+0xc4>
 800a868:	2800      	cmp	r0, #0
 800a86a:	d0fa      	beq.n	800a862 <uxr_deserialize_CLIENT_Representation+0x7a>
 800a86c:	46a0      	mov	r8, r4
 800a86e:	f04f 0900 	mov.w	r9, #0
 800a872:	e003      	b.n	800a87c <uxr_deserialize_CLIENT_Representation+0x94>
 800a874:	f108 0808 	add.w	r8, r8, #8
 800a878:	2e00      	cmp	r6, #0
 800a87a:	d0f2      	beq.n	800a862 <uxr_deserialize_CLIENT_Representation+0x7a>
 800a87c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800a880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a884:	4628      	mov	r0, r5
 800a886:	f002 ff15 	bl	800d6b4 <ucdr_deserialize_string>
 800a88a:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800a88e:	4606      	mov	r6, r0
 800a890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a894:	4628      	mov	r0, r5
 800a896:	f002 ff0d 	bl	800d6b4 <ucdr_deserialize_string>
 800a89a:	6923      	ldr	r3, [r4, #16]
 800a89c:	f109 0901 	add.w	r9, r9, #1
 800a8a0:	4006      	ands	r6, r0
 800a8a2:	4599      	cmp	r9, r3
 800a8a4:	b2f6      	uxtb	r6, r6
 800a8a6:	d3e5      	bcc.n	800a874 <uxr_deserialize_CLIENT_Representation+0x8c>
 800a8a8:	4037      	ands	r7, r6
 800a8aa:	e7c8      	b.n	800a83e <uxr_deserialize_CLIENT_Representation+0x56>
 800a8ac:	4007      	ands	r7, r0
 800a8ae:	e7c6      	b.n	800a83e <uxr_deserialize_CLIENT_Representation+0x56>

0800a8b0 <uxr_serialize_AGENT_Representation>:
 800a8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8b4:	2204      	movs	r2, #4
 800a8b6:	460f      	mov	r7, r1
 800a8b8:	4605      	mov	r5, r0
 800a8ba:	f002 fdc9 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800a8be:	2202      	movs	r2, #2
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	1d39      	adds	r1, r7, #4
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	f002 fdc3 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800a8ca:	4020      	ands	r0, r4
 800a8cc:	2202      	movs	r2, #2
 800a8ce:	b2c4      	uxtb	r4, r0
 800a8d0:	1db9      	adds	r1, r7, #6
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	f002 fdbc 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800a8d8:	7a39      	ldrb	r1, [r7, #8]
 800a8da:	4004      	ands	r4, r0
 800a8dc:	4628      	mov	r0, r5
 800a8de:	f7fd f9d5 	bl	8007c8c <ucdr_serialize_bool>
 800a8e2:	7a3b      	ldrb	r3, [r7, #8]
 800a8e4:	ea00 0804 	and.w	r8, r0, r4
 800a8e8:	b913      	cbnz	r3, 800a8f0 <uxr_serialize_AGENT_Representation+0x40>
 800a8ea:	4640      	mov	r0, r8
 800a8ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8f0:	68f9      	ldr	r1, [r7, #12]
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	f7fd fc14 	bl	8008120 <ucdr_serialize_uint32_t>
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	b303      	cbz	r3, 800a93e <uxr_serialize_AGENT_Representation+0x8e>
 800a8fc:	b1d0      	cbz	r0, 800a934 <uxr_serialize_AGENT_Representation+0x84>
 800a8fe:	463e      	mov	r6, r7
 800a900:	f04f 0900 	mov.w	r9, #0
 800a904:	e001      	b.n	800a90a <uxr_serialize_AGENT_Representation+0x5a>
 800a906:	3608      	adds	r6, #8
 800a908:	b1a4      	cbz	r4, 800a934 <uxr_serialize_AGENT_Representation+0x84>
 800a90a:	6931      	ldr	r1, [r6, #16]
 800a90c:	4628      	mov	r0, r5
 800a90e:	f002 fec3 	bl	800d698 <ucdr_serialize_string>
 800a912:	6971      	ldr	r1, [r6, #20]
 800a914:	4604      	mov	r4, r0
 800a916:	4628      	mov	r0, r5
 800a918:	f002 febe 	bl	800d698 <ucdr_serialize_string>
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f109 0901 	add.w	r9, r9, #1
 800a922:	4004      	ands	r4, r0
 800a924:	4599      	cmp	r9, r3
 800a926:	b2e4      	uxtb	r4, r4
 800a928:	d3ed      	bcc.n	800a906 <uxr_serialize_AGENT_Representation+0x56>
 800a92a:	ea08 0804 	and.w	r8, r8, r4
 800a92e:	4640      	mov	r0, r8
 800a930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a934:	f04f 0800 	mov.w	r8, #0
 800a938:	4640      	mov	r0, r8
 800a93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a93e:	ea08 0800 	and.w	r8, r8, r0
 800a942:	e7d2      	b.n	800a8ea <uxr_serialize_AGENT_Representation+0x3a>

0800a944 <uxr_serialize_DATAWRITER_Representation>:
 800a944:	b570      	push	{r4, r5, r6, lr}
 800a946:	460d      	mov	r5, r1
 800a948:	7809      	ldrb	r1, [r1, #0]
 800a94a:	4606      	mov	r6, r0
 800a94c:	f7fd f9cc 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800a950:	4604      	mov	r4, r0
 800a952:	b130      	cbz	r0, 800a962 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800a954:	782b      	ldrb	r3, [r5, #0]
 800a956:	2b02      	cmp	r3, #2
 800a958:	d00c      	beq.n	800a974 <uxr_serialize_DATAWRITER_Representation+0x30>
 800a95a:	2b03      	cmp	r3, #3
 800a95c:	d010      	beq.n	800a980 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d008      	beq.n	800a974 <uxr_serialize_DATAWRITER_Representation+0x30>
 800a962:	2202      	movs	r2, #2
 800a964:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800a968:	4630      	mov	r0, r6
 800a96a:	f002 fd71 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800a96e:	4020      	ands	r0, r4
 800a970:	b2c0      	uxtb	r0, r0
 800a972:	bd70      	pop	{r4, r5, r6, pc}
 800a974:	6869      	ldr	r1, [r5, #4]
 800a976:	4630      	mov	r0, r6
 800a978:	f002 fe8e 	bl	800d698 <ucdr_serialize_string>
 800a97c:	4604      	mov	r4, r0
 800a97e:	e7f0      	b.n	800a962 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800a980:	4629      	mov	r1, r5
 800a982:	4630      	mov	r0, r6
 800a984:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800a988:	3104      	adds	r1, #4
 800a98a:	f002 fe57 	bl	800d63c <ucdr_serialize_sequence_uint8_t>
 800a98e:	4604      	mov	r4, r0
 800a990:	e7e7      	b.n	800a962 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800a992:	bf00      	nop

0800a994 <uxr_serialize_ObjectVariant.part.0>:
 800a994:	b570      	push	{r4, r5, r6, lr}
 800a996:	780b      	ldrb	r3, [r1, #0]
 800a998:	3b01      	subs	r3, #1
 800a99a:	460c      	mov	r4, r1
 800a99c:	4605      	mov	r5, r0
 800a99e:	2b0d      	cmp	r3, #13
 800a9a0:	d816      	bhi.n	800a9d0 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800a9a2:	e8df f003 	tbb	[pc, r3]
 800a9a6:	0733      	.short	0x0733
 800a9a8:	07071717 	.word	0x07071717
 800a9ac:	0c150707 	.word	0x0c150707
 800a9b0:	4c510c0c 	.word	0x4c510c0c
 800a9b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9b8:	3104      	adds	r1, #4
 800a9ba:	f7ff bfc3 	b.w	800a944 <uxr_serialize_DATAWRITER_Representation>
 800a9be:	7909      	ldrb	r1, [r1, #4]
 800a9c0:	f7fd f992 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800a9c4:	b300      	cbz	r0, 800aa08 <uxr_serialize_ObjectVariant.part.0+0x74>
 800a9c6:	7923      	ldrb	r3, [r4, #4]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d042      	beq.n	800aa52 <uxr_serialize_ObjectVariant.part.0+0xbe>
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d040      	beq.n	800aa52 <uxr_serialize_ObjectVariant.part.0+0xbe>
 800a9d0:	2001      	movs	r0, #1
 800a9d2:	bd70      	pop	{r4, r5, r6, pc}
 800a9d4:	7909      	ldrb	r1, [r1, #4]
 800a9d6:	f7fd f987 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800a9da:	4606      	mov	r6, r0
 800a9dc:	b158      	cbz	r0, 800a9f6 <uxr_serialize_ObjectVariant.part.0+0x62>
 800a9de:	7923      	ldrb	r3, [r4, #4]
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d03c      	beq.n	800aa5e <uxr_serialize_ObjectVariant.part.0+0xca>
 800a9e4:	2b03      	cmp	r3, #3
 800a9e6:	d106      	bne.n	800a9f6 <uxr_serialize_ObjectVariant.part.0+0x62>
 800a9e8:	68a2      	ldr	r2, [r4, #8]
 800a9ea:	f104 010c 	add.w	r1, r4, #12
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	f002 fe24 	bl	800d63c <ucdr_serialize_sequence_uint8_t>
 800a9f4:	4606      	mov	r6, r0
 800a9f6:	2202      	movs	r2, #2
 800a9f8:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	f002 fd27 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800aa02:	4030      	ands	r0, r6
 800aa04:	b2c0      	uxtb	r0, r0
 800aa06:	bd70      	pop	{r4, r5, r6, pc}
 800aa08:	2000      	movs	r0, #0
 800aa0a:	bd70      	pop	{r4, r5, r6, pc}
 800aa0c:	7909      	ldrb	r1, [r1, #4]
 800aa0e:	f7fd f96b 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800aa12:	4606      	mov	r6, r0
 800aa14:	b158      	cbz	r0, 800aa2e <uxr_serialize_ObjectVariant.part.0+0x9a>
 800aa16:	7923      	ldrb	r3, [r4, #4]
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d003      	beq.n	800aa24 <uxr_serialize_ObjectVariant.part.0+0x90>
 800aa1c:	2b03      	cmp	r3, #3
 800aa1e:	d024      	beq.n	800aa6a <uxr_serialize_ObjectVariant.part.0+0xd6>
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d104      	bne.n	800aa2e <uxr_serialize_ObjectVariant.part.0+0x9a>
 800aa24:	68a1      	ldr	r1, [r4, #8]
 800aa26:	4628      	mov	r0, r5
 800aa28:	f002 fe36 	bl	800d698 <ucdr_serialize_string>
 800aa2c:	4606      	mov	r6, r0
 800aa2e:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800aa32:	4628      	mov	r0, r5
 800aa34:	f7fd fe80 	bl	8008738 <ucdr_serialize_int16_t>
 800aa38:	4030      	ands	r0, r6
 800aa3a:	b2c0      	uxtb	r0, r0
 800aa3c:	bd70      	pop	{r4, r5, r6, pc}
 800aa3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa42:	3104      	adds	r1, #4
 800aa44:	f7ff be76 	b.w	800a734 <uxr_serialize_CLIENT_Representation>
 800aa48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa4c:	3104      	adds	r1, #4
 800aa4e:	f7ff bf2f 	b.w	800a8b0 <uxr_serialize_AGENT_Representation>
 800aa52:	68a1      	ldr	r1, [r4, #8]
 800aa54:	4628      	mov	r0, r5
 800aa56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa5a:	f002 be1d 	b.w	800d698 <ucdr_serialize_string>
 800aa5e:	68a1      	ldr	r1, [r4, #8]
 800aa60:	4628      	mov	r0, r5
 800aa62:	f002 fe19 	bl	800d698 <ucdr_serialize_string>
 800aa66:	4606      	mov	r6, r0
 800aa68:	e7c5      	b.n	800a9f6 <uxr_serialize_ObjectVariant.part.0+0x62>
 800aa6a:	68a2      	ldr	r2, [r4, #8]
 800aa6c:	f104 010c 	add.w	r1, r4, #12
 800aa70:	4628      	mov	r0, r5
 800aa72:	f002 fde3 	bl	800d63c <ucdr_serialize_sequence_uint8_t>
 800aa76:	4606      	mov	r6, r0
 800aa78:	e7d9      	b.n	800aa2e <uxr_serialize_ObjectVariant.part.0+0x9a>
 800aa7a:	bf00      	nop

0800aa7c <uxr_deserialize_DATAWRITER_Representation>:
 800aa7c:	b570      	push	{r4, r5, r6, lr}
 800aa7e:	4606      	mov	r6, r0
 800aa80:	460d      	mov	r5, r1
 800aa82:	f7fd f947 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800aa86:	4604      	mov	r4, r0
 800aa88:	b130      	cbz	r0, 800aa98 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800aa8a:	782b      	ldrb	r3, [r5, #0]
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d00c      	beq.n	800aaaa <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800aa90:	2b03      	cmp	r3, #3
 800aa92:	d012      	beq.n	800aaba <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d008      	beq.n	800aaaa <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800aa98:	2202      	movs	r2, #2
 800aa9a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800aa9e:	4630      	mov	r0, r6
 800aaa0:	f002 fd3a 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800aaa4:	4020      	ands	r0, r4
 800aaa6:	b2c0      	uxtb	r0, r0
 800aaa8:	bd70      	pop	{r4, r5, r6, pc}
 800aaaa:	6869      	ldr	r1, [r5, #4]
 800aaac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aab0:	4630      	mov	r0, r6
 800aab2:	f002 fdff 	bl	800d6b4 <ucdr_deserialize_string>
 800aab6:	4604      	mov	r4, r0
 800aab8:	e7ee      	b.n	800aa98 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800aaba:	1d2b      	adds	r3, r5, #4
 800aabc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aac0:	f105 0108 	add.w	r1, r5, #8
 800aac4:	4630      	mov	r0, r6
 800aac6:	f002 fdcb 	bl	800d660 <ucdr_deserialize_sequence_uint8_t>
 800aaca:	4604      	mov	r4, r0
 800aacc:	e7e4      	b.n	800aa98 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800aace:	bf00      	nop

0800aad0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800aad0:	b570      	push	{r4, r5, r6, lr}
 800aad2:	460d      	mov	r5, r1
 800aad4:	7809      	ldrb	r1, [r1, #0]
 800aad6:	4606      	mov	r6, r0
 800aad8:	f7fd f8d8 	bl	8007c8c <ucdr_serialize_bool>
 800aadc:	782b      	ldrb	r3, [r5, #0]
 800aade:	4604      	mov	r4, r0
 800aae0:	b94b      	cbnz	r3, 800aaf6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800aae2:	7a29      	ldrb	r1, [r5, #8]
 800aae4:	4630      	mov	r0, r6
 800aae6:	f7fd f8d1 	bl	8007c8c <ucdr_serialize_bool>
 800aaea:	7a2b      	ldrb	r3, [r5, #8]
 800aaec:	4004      	ands	r4, r0
 800aaee:	b2e4      	uxtb	r4, r4
 800aaf0:	b943      	cbnz	r3, 800ab04 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	bd70      	pop	{r4, r5, r6, pc}
 800aaf6:	6869      	ldr	r1, [r5, #4]
 800aaf8:	4630      	mov	r0, r6
 800aafa:	f002 fdcd 	bl	800d698 <ucdr_serialize_string>
 800aafe:	4004      	ands	r4, r0
 800ab00:	b2e4      	uxtb	r4, r4
 800ab02:	e7ee      	b.n	800aae2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800ab04:	68e9      	ldr	r1, [r5, #12]
 800ab06:	4630      	mov	r0, r6
 800ab08:	f002 fdc6 	bl	800d698 <ucdr_serialize_string>
 800ab0c:	4004      	ands	r4, r0
 800ab0e:	4620      	mov	r0, r4
 800ab10:	bd70      	pop	{r4, r5, r6, pc}
 800ab12:	bf00      	nop

0800ab14 <uxr_serialize_OBJK_Topic_Binary>:
 800ab14:	b570      	push	{r4, r5, r6, lr}
 800ab16:	460d      	mov	r5, r1
 800ab18:	6809      	ldr	r1, [r1, #0]
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	f002 fdbc 	bl	800d698 <ucdr_serialize_string>
 800ab20:	7929      	ldrb	r1, [r5, #4]
 800ab22:	4604      	mov	r4, r0
 800ab24:	4630      	mov	r0, r6
 800ab26:	f7fd f8b1 	bl	8007c8c <ucdr_serialize_bool>
 800ab2a:	792b      	ldrb	r3, [r5, #4]
 800ab2c:	4004      	ands	r4, r0
 800ab2e:	b2e4      	uxtb	r4, r4
 800ab30:	b943      	cbnz	r3, 800ab44 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800ab32:	7b29      	ldrb	r1, [r5, #12]
 800ab34:	4630      	mov	r0, r6
 800ab36:	f7fd f8a9 	bl	8007c8c <ucdr_serialize_bool>
 800ab3a:	7b2b      	ldrb	r3, [r5, #12]
 800ab3c:	4004      	ands	r4, r0
 800ab3e:	b93b      	cbnz	r3, 800ab50 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800ab40:	4620      	mov	r0, r4
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	68a9      	ldr	r1, [r5, #8]
 800ab46:	4630      	mov	r0, r6
 800ab48:	f002 fda6 	bl	800d698 <ucdr_serialize_string>
 800ab4c:	4004      	ands	r4, r0
 800ab4e:	e7f0      	b.n	800ab32 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800ab50:	6929      	ldr	r1, [r5, #16]
 800ab52:	4630      	mov	r0, r6
 800ab54:	f002 fda0 	bl	800d698 <ucdr_serialize_string>
 800ab58:	4004      	ands	r4, r0
 800ab5a:	b2e4      	uxtb	r4, r4
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	bd70      	pop	{r4, r5, r6, pc}

0800ab60 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800ab60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab64:	460c      	mov	r4, r1
 800ab66:	7809      	ldrb	r1, [r1, #0]
 800ab68:	4606      	mov	r6, r0
 800ab6a:	f7fd f88f 	bl	8007c8c <ucdr_serialize_bool>
 800ab6e:	7823      	ldrb	r3, [r4, #0]
 800ab70:	4605      	mov	r5, r0
 800ab72:	b96b      	cbnz	r3, 800ab90 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800ab74:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800ab78:	4630      	mov	r0, r6
 800ab7a:	f7fd f887 	bl	8007c8c <ucdr_serialize_bool>
 800ab7e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ab82:	4005      	ands	r5, r0
 800ab84:	b2ed      	uxtb	r5, r5
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d16a      	bne.n	800ac60 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab90:	6861      	ldr	r1, [r4, #4]
 800ab92:	4630      	mov	r0, r6
 800ab94:	f7fd fac4 	bl	8008120 <ucdr_serialize_uint32_t>
 800ab98:	6863      	ldr	r3, [r4, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d06c      	beq.n	800ac78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d068      	beq.n	800ac74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800aba2:	68a1      	ldr	r1, [r4, #8]
 800aba4:	4630      	mov	r0, r6
 800aba6:	f002 fd77 	bl	800d698 <ucdr_serialize_string>
 800abaa:	6862      	ldr	r2, [r4, #4]
 800abac:	2a01      	cmp	r2, #1
 800abae:	d953      	bls.n	800ac58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d05f      	beq.n	800ac74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800abb4:	68e1      	ldr	r1, [r4, #12]
 800abb6:	4630      	mov	r0, r6
 800abb8:	f002 fd6e 	bl	800d698 <ucdr_serialize_string>
 800abbc:	6862      	ldr	r2, [r4, #4]
 800abbe:	2a02      	cmp	r2, #2
 800abc0:	d94a      	bls.n	800ac58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d056      	beq.n	800ac74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800abc6:	6921      	ldr	r1, [r4, #16]
 800abc8:	4630      	mov	r0, r6
 800abca:	f002 fd65 	bl	800d698 <ucdr_serialize_string>
 800abce:	6862      	ldr	r2, [r4, #4]
 800abd0:	2a03      	cmp	r2, #3
 800abd2:	d941      	bls.n	800ac58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d04d      	beq.n	800ac74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800abd8:	6961      	ldr	r1, [r4, #20]
 800abda:	4630      	mov	r0, r6
 800abdc:	f002 fd5c 	bl	800d698 <ucdr_serialize_string>
 800abe0:	6862      	ldr	r2, [r4, #4]
 800abe2:	2a04      	cmp	r2, #4
 800abe4:	d938      	bls.n	800ac58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	d044      	beq.n	800ac74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800abea:	69a1      	ldr	r1, [r4, #24]
 800abec:	4630      	mov	r0, r6
 800abee:	f002 fd53 	bl	800d698 <ucdr_serialize_string>
 800abf2:	6862      	ldr	r2, [r4, #4]
 800abf4:	2a05      	cmp	r2, #5
 800abf6:	d92f      	bls.n	800ac58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d03b      	beq.n	800ac74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800abfc:	69e1      	ldr	r1, [r4, #28]
 800abfe:	4630      	mov	r0, r6
 800ac00:	f002 fd4a 	bl	800d698 <ucdr_serialize_string>
 800ac04:	6862      	ldr	r2, [r4, #4]
 800ac06:	2a06      	cmp	r2, #6
 800ac08:	d926      	bls.n	800ac58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ac0a:	b398      	cbz	r0, 800ac74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ac0c:	6a21      	ldr	r1, [r4, #32]
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f002 fd42 	bl	800d698 <ucdr_serialize_string>
 800ac14:	6862      	ldr	r2, [r4, #4]
 800ac16:	2a07      	cmp	r2, #7
 800ac18:	d91e      	bls.n	800ac58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ac1a:	b358      	cbz	r0, 800ac74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ac1c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ac1e:	4630      	mov	r0, r6
 800ac20:	f002 fd3a 	bl	800d698 <ucdr_serialize_string>
 800ac24:	6862      	ldr	r2, [r4, #4]
 800ac26:	2a08      	cmp	r2, #8
 800ac28:	d916      	bls.n	800ac58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ac2a:	b318      	cbz	r0, 800ac74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ac2c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ac2e:	4630      	mov	r0, r6
 800ac30:	f002 fd32 	bl	800d698 <ucdr_serialize_string>
 800ac34:	6862      	ldr	r2, [r4, #4]
 800ac36:	2a09      	cmp	r2, #9
 800ac38:	d90e      	bls.n	800ac58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ac3a:	b1d8      	cbz	r0, 800ac74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ac3c:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 800ac40:	2709      	movs	r7, #9
 800ac42:	e000      	b.n	800ac46 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800ac44:	b1b0      	cbz	r0, 800ac74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ac46:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f002 fd24 	bl	800d698 <ucdr_serialize_string>
 800ac50:	6862      	ldr	r2, [r4, #4]
 800ac52:	3701      	adds	r7, #1
 800ac54:	4297      	cmp	r7, r2
 800ac56:	d3f5      	bcc.n	800ac44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800ac58:	ea05 0300 	and.w	r3, r5, r0
 800ac5c:	b2dd      	uxtb	r5, r3
 800ac5e:	e789      	b.n	800ab74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800ac60:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ac62:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800ac66:	4630      	mov	r0, r6
 800ac68:	f002 fce8 	bl	800d63c <ucdr_serialize_sequence_uint8_t>
 800ac6c:	4005      	ands	r5, r0
 800ac6e:	4628      	mov	r0, r5
 800ac70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac74:	2500      	movs	r5, #0
 800ac76:	e77d      	b.n	800ab74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800ac78:	4028      	ands	r0, r5
 800ac7a:	b2c5      	uxtb	r5, r0
 800ac7c:	e77a      	b.n	800ab74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800ac7e:	bf00      	nop

0800ac80 <uxr_serialize_OBJK_Publisher_Binary>:
 800ac80:	b570      	push	{r4, r5, r6, lr}
 800ac82:	460d      	mov	r5, r1
 800ac84:	7809      	ldrb	r1, [r1, #0]
 800ac86:	4606      	mov	r6, r0
 800ac88:	f7fd f800 	bl	8007c8c <ucdr_serialize_bool>
 800ac8c:	782b      	ldrb	r3, [r5, #0]
 800ac8e:	4604      	mov	r4, r0
 800ac90:	b94b      	cbnz	r3, 800aca6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800ac92:	7a29      	ldrb	r1, [r5, #8]
 800ac94:	4630      	mov	r0, r6
 800ac96:	f7fc fff9 	bl	8007c8c <ucdr_serialize_bool>
 800ac9a:	7a2b      	ldrb	r3, [r5, #8]
 800ac9c:	4004      	ands	r4, r0
 800ac9e:	b2e4      	uxtb	r4, r4
 800aca0:	b943      	cbnz	r3, 800acb4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800aca2:	4620      	mov	r0, r4
 800aca4:	bd70      	pop	{r4, r5, r6, pc}
 800aca6:	6869      	ldr	r1, [r5, #4]
 800aca8:	4630      	mov	r0, r6
 800acaa:	f002 fcf5 	bl	800d698 <ucdr_serialize_string>
 800acae:	4004      	ands	r4, r0
 800acb0:	b2e4      	uxtb	r4, r4
 800acb2:	e7ee      	b.n	800ac92 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800acb4:	f105 010c 	add.w	r1, r5, #12
 800acb8:	4630      	mov	r0, r6
 800acba:	f7ff ff51 	bl	800ab60 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800acbe:	4004      	ands	r4, r0
 800acc0:	4620      	mov	r0, r4
 800acc2:	bd70      	pop	{r4, r5, r6, pc}

0800acc4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800acc4:	b570      	push	{r4, r5, r6, lr}
 800acc6:	460d      	mov	r5, r1
 800acc8:	8809      	ldrh	r1, [r1, #0]
 800acca:	4606      	mov	r6, r0
 800accc:	f7fd f838 	bl	8007d40 <ucdr_serialize_uint16_t>
 800acd0:	78a9      	ldrb	r1, [r5, #2]
 800acd2:	4604      	mov	r4, r0
 800acd4:	4630      	mov	r0, r6
 800acd6:	f7fc ffd9 	bl	8007c8c <ucdr_serialize_bool>
 800acda:	78ab      	ldrb	r3, [r5, #2]
 800acdc:	4004      	ands	r4, r0
 800acde:	b2e4      	uxtb	r4, r4
 800ace0:	b9b3      	cbnz	r3, 800ad10 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 800ace2:	79a9      	ldrb	r1, [r5, #6]
 800ace4:	4630      	mov	r0, r6
 800ace6:	f7fc ffd1 	bl	8007c8c <ucdr_serialize_bool>
 800acea:	79ab      	ldrb	r3, [r5, #6]
 800acec:	4004      	ands	r4, r0
 800acee:	bb33      	cbnz	r3, 800ad3e <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 800acf0:	7b29      	ldrb	r1, [r5, #12]
 800acf2:	4630      	mov	r0, r6
 800acf4:	f7fc ffca 	bl	8007c8c <ucdr_serialize_bool>
 800acf8:	7b2b      	ldrb	r3, [r5, #12]
 800acfa:	4004      	ands	r4, r0
 800acfc:	b9c3      	cbnz	r3, 800ad30 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 800acfe:	7d29      	ldrb	r1, [r5, #20]
 800ad00:	4630      	mov	r0, r6
 800ad02:	f7fc ffc3 	bl	8007c8c <ucdr_serialize_bool>
 800ad06:	7d2b      	ldrb	r3, [r5, #20]
 800ad08:	4004      	ands	r4, r0
 800ad0a:	b93b      	cbnz	r3, 800ad1c <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	bd70      	pop	{r4, r5, r6, pc}
 800ad10:	88a9      	ldrh	r1, [r5, #4]
 800ad12:	4630      	mov	r0, r6
 800ad14:	f7fd f814 	bl	8007d40 <ucdr_serialize_uint16_t>
 800ad18:	4004      	ands	r4, r0
 800ad1a:	e7e2      	b.n	800ace2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 800ad1c:	69aa      	ldr	r2, [r5, #24]
 800ad1e:	f105 011c 	add.w	r1, r5, #28
 800ad22:	4630      	mov	r0, r6
 800ad24:	f002 fc8a 	bl	800d63c <ucdr_serialize_sequence_uint8_t>
 800ad28:	4004      	ands	r4, r0
 800ad2a:	b2e4      	uxtb	r4, r4
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	bd70      	pop	{r4, r5, r6, pc}
 800ad30:	6929      	ldr	r1, [r5, #16]
 800ad32:	4630      	mov	r0, r6
 800ad34:	f7fd f9f4 	bl	8008120 <ucdr_serialize_uint32_t>
 800ad38:	4004      	ands	r4, r0
 800ad3a:	b2e4      	uxtb	r4, r4
 800ad3c:	e7df      	b.n	800acfe <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 800ad3e:	68a9      	ldr	r1, [r5, #8]
 800ad40:	4630      	mov	r0, r6
 800ad42:	f7fd f9ed 	bl	8008120 <ucdr_serialize_uint32_t>
 800ad46:	4004      	ands	r4, r0
 800ad48:	b2e4      	uxtb	r4, r4
 800ad4a:	e7d1      	b.n	800acf0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

0800ad4c <uxr_serialize_OBJK_DataWriter_Binary>:
 800ad4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4e:	2202      	movs	r2, #2
 800ad50:	460d      	mov	r5, r1
 800ad52:	4606      	mov	r6, r0
 800ad54:	f002 fb7c 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800ad58:	78a9      	ldrb	r1, [r5, #2]
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	4630      	mov	r0, r6
 800ad5e:	f7fc ff95 	bl	8007c8c <ucdr_serialize_bool>
 800ad62:	78ab      	ldrb	r3, [r5, #2]
 800ad64:	4004      	ands	r4, r0
 800ad66:	b2e4      	uxtb	r4, r4
 800ad68:	b90b      	cbnz	r3, 800ad6e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad6e:	f105 0108 	add.w	r1, r5, #8
 800ad72:	4630      	mov	r0, r6
 800ad74:	f7ff ffa6 	bl	800acc4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800ad78:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800ad7c:	4607      	mov	r7, r0
 800ad7e:	4630      	mov	r0, r6
 800ad80:	f7fc ff84 	bl	8007c8c <ucdr_serialize_bool>
 800ad84:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800ad88:	4007      	ands	r7, r0
 800ad8a:	b2ff      	uxtb	r7, r7
 800ad8c:	b913      	cbnz	r3, 800ad94 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800ad8e:	403c      	ands	r4, r7
 800ad90:	4620      	mov	r0, r4
 800ad92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad94:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800ad98:	4630      	mov	r0, r6
 800ad9a:	f7fd fc05 	bl	80085a8 <ucdr_serialize_uint64_t>
 800ad9e:	4007      	ands	r7, r0
 800ada0:	e7f5      	b.n	800ad8e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800ada2:	bf00      	nop

0800ada4 <uxr_deserialize_ObjectVariant>:
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	4605      	mov	r5, r0
 800ada8:	460e      	mov	r6, r1
 800adaa:	f7fc ffb3 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800adae:	b168      	cbz	r0, 800adcc <uxr_deserialize_ObjectVariant+0x28>
 800adb0:	7833      	ldrb	r3, [r6, #0]
 800adb2:	3b01      	subs	r3, #1
 800adb4:	4604      	mov	r4, r0
 800adb6:	2b0d      	cmp	r3, #13
 800adb8:	d809      	bhi.n	800adce <uxr_deserialize_ObjectVariant+0x2a>
 800adba:	e8df f003 	tbb	[pc, r3]
 800adbe:	0a64      	.short	0x0a64
 800adc0:	0a0a2323 	.word	0x0a0a2323
 800adc4:	10080a0a 	.word	0x10080a0a
 800adc8:	5e411010 	.word	0x5e411010
 800adcc:	2400      	movs	r4, #0
 800adce:	4620      	mov	r0, r4
 800add0:	bd70      	pop	{r4, r5, r6, pc}
 800add2:	1d31      	adds	r1, r6, #4
 800add4:	4628      	mov	r0, r5
 800add6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800adda:	f7ff be4f 	b.w	800aa7c <uxr_deserialize_DATAWRITER_Representation>
 800adde:	1d31      	adds	r1, r6, #4
 800ade0:	4628      	mov	r0, r5
 800ade2:	f7fc ff97 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	d0f0      	beq.n	800adcc <uxr_deserialize_ObjectVariant+0x28>
 800adea:	7933      	ldrb	r3, [r6, #4]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d001      	beq.n	800adf4 <uxr_deserialize_ObjectVariant+0x50>
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d1ec      	bne.n	800adce <uxr_deserialize_ObjectVariant+0x2a>
 800adf4:	68b1      	ldr	r1, [r6, #8]
 800adf6:	4628      	mov	r0, r5
 800adf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800adfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae00:	f002 bc58 	b.w	800d6b4 <ucdr_deserialize_string>
 800ae04:	1d31      	adds	r1, r6, #4
 800ae06:	4628      	mov	r0, r5
 800ae08:	f7fc ff84 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	b170      	cbz	r0, 800ae2e <uxr_deserialize_ObjectVariant+0x8a>
 800ae10:	7933      	ldrb	r3, [r6, #4]
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d053      	beq.n	800aebe <uxr_deserialize_ObjectVariant+0x11a>
 800ae16:	2b03      	cmp	r3, #3
 800ae18:	d109      	bne.n	800ae2e <uxr_deserialize_ObjectVariant+0x8a>
 800ae1a:	f106 0308 	add.w	r3, r6, #8
 800ae1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae22:	f106 010c 	add.w	r1, r6, #12
 800ae26:	4628      	mov	r0, r5
 800ae28:	f002 fc1a 	bl	800d660 <ucdr_deserialize_sequence_uint8_t>
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	2202      	movs	r2, #2
 800ae30:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800ae34:	4628      	mov	r0, r5
 800ae36:	f002 fb6f 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800ae3a:	4004      	ands	r4, r0
 800ae3c:	b2e4      	uxtb	r4, r4
 800ae3e:	e7c6      	b.n	800adce <uxr_deserialize_ObjectVariant+0x2a>
 800ae40:	2204      	movs	r2, #4
 800ae42:	18b1      	adds	r1, r6, r2
 800ae44:	4628      	mov	r0, r5
 800ae46:	f002 fb67 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800ae4a:	2202      	movs	r2, #2
 800ae4c:	f106 0108 	add.w	r1, r6, #8
 800ae50:	4604      	mov	r4, r0
 800ae52:	4628      	mov	r0, r5
 800ae54:	f002 fb60 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800ae58:	2202      	movs	r2, #2
 800ae5a:	4004      	ands	r4, r0
 800ae5c:	f106 010a 	add.w	r1, r6, #10
 800ae60:	4628      	mov	r0, r5
 800ae62:	f002 fb59 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800ae66:	b2e4      	uxtb	r4, r4
 800ae68:	4603      	mov	r3, r0
 800ae6a:	f106 010c 	add.w	r1, r6, #12
 800ae6e:	4628      	mov	r0, r5
 800ae70:	401c      	ands	r4, r3
 800ae72:	f7fc ff21 	bl	8007cb8 <ucdr_deserialize_bool>
 800ae76:	4004      	ands	r4, r0
 800ae78:	e7a9      	b.n	800adce <uxr_deserialize_ObjectVariant+0x2a>
 800ae7a:	1d31      	adds	r1, r6, #4
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae82:	f7ff bcb1 	b.w	800a7e8 <uxr_deserialize_CLIENT_Representation>
 800ae86:	1d31      	adds	r1, r6, #4
 800ae88:	4628      	mov	r0, r5
 800ae8a:	f7fc ff43 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800ae8e:	4604      	mov	r4, r0
 800ae90:	b168      	cbz	r0, 800aeae <uxr_deserialize_ObjectVariant+0x10a>
 800ae92:	7933      	ldrb	r3, [r6, #4]
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d003      	beq.n	800aea0 <uxr_deserialize_ObjectVariant+0xfc>
 800ae98:	2b03      	cmp	r3, #3
 800ae9a:	d018      	beq.n	800aece <uxr_deserialize_ObjectVariant+0x12a>
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d106      	bne.n	800aeae <uxr_deserialize_ObjectVariant+0x10a>
 800aea0:	68b1      	ldr	r1, [r6, #8]
 800aea2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aea6:	4628      	mov	r0, r5
 800aea8:	f002 fc04 	bl	800d6b4 <ucdr_deserialize_string>
 800aeac:	4604      	mov	r4, r0
 800aeae:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	f7fd fcca 	bl	800884c <ucdr_deserialize_int16_t>
 800aeb8:	4004      	ands	r4, r0
 800aeba:	b2e4      	uxtb	r4, r4
 800aebc:	e787      	b.n	800adce <uxr_deserialize_ObjectVariant+0x2a>
 800aebe:	68b1      	ldr	r1, [r6, #8]
 800aec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aec4:	4628      	mov	r0, r5
 800aec6:	f002 fbf5 	bl	800d6b4 <ucdr_deserialize_string>
 800aeca:	4604      	mov	r4, r0
 800aecc:	e7af      	b.n	800ae2e <uxr_deserialize_ObjectVariant+0x8a>
 800aece:	f106 0308 	add.w	r3, r6, #8
 800aed2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aed6:	f106 010c 	add.w	r1, r6, #12
 800aeda:	4628      	mov	r0, r5
 800aedc:	f002 fbc0 	bl	800d660 <ucdr_deserialize_sequence_uint8_t>
 800aee0:	4604      	mov	r4, r0
 800aee2:	e7e4      	b.n	800aeae <uxr_deserialize_ObjectVariant+0x10a>

0800aee4 <uxr_deserialize_BaseObjectRequest>:
 800aee4:	b570      	push	{r4, r5, r6, lr}
 800aee6:	2202      	movs	r2, #2
 800aee8:	4605      	mov	r5, r0
 800aeea:	460e      	mov	r6, r1
 800aeec:	f002 fb14 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800aef0:	2202      	movs	r2, #2
 800aef2:	4604      	mov	r4, r0
 800aef4:	18b1      	adds	r1, r6, r2
 800aef6:	4628      	mov	r0, r5
 800aef8:	f002 fb0e 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800aefc:	4020      	ands	r0, r4
 800aefe:	b2c0      	uxtb	r0, r0
 800af00:	bd70      	pop	{r4, r5, r6, pc}
 800af02:	bf00      	nop

0800af04 <uxr_serialize_ActivityInfoVariant>:
 800af04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af08:	460d      	mov	r5, r1
 800af0a:	7809      	ldrb	r1, [r1, #0]
 800af0c:	4606      	mov	r6, r0
 800af0e:	f7fc feeb 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800af12:	b130      	cbz	r0, 800af22 <uxr_serialize_ActivityInfoVariant+0x1e>
 800af14:	782b      	ldrb	r3, [r5, #0]
 800af16:	2b06      	cmp	r3, #6
 800af18:	d014      	beq.n	800af44 <uxr_serialize_ActivityInfoVariant+0x40>
 800af1a:	2b0d      	cmp	r3, #13
 800af1c:	d019      	beq.n	800af52 <uxr_serialize_ActivityInfoVariant+0x4e>
 800af1e:	2b05      	cmp	r3, #5
 800af20:	d001      	beq.n	800af26 <uxr_serialize_ActivityInfoVariant+0x22>
 800af22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af26:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800af2a:	4630      	mov	r0, r6
 800af2c:	f7fd fc04 	bl	8008738 <ucdr_serialize_int16_t>
 800af30:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800af34:	4604      	mov	r4, r0
 800af36:	4630      	mov	r0, r6
 800af38:	f7fd fb36 	bl	80085a8 <ucdr_serialize_uint64_t>
 800af3c:	4020      	ands	r0, r4
 800af3e:	b2c0      	uxtb	r0, r0
 800af40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af44:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800af48:	4630      	mov	r0, r6
 800af4a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af4e:	f7fd bbf3 	b.w	8008738 <ucdr_serialize_int16_t>
 800af52:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800af56:	4630      	mov	r0, r6
 800af58:	f7fd fbee 	bl	8008738 <ucdr_serialize_int16_t>
 800af5c:	68e9      	ldr	r1, [r5, #12]
 800af5e:	4681      	mov	r9, r0
 800af60:	4630      	mov	r0, r6
 800af62:	f7fd f8dd 	bl	8008120 <ucdr_serialize_uint32_t>
 800af66:	68eb      	ldr	r3, [r5, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d051      	beq.n	800b010 <uxr_serialize_ActivityInfoVariant+0x10c>
 800af6c:	b1e8      	cbz	r0, 800afaa <uxr_serialize_ActivityInfoVariant+0xa6>
 800af6e:	f105 0714 	add.w	r7, r5, #20
 800af72:	f04f 0800 	mov.w	r8, #0
 800af76:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 800af7a:	4630      	mov	r0, r6
 800af7c:	f7fc feb4 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800af80:	b198      	cbz	r0, 800afaa <uxr_serialize_ActivityInfoVariant+0xa6>
 800af82:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 800af86:	2b03      	cmp	r3, #3
 800af88:	d839      	bhi.n	800affe <uxr_serialize_ActivityInfoVariant+0xfa>
 800af8a:	e8df f003 	tbb	[pc, r3]
 800af8e:	1e2b      	.short	0x1e2b
 800af90:	0211      	.short	0x0211
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	4630      	mov	r0, r6
 800af96:	f002 fb7f 	bl	800d698 <ucdr_serialize_string>
 800af9a:	68eb      	ldr	r3, [r5, #12]
 800af9c:	f108 0801 	add.w	r8, r8, #1
 800afa0:	4598      	cmp	r8, r3
 800afa2:	d231      	bcs.n	800b008 <uxr_serialize_ActivityInfoVariant+0x104>
 800afa4:	3718      	adds	r7, #24
 800afa6:	2800      	cmp	r0, #0
 800afa8:	d1e5      	bne.n	800af76 <uxr_serialize_ActivityInfoVariant+0x72>
 800afaa:	2000      	movs	r0, #0
 800afac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afb0:	2210      	movs	r2, #16
 800afb2:	4639      	mov	r1, r7
 800afb4:	4630      	mov	r0, r6
 800afb6:	f002 fa4b 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800afba:	6939      	ldr	r1, [r7, #16]
 800afbc:	4604      	mov	r4, r0
 800afbe:	4630      	mov	r0, r6
 800afc0:	f7fd f8ae 	bl	8008120 <ucdr_serialize_uint32_t>
 800afc4:	4020      	ands	r0, r4
 800afc6:	b2c0      	uxtb	r0, r0
 800afc8:	e7e7      	b.n	800af9a <uxr_serialize_ActivityInfoVariant+0x96>
 800afca:	2204      	movs	r2, #4
 800afcc:	4639      	mov	r1, r7
 800afce:	4630      	mov	r0, r6
 800afd0:	f002 fa3e 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800afd4:	88b9      	ldrh	r1, [r7, #4]
 800afd6:	4604      	mov	r4, r0
 800afd8:	4630      	mov	r0, r6
 800afda:	f7fc feb1 	bl	8007d40 <ucdr_serialize_uint16_t>
 800afde:	4020      	ands	r0, r4
 800afe0:	b2c0      	uxtb	r0, r0
 800afe2:	e7da      	b.n	800af9a <uxr_serialize_ActivityInfoVariant+0x96>
 800afe4:	2202      	movs	r2, #2
 800afe6:	4639      	mov	r1, r7
 800afe8:	4630      	mov	r0, r6
 800afea:	f002 fa31 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800afee:	78b9      	ldrb	r1, [r7, #2]
 800aff0:	4604      	mov	r4, r0
 800aff2:	4630      	mov	r0, r6
 800aff4:	f7fc fe78 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800aff8:	4020      	ands	r0, r4
 800affa:	b2c0      	uxtb	r0, r0
 800affc:	e7cd      	b.n	800af9a <uxr_serialize_ActivityInfoVariant+0x96>
 800affe:	68eb      	ldr	r3, [r5, #12]
 800b000:	f108 0801 	add.w	r8, r8, #1
 800b004:	4598      	cmp	r8, r3
 800b006:	d308      	bcc.n	800b01a <uxr_serialize_ActivityInfoVariant+0x116>
 800b008:	ea09 0000 	and.w	r0, r9, r0
 800b00c:	b2c0      	uxtb	r0, r0
 800b00e:	e788      	b.n	800af22 <uxr_serialize_ActivityInfoVariant+0x1e>
 800b010:	ea09 0900 	and.w	r9, r9, r0
 800b014:	fa5f f089 	uxtb.w	r0, r9
 800b018:	e783      	b.n	800af22 <uxr_serialize_ActivityInfoVariant+0x1e>
 800b01a:	3718      	adds	r7, #24
 800b01c:	e7ab      	b.n	800af76 <uxr_serialize_ActivityInfoVariant+0x72>
 800b01e:	bf00      	nop

0800b020 <uxr_deserialize_BaseObjectReply>:
 800b020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b024:	2202      	movs	r2, #2
 800b026:	4606      	mov	r6, r0
 800b028:	460f      	mov	r7, r1
 800b02a:	f002 fa75 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800b02e:	2202      	movs	r2, #2
 800b030:	18b9      	adds	r1, r7, r2
 800b032:	4605      	mov	r5, r0
 800b034:	4630      	mov	r0, r6
 800b036:	f002 fa6f 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800b03a:	1d39      	adds	r1, r7, #4
 800b03c:	4680      	mov	r8, r0
 800b03e:	4630      	mov	r0, r6
 800b040:	f7fc fe68 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800b044:	1d79      	adds	r1, r7, #5
 800b046:	4604      	mov	r4, r0
 800b048:	4630      	mov	r0, r6
 800b04a:	f7fc fe63 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800b04e:	ea05 0508 	and.w	r5, r5, r8
 800b052:	402c      	ands	r4, r5
 800b054:	4020      	ands	r0, r4
 800b056:	b2c0      	uxtb	r0, r0
 800b058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b05c <uxr_serialize_ReadSpecification>:
 800b05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b060:	460d      	mov	r5, r1
 800b062:	7809      	ldrb	r1, [r1, #0]
 800b064:	4606      	mov	r6, r0
 800b066:	f7fc fe3f 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800b06a:	7869      	ldrb	r1, [r5, #1]
 800b06c:	4604      	mov	r4, r0
 800b06e:	4630      	mov	r0, r6
 800b070:	f7fc fe3a 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800b074:	78a9      	ldrb	r1, [r5, #2]
 800b076:	4004      	ands	r4, r0
 800b078:	4630      	mov	r0, r6
 800b07a:	f7fc fe07 	bl	8007c8c <ucdr_serialize_bool>
 800b07e:	78ab      	ldrb	r3, [r5, #2]
 800b080:	b2e4      	uxtb	r4, r4
 800b082:	4004      	ands	r4, r0
 800b084:	b94b      	cbnz	r3, 800b09a <uxr_serialize_ReadSpecification+0x3e>
 800b086:	7a29      	ldrb	r1, [r5, #8]
 800b088:	4630      	mov	r0, r6
 800b08a:	f7fc fdff 	bl	8007c8c <ucdr_serialize_bool>
 800b08e:	7a2b      	ldrb	r3, [r5, #8]
 800b090:	4004      	ands	r4, r0
 800b092:	b943      	cbnz	r3, 800b0a6 <uxr_serialize_ReadSpecification+0x4a>
 800b094:	4620      	mov	r0, r4
 800b096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b09a:	6869      	ldr	r1, [r5, #4]
 800b09c:	4630      	mov	r0, r6
 800b09e:	f002 fafb 	bl	800d698 <ucdr_serialize_string>
 800b0a2:	4004      	ands	r4, r0
 800b0a4:	e7ef      	b.n	800b086 <uxr_serialize_ReadSpecification+0x2a>
 800b0a6:	8969      	ldrh	r1, [r5, #10]
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f7fc fe49 	bl	8007d40 <ucdr_serialize_uint16_t>
 800b0ae:	89a9      	ldrh	r1, [r5, #12]
 800b0b0:	4607      	mov	r7, r0
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	f7fc fe44 	bl	8007d40 <ucdr_serialize_uint16_t>
 800b0b8:	89e9      	ldrh	r1, [r5, #14]
 800b0ba:	4007      	ands	r7, r0
 800b0bc:	4630      	mov	r0, r6
 800b0be:	f7fc fe3f 	bl	8007d40 <ucdr_serialize_uint16_t>
 800b0c2:	8a29      	ldrh	r1, [r5, #16]
 800b0c4:	4680      	mov	r8, r0
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	f7fc fe3a 	bl	8007d40 <ucdr_serialize_uint16_t>
 800b0cc:	b2ff      	uxtb	r7, r7
 800b0ce:	ea04 0507 	and.w	r5, r4, r7
 800b0d2:	ea05 0508 	and.w	r5, r5, r8
 800b0d6:	ea00 0405 	and.w	r4, r0, r5
 800b0da:	4620      	mov	r0, r4
 800b0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b0e0 <uxr_serialize_CREATE_CLIENT_Payload>:
 800b0e0:	f7ff bb28 	b.w	800a734 <uxr_serialize_CLIENT_Representation>

0800b0e4 <uxr_serialize_CREATE_Payload>:
 800b0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e6:	2202      	movs	r2, #2
 800b0e8:	4606      	mov	r6, r0
 800b0ea:	460d      	mov	r5, r1
 800b0ec:	f002 f9b0 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800b0f0:	2202      	movs	r2, #2
 800b0f2:	18a9      	adds	r1, r5, r2
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	4630      	mov	r0, r6
 800b0f8:	f002 f9aa 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800b0fc:	7929      	ldrb	r1, [r5, #4]
 800b0fe:	4607      	mov	r7, r0
 800b100:	4630      	mov	r0, r6
 800b102:	f7fc fdf1 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800b106:	b170      	cbz	r0, 800b126 <uxr_serialize_CREATE_Payload+0x42>
 800b108:	792b      	ldrb	r3, [r5, #4]
 800b10a:	403c      	ands	r4, r7
 800b10c:	3b01      	subs	r3, #1
 800b10e:	b2e4      	uxtb	r4, r4
 800b110:	2b0d      	cmp	r3, #13
 800b112:	d809      	bhi.n	800b128 <uxr_serialize_CREATE_Payload+0x44>
 800b114:	e8df f003 	tbb	[pc, r3]
 800b118:	23230a3e 	.word	0x23230a3e
 800b11c:	0a0a0a0a 	.word	0x0a0a0a0a
 800b120:	12121208 	.word	0x12121208
 800b124:	5f58      	.short	0x5f58
 800b126:	2400      	movs	r4, #0
 800b128:	4620      	mov	r0, r4
 800b12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b12c:	f105 0108 	add.w	r1, r5, #8
 800b130:	4630      	mov	r0, r6
 800b132:	f7ff fc07 	bl	800a944 <uxr_serialize_DATAWRITER_Representation>
 800b136:	4004      	ands	r4, r0
 800b138:	4620      	mov	r0, r4
 800b13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b13c:	7a29      	ldrb	r1, [r5, #8]
 800b13e:	4630      	mov	r0, r6
 800b140:	f7fc fdd2 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800b144:	2800      	cmp	r0, #0
 800b146:	d0ee      	beq.n	800b126 <uxr_serialize_CREATE_Payload+0x42>
 800b148:	7a2b      	ldrb	r3, [r5, #8]
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d001      	beq.n	800b152 <uxr_serialize_CREATE_Payload+0x6e>
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d1ea      	bne.n	800b128 <uxr_serialize_CREATE_Payload+0x44>
 800b152:	68e9      	ldr	r1, [r5, #12]
 800b154:	4630      	mov	r0, r6
 800b156:	f002 fa9f 	bl	800d698 <ucdr_serialize_string>
 800b15a:	4004      	ands	r4, r0
 800b15c:	e7e4      	b.n	800b128 <uxr_serialize_CREATE_Payload+0x44>
 800b15e:	7a29      	ldrb	r1, [r5, #8]
 800b160:	4630      	mov	r0, r6
 800b162:	f7fc fdc1 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800b166:	4607      	mov	r7, r0
 800b168:	b158      	cbz	r0, 800b182 <uxr_serialize_CREATE_Payload+0x9e>
 800b16a:	7a2b      	ldrb	r3, [r5, #8]
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d039      	beq.n	800b1e4 <uxr_serialize_CREATE_Payload+0x100>
 800b170:	2b03      	cmp	r3, #3
 800b172:	d106      	bne.n	800b182 <uxr_serialize_CREATE_Payload+0x9e>
 800b174:	68ea      	ldr	r2, [r5, #12]
 800b176:	f105 0110 	add.w	r1, r5, #16
 800b17a:	4630      	mov	r0, r6
 800b17c:	f002 fa5e 	bl	800d63c <ucdr_serialize_sequence_uint8_t>
 800b180:	4607      	mov	r7, r0
 800b182:	2202      	movs	r2, #2
 800b184:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 800b188:	4630      	mov	r0, r6
 800b18a:	f002 f961 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800b18e:	4038      	ands	r0, r7
 800b190:	4004      	ands	r4, r0
 800b192:	e7c9      	b.n	800b128 <uxr_serialize_CREATE_Payload+0x44>
 800b194:	7a29      	ldrb	r1, [r5, #8]
 800b196:	4630      	mov	r0, r6
 800b198:	f7fc fda6 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800b19c:	4607      	mov	r7, r0
 800b19e:	b158      	cbz	r0, 800b1b8 <uxr_serialize_CREATE_Payload+0xd4>
 800b1a0:	7a2b      	ldrb	r3, [r5, #8]
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	d003      	beq.n	800b1ae <uxr_serialize_CREATE_Payload+0xca>
 800b1a6:	2b03      	cmp	r3, #3
 800b1a8:	d022      	beq.n	800b1f0 <uxr_serialize_CREATE_Payload+0x10c>
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d104      	bne.n	800b1b8 <uxr_serialize_CREATE_Payload+0xd4>
 800b1ae:	68e9      	ldr	r1, [r5, #12]
 800b1b0:	4630      	mov	r0, r6
 800b1b2:	f002 fa71 	bl	800d698 <ucdr_serialize_string>
 800b1b6:	4607      	mov	r7, r0
 800b1b8:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 800b1bc:	4630      	mov	r0, r6
 800b1be:	f7fd fabb 	bl	8008738 <ucdr_serialize_int16_t>
 800b1c2:	4038      	ands	r0, r7
 800b1c4:	4004      	ands	r4, r0
 800b1c6:	e7af      	b.n	800b128 <uxr_serialize_CREATE_Payload+0x44>
 800b1c8:	f105 0108 	add.w	r1, r5, #8
 800b1cc:	4630      	mov	r0, r6
 800b1ce:	f7ff fb6f 	bl	800a8b0 <uxr_serialize_AGENT_Representation>
 800b1d2:	4004      	ands	r4, r0
 800b1d4:	e7a8      	b.n	800b128 <uxr_serialize_CREATE_Payload+0x44>
 800b1d6:	f105 0108 	add.w	r1, r5, #8
 800b1da:	4630      	mov	r0, r6
 800b1dc:	f7ff faaa 	bl	800a734 <uxr_serialize_CLIENT_Representation>
 800b1e0:	4004      	ands	r4, r0
 800b1e2:	e7a1      	b.n	800b128 <uxr_serialize_CREATE_Payload+0x44>
 800b1e4:	68e9      	ldr	r1, [r5, #12]
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	f002 fa56 	bl	800d698 <ucdr_serialize_string>
 800b1ec:	4607      	mov	r7, r0
 800b1ee:	e7c8      	b.n	800b182 <uxr_serialize_CREATE_Payload+0x9e>
 800b1f0:	68ea      	ldr	r2, [r5, #12]
 800b1f2:	f105 0110 	add.w	r1, r5, #16
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f002 fa20 	bl	800d63c <ucdr_serialize_sequence_uint8_t>
 800b1fc:	4607      	mov	r7, r0
 800b1fe:	e7db      	b.n	800b1b8 <uxr_serialize_CREATE_Payload+0xd4>

0800b200 <uxr_deserialize_GET_INFO_Payload>:
 800b200:	b570      	push	{r4, r5, r6, lr}
 800b202:	2202      	movs	r2, #2
 800b204:	4605      	mov	r5, r0
 800b206:	460e      	mov	r6, r1
 800b208:	f002 f986 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800b20c:	2202      	movs	r2, #2
 800b20e:	18b1      	adds	r1, r6, r2
 800b210:	4604      	mov	r4, r0
 800b212:	4628      	mov	r0, r5
 800b214:	f002 f980 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800b218:	1d31      	adds	r1, r6, #4
 800b21a:	4004      	ands	r4, r0
 800b21c:	4628      	mov	r0, r5
 800b21e:	f7fd f8a9 	bl	8008374 <ucdr_deserialize_uint32_t>
 800b222:	b2e4      	uxtb	r4, r4
 800b224:	4020      	ands	r0, r4
 800b226:	bd70      	pop	{r4, r5, r6, pc}

0800b228 <uxr_serialize_DELETE_Payload>:
 800b228:	b570      	push	{r4, r5, r6, lr}
 800b22a:	2202      	movs	r2, #2
 800b22c:	4605      	mov	r5, r0
 800b22e:	460e      	mov	r6, r1
 800b230:	f002 f90e 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800b234:	2202      	movs	r2, #2
 800b236:	4604      	mov	r4, r0
 800b238:	18b1      	adds	r1, r6, r2
 800b23a:	4628      	mov	r0, r5
 800b23c:	f002 f908 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800b240:	4020      	ands	r0, r4
 800b242:	b2c0      	uxtb	r0, r0
 800b244:	bd70      	pop	{r4, r5, r6, pc}
 800b246:	bf00      	nop

0800b248 <uxr_deserialize_STATUS_AGENT_Payload>:
 800b248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b24c:	4605      	mov	r5, r0
 800b24e:	460e      	mov	r6, r1
 800b250:	f7fc fd60 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800b254:	1c71      	adds	r1, r6, #1
 800b256:	4604      	mov	r4, r0
 800b258:	4628      	mov	r0, r5
 800b25a:	f7fc fd5b 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800b25e:	2204      	movs	r2, #4
 800b260:	18b1      	adds	r1, r6, r2
 800b262:	4681      	mov	r9, r0
 800b264:	4628      	mov	r0, r5
 800b266:	f002 f957 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800b26a:	f106 0108 	add.w	r1, r6, #8
 800b26e:	4680      	mov	r8, r0
 800b270:	2202      	movs	r2, #2
 800b272:	4628      	mov	r0, r5
 800b274:	f002 f950 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800b278:	2202      	movs	r2, #2
 800b27a:	f106 010a 	add.w	r1, r6, #10
 800b27e:	4607      	mov	r7, r0
 800b280:	4628      	mov	r0, r5
 800b282:	f002 f949 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800b286:	ea04 0409 	and.w	r4, r4, r9
 800b28a:	4603      	mov	r3, r0
 800b28c:	f106 010c 	add.w	r1, r6, #12
 800b290:	4628      	mov	r0, r5
 800b292:	b2e4      	uxtb	r4, r4
 800b294:	461d      	mov	r5, r3
 800b296:	ea04 0408 	and.w	r4, r4, r8
 800b29a:	f7fc fd0d 	bl	8007cb8 <ucdr_deserialize_bool>
 800b29e:	4027      	ands	r7, r4
 800b2a0:	403d      	ands	r5, r7
 800b2a2:	4028      	ands	r0, r5
 800b2a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b2a8 <uxr_deserialize_STATUS_Payload>:
 800b2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ac:	2202      	movs	r2, #2
 800b2ae:	4606      	mov	r6, r0
 800b2b0:	460f      	mov	r7, r1
 800b2b2:	f002 f931 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	18b9      	adds	r1, r7, r2
 800b2ba:	4605      	mov	r5, r0
 800b2bc:	4630      	mov	r0, r6
 800b2be:	f002 f92b 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800b2c2:	1d39      	adds	r1, r7, #4
 800b2c4:	4680      	mov	r8, r0
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	f7fc fd24 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800b2cc:	1d79      	adds	r1, r7, #5
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	f7fc fd1f 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800b2d6:	ea05 0508 	and.w	r5, r5, r8
 800b2da:	402c      	ands	r4, r5
 800b2dc:	4020      	ands	r0, r4
 800b2de:	b2c0      	uxtb	r0, r0
 800b2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b2e4 <uxr_serialize_INFO_Payload>:
 800b2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e8:	2202      	movs	r2, #2
 800b2ea:	460c      	mov	r4, r1
 800b2ec:	4605      	mov	r5, r0
 800b2ee:	f002 f8af 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800b2f2:	2202      	movs	r2, #2
 800b2f4:	18a1      	adds	r1, r4, r2
 800b2f6:	4680      	mov	r8, r0
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	f002 f8a9 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800b2fe:	7921      	ldrb	r1, [r4, #4]
 800b300:	4607      	mov	r7, r0
 800b302:	4628      	mov	r0, r5
 800b304:	f7fc fcf0 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800b308:	7961      	ldrb	r1, [r4, #5]
 800b30a:	4606      	mov	r6, r0
 800b30c:	4628      	mov	r0, r5
 800b30e:	f7fc fceb 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800b312:	ea08 0807 	and.w	r8, r8, r7
 800b316:	ea06 0608 	and.w	r6, r6, r8
 800b31a:	ea00 0706 	and.w	r7, r0, r6
 800b31e:	7a21      	ldrb	r1, [r4, #8]
 800b320:	4628      	mov	r0, r5
 800b322:	f7fc fcb3 	bl	8007c8c <ucdr_serialize_bool>
 800b326:	7a23      	ldrb	r3, [r4, #8]
 800b328:	b2ff      	uxtb	r7, r7
 800b32a:	4606      	mov	r6, r0
 800b32c:	b96b      	cbnz	r3, 800b34a <uxr_serialize_INFO_Payload+0x66>
 800b32e:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800b332:	4628      	mov	r0, r5
 800b334:	f7fc fcaa 	bl	8007c8c <ucdr_serialize_bool>
 800b338:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800b33c:	4030      	ands	r0, r6
 800b33e:	b2c6      	uxtb	r6, r0
 800b340:	b983      	cbnz	r3, 800b364 <uxr_serialize_INFO_Payload+0x80>
 800b342:	ea06 0007 	and.w	r0, r6, r7
 800b346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b34a:	7b21      	ldrb	r1, [r4, #12]
 800b34c:	4628      	mov	r0, r5
 800b34e:	f7fc fccb 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800b352:	b188      	cbz	r0, 800b378 <uxr_serialize_INFO_Payload+0x94>
 800b354:	f104 010c 	add.w	r1, r4, #12
 800b358:	4628      	mov	r0, r5
 800b35a:	f7ff fb1b 	bl	800a994 <uxr_serialize_ObjectVariant.part.0>
 800b35e:	4030      	ands	r0, r6
 800b360:	b2c6      	uxtb	r6, r0
 800b362:	e7e4      	b.n	800b32e <uxr_serialize_INFO_Payload+0x4a>
 800b364:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800b368:	4628      	mov	r0, r5
 800b36a:	f7ff fdcb 	bl	800af04 <uxr_serialize_ActivityInfoVariant>
 800b36e:	4006      	ands	r6, r0
 800b370:	ea06 0007 	and.w	r0, r6, r7
 800b374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b378:	4606      	mov	r6, r0
 800b37a:	e7d8      	b.n	800b32e <uxr_serialize_INFO_Payload+0x4a>

0800b37c <uxr_serialize_READ_DATA_Payload>:
 800b37c:	b570      	push	{r4, r5, r6, lr}
 800b37e:	2202      	movs	r2, #2
 800b380:	4605      	mov	r5, r0
 800b382:	460e      	mov	r6, r1
 800b384:	f002 f864 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800b388:	2202      	movs	r2, #2
 800b38a:	18b1      	adds	r1, r6, r2
 800b38c:	4604      	mov	r4, r0
 800b38e:	4628      	mov	r0, r5
 800b390:	f002 f85e 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800b394:	1d31      	adds	r1, r6, #4
 800b396:	4004      	ands	r4, r0
 800b398:	4628      	mov	r0, r5
 800b39a:	f7ff fe5f 	bl	800b05c <uxr_serialize_ReadSpecification>
 800b39e:	b2e4      	uxtb	r4, r4
 800b3a0:	4020      	ands	r0, r4
 800b3a2:	bd70      	pop	{r4, r5, r6, pc}

0800b3a4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800b3a4:	b570      	push	{r4, r5, r6, lr}
 800b3a6:	2202      	movs	r2, #2
 800b3a8:	4605      	mov	r5, r0
 800b3aa:	460e      	mov	r6, r1
 800b3ac:	f002 f850 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800b3b0:	2202      	movs	r2, #2
 800b3b2:	4604      	mov	r4, r0
 800b3b4:	18b1      	adds	r1, r6, r2
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	f002 f84a 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800b3bc:	4020      	ands	r0, r4
 800b3be:	b2c0      	uxtb	r0, r0
 800b3c0:	bd70      	pop	{r4, r5, r6, pc}
 800b3c2:	bf00      	nop

0800b3c4 <uxr_serialize_ACKNACK_Payload>:
 800b3c4:	b570      	push	{r4, r5, r6, lr}
 800b3c6:	460c      	mov	r4, r1
 800b3c8:	460e      	mov	r6, r1
 800b3ca:	f834 1b02 	ldrh.w	r1, [r4], #2
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	f7fc fcb6 	bl	8007d40 <ucdr_serialize_uint16_t>
 800b3d4:	2202      	movs	r2, #2
 800b3d6:	4621      	mov	r1, r4
 800b3d8:	4604      	mov	r4, r0
 800b3da:	4628      	mov	r0, r5
 800b3dc:	f002 f838 	bl	800d450 <ucdr_serialize_array_uint8_t>
 800b3e0:	7931      	ldrb	r1, [r6, #4]
 800b3e2:	4004      	ands	r4, r0
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	f7fc fc7f 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800b3ea:	b2e4      	uxtb	r4, r4
 800b3ec:	4020      	ands	r0, r4
 800b3ee:	bd70      	pop	{r4, r5, r6, pc}

0800b3f0 <uxr_deserialize_ACKNACK_Payload>:
 800b3f0:	b570      	push	{r4, r5, r6, lr}
 800b3f2:	4605      	mov	r5, r0
 800b3f4:	460e      	mov	r6, r1
 800b3f6:	f7fc fda7 	bl	8007f48 <ucdr_deserialize_uint16_t>
 800b3fa:	2202      	movs	r2, #2
 800b3fc:	18b1      	adds	r1, r6, r2
 800b3fe:	4604      	mov	r4, r0
 800b400:	4628      	mov	r0, r5
 800b402:	f002 f889 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800b406:	1d31      	adds	r1, r6, #4
 800b408:	4004      	ands	r4, r0
 800b40a:	4628      	mov	r0, r5
 800b40c:	f7fc fc82 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800b410:	b2e4      	uxtb	r4, r4
 800b412:	4020      	ands	r0, r4
 800b414:	bd70      	pop	{r4, r5, r6, pc}
 800b416:	bf00      	nop

0800b418 <uxr_serialize_HEARTBEAT_Payload>:
 800b418:	b570      	push	{r4, r5, r6, lr}
 800b41a:	460d      	mov	r5, r1
 800b41c:	8809      	ldrh	r1, [r1, #0]
 800b41e:	4606      	mov	r6, r0
 800b420:	f7fc fc8e 	bl	8007d40 <ucdr_serialize_uint16_t>
 800b424:	8869      	ldrh	r1, [r5, #2]
 800b426:	4604      	mov	r4, r0
 800b428:	4630      	mov	r0, r6
 800b42a:	f7fc fc89 	bl	8007d40 <ucdr_serialize_uint16_t>
 800b42e:	7929      	ldrb	r1, [r5, #4]
 800b430:	4004      	ands	r4, r0
 800b432:	4630      	mov	r0, r6
 800b434:	f7fc fc58 	bl	8007ce8 <ucdr_serialize_uint8_t>
 800b438:	b2e4      	uxtb	r4, r4
 800b43a:	4020      	ands	r0, r4
 800b43c:	bd70      	pop	{r4, r5, r6, pc}
 800b43e:	bf00      	nop

0800b440 <uxr_deserialize_HEARTBEAT_Payload>:
 800b440:	b570      	push	{r4, r5, r6, lr}
 800b442:	4605      	mov	r5, r0
 800b444:	460e      	mov	r6, r1
 800b446:	f7fc fd7f 	bl	8007f48 <ucdr_deserialize_uint16_t>
 800b44a:	1cb1      	adds	r1, r6, #2
 800b44c:	4604      	mov	r4, r0
 800b44e:	4628      	mov	r0, r5
 800b450:	f7fc fd7a 	bl	8007f48 <ucdr_deserialize_uint16_t>
 800b454:	1d31      	adds	r1, r6, #4
 800b456:	4004      	ands	r4, r0
 800b458:	4628      	mov	r0, r5
 800b45a:	f7fc fc5b 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800b45e:	b2e4      	uxtb	r4, r4
 800b460:	4020      	ands	r0, r4
 800b462:	bd70      	pop	{r4, r5, r6, pc}

0800b464 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800b464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b468:	4605      	mov	r5, r0
 800b46a:	460e      	mov	r6, r1
 800b46c:	f7fd fb04 	bl	8008a78 <ucdr_deserialize_int32_t>
 800b470:	1d31      	adds	r1, r6, #4
 800b472:	4607      	mov	r7, r0
 800b474:	4628      	mov	r0, r5
 800b476:	f7fc ff7d 	bl	8008374 <ucdr_deserialize_uint32_t>
 800b47a:	f106 0108 	add.w	r1, r6, #8
 800b47e:	4680      	mov	r8, r0
 800b480:	4628      	mov	r0, r5
 800b482:	f7fd faf9 	bl	8008a78 <ucdr_deserialize_int32_t>
 800b486:	f106 010c 	add.w	r1, r6, #12
 800b48a:	4604      	mov	r4, r0
 800b48c:	4628      	mov	r0, r5
 800b48e:	f7fc ff71 	bl	8008374 <ucdr_deserialize_uint32_t>
 800b492:	ea07 0708 	and.w	r7, r7, r8
 800b496:	403c      	ands	r4, r7
 800b498:	f106 0110 	add.w	r1, r6, #16
 800b49c:	4004      	ands	r4, r0
 800b49e:	4628      	mov	r0, r5
 800b4a0:	f7fd faea 	bl	8008a78 <ucdr_deserialize_int32_t>
 800b4a4:	f106 0114 	add.w	r1, r6, #20
 800b4a8:	4607      	mov	r7, r0
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	f7fc ff62 	bl	8008374 <ucdr_deserialize_uint32_t>
 800b4b0:	b2e4      	uxtb	r4, r4
 800b4b2:	403c      	ands	r4, r7
 800b4b4:	4020      	ands	r0, r4
 800b4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4ba:	bf00      	nop

0800b4bc <uxr_deserialize_SampleIdentity>:
 800b4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4c0:	220c      	movs	r2, #12
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	460d      	mov	r5, r1
 800b4c6:	f002 f827 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800b4ca:	2203      	movs	r2, #3
 800b4cc:	f105 010c 	add.w	r1, r5, #12
 800b4d0:	4680      	mov	r8, r0
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f002 f820 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800b4d8:	f105 010f 	add.w	r1, r5, #15
 800b4dc:	4681      	mov	r9, r0
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f7fc fc18 	bl	8007d14 <ucdr_deserialize_uint8_t>
 800b4e4:	f105 0110 	add.w	r1, r5, #16
 800b4e8:	4607      	mov	r7, r0
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f7fd fac4 	bl	8008a78 <ucdr_deserialize_int32_t>
 800b4f0:	f105 0114 	add.w	r1, r5, #20
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f7fc ff3c 	bl	8008374 <ucdr_deserialize_uint32_t>
 800b4fc:	ea08 0809 	and.w	r8, r8, r9
 800b500:	ea07 0708 	and.w	r7, r7, r8
 800b504:	403e      	ands	r6, r7
 800b506:	4030      	ands	r0, r6
 800b508:	b2c0      	uxtb	r0, r0
 800b50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b50e:	bf00      	nop

0800b510 <rcl_convert_rmw_ret_to_rcl_ret>:
 800b510:	280b      	cmp	r0, #11
 800b512:	dc0d      	bgt.n	800b530 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800b514:	2800      	cmp	r0, #0
 800b516:	db09      	blt.n	800b52c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800b518:	280b      	cmp	r0, #11
 800b51a:	d807      	bhi.n	800b52c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800b51c:	e8df f000 	tbb	[pc, r0]
 800b520:	07060607 	.word	0x07060607
 800b524:	06060606 	.word	0x06060606
 800b528:	07070606 	.word	0x07070606
 800b52c:	2001      	movs	r0, #1
 800b52e:	4770      	bx	lr
 800b530:	28cb      	cmp	r0, #203	@ 0xcb
 800b532:	bf14      	ite	ne
 800b534:	2001      	movne	r0, #1
 800b536:	20cb      	moveq	r0, #203	@ 0xcb
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop

0800b53c <rcl_get_zero_initialized_context>:
 800b53c:	2200      	movs	r2, #0
 800b53e:	e9c0 2200 	strd	r2, r2, [r0]
 800b542:	4770      	bx	lr

0800b544 <rcl_context_is_valid>:
 800b544:	b118      	cbz	r0, 800b54e <rcl_context_is_valid+0xa>
 800b546:	6840      	ldr	r0, [r0, #4]
 800b548:	3800      	subs	r0, #0
 800b54a:	bf18      	it	ne
 800b54c:	2001      	movne	r0, #1
 800b54e:	4770      	bx	lr

0800b550 <__cleanup_context>:
 800b550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b554:	4606      	mov	r6, r0
 800b556:	6800      	ldr	r0, [r0, #0]
 800b558:	2300      	movs	r3, #0
 800b55a:	6073      	str	r3, [r6, #4]
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d042      	beq.n	800b5e6 <__cleanup_context+0x96>
 800b560:	6943      	ldr	r3, [r0, #20]
 800b562:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800b566:	6907      	ldr	r7, [r0, #16]
 800b568:	b39b      	cbz	r3, 800b5d2 <__cleanup_context+0x82>
 800b56a:	3014      	adds	r0, #20
 800b56c:	f000 f9b2 	bl	800b8d4 <rcl_init_options_fini>
 800b570:	4680      	mov	r8, r0
 800b572:	2800      	cmp	r0, #0
 800b574:	d144      	bne.n	800b600 <__cleanup_context+0xb0>
 800b576:	6830      	ldr	r0, [r6, #0]
 800b578:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b57a:	b123      	cbz	r3, 800b586 <__cleanup_context+0x36>
 800b57c:	3028      	adds	r0, #40	@ 0x28
 800b57e:	f001 fc1b 	bl	800cdb8 <rmw_context_fini>
 800b582:	bbb8      	cbnz	r0, 800b5f4 <__cleanup_context+0xa4>
 800b584:	6830      	ldr	r0, [r6, #0]
 800b586:	6a03      	ldr	r3, [r0, #32]
 800b588:	b1db      	cbz	r3, 800b5c2 <__cleanup_context+0x72>
 800b58a:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800b58e:	2a01      	cmp	r2, #1
 800b590:	f17c 0100 	sbcs.w	r1, ip, #0
 800b594:	db11      	blt.n	800b5ba <__cleanup_context+0x6a>
 800b596:	2400      	movs	r4, #0
 800b598:	4625      	mov	r5, r4
 800b59a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b59e:	4639      	mov	r1, r7
 800b5a0:	b1c8      	cbz	r0, 800b5d6 <__cleanup_context+0x86>
 800b5a2:	47c8      	blx	r9
 800b5a4:	6833      	ldr	r3, [r6, #0]
 800b5a6:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800b5aa:	3401      	adds	r4, #1
 800b5ac:	f145 0500 	adc.w	r5, r5, #0
 800b5b0:	4294      	cmp	r4, r2
 800b5b2:	eb75 010c 	sbcs.w	r1, r5, ip
 800b5b6:	6a1b      	ldr	r3, [r3, #32]
 800b5b8:	dbef      	blt.n	800b59a <__cleanup_context+0x4a>
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	4639      	mov	r1, r7
 800b5be:	47c8      	blx	r9
 800b5c0:	6830      	ldr	r0, [r6, #0]
 800b5c2:	4639      	mov	r1, r7
 800b5c4:	47c8      	blx	r9
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	e9c6 3300 	strd	r3, r3, [r6]
 800b5cc:	4640      	mov	r0, r8
 800b5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5d2:	4698      	mov	r8, r3
 800b5d4:	e7d0      	b.n	800b578 <__cleanup_context+0x28>
 800b5d6:	3401      	adds	r4, #1
 800b5d8:	f145 0500 	adc.w	r5, r5, #0
 800b5dc:	4294      	cmp	r4, r2
 800b5de:	eb75 010c 	sbcs.w	r1, r5, ip
 800b5e2:	dbda      	blt.n	800b59a <__cleanup_context+0x4a>
 800b5e4:	e7e9      	b.n	800b5ba <__cleanup_context+0x6a>
 800b5e6:	4680      	mov	r8, r0
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	e9c6 3300 	strd	r3, r3, [r6]
 800b5ee:	4640      	mov	r0, r8
 800b5f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5f4:	f1b8 0f00 	cmp.w	r8, #0
 800b5f8:	d005      	beq.n	800b606 <__cleanup_context+0xb6>
 800b5fa:	f7fb fe41 	bl	8007280 <rcutils_reset_error>
 800b5fe:	e7c1      	b.n	800b584 <__cleanup_context+0x34>
 800b600:	f7fb fe3e 	bl	8007280 <rcutils_reset_error>
 800b604:	e7b7      	b.n	800b576 <__cleanup_context+0x26>
 800b606:	f7ff ff83 	bl	800b510 <rcl_convert_rmw_ret_to_rcl_ret>
 800b60a:	4680      	mov	r8, r0
 800b60c:	e7f5      	b.n	800b5fa <__cleanup_context+0xaa>
 800b60e:	bf00      	nop

0800b610 <rcl_init>:
 800b610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b614:	1e04      	subs	r4, r0, #0
 800b616:	b0a5      	sub	sp, #148	@ 0x94
 800b618:	460d      	mov	r5, r1
 800b61a:	4617      	mov	r7, r2
 800b61c:	461e      	mov	r6, r3
 800b61e:	dd13      	ble.n	800b648 <rcl_init+0x38>
 800b620:	b161      	cbz	r1, 800b63c <rcl_init+0x2c>
 800b622:	f1a1 0e04 	sub.w	lr, r1, #4
 800b626:	f04f 0c00 	mov.w	ip, #0
 800b62a:	e001      	b.n	800b630 <rcl_init+0x20>
 800b62c:	4564      	cmp	r4, ip
 800b62e:	d00d      	beq.n	800b64c <rcl_init+0x3c>
 800b630:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 800b634:	f10c 0c01 	add.w	ip, ip, #1
 800b638:	2800      	cmp	r0, #0
 800b63a:	d1f7      	bne.n	800b62c <rcl_init+0x1c>
 800b63c:	f04f 080b 	mov.w	r8, #11
 800b640:	4640      	mov	r0, r8
 800b642:	b025      	add	sp, #148	@ 0x94
 800b644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b648:	2900      	cmp	r1, #0
 800b64a:	d1f7      	bne.n	800b63c <rcl_init+0x2c>
 800b64c:	2f00      	cmp	r7, #0
 800b64e:	d0f5      	beq.n	800b63c <rcl_init+0x2c>
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d0f2      	beq.n	800b63c <rcl_init+0x2c>
 800b656:	469c      	mov	ip, r3
 800b658:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b65c:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 800b660:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b664:	f8dc 3000 	ldr.w	r3, [ip]
 800b668:	f8ce 3000 	str.w	r3, [lr]
 800b66c:	a81f      	add	r0, sp, #124	@ 0x7c
 800b66e:	f7fb fddb 	bl	8007228 <rcutils_allocator_is_valid>
 800b672:	2800      	cmp	r0, #0
 800b674:	d0e2      	beq.n	800b63c <rcl_init+0x2c>
 800b676:	2e00      	cmp	r6, #0
 800b678:	d0e0      	beq.n	800b63c <rcl_init+0x2c>
 800b67a:	6833      	ldr	r3, [r6, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d173      	bne.n	800b768 <rcl_init+0x158>
 800b680:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 800b684:	2198      	movs	r1, #152	@ 0x98
 800b686:	2001      	movs	r0, #1
 800b688:	4798      	blx	r3
 800b68a:	4680      	mov	r8, r0
 800b68c:	6030      	str	r0, [r6, #0]
 800b68e:	2800      	cmp	r0, #0
 800b690:	f000 80ac 	beq.w	800b7ec <rcl_init+0x1dc>
 800b694:	a802      	add	r0, sp, #8
 800b696:	f000 ffff 	bl	800c698 <rmw_get_zero_initialized_context>
 800b69a:	a902      	add	r1, sp, #8
 800b69c:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 800b6a0:	2270      	movs	r2, #112	@ 0x70
 800b6a2:	f004 feb6 	bl	8010412 <memcpy>
 800b6a6:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 800b6aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b6ae:	f8d6 8000 	ldr.w	r8, [r6]
 800b6b2:	46c4      	mov	ip, r8
 800b6b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b6b8:	f8de 3000 	ldr.w	r3, [lr]
 800b6bc:	f8cc 3000 	str.w	r3, [ip]
 800b6c0:	f108 0114 	add.w	r1, r8, #20
 800b6c4:	4638      	mov	r0, r7
 800b6c6:	f000 f92f 	bl	800b928 <rcl_init_options_copy>
 800b6ca:	4680      	mov	r8, r0
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d147      	bne.n	800b760 <rcl_init+0x150>
 800b6d0:	f8d6 9000 	ldr.w	r9, [r6]
 800b6d4:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 800b6d8:	f8c9 0020 	str.w	r0, [r9, #32]
 800b6dc:	f8c9 4018 	str.w	r4, [r9, #24]
 800b6e0:	f8c9 a01c 	str.w	sl, [r9, #28]
 800b6e4:	2c00      	cmp	r4, #0
 800b6e6:	d047      	beq.n	800b778 <rcl_init+0x168>
 800b6e8:	2d00      	cmp	r5, #0
 800b6ea:	d045      	beq.n	800b778 <rcl_init+0x168>
 800b6ec:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 800b6f0:	2104      	movs	r1, #4
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	4798      	blx	r3
 800b6f6:	f8c9 0020 	str.w	r0, [r9, #32]
 800b6fa:	f8d6 9000 	ldr.w	r9, [r6]
 800b6fe:	f8d9 b020 	ldr.w	fp, [r9, #32]
 800b702:	f1bb 0f00 	cmp.w	fp, #0
 800b706:	d029      	beq.n	800b75c <rcl_init+0x14c>
 800b708:	2c01      	cmp	r4, #1
 800b70a:	f17a 0300 	sbcs.w	r3, sl, #0
 800b70e:	db33      	blt.n	800b778 <rcl_init+0x168>
 800b710:	f04f 0800 	mov.w	r8, #0
 800b714:	3d04      	subs	r5, #4
 800b716:	46c1      	mov	r9, r8
 800b718:	e00d      	b.n	800b736 <rcl_init+0x126>
 800b71a:	6829      	ldr	r1, [r5, #0]
 800b71c:	f004 fe79 	bl	8010412 <memcpy>
 800b720:	f118 0801 	adds.w	r8, r8, #1
 800b724:	f149 0900 	adc.w	r9, r9, #0
 800b728:	45ca      	cmp	sl, r9
 800b72a:	bf08      	it	eq
 800b72c:	4544      	cmpeq	r4, r8
 800b72e:	d021      	beq.n	800b774 <rcl_init+0x164>
 800b730:	6833      	ldr	r3, [r6, #0]
 800b732:	f8d3 b020 	ldr.w	fp, [r3, #32]
 800b736:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800b73a:	f7f4 fdb1 	bl	80002a0 <strlen>
 800b73e:	1c42      	adds	r2, r0, #1
 800b740:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800b742:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 800b744:	9201      	str	r2, [sp, #4]
 800b746:	4610      	mov	r0, r2
 800b748:	4798      	blx	r3
 800b74a:	6833      	ldr	r3, [r6, #0]
 800b74c:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 800b750:	6a1b      	ldr	r3, [r3, #32]
 800b752:	9a01      	ldr	r2, [sp, #4]
 800b754:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b758:	2800      	cmp	r0, #0
 800b75a:	d1de      	bne.n	800b71a <rcl_init+0x10a>
 800b75c:	f04f 080a 	mov.w	r8, #10
 800b760:	4630      	mov	r0, r6
 800b762:	f7ff fef5 	bl	800b550 <__cleanup_context>
 800b766:	e76b      	b.n	800b640 <rcl_init+0x30>
 800b768:	f04f 0864 	mov.w	r8, #100	@ 0x64
 800b76c:	4640      	mov	r0, r8
 800b76e:	b025      	add	sp, #148	@ 0x94
 800b770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b774:	f8d6 9000 	ldr.w	r9, [r6]
 800b778:	4a26      	ldr	r2, [pc, #152]	@ (800b814 <rcl_init+0x204>)
 800b77a:	6813      	ldr	r3, [r2, #0]
 800b77c:	3301      	adds	r3, #1
 800b77e:	d030      	beq.n	800b7e2 <rcl_init+0x1d2>
 800b780:	461d      	mov	r5, r3
 800b782:	2000      	movs	r0, #0
 800b784:	4619      	mov	r1, r3
 800b786:	f8d9 4014 	ldr.w	r4, [r9, #20]
 800b78a:	6073      	str	r3, [r6, #4]
 800b78c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b78e:	6011      	str	r1, [r2, #0]
 800b790:	3301      	adds	r3, #1
 800b792:	e9c4 5006 	strd	r5, r0, [r4, #24]
 800b796:	d033      	beq.n	800b800 <rcl_init+0x1f0>
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b79e:	f104 0530 	add.w	r5, r4, #48	@ 0x30
 800b7a2:	b333      	cbz	r3, 800b7f2 <rcl_init+0x1e2>
 800b7a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b7a6:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 800b7aa:	b953      	cbnz	r3, 800b7c2 <rcl_init+0x1b2>
 800b7ac:	2801      	cmp	r0, #1
 800b7ae:	d008      	beq.n	800b7c2 <rcl_init+0x1b2>
 800b7b0:	a91f      	add	r1, sp, #124	@ 0x7c
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	f003 fb44 	bl	800ee40 <rcl_get_discovery_static_peers>
 800b7b8:	4680      	mov	r8, r0
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	d1d0      	bne.n	800b760 <rcl_init+0x150>
 800b7be:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 800b7c2:	f003 fb33 	bl	800ee2c <rcl_automatic_discovery_range_to_string>
 800b7c6:	6831      	ldr	r1, [r6, #0]
 800b7c8:	6948      	ldr	r0, [r1, #20]
 800b7ca:	3128      	adds	r1, #40	@ 0x28
 800b7cc:	3018      	adds	r0, #24
 800b7ce:	f001 f9bf 	bl	800cb50 <rmw_init>
 800b7d2:	4680      	mov	r8, r0
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	f43f af33 	beq.w	800b640 <rcl_init+0x30>
 800b7da:	f7ff fe99 	bl	800b510 <rcl_convert_rmw_ret_to_rcl_ret>
 800b7de:	4680      	mov	r8, r0
 800b7e0:	e7be      	b.n	800b760 <rcl_init+0x150>
 800b7e2:	2101      	movs	r1, #1
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	460d      	mov	r5, r1
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	e7cc      	b.n	800b786 <rcl_init+0x176>
 800b7ec:	f04f 080a 	mov.w	r8, #10
 800b7f0:	e726      	b.n	800b640 <rcl_init+0x30>
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	f003 fad8 	bl	800eda8 <rcl_get_automatic_discovery_range>
 800b7f8:	4680      	mov	r8, r0
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	d0d2      	beq.n	800b7a4 <rcl_init+0x194>
 800b7fe:	e7af      	b.n	800b760 <rcl_init+0x150>
 800b800:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800b804:	f003 fb86 	bl	800ef14 <rcl_get_default_domain_id>
 800b808:	4680      	mov	r8, r0
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d1a8      	bne.n	800b760 <rcl_init+0x150>
 800b80e:	6833      	ldr	r3, [r6, #0]
 800b810:	695c      	ldr	r4, [r3, #20]
 800b812:	e7c1      	b.n	800b798 <rcl_init+0x188>
 800b814:	2000db00 	.word	0x2000db00

0800b818 <rcl_get_zero_initialized_init_options>:
 800b818:	2000      	movs	r0, #0
 800b81a:	4770      	bx	lr

0800b81c <rcl_init_options_init>:
 800b81c:	b084      	sub	sp, #16
 800b81e:	b570      	push	{r4, r5, r6, lr}
 800b820:	b09e      	sub	sp, #120	@ 0x78
 800b822:	ad23      	add	r5, sp, #140	@ 0x8c
 800b824:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800b828:	2800      	cmp	r0, #0
 800b82a:	d046      	beq.n	800b8ba <rcl_init_options_init+0x9e>
 800b82c:	6803      	ldr	r3, [r0, #0]
 800b82e:	4604      	mov	r4, r0
 800b830:	b133      	cbz	r3, 800b840 <rcl_init_options_init+0x24>
 800b832:	2564      	movs	r5, #100	@ 0x64
 800b834:	4628      	mov	r0, r5
 800b836:	b01e      	add	sp, #120	@ 0x78
 800b838:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b83c:	b004      	add	sp, #16
 800b83e:	4770      	bx	lr
 800b840:	4628      	mov	r0, r5
 800b842:	f7fb fcf1 	bl	8007228 <rcutils_allocator_is_valid>
 800b846:	2800      	cmp	r0, #0
 800b848:	d037      	beq.n	800b8ba <rcl_init_options_init+0x9e>
 800b84a:	46ae      	mov	lr, r5
 800b84c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b850:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800b854:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b858:	f8de 3000 	ldr.w	r3, [lr]
 800b85c:	f8cc 3000 	str.w	r3, [ip]
 800b860:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800b862:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b864:	2070      	movs	r0, #112	@ 0x70
 800b866:	4798      	blx	r3
 800b868:	4606      	mov	r6, r0
 800b86a:	6020      	str	r0, [r4, #0]
 800b86c:	b338      	cbz	r0, 800b8be <rcl_init_options_init+0xa2>
 800b86e:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800b872:	4686      	mov	lr, r0
 800b874:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b878:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b87c:	f8dc 3000 	ldr.w	r3, [ip]
 800b880:	f8ce 3000 	str.w	r3, [lr]
 800b884:	a802      	add	r0, sp, #8
 800b886:	f000 ff11 	bl	800c6ac <rmw_get_zero_initialized_init_options>
 800b88a:	2258      	movs	r2, #88	@ 0x58
 800b88c:	a902      	add	r1, sp, #8
 800b88e:	f106 0018 	add.w	r0, r6, #24
 800b892:	f004 fdbe 	bl	8010412 <memcpy>
 800b896:	ab26      	add	r3, sp, #152	@ 0x98
 800b898:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b89c:	6826      	ldr	r6, [r4, #0]
 800b89e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b8a2:	f106 0018 	add.w	r0, r6, #24
 800b8a6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800b8aa:	f001 f861 	bl	800c970 <rmw_init_options_init>
 800b8ae:	4605      	mov	r5, r0
 800b8b0:	b938      	cbnz	r0, 800b8c2 <rcl_init_options_init+0xa6>
 800b8b2:	6823      	ldr	r3, [r4, #0]
 800b8b4:	f883 0030 	strb.w	r0, [r3, #48]	@ 0x30
 800b8b8:	e7bc      	b.n	800b834 <rcl_init_options_init+0x18>
 800b8ba:	250b      	movs	r5, #11
 800b8bc:	e7ba      	b.n	800b834 <rcl_init_options_init+0x18>
 800b8be:	250a      	movs	r5, #10
 800b8c0:	e7b8      	b.n	800b834 <rcl_init_options_init+0x18>
 800b8c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b8c4:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800b8c6:	6820      	ldr	r0, [r4, #0]
 800b8c8:	4798      	blx	r3
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	f7ff fe20 	bl	800b510 <rcl_convert_rmw_ret_to_rcl_ret>
 800b8d0:	4605      	mov	r5, r0
 800b8d2:	e7af      	b.n	800b834 <rcl_init_options_init+0x18>

0800b8d4 <rcl_init_options_fini>:
 800b8d4:	b530      	push	{r4, r5, lr}
 800b8d6:	b087      	sub	sp, #28
 800b8d8:	b1f0      	cbz	r0, 800b918 <rcl_init_options_fini+0x44>
 800b8da:	6803      	ldr	r3, [r0, #0]
 800b8dc:	4604      	mov	r4, r0
 800b8de:	b1db      	cbz	r3, 800b918 <rcl_init_options_fini+0x44>
 800b8e0:	469c      	mov	ip, r3
 800b8e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b8e6:	f10d 0e04 	add.w	lr, sp, #4
 800b8ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b8ee:	f8dc 3000 	ldr.w	r3, [ip]
 800b8f2:	f8ce 3000 	str.w	r3, [lr]
 800b8f6:	a801      	add	r0, sp, #4
 800b8f8:	f7fb fc96 	bl	8007228 <rcutils_allocator_is_valid>
 800b8fc:	b160      	cbz	r0, 800b918 <rcl_init_options_fini+0x44>
 800b8fe:	6820      	ldr	r0, [r4, #0]
 800b900:	3018      	adds	r0, #24
 800b902:	f001 f8e7 	bl	800cad4 <rmw_init_options_fini>
 800b906:	4605      	mov	r5, r0
 800b908:	b950      	cbnz	r0, 800b920 <rcl_init_options_fini+0x4c>
 800b90a:	6820      	ldr	r0, [r4, #0]
 800b90c:	9b02      	ldr	r3, [sp, #8]
 800b90e:	9905      	ldr	r1, [sp, #20]
 800b910:	4798      	blx	r3
 800b912:	4628      	mov	r0, r5
 800b914:	b007      	add	sp, #28
 800b916:	bd30      	pop	{r4, r5, pc}
 800b918:	250b      	movs	r5, #11
 800b91a:	4628      	mov	r0, r5
 800b91c:	b007      	add	sp, #28
 800b91e:	bd30      	pop	{r4, r5, pc}
 800b920:	f7ff fdf6 	bl	800b510 <rcl_convert_rmw_ret_to_rcl_ret>
 800b924:	4605      	mov	r5, r0
 800b926:	e7f8      	b.n	800b91a <rcl_init_options_fini+0x46>

0800b928 <rcl_init_options_copy>:
 800b928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b92a:	b09d      	sub	sp, #116	@ 0x74
 800b92c:	2800      	cmp	r0, #0
 800b92e:	d04a      	beq.n	800b9c6 <rcl_init_options_copy+0x9e>
 800b930:	4604      	mov	r4, r0
 800b932:	6800      	ldr	r0, [r0, #0]
 800b934:	2800      	cmp	r0, #0
 800b936:	d046      	beq.n	800b9c6 <rcl_init_options_copy+0x9e>
 800b938:	460d      	mov	r5, r1
 800b93a:	f7fb fc75 	bl	8007228 <rcutils_allocator_is_valid>
 800b93e:	2800      	cmp	r0, #0
 800b940:	d041      	beq.n	800b9c6 <rcl_init_options_copy+0x9e>
 800b942:	2d00      	cmp	r5, #0
 800b944:	d03f      	beq.n	800b9c6 <rcl_init_options_copy+0x9e>
 800b946:	682b      	ldr	r3, [r5, #0]
 800b948:	b11b      	cbz	r3, 800b952 <rcl_init_options_copy+0x2a>
 800b94a:	2464      	movs	r4, #100	@ 0x64
 800b94c:	4620      	mov	r0, r4
 800b94e:	b01d      	add	sp, #116	@ 0x74
 800b950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b952:	6826      	ldr	r6, [r4, #0]
 800b954:	46b6      	mov	lr, r6
 800b956:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b95a:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800b95e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b962:	f8de 3000 	ldr.w	r3, [lr]
 800b966:	6837      	ldr	r7, [r6, #0]
 800b968:	f8cc 3000 	str.w	r3, [ip]
 800b96c:	4619      	mov	r1, r3
 800b96e:	2070      	movs	r0, #112	@ 0x70
 800b970:	47b8      	blx	r7
 800b972:	4606      	mov	r6, r0
 800b974:	6028      	str	r0, [r5, #0]
 800b976:	b350      	cbz	r0, 800b9ce <rcl_init_options_copy+0xa6>
 800b978:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800b97c:	4686      	mov	lr, r0
 800b97e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b982:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b986:	f8dc 3000 	ldr.w	r3, [ip]
 800b98a:	f8ce 3000 	str.w	r3, [lr]
 800b98e:	4668      	mov	r0, sp
 800b990:	f000 fe8c 	bl	800c6ac <rmw_get_zero_initialized_init_options>
 800b994:	2258      	movs	r2, #88	@ 0x58
 800b996:	4669      	mov	r1, sp
 800b998:	f106 0018 	add.w	r0, r6, #24
 800b99c:	f004 fd39 	bl	8010412 <memcpy>
 800b9a0:	6820      	ldr	r0, [r4, #0]
 800b9a2:	6829      	ldr	r1, [r5, #0]
 800b9a4:	3018      	adds	r0, #24
 800b9a6:	3118      	adds	r1, #24
 800b9a8:	f001 f844 	bl	800ca34 <rmw_init_options_copy>
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d0cc      	beq.n	800b94c <rcl_init_options_copy+0x24>
 800b9b2:	f7fb fc4d 	bl	8007250 <rcutils_get_error_string>
 800b9b6:	f7fb fc63 	bl	8007280 <rcutils_reset_error>
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	f7ff ff8a 	bl	800b8d4 <rcl_init_options_fini>
 800b9c0:	b138      	cbz	r0, 800b9d2 <rcl_init_options_copy+0xaa>
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	e7c2      	b.n	800b94c <rcl_init_options_copy+0x24>
 800b9c6:	240b      	movs	r4, #11
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	b01d      	add	sp, #116	@ 0x74
 800b9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9ce:	240a      	movs	r4, #10
 800b9d0:	e7bc      	b.n	800b94c <rcl_init_options_copy+0x24>
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	b01d      	add	sp, #116	@ 0x74
 800b9d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b9da:	f7ff bd99 	b.w	800b510 <rcl_convert_rmw_ret_to_rcl_ret>
 800b9de:	bf00      	nop

0800b9e0 <rcl_get_zero_initialized_node>:
 800b9e0:	4a03      	ldr	r2, [pc, #12]	@ (800b9f0 <rcl_get_zero_initialized_node+0x10>)
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b9e8:	e883 0003 	stmia.w	r3, {r0, r1}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	4770      	bx	lr
 800b9f0:	08011a18 	.word	0x08011a18

0800b9f4 <rcl_node_init>:
 800b9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f8:	b0ab      	sub	sp, #172	@ 0xac
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 800b9fe:	a825      	add	r0, sp, #148	@ 0x94
 800ba00:	4689      	mov	r9, r1
 800ba02:	4690      	mov	r8, r2
 800ba04:	461f      	mov	r7, r3
 800ba06:	f003 fcab 	bl	800f360 <rcl_guard_condition_get_default_options>
 800ba0a:	2d00      	cmp	r5, #0
 800ba0c:	f000 80d8 	beq.w	800bbc0 <rcl_node_init+0x1cc>
 800ba10:	4628      	mov	r0, r5
 800ba12:	f7fb fc09 	bl	8007228 <rcutils_allocator_is_valid>
 800ba16:	2800      	cmp	r0, #0
 800ba18:	f000 80d2 	beq.w	800bbc0 <rcl_node_init+0x1cc>
 800ba1c:	f1b9 0f00 	cmp.w	r9, #0
 800ba20:	f000 80ce 	beq.w	800bbc0 <rcl_node_init+0x1cc>
 800ba24:	f1b8 0f00 	cmp.w	r8, #0
 800ba28:	f000 80ca 	beq.w	800bbc0 <rcl_node_init+0x1cc>
 800ba2c:	2c00      	cmp	r4, #0
 800ba2e:	f000 80c7 	beq.w	800bbc0 <rcl_node_init+0x1cc>
 800ba32:	6866      	ldr	r6, [r4, #4]
 800ba34:	2e00      	cmp	r6, #0
 800ba36:	f040 80ca 	bne.w	800bbce <rcl_node_init+0x1da>
 800ba3a:	2f00      	cmp	r7, #0
 800ba3c:	f000 80c0 	beq.w	800bbc0 <rcl_node_init+0x1cc>
 800ba40:	4638      	mov	r0, r7
 800ba42:	f7ff fd7f 	bl	800b544 <rcl_context_is_valid>
 800ba46:	2800      	cmp	r0, #0
 800ba48:	f000 80bf 	beq.w	800bbca <rcl_node_init+0x1d6>
 800ba4c:	4632      	mov	r2, r6
 800ba4e:	a924      	add	r1, sp, #144	@ 0x90
 800ba50:	4648      	mov	r0, r9
 800ba52:	9624      	str	r6, [sp, #144]	@ 0x90
 800ba54:	f000 ff0a 	bl	800c86c <rmw_validate_node_name>
 800ba58:	4606      	mov	r6, r0
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	f040 80b1 	bne.w	800bbc2 <rcl_node_init+0x1ce>
 800ba60:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800ba62:	2800      	cmp	r0, #0
 800ba64:	f040 8104 	bne.w	800bc70 <rcl_node_init+0x27c>
 800ba68:	f898 3000 	ldrb.w	r3, [r8]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f000 80f0 	beq.w	800bc52 <rcl_node_init+0x25e>
 800ba72:	2b2f      	cmp	r3, #47	@ 0x2f
 800ba74:	f000 80b0 	beq.w	800bbd8 <rcl_node_init+0x1e4>
 800ba78:	4b85      	ldr	r3, [pc, #532]	@ (800bc90 <rcl_node_init+0x29c>)
 800ba7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba7e:	9302      	str	r3, [sp, #8]
 800ba80:	692b      	ldr	r3, [r5, #16]
 800ba82:	9300      	str	r3, [sp, #0]
 800ba84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ba88:	9301      	str	r3, [sp, #4]
 800ba8a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ba8e:	f000 fb15 	bl	800c0bc <rcutils_format_string_limit>
 800ba92:	4680      	mov	r8, r0
 800ba94:	f1b8 0f00 	cmp.w	r8, #0
 800ba98:	f000 80e8 	beq.w	800bc6c <rcl_node_init+0x278>
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	a924      	add	r1, sp, #144	@ 0x90
 800baa0:	4640      	mov	r0, r8
 800baa2:	9224      	str	r2, [sp, #144]	@ 0x90
 800baa4:	f000 fec4 	bl	800c830 <rmw_validate_namespace>
 800baa8:	4606      	mov	r6, r0
 800baaa:	2800      	cmp	r0, #0
 800baac:	f040 80a4 	bne.w	800bbf8 <rcl_node_init+0x204>
 800bab0:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800bab2:	2800      	cmp	r0, #0
 800bab4:	f040 809d 	bne.w	800bbf2 <rcl_node_init+0x1fe>
 800bab8:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 800babc:	2178      	movs	r1, #120	@ 0x78
 800babe:	2001      	movs	r0, #1
 800bac0:	4798      	blx	r3
 800bac2:	4606      	mov	r6, r0
 800bac4:	6060      	str	r0, [r4, #4]
 800bac6:	2800      	cmp	r0, #0
 800bac8:	f000 80d6 	beq.w	800bc78 <rcl_node_init+0x284>
 800bacc:	a80a      	add	r0, sp, #40	@ 0x28
 800bace:	f000 f92f 	bl	800bd30 <rcl_node_get_default_options>
 800bad2:	a90a      	add	r1, sp, #40	@ 0x28
 800bad4:	4630      	mov	r0, r6
 800bad6:	2268      	movs	r2, #104	@ 0x68
 800bad8:	f004 fc9b 	bl	8010412 <memcpy>
 800badc:	6861      	ldr	r1, [r4, #4]
 800bade:	6027      	str	r7, [r4, #0]
 800bae0:	4628      	mov	r0, r5
 800bae2:	f000 f933 	bl	800bd4c <rcl_node_options_copy>
 800bae6:	4606      	mov	r6, r0
 800bae8:	2800      	cmp	r0, #0
 800baea:	f040 8085 	bne.w	800bbf8 <rcl_node_init+0x204>
 800baee:	4640      	mov	r0, r8
 800baf0:	f7f4 fbd6 	bl	80002a0 <strlen>
 800baf4:	eb08 0300 	add.w	r3, r8, r0
 800baf8:	6866      	ldr	r6, [r4, #4]
 800bafa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bafe:	e9cd 8903 	strd	r8, r9, [sp, #12]
 800bb02:	2b2f      	cmp	r3, #47	@ 0x2f
 800bb04:	bf0c      	ite	eq
 800bb06:	4b63      	ldreq	r3, [pc, #396]	@ (800bc94 <rcl_node_init+0x2a0>)
 800bb08:	4b63      	ldrne	r3, [pc, #396]	@ (800bc98 <rcl_node_init+0x2a4>)
 800bb0a:	9302      	str	r3, [sp, #8]
 800bb0c:	692b      	ldr	r3, [r5, #16]
 800bb0e:	9300      	str	r3, [sp, #0]
 800bb10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bb14:	9301      	str	r3, [sp, #4]
 800bb16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800bb1a:	f000 facf 	bl	800c0bc <rcutils_format_string_limit>
 800bb1e:	6863      	ldr	r3, [r4, #4]
 800bb20:	6770      	str	r0, [r6, #116]	@ 0x74
 800bb22:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800bb24:	2a00      	cmp	r2, #0
 800bb26:	f000 80a9 	beq.w	800bc7c <rcl_node_init+0x288>
 800bb2a:	6822      	ldr	r2, [r4, #0]
 800bb2c:	9307      	str	r3, [sp, #28]
 800bb2e:	6810      	ldr	r0, [r2, #0]
 800bb30:	4649      	mov	r1, r9
 800bb32:	3028      	adds	r0, #40	@ 0x28
 800bb34:	4642      	mov	r2, r8
 800bb36:	f001 fa63 	bl	800d000 <rmw_create_node>
 800bb3a:	9b07      	ldr	r3, [sp, #28]
 800bb3c:	6698      	str	r0, [r3, #104]	@ 0x68
 800bb3e:	6863      	ldr	r3, [r4, #4]
 800bb40:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800bb42:	2800      	cmp	r0, #0
 800bb44:	f000 809d 	beq.w	800bc82 <rcl_node_init+0x28e>
 800bb48:	f001 faec 	bl	800d124 <rmw_node_get_graph_guard_condition>
 800bb4c:	4681      	mov	r9, r0
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	f000 809c 	beq.w	800bc8c <rcl_node_init+0x298>
 800bb54:	682b      	ldr	r3, [r5, #0]
 800bb56:	6929      	ldr	r1, [r5, #16]
 800bb58:	6866      	ldr	r6, [r4, #4]
 800bb5a:	2008      	movs	r0, #8
 800bb5c:	4798      	blx	r3
 800bb5e:	6863      	ldr	r3, [r4, #4]
 800bb60:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800bb62:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 800bb66:	f1ba 0f00 	cmp.w	sl, #0
 800bb6a:	f000 808d 	beq.w	800bc88 <rcl_node_init+0x294>
 800bb6e:	f10d 0b20 	add.w	fp, sp, #32
 800bb72:	4658      	mov	r0, fp
 800bb74:	f003 fb68 	bl	800f248 <rcl_get_zero_initialized_guard_condition>
 800bb78:	e89b 0003 	ldmia.w	fp, {r0, r1}
 800bb7c:	6863      	ldr	r3, [r4, #4]
 800bb7e:	46ac      	mov	ip, r5
 800bb80:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800bb84:	e88a 0003 	stmia.w	sl, {r0, r1}
 800bb88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bb8c:	ae25      	add	r6, sp, #148	@ 0x94
 800bb8e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bb90:	f8dc 3000 	ldr.w	r3, [ip]
 800bb94:	6033      	str	r3, [r6, #0]
 800bb96:	ab2a      	add	r3, sp, #168	@ 0xa8
 800bb98:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800bb9c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bba0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800bba2:	463a      	mov	r2, r7
 800bba4:	4649      	mov	r1, r9
 800bba6:	4670      	mov	r0, lr
 800bba8:	f003 fb58 	bl	800f25c <rcl_guard_condition_init_from_rmw>
 800bbac:	4606      	mov	r6, r0
 800bbae:	bb18      	cbnz	r0, 800bbf8 <rcl_node_init+0x204>
 800bbb0:	686b      	ldr	r3, [r5, #4]
 800bbb2:	6929      	ldr	r1, [r5, #16]
 800bbb4:	4798      	blx	r3
 800bbb6:	686b      	ldr	r3, [r5, #4]
 800bbb8:	6929      	ldr	r1, [r5, #16]
 800bbba:	4640      	mov	r0, r8
 800bbbc:	4798      	blx	r3
 800bbbe:	e000      	b.n	800bbc2 <rcl_node_init+0x1ce>
 800bbc0:	260b      	movs	r6, #11
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	b02b      	add	sp, #172	@ 0xac
 800bbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbca:	2665      	movs	r6, #101	@ 0x65
 800bbcc:	e7f9      	b.n	800bbc2 <rcl_node_init+0x1ce>
 800bbce:	2664      	movs	r6, #100	@ 0x64
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	b02b      	add	sp, #172	@ 0xac
 800bbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd8:	f105 030c 	add.w	r3, r5, #12
 800bbdc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bbe0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800bbe4:	4640      	mov	r0, r8
 800bbe6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800bbea:	f000 fb85 	bl	800c2f8 <rcutils_strdup>
 800bbee:	4680      	mov	r8, r0
 800bbf0:	e750      	b.n	800ba94 <rcl_node_init+0xa0>
 800bbf2:	f000 fe2f 	bl	800c854 <rmw_namespace_validation_result_string>
 800bbf6:	26ca      	movs	r6, #202	@ 0xca
 800bbf8:	6863      	ldr	r3, [r4, #4]
 800bbfa:	b1f3      	cbz	r3, 800bc3a <rcl_node_init+0x246>
 800bbfc:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800bbfe:	b138      	cbz	r0, 800bc10 <rcl_node_init+0x21c>
 800bc00:	f003 fb8c 	bl	800f31c <rcl_guard_condition_fini>
 800bc04:	6863      	ldr	r3, [r4, #4]
 800bc06:	6929      	ldr	r1, [r5, #16]
 800bc08:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800bc0a:	686b      	ldr	r3, [r5, #4]
 800bc0c:	4798      	blx	r3
 800bc0e:	6863      	ldr	r3, [r4, #4]
 800bc10:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800bc12:	b110      	cbz	r0, 800bc1a <rcl_node_init+0x226>
 800bc14:	f001 fa0a 	bl	800d02c <rmw_destroy_node>
 800bc18:	6863      	ldr	r3, [r4, #4]
 800bc1a:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800bc1c:	6929      	ldr	r1, [r5, #16]
 800bc1e:	686b      	ldr	r3, [r5, #4]
 800bc20:	4798      	blx	r3
 800bc22:	6863      	ldr	r3, [r4, #4]
 800bc24:	6929      	ldr	r1, [r5, #16]
 800bc26:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800bc28:	686b      	ldr	r3, [r5, #4]
 800bc2a:	4798      	blx	r3
 800bc2c:	6860      	ldr	r0, [r4, #4]
 800bc2e:	f000 f8ab 	bl	800bd88 <rcl_node_options_fini>
 800bc32:	686b      	ldr	r3, [r5, #4]
 800bc34:	6929      	ldr	r1, [r5, #16]
 800bc36:	6860      	ldr	r0, [r4, #4]
 800bc38:	4798      	blx	r3
 800bc3a:	686b      	ldr	r3, [r5, #4]
 800bc3c:	6929      	ldr	r1, [r5, #16]
 800bc3e:	2000      	movs	r0, #0
 800bc40:	4798      	blx	r3
 800bc42:	686b      	ldr	r3, [r5, #4]
 800bc44:	6929      	ldr	r1, [r5, #16]
 800bc46:	4640      	mov	r0, r8
 800bc48:	4798      	blx	r3
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	e9c4 3300 	strd	r3, r3, [r4]
 800bc50:	e7b7      	b.n	800bbc2 <rcl_node_init+0x1ce>
 800bc52:	f105 030c 	add.w	r3, r5, #12
 800bc56:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bc5a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800bc5e:	480f      	ldr	r0, [pc, #60]	@ (800bc9c <rcl_node_init+0x2a8>)
 800bc60:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800bc64:	f000 fb48 	bl	800c2f8 <rcutils_strdup>
 800bc68:	4680      	mov	r8, r0
 800bc6a:	e713      	b.n	800ba94 <rcl_node_init+0xa0>
 800bc6c:	260a      	movs	r6, #10
 800bc6e:	e7a8      	b.n	800bbc2 <rcl_node_init+0x1ce>
 800bc70:	f000 fe48 	bl	800c904 <rmw_node_name_validation_result_string>
 800bc74:	26c9      	movs	r6, #201	@ 0xc9
 800bc76:	e7a4      	b.n	800bbc2 <rcl_node_init+0x1ce>
 800bc78:	260a      	movs	r6, #10
 800bc7a:	e7de      	b.n	800bc3a <rcl_node_init+0x246>
 800bc7c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800bc7e:	260a      	movs	r6, #10
 800bc80:	e7bd      	b.n	800bbfe <rcl_node_init+0x20a>
 800bc82:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800bc84:	2601      	movs	r6, #1
 800bc86:	e7ba      	b.n	800bbfe <rcl_node_init+0x20a>
 800bc88:	260a      	movs	r6, #10
 800bc8a:	e7c1      	b.n	800bc10 <rcl_node_init+0x21c>
 800bc8c:	2601      	movs	r6, #1
 800bc8e:	e7b3      	b.n	800bbf8 <rcl_node_init+0x204>
 800bc90:	08011500 	.word	0x08011500
 800bc94:	080113e0 	.word	0x080113e0
 800bc98:	08011504 	.word	0x08011504
 800bc9c:	080114fc 	.word	0x080114fc

0800bca0 <rcl_node_is_valid>:
 800bca0:	b130      	cbz	r0, 800bcb0 <rcl_node_is_valid+0x10>
 800bca2:	6843      	ldr	r3, [r0, #4]
 800bca4:	b123      	cbz	r3, 800bcb0 <rcl_node_is_valid+0x10>
 800bca6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bca8:	b113      	cbz	r3, 800bcb0 <rcl_node_is_valid+0x10>
 800bcaa:	6800      	ldr	r0, [r0, #0]
 800bcac:	f7ff bc4a 	b.w	800b544 <rcl_context_is_valid>
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	4770      	bx	lr

0800bcb4 <rcl_node_get_name>:
 800bcb4:	b120      	cbz	r0, 800bcc0 <rcl_node_get_name+0xc>
 800bcb6:	6840      	ldr	r0, [r0, #4]
 800bcb8:	b110      	cbz	r0, 800bcc0 <rcl_node_get_name+0xc>
 800bcba:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800bcbc:	b100      	cbz	r0, 800bcc0 <rcl_node_get_name+0xc>
 800bcbe:	6880      	ldr	r0, [r0, #8]
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop

0800bcc4 <rcl_node_get_namespace>:
 800bcc4:	b120      	cbz	r0, 800bcd0 <rcl_node_get_namespace+0xc>
 800bcc6:	6840      	ldr	r0, [r0, #4]
 800bcc8:	b110      	cbz	r0, 800bcd0 <rcl_node_get_namespace+0xc>
 800bcca:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800bccc:	b100      	cbz	r0, 800bcd0 <rcl_node_get_namespace+0xc>
 800bcce:	68c0      	ldr	r0, [r0, #12]
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop

0800bcd4 <rcl_node_get_options>:
 800bcd4:	b128      	cbz	r0, 800bce2 <rcl_node_get_options+0xe>
 800bcd6:	6840      	ldr	r0, [r0, #4]
 800bcd8:	b118      	cbz	r0, 800bce2 <rcl_node_get_options+0xe>
 800bcda:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	bf08      	it	eq
 800bce0:	2000      	moveq	r0, #0
 800bce2:	4770      	bx	lr

0800bce4 <rcl_node_get_rmw_handle>:
 800bce4:	b110      	cbz	r0, 800bcec <rcl_node_get_rmw_handle+0x8>
 800bce6:	6840      	ldr	r0, [r0, #4]
 800bce8:	b100      	cbz	r0, 800bcec <rcl_node_get_rmw_handle+0x8>
 800bcea:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800bcec:	4770      	bx	lr
 800bcee:	bf00      	nop

0800bcf0 <rcl_get_disable_loaned_message>:
 800bcf0:	b510      	push	{r4, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	9301      	str	r3, [sp, #4]
 800bcf8:	b1a0      	cbz	r0, 800bd24 <rcl_get_disable_loaned_message+0x34>
 800bcfa:	4604      	mov	r4, r0
 800bcfc:	a901      	add	r1, sp, #4
 800bcfe:	480b      	ldr	r0, [pc, #44]	@ (800bd2c <rcl_get_disable_loaned_message+0x3c>)
 800bd00:	f000 f9c4 	bl	800c08c <rcutils_get_env>
 800bd04:	b110      	cbz	r0, 800bd0c <rcl_get_disable_loaned_message+0x1c>
 800bd06:	2001      	movs	r0, #1
 800bd08:	b002      	add	sp, #8
 800bd0a:	bd10      	pop	{r4, pc}
 800bd0c:	9a01      	ldr	r2, [sp, #4]
 800bd0e:	7813      	ldrb	r3, [r2, #0]
 800bd10:	3b31      	subs	r3, #49	@ 0x31
 800bd12:	bf08      	it	eq
 800bd14:	7853      	ldrbeq	r3, [r2, #1]
 800bd16:	fab3 f383 	clz	r3, r3
 800bd1a:	095b      	lsrs	r3, r3, #5
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	7023      	strb	r3, [r4, #0]
 800bd20:	b002      	add	sp, #8
 800bd22:	bd10      	pop	{r4, pc}
 800bd24:	200b      	movs	r0, #11
 800bd26:	b002      	add	sp, #8
 800bd28:	bd10      	pop	{r4, pc}
 800bd2a:	bf00      	nop
 800bd2c:	0801150c 	.word	0x0801150c

0800bd30 <rcl_node_get_default_options>:
 800bd30:	b510      	push	{r4, lr}
 800bd32:	2253      	movs	r2, #83	@ 0x53
 800bd34:	4604      	mov	r4, r0
 800bd36:	2100      	movs	r1, #0
 800bd38:	3015      	adds	r0, #21
 800bd3a:	f004 fa8f 	bl	801025c <memset>
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f7fb fa46 	bl	80071d0 <rcutils_get_default_allocator>
 800bd44:	2301      	movs	r3, #1
 800bd46:	7523      	strb	r3, [r4, #20]
 800bd48:	4620      	mov	r0, r4
 800bd4a:	bd10      	pop	{r4, pc}

0800bd4c <rcl_node_options_copy>:
 800bd4c:	b1d0      	cbz	r0, 800bd84 <rcl_node_options_copy+0x38>
 800bd4e:	b570      	push	{r4, r5, r6, lr}
 800bd50:	460c      	mov	r4, r1
 800bd52:	b1a9      	cbz	r1, 800bd80 <rcl_node_options_copy+0x34>
 800bd54:	4288      	cmp	r0, r1
 800bd56:	4684      	mov	ip, r0
 800bd58:	d012      	beq.n	800bd80 <rcl_node_options_copy+0x34>
 800bd5a:	4605      	mov	r5, r0
 800bd5c:	8a86      	ldrh	r6, [r0, #20]
 800bd5e:	468e      	mov	lr, r1
 800bd60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd62:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bd66:	682b      	ldr	r3, [r5, #0]
 800bd68:	f8ce 3000 	str.w	r3, [lr]
 800bd6c:	f10c 0118 	add.w	r1, ip, #24
 800bd70:	2250      	movs	r2, #80	@ 0x50
 800bd72:	82a6      	strh	r6, [r4, #20]
 800bd74:	f104 0018 	add.w	r0, r4, #24
 800bd78:	f004 fb4b 	bl	8010412 <memcpy>
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	bd70      	pop	{r4, r5, r6, pc}
 800bd80:	200b      	movs	r0, #11
 800bd82:	bd70      	pop	{r4, r5, r6, pc}
 800bd84:	200b      	movs	r0, #11
 800bd86:	4770      	bx	lr

0800bd88 <rcl_node_options_fini>:
 800bd88:	b1c0      	cbz	r0, 800bdbc <rcl_node_options_fini+0x34>
 800bd8a:	b500      	push	{lr}
 800bd8c:	4684      	mov	ip, r0
 800bd8e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bd92:	b087      	sub	sp, #28
 800bd94:	f10d 0e04 	add.w	lr, sp, #4
 800bd98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bd9c:	f8dc 3000 	ldr.w	r3, [ip]
 800bda0:	f8ce 3000 	str.w	r3, [lr]
 800bda4:	a801      	add	r0, sp, #4
 800bda6:	f7fb fa3f 	bl	8007228 <rcutils_allocator_is_valid>
 800bdaa:	b118      	cbz	r0, 800bdb4 <rcl_node_options_fini+0x2c>
 800bdac:	2000      	movs	r0, #0
 800bdae:	b007      	add	sp, #28
 800bdb0:	f85d fb04 	ldr.w	pc, [sp], #4
 800bdb4:	200b      	movs	r0, #11
 800bdb6:	b007      	add	sp, #28
 800bdb8:	f85d fb04 	ldr.w	pc, [sp], #4
 800bdbc:	200b      	movs	r0, #11
 800bdbe:	4770      	bx	lr

0800bdc0 <rcl_node_resolve_name>:
 800bdc0:	b082      	sub	sp, #8
 800bdc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc6:	b091      	sub	sp, #68	@ 0x44
 800bdc8:	ac1a      	add	r4, sp, #104	@ 0x68
 800bdca:	e884 000c 	stmia.w	r4, {r2, r3}
 800bdce:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	d03a      	beq.n	800be4c <rcl_node_resolve_name+0x8c>
 800bdd6:	460c      	mov	r4, r1
 800bdd8:	4605      	mov	r5, r0
 800bdda:	f7ff ff7b 	bl	800bcd4 <rcl_node_get_options>
 800bdde:	b370      	cbz	r0, 800be3e <rcl_node_resolve_name+0x7e>
 800bde0:	4628      	mov	r0, r5
 800bde2:	f7ff ff67 	bl	800bcb4 <rcl_node_get_name>
 800bde6:	4681      	mov	r9, r0
 800bde8:	4628      	mov	r0, r5
 800bdea:	f7ff ff6b 	bl	800bcc4 <rcl_node_get_namespace>
 800bdee:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800bdf2:	4607      	mov	r7, r0
 800bdf4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bdf8:	ad0b      	add	r5, sp, #44	@ 0x2c
 800bdfa:	46ac      	mov	ip, r5
 800bdfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800be00:	f8de 3000 	ldr.w	r3, [lr]
 800be04:	f8cc 3000 	str.w	r3, [ip]
 800be08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be0a:	b1fb      	cbz	r3, 800be4c <rcl_node_resolve_name+0x8c>
 800be0c:	468a      	mov	sl, r1
 800be0e:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800be12:	f000 fad1 	bl	800c3b8 <rcutils_get_zero_initialized_string_map>
 800be16:	ab10      	add	r3, sp, #64	@ 0x40
 800be18:	9008      	str	r0, [sp, #32]
 800be1a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800be1e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800be22:	2100      	movs	r1, #0
 800be24:	e895 000c 	ldmia.w	r5, {r2, r3}
 800be28:	a808      	add	r0, sp, #32
 800be2a:	f000 fb1f 	bl	800c46c <rcutils_string_map_init>
 800be2e:	4606      	mov	r6, r0
 800be30:	b170      	cbz	r0, 800be50 <rcl_node_resolve_name+0x90>
 800be32:	f7fb fa0d 	bl	8007250 <rcutils_get_error_string>
 800be36:	f7fb fa23 	bl	8007280 <rcutils_reset_error>
 800be3a:	2e0a      	cmp	r6, #10
 800be3c:	d000      	beq.n	800be40 <rcl_node_resolve_name+0x80>
 800be3e:	2601      	movs	r6, #1
 800be40:	4630      	mov	r0, r6
 800be42:	b011      	add	sp, #68	@ 0x44
 800be44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be48:	b002      	add	sp, #8
 800be4a:	4770      	bx	lr
 800be4c:	260b      	movs	r6, #11
 800be4e:	e7f7      	b.n	800be40 <rcl_node_resolve_name+0x80>
 800be50:	9009      	str	r0, [sp, #36]	@ 0x24
 800be52:	9007      	str	r0, [sp, #28]
 800be54:	a808      	add	r0, sp, #32
 800be56:	f003 f9f1 	bl	800f23c <rcl_get_default_topic_name_substitutions>
 800be5a:	4606      	mov	r6, r0
 800be5c:	b1b0      	cbz	r0, 800be8c <rcl_node_resolve_name+0xcc>
 800be5e:	280a      	cmp	r0, #10
 800be60:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800be64:	d000      	beq.n	800be68 <rcl_node_resolve_name+0xa8>
 800be66:	2601      	movs	r6, #1
 800be68:	a808      	add	r0, sp, #32
 800be6a:	f000 fb3d 	bl	800c4e8 <rcutils_string_map_fini>
 800be6e:	2800      	cmp	r0, #0
 800be70:	d132      	bne.n	800bed8 <rcl_node_resolve_name+0x118>
 800be72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be74:	4659      	mov	r1, fp
 800be76:	47d0      	blx	sl
 800be78:	4659      	mov	r1, fp
 800be7a:	4648      	mov	r0, r9
 800be7c:	47d0      	blx	sl
 800be7e:	f1b8 0f00 	cmp.w	r8, #0
 800be82:	d0dd      	beq.n	800be40 <rcl_node_resolve_name+0x80>
 800be84:	2e67      	cmp	r6, #103	@ 0x67
 800be86:	bf08      	it	eq
 800be88:	2668      	moveq	r6, #104	@ 0x68
 800be8a:	e7d9      	b.n	800be40 <rcl_node_resolve_name+0x80>
 800be8c:	ab09      	add	r3, sp, #36	@ 0x24
 800be8e:	9305      	str	r3, [sp, #20]
 800be90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be92:	46ec      	mov	ip, sp
 800be94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800be98:	682b      	ldr	r3, [r5, #0]
 800be9a:	f8cc 3000 	str.w	r3, [ip]
 800be9e:	463a      	mov	r2, r7
 800bea0:	4649      	mov	r1, r9
 800bea2:	4620      	mov	r0, r4
 800bea4:	ab08      	add	r3, sp, #32
 800bea6:	f003 f863 	bl	800ef70 <rcl_expand_topic_name>
 800beaa:	4606      	mov	r6, r0
 800beac:	b9c8      	cbnz	r0, 800bee2 <rcl_node_resolve_name+0x122>
 800beae:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 800beb2:	9009      	str	r0, [sp, #36]	@ 0x24
 800beb4:	4602      	mov	r2, r0
 800beb6:	a90a      	add	r1, sp, #40	@ 0x28
 800beb8:	4648      	mov	r0, r9
 800beba:	f000 fc01 	bl	800c6c0 <rmw_validate_full_topic_name>
 800bebe:	b998      	cbnz	r0, 800bee8 <rcl_node_resolve_name+0x128>
 800bec0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bec2:	bb14      	cbnz	r4, 800bf0a <rcl_node_resolve_name+0x14a>
 800bec4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bec6:	a808      	add	r0, sp, #32
 800bec8:	f8c3 9000 	str.w	r9, [r3]
 800becc:	f000 fb0c 	bl	800c4e8 <rcutils_string_map_fini>
 800bed0:	4606      	mov	r6, r0
 800bed2:	b978      	cbnz	r0, 800bef4 <rcl_node_resolve_name+0x134>
 800bed4:	4681      	mov	r9, r0
 800bed6:	e7cc      	b.n	800be72 <rcl_node_resolve_name+0xb2>
 800bed8:	f7fb f9ba 	bl	8007250 <rcutils_get_error_string>
 800bedc:	f7fb f9d0 	bl	8007280 <rcutils_reset_error>
 800bee0:	e7c7      	b.n	800be72 <rcl_node_resolve_name+0xb2>
 800bee2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800bee6:	e7bf      	b.n	800be68 <rcl_node_resolve_name+0xa8>
 800bee8:	f7fb f9b2 	bl	8007250 <rcutils_get_error_string>
 800beec:	2601      	movs	r6, #1
 800beee:	f7fb f9c7 	bl	8007280 <rcutils_reset_error>
 800bef2:	e7b9      	b.n	800be68 <rcl_node_resolve_name+0xa8>
 800bef4:	f7fb f9ac 	bl	8007250 <rcutils_get_error_string>
 800bef8:	f7fb f9c2 	bl	8007280 <rcutils_reset_error>
 800befc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800befe:	4659      	mov	r1, fp
 800bf00:	47d0      	blx	sl
 800bf02:	4659      	mov	r1, fp
 800bf04:	4620      	mov	r0, r4
 800bf06:	47d0      	blx	sl
 800bf08:	e799      	b.n	800be3e <rcl_node_resolve_name+0x7e>
 800bf0a:	2667      	movs	r6, #103	@ 0x67
 800bf0c:	e7ac      	b.n	800be68 <rcl_node_resolve_name+0xa8>
 800bf0e:	bf00      	nop

0800bf10 <rcl_get_system_time>:
 800bf10:	4608      	mov	r0, r1
 800bf12:	f000 bb6d 	b.w	800c5f0 <rcutils_system_time_now>
 800bf16:	bf00      	nop

0800bf18 <rcl_get_steady_time>:
 800bf18:	4608      	mov	r0, r1
 800bf1a:	f000 bb93 	b.w	800c644 <rcutils_steady_time_now>
 800bf1e:	bf00      	nop

0800bf20 <rcl_get_ros_time>:
 800bf20:	7a03      	ldrb	r3, [r0, #8]
 800bf22:	b510      	push	{r4, lr}
 800bf24:	460c      	mov	r4, r1
 800bf26:	b143      	cbz	r3, 800bf3a <rcl_get_ros_time+0x1a>
 800bf28:	2105      	movs	r1, #5
 800bf2a:	f000 f879 	bl	800c020 <__atomic_load_8>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	460b      	mov	r3, r1
 800bf32:	e9c4 2300 	strd	r2, r3, [r4]
 800bf36:	2000      	movs	r0, #0
 800bf38:	bd10      	pop	{r4, pc}
 800bf3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf3e:	4608      	mov	r0, r1
 800bf40:	f000 bb56 	b.w	800c5f0 <rcutils_system_time_now>

0800bf44 <rcl_clock_init>:
 800bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf46:	4605      	mov	r5, r0
 800bf48:	4610      	mov	r0, r2
 800bf4a:	4614      	mov	r4, r2
 800bf4c:	460e      	mov	r6, r1
 800bf4e:	f7fb f96b 	bl	8007228 <rcutils_allocator_is_valid>
 800bf52:	b128      	cbz	r0, 800bf60 <rcl_clock_init+0x1c>
 800bf54:	2d03      	cmp	r5, #3
 800bf56:	d803      	bhi.n	800bf60 <rcl_clock_init+0x1c>
 800bf58:	e8df f005 	tbb	[pc, r5]
 800bf5c:	044c291a 	.word	0x044c291a
 800bf60:	200b      	movs	r0, #11
 800bf62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf64:	2e00      	cmp	r6, #0
 800bf66:	d0fb      	beq.n	800bf60 <rcl_clock_init+0x1c>
 800bf68:	2c00      	cmp	r4, #0
 800bf6a:	d0f9      	beq.n	800bf60 <rcl_clock_init+0x1c>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800bf72:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 800c018 <rcl_clock_init+0xd4>
 800bf76:	6133      	str	r3, [r6, #16]
 800bf78:	f106 0514 	add.w	r5, r6, #20
 800bf7c:	2703      	movs	r7, #3
 800bf7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bf82:	6823      	ldr	r3, [r4, #0]
 800bf84:	602b      	str	r3, [r5, #0]
 800bf86:	f8c6 c00c 	str.w	ip, [r6, #12]
 800bf8a:	7037      	strb	r7, [r6, #0]
 800bf8c:	2000      	movs	r0, #0
 800bf8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf90:	2e00      	cmp	r6, #0
 800bf92:	d0e5      	beq.n	800bf60 <rcl_clock_init+0x1c>
 800bf94:	2300      	movs	r3, #0
 800bf96:	7033      	strb	r3, [r6, #0]
 800bf98:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800bf9c:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800bfa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bfa2:	f106 0514 	add.w	r5, r6, #20
 800bfa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bfa8:	6823      	ldr	r3, [r4, #0]
 800bfaa:	602b      	str	r3, [r5, #0]
 800bfac:	e7ee      	b.n	800bf8c <rcl_clock_init+0x48>
 800bfae:	2e00      	cmp	r6, #0
 800bfb0:	d0d6      	beq.n	800bf60 <rcl_clock_init+0x1c>
 800bfb2:	2c00      	cmp	r4, #0
 800bfb4:	d0d4      	beq.n	800bf60 <rcl_clock_init+0x1c>
 800bfb6:	2700      	movs	r7, #0
 800bfb8:	7037      	strb	r7, [r6, #0]
 800bfba:	46a4      	mov	ip, r4
 800bfbc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bfc0:	f106 0514 	add.w	r5, r6, #20
 800bfc4:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800bfc8:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800bfcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bfce:	f8dc 3000 	ldr.w	r3, [ip]
 800bfd2:	602b      	str	r3, [r5, #0]
 800bfd4:	6921      	ldr	r1, [r4, #16]
 800bfd6:	6823      	ldr	r3, [r4, #0]
 800bfd8:	2010      	movs	r0, #16
 800bfda:	4798      	blx	r3
 800bfdc:	6130      	str	r0, [r6, #16]
 800bfde:	b1b8      	cbz	r0, 800c010 <rcl_clock_init+0xcc>
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	e9c0 2300 	strd	r2, r3, [r0]
 800bfe8:	4a0a      	ldr	r2, [pc, #40]	@ (800c014 <rcl_clock_init+0xd0>)
 800bfea:	7207      	strb	r7, [r0, #8]
 800bfec:	2301      	movs	r3, #1
 800bfee:	60f2      	str	r2, [r6, #12]
 800bff0:	7033      	strb	r3, [r6, #0]
 800bff2:	e7cb      	b.n	800bf8c <rcl_clock_init+0x48>
 800bff4:	2e00      	cmp	r6, #0
 800bff6:	d0b3      	beq.n	800bf60 <rcl_clock_init+0x1c>
 800bff8:	2c00      	cmp	r4, #0
 800bffa:	d0b1      	beq.n	800bf60 <rcl_clock_init+0x1c>
 800bffc:	2300      	movs	r3, #0
 800bffe:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800c002:	f8df c018 	ldr.w	ip, [pc, #24]	@ 800c01c <rcl_clock_init+0xd8>
 800c006:	6133      	str	r3, [r6, #16]
 800c008:	f106 0514 	add.w	r5, r6, #20
 800c00c:	2702      	movs	r7, #2
 800c00e:	e7b6      	b.n	800bf7e <rcl_clock_init+0x3a>
 800c010:	200a      	movs	r0, #10
 800c012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c014:	0800bf21 	.word	0x0800bf21
 800c018:	0800bf19 	.word	0x0800bf19
 800c01c:	0800bf11 	.word	0x0800bf11

0800c020 <__atomic_load_8>:
 800c020:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800c024:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800c028:	4a15      	ldr	r2, [pc, #84]	@ (800c080 <__atomic_load_8+0x60>)
 800c02a:	4b16      	ldr	r3, [pc, #88]	@ (800c084 <__atomic_load_8+0x64>)
 800c02c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800c030:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800c034:	fb02 f101 	mul.w	r1, r2, r1
 800c038:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800c03c:	fba3 2301 	umull	r2, r3, r3, r1
 800c040:	091b      	lsrs	r3, r3, #4
 800c042:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800c046:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800c04a:	b4f0      	push	{r4, r5, r6, r7}
 800c04c:	4d0e      	ldr	r5, [pc, #56]	@ (800c088 <__atomic_load_8+0x68>)
 800c04e:	1ac9      	subs	r1, r1, r3
 800c050:	194a      	adds	r2, r1, r5
 800c052:	f04f 0c01 	mov.w	ip, #1
 800c056:	e8d2 3f4f 	ldrexb	r3, [r2]
 800c05a:	e8c2 cf44 	strexb	r4, ip, [r2]
 800c05e:	2c00      	cmp	r4, #0
 800c060:	d1f9      	bne.n	800c056 <__atomic_load_8+0x36>
 800c062:	f3bf 8f5b 	dmb	ish
 800c066:	b2dc      	uxtb	r4, r3
 800c068:	2c00      	cmp	r4, #0
 800c06a:	d1f4      	bne.n	800c056 <__atomic_load_8+0x36>
 800c06c:	e9d0 6700 	ldrd	r6, r7, [r0]
 800c070:	f3bf 8f5b 	dmb	ish
 800c074:	546b      	strb	r3, [r5, r1]
 800c076:	4630      	mov	r0, r6
 800c078:	4639      	mov	r1, r7
 800c07a:	bcf0      	pop	{r4, r5, r6, r7}
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	27d4eb2d 	.word	0x27d4eb2d
 800c084:	b21642c9 	.word	0xb21642c9
 800c088:	2000db04 	.word	0x2000db04

0800c08c <rcutils_get_env>:
 800c08c:	b150      	cbz	r0, 800c0a4 <rcutils_get_env+0x18>
 800c08e:	b510      	push	{r4, lr}
 800c090:	460c      	mov	r4, r1
 800c092:	b909      	cbnz	r1, 800c098 <rcutils_get_env+0xc>
 800c094:	4806      	ldr	r0, [pc, #24]	@ (800c0b0 <rcutils_get_env+0x24>)
 800c096:	bd10      	pop	{r4, pc}
 800c098:	f003 fd36 	bl	800fb08 <getenv>
 800c09c:	b120      	cbz	r0, 800c0a8 <rcutils_get_env+0x1c>
 800c09e:	6020      	str	r0, [r4, #0]
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	bd10      	pop	{r4, pc}
 800c0a4:	4803      	ldr	r0, [pc, #12]	@ (800c0b4 <rcutils_get_env+0x28>)
 800c0a6:	4770      	bx	lr
 800c0a8:	4b03      	ldr	r3, [pc, #12]	@ (800c0b8 <rcutils_get_env+0x2c>)
 800c0aa:	6023      	str	r3, [r4, #0]
 800c0ac:	e7f8      	b.n	800c0a0 <rcutils_get_env+0x14>
 800c0ae:	bf00      	nop
 800c0b0:	08011544 	.word	0x08011544
 800c0b4:	08011528 	.word	0x08011528
 800c0b8:	08011668 	.word	0x08011668

0800c0bc <rcutils_format_string_limit>:
 800c0bc:	b40f      	push	{r0, r1, r2, r3}
 800c0be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0c0:	b083      	sub	sp, #12
 800c0c2:	ac08      	add	r4, sp, #32
 800c0c4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800c0c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c0ca:	b376      	cbz	r6, 800c12a <rcutils_format_string_limit+0x6e>
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f7fb f8ab 	bl	8007228 <rcutils_allocator_is_valid>
 800c0d2:	b350      	cbz	r0, 800c12a <rcutils_format_string_limit+0x6e>
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	ab0f      	add	r3, sp, #60	@ 0x3c
 800c0d8:	4632      	mov	r2, r6
 800c0da:	4608      	mov	r0, r1
 800c0dc:	e9cd 3300 	strd	r3, r3, [sp]
 800c0e0:	f000 f8f8 	bl	800c2d4 <rcutils_vsnprintf>
 800c0e4:	1c43      	adds	r3, r0, #1
 800c0e6:	4605      	mov	r5, r0
 800c0e8:	d01f      	beq.n	800c12a <rcutils_format_string_limit+0x6e>
 800c0ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c0ec:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c0ee:	1c47      	adds	r7, r0, #1
 800c0f0:	429f      	cmp	r7, r3
 800c0f2:	bf84      	itt	hi
 800c0f4:	461f      	movhi	r7, r3
 800c0f6:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800c0fa:	4638      	mov	r0, r7
 800c0fc:	9b08      	ldr	r3, [sp, #32]
 800c0fe:	4798      	blx	r3
 800c100:	4604      	mov	r4, r0
 800c102:	b190      	cbz	r0, 800c12a <rcutils_format_string_limit+0x6e>
 800c104:	9b01      	ldr	r3, [sp, #4]
 800c106:	4632      	mov	r2, r6
 800c108:	4639      	mov	r1, r7
 800c10a:	f000 f8e3 	bl	800c2d4 <rcutils_vsnprintf>
 800c10e:	2800      	cmp	r0, #0
 800c110:	db07      	blt.n	800c122 <rcutils_format_string_limit+0x66>
 800c112:	2300      	movs	r3, #0
 800c114:	5563      	strb	r3, [r4, r5]
 800c116:	4620      	mov	r0, r4
 800c118:	b003      	add	sp, #12
 800c11a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c11e:	b004      	add	sp, #16
 800c120:	4770      	bx	lr
 800c122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c124:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c126:	4620      	mov	r0, r4
 800c128:	4798      	blx	r3
 800c12a:	2400      	movs	r4, #0
 800c12c:	e7f3      	b.n	800c116 <rcutils_format_string_limit+0x5a>
 800c12e:	bf00      	nop

0800c130 <rcutils_repl_str>:
 800c130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c134:	4699      	mov	r9, r3
 800c136:	b089      	sub	sp, #36	@ 0x24
 800c138:	4603      	mov	r3, r0
 800c13a:	4648      	mov	r0, r9
 800c13c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c140:	4698      	mov	r8, r3
 800c142:	9300      	str	r3, [sp, #0]
 800c144:	460c      	mov	r4, r1
 800c146:	f7fb f86f 	bl	8007228 <rcutils_allocator_is_valid>
 800c14a:	2800      	cmp	r0, #0
 800c14c:	f000 80a3 	beq.w	800c296 <rcutils_repl_str+0x166>
 800c150:	4620      	mov	r0, r4
 800c152:	f7f4 f8a5 	bl	80002a0 <strlen>
 800c156:	f04f 0a00 	mov.w	sl, #0
 800c15a:	f8d9 b010 	ldr.w	fp, [r9, #16]
 800c15e:	9001      	str	r0, [sp, #4]
 800c160:	4657      	mov	r7, sl
 800c162:	4655      	mov	r5, sl
 800c164:	2610      	movs	r6, #16
 800c166:	e01e      	b.n	800c1a6 <rcutils_repl_str+0x76>
 800c168:	3501      	adds	r5, #1
 800c16a:	45aa      	cmp	sl, r5
 800c16c:	d212      	bcs.n	800c194 <rcutils_repl_str+0x64>
 800c16e:	44b2      	add	sl, r6
 800c170:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800c174:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800c178:	4798      	blx	r3
 800c17a:	2800      	cmp	r0, #0
 800c17c:	f000 8088 	beq.w	800c290 <rcutils_repl_str+0x160>
 800c180:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800c184:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 800c188:	f8d9 b010 	ldr.w	fp, [r9, #16]
 800c18c:	4607      	mov	r7, r0
 800c18e:	bf28      	it	cs
 800c190:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 800c194:	9a00      	ldr	r2, [sp, #0]
 800c196:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 800c19a:	1aa2      	subs	r2, r4, r2
 800c19c:	f843 2c04 	str.w	r2, [r3, #-4]
 800c1a0:	9b01      	ldr	r3, [sp, #4]
 800c1a2:	eb04 0803 	add.w	r8, r4, r3
 800c1a6:	9902      	ldr	r1, [sp, #8]
 800c1a8:	4640      	mov	r0, r8
 800c1aa:	f004 f891 	bl	80102d0 <strstr>
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	465a      	mov	r2, fp
 800c1b2:	4638      	mov	r0, r7
 800c1b4:	2c00      	cmp	r4, #0
 800c1b6:	d1d7      	bne.n	800c168 <rcutils_repl_str+0x38>
 800c1b8:	4640      	mov	r0, r8
 800c1ba:	f7f4 f871 	bl	80002a0 <strlen>
 800c1be:	9b00      	ldr	r3, [sp, #0]
 800c1c0:	eba8 0803 	sub.w	r8, r8, r3
 800c1c4:	eb08 0300 	add.w	r3, r8, r0
 800c1c8:	9304      	str	r3, [sp, #16]
 800c1ca:	f8d9 8000 	ldr.w	r8, [r9]
 800c1ce:	2d00      	cmp	r5, #0
 800c1d0:	d03f      	beq.n	800c252 <rcutils_repl_str+0x122>
 800c1d2:	9803      	ldr	r0, [sp, #12]
 800c1d4:	f7f4 f864 	bl	80002a0 <strlen>
 800c1d8:	4606      	mov	r6, r0
 800c1da:	9801      	ldr	r0, [sp, #4]
 800c1dc:	9a04      	ldr	r2, [sp, #16]
 800c1de:	1a33      	subs	r3, r6, r0
 800c1e0:	fb05 2a03 	mla	sl, r5, r3, r2
 800c1e4:	4659      	mov	r1, fp
 800c1e6:	f10a 0001 	add.w	r0, sl, #1
 800c1ea:	47c0      	blx	r8
 800c1ec:	4683      	mov	fp, r0
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	d04e      	beq.n	800c290 <rcutils_repl_str+0x160>
 800c1f2:	683a      	ldr	r2, [r7, #0]
 800c1f4:	9900      	ldr	r1, [sp, #0]
 800c1f6:	f004 f90c 	bl	8010412 <memcpy>
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	9706      	str	r7, [sp, #24]
 800c1fe:	1e6a      	subs	r2, r5, #1
 800c200:	445b      	add	r3, fp
 800c202:	46a8      	mov	r8, r5
 800c204:	9202      	str	r2, [sp, #8]
 800c206:	4625      	mov	r5, r4
 800c208:	f8cd 901c 	str.w	r9, [sp, #28]
 800c20c:	461c      	mov	r4, r3
 800c20e:	9903      	ldr	r1, [sp, #12]
 800c210:	4632      	mov	r2, r6
 800c212:	4620      	mov	r0, r4
 800c214:	f004 f8fd 	bl	8010412 <memcpy>
 800c218:	9b01      	ldr	r3, [sp, #4]
 800c21a:	f857 2b04 	ldr.w	r2, [r7], #4
 800c21e:	eb02 0c03 	add.w	ip, r2, r3
 800c222:	9b00      	ldr	r3, [sp, #0]
 800c224:	eb03 010c 	add.w	r1, r3, ip
 800c228:	9b02      	ldr	r3, [sp, #8]
 800c22a:	4434      	add	r4, r6
 800c22c:	429d      	cmp	r5, r3
 800c22e:	4620      	mov	r0, r4
 800c230:	d022      	beq.n	800c278 <rcutils_repl_str+0x148>
 800c232:	683a      	ldr	r2, [r7, #0]
 800c234:	eba2 090c 	sub.w	r9, r2, ip
 800c238:	464a      	mov	r2, r9
 800c23a:	3501      	adds	r5, #1
 800c23c:	f004 f8e9 	bl	8010412 <memcpy>
 800c240:	45a8      	cmp	r8, r5
 800c242:	444c      	add	r4, r9
 800c244:	d1e3      	bne.n	800c20e <rcutils_repl_str+0xde>
 800c246:	2300      	movs	r3, #0
 800c248:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 800c24c:	f80b 300a 	strb.w	r3, [fp, sl]
 800c250:	e008      	b.n	800c264 <rcutils_repl_str+0x134>
 800c252:	4618      	mov	r0, r3
 800c254:	4659      	mov	r1, fp
 800c256:	3001      	adds	r0, #1
 800c258:	47c0      	blx	r8
 800c25a:	4683      	mov	fp, r0
 800c25c:	b110      	cbz	r0, 800c264 <rcutils_repl_str+0x134>
 800c25e:	9900      	ldr	r1, [sp, #0]
 800c260:	f004 f8cf 	bl	8010402 <strcpy>
 800c264:	4638      	mov	r0, r7
 800c266:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c26a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800c26e:	4798      	blx	r3
 800c270:	4658      	mov	r0, fp
 800c272:	b009      	add	sp, #36	@ 0x24
 800c274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c278:	9b04      	ldr	r3, [sp, #16]
 800c27a:	eba3 020c 	sub.w	r2, r3, ip
 800c27e:	9205      	str	r2, [sp, #20]
 800c280:	3501      	adds	r5, #1
 800c282:	f004 f8c6 	bl	8010412 <memcpy>
 800c286:	9a05      	ldr	r2, [sp, #20]
 800c288:	45a8      	cmp	r8, r5
 800c28a:	4414      	add	r4, r2
 800c28c:	d1bf      	bne.n	800c20e <rcutils_repl_str+0xde>
 800c28e:	e7da      	b.n	800c246 <rcutils_repl_str+0x116>
 800c290:	f04f 0b00 	mov.w	fp, #0
 800c294:	e7e6      	b.n	800c264 <rcutils_repl_str+0x134>
 800c296:	4683      	mov	fp, r0
 800c298:	4658      	mov	r0, fp
 800c29a:	b009      	add	sp, #36	@ 0x24
 800c29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c2a0 <rcutils_snprintf>:
 800c2a0:	b40c      	push	{r2, r3}
 800c2a2:	b530      	push	{r4, r5, lr}
 800c2a4:	b083      	sub	sp, #12
 800c2a6:	ab06      	add	r3, sp, #24
 800c2a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2ac:	9301      	str	r3, [sp, #4]
 800c2ae:	b152      	cbz	r2, 800c2c6 <rcutils_snprintf+0x26>
 800c2b0:	b138      	cbz	r0, 800c2c2 <rcutils_snprintf+0x22>
 800c2b2:	b141      	cbz	r1, 800c2c6 <rcutils_snprintf+0x26>
 800c2b4:	f003 ffc4 	bl	8010240 <vsniprintf>
 800c2b8:	b003      	add	sp, #12
 800c2ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2be:	b002      	add	sp, #8
 800c2c0:	4770      	bx	lr
 800c2c2:	2900      	cmp	r1, #0
 800c2c4:	d0f6      	beq.n	800c2b4 <rcutils_snprintf+0x14>
 800c2c6:	f004 f86f 	bl	80103a8 <__errno>
 800c2ca:	2316      	movs	r3, #22
 800c2cc:	6003      	str	r3, [r0, #0]
 800c2ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c2d2:	e7f1      	b.n	800c2b8 <rcutils_snprintf+0x18>

0800c2d4 <rcutils_vsnprintf>:
 800c2d4:	b570      	push	{r4, r5, r6, lr}
 800c2d6:	b13a      	cbz	r2, 800c2e8 <rcutils_vsnprintf+0x14>
 800c2d8:	b120      	cbz	r0, 800c2e4 <rcutils_vsnprintf+0x10>
 800c2da:	b129      	cbz	r1, 800c2e8 <rcutils_vsnprintf+0x14>
 800c2dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c2e0:	f003 bfae 	b.w	8010240 <vsniprintf>
 800c2e4:	2900      	cmp	r1, #0
 800c2e6:	d0f9      	beq.n	800c2dc <rcutils_vsnprintf+0x8>
 800c2e8:	f004 f85e 	bl	80103a8 <__errno>
 800c2ec:	2316      	movs	r3, #22
 800c2ee:	6003      	str	r3, [r0, #0]
 800c2f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c2f4:	bd70      	pop	{r4, r5, r6, pc}
 800c2f6:	bf00      	nop

0800c2f8 <rcutils_strdup>:
 800c2f8:	b084      	sub	sp, #16
 800c2fa:	b570      	push	{r4, r5, r6, lr}
 800c2fc:	b086      	sub	sp, #24
 800c2fe:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 800c302:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 800c306:	4604      	mov	r4, r0
 800c308:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c30c:	f10d 0e04 	add.w	lr, sp, #4
 800c310:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c314:	f8dc 3000 	ldr.w	r3, [ip]
 800c318:	f8ce 3000 	str.w	r3, [lr]
 800c31c:	b304      	cbz	r4, 800c360 <rcutils_strdup+0x68>
 800c31e:	a801      	add	r0, sp, #4
 800c320:	f7fa ff82 	bl	8007228 <rcutils_allocator_is_valid>
 800c324:	b1e0      	cbz	r0, 800c360 <rcutils_strdup+0x68>
 800c326:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c32a:	2100      	movs	r1, #0
 800c32c:	4620      	mov	r0, r4
 800c32e:	f7f3 ff67 	bl	8000200 <memchr>
 800c332:	b190      	cbz	r0, 800c35a <rcutils_strdup+0x62>
 800c334:	1b06      	subs	r6, r0, r4
 800c336:	1c70      	adds	r0, r6, #1
 800c338:	9b01      	ldr	r3, [sp, #4]
 800c33a:	9905      	ldr	r1, [sp, #20]
 800c33c:	4798      	blx	r3
 800c33e:	4605      	mov	r5, r0
 800c340:	b128      	cbz	r0, 800c34e <rcutils_strdup+0x56>
 800c342:	4632      	mov	r2, r6
 800c344:	4621      	mov	r1, r4
 800c346:	f004 f864 	bl	8010412 <memcpy>
 800c34a:	2300      	movs	r3, #0
 800c34c:	55ab      	strb	r3, [r5, r6]
 800c34e:	4628      	mov	r0, r5
 800c350:	b006      	add	sp, #24
 800c352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c356:	b004      	add	sp, #16
 800c358:	4770      	bx	lr
 800c35a:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800c35e:	e7eb      	b.n	800c338 <rcutils_strdup+0x40>
 800c360:	2500      	movs	r5, #0
 800c362:	e7f4      	b.n	800c34e <rcutils_strdup+0x56>

0800c364 <rcutils_strndup>:
 800c364:	b082      	sub	sp, #8
 800c366:	b570      	push	{r4, r5, r6, lr}
 800c368:	ac04      	add	r4, sp, #16
 800c36a:	e884 000c 	stmia.w	r4, {r2, r3}
 800c36e:	b1e8      	cbz	r0, 800c3ac <rcutils_strndup+0x48>
 800c370:	4605      	mov	r5, r0
 800c372:	a804      	add	r0, sp, #16
 800c374:	460c      	mov	r4, r1
 800c376:	f7fa ff57 	bl	8007228 <rcutils_allocator_is_valid>
 800c37a:	b1b8      	cbz	r0, 800c3ac <rcutils_strndup+0x48>
 800c37c:	4622      	mov	r2, r4
 800c37e:	2100      	movs	r1, #0
 800c380:	4628      	mov	r0, r5
 800c382:	f7f3 ff3d 	bl	8000200 <memchr>
 800c386:	b100      	cbz	r0, 800c38a <rcutils_strndup+0x26>
 800c388:	1b44      	subs	r4, r0, r5
 800c38a:	9b04      	ldr	r3, [sp, #16]
 800c38c:	9908      	ldr	r1, [sp, #32]
 800c38e:	1c60      	adds	r0, r4, #1
 800c390:	4798      	blx	r3
 800c392:	4606      	mov	r6, r0
 800c394:	b128      	cbz	r0, 800c3a2 <rcutils_strndup+0x3e>
 800c396:	4622      	mov	r2, r4
 800c398:	4629      	mov	r1, r5
 800c39a:	f004 f83a 	bl	8010412 <memcpy>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	5533      	strb	r3, [r6, r4]
 800c3a2:	4630      	mov	r0, r6
 800c3a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c3a8:	b002      	add	sp, #8
 800c3aa:	4770      	bx	lr
 800c3ac:	2600      	movs	r6, #0
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c3b4:	b002      	add	sp, #8
 800c3b6:	4770      	bx	lr

0800c3b8 <rcutils_get_zero_initialized_string_map>:
 800c3b8:	4b01      	ldr	r3, [pc, #4]	@ (800c3c0 <rcutils_get_zero_initialized_string_map+0x8>)
 800c3ba:	6818      	ldr	r0, [r3, #0]
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	08011a20 	.word	0x08011a20

0800c3c4 <rcutils_string_map_reserve>:
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d04e      	beq.n	800c466 <rcutils_string_map_reserve+0xa2>
 800c3c8:	b530      	push	{r4, r5, lr}
 800c3ca:	6803      	ldr	r3, [r0, #0]
 800c3cc:	b087      	sub	sp, #28
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d043      	beq.n	800c45c <rcutils_string_map_reserve+0x98>
 800c3d4:	f103 0c0c 	add.w	ip, r3, #12
 800c3d8:	460d      	mov	r5, r1
 800c3da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c3de:	f10d 0e04 	add.w	lr, sp, #4
 800c3e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c3e6:	f8dc 3000 	ldr.w	r3, [ip]
 800c3ea:	f8ce 3000 	str.w	r3, [lr]
 800c3ee:	a801      	add	r0, sp, #4
 800c3f0:	f7fa ff1a 	bl	8007228 <rcutils_allocator_is_valid>
 800c3f4:	b308      	cbz	r0, 800c43a <rcutils_string_map_reserve+0x76>
 800c3f6:	6823      	ldr	r3, [r4, #0]
 800c3f8:	6899      	ldr	r1, [r3, #8]
 800c3fa:	42a9      	cmp	r1, r5
 800c3fc:	d829      	bhi.n	800c452 <rcutils_string_map_reserve+0x8e>
 800c3fe:	685a      	ldr	r2, [r3, #4]
 800c400:	42aa      	cmp	r2, r5
 800c402:	d024      	beq.n	800c44e <rcutils_string_map_reserve+0x8a>
 800c404:	b1e5      	cbz	r5, 800c440 <rcutils_string_map_reserve+0x7c>
 800c406:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 800c40a:	d22a      	bcs.n	800c462 <rcutils_string_map_reserve+0x9e>
 800c40c:	6818      	ldr	r0, [r3, #0]
 800c40e:	9a05      	ldr	r2, [sp, #20]
 800c410:	9b03      	ldr	r3, [sp, #12]
 800c412:	00e9      	lsls	r1, r5, #3
 800c414:	4798      	blx	r3
 800c416:	b320      	cbz	r0, 800c462 <rcutils_string_map_reserve+0x9e>
 800c418:	6824      	ldr	r4, [r4, #0]
 800c41a:	6861      	ldr	r1, [r4, #4]
 800c41c:	6020      	str	r0, [r4, #0]
 800c41e:	42a9      	cmp	r1, r5
 800c420:	d214      	bcs.n	800c44c <rcutils_string_map_reserve+0x88>
 800c422:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 800c426:	1a69      	subs	r1, r5, r1
 800c428:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c42c:	2200      	movs	r2, #0
 800c42e:	e9c3 2200 	strd	r2, r2, [r3]
 800c432:	3308      	adds	r3, #8
 800c434:	428b      	cmp	r3, r1
 800c436:	d1fa      	bne.n	800c42e <rcutils_string_map_reserve+0x6a>
 800c438:	e008      	b.n	800c44c <rcutils_string_map_reserve+0x88>
 800c43a:	200b      	movs	r0, #11
 800c43c:	b007      	add	sp, #28
 800c43e:	bd30      	pop	{r4, r5, pc}
 800c440:	9a02      	ldr	r2, [sp, #8]
 800c442:	9905      	ldr	r1, [sp, #20]
 800c444:	6818      	ldr	r0, [r3, #0]
 800c446:	4790      	blx	r2
 800c448:	6824      	ldr	r4, [r4, #0]
 800c44a:	6025      	str	r5, [r4, #0]
 800c44c:	6065      	str	r5, [r4, #4]
 800c44e:	2000      	movs	r0, #0
 800c450:	e7f4      	b.n	800c43c <rcutils_string_map_reserve+0x78>
 800c452:	4620      	mov	r0, r4
 800c454:	f7ff ffb6 	bl	800c3c4 <rcutils_string_map_reserve>
 800c458:	b007      	add	sp, #28
 800c45a:	bd30      	pop	{r4, r5, pc}
 800c45c:	201f      	movs	r0, #31
 800c45e:	b007      	add	sp, #28
 800c460:	bd30      	pop	{r4, r5, pc}
 800c462:	200a      	movs	r0, #10
 800c464:	e7ea      	b.n	800c43c <rcutils_string_map_reserve+0x78>
 800c466:	200b      	movs	r0, #11
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop

0800c46c <rcutils_string_map_init>:
 800c46c:	b082      	sub	sp, #8
 800c46e:	b570      	push	{r4, r5, r6, lr}
 800c470:	ac04      	add	r4, sp, #16
 800c472:	e884 000c 	stmia.w	r4, {r2, r3}
 800c476:	b378      	cbz	r0, 800c4d8 <rcutils_string_map_init+0x6c>
 800c478:	6806      	ldr	r6, [r0, #0]
 800c47a:	4604      	mov	r4, r0
 800c47c:	b12e      	cbz	r6, 800c48a <rcutils_string_map_init+0x1e>
 800c47e:	251e      	movs	r5, #30
 800c480:	4628      	mov	r0, r5
 800c482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c486:	b002      	add	sp, #8
 800c488:	4770      	bx	lr
 800c48a:	a804      	add	r0, sp, #16
 800c48c:	460d      	mov	r5, r1
 800c48e:	f7fa fecb 	bl	8007228 <rcutils_allocator_is_valid>
 800c492:	b308      	cbz	r0, 800c4d8 <rcutils_string_map_init+0x6c>
 800c494:	9b04      	ldr	r3, [sp, #16]
 800c496:	9908      	ldr	r1, [sp, #32]
 800c498:	2020      	movs	r0, #32
 800c49a:	4798      	blx	r3
 800c49c:	6020      	str	r0, [r4, #0]
 800c49e:	b308      	cbz	r0, 800c4e4 <rcutils_string_map_init+0x78>
 800c4a0:	f10d 0e10 	add.w	lr, sp, #16
 800c4a4:	e9c0 6600 	strd	r6, r6, [r0]
 800c4a8:	6086      	str	r6, [r0, #8]
 800c4aa:	f100 0c0c 	add.w	ip, r0, #12
 800c4ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c4b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c4b6:	f8de 3000 	ldr.w	r3, [lr]
 800c4ba:	f8cc 3000 	str.w	r3, [ip]
 800c4be:	4629      	mov	r1, r5
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f7ff ff7f 	bl	800c3c4 <rcutils_string_map_reserve>
 800c4c6:	4605      	mov	r5, r0
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	d0d9      	beq.n	800c480 <rcutils_string_map_init+0x14>
 800c4cc:	9b05      	ldr	r3, [sp, #20]
 800c4ce:	9908      	ldr	r1, [sp, #32]
 800c4d0:	6820      	ldr	r0, [r4, #0]
 800c4d2:	4798      	blx	r3
 800c4d4:	6026      	str	r6, [r4, #0]
 800c4d6:	e7d3      	b.n	800c480 <rcutils_string_map_init+0x14>
 800c4d8:	250b      	movs	r5, #11
 800c4da:	4628      	mov	r0, r5
 800c4dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c4e0:	b002      	add	sp, #8
 800c4e2:	4770      	bx	lr
 800c4e4:	250a      	movs	r5, #10
 800c4e6:	e7cb      	b.n	800c480 <rcutils_string_map_init+0x14>

0800c4e8 <rcutils_string_map_fini>:
 800c4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4ec:	b086      	sub	sp, #24
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d04f      	beq.n	800c592 <rcutils_string_map_fini+0xaa>
 800c4f2:	6805      	ldr	r5, [r0, #0]
 800c4f4:	4606      	mov	r6, r0
 800c4f6:	2d00      	cmp	r5, #0
 800c4f8:	d046      	beq.n	800c588 <rcutils_string_map_fini+0xa0>
 800c4fa:	686b      	ldr	r3, [r5, #4]
 800c4fc:	b353      	cbz	r3, 800c554 <rcutils_string_map_fini+0x6c>
 800c4fe:	2400      	movs	r4, #0
 800c500:	682a      	ldr	r2, [r5, #0]
 800c502:	4627      	mov	r7, r4
 800c504:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 800c508:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800c50c:	b1f8      	cbz	r0, 800c54e <rcutils_string_map_fini+0x66>
 800c50e:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 800c512:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c516:	4651      	mov	r1, sl
 800c518:	47c8      	blx	r9
 800c51a:	682b      	ldr	r3, [r5, #0]
 800c51c:	eb03 0208 	add.w	r2, r3, r8
 800c520:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 800c524:	6850      	ldr	r0, [r2, #4]
 800c526:	4651      	mov	r1, sl
 800c528:	47c8      	blx	r9
 800c52a:	682a      	ldr	r2, [r5, #0]
 800c52c:	68ab      	ldr	r3, [r5, #8]
 800c52e:	4442      	add	r2, r8
 800c530:	3b01      	subs	r3, #1
 800c532:	6057      	str	r7, [r2, #4]
 800c534:	60ab      	str	r3, [r5, #8]
 800c536:	6835      	ldr	r5, [r6, #0]
 800c538:	686b      	ldr	r3, [r5, #4]
 800c53a:	3401      	adds	r4, #1
 800c53c:	429c      	cmp	r4, r3
 800c53e:	d209      	bcs.n	800c554 <rcutils_string_map_fini+0x6c>
 800c540:	682a      	ldr	r2, [r5, #0]
 800c542:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 800c546:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800c54a:	2800      	cmp	r0, #0
 800c54c:	d1df      	bne.n	800c50e <rcutils_string_map_fini+0x26>
 800c54e:	3401      	adds	r4, #1
 800c550:	42a3      	cmp	r3, r4
 800c552:	d8d7      	bhi.n	800c504 <rcutils_string_map_fini+0x1c>
 800c554:	2100      	movs	r1, #0
 800c556:	4630      	mov	r0, r6
 800c558:	f7ff ff34 	bl	800c3c4 <rcutils_string_map_reserve>
 800c55c:	4604      	mov	r4, r0
 800c55e:	b118      	cbz	r0, 800c568 <rcutils_string_map_fini+0x80>
 800c560:	4620      	mov	r0, r4
 800c562:	b006      	add	sp, #24
 800c564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c568:	6835      	ldr	r5, [r6, #0]
 800c56a:	350c      	adds	r5, #12
 800c56c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c56e:	af01      	add	r7, sp, #4
 800c570:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c572:	682b      	ldr	r3, [r5, #0]
 800c574:	603b      	str	r3, [r7, #0]
 800c576:	a801      	add	r0, sp, #4
 800c578:	f7fa fe56 	bl	8007228 <rcutils_allocator_is_valid>
 800c57c:	b148      	cbz	r0, 800c592 <rcutils_string_map_fini+0xaa>
 800c57e:	9b02      	ldr	r3, [sp, #8]
 800c580:	9905      	ldr	r1, [sp, #20]
 800c582:	6830      	ldr	r0, [r6, #0]
 800c584:	4798      	blx	r3
 800c586:	6034      	str	r4, [r6, #0]
 800c588:	2400      	movs	r4, #0
 800c58a:	4620      	mov	r0, r4
 800c58c:	b006      	add	sp, #24
 800c58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c592:	240b      	movs	r4, #11
 800c594:	4620      	mov	r0, r4
 800c596:	b006      	add	sp, #24
 800c598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c59c <rcutils_string_map_getn>:
 800c59c:	b338      	cbz	r0, 800c5ee <rcutils_string_map_getn+0x52>
 800c59e:	6800      	ldr	r0, [r0, #0]
 800c5a0:	b328      	cbz	r0, 800c5ee <rcutils_string_map_getn+0x52>
 800c5a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5a6:	460e      	mov	r6, r1
 800c5a8:	b1c1      	cbz	r1, 800c5dc <rcutils_string_map_getn+0x40>
 800c5aa:	e9d0 9800 	ldrd	r9, r8, [r0]
 800c5ae:	f1b8 0f00 	cmp.w	r8, #0
 800c5b2:	d013      	beq.n	800c5dc <rcutils_string_map_getn+0x40>
 800c5b4:	4617      	mov	r7, r2
 800c5b6:	2400      	movs	r4, #0
 800c5b8:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 800c5bc:	4628      	mov	r0, r5
 800c5be:	b155      	cbz	r5, 800c5d6 <rcutils_string_map_getn+0x3a>
 800c5c0:	f7f3 fe6e 	bl	80002a0 <strlen>
 800c5c4:	42b8      	cmp	r0, r7
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	4629      	mov	r1, r5
 800c5ca:	bf38      	it	cc
 800c5cc:	463a      	movcc	r2, r7
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	f003 fe59 	bl	8010286 <strncmp>
 800c5d4:	b128      	cbz	r0, 800c5e2 <rcutils_string_map_getn+0x46>
 800c5d6:	3401      	adds	r4, #1
 800c5d8:	45a0      	cmp	r8, r4
 800c5da:	d1ed      	bne.n	800c5b8 <rcutils_string_map_getn+0x1c>
 800c5dc:	2000      	movs	r0, #0
 800c5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5e2:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 800c5e6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5ee:	4770      	bx	lr

0800c5f0 <rcutils_system_time_now>:
 800c5f0:	b318      	cbz	r0, 800c63a <rcutils_system_time_now+0x4a>
 800c5f2:	b570      	push	{r4, r5, r6, lr}
 800c5f4:	b084      	sub	sp, #16
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	4669      	mov	r1, sp
 800c5fa:	2001      	movs	r0, #1
 800c5fc:	f7f4 fd10 	bl	8001020 <clock_gettime>
 800c600:	2800      	cmp	r0, #0
 800c602:	db17      	blt.n	800c634 <rcutils_system_time_now+0x44>
 800c604:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c608:	2900      	cmp	r1, #0
 800c60a:	db13      	blt.n	800c634 <rcutils_system_time_now+0x44>
 800c60c:	9d02      	ldr	r5, [sp, #8]
 800c60e:	2d00      	cmp	r5, #0
 800c610:	db0d      	blt.n	800c62e <rcutils_system_time_now+0x3e>
 800c612:	4e0b      	ldr	r6, [pc, #44]	@ (800c640 <rcutils_system_time_now+0x50>)
 800c614:	fba3 3206 	umull	r3, r2, r3, r6
 800c618:	195b      	adds	r3, r3, r5
 800c61a:	fb06 2201 	mla	r2, r6, r1, r2
 800c61e:	f04f 0000 	mov.w	r0, #0
 800c622:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800c626:	e9c4 3200 	strd	r3, r2, [r4]
 800c62a:	b004      	add	sp, #16
 800c62c:	bd70      	pop	{r4, r5, r6, pc}
 800c62e:	ea53 0201 	orrs.w	r2, r3, r1
 800c632:	d1ee      	bne.n	800c612 <rcutils_system_time_now+0x22>
 800c634:	2002      	movs	r0, #2
 800c636:	b004      	add	sp, #16
 800c638:	bd70      	pop	{r4, r5, r6, pc}
 800c63a:	200b      	movs	r0, #11
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	3b9aca00 	.word	0x3b9aca00

0800c644 <rcutils_steady_time_now>:
 800c644:	b318      	cbz	r0, 800c68e <rcutils_steady_time_now+0x4a>
 800c646:	b570      	push	{r4, r5, r6, lr}
 800c648:	b084      	sub	sp, #16
 800c64a:	4604      	mov	r4, r0
 800c64c:	4669      	mov	r1, sp
 800c64e:	2000      	movs	r0, #0
 800c650:	f7f4 fce6 	bl	8001020 <clock_gettime>
 800c654:	2800      	cmp	r0, #0
 800c656:	db17      	blt.n	800c688 <rcutils_steady_time_now+0x44>
 800c658:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c65c:	2900      	cmp	r1, #0
 800c65e:	db13      	blt.n	800c688 <rcutils_steady_time_now+0x44>
 800c660:	9d02      	ldr	r5, [sp, #8]
 800c662:	2d00      	cmp	r5, #0
 800c664:	db0d      	blt.n	800c682 <rcutils_steady_time_now+0x3e>
 800c666:	4e0b      	ldr	r6, [pc, #44]	@ (800c694 <rcutils_steady_time_now+0x50>)
 800c668:	fba3 3206 	umull	r3, r2, r3, r6
 800c66c:	195b      	adds	r3, r3, r5
 800c66e:	fb06 2201 	mla	r2, r6, r1, r2
 800c672:	f04f 0000 	mov.w	r0, #0
 800c676:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800c67a:	e9c4 3200 	strd	r3, r2, [r4]
 800c67e:	b004      	add	sp, #16
 800c680:	bd70      	pop	{r4, r5, r6, pc}
 800c682:	ea53 0201 	orrs.w	r2, r3, r1
 800c686:	d1ee      	bne.n	800c666 <rcutils_steady_time_now+0x22>
 800c688:	2002      	movs	r0, #2
 800c68a:	b004      	add	sp, #16
 800c68c:	bd70      	pop	{r4, r5, r6, pc}
 800c68e:	200b      	movs	r0, #11
 800c690:	4770      	bx	lr
 800c692:	bf00      	nop
 800c694:	3b9aca00 	.word	0x3b9aca00

0800c698 <rmw_get_zero_initialized_context>:
 800c698:	b510      	push	{r4, lr}
 800c69a:	4903      	ldr	r1, [pc, #12]	@ (800c6a8 <rmw_get_zero_initialized_context+0x10>)
 800c69c:	4604      	mov	r4, r0
 800c69e:	2270      	movs	r2, #112	@ 0x70
 800c6a0:	f003 feb7 	bl	8010412 <memcpy>
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	bd10      	pop	{r4, pc}
 800c6a8:	08011a28 	.word	0x08011a28

0800c6ac <rmw_get_zero_initialized_init_options>:
 800c6ac:	b510      	push	{r4, lr}
 800c6ae:	4903      	ldr	r1, [pc, #12]	@ (800c6bc <rmw_get_zero_initialized_init_options+0x10>)
 800c6b0:	4604      	mov	r4, r0
 800c6b2:	2258      	movs	r2, #88	@ 0x58
 800c6b4:	f003 fead 	bl	8010412 <memcpy>
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	bd10      	pop	{r4, pc}
 800c6bc:	08011a98 	.word	0x08011a98

0800c6c0 <rmw_validate_full_topic_name>:
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	d049      	beq.n	800c758 <rmw_validate_full_topic_name+0x98>
 800c6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c8:	460e      	mov	r6, r1
 800c6ca:	2900      	cmp	r1, #0
 800c6cc:	d056      	beq.n	800c77c <rmw_validate_full_topic_name+0xbc>
 800c6ce:	4615      	mov	r5, r2
 800c6d0:	4604      	mov	r4, r0
 800c6d2:	f7f3 fde5 	bl	80002a0 <strlen>
 800c6d6:	b150      	cbz	r0, 800c6ee <rmw_validate_full_topic_name+0x2e>
 800c6d8:	7823      	ldrb	r3, [r4, #0]
 800c6da:	2b2f      	cmp	r3, #47	@ 0x2f
 800c6dc:	d00c      	beq.n	800c6f8 <rmw_validate_full_topic_name+0x38>
 800c6de:	2302      	movs	r3, #2
 800c6e0:	6033      	str	r3, [r6, #0]
 800c6e2:	b10d      	cbz	r5, 800c6e8 <rmw_validate_full_topic_name+0x28>
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	602b      	str	r3, [r5, #0]
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	6033      	str	r3, [r6, #0]
 800c6f2:	2d00      	cmp	r5, #0
 800c6f4:	d1f6      	bne.n	800c6e4 <rmw_validate_full_topic_name+0x24>
 800c6f6:	e7f7      	b.n	800c6e8 <rmw_validate_full_topic_name+0x28>
 800c6f8:	1e47      	subs	r7, r0, #1
 800c6fa:	5de3      	ldrb	r3, [r4, r7]
 800c6fc:	2b2f      	cmp	r3, #47	@ 0x2f
 800c6fe:	d03f      	beq.n	800c780 <rmw_validate_full_topic_name+0xc0>
 800c700:	1e63      	subs	r3, r4, #1
 800c702:	4621      	mov	r1, r4
 800c704:	eb03 0e00 	add.w	lr, r3, r0
 800c708:	469c      	mov	ip, r3
 800c70a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800c70e:	2a5f      	cmp	r2, #95	@ 0x5f
 800c710:	d006      	beq.n	800c720 <rmw_validate_full_topic_name+0x60>
 800c712:	d823      	bhi.n	800c75c <rmw_validate_full_topic_name+0x9c>
 800c714:	2a39      	cmp	r2, #57	@ 0x39
 800c716:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 800c71a:	d82b      	bhi.n	800c774 <rmw_validate_full_topic_name+0xb4>
 800c71c:	2a2e      	cmp	r2, #46	@ 0x2e
 800c71e:	d920      	bls.n	800c762 <rmw_validate_full_topic_name+0xa2>
 800c720:	4573      	cmp	r3, lr
 800c722:	d1f1      	bne.n	800c708 <rmw_validate_full_topic_name+0x48>
 800c724:	4c21      	ldr	r4, [pc, #132]	@ (800c7ac <rmw_validate_full_topic_name+0xec>)
 800c726:	2300      	movs	r3, #0
 800c728:	e003      	b.n	800c732 <rmw_validate_full_topic_name+0x72>
 800c72a:	4298      	cmp	r0, r3
 800c72c:	f101 0101 	add.w	r1, r1, #1
 800c730:	d02c      	beq.n	800c78c <rmw_validate_full_topic_name+0xcc>
 800c732:	429f      	cmp	r7, r3
 800c734:	f103 0301 	add.w	r3, r3, #1
 800c738:	d0f7      	beq.n	800c72a <rmw_validate_full_topic_name+0x6a>
 800c73a:	780a      	ldrb	r2, [r1, #0]
 800c73c:	2a2f      	cmp	r2, #47	@ 0x2f
 800c73e:	d1f4      	bne.n	800c72a <rmw_validate_full_topic_name+0x6a>
 800c740:	784a      	ldrb	r2, [r1, #1]
 800c742:	2a2f      	cmp	r2, #47	@ 0x2f
 800c744:	d02d      	beq.n	800c7a2 <rmw_validate_full_topic_name+0xe2>
 800c746:	5ca2      	ldrb	r2, [r4, r2]
 800c748:	0752      	lsls	r2, r2, #29
 800c74a:	d5ee      	bpl.n	800c72a <rmw_validate_full_topic_name+0x6a>
 800c74c:	2206      	movs	r2, #6
 800c74e:	6032      	str	r2, [r6, #0]
 800c750:	2d00      	cmp	r5, #0
 800c752:	d0c9      	beq.n	800c6e8 <rmw_validate_full_topic_name+0x28>
 800c754:	602b      	str	r3, [r5, #0]
 800c756:	e7c7      	b.n	800c6e8 <rmw_validate_full_topic_name+0x28>
 800c758:	200b      	movs	r0, #11
 800c75a:	4770      	bx	lr
 800c75c:	3a61      	subs	r2, #97	@ 0x61
 800c75e:	2a19      	cmp	r2, #25
 800c760:	d9de      	bls.n	800c720 <rmw_validate_full_topic_name+0x60>
 800c762:	2304      	movs	r3, #4
 800c764:	6033      	str	r3, [r6, #0]
 800c766:	2d00      	cmp	r5, #0
 800c768:	d0be      	beq.n	800c6e8 <rmw_validate_full_topic_name+0x28>
 800c76a:	f1c4 0401 	rsb	r4, r4, #1
 800c76e:	4464      	add	r4, ip
 800c770:	602c      	str	r4, [r5, #0]
 800c772:	e7b9      	b.n	800c6e8 <rmw_validate_full_topic_name+0x28>
 800c774:	f1b8 0f19 	cmp.w	r8, #25
 800c778:	d9d2      	bls.n	800c720 <rmw_validate_full_topic_name+0x60>
 800c77a:	e7f2      	b.n	800c762 <rmw_validate_full_topic_name+0xa2>
 800c77c:	200b      	movs	r0, #11
 800c77e:	e7b4      	b.n	800c6ea <rmw_validate_full_topic_name+0x2a>
 800c780:	2303      	movs	r3, #3
 800c782:	6033      	str	r3, [r6, #0]
 800c784:	2d00      	cmp	r5, #0
 800c786:	d0af      	beq.n	800c6e8 <rmw_validate_full_topic_name+0x28>
 800c788:	602f      	str	r7, [r5, #0]
 800c78a:	e7ad      	b.n	800c6e8 <rmw_validate_full_topic_name+0x28>
 800c78c:	28f7      	cmp	r0, #247	@ 0xf7
 800c78e:	d802      	bhi.n	800c796 <rmw_validate_full_topic_name+0xd6>
 800c790:	2300      	movs	r3, #0
 800c792:	6033      	str	r3, [r6, #0]
 800c794:	e7a8      	b.n	800c6e8 <rmw_validate_full_topic_name+0x28>
 800c796:	2307      	movs	r3, #7
 800c798:	6033      	str	r3, [r6, #0]
 800c79a:	2d00      	cmp	r5, #0
 800c79c:	d0a4      	beq.n	800c6e8 <rmw_validate_full_topic_name+0x28>
 800c79e:	23f6      	movs	r3, #246	@ 0xf6
 800c7a0:	e7d8      	b.n	800c754 <rmw_validate_full_topic_name+0x94>
 800c7a2:	2205      	movs	r2, #5
 800c7a4:	6032      	str	r2, [r6, #0]
 800c7a6:	2d00      	cmp	r5, #0
 800c7a8:	d1d4      	bne.n	800c754 <rmw_validate_full_topic_name+0x94>
 800c7aa:	e79d      	b.n	800c6e8 <rmw_validate_full_topic_name+0x28>
 800c7ac:	08011e93 	.word	0x08011e93

0800c7b0 <rmw_validate_namespace_with_size>:
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	d031      	beq.n	800c818 <rmw_validate_namespace_with_size+0x68>
 800c7b4:	b570      	push	{r4, r5, r6, lr}
 800c7b6:	4614      	mov	r4, r2
 800c7b8:	b0c2      	sub	sp, #264	@ 0x108
 800c7ba:	b1ba      	cbz	r2, 800c7ec <rmw_validate_namespace_with_size+0x3c>
 800c7bc:	2901      	cmp	r1, #1
 800c7be:	460e      	mov	r6, r1
 800c7c0:	461d      	mov	r5, r3
 800c7c2:	d102      	bne.n	800c7ca <rmw_validate_namespace_with_size+0x1a>
 800c7c4:	7803      	ldrb	r3, [r0, #0]
 800c7c6:	2b2f      	cmp	r3, #47	@ 0x2f
 800c7c8:	d015      	beq.n	800c7f6 <rmw_validate_namespace_with_size+0x46>
 800c7ca:	aa01      	add	r2, sp, #4
 800c7cc:	4669      	mov	r1, sp
 800c7ce:	f7ff ff77 	bl	800c6c0 <rmw_validate_full_topic_name>
 800c7d2:	b960      	cbnz	r0, 800c7ee <rmw_validate_namespace_with_size+0x3e>
 800c7d4:	9b00      	ldr	r3, [sp, #0]
 800c7d6:	b163      	cbz	r3, 800c7f2 <rmw_validate_namespace_with_size+0x42>
 800c7d8:	2b07      	cmp	r3, #7
 800c7da:	d00a      	beq.n	800c7f2 <rmw_validate_namespace_with_size+0x42>
 800c7dc:	1e5a      	subs	r2, r3, #1
 800c7de:	2a05      	cmp	r2, #5
 800c7e0:	d81c      	bhi.n	800c81c <rmw_validate_namespace_with_size+0x6c>
 800c7e2:	e8df f002 	tbb	[pc, r2]
 800c7e6:	0c0c      	.short	0x0c0c
 800c7e8:	0c0c0c0c 	.word	0x0c0c0c0c
 800c7ec:	200b      	movs	r0, #11
 800c7ee:	b042      	add	sp, #264	@ 0x108
 800c7f0:	bd70      	pop	{r4, r5, r6, pc}
 800c7f2:	2ef5      	cmp	r6, #245	@ 0xf5
 800c7f4:	d809      	bhi.n	800c80a <rmw_validate_namespace_with_size+0x5a>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	2000      	movs	r0, #0
 800c7fc:	e7f7      	b.n	800c7ee <rmw_validate_namespace_with_size+0x3e>
 800c7fe:	6023      	str	r3, [r4, #0]
 800c800:	2d00      	cmp	r5, #0
 800c802:	d0fa      	beq.n	800c7fa <rmw_validate_namespace_with_size+0x4a>
 800c804:	9b01      	ldr	r3, [sp, #4]
 800c806:	602b      	str	r3, [r5, #0]
 800c808:	e7f7      	b.n	800c7fa <rmw_validate_namespace_with_size+0x4a>
 800c80a:	2307      	movs	r3, #7
 800c80c:	6023      	str	r3, [r4, #0]
 800c80e:	2d00      	cmp	r5, #0
 800c810:	d0f3      	beq.n	800c7fa <rmw_validate_namespace_with_size+0x4a>
 800c812:	23f4      	movs	r3, #244	@ 0xf4
 800c814:	602b      	str	r3, [r5, #0]
 800c816:	e7f0      	b.n	800c7fa <rmw_validate_namespace_with_size+0x4a>
 800c818:	200b      	movs	r0, #11
 800c81a:	4770      	bx	lr
 800c81c:	4a03      	ldr	r2, [pc, #12]	@ (800c82c <rmw_validate_namespace_with_size+0x7c>)
 800c81e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c822:	a802      	add	r0, sp, #8
 800c824:	f7ff fd3c 	bl	800c2a0 <rcutils_snprintf>
 800c828:	2001      	movs	r0, #1
 800c82a:	e7e0      	b.n	800c7ee <rmw_validate_namespace_with_size+0x3e>
 800c82c:	08011560 	.word	0x08011560

0800c830 <rmw_validate_namespace>:
 800c830:	b168      	cbz	r0, 800c84e <rmw_validate_namespace+0x1e>
 800c832:	b570      	push	{r4, r5, r6, lr}
 800c834:	460d      	mov	r5, r1
 800c836:	4616      	mov	r6, r2
 800c838:	4604      	mov	r4, r0
 800c83a:	f7f3 fd31 	bl	80002a0 <strlen>
 800c83e:	4633      	mov	r3, r6
 800c840:	4601      	mov	r1, r0
 800c842:	462a      	mov	r2, r5
 800c844:	4620      	mov	r0, r4
 800c846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c84a:	f7ff bfb1 	b.w	800c7b0 <rmw_validate_namespace_with_size>
 800c84e:	200b      	movs	r0, #11
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop

0800c854 <rmw_namespace_validation_result_string>:
 800c854:	2807      	cmp	r0, #7
 800c856:	bf9a      	itte	ls
 800c858:	4b02      	ldrls	r3, [pc, #8]	@ (800c864 <rmw_namespace_validation_result_string+0x10>)
 800c85a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800c85e:	4802      	ldrhi	r0, [pc, #8]	@ (800c868 <rmw_namespace_validation_result_string+0x14>)
 800c860:	4770      	bx	lr
 800c862:	bf00      	nop
 800c864:	08011af0 	.word	0x08011af0
 800c868:	080115b0 	.word	0x080115b0

0800c86c <rmw_validate_node_name>:
 800c86c:	2800      	cmp	r0, #0
 800c86e:	d037      	beq.n	800c8e0 <rmw_validate_node_name+0x74>
 800c870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c872:	460e      	mov	r6, r1
 800c874:	2900      	cmp	r1, #0
 800c876:	d035      	beq.n	800c8e4 <rmw_validate_node_name+0x78>
 800c878:	4617      	mov	r7, r2
 800c87a:	4604      	mov	r4, r0
 800c87c:	f7f3 fd10 	bl	80002a0 <strlen>
 800c880:	b1d8      	cbz	r0, 800c8ba <rmw_validate_node_name+0x4e>
 800c882:	1e63      	subs	r3, r4, #1
 800c884:	1819      	adds	r1, r3, r0
 800c886:	461a      	mov	r2, r3
 800c888:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800c88c:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 800c890:	f02e 0c20 	bic.w	ip, lr, #32
 800c894:	2d09      	cmp	r5, #9
 800c896:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800c89a:	d915      	bls.n	800c8c8 <rmw_validate_node_name+0x5c>
 800c89c:	f1bc 0f19 	cmp.w	ip, #25
 800c8a0:	d912      	bls.n	800c8c8 <rmw_validate_node_name+0x5c>
 800c8a2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800c8a6:	d00f      	beq.n	800c8c8 <rmw_validate_node_name+0x5c>
 800c8a8:	2302      	movs	r3, #2
 800c8aa:	6033      	str	r3, [r6, #0]
 800c8ac:	b11f      	cbz	r7, 800c8b6 <rmw_validate_node_name+0x4a>
 800c8ae:	f1c4 0401 	rsb	r4, r4, #1
 800c8b2:	4414      	add	r4, r2
 800c8b4:	603c      	str	r4, [r7, #0]
 800c8b6:	2000      	movs	r0, #0
 800c8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	6033      	str	r3, [r6, #0]
 800c8be:	2f00      	cmp	r7, #0
 800c8c0:	d0f9      	beq.n	800c8b6 <rmw_validate_node_name+0x4a>
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	603b      	str	r3, [r7, #0]
 800c8c6:	e7f6      	b.n	800c8b6 <rmw_validate_node_name+0x4a>
 800c8c8:	4299      	cmp	r1, r3
 800c8ca:	d1dc      	bne.n	800c886 <rmw_validate_node_name+0x1a>
 800c8cc:	7823      	ldrb	r3, [r4, #0]
 800c8ce:	4a0c      	ldr	r2, [pc, #48]	@ (800c900 <rmw_validate_node_name+0x94>)
 800c8d0:	5cd3      	ldrb	r3, [r2, r3]
 800c8d2:	f013 0304 	ands.w	r3, r3, #4
 800c8d6:	d10e      	bne.n	800c8f6 <rmw_validate_node_name+0x8a>
 800c8d8:	28ff      	cmp	r0, #255	@ 0xff
 800c8da:	d805      	bhi.n	800c8e8 <rmw_validate_node_name+0x7c>
 800c8dc:	6033      	str	r3, [r6, #0]
 800c8de:	e7ea      	b.n	800c8b6 <rmw_validate_node_name+0x4a>
 800c8e0:	200b      	movs	r0, #11
 800c8e2:	4770      	bx	lr
 800c8e4:	200b      	movs	r0, #11
 800c8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8e8:	2304      	movs	r3, #4
 800c8ea:	6033      	str	r3, [r6, #0]
 800c8ec:	2f00      	cmp	r7, #0
 800c8ee:	d0e2      	beq.n	800c8b6 <rmw_validate_node_name+0x4a>
 800c8f0:	23fe      	movs	r3, #254	@ 0xfe
 800c8f2:	603b      	str	r3, [r7, #0]
 800c8f4:	e7df      	b.n	800c8b6 <rmw_validate_node_name+0x4a>
 800c8f6:	2303      	movs	r3, #3
 800c8f8:	6033      	str	r3, [r6, #0]
 800c8fa:	2f00      	cmp	r7, #0
 800c8fc:	d1e1      	bne.n	800c8c2 <rmw_validate_node_name+0x56>
 800c8fe:	e7da      	b.n	800c8b6 <rmw_validate_node_name+0x4a>
 800c900:	08011e93 	.word	0x08011e93

0800c904 <rmw_node_name_validation_result_string>:
 800c904:	2804      	cmp	r0, #4
 800c906:	bf9a      	itte	ls
 800c908:	4b02      	ldrls	r3, [pc, #8]	@ (800c914 <rmw_node_name_validation_result_string+0x10>)
 800c90a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800c90e:	4802      	ldrhi	r0, [pc, #8]	@ (800c918 <rmw_node_name_validation_result_string+0x14>)
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	08011b10 	.word	0x08011b10
 800c918:	08011758 	.word	0x08011758

0800c91c <get_memory>:
 800c91c:	4603      	mov	r3, r0
 800c91e:	6840      	ldr	r0, [r0, #4]
 800c920:	b158      	cbz	r0, 800c93a <get_memory+0x1e>
 800c922:	6842      	ldr	r2, [r0, #4]
 800c924:	605a      	str	r2, [r3, #4]
 800c926:	b10a      	cbz	r2, 800c92c <get_memory+0x10>
 800c928:	2100      	movs	r1, #0
 800c92a:	6011      	str	r1, [r2, #0]
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	6042      	str	r2, [r0, #4]
 800c930:	b102      	cbz	r2, 800c934 <get_memory+0x18>
 800c932:	6010      	str	r0, [r2, #0]
 800c934:	2200      	movs	r2, #0
 800c936:	6002      	str	r2, [r0, #0]
 800c938:	6018      	str	r0, [r3, #0]
 800c93a:	4770      	bx	lr

0800c93c <put_memory>:
 800c93c:	680b      	ldr	r3, [r1, #0]
 800c93e:	b10b      	cbz	r3, 800c944 <put_memory+0x8>
 800c940:	684a      	ldr	r2, [r1, #4]
 800c942:	605a      	str	r2, [r3, #4]
 800c944:	684a      	ldr	r2, [r1, #4]
 800c946:	b102      	cbz	r2, 800c94a <put_memory+0xe>
 800c948:	6013      	str	r3, [r2, #0]
 800c94a:	6803      	ldr	r3, [r0, #0]
 800c94c:	428b      	cmp	r3, r1
 800c94e:	6843      	ldr	r3, [r0, #4]
 800c950:	bf08      	it	eq
 800c952:	6002      	streq	r2, [r0, #0]
 800c954:	604b      	str	r3, [r1, #4]
 800c956:	b103      	cbz	r3, 800c95a <put_memory+0x1e>
 800c958:	6019      	str	r1, [r3, #0]
 800c95a:	2300      	movs	r3, #0
 800c95c:	600b      	str	r3, [r1, #0]
 800c95e:	6041      	str	r1, [r0, #4]
 800c960:	4770      	bx	lr
 800c962:	bf00      	nop

0800c964 <rmw_get_implementation_identifier>:
 800c964:	4b01      	ldr	r3, [pc, #4]	@ (800c96c <rmw_get_implementation_identifier+0x8>)
 800c966:	6818      	ldr	r0, [r3, #0]
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	08011b24 	.word	0x08011b24

0800c970 <rmw_init_options_init>:
 800c970:	b084      	sub	sp, #16
 800c972:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c974:	b083      	sub	sp, #12
 800c976:	ad09      	add	r5, sp, #36	@ 0x24
 800c978:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800c97c:	b130      	cbz	r0, 800c98c <rmw_init_options_init+0x1c>
 800c97e:	4604      	mov	r4, r0
 800c980:	4628      	mov	r0, r5
 800c982:	f7fa fc51 	bl	8007228 <rcutils_allocator_is_valid>
 800c986:	b108      	cbz	r0, 800c98c <rmw_init_options_init+0x1c>
 800c988:	68a6      	ldr	r6, [r4, #8]
 800c98a:	b12e      	cbz	r6, 800c998 <rmw_init_options_init+0x28>
 800c98c:	200b      	movs	r0, #11
 800c98e:	b003      	add	sp, #12
 800c990:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c994:	b004      	add	sp, #16
 800c996:	4770      	bx	lr
 800c998:	2200      	movs	r2, #0
 800c99a:	2300      	movs	r3, #0
 800c99c:	e9c4 2300 	strd	r2, r3, [r4]
 800c9a0:	4b20      	ldr	r3, [pc, #128]	@ (800ca24 <rmw_init_options_init+0xb4>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	60a3      	str	r3, [r4, #8]
 800c9a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9a8:	f104 0c3c 	add.w	ip, r4, #60	@ 0x3c
 800c9ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c9b0:	466f      	mov	r7, sp
 800c9b2:	682b      	ldr	r3, [r5, #0]
 800c9b4:	f8cc 3000 	str.w	r3, [ip]
 800c9b8:	4638      	mov	r0, r7
 800c9ba:	63a6      	str	r6, [r4, #56]	@ 0x38
 800c9bc:	60e6      	str	r6, [r4, #12]
 800c9be:	f002 ff2f 	bl	800f820 <rmw_get_default_security_options>
 800c9c2:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c9c6:	f104 0310 	add.w	r3, r4, #16
 800c9ca:	e883 0003 	stmia.w	r3, {r0, r1}
 800c9ce:	2203      	movs	r2, #3
 800c9d0:	4815      	ldr	r0, [pc, #84]	@ (800ca28 <rmw_init_options_init+0xb8>)
 800c9d2:	4916      	ldr	r1, [pc, #88]	@ (800ca2c <rmw_init_options_init+0xbc>)
 800c9d4:	f7fa ff2a 	bl	800782c <rmw_uxrce_init_init_options_impl_memory>
 800c9d8:	4813      	ldr	r0, [pc, #76]	@ (800ca28 <rmw_init_options_init+0xb8>)
 800c9da:	f7ff ff9f 	bl	800c91c <get_memory>
 800c9de:	b1f0      	cbz	r0, 800ca1e <rmw_init_options_init+0xae>
 800c9e0:	4a13      	ldr	r2, [pc, #76]	@ (800ca30 <rmw_init_options_init+0xc0>)
 800c9e2:	6883      	ldr	r3, [r0, #8]
 800c9e4:	6851      	ldr	r1, [r2, #4]
 800c9e6:	7810      	ldrb	r0, [r2, #0]
 800c9e8:	6523      	str	r3, [r4, #80]	@ 0x50
 800c9ea:	7418      	strb	r0, [r3, #16]
 800c9ec:	6159      	str	r1, [r3, #20]
 800c9ee:	68d1      	ldr	r1, [r2, #12]
 800c9f0:	61d9      	str	r1, [r3, #28]
 800c9f2:	6911      	ldr	r1, [r2, #16]
 800c9f4:	6219      	str	r1, [r3, #32]
 800c9f6:	6951      	ldr	r1, [r2, #20]
 800c9f8:	6892      	ldr	r2, [r2, #8]
 800c9fa:	619a      	str	r2, [r3, #24]
 800c9fc:	6259      	str	r1, [r3, #36]	@ 0x24
 800c9fe:	f7fd fc99 	bl	800a334 <uxr_nanos>
 800ca02:	f003 f987 	bl	800fd14 <srand>
 800ca06:	f003 f9b3 	bl	800fd70 <rand>
 800ca0a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ca0c:	6298      	str	r0, [r3, #40]	@ 0x28
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	d0f9      	beq.n	800ca06 <rmw_init_options_init+0x96>
 800ca12:	2000      	movs	r0, #0
 800ca14:	b003      	add	sp, #12
 800ca16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ca1a:	b004      	add	sp, #16
 800ca1c:	4770      	bx	lr
 800ca1e:	2001      	movs	r0, #1
 800ca20:	e7b5      	b.n	800c98e <rmw_init_options_init+0x1e>
 800ca22:	bf00      	nop
 800ca24:	08011b24 	.word	0x08011b24
 800ca28:	20009340 	.word	0x20009340
 800ca2c:	200092bc 	.word	0x200092bc
 800ca30:	20009190 	.word	0x20009190

0800ca34 <rmw_init_options_copy>:
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d03e      	beq.n	800cab6 <rmw_init_options_copy+0x82>
 800ca38:	b570      	push	{r4, r5, r6, lr}
 800ca3a:	460d      	mov	r5, r1
 800ca3c:	b149      	cbz	r1, 800ca52 <rmw_init_options_copy+0x1e>
 800ca3e:	4604      	mov	r4, r0
 800ca40:	6880      	ldr	r0, [r0, #8]
 800ca42:	b120      	cbz	r0, 800ca4e <rmw_init_options_copy+0x1a>
 800ca44:	4b21      	ldr	r3, [pc, #132]	@ (800cacc <rmw_init_options_copy+0x98>)
 800ca46:	6819      	ldr	r1, [r3, #0]
 800ca48:	f7f3 fbca 	bl	80001e0 <strcmp>
 800ca4c:	bb78      	cbnz	r0, 800caae <rmw_init_options_copy+0x7a>
 800ca4e:	68ab      	ldr	r3, [r5, #8]
 800ca50:	b11b      	cbz	r3, 800ca5a <rmw_init_options_copy+0x26>
 800ca52:	f04f 0c0b 	mov.w	ip, #11
 800ca56:	4660      	mov	r0, ip
 800ca58:	bd70      	pop	{r4, r5, r6, pc}
 800ca5a:	2258      	movs	r2, #88	@ 0x58
 800ca5c:	4621      	mov	r1, r4
 800ca5e:	4628      	mov	r0, r5
 800ca60:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 800ca64:	f003 fcd5 	bl	8010412 <memcpy>
 800ca68:	4630      	mov	r0, r6
 800ca6a:	f7fa fbdd 	bl	8007228 <rcutils_allocator_is_valid>
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	d0ef      	beq.n	800ca52 <rmw_init_options_copy+0x1e>
 800ca72:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800ca74:	b138      	cbz	r0, 800ca86 <rmw_init_options_copy+0x52>
 800ca76:	f105 0238 	add.w	r2, r5, #56	@ 0x38
 800ca7a:	4631      	mov	r1, r6
 800ca7c:	f002 fe9c 	bl	800f7b8 <rmw_enclave_options_copy>
 800ca80:	4684      	mov	ip, r0
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d1e7      	bne.n	800ca56 <rmw_init_options_copy+0x22>
 800ca86:	4812      	ldr	r0, [pc, #72]	@ (800cad0 <rmw_init_options_copy+0x9c>)
 800ca88:	f7ff ff48 	bl	800c91c <get_memory>
 800ca8c:	b1b8      	cbz	r0, 800cabe <rmw_init_options_copy+0x8a>
 800ca8e:	6883      	ldr	r3, [r0, #8]
 800ca90:	652b      	str	r3, [r5, #80]	@ 0x50
 800ca92:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 800ca94:	3510      	adds	r5, #16
 800ca96:	f103 0410 	add.w	r4, r3, #16
 800ca9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800caa2:	f04f 0c00 	mov.w	ip, #0
 800caa6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800caaa:	4660      	mov	r0, ip
 800caac:	bd70      	pop	{r4, r5, r6, pc}
 800caae:	f04f 0c0c 	mov.w	ip, #12
 800cab2:	4660      	mov	r0, ip
 800cab4:	bd70      	pop	{r4, r5, r6, pc}
 800cab6:	f04f 0c0b 	mov.w	ip, #11
 800caba:	4660      	mov	r0, ip
 800cabc:	4770      	bx	lr
 800cabe:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800cac0:	4631      	mov	r1, r6
 800cac2:	f002 fe9b 	bl	800f7fc <rmw_enclave_options_fini>
 800cac6:	f04f 0c01 	mov.w	ip, #1
 800caca:	e7c4      	b.n	800ca56 <rmw_init_options_copy+0x22>
 800cacc:	08011b24 	.word	0x08011b24
 800cad0:	20009340 	.word	0x20009340

0800cad4 <rmw_init_options_fini>:
 800cad4:	2800      	cmp	r0, #0
 800cad6:	d035      	beq.n	800cb44 <rmw_init_options_fini+0x70>
 800cad8:	b530      	push	{r4, r5, lr}
 800cada:	f100 053c 	add.w	r5, r0, #60	@ 0x3c
 800cade:	b097      	sub	sp, #92	@ 0x5c
 800cae0:	4604      	mov	r4, r0
 800cae2:	4628      	mov	r0, r5
 800cae4:	f7fa fba0 	bl	8007228 <rcutils_allocator_is_valid>
 800cae8:	b320      	cbz	r0, 800cb34 <rmw_init_options_fini+0x60>
 800caea:	68a0      	ldr	r0, [r4, #8]
 800caec:	b120      	cbz	r0, 800caf8 <rmw_init_options_fini+0x24>
 800caee:	4b16      	ldr	r3, [pc, #88]	@ (800cb48 <rmw_init_options_fini+0x74>)
 800caf0:	6819      	ldr	r1, [r3, #0]
 800caf2:	f7f3 fb75 	bl	80001e0 <strcmp>
 800caf6:	bb18      	cbnz	r0, 800cb40 <rmw_init_options_fini+0x6c>
 800caf8:	4b14      	ldr	r3, [pc, #80]	@ (800cb4c <rmw_init_options_fini+0x78>)
 800cafa:	6819      	ldr	r1, [r3, #0]
 800cafc:	b1e9      	cbz	r1, 800cb3a <rmw_init_options_fini+0x66>
 800cafe:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800cb00:	e001      	b.n	800cb06 <rmw_init_options_fini+0x32>
 800cb02:	6849      	ldr	r1, [r1, #4]
 800cb04:	b1c9      	cbz	r1, 800cb3a <rmw_init_options_fini+0x66>
 800cb06:	688b      	ldr	r3, [r1, #8]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d1fa      	bne.n	800cb02 <rmw_init_options_fini+0x2e>
 800cb0c:	480f      	ldr	r0, [pc, #60]	@ (800cb4c <rmw_init_options_fini+0x78>)
 800cb0e:	f7ff ff15 	bl	800c93c <put_memory>
 800cb12:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800cb14:	b118      	cbz	r0, 800cb1e <rmw_init_options_fini+0x4a>
 800cb16:	4629      	mov	r1, r5
 800cb18:	f002 fe70 	bl	800f7fc <rmw_enclave_options_fini>
 800cb1c:	b940      	cbnz	r0, 800cb30 <rmw_init_options_fini+0x5c>
 800cb1e:	4668      	mov	r0, sp
 800cb20:	f7ff fdc4 	bl	800c6ac <rmw_get_zero_initialized_init_options>
 800cb24:	2258      	movs	r2, #88	@ 0x58
 800cb26:	4669      	mov	r1, sp
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f003 fc72 	bl	8010412 <memcpy>
 800cb2e:	2000      	movs	r0, #0
 800cb30:	b017      	add	sp, #92	@ 0x5c
 800cb32:	bd30      	pop	{r4, r5, pc}
 800cb34:	200b      	movs	r0, #11
 800cb36:	b017      	add	sp, #92	@ 0x5c
 800cb38:	bd30      	pop	{r4, r5, pc}
 800cb3a:	2001      	movs	r0, #1
 800cb3c:	b017      	add	sp, #92	@ 0x5c
 800cb3e:	bd30      	pop	{r4, r5, pc}
 800cb40:	200c      	movs	r0, #12
 800cb42:	e7f5      	b.n	800cb30 <rmw_init_options_fini+0x5c>
 800cb44:	200b      	movs	r0, #11
 800cb46:	4770      	bx	lr
 800cb48:	08011b24 	.word	0x08011b24
 800cb4c:	20009340 	.word	0x20009340

0800cb50 <rmw_init>:
 800cb50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb54:	b083      	sub	sp, #12
 800cb56:	2800      	cmp	r0, #0
 800cb58:	f000 80d4 	beq.w	800cd04 <rmw_init+0x1b4>
 800cb5c:	460e      	mov	r6, r1
 800cb5e:	2900      	cmp	r1, #0
 800cb60:	f000 80d0 	beq.w	800cd04 <rmw_init+0x1b4>
 800cb64:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800cb66:	4605      	mov	r5, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f000 80cb 	beq.w	800cd04 <rmw_init+0x1b4>
 800cb6e:	4b77      	ldr	r3, [pc, #476]	@ (800cd4c <rmw_init+0x1fc>)
 800cb70:	6880      	ldr	r0, [r0, #8]
 800cb72:	681f      	ldr	r7, [r3, #0]
 800cb74:	b128      	cbz	r0, 800cb82 <rmw_init+0x32>
 800cb76:	4639      	mov	r1, r7
 800cb78:	f7f3 fb32 	bl	80001e0 <strcmp>
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	f040 80d3 	bne.w	800cd28 <rmw_init+0x1d8>
 800cb82:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb86:	4c72      	ldr	r4, [pc, #456]	@ (800cd50 <rmw_init+0x200>)
 800cb88:	4972      	ldr	r1, [pc, #456]	@ (800cd54 <rmw_init+0x204>)
 800cb8a:	4873      	ldr	r0, [pc, #460]	@ (800cd58 <rmw_init+0x208>)
 800cb8c:	60b7      	str	r7, [r6, #8]
 800cb8e:	e9c6 2300 	strd	r2, r3, [r6]
 800cb92:	68eb      	ldr	r3, [r5, #12]
 800cb94:	66b3      	str	r3, [r6, #104]	@ 0x68
 800cb96:	2201      	movs	r2, #1
 800cb98:	f7fa fde8 	bl	800776c <rmw_uxrce_init_session_memory>
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	496f      	ldr	r1, [pc, #444]	@ (800cd5c <rmw_init+0x20c>)
 800cba0:	2204      	movs	r2, #4
 800cba2:	f7fa fe23 	bl	80077ec <rmw_uxrce_init_static_input_buffer_memory>
 800cba6:	f04f 0800 	mov.w	r8, #0
 800cbaa:	486b      	ldr	r0, [pc, #428]	@ (800cd58 <rmw_init+0x208>)
 800cbac:	f884 800d 	strb.w	r8, [r4, #13]
 800cbb0:	f7ff feb4 	bl	800c91c <get_memory>
 800cbb4:	2800      	cmp	r0, #0
 800cbb6:	f000 80b2 	beq.w	800cd1e <rmw_init+0x1ce>
 800cbba:	6884      	ldr	r4, [r0, #8]
 800cbbc:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 800cbbe:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800cbc0:	f890 c010 	ldrb.w	ip, [r0, #16]
 800cbc4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800cbc8:	9101      	str	r1, [sp, #4]
 800cbca:	6a00      	ldr	r0, [r0, #32]
 800cbcc:	9000      	str	r0, [sp, #0]
 800cbce:	f104 0910 	add.w	r9, r4, #16
 800cbd2:	4661      	mov	r1, ip
 800cbd4:	4648      	mov	r0, r9
 800cbd6:	f000 fdf1 	bl	800d7bc <uxr_set_custom_transport_callbacks>
 800cbda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cbde:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 800cbe2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800cbe6:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800cbea:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800cbee:	495c      	ldr	r1, [pc, #368]	@ (800cd60 <rmw_init+0x210>)
 800cbf0:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800cbf4:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800cbf8:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800cbfc:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800cc00:	4858      	ldr	r0, [pc, #352]	@ (800cd64 <rmw_init+0x214>)
 800cc02:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800cc06:	2201      	movs	r2, #1
 800cc08:	66f4      	str	r4, [r6, #108]	@ 0x6c
 800cc0a:	f7fa fd8f 	bl	800772c <rmw_uxrce_init_node_memory>
 800cc0e:	4956      	ldr	r1, [pc, #344]	@ (800cd68 <rmw_init+0x218>)
 800cc10:	4856      	ldr	r0, [pc, #344]	@ (800cd6c <rmw_init+0x21c>)
 800cc12:	2205      	movs	r2, #5
 800cc14:	f7fa fd6a 	bl	80076ec <rmw_uxrce_init_subscription_memory>
 800cc18:	4955      	ldr	r1, [pc, #340]	@ (800cd70 <rmw_init+0x220>)
 800cc1a:	4856      	ldr	r0, [pc, #344]	@ (800cd74 <rmw_init+0x224>)
 800cc1c:	220a      	movs	r2, #10
 800cc1e:	f7fa fd45 	bl	80076ac <rmw_uxrce_init_publisher_memory>
 800cc22:	4955      	ldr	r1, [pc, #340]	@ (800cd78 <rmw_init+0x228>)
 800cc24:	4855      	ldr	r0, [pc, #340]	@ (800cd7c <rmw_init+0x22c>)
 800cc26:	2201      	movs	r2, #1
 800cc28:	f7fa fd00 	bl	800762c <rmw_uxrce_init_service_memory>
 800cc2c:	4954      	ldr	r1, [pc, #336]	@ (800cd80 <rmw_init+0x230>)
 800cc2e:	4855      	ldr	r0, [pc, #340]	@ (800cd84 <rmw_init+0x234>)
 800cc30:	2201      	movs	r2, #1
 800cc32:	f7fa fd1b 	bl	800766c <rmw_uxrce_init_client_memory>
 800cc36:	4954      	ldr	r1, [pc, #336]	@ (800cd88 <rmw_init+0x238>)
 800cc38:	4854      	ldr	r0, [pc, #336]	@ (800cd8c <rmw_init+0x23c>)
 800cc3a:	220f      	movs	r2, #15
 800cc3c:	f7fa fdb6 	bl	80077ac <rmw_uxrce_init_topic_memory>
 800cc40:	4953      	ldr	r1, [pc, #332]	@ (800cd90 <rmw_init+0x240>)
 800cc42:	4854      	ldr	r0, [pc, #336]	@ (800cd94 <rmw_init+0x244>)
 800cc44:	2203      	movs	r2, #3
 800cc46:	f7fa fdf1 	bl	800782c <rmw_uxrce_init_init_options_impl_memory>
 800cc4a:	4953      	ldr	r1, [pc, #332]	@ (800cd98 <rmw_init+0x248>)
 800cc4c:	4853      	ldr	r0, [pc, #332]	@ (800cd9c <rmw_init+0x24c>)
 800cc4e:	2204      	movs	r2, #4
 800cc50:	f7fa fe0c 	bl	800786c <rmw_uxrce_init_wait_set_memory>
 800cc54:	4952      	ldr	r1, [pc, #328]	@ (800cda0 <rmw_init+0x250>)
 800cc56:	4853      	ldr	r0, [pc, #332]	@ (800cda4 <rmw_init+0x254>)
 800cc58:	2204      	movs	r2, #4
 800cc5a:	f7fa fe27 	bl	80078ac <rmw_uxrce_init_guard_condition_memory>
 800cc5e:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800cc60:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800cc62:	4642      	mov	r2, r8
 800cc64:	f000 fb08 	bl	800d278 <rmw_uxrce_transport_init>
 800cc68:	4607      	mov	r7, r0
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	d161      	bne.n	800cd32 <rmw_init+0x1e2>
 800cc6e:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800cc70:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800cc74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cc76:	4628      	mov	r0, r5
 800cc78:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800cc7c:	f7fc fa4c 	bl	8009118 <uxr_init_session>
 800cc80:	4628      	mov	r0, r5
 800cc82:	4949      	ldr	r1, [pc, #292]	@ (800cda8 <rmw_init+0x258>)
 800cc84:	4622      	mov	r2, r4
 800cc86:	f7fc fa6b 	bl	8009160 <uxr_set_topic_callback>
 800cc8a:	4628      	mov	r0, r5
 800cc8c:	4947      	ldr	r1, [pc, #284]	@ (800cdac <rmw_init+0x25c>)
 800cc8e:	463a      	mov	r2, r7
 800cc90:	f7fc fa62 	bl	8009158 <uxr_set_status_callback>
 800cc94:	4628      	mov	r0, r5
 800cc96:	4946      	ldr	r1, [pc, #280]	@ (800cdb0 <rmw_init+0x260>)
 800cc98:	463a      	mov	r2, r7
 800cc9a:	f7fc fa65 	bl	8009168 <uxr_set_request_callback>
 800cc9e:	4628      	mov	r0, r5
 800cca0:	4944      	ldr	r1, [pc, #272]	@ (800cdb4 <rmw_init+0x264>)
 800cca2:	463a      	mov	r2, r7
 800cca4:	f7fc fa64 	bl	8009170 <uxr_set_reply_callback>
 800cca8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ccac:	2304      	movs	r3, #4
 800ccae:	0092      	lsls	r2, r2, #2
 800ccb0:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	f7fc fa89 	bl	80091cc <uxr_create_input_reliable_stream>
 800ccba:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ccbe:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800ccc2:	2304      	movs	r3, #4
 800ccc4:	0092      	lsls	r2, r2, #2
 800ccc6:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800ccca:	4628      	mov	r0, r5
 800cccc:	f7fc fa66 	bl	800919c <uxr_create_output_reliable_stream>
 800ccd0:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	f7fc fa73 	bl	80091c0 <uxr_create_input_best_effort_stream>
 800ccda:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800ccde:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800cce2:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800cce6:	3114      	adds	r1, #20
 800cce8:	4628      	mov	r0, r5
 800ccea:	f7fc fa45 	bl	8009178 <uxr_create_output_best_effort_stream>
 800ccee:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	f7fc ff54 	bl	8009ba0 <uxr_create_session>
 800ccf8:	4605      	mov	r5, r0
 800ccfa:	b140      	cbz	r0, 800cd0e <rmw_init+0x1be>
 800ccfc:	4638      	mov	r0, r7
 800ccfe:	b003      	add	sp, #12
 800cd00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd04:	270b      	movs	r7, #11
 800cd06:	4638      	mov	r0, r7
 800cd08:	b003      	add	sp, #12
 800cd0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd0e:	4648      	mov	r0, r9
 800cd10:	f000 fd96 	bl	800d840 <uxr_close_custom_transport>
 800cd14:	4810      	ldr	r0, [pc, #64]	@ (800cd58 <rmw_init+0x208>)
 800cd16:	4621      	mov	r1, r4
 800cd18:	f7ff fe10 	bl	800c93c <put_memory>
 800cd1c:	66f5      	str	r5, [r6, #108]	@ 0x6c
 800cd1e:	2701      	movs	r7, #1
 800cd20:	4638      	mov	r0, r7
 800cd22:	b003      	add	sp, #12
 800cd24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd28:	270c      	movs	r7, #12
 800cd2a:	4638      	mov	r0, r7
 800cd2c:	b003      	add	sp, #12
 800cd2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd32:	4648      	mov	r0, r9
 800cd34:	f000 fd84 	bl	800d840 <uxr_close_custom_transport>
 800cd38:	4807      	ldr	r0, [pc, #28]	@ (800cd58 <rmw_init+0x208>)
 800cd3a:	4621      	mov	r1, r4
 800cd3c:	f7ff fdfe 	bl	800c93c <put_memory>
 800cd40:	4638      	mov	r0, r7
 800cd42:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 800cd46:	b003      	add	sp, #12
 800cd48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd4c:	08011b24 	.word	0x08011b24
 800cd50:	2000b450 	.word	0x2000b450
 800cd54:	2000c548 	.word	0x2000c548
 800cd58:	2000daf0 	.word	0x2000daf0
 800cd5c:	20009350 	.word	0x20009350
 800cd60:	2000c490 	.word	0x2000c490
 800cd64:	2000c534 	.word	0x2000c534
 800cd68:	2000b7c8 	.word	0x2000b7c8
 800cd6c:	2000bc00 	.word	0x2000bc00
 800cd70:	2000bc10 	.word	0x2000bc10
 800cd74:	2000c480 	.word	0x2000c480
 800cd78:	2000b6f0 	.word	0x2000b6f0
 800cd7c:	2000b7b8 	.word	0x2000b7b8
 800cd80:	2000b618 	.word	0x2000b618
 800cd84:	2000b6e0 	.word	0x2000b6e0
 800cd88:	2000b460 	.word	0x2000b460
 800cd8c:	2000b604 	.word	0x2000b604
 800cd90:	200092bc 	.word	0x200092bc
 800cd94:	20009340 	.word	0x20009340
 800cd98:	2000923c 	.word	0x2000923c
 800cd9c:	200092ac 	.word	0x200092ac
 800cda0:	200091ac 	.word	0x200091ac
 800cda4:	2000922c 	.word	0x2000922c
 800cda8:	0800f831 	.word	0x0800f831
 800cdac:	0800f829 	.word	0x0800f829
 800cdb0:	0800f8c9 	.word	0x0800f8c9
 800cdb4:	0800f965 	.word	0x0800f965

0800cdb8 <rmw_context_fini>:
 800cdb8:	4b17      	ldr	r3, [pc, #92]	@ (800ce18 <rmw_context_fini+0x60>)
 800cdba:	b570      	push	{r4, r5, r6, lr}
 800cdbc:	681c      	ldr	r4, [r3, #0]
 800cdbe:	4605      	mov	r5, r0
 800cdc0:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 800cdc2:	b33c      	cbz	r4, 800ce14 <rmw_context_fini+0x5c>
 800cdc4:	2600      	movs	r6, #0
 800cdc6:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 800cdca:	691a      	ldr	r2, [r3, #16]
 800cdcc:	4282      	cmp	r2, r0
 800cdce:	d018      	beq.n	800ce02 <rmw_context_fini+0x4a>
 800cdd0:	2c00      	cmp	r4, #0
 800cdd2:	d1f8      	bne.n	800cdc6 <rmw_context_fini+0xe>
 800cdd4:	b188      	cbz	r0, 800cdfa <rmw_context_fini+0x42>
 800cdd6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cdda:	789b      	ldrb	r3, [r3, #2]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	bf14      	ite	ne
 800cde0:	210a      	movne	r1, #10
 800cde2:	2100      	moveq	r1, #0
 800cde4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cde8:	f7fc feb2 	bl	8009b50 <uxr_delete_session_retries>
 800cdec:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 800cdee:	f7fa fd7d 	bl	80078ec <rmw_uxrce_fini_session_memory>
 800cdf2:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 800cdf4:	3010      	adds	r0, #16
 800cdf6:	f000 fd23 	bl	800d840 <uxr_close_custom_transport>
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	66eb      	str	r3, [r5, #108]	@ 0x6c
 800cdfe:	4630      	mov	r0, r6
 800ce00:	bd70      	pop	{r4, r5, r6, pc}
 800ce02:	f103 0018 	add.w	r0, r3, #24
 800ce06:	f000 f911 	bl	800d02c <rmw_destroy_node>
 800ce0a:	4606      	mov	r6, r0
 800ce0c:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 800ce0e:	2c00      	cmp	r4, #0
 800ce10:	d1d9      	bne.n	800cdc6 <rmw_context_fini+0xe>
 800ce12:	e7df      	b.n	800cdd4 <rmw_context_fini+0x1c>
 800ce14:	4626      	mov	r6, r4
 800ce16:	e7dd      	b.n	800cdd4 <rmw_context_fini+0x1c>
 800ce18:	2000c534 	.word	0x2000c534

0800ce1c <create_topic>:
 800ce1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce20:	4604      	mov	r4, r0
 800ce22:	b084      	sub	sp, #16
 800ce24:	4824      	ldr	r0, [pc, #144]	@ (800ceb8 <create_topic+0x9c>)
 800ce26:	460f      	mov	r7, r1
 800ce28:	4616      	mov	r6, r2
 800ce2a:	f7ff fd77 	bl	800c91c <get_memory>
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	d03c      	beq.n	800ceac <create_topic+0x90>
 800ce32:	6923      	ldr	r3, [r4, #16]
 800ce34:	6885      	ldr	r5, [r0, #8]
 800ce36:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 800cec0 <create_topic+0xa4>
 800ce3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce3e:	e9c5 6405 	strd	r6, r4, [r5, #20]
 800ce42:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 800ce46:	1c42      	adds	r2, r0, #1
 800ce48:	2102      	movs	r1, #2
 800ce4a:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 800ce4e:	f7fc f8a7 	bl	8008fa0 <uxr_object_id>
 800ce52:	223c      	movs	r2, #60	@ 0x3c
 800ce54:	6128      	str	r0, [r5, #16]
 800ce56:	4641      	mov	r1, r8
 800ce58:	4638      	mov	r0, r7
 800ce5a:	f7fa fe8d 	bl	8007b78 <generate_topic_name>
 800ce5e:	b310      	cbz	r0, 800cea6 <create_topic+0x8a>
 800ce60:	4f16      	ldr	r7, [pc, #88]	@ (800cebc <create_topic+0xa0>)
 800ce62:	4630      	mov	r0, r6
 800ce64:	2264      	movs	r2, #100	@ 0x64
 800ce66:	4639      	mov	r1, r7
 800ce68:	f7fa fe56 	bl	8007b18 <generate_type_name>
 800ce6c:	b1d8      	cbz	r0, 800cea6 <create_topic+0x8a>
 800ce6e:	6920      	ldr	r0, [r4, #16]
 800ce70:	2306      	movs	r3, #6
 800ce72:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800ce76:	f8cd 8000 	str.w	r8, [sp]
 800ce7a:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800ce7e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ce82:	6811      	ldr	r1, [r2, #0]
 800ce84:	6963      	ldr	r3, [r4, #20]
 800ce86:	692a      	ldr	r2, [r5, #16]
 800ce88:	f7fb ffc4 	bl	8008e14 <uxr_buffer_create_topic_bin>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	6920      	ldr	r0, [r4, #16]
 800ce90:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ce94:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ce98:	f7fa fe02 	bl	8007aa0 <run_xrce_session>
 800ce9c:	b118      	cbz	r0, 800cea6 <create_topic+0x8a>
 800ce9e:	4628      	mov	r0, r5
 800cea0:	b004      	add	sp, #16
 800cea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cea6:	4628      	mov	r0, r5
 800cea8:	f7fa fd96 	bl	80079d8 <rmw_uxrce_fini_topic_memory>
 800ceac:	2500      	movs	r5, #0
 800ceae:	4628      	mov	r0, r5
 800ceb0:	b004      	add	sp, #16
 800ceb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceb6:	bf00      	nop
 800ceb8:	2000b604 	.word	0x2000b604
 800cebc:	2000db1c 	.word	0x2000db1c
 800cec0:	2000db80 	.word	0x2000db80

0800cec4 <destroy_topic>:
 800cec4:	b538      	push	{r3, r4, r5, lr}
 800cec6:	6984      	ldr	r4, [r0, #24]
 800cec8:	b1d4      	cbz	r4, 800cf00 <destroy_topic+0x3c>
 800ceca:	4605      	mov	r5, r0
 800cecc:	6920      	ldr	r0, [r4, #16]
 800cece:	692a      	ldr	r2, [r5, #16]
 800ced0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ced4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ced8:	6819      	ldr	r1, [r3, #0]
 800ceda:	f7fb ff1f 	bl	8008d1c <uxr_buffer_delete_entity>
 800cede:	4602      	mov	r2, r0
 800cee0:	6920      	ldr	r0, [r4, #16]
 800cee2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800cee6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ceea:	f7fa fdd9 	bl	8007aa0 <run_xrce_session>
 800ceee:	f080 0401 	eor.w	r4, r0, #1
 800cef2:	b2e4      	uxtb	r4, r4
 800cef4:	4628      	mov	r0, r5
 800cef6:	0064      	lsls	r4, r4, #1
 800cef8:	f7fa fd6e 	bl	80079d8 <rmw_uxrce_fini_topic_memory>
 800cefc:	4620      	mov	r0, r4
 800cefe:	bd38      	pop	{r3, r4, r5, pc}
 800cf00:	2401      	movs	r4, #1
 800cf02:	4620      	mov	r0, r4
 800cf04:	bd38      	pop	{r3, r4, r5, pc}
 800cf06:	bf00      	nop

0800cf08 <create_node>:
 800cf08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf0c:	b083      	sub	sp, #12
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d063      	beq.n	800cfda <create_node+0xd2>
 800cf12:	4606      	mov	r6, r0
 800cf14:	4836      	ldr	r0, [pc, #216]	@ (800cff0 <create_node+0xe8>)
 800cf16:	460f      	mov	r7, r1
 800cf18:	4690      	mov	r8, r2
 800cf1a:	461d      	mov	r5, r3
 800cf1c:	f7ff fcfe 	bl	800c91c <get_memory>
 800cf20:	2800      	cmp	r0, #0
 800cf22:	d05a      	beq.n	800cfda <create_node+0xd2>
 800cf24:	6884      	ldr	r4, [r0, #8]
 800cf26:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800cf28:	6123      	str	r3, [r4, #16]
 800cf2a:	f7ff fd1b 	bl	800c964 <rmw_get_implementation_identifier>
 800cf2e:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800cf32:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800cf36:	f8c4 9020 	str.w	r9, [r4, #32]
 800cf3a:	4630      	mov	r0, r6
 800cf3c:	f7f3 f9b0 	bl	80002a0 <strlen>
 800cf40:	1c42      	adds	r2, r0, #1
 800cf42:	2a3c      	cmp	r2, #60	@ 0x3c
 800cf44:	f104 0518 	add.w	r5, r4, #24
 800cf48:	d844      	bhi.n	800cfd4 <create_node+0xcc>
 800cf4a:	4648      	mov	r0, r9
 800cf4c:	4631      	mov	r1, r6
 800cf4e:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800cf52:	f003 fa5e 	bl	8010412 <memcpy>
 800cf56:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800cf5a:	4638      	mov	r0, r7
 800cf5c:	f7f3 f9a0 	bl	80002a0 <strlen>
 800cf60:	1c42      	adds	r2, r0, #1
 800cf62:	2a3c      	cmp	r2, #60	@ 0x3c
 800cf64:	d836      	bhi.n	800cfd4 <create_node+0xcc>
 800cf66:	4639      	mov	r1, r7
 800cf68:	4648      	mov	r0, r9
 800cf6a:	f003 fa52 	bl	8010412 <memcpy>
 800cf6e:	6923      	ldr	r3, [r4, #16]
 800cf70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf74:	2101      	movs	r1, #1
 800cf76:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800cf7a:	1842      	adds	r2, r0, r1
 800cf7c:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800cf80:	f7fc f80e 	bl	8008fa0 <uxr_object_id>
 800cf84:	6160      	str	r0, [r4, #20]
 800cf86:	783b      	ldrb	r3, [r7, #0]
 800cf88:	2b2f      	cmp	r3, #47	@ 0x2f
 800cf8a:	d128      	bne.n	800cfde <create_node+0xd6>
 800cf8c:	787b      	ldrb	r3, [r7, #1]
 800cf8e:	bb33      	cbnz	r3, 800cfde <create_node+0xd6>
 800cf90:	4a18      	ldr	r2, [pc, #96]	@ (800cff4 <create_node+0xec>)
 800cf92:	4819      	ldr	r0, [pc, #100]	@ (800cff8 <create_node+0xf0>)
 800cf94:	4633      	mov	r3, r6
 800cf96:	213c      	movs	r1, #60	@ 0x3c
 800cf98:	f003 f8aa 	bl	80100f0 <sniprintf>
 800cf9c:	6920      	ldr	r0, [r4, #16]
 800cf9e:	4916      	ldr	r1, [pc, #88]	@ (800cff8 <create_node+0xf0>)
 800cfa0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800cfa4:	9100      	str	r1, [sp, #0]
 800cfa6:	2106      	movs	r1, #6
 800cfa8:	9101      	str	r1, [sp, #4]
 800cfaa:	6811      	ldr	r1, [r2, #0]
 800cfac:	6962      	ldr	r2, [r4, #20]
 800cfae:	fa1f f388 	uxth.w	r3, r8
 800cfb2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cfb6:	f7fb fefb 	bl	8008db0 <uxr_buffer_create_participant_bin>
 800cfba:	4602      	mov	r2, r0
 800cfbc:	6920      	ldr	r0, [r4, #16]
 800cfbe:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800cfc2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800cfc6:	f7fa fd6b 	bl	8007aa0 <run_xrce_session>
 800cfca:	b118      	cbz	r0, 800cfd4 <create_node+0xcc>
 800cfcc:	4628      	mov	r0, r5
 800cfce:	b003      	add	sp, #12
 800cfd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	f7fa fc8f 	bl	80078f8 <rmw_uxrce_fini_node_memory>
 800cfda:	2500      	movs	r5, #0
 800cfdc:	e7f6      	b.n	800cfcc <create_node+0xc4>
 800cfde:	4a07      	ldr	r2, [pc, #28]	@ (800cffc <create_node+0xf4>)
 800cfe0:	9600      	str	r6, [sp, #0]
 800cfe2:	463b      	mov	r3, r7
 800cfe4:	213c      	movs	r1, #60	@ 0x3c
 800cfe6:	4804      	ldr	r0, [pc, #16]	@ (800cff8 <create_node+0xf0>)
 800cfe8:	f003 f882 	bl	80100f0 <sniprintf>
 800cfec:	e7d6      	b.n	800cf9c <create_node+0x94>
 800cfee:	bf00      	nop
 800cff0:	2000c534 	.word	0x2000c534
 800cff4:	080113d4 	.word	0x080113d4
 800cff8:	2000dbbc 	.word	0x2000dbbc
 800cffc:	08011504 	.word	0x08011504

0800d000 <rmw_create_node>:
 800d000:	b191      	cbz	r1, 800d028 <rmw_create_node+0x28>
 800d002:	b410      	push	{r4}
 800d004:	4614      	mov	r4, r2
 800d006:	780a      	ldrb	r2, [r1, #0]
 800d008:	4603      	mov	r3, r0
 800d00a:	4608      	mov	r0, r1
 800d00c:	b142      	cbz	r2, 800d020 <rmw_create_node+0x20>
 800d00e:	b13c      	cbz	r4, 800d020 <rmw_create_node+0x20>
 800d010:	7822      	ldrb	r2, [r4, #0]
 800d012:	b12a      	cbz	r2, 800d020 <rmw_create_node+0x20>
 800d014:	4621      	mov	r1, r4
 800d016:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800d018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d01c:	f7ff bf74 	b.w	800cf08 <create_node>
 800d020:	2000      	movs	r0, #0
 800d022:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d026:	4770      	bx	lr
 800d028:	2000      	movs	r0, #0
 800d02a:	4770      	bx	lr

0800d02c <rmw_destroy_node>:
 800d02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d02e:	b328      	cbz	r0, 800d07c <rmw_destroy_node+0x50>
 800d030:	4607      	mov	r7, r0
 800d032:	6800      	ldr	r0, [r0, #0]
 800d034:	b120      	cbz	r0, 800d040 <rmw_destroy_node+0x14>
 800d036:	4b36      	ldr	r3, [pc, #216]	@ (800d110 <rmw_destroy_node+0xe4>)
 800d038:	6819      	ldr	r1, [r3, #0]
 800d03a:	f7f3 f8d1 	bl	80001e0 <strcmp>
 800d03e:	b9e8      	cbnz	r0, 800d07c <rmw_destroy_node+0x50>
 800d040:	687d      	ldr	r5, [r7, #4]
 800d042:	b1dd      	cbz	r5, 800d07c <rmw_destroy_node+0x50>
 800d044:	4b33      	ldr	r3, [pc, #204]	@ (800d114 <rmw_destroy_node+0xe8>)
 800d046:	681c      	ldr	r4, [r3, #0]
 800d048:	2c00      	cmp	r4, #0
 800d04a:	d05f      	beq.n	800d10c <rmw_destroy_node+0xe0>
 800d04c:	2600      	movs	r6, #0
 800d04e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d052:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800d056:	429d      	cmp	r5, r3
 800d058:	d013      	beq.n	800d082 <rmw_destroy_node+0x56>
 800d05a:	2c00      	cmp	r4, #0
 800d05c:	d1f7      	bne.n	800d04e <rmw_destroy_node+0x22>
 800d05e:	4b2e      	ldr	r3, [pc, #184]	@ (800d118 <rmw_destroy_node+0xec>)
 800d060:	681c      	ldr	r4, [r3, #0]
 800d062:	b1c4      	cbz	r4, 800d096 <rmw_destroy_node+0x6a>
 800d064:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d068:	6a0b      	ldr	r3, [r1, #32]
 800d06a:	429d      	cmp	r5, r3
 800d06c:	d1f9      	bne.n	800d062 <rmw_destroy_node+0x36>
 800d06e:	317c      	adds	r1, #124	@ 0x7c
 800d070:	4638      	mov	r0, r7
 800d072:	f000 f8a1 	bl	800d1b8 <rmw_destroy_subscription>
 800d076:	2801      	cmp	r0, #1
 800d078:	4606      	mov	r6, r0
 800d07a:	d1f2      	bne.n	800d062 <rmw_destroy_node+0x36>
 800d07c:	2601      	movs	r6, #1
 800d07e:	4630      	mov	r0, r6
 800d080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d082:	3184      	adds	r1, #132	@ 0x84
 800d084:	4638      	mov	r0, r7
 800d086:	f7fa fa7f 	bl	8007588 <rmw_destroy_publisher>
 800d08a:	2801      	cmp	r0, #1
 800d08c:	4606      	mov	r6, r0
 800d08e:	d0f5      	beq.n	800d07c <rmw_destroy_node+0x50>
 800d090:	2c00      	cmp	r4, #0
 800d092:	d1dc      	bne.n	800d04e <rmw_destroy_node+0x22>
 800d094:	e7e3      	b.n	800d05e <rmw_destroy_node+0x32>
 800d096:	4b21      	ldr	r3, [pc, #132]	@ (800d11c <rmw_destroy_node+0xf0>)
 800d098:	681c      	ldr	r4, [r3, #0]
 800d09a:	b16c      	cbz	r4, 800d0b8 <rmw_destroy_node+0x8c>
 800d09c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d0a0:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800d0a2:	429d      	cmp	r5, r3
 800d0a4:	d1f9      	bne.n	800d09a <rmw_destroy_node+0x6e>
 800d0a6:	317c      	adds	r1, #124	@ 0x7c
 800d0a8:	4638      	mov	r0, r7
 800d0aa:	f000 f841 	bl	800d130 <rmw_destroy_service>
 800d0ae:	2801      	cmp	r0, #1
 800d0b0:	4606      	mov	r6, r0
 800d0b2:	d0e3      	beq.n	800d07c <rmw_destroy_node+0x50>
 800d0b4:	2c00      	cmp	r4, #0
 800d0b6:	d1f1      	bne.n	800d09c <rmw_destroy_node+0x70>
 800d0b8:	4b19      	ldr	r3, [pc, #100]	@ (800d120 <rmw_destroy_node+0xf4>)
 800d0ba:	681c      	ldr	r4, [r3, #0]
 800d0bc:	b16c      	cbz	r4, 800d0da <rmw_destroy_node+0xae>
 800d0be:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d0c2:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800d0c4:	429d      	cmp	r5, r3
 800d0c6:	d1f9      	bne.n	800d0bc <rmw_destroy_node+0x90>
 800d0c8:	317c      	adds	r1, #124	@ 0x7c
 800d0ca:	4638      	mov	r0, r7
 800d0cc:	f002 fc94 	bl	800f9f8 <rmw_destroy_client>
 800d0d0:	2801      	cmp	r0, #1
 800d0d2:	4606      	mov	r6, r0
 800d0d4:	d0d2      	beq.n	800d07c <rmw_destroy_node+0x50>
 800d0d6:	2c00      	cmp	r4, #0
 800d0d8:	d1f1      	bne.n	800d0be <rmw_destroy_node+0x92>
 800d0da:	6928      	ldr	r0, [r5, #16]
 800d0dc:	696a      	ldr	r2, [r5, #20]
 800d0de:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d0e2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d0e6:	6819      	ldr	r1, [r3, #0]
 800d0e8:	f7fb fe18 	bl	8008d1c <uxr_buffer_delete_entity>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	6928      	ldr	r0, [r5, #16]
 800d0f0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d0f4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d0f8:	f7fa fcd2 	bl	8007aa0 <run_xrce_session>
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	bf08      	it	eq
 800d100:	2602      	moveq	r6, #2
 800d102:	4638      	mov	r0, r7
 800d104:	f7fa fbf8 	bl	80078f8 <rmw_uxrce_fini_node_memory>
 800d108:	4630      	mov	r0, r6
 800d10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d10c:	4626      	mov	r6, r4
 800d10e:	e7a6      	b.n	800d05e <rmw_destroy_node+0x32>
 800d110:	08011b24 	.word	0x08011b24
 800d114:	2000c480 	.word	0x2000c480
 800d118:	2000bc00 	.word	0x2000bc00
 800d11c:	2000b7b8 	.word	0x2000b7b8
 800d120:	2000b6e0 	.word	0x2000b6e0

0800d124 <rmw_node_get_graph_guard_condition>:
 800d124:	6843      	ldr	r3, [r0, #4]
 800d126:	6918      	ldr	r0, [r3, #16]
 800d128:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop

0800d130 <rmw_destroy_service>:
 800d130:	b570      	push	{r4, r5, r6, lr}
 800d132:	b128      	cbz	r0, 800d140 <rmw_destroy_service+0x10>
 800d134:	4604      	mov	r4, r0
 800d136:	6800      	ldr	r0, [r0, #0]
 800d138:	460d      	mov	r5, r1
 800d13a:	f7fa fd37 	bl	8007bac <is_uxrce_rmw_identifier_valid>
 800d13e:	b910      	cbnz	r0, 800d146 <rmw_destroy_service+0x16>
 800d140:	2401      	movs	r4, #1
 800d142:	4620      	mov	r0, r4
 800d144:	bd70      	pop	{r4, r5, r6, pc}
 800d146:	6863      	ldr	r3, [r4, #4]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d0f9      	beq.n	800d140 <rmw_destroy_service+0x10>
 800d14c:	2d00      	cmp	r5, #0
 800d14e:	d0f7      	beq.n	800d140 <rmw_destroy_service+0x10>
 800d150:	6828      	ldr	r0, [r5, #0]
 800d152:	f7fa fd2b 	bl	8007bac <is_uxrce_rmw_identifier_valid>
 800d156:	2800      	cmp	r0, #0
 800d158:	d0f2      	beq.n	800d140 <rmw_destroy_service+0x10>
 800d15a:	686e      	ldr	r6, [r5, #4]
 800d15c:	2e00      	cmp	r6, #0
 800d15e:	d0ef      	beq.n	800d140 <rmw_destroy_service+0x10>
 800d160:	6864      	ldr	r4, [r4, #4]
 800d162:	6932      	ldr	r2, [r6, #16]
 800d164:	6920      	ldr	r0, [r4, #16]
 800d166:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d16a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d16e:	6819      	ldr	r1, [r3, #0]
 800d170:	f001 f898 	bl	800e2a4 <uxr_buffer_cancel_data>
 800d174:	4602      	mov	r2, r0
 800d176:	6920      	ldr	r0, [r4, #16]
 800d178:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d17c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d180:	f7fa fc8e 	bl	8007aa0 <run_xrce_session>
 800d184:	6920      	ldr	r0, [r4, #16]
 800d186:	6932      	ldr	r2, [r6, #16]
 800d188:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d18c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d190:	6819      	ldr	r1, [r3, #0]
 800d192:	f7fb fdc3 	bl	8008d1c <uxr_buffer_delete_entity>
 800d196:	4602      	mov	r2, r0
 800d198:	6920      	ldr	r0, [r4, #16]
 800d19a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d19e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d1a2:	f7fa fc7d 	bl	8007aa0 <run_xrce_session>
 800d1a6:	f080 0401 	eor.w	r4, r0, #1
 800d1aa:	b2e4      	uxtb	r4, r4
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	0064      	lsls	r4, r4, #1
 800d1b0:	f7fa fbe6 	bl	8007980 <rmw_uxrce_fini_service_memory>
 800d1b4:	e7c5      	b.n	800d142 <rmw_destroy_service+0x12>
 800d1b6:	bf00      	nop

0800d1b8 <rmw_destroy_subscription>:
 800d1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1bc:	b128      	cbz	r0, 800d1ca <rmw_destroy_subscription+0x12>
 800d1be:	4604      	mov	r4, r0
 800d1c0:	6800      	ldr	r0, [r0, #0]
 800d1c2:	460d      	mov	r5, r1
 800d1c4:	f7fa fcf2 	bl	8007bac <is_uxrce_rmw_identifier_valid>
 800d1c8:	b918      	cbnz	r0, 800d1d2 <rmw_destroy_subscription+0x1a>
 800d1ca:	2401      	movs	r4, #1
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1d2:	6863      	ldr	r3, [r4, #4]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d0f8      	beq.n	800d1ca <rmw_destroy_subscription+0x12>
 800d1d8:	2d00      	cmp	r5, #0
 800d1da:	d0f6      	beq.n	800d1ca <rmw_destroy_subscription+0x12>
 800d1dc:	6828      	ldr	r0, [r5, #0]
 800d1de:	f7fa fce5 	bl	8007bac <is_uxrce_rmw_identifier_valid>
 800d1e2:	2800      	cmp	r0, #0
 800d1e4:	d0f1      	beq.n	800d1ca <rmw_destroy_subscription+0x12>
 800d1e6:	686c      	ldr	r4, [r5, #4]
 800d1e8:	2c00      	cmp	r4, #0
 800d1ea:	d0ee      	beq.n	800d1ca <rmw_destroy_subscription+0x12>
 800d1ec:	6a26      	ldr	r6, [r4, #32]
 800d1ee:	6962      	ldr	r2, [r4, #20]
 800d1f0:	6930      	ldr	r0, [r6, #16]
 800d1f2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d1f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d1fa:	6819      	ldr	r1, [r3, #0]
 800d1fc:	f001 f852 	bl	800e2a4 <uxr_buffer_cancel_data>
 800d200:	4602      	mov	r2, r0
 800d202:	6930      	ldr	r0, [r6, #16]
 800d204:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d208:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d20c:	f7fa fc48 	bl	8007aa0 <run_xrce_session>
 800d210:	69e0      	ldr	r0, [r4, #28]
 800d212:	f7ff fe57 	bl	800cec4 <destroy_topic>
 800d216:	6a23      	ldr	r3, [r4, #32]
 800d218:	6962      	ldr	r2, [r4, #20]
 800d21a:	6918      	ldr	r0, [r3, #16]
 800d21c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d220:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d224:	6819      	ldr	r1, [r3, #0]
 800d226:	f7fb fd79 	bl	8008d1c <uxr_buffer_delete_entity>
 800d22a:	6a23      	ldr	r3, [r4, #32]
 800d22c:	6922      	ldr	r2, [r4, #16]
 800d22e:	4680      	mov	r8, r0
 800d230:	6918      	ldr	r0, [r3, #16]
 800d232:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d236:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d23a:	6819      	ldr	r1, [r3, #0]
 800d23c:	f7fb fd6e 	bl	8008d1c <uxr_buffer_delete_entity>
 800d240:	4607      	mov	r7, r0
 800d242:	6930      	ldr	r0, [r6, #16]
 800d244:	4642      	mov	r2, r8
 800d246:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d24a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d24e:	f7fa fc27 	bl	8007aa0 <run_xrce_session>
 800d252:	4604      	mov	r4, r0
 800d254:	6930      	ldr	r0, [r6, #16]
 800d256:	463a      	mov	r2, r7
 800d258:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d25c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d260:	f7fa fc1e 	bl	8007aa0 <run_xrce_session>
 800d264:	4004      	ands	r4, r0
 800d266:	f084 0401 	eor.w	r4, r4, #1
 800d26a:	b2e4      	uxtb	r4, r4
 800d26c:	4628      	mov	r0, r5
 800d26e:	0064      	lsls	r4, r4, #1
 800d270:	f7fa fb70 	bl	8007954 <rmw_uxrce_fini_subscription_memory>
 800d274:	e7aa      	b.n	800d1cc <rmw_destroy_subscription+0x14>
 800d276:	bf00      	nop

0800d278 <rmw_uxrce_transport_init>:
 800d278:	b508      	push	{r3, lr}
 800d27a:	b108      	cbz	r0, 800d280 <rmw_uxrce_transport_init+0x8>
 800d27c:	f100 0210 	add.w	r2, r0, #16
 800d280:	b139      	cbz	r1, 800d292 <rmw_uxrce_transport_init+0x1a>
 800d282:	6949      	ldr	r1, [r1, #20]
 800d284:	4610      	mov	r0, r2
 800d286:	f000 faa7 	bl	800d7d8 <uxr_init_custom_transport>
 800d28a:	f080 0001 	eor.w	r0, r0, #1
 800d28e:	b2c0      	uxtb	r0, r0
 800d290:	bd08      	pop	{r3, pc}
 800d292:	4b04      	ldr	r3, [pc, #16]	@ (800d2a4 <rmw_uxrce_transport_init+0x2c>)
 800d294:	4610      	mov	r0, r2
 800d296:	6859      	ldr	r1, [r3, #4]
 800d298:	f000 fa9e 	bl	800d7d8 <uxr_init_custom_transport>
 800d29c:	f080 0001 	eor.w	r0, r0, #1
 800d2a0:	b2c0      	uxtb	r0, r0
 800d2a2:	bd08      	pop	{r3, pc}
 800d2a4:	20009190 	.word	0x20009190

0800d2a8 <rmw_uros_epoch_nanos>:
 800d2a8:	4b05      	ldr	r3, [pc, #20]	@ (800d2c0 <rmw_uros_epoch_nanos+0x18>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	b123      	cbz	r3, 800d2b8 <rmw_uros_epoch_nanos+0x10>
 800d2ae:	6898      	ldr	r0, [r3, #8]
 800d2b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d2b4:	f7fb bf96 	b.w	80091e4 <uxr_epoch_nanos>
 800d2b8:	2000      	movs	r0, #0
 800d2ba:	2100      	movs	r1, #0
 800d2bc:	4770      	bx	lr
 800d2be:	bf00      	nop
 800d2c0:	2000daf0 	.word	0x2000daf0

0800d2c4 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800d2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2c8:	6805      	ldr	r5, [r0, #0]
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	4628      	mov	r0, r5
 800d2ce:	460e      	mov	r6, r1
 800d2d0:	f7f2 ff86 	bl	80001e0 <strcmp>
 800d2d4:	b308      	cbz	r0, 800d31a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800d2d6:	4b12      	ldr	r3, [pc, #72]	@ (800d320 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 800d2d8:	4628      	mov	r0, r5
 800d2da:	6819      	ldr	r1, [r3, #0]
 800d2dc:	f7f2 ff80 	bl	80001e0 <strcmp>
 800d2e0:	4605      	mov	r5, r0
 800d2e2:	b980      	cbnz	r0, 800d306 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 800d2e4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800d2e8:	f8d8 4000 	ldr.w	r4, [r8]
 800d2ec:	b1ac      	cbz	r4, 800d31a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800d2ee:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800d2f2:	3f04      	subs	r7, #4
 800d2f4:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800d2f8:	4631      	mov	r1, r6
 800d2fa:	f7f2 ff71 	bl	80001e0 <strcmp>
 800d2fe:	b128      	cbz	r0, 800d30c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 800d300:	3501      	adds	r5, #1
 800d302:	42a5      	cmp	r5, r4
 800d304:	d1f6      	bne.n	800d2f4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 800d306:	2000      	movs	r0, #0
 800d308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d30c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d310:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d318:	4718      	bx	r3
 800d31a:	4620      	mov	r0, r4
 800d31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d320:	200000d0 	.word	0x200000d0

0800d324 <std_msgs__msg__Int32__get_type_hash>:
 800d324:	4800      	ldr	r0, [pc, #0]	@ (800d328 <std_msgs__msg__Int32__get_type_hash+0x4>)
 800d326:	4770      	bx	lr
 800d328:	200000d8 	.word	0x200000d8

0800d32c <std_msgs__msg__Int32__get_type_description>:
 800d32c:	4b03      	ldr	r3, [pc, #12]	@ (800d33c <std_msgs__msg__Int32__get_type_description+0x10>)
 800d32e:	781a      	ldrb	r2, [r3, #0]
 800d330:	b90a      	cbnz	r2, 800d336 <std_msgs__msg__Int32__get_type_description+0xa>
 800d332:	2201      	movs	r2, #1
 800d334:	701a      	strb	r2, [r3, #0]
 800d336:	4802      	ldr	r0, [pc, #8]	@ (800d340 <std_msgs__msg__Int32__get_type_description+0x14>)
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	2000dc1d 	.word	0x2000dc1d
 800d340:	08011b58 	.word	0x08011b58

0800d344 <std_msgs__msg__Int32__get_type_description_sources>:
 800d344:	4b09      	ldr	r3, [pc, #36]	@ (800d36c <std_msgs__msg__Int32__get_type_description_sources+0x28>)
 800d346:	781a      	ldrb	r2, [r3, #0]
 800d348:	b96a      	cbnz	r2, 800d366 <std_msgs__msg__Int32__get_type_description_sources+0x22>
 800d34a:	b430      	push	{r4, r5}
 800d34c:	4d08      	ldr	r5, [pc, #32]	@ (800d370 <std_msgs__msg__Int32__get_type_description_sources+0x2c>)
 800d34e:	4c09      	ldr	r4, [pc, #36]	@ (800d374 <std_msgs__msg__Int32__get_type_description_sources+0x30>)
 800d350:	2201      	movs	r2, #1
 800d352:	701a      	strb	r2, [r3, #0]
 800d354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d35a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d35c:	682b      	ldr	r3, [r5, #0]
 800d35e:	4806      	ldr	r0, [pc, #24]	@ (800d378 <std_msgs__msg__Int32__get_type_description_sources+0x34>)
 800d360:	6023      	str	r3, [r4, #0]
 800d362:	bc30      	pop	{r4, r5}
 800d364:	4770      	bx	lr
 800d366:	4804      	ldr	r0, [pc, #16]	@ (800d378 <std_msgs__msg__Int32__get_type_description_sources+0x34>)
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop
 800d36c:	2000dc1c 	.word	0x2000dc1c
 800d370:	08011b34 	.word	0x08011b34
 800d374:	2000dbf8 	.word	0x2000dbf8
 800d378:	08011b28 	.word	0x08011b28

0800d37c <std_msgs__msg__Int32__init>:
 800d37c:	3800      	subs	r0, #0
 800d37e:	bf18      	it	ne
 800d380:	2001      	movne	r0, #1
 800d382:	4770      	bx	lr

0800d384 <std_msgs__msg__Int32__fini>:
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop

0800d388 <ucdr_serialize_endian_array_char>:
 800d388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d38c:	4619      	mov	r1, r3
 800d38e:	461f      	mov	r7, r3
 800d390:	4605      	mov	r5, r0
 800d392:	4690      	mov	r8, r2
 800d394:	f7fb fbfe 	bl	8008b94 <ucdr_check_buffer_available_for>
 800d398:	b9e0      	cbnz	r0, 800d3d4 <ucdr_serialize_endian_array_char+0x4c>
 800d39a:	463e      	mov	r6, r7
 800d39c:	e009      	b.n	800d3b2 <ucdr_serialize_endian_array_char+0x2a>
 800d39e:	68a8      	ldr	r0, [r5, #8]
 800d3a0:	f003 f837 	bl	8010412 <memcpy>
 800d3a4:	68ab      	ldr	r3, [r5, #8]
 800d3a6:	6928      	ldr	r0, [r5, #16]
 800d3a8:	4423      	add	r3, r4
 800d3aa:	4420      	add	r0, r4
 800d3ac:	1b36      	subs	r6, r6, r4
 800d3ae:	60ab      	str	r3, [r5, #8]
 800d3b0:	6128      	str	r0, [r5, #16]
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	4631      	mov	r1, r6
 800d3b6:	4628      	mov	r0, r5
 800d3b8:	f7fb fc74 	bl	8008ca4 <ucdr_check_final_buffer_behavior_array>
 800d3bc:	1bb9      	subs	r1, r7, r6
 800d3be:	4604      	mov	r4, r0
 800d3c0:	4602      	mov	r2, r0
 800d3c2:	4441      	add	r1, r8
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	d1ea      	bne.n	800d39e <ucdr_serialize_endian_array_char+0x16>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	7da8      	ldrb	r0, [r5, #22]
 800d3cc:	756b      	strb	r3, [r5, #21]
 800d3ce:	4058      	eors	r0, r3
 800d3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3d4:	463a      	mov	r2, r7
 800d3d6:	68a8      	ldr	r0, [r5, #8]
 800d3d8:	4641      	mov	r1, r8
 800d3da:	f003 f81a 	bl	8010412 <memcpy>
 800d3de:	68aa      	ldr	r2, [r5, #8]
 800d3e0:	692b      	ldr	r3, [r5, #16]
 800d3e2:	443a      	add	r2, r7
 800d3e4:	443b      	add	r3, r7
 800d3e6:	60aa      	str	r2, [r5, #8]
 800d3e8:	612b      	str	r3, [r5, #16]
 800d3ea:	e7ed      	b.n	800d3c8 <ucdr_serialize_endian_array_char+0x40>

0800d3ec <ucdr_deserialize_endian_array_char>:
 800d3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	461f      	mov	r7, r3
 800d3f4:	4605      	mov	r5, r0
 800d3f6:	4690      	mov	r8, r2
 800d3f8:	f7fb fbcc 	bl	8008b94 <ucdr_check_buffer_available_for>
 800d3fc:	b9e0      	cbnz	r0, 800d438 <ucdr_deserialize_endian_array_char+0x4c>
 800d3fe:	463e      	mov	r6, r7
 800d400:	e009      	b.n	800d416 <ucdr_deserialize_endian_array_char+0x2a>
 800d402:	68a9      	ldr	r1, [r5, #8]
 800d404:	f003 f805 	bl	8010412 <memcpy>
 800d408:	68aa      	ldr	r2, [r5, #8]
 800d40a:	692b      	ldr	r3, [r5, #16]
 800d40c:	4422      	add	r2, r4
 800d40e:	4423      	add	r3, r4
 800d410:	1b36      	subs	r6, r6, r4
 800d412:	60aa      	str	r2, [r5, #8]
 800d414:	612b      	str	r3, [r5, #16]
 800d416:	2201      	movs	r2, #1
 800d418:	4631      	mov	r1, r6
 800d41a:	4628      	mov	r0, r5
 800d41c:	f7fb fc42 	bl	8008ca4 <ucdr_check_final_buffer_behavior_array>
 800d420:	4604      	mov	r4, r0
 800d422:	1bb8      	subs	r0, r7, r6
 800d424:	4622      	mov	r2, r4
 800d426:	4440      	add	r0, r8
 800d428:	2c00      	cmp	r4, #0
 800d42a:	d1ea      	bne.n	800d402 <ucdr_deserialize_endian_array_char+0x16>
 800d42c:	2301      	movs	r3, #1
 800d42e:	7da8      	ldrb	r0, [r5, #22]
 800d430:	756b      	strb	r3, [r5, #21]
 800d432:	4058      	eors	r0, r3
 800d434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d438:	463a      	mov	r2, r7
 800d43a:	68a9      	ldr	r1, [r5, #8]
 800d43c:	4640      	mov	r0, r8
 800d43e:	f002 ffe8 	bl	8010412 <memcpy>
 800d442:	68aa      	ldr	r2, [r5, #8]
 800d444:	692b      	ldr	r3, [r5, #16]
 800d446:	443a      	add	r2, r7
 800d448:	443b      	add	r3, r7
 800d44a:	60aa      	str	r2, [r5, #8]
 800d44c:	612b      	str	r3, [r5, #16]
 800d44e:	e7ed      	b.n	800d42c <ucdr_deserialize_endian_array_char+0x40>

0800d450 <ucdr_serialize_array_uint8_t>:
 800d450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d454:	4688      	mov	r8, r1
 800d456:	4611      	mov	r1, r2
 800d458:	4617      	mov	r7, r2
 800d45a:	4605      	mov	r5, r0
 800d45c:	f7fb fb9a 	bl	8008b94 <ucdr_check_buffer_available_for>
 800d460:	b9e0      	cbnz	r0, 800d49c <ucdr_serialize_array_uint8_t+0x4c>
 800d462:	463e      	mov	r6, r7
 800d464:	e009      	b.n	800d47a <ucdr_serialize_array_uint8_t+0x2a>
 800d466:	68a8      	ldr	r0, [r5, #8]
 800d468:	f002 ffd3 	bl	8010412 <memcpy>
 800d46c:	68aa      	ldr	r2, [r5, #8]
 800d46e:	692b      	ldr	r3, [r5, #16]
 800d470:	4422      	add	r2, r4
 800d472:	4423      	add	r3, r4
 800d474:	1b36      	subs	r6, r6, r4
 800d476:	60aa      	str	r2, [r5, #8]
 800d478:	612b      	str	r3, [r5, #16]
 800d47a:	2201      	movs	r2, #1
 800d47c:	4631      	mov	r1, r6
 800d47e:	4628      	mov	r0, r5
 800d480:	f7fb fc10 	bl	8008ca4 <ucdr_check_final_buffer_behavior_array>
 800d484:	1bb9      	subs	r1, r7, r6
 800d486:	4604      	mov	r4, r0
 800d488:	4602      	mov	r2, r0
 800d48a:	4441      	add	r1, r8
 800d48c:	2800      	cmp	r0, #0
 800d48e:	d1ea      	bne.n	800d466 <ucdr_serialize_array_uint8_t+0x16>
 800d490:	2301      	movs	r3, #1
 800d492:	7da8      	ldrb	r0, [r5, #22]
 800d494:	756b      	strb	r3, [r5, #21]
 800d496:	4058      	eors	r0, r3
 800d498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d49c:	463a      	mov	r2, r7
 800d49e:	68a8      	ldr	r0, [r5, #8]
 800d4a0:	4641      	mov	r1, r8
 800d4a2:	f002 ffb6 	bl	8010412 <memcpy>
 800d4a6:	68aa      	ldr	r2, [r5, #8]
 800d4a8:	692b      	ldr	r3, [r5, #16]
 800d4aa:	443a      	add	r2, r7
 800d4ac:	443b      	add	r3, r7
 800d4ae:	60aa      	str	r2, [r5, #8]
 800d4b0:	612b      	str	r3, [r5, #16]
 800d4b2:	e7ed      	b.n	800d490 <ucdr_serialize_array_uint8_t+0x40>

0800d4b4 <ucdr_serialize_endian_array_uint8_t>:
 800d4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	461f      	mov	r7, r3
 800d4bc:	4605      	mov	r5, r0
 800d4be:	4690      	mov	r8, r2
 800d4c0:	f7fb fb68 	bl	8008b94 <ucdr_check_buffer_available_for>
 800d4c4:	b9e0      	cbnz	r0, 800d500 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800d4c6:	463e      	mov	r6, r7
 800d4c8:	e009      	b.n	800d4de <ucdr_serialize_endian_array_uint8_t+0x2a>
 800d4ca:	68a8      	ldr	r0, [r5, #8]
 800d4cc:	f002 ffa1 	bl	8010412 <memcpy>
 800d4d0:	68ab      	ldr	r3, [r5, #8]
 800d4d2:	6928      	ldr	r0, [r5, #16]
 800d4d4:	4423      	add	r3, r4
 800d4d6:	4420      	add	r0, r4
 800d4d8:	1b36      	subs	r6, r6, r4
 800d4da:	60ab      	str	r3, [r5, #8]
 800d4dc:	6128      	str	r0, [r5, #16]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	4631      	mov	r1, r6
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	f7fb fbde 	bl	8008ca4 <ucdr_check_final_buffer_behavior_array>
 800d4e8:	1bb9      	subs	r1, r7, r6
 800d4ea:	4604      	mov	r4, r0
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	4441      	add	r1, r8
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	d1ea      	bne.n	800d4ca <ucdr_serialize_endian_array_uint8_t+0x16>
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	7da8      	ldrb	r0, [r5, #22]
 800d4f8:	756b      	strb	r3, [r5, #21]
 800d4fa:	4058      	eors	r0, r3
 800d4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d500:	463a      	mov	r2, r7
 800d502:	68a8      	ldr	r0, [r5, #8]
 800d504:	4641      	mov	r1, r8
 800d506:	f002 ff84 	bl	8010412 <memcpy>
 800d50a:	68aa      	ldr	r2, [r5, #8]
 800d50c:	692b      	ldr	r3, [r5, #16]
 800d50e:	443a      	add	r2, r7
 800d510:	443b      	add	r3, r7
 800d512:	60aa      	str	r2, [r5, #8]
 800d514:	612b      	str	r3, [r5, #16]
 800d516:	e7ed      	b.n	800d4f4 <ucdr_serialize_endian_array_uint8_t+0x40>

0800d518 <ucdr_deserialize_array_uint8_t>:
 800d518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d51c:	4688      	mov	r8, r1
 800d51e:	4611      	mov	r1, r2
 800d520:	4617      	mov	r7, r2
 800d522:	4605      	mov	r5, r0
 800d524:	f7fb fb36 	bl	8008b94 <ucdr_check_buffer_available_for>
 800d528:	b9e0      	cbnz	r0, 800d564 <ucdr_deserialize_array_uint8_t+0x4c>
 800d52a:	463e      	mov	r6, r7
 800d52c:	e009      	b.n	800d542 <ucdr_deserialize_array_uint8_t+0x2a>
 800d52e:	68a9      	ldr	r1, [r5, #8]
 800d530:	f002 ff6f 	bl	8010412 <memcpy>
 800d534:	68aa      	ldr	r2, [r5, #8]
 800d536:	692b      	ldr	r3, [r5, #16]
 800d538:	4422      	add	r2, r4
 800d53a:	4423      	add	r3, r4
 800d53c:	1b36      	subs	r6, r6, r4
 800d53e:	60aa      	str	r2, [r5, #8]
 800d540:	612b      	str	r3, [r5, #16]
 800d542:	2201      	movs	r2, #1
 800d544:	4631      	mov	r1, r6
 800d546:	4628      	mov	r0, r5
 800d548:	f7fb fbac 	bl	8008ca4 <ucdr_check_final_buffer_behavior_array>
 800d54c:	4604      	mov	r4, r0
 800d54e:	1bb8      	subs	r0, r7, r6
 800d550:	4622      	mov	r2, r4
 800d552:	4440      	add	r0, r8
 800d554:	2c00      	cmp	r4, #0
 800d556:	d1ea      	bne.n	800d52e <ucdr_deserialize_array_uint8_t+0x16>
 800d558:	2301      	movs	r3, #1
 800d55a:	7da8      	ldrb	r0, [r5, #22]
 800d55c:	756b      	strb	r3, [r5, #21]
 800d55e:	4058      	eors	r0, r3
 800d560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d564:	463a      	mov	r2, r7
 800d566:	68a9      	ldr	r1, [r5, #8]
 800d568:	4640      	mov	r0, r8
 800d56a:	f002 ff52 	bl	8010412 <memcpy>
 800d56e:	68aa      	ldr	r2, [r5, #8]
 800d570:	692b      	ldr	r3, [r5, #16]
 800d572:	443a      	add	r2, r7
 800d574:	443b      	add	r3, r7
 800d576:	60aa      	str	r2, [r5, #8]
 800d578:	612b      	str	r3, [r5, #16]
 800d57a:	e7ed      	b.n	800d558 <ucdr_deserialize_array_uint8_t+0x40>

0800d57c <ucdr_deserialize_endian_array_uint8_t>:
 800d57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d580:	4619      	mov	r1, r3
 800d582:	461f      	mov	r7, r3
 800d584:	4605      	mov	r5, r0
 800d586:	4690      	mov	r8, r2
 800d588:	f7fb fb04 	bl	8008b94 <ucdr_check_buffer_available_for>
 800d58c:	b9e0      	cbnz	r0, 800d5c8 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800d58e:	463e      	mov	r6, r7
 800d590:	e009      	b.n	800d5a6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800d592:	68a9      	ldr	r1, [r5, #8]
 800d594:	f002 ff3d 	bl	8010412 <memcpy>
 800d598:	68aa      	ldr	r2, [r5, #8]
 800d59a:	692b      	ldr	r3, [r5, #16]
 800d59c:	4422      	add	r2, r4
 800d59e:	4423      	add	r3, r4
 800d5a0:	1b36      	subs	r6, r6, r4
 800d5a2:	60aa      	str	r2, [r5, #8]
 800d5a4:	612b      	str	r3, [r5, #16]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	4631      	mov	r1, r6
 800d5aa:	4628      	mov	r0, r5
 800d5ac:	f7fb fb7a 	bl	8008ca4 <ucdr_check_final_buffer_behavior_array>
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	1bb8      	subs	r0, r7, r6
 800d5b4:	4622      	mov	r2, r4
 800d5b6:	4440      	add	r0, r8
 800d5b8:	2c00      	cmp	r4, #0
 800d5ba:	d1ea      	bne.n	800d592 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800d5bc:	2301      	movs	r3, #1
 800d5be:	7da8      	ldrb	r0, [r5, #22]
 800d5c0:	756b      	strb	r3, [r5, #21]
 800d5c2:	4058      	eors	r0, r3
 800d5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5c8:	463a      	mov	r2, r7
 800d5ca:	68a9      	ldr	r1, [r5, #8]
 800d5cc:	4640      	mov	r0, r8
 800d5ce:	f002 ff20 	bl	8010412 <memcpy>
 800d5d2:	68aa      	ldr	r2, [r5, #8]
 800d5d4:	692b      	ldr	r3, [r5, #16]
 800d5d6:	443a      	add	r2, r7
 800d5d8:	443b      	add	r3, r7
 800d5da:	60aa      	str	r2, [r5, #8]
 800d5dc:	612b      	str	r3, [r5, #16]
 800d5de:	e7ed      	b.n	800d5bc <ucdr_deserialize_endian_array_uint8_t+0x40>

0800d5e0 <ucdr_serialize_sequence_char>:
 800d5e0:	b570      	push	{r4, r5, r6, lr}
 800d5e2:	460e      	mov	r6, r1
 800d5e4:	4615      	mov	r5, r2
 800d5e6:	7d01      	ldrb	r1, [r0, #20]
 800d5e8:	4604      	mov	r4, r0
 800d5ea:	f7fa fe33 	bl	8008254 <ucdr_serialize_endian_uint32_t>
 800d5ee:	b90d      	cbnz	r5, 800d5f4 <ucdr_serialize_sequence_char+0x14>
 800d5f0:	2001      	movs	r0, #1
 800d5f2:	bd70      	pop	{r4, r5, r6, pc}
 800d5f4:	7d21      	ldrb	r1, [r4, #20]
 800d5f6:	462b      	mov	r3, r5
 800d5f8:	4632      	mov	r2, r6
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d600:	f7ff bec2 	b.w	800d388 <ucdr_serialize_endian_array_char>

0800d604 <ucdr_deserialize_sequence_char>:
 800d604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d608:	461d      	mov	r5, r3
 800d60a:	4616      	mov	r6, r2
 800d60c:	460f      	mov	r7, r1
 800d60e:	461a      	mov	r2, r3
 800d610:	7d01      	ldrb	r1, [r0, #20]
 800d612:	4604      	mov	r4, r0
 800d614:	f7fa ff3c 	bl	8008490 <ucdr_deserialize_endian_uint32_t>
 800d618:	682b      	ldr	r3, [r5, #0]
 800d61a:	429e      	cmp	r6, r3
 800d61c:	d208      	bcs.n	800d630 <ucdr_deserialize_sequence_char+0x2c>
 800d61e:	2201      	movs	r2, #1
 800d620:	75a2      	strb	r2, [r4, #22]
 800d622:	7d21      	ldrb	r1, [r4, #20]
 800d624:	463a      	mov	r2, r7
 800d626:	4620      	mov	r0, r4
 800d628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d62c:	f7ff bede 	b.w	800d3ec <ucdr_deserialize_endian_array_char>
 800d630:	2b00      	cmp	r3, #0
 800d632:	d1f6      	bne.n	800d622 <ucdr_deserialize_sequence_char+0x1e>
 800d634:	2001      	movs	r0, #1
 800d636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d63a:	bf00      	nop

0800d63c <ucdr_serialize_sequence_uint8_t>:
 800d63c:	b570      	push	{r4, r5, r6, lr}
 800d63e:	460e      	mov	r6, r1
 800d640:	4615      	mov	r5, r2
 800d642:	7d01      	ldrb	r1, [r0, #20]
 800d644:	4604      	mov	r4, r0
 800d646:	f7fa fe05 	bl	8008254 <ucdr_serialize_endian_uint32_t>
 800d64a:	b90d      	cbnz	r5, 800d650 <ucdr_serialize_sequence_uint8_t+0x14>
 800d64c:	2001      	movs	r0, #1
 800d64e:	bd70      	pop	{r4, r5, r6, pc}
 800d650:	7d21      	ldrb	r1, [r4, #20]
 800d652:	462b      	mov	r3, r5
 800d654:	4632      	mov	r2, r6
 800d656:	4620      	mov	r0, r4
 800d658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d65c:	f7ff bf2a 	b.w	800d4b4 <ucdr_serialize_endian_array_uint8_t>

0800d660 <ucdr_deserialize_sequence_uint8_t>:
 800d660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d664:	461d      	mov	r5, r3
 800d666:	4616      	mov	r6, r2
 800d668:	460f      	mov	r7, r1
 800d66a:	461a      	mov	r2, r3
 800d66c:	7d01      	ldrb	r1, [r0, #20]
 800d66e:	4604      	mov	r4, r0
 800d670:	f7fa ff0e 	bl	8008490 <ucdr_deserialize_endian_uint32_t>
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	429e      	cmp	r6, r3
 800d678:	d208      	bcs.n	800d68c <ucdr_deserialize_sequence_uint8_t+0x2c>
 800d67a:	2201      	movs	r2, #1
 800d67c:	75a2      	strb	r2, [r4, #22]
 800d67e:	7d21      	ldrb	r1, [r4, #20]
 800d680:	463a      	mov	r2, r7
 800d682:	4620      	mov	r0, r4
 800d684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d688:	f7ff bf78 	b.w	800d57c <ucdr_deserialize_endian_array_uint8_t>
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d1f6      	bne.n	800d67e <ucdr_deserialize_sequence_uint8_t+0x1e>
 800d690:	2001      	movs	r0, #1
 800d692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d696:	bf00      	nop

0800d698 <ucdr_serialize_string>:
 800d698:	b538      	push	{r3, r4, r5, lr}
 800d69a:	4605      	mov	r5, r0
 800d69c:	4608      	mov	r0, r1
 800d69e:	460c      	mov	r4, r1
 800d6a0:	f7f2 fdfe 	bl	80002a0 <strlen>
 800d6a4:	4621      	mov	r1, r4
 800d6a6:	1c42      	adds	r2, r0, #1
 800d6a8:	4628      	mov	r0, r5
 800d6aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6ae:	f7ff bf97 	b.w	800d5e0 <ucdr_serialize_sequence_char>
 800d6b2:	bf00      	nop

0800d6b4 <ucdr_deserialize_string>:
 800d6b4:	b500      	push	{lr}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	ab01      	add	r3, sp, #4
 800d6ba:	f7ff ffa3 	bl	800d604 <ucdr_deserialize_sequence_char>
 800d6be:	b003      	add	sp, #12
 800d6c0:	f85d fb04 	ldr.w	pc, [sp], #4

0800d6c4 <get_custom_error>:
 800d6c4:	4b01      	ldr	r3, [pc, #4]	@ (800d6cc <get_custom_error+0x8>)
 800d6c6:	7818      	ldrb	r0, [r3, #0]
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	2000dc1e 	.word	0x2000dc1e

0800d6d0 <recv_custom_msg>:
 800d6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d4:	b089      	sub	sp, #36	@ 0x24
 800d6d6:	4693      	mov	fp, r2
 800d6d8:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800d6dc:	9104      	str	r1, [sp, #16]
 800d6de:	2100      	movs	r1, #0
 800d6e0:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800d6e4:	9305      	str	r3, [sp, #20]
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	f88d 101e 	strb.w	r1, [sp, #30]
 800d6ec:	b332      	cbz	r2, 800d73c <recv_custom_msg+0x6c>
 800d6ee:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 800d6f2:	f10d 091f 	add.w	r9, sp, #31
 800d6f6:	f10d 0814 	add.w	r8, sp, #20
 800d6fa:	f10d 071e 	add.w	r7, sp, #30
 800d6fe:	f44f 7600 	mov.w	r6, #512	@ 0x200
 800d702:	e004      	b.n	800d70e <recv_custom_msg+0x3e>
 800d704:	9b05      	ldr	r3, [sp, #20]
 800d706:	2b00      	cmp	r3, #0
 800d708:	dd10      	ble.n	800d72c <recv_custom_msg+0x5c>
 800d70a:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 800d70e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d712:	e9cd 6700 	strd	r6, r7, [sp]
 800d716:	4623      	mov	r3, r4
 800d718:	4622      	mov	r2, r4
 800d71a:	4629      	mov	r1, r5
 800d71c:	4650      	mov	r0, sl
 800d71e:	f001 f8c1 	bl	800e8a4 <uxr_read_framed_msg>
 800d722:	2800      	cmp	r0, #0
 800d724:	d0ee      	beq.n	800d704 <recv_custom_msg+0x34>
 800d726:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d72a:	b1a3      	cbz	r3, 800d756 <recv_custom_msg+0x86>
 800d72c:	4b0e      	ldr	r3, [pc, #56]	@ (800d768 <recv_custom_msg+0x98>)
 800d72e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800d732:	701a      	strb	r2, [r3, #0]
 800d734:	2000      	movs	r0, #0
 800d736:	b009      	add	sp, #36	@ 0x24
 800d738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d73c:	f10d 021f 	add.w	r2, sp, #31
 800d740:	9200      	str	r2, [sp, #0]
 800d742:	4601      	mov	r1, r0
 800d744:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d748:	47a8      	blx	r5
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d0ee      	beq.n	800d72c <recv_custom_msg+0x5c>
 800d74e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1ea      	bne.n	800d72c <recv_custom_msg+0x5c>
 800d756:	9b04      	ldr	r3, [sp, #16]
 800d758:	f8cb 0000 	str.w	r0, [fp]
 800d75c:	2001      	movs	r0, #1
 800d75e:	601c      	str	r4, [r3, #0]
 800d760:	b009      	add	sp, #36	@ 0x24
 800d762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d766:	bf00      	nop
 800d768:	2000dc1e 	.word	0x2000dc1e

0800d76c <send_custom_msg>:
 800d76c:	b570      	push	{r4, r5, r6, lr}
 800d76e:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800d772:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800d776:	b086      	sub	sp, #24
 800d778:	4616      	mov	r6, r2
 800d77a:	b965      	cbnz	r5, 800d796 <send_custom_msg+0x2a>
 800d77c:	f10d 0317 	add.w	r3, sp, #23
 800d780:	47a0      	blx	r4
 800d782:	b108      	cbz	r0, 800d788 <send_custom_msg+0x1c>
 800d784:	42b0      	cmp	r0, r6
 800d786:	d014      	beq.n	800d7b2 <send_custom_msg+0x46>
 800d788:	4b0b      	ldr	r3, [pc, #44]	@ (800d7b8 <send_custom_msg+0x4c>)
 800d78a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800d78e:	701a      	strb	r2, [r3, #0]
 800d790:	2000      	movs	r0, #0
 800d792:	b006      	add	sp, #24
 800d794:	bd70      	pop	{r4, r5, r6, pc}
 800d796:	f10d 0217 	add.w	r2, sp, #23
 800d79a:	9202      	str	r2, [sp, #8]
 800d79c:	2200      	movs	r2, #0
 800d79e:	e9cd 6200 	strd	r6, r2, [sp]
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	4602      	mov	r2, r0
 800d7a6:	4621      	mov	r1, r4
 800d7a8:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800d7ac:	f000 fe9c 	bl	800e4e8 <uxr_write_framed_msg>
 800d7b0:	e7e7      	b.n	800d782 <send_custom_msg+0x16>
 800d7b2:	2001      	movs	r0, #1
 800d7b4:	b006      	add	sp, #24
 800d7b6:	bd70      	pop	{r4, r5, r6, pc}
 800d7b8:	2000dc1e 	.word	0x2000dc1e

0800d7bc <uxr_set_custom_transport_callbacks>:
 800d7bc:	b410      	push	{r4}
 800d7be:	9c01      	ldr	r4, [sp, #4]
 800d7c0:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800d7c4:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800d7c8:	9b02      	ldr	r3, [sp, #8]
 800d7ca:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800d7ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7d2:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800d7d6:	4770      	bx	lr

0800d7d8 <uxr_init_custom_transport>:
 800d7d8:	b538      	push	{r3, r4, r5, lr}
 800d7da:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800d7de:	b303      	cbz	r3, 800d822 <uxr_init_custom_transport+0x4a>
 800d7e0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800d7e4:	4604      	mov	r4, r0
 800d7e6:	b1e2      	cbz	r2, 800d822 <uxr_init_custom_transport+0x4a>
 800d7e8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800d7ec:	b1ca      	cbz	r2, 800d822 <uxr_init_custom_transport+0x4a>
 800d7ee:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800d7f2:	b1b2      	cbz	r2, 800d822 <uxr_init_custom_transport+0x4a>
 800d7f4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800d7f8:	4798      	blx	r3
 800d7fa:	4605      	mov	r5, r0
 800d7fc:	b188      	cbz	r0, 800d822 <uxr_init_custom_transport+0x4a>
 800d7fe:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800d802:	b98b      	cbnz	r3, 800d828 <uxr_init_custom_transport+0x50>
 800d804:	490b      	ldr	r1, [pc, #44]	@ (800d834 <uxr_init_custom_transport+0x5c>)
 800d806:	4b0c      	ldr	r3, [pc, #48]	@ (800d838 <uxr_init_custom_transport+0x60>)
 800d808:	4a0c      	ldr	r2, [pc, #48]	@ (800d83c <uxr_init_custom_transport+0x64>)
 800d80a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800d80e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d812:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800d816:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800d81a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800d81e:	4628      	mov	r0, r5
 800d820:	bd38      	pop	{r3, r4, r5, pc}
 800d822:	2500      	movs	r5, #0
 800d824:	4628      	mov	r0, r5
 800d826:	bd38      	pop	{r3, r4, r5, pc}
 800d828:	2100      	movs	r1, #0
 800d82a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800d82e:	f000 fe55 	bl	800e4dc <uxr_init_framing_io>
 800d832:	e7e7      	b.n	800d804 <uxr_init_custom_transport+0x2c>
 800d834:	0800d76d 	.word	0x0800d76d
 800d838:	0800d6d1 	.word	0x0800d6d1
 800d83c:	0800d6c5 	.word	0x0800d6c5

0800d840 <uxr_close_custom_transport>:
 800d840:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800d844:	4718      	bx	r3
 800d846:	bf00      	nop

0800d848 <uxr_init_input_best_effort_stream>:
 800d848:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d84c:	8003      	strh	r3, [r0, #0]
 800d84e:	4770      	bx	lr

0800d850 <uxr_reset_input_best_effort_stream>:
 800d850:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d854:	8003      	strh	r3, [r0, #0]
 800d856:	4770      	bx	lr

0800d858 <uxr_receive_best_effort_message>:
 800d858:	b538      	push	{r3, r4, r5, lr}
 800d85a:	4604      	mov	r4, r0
 800d85c:	8800      	ldrh	r0, [r0, #0]
 800d85e:	460d      	mov	r5, r1
 800d860:	f000 fe26 	bl	800e4b0 <uxr_seq_num_cmp>
 800d864:	4603      	mov	r3, r0
 800d866:	2b00      	cmp	r3, #0
 800d868:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800d86c:	bfb8      	it	lt
 800d86e:	8025      	strhlt	r5, [r4, #0]
 800d870:	bd38      	pop	{r3, r4, r5, pc}
 800d872:	bf00      	nop

0800d874 <on_full_input_buffer>:
 800d874:	b570      	push	{r4, r5, r6, lr}
 800d876:	4605      	mov	r5, r0
 800d878:	460c      	mov	r4, r1
 800d87a:	682b      	ldr	r3, [r5, #0]
 800d87c:	6809      	ldr	r1, [r1, #0]
 800d87e:	8920      	ldrh	r0, [r4, #8]
 800d880:	6862      	ldr	r2, [r4, #4]
 800d882:	fbb2 f2f0 	udiv	r2, r2, r0
 800d886:	1a5b      	subs	r3, r3, r1
 800d888:	fbb3 f3f2 	udiv	r3, r3, r2
 800d88c:	3301      	adds	r3, #1
 800d88e:	b29b      	uxth	r3, r3
 800d890:	fbb3 f6f0 	udiv	r6, r3, r0
 800d894:	fb00 3316 	mls	r3, r0, r6, r3
 800d898:	b29b      	uxth	r3, r3
 800d89a:	fb02 f303 	mul.w	r3, r2, r3
 800d89e:	1d18      	adds	r0, r3, #4
 800d8a0:	4408      	add	r0, r1
 800d8a2:	7d26      	ldrb	r6, [r4, #20]
 800d8a4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800d8a8:	b116      	cbz	r6, 800d8b0 <on_full_input_buffer+0x3c>
 800d8aa:	2600      	movs	r6, #0
 800d8ac:	f840 6c04 	str.w	r6, [r0, #-4]
 800d8b0:	2a03      	cmp	r2, #3
 800d8b2:	d801      	bhi.n	800d8b8 <on_full_input_buffer+0x44>
 800d8b4:	2001      	movs	r0, #1
 800d8b6:	bd70      	pop	{r4, r5, r6, pc}
 800d8b8:	3308      	adds	r3, #8
 800d8ba:	4419      	add	r1, r3
 800d8bc:	4628      	mov	r0, r5
 800d8be:	692b      	ldr	r3, [r5, #16]
 800d8c0:	3a04      	subs	r2, #4
 800d8c2:	f7fb f9b3 	bl	8008c2c <ucdr_init_buffer_origin>
 800d8c6:	4628      	mov	r0, r5
 800d8c8:	4902      	ldr	r1, [pc, #8]	@ (800d8d4 <on_full_input_buffer+0x60>)
 800d8ca:	4622      	mov	r2, r4
 800d8cc:	f7fb f98a 	bl	8008be4 <ucdr_set_on_full_buffer_callback>
 800d8d0:	2000      	movs	r0, #0
 800d8d2:	bd70      	pop	{r4, r5, r6, pc}
 800d8d4:	0800d875 	.word	0x0800d875

0800d8d8 <uxr_init_input_reliable_stream>:
 800d8d8:	b500      	push	{lr}
 800d8da:	e9c0 1200 	strd	r1, r2, [r0]
 800d8de:	f04f 0e00 	mov.w	lr, #0
 800d8e2:	9a01      	ldr	r2, [sp, #4]
 800d8e4:	8103      	strh	r3, [r0, #8]
 800d8e6:	6102      	str	r2, [r0, #16]
 800d8e8:	f880 e014 	strb.w	lr, [r0, #20]
 800d8ec:	b1d3      	cbz	r3, 800d924 <uxr_init_input_reliable_stream+0x4c>
 800d8ee:	f8c1 e000 	str.w	lr, [r1]
 800d8f2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800d8f6:	f1bc 0f01 	cmp.w	ip, #1
 800d8fa:	d913      	bls.n	800d924 <uxr_init_input_reliable_stream+0x4c>
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	fbb3 f1fc 	udiv	r1, r3, ip
 800d902:	fb0c 3111 	mls	r1, ip, r1, r3
 800d906:	b289      	uxth	r1, r1
 800d908:	6842      	ldr	r2, [r0, #4]
 800d90a:	fbb2 f2fc 	udiv	r2, r2, ip
 800d90e:	fb01 f202 	mul.w	r2, r1, r2
 800d912:	6801      	ldr	r1, [r0, #0]
 800d914:	f841 e002 	str.w	lr, [r1, r2]
 800d918:	3301      	adds	r3, #1
 800d91a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800d91e:	b29b      	uxth	r3, r3
 800d920:	459c      	cmp	ip, r3
 800d922:	d8ec      	bhi.n	800d8fe <uxr_init_input_reliable_stream+0x26>
 800d924:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d928:	60c3      	str	r3, [r0, #12]
 800d92a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d92e:	bf00      	nop

0800d930 <uxr_reset_input_reliable_stream>:
 800d930:	8901      	ldrh	r1, [r0, #8]
 800d932:	b1e9      	cbz	r1, 800d970 <uxr_reset_input_reliable_stream+0x40>
 800d934:	f04f 0c00 	mov.w	ip, #0
 800d938:	b500      	push	{lr}
 800d93a:	4663      	mov	r3, ip
 800d93c:	46e6      	mov	lr, ip
 800d93e:	fbb3 f2f1 	udiv	r2, r3, r1
 800d942:	fb01 3312 	mls	r3, r1, r2, r3
 800d946:	b29b      	uxth	r3, r3
 800d948:	6842      	ldr	r2, [r0, #4]
 800d94a:	fbb2 f2f1 	udiv	r2, r2, r1
 800d94e:	fb03 f202 	mul.w	r2, r3, r2
 800d952:	6803      	ldr	r3, [r0, #0]
 800d954:	f843 e002 	str.w	lr, [r3, r2]
 800d958:	f10c 0c01 	add.w	ip, ip, #1
 800d95c:	8901      	ldrh	r1, [r0, #8]
 800d95e:	fa1f f38c 	uxth.w	r3, ip
 800d962:	4299      	cmp	r1, r3
 800d964:	d8eb      	bhi.n	800d93e <uxr_reset_input_reliable_stream+0xe>
 800d966:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d96a:	60c3      	str	r3, [r0, #12]
 800d96c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d970:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d974:	60c3      	str	r3, [r0, #12]
 800d976:	4770      	bx	lr

0800d978 <uxr_receive_reliable_message>:
 800d978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d97c:	4604      	mov	r4, r0
 800d97e:	460d      	mov	r5, r1
 800d980:	8901      	ldrh	r1, [r0, #8]
 800d982:	8980      	ldrh	r0, [r0, #12]
 800d984:	4690      	mov	r8, r2
 800d986:	461f      	mov	r7, r3
 800d988:	f000 fd8a 	bl	800e4a0 <uxr_seq_num_add>
 800d98c:	4629      	mov	r1, r5
 800d98e:	4606      	mov	r6, r0
 800d990:	89a0      	ldrh	r0, [r4, #12]
 800d992:	f000 fd8d 	bl	800e4b0 <uxr_seq_num_cmp>
 800d996:	2800      	cmp	r0, #0
 800d998:	db0a      	blt.n	800d9b0 <uxr_receive_reliable_message+0x38>
 800d99a:	2600      	movs	r6, #0
 800d99c:	89e0      	ldrh	r0, [r4, #14]
 800d99e:	4629      	mov	r1, r5
 800d9a0:	f000 fd86 	bl	800e4b0 <uxr_seq_num_cmp>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	bfb8      	it	lt
 800d9a8:	81e5      	strhlt	r5, [r4, #14]
 800d9aa:	4630      	mov	r0, r6
 800d9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9b0:	4630      	mov	r0, r6
 800d9b2:	4629      	mov	r1, r5
 800d9b4:	f000 fd7c 	bl	800e4b0 <uxr_seq_num_cmp>
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	dbee      	blt.n	800d99a <uxr_receive_reliable_message+0x22>
 800d9bc:	6923      	ldr	r3, [r4, #16]
 800d9be:	4640      	mov	r0, r8
 800d9c0:	4798      	blx	r3
 800d9c2:	2101      	movs	r1, #1
 800d9c4:	4606      	mov	r6, r0
 800d9c6:	89a0      	ldrh	r0, [r4, #12]
 800d9c8:	f000 fd6a 	bl	800e4a0 <uxr_seq_num_add>
 800d9cc:	b90e      	cbnz	r6, 800d9d2 <uxr_receive_reliable_message+0x5a>
 800d9ce:	4285      	cmp	r5, r0
 800d9d0:	d046      	beq.n	800da60 <uxr_receive_reliable_message+0xe8>
 800d9d2:	8921      	ldrh	r1, [r4, #8]
 800d9d4:	fbb5 f2f1 	udiv	r2, r5, r1
 800d9d8:	fb01 5212 	mls	r2, r1, r2, r5
 800d9dc:	b292      	uxth	r2, r2
 800d9de:	6863      	ldr	r3, [r4, #4]
 800d9e0:	6820      	ldr	r0, [r4, #0]
 800d9e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d9e6:	fb02 f303 	mul.w	r3, r2, r3
 800d9ea:	3304      	adds	r3, #4
 800d9ec:	4418      	add	r0, r3
 800d9ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d1d1      	bne.n	800d99a <uxr_receive_reliable_message+0x22>
 800d9f6:	4641      	mov	r1, r8
 800d9f8:	463a      	mov	r2, r7
 800d9fa:	f002 fd0a 	bl	8010412 <memcpy>
 800d9fe:	8921      	ldrh	r1, [r4, #8]
 800da00:	fbb5 f2f1 	udiv	r2, r5, r1
 800da04:	fb01 5212 	mls	r2, r1, r2, r5
 800da08:	b292      	uxth	r2, r2
 800da0a:	6863      	ldr	r3, [r4, #4]
 800da0c:	fbb3 f3f1 	udiv	r3, r3, r1
 800da10:	fb02 f303 	mul.w	r3, r2, r3
 800da14:	6822      	ldr	r2, [r4, #0]
 800da16:	50d7      	str	r7, [r2, r3]
 800da18:	9a06      	ldr	r2, [sp, #24]
 800da1a:	2301      	movs	r3, #1
 800da1c:	7013      	strb	r3, [r2, #0]
 800da1e:	2e00      	cmp	r6, #0
 800da20:	d0bb      	beq.n	800d99a <uxr_receive_reliable_message+0x22>
 800da22:	89a6      	ldrh	r6, [r4, #12]
 800da24:	2101      	movs	r1, #1
 800da26:	4630      	mov	r0, r6
 800da28:	f000 fd3a 	bl	800e4a0 <uxr_seq_num_add>
 800da2c:	8921      	ldrh	r1, [r4, #8]
 800da2e:	fbb0 f2f1 	udiv	r2, r0, r1
 800da32:	fb01 0212 	mls	r2, r1, r2, r0
 800da36:	b292      	uxth	r2, r2
 800da38:	6863      	ldr	r3, [r4, #4]
 800da3a:	fbb3 f3f1 	udiv	r3, r3, r1
 800da3e:	4606      	mov	r6, r0
 800da40:	fb02 f303 	mul.w	r3, r2, r3
 800da44:	6820      	ldr	r0, [r4, #0]
 800da46:	3304      	adds	r3, #4
 800da48:	4418      	add	r0, r3
 800da4a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d0a3      	beq.n	800d99a <uxr_receive_reliable_message+0x22>
 800da52:	6923      	ldr	r3, [r4, #16]
 800da54:	4798      	blx	r3
 800da56:	2802      	cmp	r0, #2
 800da58:	d005      	beq.n	800da66 <uxr_receive_reliable_message+0xee>
 800da5a:	2801      	cmp	r0, #1
 800da5c:	d0e2      	beq.n	800da24 <uxr_receive_reliable_message+0xac>
 800da5e:	e79c      	b.n	800d99a <uxr_receive_reliable_message+0x22>
 800da60:	9b06      	ldr	r3, [sp, #24]
 800da62:	81a5      	strh	r5, [r4, #12]
 800da64:	701e      	strb	r6, [r3, #0]
 800da66:	2601      	movs	r6, #1
 800da68:	e798      	b.n	800d99c <uxr_receive_reliable_message+0x24>
 800da6a:	bf00      	nop

0800da6c <uxr_next_input_reliable_buffer_available>:
 800da6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da70:	4604      	mov	r4, r0
 800da72:	460f      	mov	r7, r1
 800da74:	8980      	ldrh	r0, [r0, #12]
 800da76:	2101      	movs	r1, #1
 800da78:	4690      	mov	r8, r2
 800da7a:	f000 fd11 	bl	800e4a0 <uxr_seq_num_add>
 800da7e:	8921      	ldrh	r1, [r4, #8]
 800da80:	fbb0 f2f1 	udiv	r2, r0, r1
 800da84:	fb01 0212 	mls	r2, r1, r2, r0
 800da88:	b292      	uxth	r2, r2
 800da8a:	6863      	ldr	r3, [r4, #4]
 800da8c:	6826      	ldr	r6, [r4, #0]
 800da8e:	fbb3 f3f1 	udiv	r3, r3, r1
 800da92:	fb02 f303 	mul.w	r3, r2, r3
 800da96:	3304      	adds	r3, #4
 800da98:	441e      	add	r6, r3
 800da9a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 800da9e:	f1b9 0f00 	cmp.w	r9, #0
 800daa2:	d023      	beq.n	800daec <uxr_next_input_reliable_buffer_available+0x80>
 800daa4:	6923      	ldr	r3, [r4, #16]
 800daa6:	4605      	mov	r5, r0
 800daa8:	4630      	mov	r0, r6
 800daaa:	4798      	blx	r3
 800daac:	4682      	mov	sl, r0
 800daae:	b300      	cbz	r0, 800daf2 <uxr_next_input_reliable_buffer_available+0x86>
 800dab0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 800dab4:	2101      	movs	r1, #1
 800dab6:	4650      	mov	r0, sl
 800dab8:	f000 fcf2 	bl	800e4a0 <uxr_seq_num_add>
 800dabc:	8921      	ldrh	r1, [r4, #8]
 800dabe:	fbb0 f2f1 	udiv	r2, r0, r1
 800dac2:	4682      	mov	sl, r0
 800dac4:	fb01 0212 	mls	r2, r1, r2, r0
 800dac8:	e9d4 0300 	ldrd	r0, r3, [r4]
 800dacc:	b292      	uxth	r2, r2
 800dace:	fbb3 f3f1 	udiv	r3, r3, r1
 800dad2:	fb02 f303 	mul.w	r3, r2, r3
 800dad6:	3304      	adds	r3, #4
 800dad8:	4418      	add	r0, r3
 800dada:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800dade:	b12b      	cbz	r3, 800daec <uxr_next_input_reliable_buffer_available+0x80>
 800dae0:	6923      	ldr	r3, [r4, #16]
 800dae2:	4798      	blx	r3
 800dae4:	2802      	cmp	r0, #2
 800dae6:	d01b      	beq.n	800db20 <uxr_next_input_reliable_buffer_available+0xb4>
 800dae8:	2801      	cmp	r0, #1
 800daea:	d0e3      	beq.n	800dab4 <uxr_next_input_reliable_buffer_available+0x48>
 800daec:	2000      	movs	r0, #0
 800daee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daf2:	464a      	mov	r2, r9
 800daf4:	4631      	mov	r1, r6
 800daf6:	4638      	mov	r0, r7
 800daf8:	f7fb f8a0 	bl	8008c3c <ucdr_init_buffer>
 800dafc:	8921      	ldrh	r1, [r4, #8]
 800dafe:	fbb5 f2f1 	udiv	r2, r5, r1
 800db02:	fb01 5212 	mls	r2, r1, r2, r5
 800db06:	b292      	uxth	r2, r2
 800db08:	6863      	ldr	r3, [r4, #4]
 800db0a:	fbb3 f3f1 	udiv	r3, r3, r1
 800db0e:	fb02 f303 	mul.w	r3, r2, r3
 800db12:	6822      	ldr	r2, [r4, #0]
 800db14:	f842 a003 	str.w	sl, [r2, r3]
 800db18:	81a5      	strh	r5, [r4, #12]
 800db1a:	2001      	movs	r0, #1
 800db1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db20:	eb06 0108 	add.w	r1, r6, r8
 800db24:	8926      	ldrh	r6, [r4, #8]
 800db26:	fbb5 f0f6 	udiv	r0, r5, r6
 800db2a:	fb06 5010 	mls	r0, r6, r0, r5
 800db2e:	b280      	uxth	r0, r0
 800db30:	6863      	ldr	r3, [r4, #4]
 800db32:	fbb3 f3f6 	udiv	r3, r3, r6
 800db36:	fb00 f303 	mul.w	r3, r0, r3
 800db3a:	6820      	ldr	r0, [r4, #0]
 800db3c:	2500      	movs	r5, #0
 800db3e:	50c5      	str	r5, [r0, r3]
 800db40:	eba9 0208 	sub.w	r2, r9, r8
 800db44:	4638      	mov	r0, r7
 800db46:	f7fb f879 	bl	8008c3c <ucdr_init_buffer>
 800db4a:	4903      	ldr	r1, [pc, #12]	@ (800db58 <uxr_next_input_reliable_buffer_available+0xec>)
 800db4c:	4622      	mov	r2, r4
 800db4e:	4638      	mov	r0, r7
 800db50:	f7fb f848 	bl	8008be4 <ucdr_set_on_full_buffer_callback>
 800db54:	4655      	mov	r5, sl
 800db56:	e7df      	b.n	800db18 <uxr_next_input_reliable_buffer_available+0xac>
 800db58:	0800d875 	.word	0x0800d875

0800db5c <uxr_process_heartbeat>:
 800db5c:	b538      	push	{r3, r4, r5, lr}
 800db5e:	4611      	mov	r1, r2
 800db60:	4604      	mov	r4, r0
 800db62:	89c0      	ldrh	r0, [r0, #14]
 800db64:	4615      	mov	r5, r2
 800db66:	f000 fca3 	bl	800e4b0 <uxr_seq_num_cmp>
 800db6a:	2800      	cmp	r0, #0
 800db6c:	bfb8      	it	lt
 800db6e:	81e5      	strhlt	r5, [r4, #14]
 800db70:	bd38      	pop	{r3, r4, r5, pc}
 800db72:	bf00      	nop

0800db74 <uxr_compute_acknack>:
 800db74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db78:	8903      	ldrh	r3, [r0, #8]
 800db7a:	8985      	ldrh	r5, [r0, #12]
 800db7c:	4604      	mov	r4, r0
 800db7e:	460e      	mov	r6, r1
 800db80:	2b00      	cmp	r3, #0
 800db82:	d048      	beq.n	800dc16 <uxr_compute_acknack+0xa2>
 800db84:	4628      	mov	r0, r5
 800db86:	2701      	movs	r7, #1
 800db88:	e003      	b.n	800db92 <uxr_compute_acknack+0x1e>
 800db8a:	4567      	cmp	r7, ip
 800db8c:	d243      	bcs.n	800dc16 <uxr_compute_acknack+0xa2>
 800db8e:	89a0      	ldrh	r0, [r4, #12]
 800db90:	3701      	adds	r7, #1
 800db92:	b2b9      	uxth	r1, r7
 800db94:	f000 fc84 	bl	800e4a0 <uxr_seq_num_add>
 800db98:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800db9c:	fbb0 f2fc 	udiv	r2, r0, ip
 800dba0:	e9d4 1300 	ldrd	r1, r3, [r4]
 800dba4:	fb0c 0212 	mls	r2, ip, r2, r0
 800dba8:	b292      	uxth	r2, r2
 800dbaa:	fbb3 f3fc 	udiv	r3, r3, ip
 800dbae:	fb02 f303 	mul.w	r3, r2, r3
 800dbb2:	58cb      	ldr	r3, [r1, r3]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d1e8      	bne.n	800db8a <uxr_compute_acknack+0x16>
 800dbb8:	8030      	strh	r0, [r6, #0]
 800dbba:	2101      	movs	r1, #1
 800dbbc:	89e5      	ldrh	r5, [r4, #14]
 800dbbe:	f000 fc73 	bl	800e4a8 <uxr_seq_num_sub>
 800dbc2:	4601      	mov	r1, r0
 800dbc4:	4628      	mov	r0, r5
 800dbc6:	f000 fc6f 	bl	800e4a8 <uxr_seq_num_sub>
 800dbca:	4605      	mov	r5, r0
 800dbcc:	4607      	mov	r7, r0
 800dbce:	b1f8      	cbz	r0, 800dc10 <uxr_compute_acknack+0x9c>
 800dbd0:	f04f 0900 	mov.w	r9, #0
 800dbd4:	464d      	mov	r5, r9
 800dbd6:	f04f 0801 	mov.w	r8, #1
 800dbda:	fa1f f189 	uxth.w	r1, r9
 800dbde:	8830      	ldrh	r0, [r6, #0]
 800dbe0:	f000 fc5e 	bl	800e4a0 <uxr_seq_num_add>
 800dbe4:	8921      	ldrh	r1, [r4, #8]
 800dbe6:	fbb0 f3f1 	udiv	r3, r0, r1
 800dbea:	fb03 0011 	mls	r0, r3, r1, r0
 800dbee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dbf2:	b280      	uxth	r0, r0
 800dbf4:	fbb3 f3f1 	udiv	r3, r3, r1
 800dbf8:	fb00 f303 	mul.w	r3, r0, r3
 800dbfc:	fa08 f109 	lsl.w	r1, r8, r9
 800dc00:	58d3      	ldr	r3, [r2, r3]
 800dc02:	f109 0901 	add.w	r9, r9, #1
 800dc06:	b90b      	cbnz	r3, 800dc0c <uxr_compute_acknack+0x98>
 800dc08:	4329      	orrs	r1, r5
 800dc0a:	b28d      	uxth	r5, r1
 800dc0c:	454f      	cmp	r7, r9
 800dc0e:	d1e4      	bne.n	800dbda <uxr_compute_acknack+0x66>
 800dc10:	4628      	mov	r0, r5
 800dc12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc16:	4628      	mov	r0, r5
 800dc18:	e7ce      	b.n	800dbb8 <uxr_compute_acknack+0x44>
 800dc1a:	bf00      	nop

0800dc1c <uxr_init_output_best_effort_stream>:
 800dc1c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 800dc20:	e9c0 3201 	strd	r3, r2, [r0, #4]
 800dc24:	6001      	str	r1, [r0, #0]
 800dc26:	7303      	strb	r3, [r0, #12]
 800dc28:	f8a0 c00e 	strh.w	ip, [r0, #14]
 800dc2c:	4770      	bx	lr
 800dc2e:	bf00      	nop

0800dc30 <uxr_reset_output_best_effort_stream>:
 800dc30:	7b02      	ldrb	r2, [r0, #12]
 800dc32:	6042      	str	r2, [r0, #4]
 800dc34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dc38:	81c3      	strh	r3, [r0, #14]
 800dc3a:	4770      	bx	lr

0800dc3c <uxr_prepare_best_effort_buffer_to_write>:
 800dc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc3e:	4604      	mov	r4, r0
 800dc40:	b083      	sub	sp, #12
 800dc42:	6840      	ldr	r0, [r0, #4]
 800dc44:	460d      	mov	r5, r1
 800dc46:	4616      	mov	r6, r2
 800dc48:	f7fc fb54 	bl	800a2f4 <uxr_submessage_padding>
 800dc4c:	6863      	ldr	r3, [r4, #4]
 800dc4e:	4418      	add	r0, r3
 800dc50:	68a3      	ldr	r3, [r4, #8]
 800dc52:	1942      	adds	r2, r0, r5
 800dc54:	4293      	cmp	r3, r2
 800dc56:	bf2c      	ite	cs
 800dc58:	2701      	movcs	r7, #1
 800dc5a:	2700      	movcc	r7, #0
 800dc5c:	d202      	bcs.n	800dc64 <uxr_prepare_best_effort_buffer_to_write+0x28>
 800dc5e:	4638      	mov	r0, r7
 800dc60:	b003      	add	sp, #12
 800dc62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc64:	9000      	str	r0, [sp, #0]
 800dc66:	6821      	ldr	r1, [r4, #0]
 800dc68:	4630      	mov	r0, r6
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	f7fa ffd4 	bl	8008c18 <ucdr_init_buffer_origin_offset>
 800dc70:	6863      	ldr	r3, [r4, #4]
 800dc72:	4638      	mov	r0, r7
 800dc74:	442b      	add	r3, r5
 800dc76:	6063      	str	r3, [r4, #4]
 800dc78:	b003      	add	sp, #12
 800dc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc7c <uxr_prepare_best_effort_buffer_to_send>:
 800dc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc80:	4604      	mov	r4, r0
 800dc82:	461d      	mov	r5, r3
 800dc84:	6840      	ldr	r0, [r0, #4]
 800dc86:	7b23      	ldrb	r3, [r4, #12]
 800dc88:	4298      	cmp	r0, r3
 800dc8a:	bf8c      	ite	hi
 800dc8c:	2601      	movhi	r6, #1
 800dc8e:	2600      	movls	r6, #0
 800dc90:	d802      	bhi.n	800dc98 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 800dc92:	4630      	mov	r0, r6
 800dc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc98:	4688      	mov	r8, r1
 800dc9a:	89e0      	ldrh	r0, [r4, #14]
 800dc9c:	2101      	movs	r1, #1
 800dc9e:	4617      	mov	r7, r2
 800dca0:	f000 fbfe 	bl	800e4a0 <uxr_seq_num_add>
 800dca4:	6823      	ldr	r3, [r4, #0]
 800dca6:	81e0      	strh	r0, [r4, #14]
 800dca8:	8028      	strh	r0, [r5, #0]
 800dcaa:	f8c8 3000 	str.w	r3, [r8]
 800dcae:	6863      	ldr	r3, [r4, #4]
 800dcb0:	603b      	str	r3, [r7, #0]
 800dcb2:	7b23      	ldrb	r3, [r4, #12]
 800dcb4:	6063      	str	r3, [r4, #4]
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dcbc <on_full_output_buffer>:
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	460c      	mov	r4, r1
 800dcc0:	6803      	ldr	r3, [r0, #0]
 800dcc2:	6809      	ldr	r1, [r1, #0]
 800dcc4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800dcc8:	6862      	ldr	r2, [r4, #4]
 800dcca:	fbb2 f2fc 	udiv	r2, r2, ip
 800dcce:	1a5b      	subs	r3, r3, r1
 800dcd0:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	fbb3 fefc 	udiv	lr, r3, ip
 800dcdc:	fb0c 331e 	mls	r3, ip, lr, r3
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	fb02 f303 	mul.w	r3, r2, r3
 800dce6:	f894 c00c 	ldrb.w	ip, [r4, #12]
 800dcea:	58ca      	ldr	r2, [r1, r3]
 800dcec:	4463      	add	r3, ip
 800dcee:	eba2 020c 	sub.w	r2, r2, ip
 800dcf2:	3308      	adds	r3, #8
 800dcf4:	4605      	mov	r5, r0
 800dcf6:	4419      	add	r1, r3
 800dcf8:	3a04      	subs	r2, #4
 800dcfa:	6903      	ldr	r3, [r0, #16]
 800dcfc:	f7fa ff96 	bl	8008c2c <ucdr_init_buffer_origin>
 800dd00:	4628      	mov	r0, r5
 800dd02:	4903      	ldr	r1, [pc, #12]	@ (800dd10 <on_full_output_buffer+0x54>)
 800dd04:	4622      	mov	r2, r4
 800dd06:	f7fa ff6d 	bl	8008be4 <ucdr_set_on_full_buffer_callback>
 800dd0a:	2000      	movs	r0, #0
 800dd0c:	bd38      	pop	{r3, r4, r5, pc}
 800dd0e:	bf00      	nop
 800dd10:	0800dcbd 	.word	0x0800dcbd

0800dd14 <uxr_init_output_reliable_stream>:
 800dd14:	b410      	push	{r4}
 800dd16:	f89d c004 	ldrb.w	ip, [sp, #4]
 800dd1a:	8103      	strh	r3, [r0, #8]
 800dd1c:	e9c0 1200 	strd	r1, r2, [r0]
 800dd20:	f880 c00c 	strb.w	ip, [r0, #12]
 800dd24:	b1d3      	cbz	r3, 800dd5c <uxr_init_output_reliable_stream+0x48>
 800dd26:	f8c1 c000 	str.w	ip, [r1]
 800dd2a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800dd2e:	f1bc 0f01 	cmp.w	ip, #1
 800dd32:	d913      	bls.n	800dd5c <uxr_init_output_reliable_stream+0x48>
 800dd34:	2301      	movs	r3, #1
 800dd36:	fbb3 f1fc 	udiv	r1, r3, ip
 800dd3a:	fb0c 3111 	mls	r1, ip, r1, r3
 800dd3e:	b289      	uxth	r1, r1
 800dd40:	6842      	ldr	r2, [r0, #4]
 800dd42:	6804      	ldr	r4, [r0, #0]
 800dd44:	fbb2 f2fc 	udiv	r2, r2, ip
 800dd48:	fb01 f202 	mul.w	r2, r1, r2
 800dd4c:	7b01      	ldrb	r1, [r0, #12]
 800dd4e:	50a1      	str	r1, [r4, r2]
 800dd50:	3301      	adds	r3, #1
 800dd52:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	459c      	cmp	ip, r3
 800dd5a:	d8ec      	bhi.n	800dd36 <uxr_init_output_reliable_stream+0x22>
 800dd5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd60:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800dd64:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800dd68:	4905      	ldr	r1, [pc, #20]	@ (800dd80 <uxr_init_output_reliable_stream+0x6c>)
 800dd6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd6e:	f8c0 100e 	str.w	r1, [r0, #14]
 800dd72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dd76:	2300      	movs	r3, #0
 800dd78:	8242      	strh	r2, [r0, #18]
 800dd7a:	8403      	strh	r3, [r0, #32]
 800dd7c:	4770      	bx	lr
 800dd7e:	bf00      	nop
 800dd80:	ffff0000 	.word	0xffff0000

0800dd84 <uxr_reset_output_reliable_stream>:
 800dd84:	8901      	ldrh	r1, [r0, #8]
 800dd86:	b1b1      	cbz	r1, 800ddb6 <uxr_reset_output_reliable_stream+0x32>
 800dd88:	f04f 0c00 	mov.w	ip, #0
 800dd8c:	4663      	mov	r3, ip
 800dd8e:	fbb3 f2f1 	udiv	r2, r3, r1
 800dd92:	fb01 3312 	mls	r3, r1, r2, r3
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	6842      	ldr	r2, [r0, #4]
 800dd9a:	fbb2 f2f1 	udiv	r2, r2, r1
 800dd9e:	6801      	ldr	r1, [r0, #0]
 800dda0:	fb03 f202 	mul.w	r2, r3, r2
 800dda4:	7b03      	ldrb	r3, [r0, #12]
 800dda6:	508b      	str	r3, [r1, r2]
 800dda8:	f10c 0c01 	add.w	ip, ip, #1
 800ddac:	8901      	ldrh	r1, [r0, #8]
 800ddae:	fa1f f38c 	uxth.w	r3, ip
 800ddb2:	4299      	cmp	r1, r3
 800ddb4:	d8eb      	bhi.n	800dd8e <uxr_reset_output_reliable_stream+0xa>
 800ddb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ddba:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ddbe:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800ddc2:	4904      	ldr	r1, [pc, #16]	@ (800ddd4 <uxr_reset_output_reliable_stream+0x50>)
 800ddc4:	f8c0 100e 	str.w	r1, [r0, #14]
 800ddc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ddcc:	2300      	movs	r3, #0
 800ddce:	8242      	strh	r2, [r0, #18]
 800ddd0:	8403      	strh	r3, [r0, #32]
 800ddd2:	4770      	bx	lr
 800ddd4:	ffff0000 	.word	0xffff0000

0800ddd8 <uxr_prepare_reliable_buffer_to_write>:
 800ddd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dddc:	4604      	mov	r4, r0
 800ddde:	b091      	sub	sp, #68	@ 0x44
 800dde0:	8900      	ldrh	r0, [r0, #8]
 800dde2:	89e7      	ldrh	r7, [r4, #14]
 800dde4:	6823      	ldr	r3, [r4, #0]
 800dde6:	9204      	str	r2, [sp, #16]
 800dde8:	fbb7 f2f0 	udiv	r2, r7, r0
 800ddec:	fb00 7212 	mls	r2, r0, r2, r7
 800ddf0:	b292      	uxth	r2, r2
 800ddf2:	6865      	ldr	r5, [r4, #4]
 800ddf4:	fbb5 f5f0 	udiv	r5, r5, r0
 800ddf8:	fb05 3202 	mla	r2, r5, r2, r3
 800ddfc:	3204      	adds	r2, #4
 800ddfe:	f852 ac04 	ldr.w	sl, [r2, #-4]
 800de02:	f894 b00c 	ldrb.w	fp, [r4, #12]
 800de06:	9203      	str	r2, [sp, #12]
 800de08:	4688      	mov	r8, r1
 800de0a:	f1a5 0904 	sub.w	r9, r5, #4
 800de0e:	2800      	cmp	r0, #0
 800de10:	f000 8143 	beq.w	800e09a <uxr_prepare_reliable_buffer_to_write+0x2c2>
 800de14:	2100      	movs	r1, #0
 800de16:	460e      	mov	r6, r1
 800de18:	b28a      	uxth	r2, r1
 800de1a:	fbb2 fcf0 	udiv	ip, r2, r0
 800de1e:	fb00 221c 	mls	r2, r0, ip, r2
 800de22:	b292      	uxth	r2, r2
 800de24:	fb05 f202 	mul.w	r2, r5, r2
 800de28:	3101      	adds	r1, #1
 800de2a:	589a      	ldr	r2, [r3, r2]
 800de2c:	455a      	cmp	r2, fp
 800de2e:	bf04      	itt	eq
 800de30:	3601      	addeq	r6, #1
 800de32:	b2b6      	uxtheq	r6, r6
 800de34:	4281      	cmp	r1, r0
 800de36:	d1ef      	bne.n	800de18 <uxr_prepare_reliable_buffer_to_write+0x40>
 800de38:	4650      	mov	r0, sl
 800de3a:	2104      	movs	r1, #4
 800de3c:	9605      	str	r6, [sp, #20]
 800de3e:	f7fa ff01 	bl	8008c44 <ucdr_alignment>
 800de42:	4482      	add	sl, r0
 800de44:	eb0a 0208 	add.w	r2, sl, r8
 800de48:	454a      	cmp	r2, r9
 800de4a:	f240 80ca 	bls.w	800dfe2 <uxr_prepare_reliable_buffer_to_write+0x20a>
 800de4e:	7b22      	ldrb	r2, [r4, #12]
 800de50:	4442      	add	r2, r8
 800de52:	454a      	cmp	r2, r9
 800de54:	f240 80b2 	bls.w	800dfbc <uxr_prepare_reliable_buffer_to_write+0x1e4>
 800de58:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 800de5c:	32fc      	adds	r2, #252	@ 0xfc
 800de5e:	fa1f f389 	uxth.w	r3, r9
 800de62:	441a      	add	r2, r3
 800de64:	b292      	uxth	r2, r2
 800de66:	fb06 fb02 	mul.w	fp, r6, r2
 800de6a:	45c3      	cmp	fp, r8
 800de6c:	9205      	str	r2, [sp, #20]
 800de6e:	9206      	str	r2, [sp, #24]
 800de70:	f0c0 80b3 	bcc.w	800dfda <uxr_prepare_reliable_buffer_to_write+0x202>
 800de74:	f10a 0204 	add.w	r2, sl, #4
 800de78:	454a      	cmp	r2, r9
 800de7a:	f080 80db 	bcs.w	800e034 <uxr_prepare_reliable_buffer_to_write+0x25c>
 800de7e:	f1a3 0b04 	sub.w	fp, r3, #4
 800de82:	ebab 0b0a 	sub.w	fp, fp, sl
 800de86:	9b05      	ldr	r3, [sp, #20]
 800de88:	fa1f fb8b 	uxth.w	fp, fp
 800de8c:	eba8 080b 	sub.w	r8, r8, fp
 800de90:	fbb8 fcf3 	udiv	ip, r8, r3
 800de94:	fb03 831c 	mls	r3, r3, ip, r8
 800de98:	fa1f fc8c 	uxth.w	ip, ip
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	f040 80c1 	bne.w	800e024 <uxr_prepare_reliable_buffer_to_write+0x24c>
 800dea2:	45b4      	cmp	ip, r6
 800dea4:	f200 8099 	bhi.w	800dfda <uxr_prepare_reliable_buffer_to_write+0x202>
 800dea8:	f10d 0820 	add.w	r8, sp, #32
 800deac:	f1bc 0f00 	cmp.w	ip, #0
 800deb0:	d040      	beq.n	800df34 <uxr_prepare_reliable_buffer_to_write+0x15c>
 800deb2:	f8cd a01c 	str.w	sl, [sp, #28]
 800deb6:	2600      	movs	r6, #0
 800deb8:	f8dd a014 	ldr.w	sl, [sp, #20]
 800debc:	9505      	str	r5, [sp, #20]
 800debe:	f10d 0820 	add.w	r8, sp, #32
 800dec2:	4665      	mov	r5, ip
 800dec4:	e000      	b.n	800dec8 <uxr_prepare_reliable_buffer_to_write+0xf0>
 800dec6:	46d3      	mov	fp, sl
 800dec8:	8921      	ldrh	r1, [r4, #8]
 800deca:	fbb7 f2f1 	udiv	r2, r7, r1
 800dece:	fb01 7212 	mls	r2, r1, r2, r7
 800ded2:	b292      	uxth	r2, r2
 800ded4:	6863      	ldr	r3, [r4, #4]
 800ded6:	fbb3 f3f1 	udiv	r3, r3, r1
 800deda:	6821      	ldr	r1, [r4, #0]
 800dedc:	fb02 f303 	mul.w	r3, r2, r3
 800dee0:	3304      	adds	r3, #4
 800dee2:	4419      	add	r1, r3
 800dee4:	4640      	mov	r0, r8
 800dee6:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800deea:	9200      	str	r2, [sp, #0]
 800deec:	2300      	movs	r3, #0
 800deee:	464a      	mov	r2, r9
 800def0:	f7fa fe92 	bl	8008c18 <ucdr_init_buffer_origin_offset>
 800def4:	465a      	mov	r2, fp
 800def6:	2300      	movs	r3, #0
 800def8:	210d      	movs	r1, #13
 800defa:	4640      	mov	r0, r8
 800defc:	f7fc f9ba 	bl	800a274 <uxr_buffer_submessage_header>
 800df00:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800df04:	fbb7 f2fc 	udiv	r2, r7, ip
 800df08:	fb0c 7212 	mls	r2, ip, r2, r7
 800df0c:	b292      	uxth	r2, r2
 800df0e:	6863      	ldr	r3, [r4, #4]
 800df10:	fbb3 f3fc 	udiv	r3, r3, ip
 800df14:	fb02 f303 	mul.w	r3, r2, r3
 800df18:	6822      	ldr	r2, [r4, #0]
 800df1a:	4638      	mov	r0, r7
 800df1c:	f842 9003 	str.w	r9, [r2, r3]
 800df20:	2101      	movs	r1, #1
 800df22:	f000 fabd 	bl	800e4a0 <uxr_seq_num_add>
 800df26:	3601      	adds	r6, #1
 800df28:	42ae      	cmp	r6, r5
 800df2a:	4607      	mov	r7, r0
 800df2c:	d1cb      	bne.n	800dec6 <uxr_prepare_reliable_buffer_to_write+0xee>
 800df2e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800df32:	9d05      	ldr	r5, [sp, #20]
 800df34:	8920      	ldrh	r0, [r4, #8]
 800df36:	fbb7 f1f0 	udiv	r1, r7, r0
 800df3a:	fb00 7111 	mls	r1, r0, r1, r7
 800df3e:	b289      	uxth	r1, r1
 800df40:	6863      	ldr	r3, [r4, #4]
 800df42:	fbb3 f3f0 	udiv	r3, r3, r0
 800df46:	fb01 f303 	mul.w	r3, r1, r3
 800df4a:	6821      	ldr	r1, [r4, #0]
 800df4c:	3304      	adds	r3, #4
 800df4e:	4419      	add	r1, r3
 800df50:	464a      	mov	r2, r9
 800df52:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800df56:	9000      	str	r0, [sp, #0]
 800df58:	2300      	movs	r3, #0
 800df5a:	4640      	mov	r0, r8
 800df5c:	f7fa fe5c 	bl	8008c18 <ucdr_init_buffer_origin_offset>
 800df60:	4640      	mov	r0, r8
 800df62:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800df66:	2302      	movs	r3, #2
 800df68:	fa1f f288 	uxth.w	r2, r8
 800df6c:	210d      	movs	r1, #13
 800df6e:	f7fc f981 	bl	800a274 <uxr_buffer_submessage_header>
 800df72:	8926      	ldrh	r6, [r4, #8]
 800df74:	9b03      	ldr	r3, [sp, #12]
 800df76:	7b20      	ldrb	r0, [r4, #12]
 800df78:	f1a5 0208 	sub.w	r2, r5, #8
 800df7c:	f10a 0104 	add.w	r1, sl, #4
 800df80:	fbb7 f5f6 	udiv	r5, r7, r6
 800df84:	fb06 7515 	mls	r5, r6, r5, r7
 800df88:	440b      	add	r3, r1
 800df8a:	b2ad      	uxth	r5, r5
 800df8c:	4619      	mov	r1, r3
 800df8e:	3004      	adds	r0, #4
 800df90:	6863      	ldr	r3, [r4, #4]
 800df92:	fbb3 f3f6 	udiv	r3, r3, r6
 800df96:	fb05 f303 	mul.w	r3, r5, r3
 800df9a:	6825      	ldr	r5, [r4, #0]
 800df9c:	4440      	add	r0, r8
 800df9e:	50e8      	str	r0, [r5, r3]
 800dfa0:	9d04      	ldr	r5, [sp, #16]
 800dfa2:	eba2 020a 	sub.w	r2, r2, sl
 800dfa6:	4628      	mov	r0, r5
 800dfa8:	f7fa fe48 	bl	8008c3c <ucdr_init_buffer>
 800dfac:	493c      	ldr	r1, [pc, #240]	@ (800e0a0 <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 800dfae:	4622      	mov	r2, r4
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	f7fa fe17 	bl	8008be4 <ucdr_set_on_full_buffer_callback>
 800dfb6:	81e7      	strh	r7, [r4, #14]
 800dfb8:	2001      	movs	r0, #1
 800dfba:	e00f      	b.n	800dfdc <uxr_prepare_reliable_buffer_to_write+0x204>
 800dfbc:	2101      	movs	r1, #1
 800dfbe:	89e0      	ldrh	r0, [r4, #14]
 800dfc0:	f000 fa6e 	bl	800e4a0 <uxr_seq_num_add>
 800dfc4:	8921      	ldrh	r1, [r4, #8]
 800dfc6:	4605      	mov	r5, r0
 800dfc8:	8a60      	ldrh	r0, [r4, #18]
 800dfca:	f000 fa69 	bl	800e4a0 <uxr_seq_num_add>
 800dfce:	4601      	mov	r1, r0
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	f000 fa6d 	bl	800e4b0 <uxr_seq_num_cmp>
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	dd45      	ble.n	800e066 <uxr_prepare_reliable_buffer_to_write+0x28e>
 800dfda:	2000      	movs	r0, #0
 800dfdc:	b011      	add	sp, #68	@ 0x44
 800dfde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe2:	8921      	ldrh	r1, [r4, #8]
 800dfe4:	8a60      	ldrh	r0, [r4, #18]
 800dfe6:	9205      	str	r2, [sp, #20]
 800dfe8:	f000 fa5a 	bl	800e4a0 <uxr_seq_num_add>
 800dfec:	4601      	mov	r1, r0
 800dfee:	4638      	mov	r0, r7
 800dff0:	f000 fa5e 	bl	800e4b0 <uxr_seq_num_cmp>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	9a05      	ldr	r2, [sp, #20]
 800dff8:	dcef      	bgt.n	800dfda <uxr_prepare_reliable_buffer_to_write+0x202>
 800dffa:	8926      	ldrh	r6, [r4, #8]
 800dffc:	fbb7 f5f6 	udiv	r5, r7, r6
 800e000:	fb06 7515 	mls	r5, r6, r5, r7
 800e004:	b2ad      	uxth	r5, r5
 800e006:	6863      	ldr	r3, [r4, #4]
 800e008:	6824      	ldr	r4, [r4, #0]
 800e00a:	fbb3 f3f6 	udiv	r3, r3, r6
 800e00e:	fb05 f303 	mul.w	r3, r5, r3
 800e012:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 800e016:	50e2      	str	r2, [r4, r3]
 800e018:	2300      	movs	r3, #0
 800e01a:	f8cd a000 	str.w	sl, [sp]
 800e01e:	f7fa fdfb 	bl	8008c18 <ucdr_init_buffer_origin_offset>
 800e022:	e7c9      	b.n	800dfb8 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 800e024:	f10c 0c01 	add.w	ip, ip, #1
 800e028:	fa1f fc8c 	uxth.w	ip, ip
 800e02c:	45b4      	cmp	ip, r6
 800e02e:	9306      	str	r3, [sp, #24]
 800e030:	d8d3      	bhi.n	800dfda <uxr_prepare_reliable_buffer_to_write+0x202>
 800e032:	e739      	b.n	800dea8 <uxr_prepare_reliable_buffer_to_write+0xd0>
 800e034:	4638      	mov	r0, r7
 800e036:	2101      	movs	r1, #1
 800e038:	9307      	str	r3, [sp, #28]
 800e03a:	f000 fa31 	bl	800e4a0 <uxr_seq_num_add>
 800e03e:	8921      	ldrh	r1, [r4, #8]
 800e040:	6862      	ldr	r2, [r4, #4]
 800e042:	4607      	mov	r7, r0
 800e044:	fbb0 f0f1 	udiv	r0, r0, r1
 800e048:	fb01 7010 	mls	r0, r1, r0, r7
 800e04c:	b280      	uxth	r0, r0
 800e04e:	fbb2 f1f1 	udiv	r1, r2, r1
 800e052:	6822      	ldr	r2, [r4, #0]
 800e054:	fb00 f101 	mul.w	r1, r0, r1
 800e058:	3104      	adds	r1, #4
 800e05a:	1853      	adds	r3, r2, r1
 800e05c:	9303      	str	r3, [sp, #12]
 800e05e:	f853 ac04 	ldr.w	sl, [r3, #-4]
 800e062:	9b07      	ldr	r3, [sp, #28]
 800e064:	e70b      	b.n	800de7e <uxr_prepare_reliable_buffer_to_write+0xa6>
 800e066:	8921      	ldrh	r1, [r4, #8]
 800e068:	fbb5 f2f1 	udiv	r2, r5, r1
 800e06c:	fb01 5212 	mls	r2, r1, r2, r5
 800e070:	b292      	uxth	r2, r2
 800e072:	6863      	ldr	r3, [r4, #4]
 800e074:	fbb3 f3f1 	udiv	r3, r3, r1
 800e078:	6821      	ldr	r1, [r4, #0]
 800e07a:	9804      	ldr	r0, [sp, #16]
 800e07c:	fb02 f303 	mul.w	r3, r2, r3
 800e080:	3304      	adds	r3, #4
 800e082:	7b22      	ldrb	r2, [r4, #12]
 800e084:	4419      	add	r1, r3
 800e086:	4442      	add	r2, r8
 800e088:	f841 2c04 	str.w	r2, [r1, #-4]
 800e08c:	7b23      	ldrb	r3, [r4, #12]
 800e08e:	9300      	str	r3, [sp, #0]
 800e090:	2300      	movs	r3, #0
 800e092:	f7fa fdc1 	bl	8008c18 <ucdr_init_buffer_origin_offset>
 800e096:	81e5      	strh	r5, [r4, #14]
 800e098:	e78e      	b.n	800dfb8 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 800e09a:	4606      	mov	r6, r0
 800e09c:	e6cc      	b.n	800de38 <uxr_prepare_reliable_buffer_to_write+0x60>
 800e09e:	bf00      	nop
 800e0a0:	0800dcbd 	.word	0x0800dcbd

0800e0a4 <uxr_prepare_next_reliable_buffer_to_send>:
 800e0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0a6:	4604      	mov	r4, r0
 800e0a8:	460f      	mov	r7, r1
 800e0aa:	8a00      	ldrh	r0, [r0, #16]
 800e0ac:	2101      	movs	r1, #1
 800e0ae:	4615      	mov	r5, r2
 800e0b0:	461e      	mov	r6, r3
 800e0b2:	f000 f9f5 	bl	800e4a0 <uxr_seq_num_add>
 800e0b6:	8030      	strh	r0, [r6, #0]
 800e0b8:	8922      	ldrh	r2, [r4, #8]
 800e0ba:	fbb0 f3f2 	udiv	r3, r0, r2
 800e0be:	fb02 0c13 	mls	ip, r2, r3, r0
 800e0c2:	fa1f fc8c 	uxth.w	ip, ip
 800e0c6:	6863      	ldr	r3, [r4, #4]
 800e0c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0cc:	fb0c fc03 	mul.w	ip, ip, r3
 800e0d0:	6823      	ldr	r3, [r4, #0]
 800e0d2:	89e1      	ldrh	r1, [r4, #14]
 800e0d4:	f10c 0c04 	add.w	ip, ip, #4
 800e0d8:	4463      	add	r3, ip
 800e0da:	603b      	str	r3, [r7, #0]
 800e0dc:	6823      	ldr	r3, [r4, #0]
 800e0de:	4463      	add	r3, ip
 800e0e0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e0e4:	602b      	str	r3, [r5, #0]
 800e0e6:	f000 f9e3 	bl	800e4b0 <uxr_seq_num_cmp>
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	dd01      	ble.n	800e0f2 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 800e0ee:	2000      	movs	r0, #0
 800e0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0f2:	7b23      	ldrb	r3, [r4, #12]
 800e0f4:	682a      	ldr	r2, [r5, #0]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d9f9      	bls.n	800e0ee <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800e0fa:	8a61      	ldrh	r1, [r4, #18]
 800e0fc:	8a20      	ldrh	r0, [r4, #16]
 800e0fe:	f000 f9d3 	bl	800e4a8 <uxr_seq_num_sub>
 800e102:	8923      	ldrh	r3, [r4, #8]
 800e104:	4283      	cmp	r3, r0
 800e106:	d0f2      	beq.n	800e0ee <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800e108:	8830      	ldrh	r0, [r6, #0]
 800e10a:	89e3      	ldrh	r3, [r4, #14]
 800e10c:	8220      	strh	r0, [r4, #16]
 800e10e:	4298      	cmp	r0, r3
 800e110:	d001      	beq.n	800e116 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 800e112:	2001      	movs	r0, #1
 800e114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e116:	2101      	movs	r1, #1
 800e118:	f000 f9c2 	bl	800e4a0 <uxr_seq_num_add>
 800e11c:	81e0      	strh	r0, [r4, #14]
 800e11e:	e7f8      	b.n	800e112 <uxr_prepare_next_reliable_buffer_to_send+0x6e>

0800e120 <uxr_update_output_stream_heartbeat_timestamp>:
 800e120:	b570      	push	{r4, r5, r6, lr}
 800e122:	8a01      	ldrh	r1, [r0, #16]
 800e124:	4604      	mov	r4, r0
 800e126:	8a40      	ldrh	r0, [r0, #18]
 800e128:	4615      	mov	r5, r2
 800e12a:	461e      	mov	r6, r3
 800e12c:	f000 f9c0 	bl	800e4b0 <uxr_seq_num_cmp>
 800e130:	2800      	cmp	r0, #0
 800e132:	db07      	blt.n	800e144 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 800e134:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800e138:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 800e13c:	e9c4 5606 	strd	r5, r6, [r4, #24]
 800e140:	2000      	movs	r0, #0
 800e142:	bd70      	pop	{r4, r5, r6, pc}
 800e144:	f894 3020 	ldrb.w	r3, [r4, #32]
 800e148:	b953      	cbnz	r3, 800e160 <uxr_update_output_stream_heartbeat_timestamp+0x40>
 800e14a:	2301      	movs	r3, #1
 800e14c:	f884 3020 	strb.w	r3, [r4, #32]
 800e150:	3564      	adds	r5, #100	@ 0x64
 800e152:	f04f 0000 	mov.w	r0, #0
 800e156:	f146 0600 	adc.w	r6, r6, #0
 800e15a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 800e15e:	bd70      	pop	{r4, r5, r6, pc}
 800e160:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e164:	428d      	cmp	r5, r1
 800e166:	eb76 0202 	sbcs.w	r2, r6, r2
 800e16a:	dbf1      	blt.n	800e150 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 800e16c:	3301      	adds	r3, #1
 800e16e:	3564      	adds	r5, #100	@ 0x64
 800e170:	f884 3020 	strb.w	r3, [r4, #32]
 800e174:	f04f 0001 	mov.w	r0, #1
 800e178:	f146 0600 	adc.w	r6, r6, #0
 800e17c:	e7ed      	b.n	800e15a <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 800e17e:	bf00      	nop

0800e180 <uxr_begin_output_nack_buffer_it>:
 800e180:	8a40      	ldrh	r0, [r0, #18]
 800e182:	4770      	bx	lr

0800e184 <uxr_next_reliable_nack_buffer_to_send>:
 800e184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e188:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 800e18c:	f1b8 0f00 	cmp.w	r8, #0
 800e190:	d104      	bne.n	800e19c <uxr_next_reliable_nack_buffer_to_send+0x18>
 800e192:	f04f 0800 	mov.w	r8, #0
 800e196:	4640      	mov	r0, r8
 800e198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e19c:	4604      	mov	r4, r0
 800e19e:	460e      	mov	r6, r1
 800e1a0:	8818      	ldrh	r0, [r3, #0]
 800e1a2:	4617      	mov	r7, r2
 800e1a4:	461d      	mov	r5, r3
 800e1a6:	e019      	b.n	800e1dc <uxr_next_reliable_nack_buffer_to_send+0x58>
 800e1a8:	8921      	ldrh	r1, [r4, #8]
 800e1aa:	8828      	ldrh	r0, [r5, #0]
 800e1ac:	fbb0 fcf1 	udiv	ip, r0, r1
 800e1b0:	e9d4 3200 	ldrd	r3, r2, [r4]
 800e1b4:	fb01 0c1c 	mls	ip, r1, ip, r0
 800e1b8:	fa1f fc8c 	uxth.w	ip, ip
 800e1bc:	fbb2 f2f1 	udiv	r2, r2, r1
 800e1c0:	fb02 fc0c 	mul.w	ip, r2, ip
 800e1c4:	f10c 0c04 	add.w	ip, ip, #4
 800e1c8:	4463      	add	r3, ip
 800e1ca:	6033      	str	r3, [r6, #0]
 800e1cc:	6823      	ldr	r3, [r4, #0]
 800e1ce:	4463      	add	r3, ip
 800e1d0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e1d4:	603b      	str	r3, [r7, #0]
 800e1d6:	7b22      	ldrb	r2, [r4, #12]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d1dc      	bne.n	800e196 <uxr_next_reliable_nack_buffer_to_send+0x12>
 800e1dc:	2101      	movs	r1, #1
 800e1de:	f000 f95f 	bl	800e4a0 <uxr_seq_num_add>
 800e1e2:	8028      	strh	r0, [r5, #0]
 800e1e4:	8a21      	ldrh	r1, [r4, #16]
 800e1e6:	f000 f963 	bl	800e4b0 <uxr_seq_num_cmp>
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	dddc      	ble.n	800e1a8 <uxr_next_reliable_nack_buffer_to_send+0x24>
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 800e1f4:	e7cd      	b.n	800e192 <uxr_next_reliable_nack_buffer_to_send+0xe>
 800e1f6:	bf00      	nop

0800e1f8 <uxr_process_acknack>:
 800e1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	460e      	mov	r6, r1
 800e1fe:	4610      	mov	r0, r2
 800e200:	2101      	movs	r1, #1
 800e202:	f000 f951 	bl	800e4a8 <uxr_seq_num_sub>
 800e206:	8a61      	ldrh	r1, [r4, #18]
 800e208:	f000 f94e 	bl	800e4a8 <uxr_seq_num_sub>
 800e20c:	b1c0      	cbz	r0, 800e240 <uxr_process_acknack+0x48>
 800e20e:	4605      	mov	r5, r0
 800e210:	2700      	movs	r7, #0
 800e212:	2101      	movs	r1, #1
 800e214:	8a60      	ldrh	r0, [r4, #18]
 800e216:	f000 f943 	bl	800e4a0 <uxr_seq_num_add>
 800e21a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800e21e:	fbb0 f1fc 	udiv	r1, r0, ip
 800e222:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e226:	fb0c 0111 	mls	r1, ip, r1, r0
 800e22a:	b289      	uxth	r1, r1
 800e22c:	3701      	adds	r7, #1
 800e22e:	fbb3 f3fc 	udiv	r3, r3, ip
 800e232:	fb01 f303 	mul.w	r3, r1, r3
 800e236:	42bd      	cmp	r5, r7
 800e238:	7b21      	ldrb	r1, [r4, #12]
 800e23a:	8260      	strh	r0, [r4, #18]
 800e23c:	50d1      	str	r1, [r2, r3]
 800e23e:	d1e8      	bne.n	800e212 <uxr_process_acknack+0x1a>
 800e240:	3e00      	subs	r6, #0
 800e242:	f04f 0300 	mov.w	r3, #0
 800e246:	bf18      	it	ne
 800e248:	2601      	movne	r6, #1
 800e24a:	f884 3020 	strb.w	r3, [r4, #32]
 800e24e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 800e252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e254 <uxr_is_output_up_to_date>:
 800e254:	8a01      	ldrh	r1, [r0, #16]
 800e256:	8a40      	ldrh	r0, [r0, #18]
 800e258:	b508      	push	{r3, lr}
 800e25a:	f000 f929 	bl	800e4b0 <uxr_seq_num_cmp>
 800e25e:	fab0 f080 	clz	r0, r0
 800e262:	0940      	lsrs	r0, r0, #5
 800e264:	bd08      	pop	{r3, pc}
 800e266:	bf00      	nop

0800e268 <get_available_free_slots>:
 800e268:	8901      	ldrh	r1, [r0, #8]
 800e26a:	b1c1      	cbz	r1, 800e29e <get_available_free_slots+0x36>
 800e26c:	b530      	push	{r4, r5, lr}
 800e26e:	2200      	movs	r2, #0
 800e270:	6843      	ldr	r3, [r0, #4]
 800e272:	6805      	ldr	r5, [r0, #0]
 800e274:	7b04      	ldrb	r4, [r0, #12]
 800e276:	fbb3 fef1 	udiv	lr, r3, r1
 800e27a:	4610      	mov	r0, r2
 800e27c:	b293      	uxth	r3, r2
 800e27e:	fbb3 fcf1 	udiv	ip, r3, r1
 800e282:	fb01 331c 	mls	r3, r1, ip, r3
 800e286:	b29b      	uxth	r3, r3
 800e288:	fb0e f303 	mul.w	r3, lr, r3
 800e28c:	3201      	adds	r2, #1
 800e28e:	58eb      	ldr	r3, [r5, r3]
 800e290:	429c      	cmp	r4, r3
 800e292:	bf04      	itt	eq
 800e294:	3001      	addeq	r0, #1
 800e296:	b280      	uxtheq	r0, r0
 800e298:	4291      	cmp	r1, r2
 800e29a:	d1ef      	bne.n	800e27c <get_available_free_slots+0x14>
 800e29c:	bd30      	pop	{r4, r5, pc}
 800e29e:	4608      	mov	r0, r1
 800e2a0:	4770      	bx	lr
 800e2a2:	bf00      	nop

0800e2a4 <uxr_buffer_cancel_data>:
 800e2a4:	b510      	push	{r4, lr}
 800e2a6:	b094      	sub	sp, #80	@ 0x50
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	9301      	str	r3, [sp, #4]
 800e2ac:	9205      	str	r2, [sp, #20]
 800e2ae:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	f88d 301e 	strb.w	r3, [sp, #30]
 800e2b8:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800e2bc:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800e2c0:	2308      	movs	r3, #8
 800e2c2:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800e2c6:	9300      	str	r3, [sp, #0]
 800e2c8:	2210      	movs	r2, #16
 800e2ca:	ab0c      	add	r3, sp, #48	@ 0x30
 800e2cc:	4604      	mov	r4, r0
 800e2ce:	f7fb fd4d 	bl	8009d6c <uxr_prepare_stream_to_write_submessage>
 800e2d2:	b918      	cbnz	r0, 800e2dc <uxr_buffer_cancel_data+0x38>
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	b014      	add	sp, #80	@ 0x50
 800e2da:	bd10      	pop	{r4, pc}
 800e2dc:	9905      	ldr	r1, [sp, #20]
 800e2de:	aa06      	add	r2, sp, #24
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	f7fb fe7d 	bl	8009fe0 <uxr_init_base_object_request>
 800e2e6:	a906      	add	r1, sp, #24
 800e2e8:	4604      	mov	r4, r0
 800e2ea:	a80c      	add	r0, sp, #48	@ 0x30
 800e2ec:	f7fd f846 	bl	800b37c <uxr_serialize_READ_DATA_Payload>
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	b014      	add	sp, #80	@ 0x50
 800e2f4:	bd10      	pop	{r4, pc}
 800e2f6:	bf00      	nop

0800e2f8 <read_submessage_format>:
 800e2f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2fc:	b095      	sub	sp, #84	@ 0x54
 800e2fe:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 800e302:	b113      	cbz	r3, 800e30a <read_submessage_format+0x12>
 800e304:	b015      	add	sp, #84	@ 0x54
 800e306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e30a:	460c      	mov	r4, r1
 800e30c:	4616      	mov	r6, r2
 800e30e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800e312:	461d      	mov	r5, r3
 800e314:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800e316:	9304      	str	r3, [sp, #16]
 800e318:	1a52      	subs	r2, r2, r1
 800e31a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e31c:	9305      	str	r3, [sp, #20]
 800e31e:	4680      	mov	r8, r0
 800e320:	a80c      	add	r0, sp, #48	@ 0x30
 800e322:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 800e326:	f7fa fc89 	bl	8008c3c <ucdr_init_buffer>
 800e32a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e32e:	a80c      	add	r0, sp, #48	@ 0x30
 800e330:	f7fa fc58 	bl	8008be4 <ucdr_set_on_full_buffer_callback>
 800e334:	69e3      	ldr	r3, [r4, #28]
 800e336:	b35b      	cbz	r3, 800e390 <read_submessage_format+0x98>
 800e338:	f1b9 0f07 	cmp.w	r9, #7
 800e33c:	751d      	strb	r5, [r3, #20]
 800e33e:	d043      	beq.n	800e3c8 <read_submessage_format+0xd0>
 800e340:	f1b9 0f08 	cmp.w	r9, #8
 800e344:	d032      	beq.n	800e3ac <read_submessage_format+0xb4>
 800e346:	f1b9 0f06 	cmp.w	r9, #6
 800e34a:	d008      	beq.n	800e35e <read_submessage_format+0x66>
 800e34c:	2201      	movs	r2, #1
 800e34e:	751a      	strb	r2, [r3, #20]
 800e350:	4631      	mov	r1, r6
 800e352:	4620      	mov	r0, r4
 800e354:	f7fa fcc2 	bl	8008cdc <ucdr_advance_buffer>
 800e358:	b015      	add	sp, #84	@ 0x54
 800e35a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e35e:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 800e362:	2d00      	cmp	r5, #0
 800e364:	d0f2      	beq.n	800e34c <read_submessage_format+0x54>
 800e366:	ab0c      	add	r3, sp, #48	@ 0x30
 800e368:	e9cd 3600 	strd	r3, r6, [sp]
 800e36c:	2306      	movs	r3, #6
 800e36e:	f88d 3016 	strb.w	r3, [sp, #22]
 800e372:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 800e376:	9302      	str	r3, [sp, #8]
 800e378:	463a      	mov	r2, r7
 800e37a:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800e37e:	4640      	mov	r0, r8
 800e380:	47a8      	blx	r5
 800e382:	69e3      	ldr	r3, [r4, #28]
 800e384:	2201      	movs	r2, #1
 800e386:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d1de      	bne.n	800e34c <read_submessage_format+0x54>
 800e38e:	e7df      	b.n	800e350 <read_submessage_format+0x58>
 800e390:	f1b9 0f07 	cmp.w	r9, #7
 800e394:	d032      	beq.n	800e3fc <read_submessage_format+0x104>
 800e396:	f1b9 0f08 	cmp.w	r9, #8
 800e39a:	d02a      	beq.n	800e3f2 <read_submessage_format+0xfa>
 800e39c:	f1b9 0f06 	cmp.w	r9, #6
 800e3a0:	d1d6      	bne.n	800e350 <read_submessage_format+0x58>
 800e3a2:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 800e3a6:	2d00      	cmp	r5, #0
 800e3a8:	d1dd      	bne.n	800e366 <read_submessage_format+0x6e>
 800e3aa:	e7d1      	b.n	800e350 <read_submessage_format+0x58>
 800e3ac:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 800e3b0:	2a00      	cmp	r2, #0
 800e3b2:	d0cb      	beq.n	800e34c <read_submessage_format+0x54>
 800e3b4:	a906      	add	r1, sp, #24
 800e3b6:	a80c      	add	r0, sp, #48	@ 0x30
 800e3b8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e3ba:	f7fd f87f 	bl	800b4bc <uxr_deserialize_SampleIdentity>
 800e3be:	bb28      	cbnz	r0, 800e40c <read_submessage_format+0x114>
 800e3c0:	69e3      	ldr	r3, [r4, #28]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d1c2      	bne.n	800e34c <read_submessage_format+0x54>
 800e3c6:	e7c3      	b.n	800e350 <read_submessage_format+0x58>
 800e3c8:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 800e3cc:	b16a      	cbz	r2, 800e3ea <read_submessage_format+0xf2>
 800e3ce:	a906      	add	r1, sp, #24
 800e3d0:	a80c      	add	r0, sp, #48	@ 0x30
 800e3d2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e3d4:	f7fc fd86 	bl	800aee4 <uxr_deserialize_BaseObjectRequest>
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	d13a      	bne.n	800e452 <read_submessage_format+0x15a>
 800e3dc:	68a2      	ldr	r2, [r4, #8]
 800e3de:	69e3      	ldr	r3, [r4, #28]
 800e3e0:	4432      	add	r2, r6
 800e3e2:	60a2      	str	r2, [r4, #8]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d1b1      	bne.n	800e34c <read_submessage_format+0x54>
 800e3e8:	e7b2      	b.n	800e350 <read_submessage_format+0x58>
 800e3ea:	68a2      	ldr	r2, [r4, #8]
 800e3ec:	4432      	add	r2, r6
 800e3ee:	60a2      	str	r2, [r4, #8]
 800e3f0:	e7ac      	b.n	800e34c <read_submessage_format+0x54>
 800e3f2:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d1dc      	bne.n	800e3b4 <read_submessage_format+0xbc>
 800e3fa:	e7a9      	b.n	800e350 <read_submessage_format+0x58>
 800e3fc:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 800e400:	2b00      	cmp	r3, #0
 800e402:	d1e4      	bne.n	800e3ce <read_submessage_format+0xd6>
 800e404:	68a3      	ldr	r3, [r4, #8]
 800e406:	4433      	add	r3, r6
 800e408:	60a3      	str	r3, [r4, #8]
 800e40a:	e7a1      	b.n	800e350 <read_submessage_format+0x58>
 800e40c:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e410:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e412:	1a52      	subs	r2, r2, r1
 800e414:	1aed      	subs	r5, r5, r3
 800e416:	a80c      	add	r0, sp, #48	@ 0x30
 800e418:	f7fa fc10 	bl	8008c3c <ucdr_init_buffer>
 800e41c:	4435      	add	r5, r6
 800e41e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e422:	a80c      	add	r0, sp, #48	@ 0x30
 800e424:	f7fa fbde 	bl	8008be4 <ucdr_set_on_full_buffer_callback>
 800e428:	b2ad      	uxth	r5, r5
 800e42a:	ab0c      	add	r3, sp, #48	@ 0x30
 800e42c:	9300      	str	r3, [sp, #0]
 800e42e:	9501      	str	r5, [sp, #4]
 800e430:	2108      	movs	r1, #8
 800e432:	f88d 1016 	strb.w	r1, [sp, #22]
 800e436:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 800e43a:	9102      	str	r1, [sp, #8]
 800e43c:	ab06      	add	r3, sp, #24
 800e43e:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 800e442:	9905      	ldr	r1, [sp, #20]
 800e444:	463a      	mov	r2, r7
 800e446:	4640      	mov	r0, r8
 800e448:	47a8      	blx	r5
 800e44a:	2301      	movs	r3, #1
 800e44c:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 800e450:	e7b6      	b.n	800e3c0 <read_submessage_format+0xc8>
 800e452:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e456:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e458:	1a52      	subs	r2, r2, r1
 800e45a:	1aed      	subs	r5, r5, r3
 800e45c:	a80c      	add	r0, sp, #48	@ 0x30
 800e45e:	f7fa fbed 	bl	8008c3c <ucdr_init_buffer>
 800e462:	4435      	add	r5, r6
 800e464:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e468:	a80c      	add	r0, sp, #48	@ 0x30
 800e46a:	f7fa fbbb 	bl	8008be4 <ucdr_set_on_full_buffer_callback>
 800e46e:	b2ad      	uxth	r5, r5
 800e470:	ab0c      	add	r3, sp, #48	@ 0x30
 800e472:	9300      	str	r3, [sp, #0]
 800e474:	9501      	str	r5, [sp, #4]
 800e476:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800e47a:	2107      	movs	r1, #7
 800e47c:	f88d 1016 	strb.w	r1, [sp, #22]
 800e480:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 800e484:	9102      	str	r1, [sp, #8]
 800e486:	ba5b      	rev16	r3, r3
 800e488:	b29b      	uxth	r3, r3
 800e48a:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 800e48e:	9905      	ldr	r1, [sp, #20]
 800e490:	463a      	mov	r2, r7
 800e492:	4640      	mov	r0, r8
 800e494:	47a8      	blx	r5
 800e496:	2301      	movs	r3, #1
 800e498:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 800e49c:	e79e      	b.n	800e3dc <read_submessage_format+0xe4>
 800e49e:	bf00      	nop

0800e4a0 <uxr_seq_num_add>:
 800e4a0:	4408      	add	r0, r1
 800e4a2:	b280      	uxth	r0, r0
 800e4a4:	4770      	bx	lr
 800e4a6:	bf00      	nop

0800e4a8 <uxr_seq_num_sub>:
 800e4a8:	1a40      	subs	r0, r0, r1
 800e4aa:	b280      	uxth	r0, r0
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop

0800e4b0 <uxr_seq_num_cmp>:
 800e4b0:	4288      	cmp	r0, r1
 800e4b2:	d010      	beq.n	800e4d6 <uxr_seq_num_cmp+0x26>
 800e4b4:	d207      	bcs.n	800e4c6 <uxr_seq_num_cmp+0x16>
 800e4b6:	1a09      	subs	r1, r1, r0
 800e4b8:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800e4bc:	bfb4      	ite	lt
 800e4be:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
 800e4c2:	2001      	movge	r0, #1
 800e4c4:	4770      	bx	lr
 800e4c6:	1a41      	subs	r1, r0, r1
 800e4c8:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800e4cc:	bfcc      	ite	gt
 800e4ce:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 800e4d2:	2001      	movle	r0, #1
 800e4d4:	4770      	bx	lr
 800e4d6:	2000      	movs	r0, #0
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop

0800e4dc <uxr_init_framing_io>:
 800e4dc:	2300      	movs	r3, #0
 800e4de:	7041      	strb	r1, [r0, #1]
 800e4e0:	7003      	strb	r3, [r0, #0]
 800e4e2:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800e4e4:	4770      	bx	lr
 800e4e6:	bf00      	nop

0800e4e8 <uxr_write_framed_msg>:
 800e4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ec:	f890 c001 	ldrb.w	ip, [r0, #1]
 800e4f0:	4617      	mov	r7, r2
 800e4f2:	227e      	movs	r2, #126	@ 0x7e
 800e4f4:	b085      	sub	sp, #20
 800e4f6:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 800e4fa:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 800e4fe:	2a01      	cmp	r2, #1
 800e500:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800e504:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 800e508:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e50c:	4604      	mov	r4, r0
 800e50e:	460e      	mov	r6, r1
 800e510:	469a      	mov	sl, r3
 800e512:	f240 812e 	bls.w	800e772 <uxr_write_framed_msg+0x28a>
 800e516:	2003      	movs	r0, #3
 800e518:	2102      	movs	r1, #2
 800e51a:	f04f 0905 	mov.w	r9, #5
 800e51e:	2204      	movs	r2, #4
 800e520:	4686      	mov	lr, r0
 800e522:	460b      	mov	r3, r1
 800e524:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 800e528:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 800e52c:	f1bc 0f01 	cmp.w	ip, #1
 800e530:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e534:	4421      	add	r1, r4
 800e536:	f240 8110 	bls.w	800e75a <uxr_write_framed_msg+0x272>
 800e53a:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800e53e:	fa5f fc8b 	uxtb.w	ip, fp
 800e542:	f3cb 2107 	ubfx	r1, fp, #8, #8
 800e546:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 800e54a:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 800e54e:	f1be 0f01 	cmp.w	lr, #1
 800e552:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 800e556:	b2ed      	uxtb	r5, r5
 800e558:	d94c      	bls.n	800e5f4 <uxr_write_framed_msg+0x10c>
 800e55a:	4420      	add	r0, r4
 800e55c:	2d01      	cmp	r5, #1
 800e55e:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800e562:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e566:	d95d      	bls.n	800e624 <uxr_write_framed_msg+0x13c>
 800e568:	18a0      	adds	r0, r4, r2
 800e56a:	3201      	adds	r2, #1
 800e56c:	b2d2      	uxtb	r2, r2
 800e56e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e572:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e576:	f1bb 0f00 	cmp.w	fp, #0
 800e57a:	f000 8108 	beq.w	800e78e <uxr_write_framed_msg+0x2a6>
 800e57e:	f04f 0c00 	mov.w	ip, #0
 800e582:	4661      	mov	r1, ip
 800e584:	46de      	mov	lr, fp
 800e586:	46e3      	mov	fp, ip
 800e588:	46d4      	mov	ip, sl
 800e58a:	468a      	mov	sl, r1
 800e58c:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 800e798 <uxr_write_framed_msg+0x2b0>
 800e590:	f81c 300a 	ldrb.w	r3, [ip, sl]
 800e594:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800e598:	2901      	cmp	r1, #1
 800e59a:	d91b      	bls.n	800e5d4 <uxr_write_framed_msg+0xec>
 800e59c:	2a29      	cmp	r2, #41	@ 0x29
 800e59e:	d84e      	bhi.n	800e63e <uxr_write_framed_msg+0x156>
 800e5a0:	18a1      	adds	r1, r4, r2
 800e5a2:	3201      	adds	r2, #1
 800e5a4:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800e5a8:	b2d2      	uxtb	r2, r2
 800e5aa:	ea8b 0303 	eor.w	r3, fp, r3
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e5b4:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 800e5b8:	f10a 0a01 	add.w	sl, sl, #1
 800e5bc:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 800e5c0:	45d6      	cmp	lr, sl
 800e5c2:	d95a      	bls.n	800e67a <uxr_write_framed_msg+0x192>
 800e5c4:	f81c 300a 	ldrb.w	r3, [ip, sl]
 800e5c8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e5cc:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800e5d0:	2901      	cmp	r1, #1
 800e5d2:	d8e3      	bhi.n	800e59c <uxr_write_framed_msg+0xb4>
 800e5d4:	1c51      	adds	r1, r2, #1
 800e5d6:	b2c9      	uxtb	r1, r1
 800e5d8:	2929      	cmp	r1, #41	@ 0x29
 800e5da:	d830      	bhi.n	800e63e <uxr_write_framed_msg+0x156>
 800e5dc:	18a1      	adds	r1, r4, r2
 800e5de:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 800e5e2:	3202      	adds	r2, #2
 800e5e4:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800e5e8:	f083 0020 	eor.w	r0, r3, #32
 800e5ec:	b2d2      	uxtb	r2, r2
 800e5ee:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 800e5f2:	e7da      	b.n	800e5aa <uxr_write_framed_msg+0xc2>
 800e5f4:	eb04 0e00 	add.w	lr, r4, r0
 800e5f8:	f08c 0c20 	eor.w	ip, ip, #32
 800e5fc:	1c82      	adds	r2, r0, #2
 800e5fe:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 800e602:	b2d2      	uxtb	r2, r2
 800e604:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800e608:	2d01      	cmp	r5, #1
 800e60a:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 800e60e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e612:	d907      	bls.n	800e624 <uxr_write_framed_msg+0x13c>
 800e614:	4422      	add	r2, r4
 800e616:	3003      	adds	r0, #3
 800e618:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 800e61c:	b2c2      	uxtb	r2, r0
 800e61e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e622:	e7ac      	b.n	800e57e <uxr_write_framed_msg+0x96>
 800e624:	18a0      	adds	r0, r4, r2
 800e626:	f081 0120 	eor.w	r1, r1, #32
 800e62a:	3202      	adds	r2, #2
 800e62c:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 800e630:	b2d2      	uxtb	r2, r2
 800e632:	217d      	movs	r1, #125	@ 0x7d
 800e634:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e638:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e63c:	e79f      	b.n	800e57e <uxr_write_framed_msg+0x96>
 800e63e:	e9cd ba00 	strd	fp, sl, [sp]
 800e642:	2500      	movs	r5, #0
 800e644:	46e2      	mov	sl, ip
 800e646:	46f3      	mov	fp, lr
 800e648:	e000      	b.n	800e64c <uxr_write_framed_msg+0x164>
 800e64a:	b190      	cbz	r0, 800e672 <uxr_write_framed_msg+0x18a>
 800e64c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e650:	1b52      	subs	r2, r2, r5
 800e652:	4643      	mov	r3, r8
 800e654:	4421      	add	r1, r4
 800e656:	4638      	mov	r0, r7
 800e658:	47b0      	blx	r6
 800e65a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e65e:	4405      	add	r5, r0
 800e660:	4295      	cmp	r5, r2
 800e662:	d3f2      	bcc.n	800e64a <uxr_write_framed_msg+0x162>
 800e664:	46d4      	mov	ip, sl
 800e666:	46de      	mov	lr, fp
 800e668:	f8dd a004 	ldr.w	sl, [sp, #4]
 800e66c:	f8dd b000 	ldr.w	fp, [sp]
 800e670:	d06f      	beq.n	800e752 <uxr_write_framed_msg+0x26a>
 800e672:	2000      	movs	r0, #0
 800e674:	b005      	add	sp, #20
 800e676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e67a:	46dc      	mov	ip, fp
 800e67c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e680:	f8ad c00c 	strh.w	ip, [sp, #12]
 800e684:	46f3      	mov	fp, lr
 800e686:	fa5f fc8c 	uxtb.w	ip, ip
 800e68a:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800e68e:	2b01      	cmp	r3, #1
 800e690:	f04f 0900 	mov.w	r9, #0
 800e694:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 800e698:	d930      	bls.n	800e6fc <uxr_write_framed_msg+0x214>
 800e69a:	2a29      	cmp	r2, #41	@ 0x29
 800e69c:	d91c      	bls.n	800e6d8 <uxr_write_framed_msg+0x1f0>
 800e69e:	2500      	movs	r5, #0
 800e6a0:	e001      	b.n	800e6a6 <uxr_write_framed_msg+0x1be>
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	d0e5      	beq.n	800e672 <uxr_write_framed_msg+0x18a>
 800e6a6:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e6aa:	1b52      	subs	r2, r2, r5
 800e6ac:	4643      	mov	r3, r8
 800e6ae:	4421      	add	r1, r4
 800e6b0:	4638      	mov	r0, r7
 800e6b2:	47b0      	blx	r6
 800e6b4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e6b8:	4405      	add	r5, r0
 800e6ba:	4295      	cmp	r5, r2
 800e6bc:	d3f1      	bcc.n	800e6a2 <uxr_write_framed_msg+0x1ba>
 800e6be:	d1d8      	bne.n	800e672 <uxr_write_framed_msg+0x18a>
 800e6c0:	f109 0310 	add.w	r3, r9, #16
 800e6c4:	446b      	add	r3, sp
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 800e6cc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e6d0:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d911      	bls.n	800e6fc <uxr_write_framed_msg+0x214>
 800e6d8:	18a3      	adds	r3, r4, r2
 800e6da:	3201      	adds	r2, #1
 800e6dc:	b2d2      	uxtb	r2, r2
 800e6de:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 800e6e2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e6e6:	f1b9 0f00 	cmp.w	r9, #0
 800e6ea:	d119      	bne.n	800e720 <uxr_write_framed_msg+0x238>
 800e6ec:	f89d c00d 	ldrb.w	ip, [sp, #13]
 800e6f0:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	f04f 0901 	mov.w	r9, #1
 800e6fa:	d8ce      	bhi.n	800e69a <uxr_write_framed_msg+0x1b2>
 800e6fc:	1c53      	adds	r3, r2, #1
 800e6fe:	b2db      	uxtb	r3, r3
 800e700:	2b29      	cmp	r3, #41	@ 0x29
 800e702:	d8cc      	bhi.n	800e69e <uxr_write_framed_msg+0x1b6>
 800e704:	18a3      	adds	r3, r4, r2
 800e706:	3202      	adds	r2, #2
 800e708:	f08c 0c20 	eor.w	ip, ip, #32
 800e70c:	b2d2      	uxtb	r2, r2
 800e70e:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 800e712:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 800e716:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e71a:	f1b9 0f00 	cmp.w	r9, #0
 800e71e:	d0e5      	beq.n	800e6ec <uxr_write_framed_msg+0x204>
 800e720:	2500      	movs	r5, #0
 800e722:	e001      	b.n	800e728 <uxr_write_framed_msg+0x240>
 800e724:	2800      	cmp	r0, #0
 800e726:	d0a4      	beq.n	800e672 <uxr_write_framed_msg+0x18a>
 800e728:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e72c:	1b52      	subs	r2, r2, r5
 800e72e:	4643      	mov	r3, r8
 800e730:	4421      	add	r1, r4
 800e732:	4638      	mov	r0, r7
 800e734:	47b0      	blx	r6
 800e736:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e73a:	4405      	add	r5, r0
 800e73c:	4295      	cmp	r5, r2
 800e73e:	d3f1      	bcc.n	800e724 <uxr_write_framed_msg+0x23c>
 800e740:	d197      	bne.n	800e672 <uxr_write_framed_msg+0x18a>
 800e742:	2300      	movs	r3, #0
 800e744:	fa1f f08b 	uxth.w	r0, fp
 800e748:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e74c:	b005      	add	sp, #20
 800e74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e752:	2300      	movs	r3, #0
 800e754:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e758:	e732      	b.n	800e5c0 <uxr_write_framed_msg+0xd8>
 800e75a:	44a6      	add	lr, r4
 800e75c:	f085 0520 	eor.w	r5, r5, #32
 800e760:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800e764:	4610      	mov	r0, r2
 800e766:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 800e76a:	464a      	mov	r2, r9
 800e76c:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 800e770:	e6e5      	b.n	800e53e <uxr_write_framed_msg+0x56>
 800e772:	f08c 0c20 	eor.w	ip, ip, #32
 800e776:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 800e77a:	2103      	movs	r1, #3
 800e77c:	2004      	movs	r0, #4
 800e77e:	f04f 0906 	mov.w	r9, #6
 800e782:	2205      	movs	r2, #5
 800e784:	4686      	mov	lr, r0
 800e786:	460b      	mov	r3, r1
 800e788:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800e78c:	e6ca      	b.n	800e524 <uxr_write_framed_msg+0x3c>
 800e78e:	f8ad b00c 	strh.w	fp, [sp, #12]
 800e792:	46dc      	mov	ip, fp
 800e794:	e779      	b.n	800e68a <uxr_write_framed_msg+0x1a2>
 800e796:	bf00      	nop
 800e798:	08011b7c 	.word	0x08011b7c

0800e79c <uxr_framing_read_transport>:
 800e79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	b083      	sub	sp, #12
 800e7a4:	461f      	mov	r7, r3
 800e7a6:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800e7aa:	4689      	mov	r9, r1
 800e7ac:	4692      	mov	sl, r2
 800e7ae:	f7fb fda7 	bl	800a300 <uxr_millis>
 800e7b2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e7b6:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800e7ba:	42b3      	cmp	r3, r6
 800e7bc:	4680      	mov	r8, r0
 800e7be:	d062      	beq.n	800e886 <uxr_framing_read_transport+0xea>
 800e7c0:	d81c      	bhi.n	800e7fc <uxr_framing_read_transport+0x60>
 800e7c2:	1e75      	subs	r5, r6, #1
 800e7c4:	1aed      	subs	r5, r5, r3
 800e7c6:	b2ed      	uxtb	r5, r5
 800e7c8:	2600      	movs	r6, #0
 800e7ca:	455d      	cmp	r5, fp
 800e7cc:	d81f      	bhi.n	800e80e <uxr_framing_read_transport+0x72>
 800e7ce:	19ab      	adds	r3, r5, r6
 800e7d0:	455b      	cmp	r3, fp
 800e7d2:	bf84      	itt	hi
 800e7d4:	ebab 0b05 	subhi.w	fp, fp, r5
 800e7d8:	fa5f f68b 	uxtbhi.w	r6, fp
 800e7dc:	b9e5      	cbnz	r5, 800e818 <uxr_framing_read_transport+0x7c>
 800e7de:	f04f 0b00 	mov.w	fp, #0
 800e7e2:	f7fb fd8d 	bl	800a300 <uxr_millis>
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	eba0 0108 	sub.w	r1, r0, r8
 800e7ec:	1a5b      	subs	r3, r3, r1
 800e7ee:	4658      	mov	r0, fp
 800e7f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e7f4:	603b      	str	r3, [r7, #0]
 800e7f6:	b003      	add	sp, #12
 800e7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7fc:	2e00      	cmp	r6, #0
 800e7fe:	d04a      	beq.n	800e896 <uxr_framing_read_transport+0xfa>
 800e800:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 800e804:	b2dd      	uxtb	r5, r3
 800e806:	3e01      	subs	r6, #1
 800e808:	455d      	cmp	r5, fp
 800e80a:	b2f6      	uxtb	r6, r6
 800e80c:	d9df      	bls.n	800e7ce <uxr_framing_read_transport+0x32>
 800e80e:	fa5f f58b 	uxtb.w	r5, fp
 800e812:	2600      	movs	r6, #0
 800e814:	2d00      	cmp	r5, #0
 800e816:	d0e2      	beq.n	800e7de <uxr_framing_read_transport+0x42>
 800e818:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e81c:	3102      	adds	r1, #2
 800e81e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e820:	9300      	str	r3, [sp, #0]
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	4421      	add	r1, r4
 800e826:	462a      	mov	r2, r5
 800e828:	4650      	mov	r0, sl
 800e82a:	47c8      	blx	r9
 800e82c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e830:	4a1b      	ldr	r2, [pc, #108]	@ (800e8a0 <uxr_framing_read_transport+0x104>)
 800e832:	4403      	add	r3, r0
 800e834:	0859      	lsrs	r1, r3, #1
 800e836:	4683      	mov	fp, r0
 800e838:	fba2 0101 	umull	r0, r1, r2, r1
 800e83c:	0889      	lsrs	r1, r1, #2
 800e83e:	222a      	movs	r2, #42	@ 0x2a
 800e840:	fb02 3111 	mls	r1, r2, r1, r3
 800e844:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800e848:	f1bb 0f00 	cmp.w	fp, #0
 800e84c:	d0c7      	beq.n	800e7de <uxr_framing_read_transport+0x42>
 800e84e:	45ab      	cmp	fp, r5
 800e850:	d1c7      	bne.n	800e7e2 <uxr_framing_read_transport+0x46>
 800e852:	2e00      	cmp	r6, #0
 800e854:	d0c5      	beq.n	800e7e2 <uxr_framing_read_transport+0x46>
 800e856:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e858:	9300      	str	r3, [sp, #0]
 800e85a:	3102      	adds	r1, #2
 800e85c:	4632      	mov	r2, r6
 800e85e:	4421      	add	r1, r4
 800e860:	2300      	movs	r3, #0
 800e862:	4650      	mov	r0, sl
 800e864:	47c8      	blx	r9
 800e866:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e86a:	4a0d      	ldr	r2, [pc, #52]	@ (800e8a0 <uxr_framing_read_transport+0x104>)
 800e86c:	4403      	add	r3, r0
 800e86e:	0859      	lsrs	r1, r3, #1
 800e870:	fba2 2101 	umull	r2, r1, r2, r1
 800e874:	0889      	lsrs	r1, r1, #2
 800e876:	222a      	movs	r2, #42	@ 0x2a
 800e878:	fb02 3311 	mls	r3, r2, r1, r3
 800e87c:	eb00 0b05 	add.w	fp, r0, r5
 800e880:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800e884:	e7ad      	b.n	800e7e2 <uxr_framing_read_transport+0x46>
 800e886:	2600      	movs	r6, #0
 800e888:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800e88c:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800e88e:	d9be      	bls.n	800e80e <uxr_framing_read_transport+0x72>
 800e890:	2529      	movs	r5, #41	@ 0x29
 800e892:	2102      	movs	r1, #2
 800e894:	e7c3      	b.n	800e81e <uxr_framing_read_transport+0x82>
 800e896:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 800e89a:	b2dd      	uxtb	r5, r3
 800e89c:	e795      	b.n	800e7ca <uxr_framing_read_transport+0x2e>
 800e89e:	bf00      	nop
 800e8a0:	30c30c31 	.word	0x30c30c31

0800e8a4 <uxr_read_framed_msg>:
 800e8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a8:	461d      	mov	r5, r3
 800e8aa:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 800e8ae:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800e8b2:	b085      	sub	sp, #20
 800e8b4:	459c      	cmp	ip, r3
 800e8b6:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 800e8ba:	4604      	mov	r4, r0
 800e8bc:	460f      	mov	r7, r1
 800e8be:	4616      	mov	r6, r2
 800e8c0:	f000 81ae 	beq.w	800ec20 <uxr_read_framed_msg+0x37c>
 800e8c4:	2000      	movs	r0, #0
 800e8c6:	4639      	mov	r1, r7
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	d138      	bne.n	800e93e <uxr_read_framed_msg+0x9a>
 800e8cc:	468a      	mov	sl, r1
 800e8ce:	7823      	ldrb	r3, [r4, #0]
 800e8d0:	2b07      	cmp	r3, #7
 800e8d2:	d8fd      	bhi.n	800e8d0 <uxr_read_framed_msg+0x2c>
 800e8d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e8d8:	0116013b 	.word	0x0116013b
 800e8dc:	00cd00f0 	.word	0x00cd00f0
 800e8e0:	005a00a0 	.word	0x005a00a0
 800e8e4:	00080037 	.word	0x00080037
 800e8e8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800e8ec:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e8f0:	4290      	cmp	r0, r2
 800e8f2:	f000 8167 	beq.w	800ebc4 <uxr_read_framed_msg+0x320>
 800e8f6:	18a3      	adds	r3, r4, r2
 800e8f8:	1c57      	adds	r7, r2, #1
 800e8fa:	49c7      	ldr	r1, [pc, #796]	@ (800ec18 <uxr_read_framed_msg+0x374>)
 800e8fc:	f893 c002 	ldrb.w	ip, [r3, #2]
 800e900:	087b      	lsrs	r3, r7, #1
 800e902:	fba1 8303 	umull	r8, r3, r1, r3
 800e906:	089b      	lsrs	r3, r3, #2
 800e908:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800e90c:	fb08 7313 	mls	r3, r8, r3, r7
 800e910:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800e914:	b2df      	uxtb	r7, r3
 800e916:	f000 81b2 	beq.w	800ec7e <uxr_read_framed_msg+0x3da>
 800e91a:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800e91e:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 800e922:	f000 8220 	beq.w	800ed66 <uxr_read_framed_msg+0x4c2>
 800e926:	4661      	mov	r1, ip
 800e928:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800e92a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800e92c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e930:	b29b      	uxth	r3, r3
 800e932:	2100      	movs	r1, #0
 800e934:	429a      	cmp	r2, r3
 800e936:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800e938:	7021      	strb	r1, [r4, #0]
 800e93a:	f000 8198 	beq.w	800ec6e <uxr_read_framed_msg+0x3ca>
 800e93e:	2000      	movs	r0, #0
 800e940:	b005      	add	sp, #20
 800e942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e946:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800e94a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e94e:	4297      	cmp	r7, r2
 800e950:	f000 8148 	beq.w	800ebe4 <uxr_read_framed_msg+0x340>
 800e954:	18a3      	adds	r3, r4, r2
 800e956:	f102 0c01 	add.w	ip, r2, #1
 800e95a:	49af      	ldr	r1, [pc, #700]	@ (800ec18 <uxr_read_framed_msg+0x374>)
 800e95c:	7898      	ldrb	r0, [r3, #2]
 800e95e:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800e962:	fba1 8303 	umull	r8, r3, r1, r3
 800e966:	089b      	lsrs	r3, r3, #2
 800e968:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800e96c:	fb08 c313 	mls	r3, r8, r3, ip
 800e970:	287d      	cmp	r0, #125	@ 0x7d
 800e972:	fa5f fc83 	uxtb.w	ip, r3
 800e976:	f000 8194 	beq.w	800eca2 <uxr_read_framed_msg+0x3fe>
 800e97a:	287e      	cmp	r0, #126	@ 0x7e
 800e97c:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800e980:	f000 8200 	beq.w	800ed84 <uxr_read_framed_msg+0x4e0>
 800e984:	2307      	movs	r3, #7
 800e986:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800e988:	7023      	strb	r3, [r4, #0]
 800e98a:	e7a0      	b.n	800e8ce <uxr_read_framed_msg+0x2a>
 800e98c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e98e:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800e990:	429f      	cmp	r7, r3
 800e992:	f240 8164 	bls.w	800ec5e <uxr_read_framed_msg+0x3ba>
 800e996:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 800ec18 <uxr_read_framed_msg+0x374>
 800e99a:	f8cd a00c 	str.w	sl, [sp, #12]
 800e99e:	212a      	movs	r1, #42	@ 0x2a
 800e9a0:	e01f      	b.n	800e9e2 <uxr_read_framed_msg+0x13e>
 800e9a2:	f89a e002 	ldrb.w	lr, [sl, #2]
 800e9a6:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 800e9aa:	f000 80ea 	beq.w	800eb82 <uxr_read_framed_msg+0x2de>
 800e9ae:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800e9b2:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800e9b6:	f000 8142 	beq.w	800ec3e <uxr_read_framed_msg+0x39a>
 800e9ba:	f805 e003 	strb.w	lr, [r5, r3]
 800e9be:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 800e9c0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e9c2:	4f96      	ldr	r7, [pc, #600]	@ (800ec1c <uxr_read_framed_msg+0x378>)
 800e9c4:	ea80 020e 	eor.w	r2, r0, lr
 800e9c8:	b2d2      	uxtb	r2, r2
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800e9d0:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 800e9d8:	42bb      	cmp	r3, r7
 800e9da:	8663      	strh	r3, [r4, #50]	@ 0x32
 800e9dc:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800e9de:	f080 80e7 	bcs.w	800ebb0 <uxr_read_framed_msg+0x30c>
 800e9e2:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800e9e6:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 800e9ea:	f100 0c01 	add.w	ip, r0, #1
 800e9ee:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 800e9f2:	fba9 e20e 	umull	lr, r2, r9, lr
 800e9f6:	0892      	lsrs	r2, r2, #2
 800e9f8:	fb01 c212 	mls	r2, r1, r2, ip
 800e9fc:	4580      	cmp	r8, r0
 800e9fe:	eb04 0a00 	add.w	sl, r4, r0
 800ea02:	fa5f fc82 	uxtb.w	ip, r2
 800ea06:	d1cc      	bne.n	800e9a2 <uxr_read_framed_msg+0xfe>
 800ea08:	42bb      	cmp	r3, r7
 800ea0a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800ea0e:	f040 8128 	bne.w	800ec62 <uxr_read_framed_msg+0x3be>
 800ea12:	2306      	movs	r3, #6
 800ea14:	7023      	strb	r3, [r4, #0]
 800ea16:	e75a      	b.n	800e8ce <uxr_read_framed_msg+0x2a>
 800ea18:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800ea1c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ea20:	4297      	cmp	r7, r2
 800ea22:	f000 80cf 	beq.w	800ebc4 <uxr_read_framed_msg+0x320>
 800ea26:	18a3      	adds	r3, r4, r2
 800ea28:	f102 0c01 	add.w	ip, r2, #1
 800ea2c:	497a      	ldr	r1, [pc, #488]	@ (800ec18 <uxr_read_framed_msg+0x374>)
 800ea2e:	7898      	ldrb	r0, [r3, #2]
 800ea30:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800ea34:	fba1 8303 	umull	r8, r3, r1, r3
 800ea38:	089b      	lsrs	r3, r3, #2
 800ea3a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800ea3e:	fb08 c313 	mls	r3, r8, r3, ip
 800ea42:	287d      	cmp	r0, #125	@ 0x7d
 800ea44:	fa5f fc83 	uxtb.w	ip, r3
 800ea48:	f000 813d 	beq.w	800ecc6 <uxr_read_framed_msg+0x422>
 800ea4c:	287e      	cmp	r0, #126	@ 0x7e
 800ea4e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800ea52:	f000 8188 	beq.w	800ed66 <uxr_read_framed_msg+0x4c2>
 800ea56:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800ea58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ea5a:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 800ea5e:	b29b      	uxth	r3, r3
 800ea60:	2200      	movs	r2, #0
 800ea62:	428b      	cmp	r3, r1
 800ea64:	8623      	strh	r3, [r4, #48]	@ 0x30
 800ea66:	8662      	strh	r2, [r4, #50]	@ 0x32
 800ea68:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800ea6a:	f240 80f5 	bls.w	800ec58 <uxr_read_framed_msg+0x3b4>
 800ea6e:	7022      	strb	r2, [r4, #0]
 800ea70:	e765      	b.n	800e93e <uxr_read_framed_msg+0x9a>
 800ea72:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800ea76:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ea7a:	4297      	cmp	r7, r2
 800ea7c:	f000 80b2 	beq.w	800ebe4 <uxr_read_framed_msg+0x340>
 800ea80:	18a3      	adds	r3, r4, r2
 800ea82:	f102 0c01 	add.w	ip, r2, #1
 800ea86:	4964      	ldr	r1, [pc, #400]	@ (800ec18 <uxr_read_framed_msg+0x374>)
 800ea88:	7898      	ldrb	r0, [r3, #2]
 800ea8a:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800ea8e:	fba1 8303 	umull	r8, r3, r1, r3
 800ea92:	089b      	lsrs	r3, r3, #2
 800ea94:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800ea98:	fb08 c313 	mls	r3, r8, r3, ip
 800ea9c:	287d      	cmp	r0, #125	@ 0x7d
 800ea9e:	fa5f fc83 	uxtb.w	ip, r3
 800eaa2:	f000 813b 	beq.w	800ed1c <uxr_read_framed_msg+0x478>
 800eaa6:	287e      	cmp	r0, #126	@ 0x7e
 800eaa8:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800eaac:	f000 816a 	beq.w	800ed84 <uxr_read_framed_msg+0x4e0>
 800eab0:	2304      	movs	r3, #4
 800eab2:	8620      	strh	r0, [r4, #48]	@ 0x30
 800eab4:	7023      	strb	r3, [r4, #0]
 800eab6:	e70a      	b.n	800e8ce <uxr_read_framed_msg+0x2a>
 800eab8:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800eabc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800eac0:	4297      	cmp	r7, r2
 800eac2:	f000 80c4 	beq.w	800ec4e <uxr_read_framed_msg+0x3aa>
 800eac6:	18a3      	adds	r3, r4, r2
 800eac8:	f102 0c01 	add.w	ip, r2, #1
 800eacc:	4952      	ldr	r1, [pc, #328]	@ (800ec18 <uxr_read_framed_msg+0x374>)
 800eace:	7898      	ldrb	r0, [r3, #2]
 800ead0:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800ead4:	fba1 8303 	umull	r8, r3, r1, r3
 800ead8:	089b      	lsrs	r3, r3, #2
 800eada:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800eade:	fb08 c313 	mls	r3, r8, r3, ip
 800eae2:	287d      	cmp	r0, #125	@ 0x7d
 800eae4:	fa5f fc83 	uxtb.w	ip, r3
 800eae8:	f000 812b 	beq.w	800ed42 <uxr_read_framed_msg+0x49e>
 800eaec:	287e      	cmp	r0, #126	@ 0x7e
 800eaee:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800eaf2:	f000 8155 	beq.w	800eda0 <uxr_read_framed_msg+0x4fc>
 800eaf6:	7863      	ldrb	r3, [r4, #1]
 800eaf8:	4283      	cmp	r3, r0
 800eafa:	bf0c      	ite	eq
 800eafc:	2303      	moveq	r3, #3
 800eafe:	2300      	movne	r3, #0
 800eb00:	7023      	strb	r3, [r4, #0]
 800eb02:	e6e4      	b.n	800e8ce <uxr_read_framed_msg+0x2a>
 800eb04:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800eb08:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	4290      	cmp	r0, r2
 800eb10:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 800eb14:	d06b      	beq.n	800ebee <uxr_read_framed_msg+0x34a>
 800eb16:	18a3      	adds	r3, r4, r2
 800eb18:	f102 0c01 	add.w	ip, r2, #1
 800eb1c:	493e      	ldr	r1, [pc, #248]	@ (800ec18 <uxr_read_framed_msg+0x374>)
 800eb1e:	789f      	ldrb	r7, [r3, #2]
 800eb20:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800eb24:	fba1 8303 	umull	r8, r3, r1, r3
 800eb28:	089b      	lsrs	r3, r3, #2
 800eb2a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800eb2e:	fb08 c313 	mls	r3, r8, r3, ip
 800eb32:	2f7d      	cmp	r7, #125	@ 0x7d
 800eb34:	fa5f fc83 	uxtb.w	ip, r3
 800eb38:	f000 80d8 	beq.w	800ecec <uxr_read_framed_msg+0x448>
 800eb3c:	2f7e      	cmp	r7, #126	@ 0x7e
 800eb3e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800eb42:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 800eb46:	d052      	beq.n	800ebee <uxr_read_framed_msg+0x34a>
 800eb48:	2302      	movs	r3, #2
 800eb4a:	7023      	strb	r3, [r4, #0]
 800eb4c:	e6bf      	b.n	800e8ce <uxr_read_framed_msg+0x2a>
 800eb4e:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 800eb52:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800eb56:	4930      	ldr	r1, [pc, #192]	@ (800ec18 <uxr_read_framed_msg+0x374>)
 800eb58:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800eb5c:	e004      	b.n	800eb68 <uxr_read_framed_msg+0x2c4>
 800eb5e:	78bb      	ldrb	r3, [r7, #2]
 800eb60:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800eb64:	2b7e      	cmp	r3, #126	@ 0x7e
 800eb66:	d02a      	beq.n	800ebbe <uxr_read_framed_msg+0x31a>
 800eb68:	1c50      	adds	r0, r2, #1
 800eb6a:	0843      	lsrs	r3, r0, #1
 800eb6c:	fba1 e303 	umull	lr, r3, r1, r3
 800eb70:	089b      	lsrs	r3, r3, #2
 800eb72:	fb0c 0013 	mls	r0, ip, r3, r0
 800eb76:	4590      	cmp	r8, r2
 800eb78:	eb04 0702 	add.w	r7, r4, r2
 800eb7c:	b2c2      	uxtb	r2, r0
 800eb7e:	d1ee      	bne.n	800eb5e <uxr_read_framed_msg+0x2ba>
 800eb80:	e6dd      	b.n	800e93e <uxr_read_framed_msg+0x9a>
 800eb82:	3002      	adds	r0, #2
 800eb84:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 800eb88:	eb04 0a02 	add.w	sl, r4, r2
 800eb8c:	fba9 e20e 	umull	lr, r2, r9, lr
 800eb90:	0892      	lsrs	r2, r2, #2
 800eb92:	45e0      	cmp	r8, ip
 800eb94:	fb01 0012 	mls	r0, r1, r2, r0
 800eb98:	f43f af36 	beq.w	800ea08 <uxr_read_framed_msg+0x164>
 800eb9c:	f89a e002 	ldrb.w	lr, [sl, #2]
 800eba0:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800eba4:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800eba8:	d049      	beq.n	800ec3e <uxr_read_framed_msg+0x39a>
 800ebaa:	f08e 0e20 	eor.w	lr, lr, #32
 800ebae:	e704      	b.n	800e9ba <uxr_read_framed_msg+0x116>
 800ebb0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800ebb4:	f43f af2d 	beq.w	800ea12 <uxr_read_framed_msg+0x16e>
 800ebb8:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800ebbc:	d151      	bne.n	800ec62 <uxr_read_framed_msg+0x3be>
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	7023      	strb	r3, [r4, #0]
 800ebc2:	e684      	b.n	800e8ce <uxr_read_framed_msg+0x2a>
 800ebc4:	4651      	mov	r1, sl
 800ebc6:	f8cd b000 	str.w	fp, [sp]
 800ebca:	2301      	movs	r3, #1
 800ebcc:	9301      	str	r3, [sp, #4]
 800ebce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ebd0:	9103      	str	r1, [sp, #12]
 800ebd2:	4632      	mov	r2, r6
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	f7ff fde1 	bl	800e79c <uxr_framing_read_transport>
 800ebda:	fab0 f080 	clz	r0, r0
 800ebde:	9903      	ldr	r1, [sp, #12]
 800ebe0:	0940      	lsrs	r0, r0, #5
 800ebe2:	e671      	b.n	800e8c8 <uxr_read_framed_msg+0x24>
 800ebe4:	4651      	mov	r1, sl
 800ebe6:	f8cd b000 	str.w	fp, [sp]
 800ebea:	2302      	movs	r3, #2
 800ebec:	e7ee      	b.n	800ebcc <uxr_read_framed_msg+0x328>
 800ebee:	2304      	movs	r3, #4
 800ebf0:	9301      	str	r3, [sp, #4]
 800ebf2:	f8cd b000 	str.w	fp, [sp]
 800ebf6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ebf8:	4632      	mov	r2, r6
 800ebfa:	4651      	mov	r1, sl
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f7ff fdcd 	bl	800e79c <uxr_framing_read_transport>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	f47f ae63 	bne.w	800e8ce <uxr_read_framed_msg+0x2a>
 800ec08:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 800ec0c:	387e      	subs	r0, #126	@ 0x7e
 800ec0e:	4651      	mov	r1, sl
 800ec10:	bf18      	it	ne
 800ec12:	2001      	movne	r0, #1
 800ec14:	e658      	b.n	800e8c8 <uxr_read_framed_msg+0x24>
 800ec16:	bf00      	nop
 800ec18:	30c30c31 	.word	0x30c30c31
 800ec1c:	08011b7c 	.word	0x08011b7c
 800ec20:	2305      	movs	r3, #5
 800ec22:	9301      	str	r3, [sp, #4]
 800ec24:	f8cd b000 	str.w	fp, [sp]
 800ec28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ec2a:	f7ff fdb7 	bl	800e79c <uxr_framing_read_transport>
 800ec2e:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 800ec32:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ec36:	429a      	cmp	r2, r3
 800ec38:	f43f ae81 	beq.w	800e93e <uxr_read_framed_msg+0x9a>
 800ec3c:	e642      	b.n	800e8c4 <uxr_read_framed_msg+0x20>
 800ec3e:	42bb      	cmp	r3, r7
 800ec40:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800ec44:	f43f aee5 	beq.w	800ea12 <uxr_read_framed_msg+0x16e>
 800ec48:	2301      	movs	r3, #1
 800ec4a:	7023      	strb	r3, [r4, #0]
 800ec4c:	e63f      	b.n	800e8ce <uxr_read_framed_msg+0x2a>
 800ec4e:	4651      	mov	r1, sl
 800ec50:	f8cd b000 	str.w	fp, [sp]
 800ec54:	2303      	movs	r3, #3
 800ec56:	e7b9      	b.n	800ebcc <uxr_read_framed_msg+0x328>
 800ec58:	2305      	movs	r3, #5
 800ec5a:	7023      	strb	r3, [r4, #0]
 800ec5c:	e637      	b.n	800e8ce <uxr_read_framed_msg+0x2a>
 800ec5e:	f43f aed8 	beq.w	800ea12 <uxr_read_framed_msg+0x16e>
 800ec62:	1afb      	subs	r3, r7, r3
 800ec64:	3302      	adds	r3, #2
 800ec66:	e9cd b300 	strd	fp, r3, [sp]
 800ec6a:	4651      	mov	r1, sl
 800ec6c:	e7af      	b.n	800ebce <uxr_read_framed_msg+0x32a>
 800ec6e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ec70:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800ec74:	7013      	strb	r3, [r2, #0]
 800ec76:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800ec78:	b005      	add	sp, #20
 800ec7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec7e:	4287      	cmp	r7, r0
 800ec80:	d0a0      	beq.n	800ebc4 <uxr_read_framed_msg+0x320>
 800ec82:	4423      	add	r3, r4
 800ec84:	3202      	adds	r2, #2
 800ec86:	7898      	ldrb	r0, [r3, #2]
 800ec88:	0853      	lsrs	r3, r2, #1
 800ec8a:	fba1 e303 	umull	lr, r3, r1, r3
 800ec8e:	089b      	lsrs	r3, r3, #2
 800ec90:	fb08 2213 	mls	r2, r8, r3, r2
 800ec94:	287e      	cmp	r0, #126	@ 0x7e
 800ec96:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ec9a:	d064      	beq.n	800ed66 <uxr_read_framed_msg+0x4c2>
 800ec9c:	f080 0120 	eor.w	r1, r0, #32
 800eca0:	e642      	b.n	800e928 <uxr_read_framed_msg+0x84>
 800eca2:	45bc      	cmp	ip, r7
 800eca4:	d09e      	beq.n	800ebe4 <uxr_read_framed_msg+0x340>
 800eca6:	4423      	add	r3, r4
 800eca8:	3202      	adds	r2, #2
 800ecaa:	7898      	ldrb	r0, [r3, #2]
 800ecac:	0853      	lsrs	r3, r2, #1
 800ecae:	fba1 e303 	umull	lr, r3, r1, r3
 800ecb2:	089b      	lsrs	r3, r3, #2
 800ecb4:	fb08 2213 	mls	r2, r8, r3, r2
 800ecb8:	287e      	cmp	r0, #126	@ 0x7e
 800ecba:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ecbe:	d061      	beq.n	800ed84 <uxr_read_framed_msg+0x4e0>
 800ecc0:	f080 0020 	eor.w	r0, r0, #32
 800ecc4:	e65e      	b.n	800e984 <uxr_read_framed_msg+0xe0>
 800ecc6:	4567      	cmp	r7, ip
 800ecc8:	f43f af7c 	beq.w	800ebc4 <uxr_read_framed_msg+0x320>
 800eccc:	4423      	add	r3, r4
 800ecce:	3202      	adds	r2, #2
 800ecd0:	7898      	ldrb	r0, [r3, #2]
 800ecd2:	0853      	lsrs	r3, r2, #1
 800ecd4:	fba1 e303 	umull	lr, r3, r1, r3
 800ecd8:	089b      	lsrs	r3, r3, #2
 800ecda:	fb08 2213 	mls	r2, r8, r3, r2
 800ecde:	287e      	cmp	r0, #126	@ 0x7e
 800ece0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ece4:	d03f      	beq.n	800ed66 <uxr_read_framed_msg+0x4c2>
 800ece6:	f080 0020 	eor.w	r0, r0, #32
 800ecea:	e6b4      	b.n	800ea56 <uxr_read_framed_msg+0x1b2>
 800ecec:	4560      	cmp	r0, ip
 800ecee:	f43f af7e 	beq.w	800ebee <uxr_read_framed_msg+0x34a>
 800ecf2:	4423      	add	r3, r4
 800ecf4:	3202      	adds	r2, #2
 800ecf6:	7898      	ldrb	r0, [r3, #2]
 800ecf8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800ecfc:	0853      	lsrs	r3, r2, #1
 800ecfe:	fba1 e303 	umull	lr, r3, r1, r3
 800ed02:	089b      	lsrs	r3, r3, #2
 800ed04:	fb08 2213 	mls	r2, r8, r3, r2
 800ed08:	287e      	cmp	r0, #126	@ 0x7e
 800ed0a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ed0e:	f43f af6e 	beq.w	800ebee <uxr_read_framed_msg+0x34a>
 800ed12:	f080 0020 	eor.w	r0, r0, #32
 800ed16:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800ed1a:	e715      	b.n	800eb48 <uxr_read_framed_msg+0x2a4>
 800ed1c:	4567      	cmp	r7, ip
 800ed1e:	f43f af61 	beq.w	800ebe4 <uxr_read_framed_msg+0x340>
 800ed22:	4423      	add	r3, r4
 800ed24:	3202      	adds	r2, #2
 800ed26:	7898      	ldrb	r0, [r3, #2]
 800ed28:	0853      	lsrs	r3, r2, #1
 800ed2a:	fba1 e303 	umull	lr, r3, r1, r3
 800ed2e:	089b      	lsrs	r3, r3, #2
 800ed30:	fb08 2213 	mls	r2, r8, r3, r2
 800ed34:	287e      	cmp	r0, #126	@ 0x7e
 800ed36:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ed3a:	d023      	beq.n	800ed84 <uxr_read_framed_msg+0x4e0>
 800ed3c:	f080 0020 	eor.w	r0, r0, #32
 800ed40:	e6b6      	b.n	800eab0 <uxr_read_framed_msg+0x20c>
 800ed42:	45bc      	cmp	ip, r7
 800ed44:	d083      	beq.n	800ec4e <uxr_read_framed_msg+0x3aa>
 800ed46:	4423      	add	r3, r4
 800ed48:	3202      	adds	r2, #2
 800ed4a:	7898      	ldrb	r0, [r3, #2]
 800ed4c:	0853      	lsrs	r3, r2, #1
 800ed4e:	fba1 e303 	umull	lr, r3, r1, r3
 800ed52:	089b      	lsrs	r3, r3, #2
 800ed54:	fb08 2213 	mls	r2, r8, r3, r2
 800ed58:	287e      	cmp	r0, #126	@ 0x7e
 800ed5a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ed5e:	d01f      	beq.n	800eda0 <uxr_read_framed_msg+0x4fc>
 800ed60:	f080 0020 	eor.w	r0, r0, #32
 800ed64:	e6c7      	b.n	800eaf6 <uxr_read_framed_msg+0x252>
 800ed66:	2701      	movs	r7, #1
 800ed68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed6a:	f8cd b000 	str.w	fp, [sp]
 800ed6e:	9701      	str	r7, [sp, #4]
 800ed70:	4632      	mov	r2, r6
 800ed72:	4651      	mov	r1, sl
 800ed74:	4620      	mov	r0, r4
 800ed76:	f7ff fd11 	bl	800e79c <uxr_framing_read_transport>
 800ed7a:	2800      	cmp	r0, #0
 800ed7c:	f47f ada7 	bne.w	800e8ce <uxr_read_framed_msg+0x2a>
 800ed80:	7027      	strb	r7, [r4, #0]
 800ed82:	e5a4      	b.n	800e8ce <uxr_read_framed_msg+0x2a>
 800ed84:	f8cd b000 	str.w	fp, [sp]
 800ed88:	2302      	movs	r3, #2
 800ed8a:	9301      	str	r3, [sp, #4]
 800ed8c:	4632      	mov	r2, r6
 800ed8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed90:	4651      	mov	r1, sl
 800ed92:	4620      	mov	r0, r4
 800ed94:	f7ff fd02 	bl	800e79c <uxr_framing_read_transport>
 800ed98:	2800      	cmp	r0, #0
 800ed9a:	f47f ad98 	bne.w	800e8ce <uxr_read_framed_msg+0x2a>
 800ed9e:	e70e      	b.n	800ebbe <uxr_read_framed_msg+0x31a>
 800eda0:	f8cd b000 	str.w	fp, [sp]
 800eda4:	2303      	movs	r3, #3
 800eda6:	e7f0      	b.n	800ed8a <uxr_read_framed_msg+0x4e6>

0800eda8 <rcl_get_automatic_discovery_range>:
 800eda8:	b530      	push	{r4, r5, lr}
 800edaa:	b083      	sub	sp, #12
 800edac:	2300      	movs	r3, #0
 800edae:	9301      	str	r3, [sp, #4]
 800edb0:	b1c0      	cbz	r0, 800ede4 <rcl_get_automatic_discovery_range+0x3c>
 800edb2:	4604      	mov	r4, r0
 800edb4:	a901      	add	r1, sp, #4
 800edb6:	4818      	ldr	r0, [pc, #96]	@ (800ee18 <rcl_get_automatic_discovery_range+0x70>)
 800edb8:	f7fd f968 	bl	800c08c <rcutils_get_env>
 800edbc:	b110      	cbz	r0, 800edc4 <rcl_get_automatic_discovery_range+0x1c>
 800edbe:	2001      	movs	r0, #1
 800edc0:	b003      	add	sp, #12
 800edc2:	bd30      	pop	{r4, r5, pc}
 800edc4:	9d01      	ldr	r5, [sp, #4]
 800edc6:	782b      	ldrb	r3, [r5, #0]
 800edc8:	b923      	cbnz	r3, 800edd4 <rcl_get_automatic_discovery_range+0x2c>
 800edca:	2303      	movs	r3, #3
 800edcc:	7023      	strb	r3, [r4, #0]
 800edce:	2000      	movs	r0, #0
 800edd0:	b003      	add	sp, #12
 800edd2:	bd30      	pop	{r4, r5, pc}
 800edd4:	4911      	ldr	r1, [pc, #68]	@ (800ee1c <rcl_get_automatic_discovery_range+0x74>)
 800edd6:	4628      	mov	r0, r5
 800edd8:	f7f1 fa02 	bl	80001e0 <strcmp>
 800eddc:	b928      	cbnz	r0, 800edea <rcl_get_automatic_discovery_range+0x42>
 800edde:	2301      	movs	r3, #1
 800ede0:	7023      	strb	r3, [r4, #0]
 800ede2:	e7f4      	b.n	800edce <rcl_get_automatic_discovery_range+0x26>
 800ede4:	200b      	movs	r0, #11
 800ede6:	b003      	add	sp, #12
 800ede8:	bd30      	pop	{r4, r5, pc}
 800edea:	490d      	ldr	r1, [pc, #52]	@ (800ee20 <rcl_get_automatic_discovery_range+0x78>)
 800edec:	4628      	mov	r0, r5
 800edee:	f7f1 f9f7 	bl	80001e0 <strcmp>
 800edf2:	b168      	cbz	r0, 800ee10 <rcl_get_automatic_discovery_range+0x68>
 800edf4:	490b      	ldr	r1, [pc, #44]	@ (800ee24 <rcl_get_automatic_discovery_range+0x7c>)
 800edf6:	4628      	mov	r0, r5
 800edf8:	f7f1 f9f2 	bl	80001e0 <strcmp>
 800edfc:	2800      	cmp	r0, #0
 800edfe:	d0e4      	beq.n	800edca <rcl_get_automatic_discovery_range+0x22>
 800ee00:	4909      	ldr	r1, [pc, #36]	@ (800ee28 <rcl_get_automatic_discovery_range+0x80>)
 800ee02:	4628      	mov	r0, r5
 800ee04:	f7f1 f9ec 	bl	80001e0 <strcmp>
 800ee08:	b910      	cbnz	r0, 800ee10 <rcl_get_automatic_discovery_range+0x68>
 800ee0a:	2304      	movs	r3, #4
 800ee0c:	7023      	strb	r3, [r4, #0]
 800ee0e:	e7de      	b.n	800edce <rcl_get_automatic_discovery_range+0x26>
 800ee10:	2302      	movs	r3, #2
 800ee12:	7023      	strb	r3, [r4, #0]
 800ee14:	e7db      	b.n	800edce <rcl_get_automatic_discovery_range+0x26>
 800ee16:	bf00      	nop
 800ee18:	08011874 	.word	0x08011874
 800ee1c:	08011894 	.word	0x08011894
 800ee20:	08011898 	.word	0x08011898
 800ee24:	080118a4 	.word	0x080118a4
 800ee28:	080118ac 	.word	0x080118ac

0800ee2c <rcl_automatic_discovery_range_to_string>:
 800ee2c:	2804      	cmp	r0, #4
 800ee2e:	bf9a      	itte	ls
 800ee30:	4b02      	ldrls	r3, [pc, #8]	@ (800ee3c <rcl_automatic_discovery_range_to_string+0x10>)
 800ee32:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800ee36:	2000      	movhi	r0, #0
 800ee38:	4770      	bx	lr
 800ee3a:	bf00      	nop
 800ee3c:	08011d7c 	.word	0x08011d7c

0800ee40 <rcl_get_discovery_static_peers>:
 800ee40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee44:	b08c      	sub	sp, #48	@ 0x30
 800ee46:	2300      	movs	r3, #0
 800ee48:	9304      	str	r3, [sp, #16]
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	d04e      	beq.n	800eeec <rcl_get_discovery_static_peers+0xac>
 800ee4e:	460d      	mov	r5, r1
 800ee50:	2900      	cmp	r1, #0
 800ee52:	d04b      	beq.n	800eeec <rcl_get_discovery_static_peers+0xac>
 800ee54:	4604      	mov	r4, r0
 800ee56:	a904      	add	r1, sp, #16
 800ee58:	482d      	ldr	r0, [pc, #180]	@ (800ef10 <rcl_get_discovery_static_peers+0xd0>)
 800ee5a:	f7fd f917 	bl	800c08c <rcutils_get_env>
 800ee5e:	b118      	cbz	r0, 800ee68 <rcl_get_discovery_static_peers+0x28>
 800ee60:	2001      	movs	r0, #1
 800ee62:	b00c      	add	sp, #48	@ 0x30
 800ee64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee68:	9b04      	ldr	r3, [sp, #16]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d0f8      	beq.n	800ee60 <rcl_get_discovery_static_peers+0x20>
 800ee6e:	af05      	add	r7, sp, #20
 800ee70:	4638      	mov	r0, r7
 800ee72:	f000 fc1d 	bl	800f6b0 <rcutils_get_zero_initialized_string_array>
 800ee76:	f105 0308 	add.w	r3, r5, #8
 800ee7a:	9703      	str	r7, [sp, #12]
 800ee7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ee80:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ee84:	9804      	ldr	r0, [sp, #16]
 800ee86:	e895 000c 	ldmia.w	r5, {r2, r3}
 800ee8a:	213b      	movs	r1, #59	@ 0x3b
 800ee8c:	f000 fb60 	bl	800f550 <rcutils_split>
 800ee90:	2800      	cmp	r0, #0
 800ee92:	d1e5      	bne.n	800ee60 <rcl_get_discovery_static_peers+0x20>
 800ee94:	9905      	ldr	r1, [sp, #20]
 800ee96:	462a      	mov	r2, r5
 800ee98:	4620      	mov	r0, r4
 800ee9a:	f000 fc61 	bl	800f760 <rmw_discovery_options_init>
 800ee9e:	4606      	mov	r6, r0
 800eea0:	bb90      	cbnz	r0, 800ef08 <rcl_get_discovery_static_peers+0xc8>
 800eea2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800eea6:	f1b9 0f00 	cmp.w	r9, #0
 800eeaa:	d026      	beq.n	800eefa <rcl_get_discovery_static_peers+0xba>
 800eeac:	f8dd a018 	ldr.w	sl, [sp, #24]
 800eeb0:	4680      	mov	r8, r0
 800eeb2:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 800eeb6:	4628      	mov	r0, r5
 800eeb8:	f7f1 f9f2 	bl	80002a0 <strlen>
 800eebc:	28ff      	cmp	r0, #255	@ 0xff
 800eebe:	4629      	mov	r1, r5
 800eec0:	ea4f 2506 	mov.w	r5, r6, lsl #8
 800eec4:	d816      	bhi.n	800eef4 <rcl_get_discovery_static_peers+0xb4>
 800eec6:	6860      	ldr	r0, [r4, #4]
 800eec8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800eecc:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 800eed0:	f001 f9eb 	bl	80102aa <strncpy>
 800eed4:	6863      	ldr	r3, [r4, #4]
 800eed6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800eeda:	3601      	adds	r6, #1
 800eedc:	442b      	add	r3, r5
 800eede:	454e      	cmp	r6, r9
 800eee0:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 800eee4:	d209      	bcs.n	800eefa <rcl_get_discovery_static_peers+0xba>
 800eee6:	f8dd a018 	ldr.w	sl, [sp, #24]
 800eeea:	e7e2      	b.n	800eeb2 <rcl_get_discovery_static_peers+0x72>
 800eeec:	200b      	movs	r0, #11
 800eeee:	b00c      	add	sp, #48	@ 0x30
 800eef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eef4:	3601      	adds	r6, #1
 800eef6:	454e      	cmp	r6, r9
 800eef8:	d3db      	bcc.n	800eeb2 <rcl_get_discovery_static_peers+0x72>
 800eefa:	4638      	mov	r0, r7
 800eefc:	f000 fc0a 	bl	800f714 <rcutils_string_array_fini>
 800ef00:	3800      	subs	r0, #0
 800ef02:	bf18      	it	ne
 800ef04:	2001      	movne	r0, #1
 800ef06:	e7ac      	b.n	800ee62 <rcl_get_discovery_static_peers+0x22>
 800ef08:	f7fc fb02 	bl	800b510 <rcl_convert_rmw_ret_to_rcl_ret>
 800ef0c:	e7a9      	b.n	800ee62 <rcl_get_discovery_static_peers+0x22>
 800ef0e:	bf00      	nop
 800ef10:	080118bc 	.word	0x080118bc

0800ef14 <rcl_get_default_domain_id>:
 800ef14:	b530      	push	{r4, r5, lr}
 800ef16:	b083      	sub	sp, #12
 800ef18:	2300      	movs	r3, #0
 800ef1a:	9300      	str	r3, [sp, #0]
 800ef1c:	b1f0      	cbz	r0, 800ef5c <rcl_get_default_domain_id+0x48>
 800ef1e:	4604      	mov	r4, r0
 800ef20:	4669      	mov	r1, sp
 800ef22:	4812      	ldr	r0, [pc, #72]	@ (800ef6c <rcl_get_default_domain_id+0x58>)
 800ef24:	f7fd f8b2 	bl	800c08c <rcutils_get_env>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	b108      	cbz	r0, 800ef30 <rcl_get_default_domain_id+0x1c>
 800ef2c:	2001      	movs	r0, #1
 800ef2e:	e004      	b.n	800ef3a <rcl_get_default_domain_id+0x26>
 800ef30:	9800      	ldr	r0, [sp, #0]
 800ef32:	b108      	cbz	r0, 800ef38 <rcl_get_default_domain_id+0x24>
 800ef34:	7803      	ldrb	r3, [r0, #0]
 800ef36:	b913      	cbnz	r3, 800ef3e <rcl_get_default_domain_id+0x2a>
 800ef38:	2000      	movs	r0, #0
 800ef3a:	b003      	add	sp, #12
 800ef3c:	bd30      	pop	{r4, r5, pc}
 800ef3e:	a901      	add	r1, sp, #4
 800ef40:	9201      	str	r2, [sp, #4]
 800ef42:	f000 fff7 	bl	800ff34 <strtoul>
 800ef46:	4605      	mov	r5, r0
 800ef48:	b158      	cbz	r0, 800ef62 <rcl_get_default_domain_id+0x4e>
 800ef4a:	1c43      	adds	r3, r0, #1
 800ef4c:	d104      	bne.n	800ef58 <rcl_get_default_domain_id+0x44>
 800ef4e:	f001 fa2b 	bl	80103a8 <__errno>
 800ef52:	6803      	ldr	r3, [r0, #0]
 800ef54:	2b22      	cmp	r3, #34	@ 0x22
 800ef56:	d0e9      	beq.n	800ef2c <rcl_get_default_domain_id+0x18>
 800ef58:	6025      	str	r5, [r4, #0]
 800ef5a:	e7ed      	b.n	800ef38 <rcl_get_default_domain_id+0x24>
 800ef5c:	200b      	movs	r0, #11
 800ef5e:	b003      	add	sp, #12
 800ef60:	bd30      	pop	{r4, r5, pc}
 800ef62:	9b01      	ldr	r3, [sp, #4]
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d0f6      	beq.n	800ef58 <rcl_get_default_domain_id+0x44>
 800ef6a:	e7df      	b.n	800ef2c <rcl_get_default_domain_id+0x18>
 800ef6c:	0801199c 	.word	0x0801199c

0800ef70 <rcl_expand_topic_name>:
 800ef70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef74:	b08b      	sub	sp, #44	@ 0x2c
 800ef76:	9306      	str	r3, [sp, #24]
 800ef78:	2800      	cmp	r0, #0
 800ef7a:	f000 80ad 	beq.w	800f0d8 <rcl_expand_topic_name+0x168>
 800ef7e:	460e      	mov	r6, r1
 800ef80:	2900      	cmp	r1, #0
 800ef82:	f000 80a9 	beq.w	800f0d8 <rcl_expand_topic_name+0x168>
 800ef86:	4617      	mov	r7, r2
 800ef88:	2a00      	cmp	r2, #0
 800ef8a:	f000 80a5 	beq.w	800f0d8 <rcl_expand_topic_name+0x168>
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	f000 80a2 	beq.w	800f0d8 <rcl_expand_topic_name+0x168>
 800ef94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	f000 809e 	beq.w	800f0d8 <rcl_expand_topic_name+0x168>
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	a909      	add	r1, sp, #36	@ 0x24
 800efa0:	4680      	mov	r8, r0
 800efa2:	f000 f9e3 	bl	800f36c <rcl_validate_topic_name>
 800efa6:	4605      	mov	r5, r0
 800efa8:	2800      	cmp	r0, #0
 800efaa:	f040 8096 	bne.w	800f0da <rcl_expand_topic_name+0x16a>
 800efae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	f040 809a 	bne.w	800f0ea <rcl_expand_topic_name+0x17a>
 800efb6:	4602      	mov	r2, r0
 800efb8:	a909      	add	r1, sp, #36	@ 0x24
 800efba:	4630      	mov	r0, r6
 800efbc:	f7fd fc56 	bl	800c86c <rmw_validate_node_name>
 800efc0:	2800      	cmp	r0, #0
 800efc2:	f040 808e 	bne.w	800f0e2 <rcl_expand_topic_name+0x172>
 800efc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efc8:	2a00      	cmp	r2, #0
 800efca:	f040 8093 	bne.w	800f0f4 <rcl_expand_topic_name+0x184>
 800efce:	a909      	add	r1, sp, #36	@ 0x24
 800efd0:	4638      	mov	r0, r7
 800efd2:	f7fd fc2d 	bl	800c830 <rmw_validate_namespace>
 800efd6:	2800      	cmp	r0, #0
 800efd8:	f040 8083 	bne.w	800f0e2 <rcl_expand_topic_name+0x172>
 800efdc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800efde:	2d00      	cmp	r5, #0
 800efe0:	f040 80f5 	bne.w	800f1ce <rcl_expand_topic_name+0x25e>
 800efe4:	217b      	movs	r1, #123	@ 0x7b
 800efe6:	4640      	mov	r0, r8
 800efe8:	f001 f940 	bl	801026c <strchr>
 800efec:	f898 3000 	ldrb.w	r3, [r8]
 800eff0:	2b2f      	cmp	r3, #47	@ 0x2f
 800eff2:	4604      	mov	r4, r0
 800eff4:	f000 809f 	beq.w	800f136 <rcl_expand_topic_name+0x1c6>
 800eff8:	2b7e      	cmp	r3, #126	@ 0x7e
 800effa:	f040 80ea 	bne.w	800f1d2 <rcl_expand_topic_name+0x262>
 800effe:	4638      	mov	r0, r7
 800f000:	f7f1 f94e 	bl	80002a0 <strlen>
 800f004:	4a86      	ldr	r2, [pc, #536]	@ (800f220 <rcl_expand_topic_name+0x2b0>)
 800f006:	4b87      	ldr	r3, [pc, #540]	@ (800f224 <rcl_expand_topic_name+0x2b4>)
 800f008:	2801      	cmp	r0, #1
 800f00a:	bf08      	it	eq
 800f00c:	4613      	moveq	r3, r2
 800f00e:	9302      	str	r3, [sp, #8]
 800f010:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f012:	9300      	str	r3, [sp, #0]
 800f014:	e9cd 7603 	strd	r7, r6, [sp, #12]
 800f018:	f108 0301 	add.w	r3, r8, #1
 800f01c:	9305      	str	r3, [sp, #20]
 800f01e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f022:	9301      	str	r3, [sp, #4]
 800f024:	ab14      	add	r3, sp, #80	@ 0x50
 800f026:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f028:	f7fd f848 	bl	800c0bc <rcutils_format_string_limit>
 800f02c:	4682      	mov	sl, r0
 800f02e:	2800      	cmp	r0, #0
 800f030:	f000 80e1 	beq.w	800f1f6 <rcl_expand_topic_name+0x286>
 800f034:	2c00      	cmp	r4, #0
 800f036:	f000 8085 	beq.w	800f144 <rcl_expand_topic_name+0x1d4>
 800f03a:	217b      	movs	r1, #123	@ 0x7b
 800f03c:	f001 f916 	bl	801026c <strchr>
 800f040:	46d1      	mov	r9, sl
 800f042:	4604      	mov	r4, r0
 800f044:	9507      	str	r5, [sp, #28]
 800f046:	464d      	mov	r5, r9
 800f048:	2c00      	cmp	r4, #0
 800f04a:	f000 80a1 	beq.w	800f190 <rcl_expand_topic_name+0x220>
 800f04e:	217d      	movs	r1, #125	@ 0x7d
 800f050:	4628      	mov	r0, r5
 800f052:	f001 f90b 	bl	801026c <strchr>
 800f056:	eba0 0904 	sub.w	r9, r0, r4
 800f05a:	f109 0b01 	add.w	fp, r9, #1
 800f05e:	4872      	ldr	r0, [pc, #456]	@ (800f228 <rcl_expand_topic_name+0x2b8>)
 800f060:	465a      	mov	r2, fp
 800f062:	4621      	mov	r1, r4
 800f064:	f001 f90f 	bl	8010286 <strncmp>
 800f068:	2800      	cmp	r0, #0
 800f06a:	d069      	beq.n	800f140 <rcl_expand_topic_name+0x1d0>
 800f06c:	486f      	ldr	r0, [pc, #444]	@ (800f22c <rcl_expand_topic_name+0x2bc>)
 800f06e:	465a      	mov	r2, fp
 800f070:	4621      	mov	r1, r4
 800f072:	f001 f908 	bl	8010286 <strncmp>
 800f076:	b130      	cbz	r0, 800f086 <rcl_expand_topic_name+0x116>
 800f078:	486d      	ldr	r0, [pc, #436]	@ (800f230 <rcl_expand_topic_name+0x2c0>)
 800f07a:	465a      	mov	r2, fp
 800f07c:	4621      	mov	r1, r4
 800f07e:	f001 f902 	bl	8010286 <strncmp>
 800f082:	2800      	cmp	r0, #0
 800f084:	d138      	bne.n	800f0f8 <rcl_expand_topic_name+0x188>
 800f086:	46b9      	mov	r9, r7
 800f088:	ab16      	add	r3, sp, #88	@ 0x58
 800f08a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f08e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f092:	ab14      	add	r3, sp, #80	@ 0x50
 800f094:	4620      	mov	r0, r4
 800f096:	cb0c      	ldmia	r3, {r2, r3}
 800f098:	4659      	mov	r1, fp
 800f09a:	f7fd f963 	bl	800c364 <rcutils_strndup>
 800f09e:	4604      	mov	r4, r0
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	f000 8099 	beq.w	800f1d8 <rcl_expand_topic_name+0x268>
 800f0a6:	464a      	mov	r2, r9
 800f0a8:	4628      	mov	r0, r5
 800f0aa:	ab14      	add	r3, sp, #80	@ 0x50
 800f0ac:	4621      	mov	r1, r4
 800f0ae:	f7fd f83f 	bl	800c130 <rcutils_repl_str>
 800f0b2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f0b4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f0b6:	4605      	mov	r5, r0
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	4798      	blx	r3
 800f0bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f0be:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f0c0:	4650      	mov	r0, sl
 800f0c2:	4798      	blx	r3
 800f0c4:	2d00      	cmp	r5, #0
 800f0c6:	f000 8091 	beq.w	800f1ec <rcl_expand_topic_name+0x27c>
 800f0ca:	217b      	movs	r1, #123	@ 0x7b
 800f0cc:	4628      	mov	r0, r5
 800f0ce:	f001 f8cd 	bl	801026c <strchr>
 800f0d2:	46aa      	mov	sl, r5
 800f0d4:	4604      	mov	r4, r0
 800f0d6:	e7b7      	b.n	800f048 <rcl_expand_topic_name+0xd8>
 800f0d8:	250b      	movs	r5, #11
 800f0da:	4628      	mov	r0, r5
 800f0dc:	b00b      	add	sp, #44	@ 0x2c
 800f0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e2:	f7fc fa15 	bl	800b510 <rcl_convert_rmw_ret_to_rcl_ret>
 800f0e6:	4605      	mov	r5, r0
 800f0e8:	e7f7      	b.n	800f0da <rcl_expand_topic_name+0x16a>
 800f0ea:	2567      	movs	r5, #103	@ 0x67
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	b00b      	add	sp, #44	@ 0x2c
 800f0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f4:	25c9      	movs	r5, #201	@ 0xc9
 800f0f6:	e7f0      	b.n	800f0da <rcl_expand_topic_name+0x16a>
 800f0f8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 800f0fc:	9806      	ldr	r0, [sp, #24]
 800f0fe:	1c61      	adds	r1, r4, #1
 800f100:	f7fd fa4c 	bl	800c59c <rcutils_string_map_getn>
 800f104:	4681      	mov	r9, r0
 800f106:	2800      	cmp	r0, #0
 800f108:	d1be      	bne.n	800f088 <rcl_expand_topic_name+0x118>
 800f10a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f10c:	ab16      	add	r3, sp, #88	@ 0x58
 800f10e:	6010      	str	r0, [r2, #0]
 800f110:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f114:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f118:	ab14      	add	r3, sp, #80	@ 0x50
 800f11a:	cb0c      	ldmia	r3, {r2, r3}
 800f11c:	4659      	mov	r1, fp
 800f11e:	4620      	mov	r0, r4
 800f120:	f7fd f920 	bl	800c364 <rcutils_strndup>
 800f124:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f126:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f128:	4798      	blx	r3
 800f12a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f12c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f12e:	4650      	mov	r0, sl
 800f130:	4798      	blx	r3
 800f132:	2569      	movs	r5, #105	@ 0x69
 800f134:	e7d1      	b.n	800f0da <rcl_expand_topic_name+0x16a>
 800f136:	2800      	cmp	r0, #0
 800f138:	d061      	beq.n	800f1fe <rcl_expand_topic_name+0x28e>
 800f13a:	46c1      	mov	r9, r8
 800f13c:	46aa      	mov	sl, r5
 800f13e:	e781      	b.n	800f044 <rcl_expand_topic_name+0xd4>
 800f140:	46b1      	mov	r9, r6
 800f142:	e7a1      	b.n	800f088 <rcl_expand_topic_name+0x118>
 800f144:	f89a 3000 	ldrb.w	r3, [sl]
 800f148:	2b2f      	cmp	r3, #47	@ 0x2f
 800f14a:	d01d      	beq.n	800f188 <rcl_expand_topic_name+0x218>
 800f14c:	4638      	mov	r0, r7
 800f14e:	f7f1 f8a7 	bl	80002a0 <strlen>
 800f152:	4a38      	ldr	r2, [pc, #224]	@ (800f234 <rcl_expand_topic_name+0x2c4>)
 800f154:	4b38      	ldr	r3, [pc, #224]	@ (800f238 <rcl_expand_topic_name+0x2c8>)
 800f156:	f8cd a010 	str.w	sl, [sp, #16]
 800f15a:	2801      	cmp	r0, #1
 800f15c:	bf18      	it	ne
 800f15e:	4613      	movne	r3, r2
 800f160:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800f164:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800f168:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800f16a:	9703      	str	r7, [sp, #12]
 800f16c:	9200      	str	r2, [sp, #0]
 800f16e:	ab14      	add	r3, sp, #80	@ 0x50
 800f170:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f172:	f7fc ffa3 	bl	800c0bc <rcutils_format_string_limit>
 800f176:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f178:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f17a:	4604      	mov	r4, r0
 800f17c:	4650      	mov	r0, sl
 800f17e:	4798      	blx	r3
 800f180:	46a2      	mov	sl, r4
 800f182:	4653      	mov	r3, sl
 800f184:	2b00      	cmp	r3, #0
 800f186:	d036      	beq.n	800f1f6 <rcl_expand_topic_name+0x286>
 800f188:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f18a:	f8c3 a000 	str.w	sl, [r3]
 800f18e:	e7a4      	b.n	800f0da <rcl_expand_topic_name+0x16a>
 800f190:	4653      	mov	r3, sl
 800f192:	9d07      	ldr	r5, [sp, #28]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d1d5      	bne.n	800f144 <rcl_expand_topic_name+0x1d4>
 800f198:	f898 3000 	ldrb.w	r3, [r8]
 800f19c:	2b2f      	cmp	r3, #47	@ 0x2f
 800f19e:	d0f3      	beq.n	800f188 <rcl_expand_topic_name+0x218>
 800f1a0:	4638      	mov	r0, r7
 800f1a2:	f7f1 f87d 	bl	80002a0 <strlen>
 800f1a6:	4a23      	ldr	r2, [pc, #140]	@ (800f234 <rcl_expand_topic_name+0x2c4>)
 800f1a8:	4b23      	ldr	r3, [pc, #140]	@ (800f238 <rcl_expand_topic_name+0x2c8>)
 800f1aa:	f8cd 8010 	str.w	r8, [sp, #16]
 800f1ae:	2801      	cmp	r0, #1
 800f1b0:	bf18      	it	ne
 800f1b2:	4613      	movne	r3, r2
 800f1b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800f1b8:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800f1bc:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800f1be:	9703      	str	r7, [sp, #12]
 800f1c0:	9200      	str	r2, [sp, #0]
 800f1c2:	ab14      	add	r3, sp, #80	@ 0x50
 800f1c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f1c6:	f7fc ff79 	bl	800c0bc <rcutils_format_string_limit>
 800f1ca:	4682      	mov	sl, r0
 800f1cc:	e7d9      	b.n	800f182 <rcl_expand_topic_name+0x212>
 800f1ce:	25ca      	movs	r5, #202	@ 0xca
 800f1d0:	e783      	b.n	800f0da <rcl_expand_topic_name+0x16a>
 800f1d2:	2800      	cmp	r0, #0
 800f1d4:	d1b1      	bne.n	800f13a <rcl_expand_topic_name+0x1ca>
 800f1d6:	e7e3      	b.n	800f1a0 <rcl_expand_topic_name+0x230>
 800f1d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f1da:	6018      	str	r0, [r3, #0]
 800f1dc:	f7f8 f850 	bl	8007280 <rcutils_reset_error>
 800f1e0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f1e2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f1e4:	4650      	mov	r0, sl
 800f1e6:	4798      	blx	r3
 800f1e8:	250a      	movs	r5, #10
 800f1ea:	e776      	b.n	800f0da <rcl_expand_topic_name+0x16a>
 800f1ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f1ee:	601d      	str	r5, [r3, #0]
 800f1f0:	f7f8 f846 	bl	8007280 <rcutils_reset_error>
 800f1f4:	e7f8      	b.n	800f1e8 <rcl_expand_topic_name+0x278>
 800f1f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	6013      	str	r3, [r2, #0]
 800f1fc:	e7f4      	b.n	800f1e8 <rcl_expand_topic_name+0x278>
 800f1fe:	ab17      	add	r3, sp, #92	@ 0x5c
 800f200:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f204:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f208:	ab14      	add	r3, sp, #80	@ 0x50
 800f20a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f20c:	4640      	mov	r0, r8
 800f20e:	f7fd f873 	bl	800c2f8 <rcutils_strdup>
 800f212:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f214:	6018      	str	r0, [r3, #0]
 800f216:	2800      	cmp	r0, #0
 800f218:	f47f af5f 	bne.w	800f0da <rcl_expand_topic_name+0x16a>
 800f21c:	e7e8      	b.n	800f1f0 <rcl_expand_topic_name+0x280>
 800f21e:	bf00      	nop
 800f220:	080113d0 	.word	0x080113d0
 800f224:	080119ac 	.word	0x080119ac
 800f228:	080119b4 	.word	0x080119b4
 800f22c:	080119bc 	.word	0x080119bc
 800f230:	080119c4 	.word	0x080119c4
 800f234:	08011504 	.word	0x08011504
 800f238:	080113e0 	.word	0x080113e0

0800f23c <rcl_get_default_topic_name_substitutions>:
 800f23c:	2800      	cmp	r0, #0
 800f23e:	bf0c      	ite	eq
 800f240:	200b      	moveq	r0, #11
 800f242:	2000      	movne	r0, #0
 800f244:	4770      	bx	lr
 800f246:	bf00      	nop

0800f248 <rcl_get_zero_initialized_guard_condition>:
 800f248:	4a03      	ldr	r2, [pc, #12]	@ (800f258 <rcl_get_zero_initialized_guard_condition+0x10>)
 800f24a:	4603      	mov	r3, r0
 800f24c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f250:	e883 0003 	stmia.w	r3, {r0, r1}
 800f254:	4618      	mov	r0, r3
 800f256:	4770      	bx	lr
 800f258:	08011d90 	.word	0x08011d90

0800f25c <rcl_guard_condition_init_from_rmw>:
 800f25c:	b082      	sub	sp, #8
 800f25e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f262:	b086      	sub	sp, #24
 800f264:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800f268:	4604      	mov	r4, r0
 800f26a:	f84c 3f04 	str.w	r3, [ip, #4]!
 800f26e:	460e      	mov	r6, r1
 800f270:	4617      	mov	r7, r2
 800f272:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f276:	f10d 0e04 	add.w	lr, sp, #4
 800f27a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f27e:	f8dc 3000 	ldr.w	r3, [ip]
 800f282:	f8ce 3000 	str.w	r3, [lr]
 800f286:	a801      	add	r0, sp, #4
 800f288:	f7f7 ffce 	bl	8007228 <rcutils_allocator_is_valid>
 800f28c:	b350      	cbz	r0, 800f2e4 <rcl_guard_condition_init_from_rmw+0x88>
 800f28e:	b34c      	cbz	r4, 800f2e4 <rcl_guard_condition_init_from_rmw+0x88>
 800f290:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f294:	f1b8 0f00 	cmp.w	r8, #0
 800f298:	d11e      	bne.n	800f2d8 <rcl_guard_condition_init_from_rmw+0x7c>
 800f29a:	b31f      	cbz	r7, 800f2e4 <rcl_guard_condition_init_from_rmw+0x88>
 800f29c:	4638      	mov	r0, r7
 800f29e:	f7fc f951 	bl	800b544 <rcl_context_is_valid>
 800f2a2:	b328      	cbz	r0, 800f2f0 <rcl_guard_condition_init_from_rmw+0x94>
 800f2a4:	9b01      	ldr	r3, [sp, #4]
 800f2a6:	9905      	ldr	r1, [sp, #20]
 800f2a8:	201c      	movs	r0, #28
 800f2aa:	4798      	blx	r3
 800f2ac:	4605      	mov	r5, r0
 800f2ae:	6060      	str	r0, [r4, #4]
 800f2b0:	b358      	cbz	r0, 800f30a <rcl_guard_condition_init_from_rmw+0xae>
 800f2b2:	b1fe      	cbz	r6, 800f2f4 <rcl_guard_condition_init_from_rmw+0x98>
 800f2b4:	6006      	str	r6, [r0, #0]
 800f2b6:	f880 8004 	strb.w	r8, [r0, #4]
 800f2ba:	ac01      	add	r4, sp, #4
 800f2bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2be:	f105 0c08 	add.w	ip, r5, #8
 800f2c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f2c6:	6823      	ldr	r3, [r4, #0]
 800f2c8:	f8cc 3000 	str.w	r3, [ip]
 800f2cc:	2000      	movs	r0, #0
 800f2ce:	b006      	add	sp, #24
 800f2d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2d4:	b002      	add	sp, #8
 800f2d6:	4770      	bx	lr
 800f2d8:	2064      	movs	r0, #100	@ 0x64
 800f2da:	b006      	add	sp, #24
 800f2dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2e0:	b002      	add	sp, #8
 800f2e2:	4770      	bx	lr
 800f2e4:	200b      	movs	r0, #11
 800f2e6:	b006      	add	sp, #24
 800f2e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ec:	b002      	add	sp, #8
 800f2ee:	4770      	bx	lr
 800f2f0:	2065      	movs	r0, #101	@ 0x65
 800f2f2:	e7f2      	b.n	800f2da <rcl_guard_condition_init_from_rmw+0x7e>
 800f2f4:	6838      	ldr	r0, [r7, #0]
 800f2f6:	3028      	adds	r0, #40	@ 0x28
 800f2f8:	f000 fbc2 	bl	800fa80 <rmw_create_guard_condition>
 800f2fc:	6028      	str	r0, [r5, #0]
 800f2fe:	6865      	ldr	r5, [r4, #4]
 800f300:	682e      	ldr	r6, [r5, #0]
 800f302:	b126      	cbz	r6, 800f30e <rcl_guard_condition_init_from_rmw+0xb2>
 800f304:	2301      	movs	r3, #1
 800f306:	712b      	strb	r3, [r5, #4]
 800f308:	e7d7      	b.n	800f2ba <rcl_guard_condition_init_from_rmw+0x5e>
 800f30a:	200a      	movs	r0, #10
 800f30c:	e7e5      	b.n	800f2da <rcl_guard_condition_init_from_rmw+0x7e>
 800f30e:	4628      	mov	r0, r5
 800f310:	9b02      	ldr	r3, [sp, #8]
 800f312:	9905      	ldr	r1, [sp, #20]
 800f314:	4798      	blx	r3
 800f316:	2001      	movs	r0, #1
 800f318:	6066      	str	r6, [r4, #4]
 800f31a:	e7de      	b.n	800f2da <rcl_guard_condition_init_from_rmw+0x7e>

0800f31c <rcl_guard_condition_fini>:
 800f31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f31e:	b1d8      	cbz	r0, 800f358 <rcl_guard_condition_fini+0x3c>
 800f320:	4604      	mov	r4, r0
 800f322:	6840      	ldr	r0, [r0, #4]
 800f324:	b158      	cbz	r0, 800f33e <rcl_guard_condition_fini+0x22>
 800f326:	6803      	ldr	r3, [r0, #0]
 800f328:	68c6      	ldr	r6, [r0, #12]
 800f32a:	6987      	ldr	r7, [r0, #24]
 800f32c:	b153      	cbz	r3, 800f344 <rcl_guard_condition_fini+0x28>
 800f32e:	7905      	ldrb	r5, [r0, #4]
 800f330:	b955      	cbnz	r5, 800f348 <rcl_guard_condition_fini+0x2c>
 800f332:	4639      	mov	r1, r7
 800f334:	47b0      	blx	r6
 800f336:	2300      	movs	r3, #0
 800f338:	6063      	str	r3, [r4, #4]
 800f33a:	4628      	mov	r0, r5
 800f33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f33e:	4605      	mov	r5, r0
 800f340:	4628      	mov	r0, r5
 800f342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f344:	461d      	mov	r5, r3
 800f346:	e7f4      	b.n	800f332 <rcl_guard_condition_fini+0x16>
 800f348:	4618      	mov	r0, r3
 800f34a:	f000 fbad 	bl	800faa8 <rmw_destroy_guard_condition>
 800f34e:	1e05      	subs	r5, r0, #0
 800f350:	bf18      	it	ne
 800f352:	2501      	movne	r5, #1
 800f354:	6860      	ldr	r0, [r4, #4]
 800f356:	e7ec      	b.n	800f332 <rcl_guard_condition_fini+0x16>
 800f358:	250b      	movs	r5, #11
 800f35a:	4628      	mov	r0, r5
 800f35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f35e:	bf00      	nop

0800f360 <rcl_guard_condition_get_default_options>:
 800f360:	b510      	push	{r4, lr}
 800f362:	4604      	mov	r4, r0
 800f364:	f7f7 ff34 	bl	80071d0 <rcutils_get_default_allocator>
 800f368:	4620      	mov	r0, r4
 800f36a:	bd10      	pop	{r4, pc}

0800f36c <rcl_validate_topic_name>:
 800f36c:	2800      	cmp	r0, #0
 800f36e:	d06b      	beq.n	800f448 <rcl_validate_topic_name+0xdc>
 800f370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f374:	460d      	mov	r5, r1
 800f376:	2900      	cmp	r1, #0
 800f378:	d06d      	beq.n	800f456 <rcl_validate_topic_name+0xea>
 800f37a:	4616      	mov	r6, r2
 800f37c:	4604      	mov	r4, r0
 800f37e:	f7f0 ff8f 	bl	80002a0 <strlen>
 800f382:	b190      	cbz	r0, 800f3aa <rcl_validate_topic_name+0x3e>
 800f384:	7821      	ldrb	r1, [r4, #0]
 800f386:	4a71      	ldr	r2, [pc, #452]	@ (800f54c <rcl_validate_topic_name+0x1e0>)
 800f388:	5c53      	ldrb	r3, [r2, r1]
 800f38a:	f013 0304 	ands.w	r3, r3, #4
 800f38e:	d15d      	bne.n	800f44c <rcl_validate_topic_name+0xe0>
 800f390:	1e47      	subs	r7, r0, #1
 800f392:	f814 c007 	ldrb.w	ip, [r4, r7]
 800f396:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 800f39a:	d10d      	bne.n	800f3b8 <rcl_validate_topic_name+0x4c>
 800f39c:	2302      	movs	r3, #2
 800f39e:	602b      	str	r3, [r5, #0]
 800f3a0:	b146      	cbz	r6, 800f3b4 <rcl_validate_topic_name+0x48>
 800f3a2:	6037      	str	r7, [r6, #0]
 800f3a4:	2000      	movs	r0, #0
 800f3a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	602b      	str	r3, [r5, #0]
 800f3ae:	b10e      	cbz	r6, 800f3b4 <rcl_validate_topic_name+0x48>
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	6033      	str	r3, [r6, #0]
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	e7f6      	b.n	800f3a6 <rcl_validate_topic_name+0x3a>
 800f3b8:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 800f3bc:	469a      	mov	sl, r3
 800f3be:	469e      	mov	lr, r3
 800f3c0:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 800f3c4:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 800f3c8:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 800f3cc:	d85b      	bhi.n	800f486 <rcl_validate_topic_name+0x11a>
 800f3ce:	e8df f00c 	tbb	[pc, ip]
 800f3d2:	4463      	.short	0x4463
 800f3d4:	44444444 	.word	0x44444444
 800f3d8:	44444444 	.word	0x44444444
 800f3dc:	5a5a5a44 	.word	0x5a5a5a44
 800f3e0:	5a5a5a5a 	.word	0x5a5a5a5a
 800f3e4:	44444444 	.word	0x44444444
 800f3e8:	44444444 	.word	0x44444444
 800f3ec:	44444444 	.word	0x44444444
 800f3f0:	44444444 	.word	0x44444444
 800f3f4:	44444444 	.word	0x44444444
 800f3f8:	44444444 	.word	0x44444444
 800f3fc:	5a5a4444 	.word	0x5a5a4444
 800f400:	5a2e5a5a 	.word	0x5a2e5a5a
 800f404:	44444444 	.word	0x44444444
 800f408:	44444444 	.word	0x44444444
 800f40c:	44444444 	.word	0x44444444
 800f410:	44444444 	.word	0x44444444
 800f414:	44444444 	.word	0x44444444
 800f418:	44444444 	.word	0x44444444
 800f41c:	5a284444 	.word	0x5a284444
 800f420:	6b73      	.short	0x6b73
 800f422:	f1ba 0f00 	cmp.w	sl, #0
 800f426:	d13a      	bne.n	800f49e <rcl_validate_topic_name+0x132>
 800f428:	4673      	mov	r3, lr
 800f42a:	f04f 0a01 	mov.w	sl, #1
 800f42e:	f10e 0e01 	add.w	lr, lr, #1
 800f432:	4570      	cmp	r0, lr
 800f434:	d1c4      	bne.n	800f3c0 <rcl_validate_topic_name+0x54>
 800f436:	f1ba 0f00 	cmp.w	sl, #0
 800f43a:	d048      	beq.n	800f4ce <rcl_validate_topic_name+0x162>
 800f43c:	2205      	movs	r2, #5
 800f43e:	602a      	str	r2, [r5, #0]
 800f440:	2e00      	cmp	r6, #0
 800f442:	d0b7      	beq.n	800f3b4 <rcl_validate_topic_name+0x48>
 800f444:	6033      	str	r3, [r6, #0]
 800f446:	e7b5      	b.n	800f3b4 <rcl_validate_topic_name+0x48>
 800f448:	200b      	movs	r0, #11
 800f44a:	4770      	bx	lr
 800f44c:	2304      	movs	r3, #4
 800f44e:	602b      	str	r3, [r5, #0]
 800f450:	2e00      	cmp	r6, #0
 800f452:	d1ad      	bne.n	800f3b0 <rcl_validate_topic_name+0x44>
 800f454:	e7ae      	b.n	800f3b4 <rcl_validate_topic_name+0x48>
 800f456:	200b      	movs	r0, #11
 800f458:	e7a5      	b.n	800f3a6 <rcl_validate_topic_name+0x3a>
 800f45a:	f812 c009 	ldrb.w	ip, [r2, r9]
 800f45e:	f01c 0f04 	tst.w	ip, #4
 800f462:	d0e4      	beq.n	800f42e <rcl_validate_topic_name+0xc2>
 800f464:	f1ba 0f00 	cmp.w	sl, #0
 800f468:	d0e1      	beq.n	800f42e <rcl_validate_topic_name+0xc2>
 800f46a:	f1be 0f00 	cmp.w	lr, #0
 800f46e:	d0de      	beq.n	800f42e <rcl_validate_topic_name+0xc2>
 800f470:	f10e 3cff 	add.w	ip, lr, #4294967295	@ 0xffffffff
 800f474:	4563      	cmp	r3, ip
 800f476:	d1da      	bne.n	800f42e <rcl_validate_topic_name+0xc2>
 800f478:	2309      	movs	r3, #9
 800f47a:	602b      	str	r3, [r5, #0]
 800f47c:	2e00      	cmp	r6, #0
 800f47e:	d099      	beq.n	800f3b4 <rcl_validate_topic_name+0x48>
 800f480:	f8c6 e000 	str.w	lr, [r6]
 800f484:	e796      	b.n	800f3b4 <rcl_validate_topic_name+0x48>
 800f486:	f1ba 0f00 	cmp.w	sl, #0
 800f48a:	bf0c      	ite	eq
 800f48c:	2303      	moveq	r3, #3
 800f48e:	2308      	movne	r3, #8
 800f490:	602b      	str	r3, [r5, #0]
 800f492:	2e00      	cmp	r6, #0
 800f494:	d1f4      	bne.n	800f480 <rcl_validate_topic_name+0x114>
 800f496:	e78d      	b.n	800f3b4 <rcl_validate_topic_name+0x48>
 800f498:	f1ba 0f00 	cmp.w	sl, #0
 800f49c:	d0c7      	beq.n	800f42e <rcl_validate_topic_name+0xc2>
 800f49e:	2308      	movs	r3, #8
 800f4a0:	602b      	str	r3, [r5, #0]
 800f4a2:	2e00      	cmp	r6, #0
 800f4a4:	d1ec      	bne.n	800f480 <rcl_validate_topic_name+0x114>
 800f4a6:	e785      	b.n	800f3b4 <rcl_validate_topic_name+0x48>
 800f4a8:	f1be 0f00 	cmp.w	lr, #0
 800f4ac:	d0bf      	beq.n	800f42e <rcl_validate_topic_name+0xc2>
 800f4ae:	2306      	movs	r3, #6
 800f4b0:	602b      	str	r3, [r5, #0]
 800f4b2:	2e00      	cmp	r6, #0
 800f4b4:	d1e4      	bne.n	800f480 <rcl_validate_topic_name+0x114>
 800f4b6:	e77d      	b.n	800f3b4 <rcl_validate_topic_name+0x48>
 800f4b8:	f1ba 0f00 	cmp.w	sl, #0
 800f4bc:	d104      	bne.n	800f4c8 <rcl_validate_topic_name+0x15c>
 800f4be:	2305      	movs	r3, #5
 800f4c0:	602b      	str	r3, [r5, #0]
 800f4c2:	2e00      	cmp	r6, #0
 800f4c4:	d1dc      	bne.n	800f480 <rcl_validate_topic_name+0x114>
 800f4c6:	e775      	b.n	800f3b4 <rcl_validate_topic_name+0x48>
 800f4c8:	f04f 0a00 	mov.w	sl, #0
 800f4cc:	e7af      	b.n	800f42e <rcl_validate_topic_name+0xc2>
 800f4ce:	297e      	cmp	r1, #126	@ 0x7e
 800f4d0:	d01d      	beq.n	800f50e <rcl_validate_topic_name+0x1a2>
 800f4d2:	2101      	movs	r1, #1
 800f4d4:	e006      	b.n	800f4e4 <rcl_validate_topic_name+0x178>
 800f4d6:	458e      	cmp	lr, r1
 800f4d8:	f104 0401 	add.w	r4, r4, #1
 800f4dc:	f101 0301 	add.w	r3, r1, #1
 800f4e0:	d912      	bls.n	800f508 <rcl_validate_topic_name+0x19c>
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	4557      	cmp	r7, sl
 800f4e6:	f10a 0a01 	add.w	sl, sl, #1
 800f4ea:	d0f4      	beq.n	800f4d6 <rcl_validate_topic_name+0x16a>
 800f4ec:	7823      	ldrb	r3, [r4, #0]
 800f4ee:	2b2f      	cmp	r3, #47	@ 0x2f
 800f4f0:	d1f1      	bne.n	800f4d6 <rcl_validate_topic_name+0x16a>
 800f4f2:	7863      	ldrb	r3, [r4, #1]
 800f4f4:	5cd3      	ldrb	r3, [r2, r3]
 800f4f6:	075b      	lsls	r3, r3, #29
 800f4f8:	d5ed      	bpl.n	800f4d6 <rcl_validate_topic_name+0x16a>
 800f4fa:	2304      	movs	r3, #4
 800f4fc:	602b      	str	r3, [r5, #0]
 800f4fe:	2e00      	cmp	r6, #0
 800f500:	f43f af58 	beq.w	800f3b4 <rcl_validate_topic_name+0x48>
 800f504:	6031      	str	r1, [r6, #0]
 800f506:	e755      	b.n	800f3b4 <rcl_validate_topic_name+0x48>
 800f508:	2300      	movs	r3, #0
 800f50a:	602b      	str	r3, [r5, #0]
 800f50c:	e752      	b.n	800f3b4 <rcl_validate_topic_name+0x48>
 800f50e:	4653      	mov	r3, sl
 800f510:	2101      	movs	r1, #1
 800f512:	e00a      	b.n	800f52a <rcl_validate_topic_name+0x1be>
 800f514:	2b01      	cmp	r3, #1
 800f516:	d012      	beq.n	800f53e <rcl_validate_topic_name+0x1d2>
 800f518:	458e      	cmp	lr, r1
 800f51a:	f103 0301 	add.w	r3, r3, #1
 800f51e:	f104 0401 	add.w	r4, r4, #1
 800f522:	f101 0001 	add.w	r0, r1, #1
 800f526:	d9ef      	bls.n	800f508 <rcl_validate_topic_name+0x19c>
 800f528:	4601      	mov	r1, r0
 800f52a:	429f      	cmp	r7, r3
 800f52c:	d0f4      	beq.n	800f518 <rcl_validate_topic_name+0x1ac>
 800f52e:	7820      	ldrb	r0, [r4, #0]
 800f530:	282f      	cmp	r0, #47	@ 0x2f
 800f532:	d1ef      	bne.n	800f514 <rcl_validate_topic_name+0x1a8>
 800f534:	7860      	ldrb	r0, [r4, #1]
 800f536:	5c10      	ldrb	r0, [r2, r0]
 800f538:	0740      	lsls	r0, r0, #29
 800f53a:	d5ed      	bpl.n	800f518 <rcl_validate_topic_name+0x1ac>
 800f53c:	e7dd      	b.n	800f4fa <rcl_validate_topic_name+0x18e>
 800f53e:	2207      	movs	r2, #7
 800f540:	602a      	str	r2, [r5, #0]
 800f542:	2e00      	cmp	r6, #0
 800f544:	f47f af7e 	bne.w	800f444 <rcl_validate_topic_name+0xd8>
 800f548:	e734      	b.n	800f3b4 <rcl_validate_topic_name+0x48>
 800f54a:	bf00      	nop
 800f54c:	08011e93 	.word	0x08011e93

0800f550 <rcutils_split>:
 800f550:	b082      	sub	sp, #8
 800f552:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f556:	b08b      	sub	sp, #44	@ 0x2c
 800f558:	ac14      	add	r4, sp, #80	@ 0x50
 800f55a:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 800f55c:	e884 000c 	stmia.w	r4, {r2, r3}
 800f560:	2f00      	cmp	r7, #0
 800f562:	f000 8091 	beq.w	800f688 <rcutils_split+0x138>
 800f566:	4606      	mov	r6, r0
 800f568:	2800      	cmp	r0, #0
 800f56a:	d072      	beq.n	800f652 <rcutils_split+0x102>
 800f56c:	7804      	ldrb	r4, [r0, #0]
 800f56e:	2c00      	cmp	r4, #0
 800f570:	d06f      	beq.n	800f652 <rcutils_split+0x102>
 800f572:	460d      	mov	r5, r1
 800f574:	f7f0 fe94 	bl	80002a0 <strlen>
 800f578:	1833      	adds	r3, r6, r0
 800f57a:	1b64      	subs	r4, r4, r5
 800f57c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f580:	4681      	mov	r9, r0
 800f582:	fab4 f484 	clz	r4, r4
 800f586:	0964      	lsrs	r4, r4, #5
 800f588:	42ab      	cmp	r3, r5
 800f58a:	bf08      	it	eq
 800f58c:	f1a9 0901 	subeq.w	r9, r9, #1
 800f590:	454c      	cmp	r4, r9
 800f592:	d26a      	bcs.n	800f66a <rcutils_split+0x11a>
 800f594:	1933      	adds	r3, r6, r4
 800f596:	eb06 0009 	add.w	r0, r6, r9
 800f59a:	2101      	movs	r1, #1
 800f59c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5a0:	42aa      	cmp	r2, r5
 800f5a2:	bf08      	it	eq
 800f5a4:	3101      	addeq	r1, #1
 800f5a6:	4283      	cmp	r3, r0
 800f5a8:	d1f8      	bne.n	800f59c <rcutils_split+0x4c>
 800f5aa:	aa14      	add	r2, sp, #80	@ 0x50
 800f5ac:	4638      	mov	r0, r7
 800f5ae:	f000 f88f 	bl	800f6d0 <rcutils_string_array_init>
 800f5b2:	2800      	cmp	r0, #0
 800f5b4:	d141      	bne.n	800f63a <rcutils_split+0xea>
 800f5b6:	687a      	ldr	r2, [r7, #4]
 800f5b8:	4680      	mov	r8, r0
 800f5ba:	46a2      	mov	sl, r4
 800f5bc:	e002      	b.n	800f5c4 <rcutils_split+0x74>
 800f5be:	3401      	adds	r4, #1
 800f5c0:	454c      	cmp	r4, r9
 800f5c2:	d222      	bcs.n	800f60a <rcutils_split+0xba>
 800f5c4:	5d33      	ldrb	r3, [r6, r4]
 800f5c6:	42ab      	cmp	r3, r5
 800f5c8:	d1f9      	bne.n	800f5be <rcutils_split+0x6e>
 800f5ca:	4554      	cmp	r4, sl
 800f5cc:	eba4 0b0a 	sub.w	fp, r4, sl
 800f5d0:	d038      	beq.n	800f644 <rcutils_split+0xf4>
 800f5d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f5d4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f5d6:	9201      	str	r2, [sp, #4]
 800f5d8:	f10b 0002 	add.w	r0, fp, #2
 800f5dc:	4798      	blx	r3
 800f5de:	9a01      	ldr	r2, [sp, #4]
 800f5e0:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 800f5ea:	eb06 030a 	add.w	r3, r6, sl
 800f5ee:	f10b 0101 	add.w	r1, fp, #1
 800f5f2:	2800      	cmp	r0, #0
 800f5f4:	d04e      	beq.n	800f694 <rcutils_split+0x144>
 800f5f6:	4a2d      	ldr	r2, [pc, #180]	@ (800f6ac <rcutils_split+0x15c>)
 800f5f8:	f000 fd7a 	bl	80100f0 <sniprintf>
 800f5fc:	687a      	ldr	r2, [r7, #4]
 800f5fe:	f108 0801 	add.w	r8, r8, #1
 800f602:	3401      	adds	r4, #1
 800f604:	454c      	cmp	r4, r9
 800f606:	46a2      	mov	sl, r4
 800f608:	d3dc      	bcc.n	800f5c4 <rcutils_split+0x74>
 800f60a:	4554      	cmp	r4, sl
 800f60c:	d035      	beq.n	800f67a <rcutils_split+0x12a>
 800f60e:	eba4 040a 	sub.w	r4, r4, sl
 800f612:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f614:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f616:	9201      	str	r2, [sp, #4]
 800f618:	1ca0      	adds	r0, r4, #2
 800f61a:	4798      	blx	r3
 800f61c:	9a01      	ldr	r2, [sp, #4]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 800f624:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f628:	2800      	cmp	r0, #0
 800f62a:	d035      	beq.n	800f698 <rcutils_split+0x148>
 800f62c:	4a1f      	ldr	r2, [pc, #124]	@ (800f6ac <rcutils_split+0x15c>)
 800f62e:	eb06 030a 	add.w	r3, r6, sl
 800f632:	1c61      	adds	r1, r4, #1
 800f634:	f000 fd5c 	bl	80100f0 <sniprintf>
 800f638:	2000      	movs	r0, #0
 800f63a:	b00b      	add	sp, #44	@ 0x2c
 800f63c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f640:	b002      	add	sp, #8
 800f642:	4770      	bx	lr
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	3b01      	subs	r3, #1
 800f648:	2100      	movs	r1, #0
 800f64a:	603b      	str	r3, [r7, #0]
 800f64c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f650:	e7d7      	b.n	800f602 <rcutils_split+0xb2>
 800f652:	a802      	add	r0, sp, #8
 800f654:	ac02      	add	r4, sp, #8
 800f656:	f000 f82b 	bl	800f6b0 <rcutils_get_zero_initialized_string_array>
 800f65a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f65c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f65e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800f662:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800f666:	2000      	movs	r0, #0
 800f668:	e7e7      	b.n	800f63a <rcutils_split+0xea>
 800f66a:	aa14      	add	r2, sp, #80	@ 0x50
 800f66c:	2101      	movs	r1, #1
 800f66e:	4638      	mov	r0, r7
 800f670:	f000 f82e 	bl	800f6d0 <rcutils_string_array_init>
 800f674:	2800      	cmp	r0, #0
 800f676:	d1e0      	bne.n	800f63a <rcutils_split+0xea>
 800f678:	687a      	ldr	r2, [r7, #4]
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	3b01      	subs	r3, #1
 800f67e:	2100      	movs	r1, #0
 800f680:	603b      	str	r3, [r7, #0]
 800f682:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f686:	e7ee      	b.n	800f666 <rcutils_split+0x116>
 800f688:	200b      	movs	r0, #11
 800f68a:	b00b      	add	sp, #44	@ 0x2c
 800f68c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f690:	b002      	add	sp, #8
 800f692:	4770      	bx	lr
 800f694:	f8c7 8000 	str.w	r8, [r7]
 800f698:	4638      	mov	r0, r7
 800f69a:	f000 f83b 	bl	800f714 <rcutils_string_array_fini>
 800f69e:	b908      	cbnz	r0, 800f6a4 <rcutils_split+0x154>
 800f6a0:	200a      	movs	r0, #10
 800f6a2:	e7ca      	b.n	800f63a <rcutils_split+0xea>
 800f6a4:	f7f7 fdec 	bl	8007280 <rcutils_reset_error>
 800f6a8:	e7fa      	b.n	800f6a0 <rcutils_split+0x150>
 800f6aa:	bf00      	nop
 800f6ac:	080113d4 	.word	0x080113d4

0800f6b0 <rcutils_get_zero_initialized_string_array>:
 800f6b0:	b510      	push	{r4, lr}
 800f6b2:	4c06      	ldr	r4, [pc, #24]	@ (800f6cc <rcutils_get_zero_initialized_string_array+0x1c>)
 800f6b4:	4686      	mov	lr, r0
 800f6b6:	4684      	mov	ip, r0
 800f6b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f6ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f6be:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800f6c2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800f6c6:	4670      	mov	r0, lr
 800f6c8:	bd10      	pop	{r4, pc}
 800f6ca:	bf00      	nop
 800f6cc:	08011d98 	.word	0x08011d98

0800f6d0 <rcutils_string_array_init>:
 800f6d0:	b1da      	cbz	r2, 800f70a <rcutils_string_array_init+0x3a>
 800f6d2:	b570      	push	{r4, r5, r6, lr}
 800f6d4:	4605      	mov	r5, r0
 800f6d6:	b1d0      	cbz	r0, 800f70e <rcutils_string_array_init+0x3e>
 800f6d8:	460e      	mov	r6, r1
 800f6da:	4614      	mov	r4, r2
 800f6dc:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 800f6e0:	6001      	str	r1, [r0, #0]
 800f6e2:	2104      	movs	r1, #4
 800f6e4:	4630      	mov	r0, r6
 800f6e6:	4798      	blx	r3
 800f6e8:	6068      	str	r0, [r5, #4]
 800f6ea:	b150      	cbz	r0, 800f702 <rcutils_string_array_init+0x32>
 800f6ec:	46a4      	mov	ip, r4
 800f6ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f6f2:	f105 0408 	add.w	r4, r5, #8
 800f6f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f6f8:	f8dc 3000 	ldr.w	r3, [ip]
 800f6fc:	6023      	str	r3, [r4, #0]
 800f6fe:	2000      	movs	r0, #0
 800f700:	bd70      	pop	{r4, r5, r6, pc}
 800f702:	2e00      	cmp	r6, #0
 800f704:	d0f2      	beq.n	800f6ec <rcutils_string_array_init+0x1c>
 800f706:	200a      	movs	r0, #10
 800f708:	bd70      	pop	{r4, r5, r6, pc}
 800f70a:	200b      	movs	r0, #11
 800f70c:	4770      	bx	lr
 800f70e:	200b      	movs	r0, #11
 800f710:	bd70      	pop	{r4, r5, r6, pc}
 800f712:	bf00      	nop

0800f714 <rcutils_string_array_fini>:
 800f714:	b310      	cbz	r0, 800f75c <rcutils_string_array_fini+0x48>
 800f716:	6843      	ldr	r3, [r0, #4]
 800f718:	b570      	push	{r4, r5, r6, lr}
 800f71a:	4604      	mov	r4, r0
 800f71c:	b1d3      	cbz	r3, 800f754 <rcutils_string_array_fini+0x40>
 800f71e:	3008      	adds	r0, #8
 800f720:	f7f7 fd82 	bl	8007228 <rcutils_allocator_is_valid>
 800f724:	b1c0      	cbz	r0, 800f758 <rcutils_string_array_fini+0x44>
 800f726:	e9d4 3000 	ldrd	r3, r0, [r4]
 800f72a:	b16b      	cbz	r3, 800f748 <rcutils_string_array_fini+0x34>
 800f72c:	2500      	movs	r5, #0
 800f72e:	462e      	mov	r6, r5
 800f730:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 800f734:	68e3      	ldr	r3, [r4, #12]
 800f736:	69a1      	ldr	r1, [r4, #24]
 800f738:	4798      	blx	r3
 800f73a:	e9d4 3000 	ldrd	r3, r0, [r4]
 800f73e:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 800f742:	3501      	adds	r5, #1
 800f744:	42ab      	cmp	r3, r5
 800f746:	d8f3      	bhi.n	800f730 <rcutils_string_array_fini+0x1c>
 800f748:	68e3      	ldr	r3, [r4, #12]
 800f74a:	69a1      	ldr	r1, [r4, #24]
 800f74c:	4798      	blx	r3
 800f74e:	2300      	movs	r3, #0
 800f750:	e9c4 3300 	strd	r3, r3, [r4]
 800f754:	2000      	movs	r0, #0
 800f756:	bd70      	pop	{r4, r5, r6, pc}
 800f758:	200b      	movs	r0, #11
 800f75a:	bd70      	pop	{r4, r5, r6, pc}
 800f75c:	200b      	movs	r0, #11
 800f75e:	4770      	bx	lr

0800f760 <rmw_discovery_options_init>:
 800f760:	b328      	cbz	r0, 800f7ae <rmw_discovery_options_init+0x4e>
 800f762:	b570      	push	{r4, r5, r6, lr}
 800f764:	4604      	mov	r4, r0
 800f766:	4610      	mov	r0, r2
 800f768:	460e      	mov	r6, r1
 800f76a:	4615      	mov	r5, r2
 800f76c:	f7f7 fd5c 	bl	8007228 <rcutils_allocator_is_valid>
 800f770:	b1d8      	cbz	r0, 800f7aa <rmw_discovery_options_init+0x4a>
 800f772:	68a3      	ldr	r3, [r4, #8]
 800f774:	b9cb      	cbnz	r3, 800f7aa <rmw_discovery_options_init+0x4a>
 800f776:	6863      	ldr	r3, [r4, #4]
 800f778:	b9bb      	cbnz	r3, 800f7aa <rmw_discovery_options_init+0x4a>
 800f77a:	7823      	ldrb	r3, [r4, #0]
 800f77c:	b90b      	cbnz	r3, 800f782 <rmw_discovery_options_init+0x22>
 800f77e:	2302      	movs	r3, #2
 800f780:	7023      	strb	r3, [r4, #0]
 800f782:	b186      	cbz	r6, 800f7a6 <rmw_discovery_options_init+0x46>
 800f784:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 800f788:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f78c:	4630      	mov	r0, r6
 800f78e:	4798      	blx	r3
 800f790:	6060      	str	r0, [r4, #4]
 800f792:	b170      	cbz	r0, 800f7b2 <rmw_discovery_options_init+0x52>
 800f794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f796:	f104 0c0c 	add.w	ip, r4, #12
 800f79a:	60a6      	str	r6, [r4, #8]
 800f79c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f7a0:	682b      	ldr	r3, [r5, #0]
 800f7a2:	f8cc 3000 	str.w	r3, [ip]
 800f7a6:	2000      	movs	r0, #0
 800f7a8:	bd70      	pop	{r4, r5, r6, pc}
 800f7aa:	200b      	movs	r0, #11
 800f7ac:	bd70      	pop	{r4, r5, r6, pc}
 800f7ae:	200b      	movs	r0, #11
 800f7b0:	4770      	bx	lr
 800f7b2:	200a      	movs	r0, #10
 800f7b4:	bd70      	pop	{r4, r5, r6, pc}
 800f7b6:	bf00      	nop

0800f7b8 <rmw_enclave_options_copy>:
 800f7b8:	b1e0      	cbz	r0, 800f7f4 <rmw_enclave_options_copy+0x3c>
 800f7ba:	b570      	push	{r4, r5, r6, lr}
 800f7bc:	4616      	mov	r6, r2
 800f7be:	b082      	sub	sp, #8
 800f7c0:	b1aa      	cbz	r2, 800f7ee <rmw_enclave_options_copy+0x36>
 800f7c2:	4605      	mov	r5, r0
 800f7c4:	4608      	mov	r0, r1
 800f7c6:	460c      	mov	r4, r1
 800f7c8:	f7f7 fd2e 	bl	8007228 <rcutils_allocator_is_valid>
 800f7cc:	b178      	cbz	r0, 800f7ee <rmw_enclave_options_copy+0x36>
 800f7ce:	f104 030c 	add.w	r3, r4, #12
 800f7d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f7d6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f7da:	4628      	mov	r0, r5
 800f7dc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f7e0:	f7fc fd8a 	bl	800c2f8 <rcutils_strdup>
 800f7e4:	b140      	cbz	r0, 800f7f8 <rmw_enclave_options_copy+0x40>
 800f7e6:	6030      	str	r0, [r6, #0]
 800f7e8:	2000      	movs	r0, #0
 800f7ea:	b002      	add	sp, #8
 800f7ec:	bd70      	pop	{r4, r5, r6, pc}
 800f7ee:	200b      	movs	r0, #11
 800f7f0:	b002      	add	sp, #8
 800f7f2:	bd70      	pop	{r4, r5, r6, pc}
 800f7f4:	200b      	movs	r0, #11
 800f7f6:	4770      	bx	lr
 800f7f8:	200a      	movs	r0, #10
 800f7fa:	e7f6      	b.n	800f7ea <rmw_enclave_options_copy+0x32>

0800f7fc <rmw_enclave_options_fini>:
 800f7fc:	b170      	cbz	r0, 800f81c <rmw_enclave_options_fini+0x20>
 800f7fe:	b538      	push	{r3, r4, r5, lr}
 800f800:	4605      	mov	r5, r0
 800f802:	4608      	mov	r0, r1
 800f804:	460c      	mov	r4, r1
 800f806:	f7f7 fd0f 	bl	8007228 <rcutils_allocator_is_valid>
 800f80a:	b128      	cbz	r0, 800f818 <rmw_enclave_options_fini+0x1c>
 800f80c:	4628      	mov	r0, r5
 800f80e:	6863      	ldr	r3, [r4, #4]
 800f810:	6921      	ldr	r1, [r4, #16]
 800f812:	4798      	blx	r3
 800f814:	2000      	movs	r0, #0
 800f816:	bd38      	pop	{r3, r4, r5, pc}
 800f818:	200b      	movs	r0, #11
 800f81a:	bd38      	pop	{r3, r4, r5, pc}
 800f81c:	200b      	movs	r0, #11
 800f81e:	4770      	bx	lr

0800f820 <rmw_get_default_security_options>:
 800f820:	2200      	movs	r2, #0
 800f822:	7002      	strb	r2, [r0, #0]
 800f824:	6042      	str	r2, [r0, #4]
 800f826:	4770      	bx	lr

0800f828 <on_status>:
 800f828:	b082      	sub	sp, #8
 800f82a:	b002      	add	sp, #8
 800f82c:	4770      	bx	lr
 800f82e:	bf00      	nop

0800f830 <on_topic>:
 800f830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f834:	4a22      	ldr	r2, [pc, #136]	@ (800f8c0 <on_topic+0x90>)
 800f836:	b094      	sub	sp, #80	@ 0x50
 800f838:	6812      	ldr	r2, [r2, #0]
 800f83a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800f83c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 800f840:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 800f844:	b3c2      	cbz	r2, 800f8b8 <on_topic+0x88>
 800f846:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 800f84a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 800f84e:	e001      	b.n	800f854 <on_topic+0x24>
 800f850:	6852      	ldr	r2, [r2, #4]
 800f852:	b38a      	cbz	r2, 800f8b8 <on_topic+0x88>
 800f854:	6894      	ldr	r4, [r2, #8]
 800f856:	8aa3      	ldrh	r3, [r4, #20]
 800f858:	428b      	cmp	r3, r1
 800f85a:	d1f9      	bne.n	800f850 <on_topic+0x20>
 800f85c:	7da3      	ldrb	r3, [r4, #22]
 800f85e:	4283      	cmp	r3, r0
 800f860:	d1f6      	bne.n	800f850 <on_topic+0x20>
 800f862:	2248      	movs	r2, #72	@ 0x48
 800f864:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f868:	4668      	mov	r0, sp
 800f86a:	f000 fdd2 	bl	8010412 <memcpy>
 800f86e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 800f872:	cb0c      	ldmia	r3, {r2, r3}
 800f874:	4620      	mov	r0, r4
 800f876:	f7f8 f8bb 	bl	80079f0 <rmw_uxrce_get_static_input_buffer_for_entity>
 800f87a:	4607      	mov	r7, r0
 800f87c:	b1e0      	cbz	r0, 800f8b8 <on_topic+0x88>
 800f87e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 800f882:	4632      	mov	r2, r6
 800f884:	4628      	mov	r0, r5
 800f886:	f108 0110 	add.w	r1, r8, #16
 800f88a:	f7fd fe45 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800f88e:	b930      	cbnz	r0, 800f89e <on_topic+0x6e>
 800f890:	480c      	ldr	r0, [pc, #48]	@ (800f8c4 <on_topic+0x94>)
 800f892:	4639      	mov	r1, r7
 800f894:	b014      	add	sp, #80	@ 0x50
 800f896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f89a:	f7fd b84f 	b.w	800c93c <put_memory>
 800f89e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 800f8a2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 800f8a6:	f7fd fcff 	bl	800d2a8 <rmw_uros_epoch_nanos>
 800f8aa:	2305      	movs	r3, #5
 800f8ac:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 800f8b0:	e942 0102 	strd	r0, r1, [r2, #-8]
 800f8b4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 800f8b8:	b014      	add	sp, #80	@ 0x50
 800f8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8be:	bf00      	nop
 800f8c0:	2000bc00 	.word	0x2000bc00
 800f8c4:	2000b450 	.word	0x2000b450

0800f8c8 <on_request>:
 800f8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8cc:	4823      	ldr	r0, [pc, #140]	@ (800f95c <on_request+0x94>)
 800f8ce:	b094      	sub	sp, #80	@ 0x50
 800f8d0:	6800      	ldr	r0, [r0, #0]
 800f8d2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800f8d4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 800f8d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f8da:	2800      	cmp	r0, #0
 800f8dc:	d03b      	beq.n	800f956 <on_request+0x8e>
 800f8de:	461d      	mov	r5, r3
 800f8e0:	e001      	b.n	800f8e6 <on_request+0x1e>
 800f8e2:	6840      	ldr	r0, [r0, #4]
 800f8e4:	b3b8      	cbz	r0, 800f956 <on_request+0x8e>
 800f8e6:	6884      	ldr	r4, [r0, #8]
 800f8e8:	8b21      	ldrh	r1, [r4, #24]
 800f8ea:	4291      	cmp	r1, r2
 800f8ec:	d1f9      	bne.n	800f8e2 <on_request+0x1a>
 800f8ee:	2248      	movs	r2, #72	@ 0x48
 800f8f0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 800f8f4:	4668      	mov	r0, sp
 800f8f6:	f000 fd8c 	bl	8010412 <memcpy>
 800f8fa:	f104 0320 	add.w	r3, r4, #32
 800f8fe:	cb0c      	ldmia	r3, {r2, r3}
 800f900:	4620      	mov	r0, r4
 800f902:	f7f8 f875 	bl	80079f0 <rmw_uxrce_get_static_input_buffer_for_entity>
 800f906:	4680      	mov	r8, r0
 800f908:	b328      	cbz	r0, 800f956 <on_request+0x8e>
 800f90a:	4638      	mov	r0, r7
 800f90c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800f910:	4632      	mov	r2, r6
 800f912:	f107 0110 	add.w	r1, r7, #16
 800f916:	f7fd fdff 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800f91a:	b930      	cbnz	r0, 800f92a <on_request+0x62>
 800f91c:	4810      	ldr	r0, [pc, #64]	@ (800f960 <on_request+0x98>)
 800f91e:	4641      	mov	r1, r8
 800f920:	b014      	add	sp, #80	@ 0x50
 800f922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f926:	f7fd b809 	b.w	800c93c <put_memory>
 800f92a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f92c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 800f930:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 800f934:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 800f938:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f93c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f940:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f944:	f7fd fcb0 	bl	800d2a8 <rmw_uros_epoch_nanos>
 800f948:	2303      	movs	r3, #3
 800f94a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800f94e:	e942 0102 	strd	r0, r1, [r2, #-8]
 800f952:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 800f956:	b014      	add	sp, #80	@ 0x50
 800f958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f95c:	2000b7b8 	.word	0x2000b7b8
 800f960:	2000b450 	.word	0x2000b450

0800f964 <on_reply>:
 800f964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f968:	4821      	ldr	r0, [pc, #132]	@ (800f9f0 <on_reply+0x8c>)
 800f96a:	b094      	sub	sp, #80	@ 0x50
 800f96c:	6800      	ldr	r0, [r0, #0]
 800f96e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800f970:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 800f974:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f976:	b3b8      	cbz	r0, 800f9e8 <on_reply+0x84>
 800f978:	461d      	mov	r5, r3
 800f97a:	e001      	b.n	800f980 <on_reply+0x1c>
 800f97c:	6840      	ldr	r0, [r0, #4]
 800f97e:	b398      	cbz	r0, 800f9e8 <on_reply+0x84>
 800f980:	6884      	ldr	r4, [r0, #8]
 800f982:	8b21      	ldrh	r1, [r4, #24]
 800f984:	4291      	cmp	r1, r2
 800f986:	d1f9      	bne.n	800f97c <on_reply+0x18>
 800f988:	2248      	movs	r2, #72	@ 0x48
 800f98a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 800f98e:	4668      	mov	r0, sp
 800f990:	f000 fd3f 	bl	8010412 <memcpy>
 800f994:	f104 0320 	add.w	r3, r4, #32
 800f998:	cb0c      	ldmia	r3, {r2, r3}
 800f99a:	4620      	mov	r0, r4
 800f99c:	f7f8 f828 	bl	80079f0 <rmw_uxrce_get_static_input_buffer_for_entity>
 800f9a0:	4680      	mov	r8, r0
 800f9a2:	b308      	cbz	r0, 800f9e8 <on_reply+0x84>
 800f9a4:	4638      	mov	r0, r7
 800f9a6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800f9aa:	4632      	mov	r2, r6
 800f9ac:	f107 0110 	add.w	r1, r7, #16
 800f9b0:	f7fd fdb2 	bl	800d518 <ucdr_deserialize_array_uint8_t>
 800f9b4:	b930      	cbnz	r0, 800f9c4 <on_reply+0x60>
 800f9b6:	480f      	ldr	r0, [pc, #60]	@ (800f9f4 <on_reply+0x90>)
 800f9b8:	4641      	mov	r1, r8
 800f9ba:	b014      	add	sp, #80	@ 0x50
 800f9bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9c0:	f7fc bfbc 	b.w	800c93c <put_memory>
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 800f9ca:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 800f9ce:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 800f9d2:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 800f9d6:	f7fd fc67 	bl	800d2a8 <rmw_uros_epoch_nanos>
 800f9da:	2304      	movs	r3, #4
 800f9dc:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800f9e0:	e942 0102 	strd	r0, r1, [r2, #-8]
 800f9e4:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 800f9e8:	b014      	add	sp, #80	@ 0x50
 800f9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9ee:	bf00      	nop
 800f9f0:	2000b6e0 	.word	0x2000b6e0
 800f9f4:	2000b450 	.word	0x2000b450

0800f9f8 <rmw_destroy_client>:
 800f9f8:	b570      	push	{r4, r5, r6, lr}
 800f9fa:	b128      	cbz	r0, 800fa08 <rmw_destroy_client+0x10>
 800f9fc:	4604      	mov	r4, r0
 800f9fe:	6800      	ldr	r0, [r0, #0]
 800fa00:	460d      	mov	r5, r1
 800fa02:	f7f8 f8d3 	bl	8007bac <is_uxrce_rmw_identifier_valid>
 800fa06:	b910      	cbnz	r0, 800fa0e <rmw_destroy_client+0x16>
 800fa08:	2401      	movs	r4, #1
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	bd70      	pop	{r4, r5, r6, pc}
 800fa0e:	6863      	ldr	r3, [r4, #4]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d0f9      	beq.n	800fa08 <rmw_destroy_client+0x10>
 800fa14:	2d00      	cmp	r5, #0
 800fa16:	d0f7      	beq.n	800fa08 <rmw_destroy_client+0x10>
 800fa18:	6828      	ldr	r0, [r5, #0]
 800fa1a:	f7f8 f8c7 	bl	8007bac <is_uxrce_rmw_identifier_valid>
 800fa1e:	2800      	cmp	r0, #0
 800fa20:	d0f2      	beq.n	800fa08 <rmw_destroy_client+0x10>
 800fa22:	686e      	ldr	r6, [r5, #4]
 800fa24:	2e00      	cmp	r6, #0
 800fa26:	d0ef      	beq.n	800fa08 <rmw_destroy_client+0x10>
 800fa28:	6864      	ldr	r4, [r4, #4]
 800fa2a:	6932      	ldr	r2, [r6, #16]
 800fa2c:	6920      	ldr	r0, [r4, #16]
 800fa2e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fa32:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fa36:	6819      	ldr	r1, [r3, #0]
 800fa38:	f7fe fc34 	bl	800e2a4 <uxr_buffer_cancel_data>
 800fa3c:	4602      	mov	r2, r0
 800fa3e:	6920      	ldr	r0, [r4, #16]
 800fa40:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fa44:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fa48:	f7f8 f82a 	bl	8007aa0 <run_xrce_session>
 800fa4c:	6920      	ldr	r0, [r4, #16]
 800fa4e:	6932      	ldr	r2, [r6, #16]
 800fa50:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fa54:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fa58:	6819      	ldr	r1, [r3, #0]
 800fa5a:	f7f9 f95f 	bl	8008d1c <uxr_buffer_delete_entity>
 800fa5e:	4602      	mov	r2, r0
 800fa60:	6920      	ldr	r0, [r4, #16]
 800fa62:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fa66:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fa6a:	f7f8 f819 	bl	8007aa0 <run_xrce_session>
 800fa6e:	f080 0401 	eor.w	r4, r0, #1
 800fa72:	b2e4      	uxtb	r4, r4
 800fa74:	4628      	mov	r0, r5
 800fa76:	0064      	lsls	r4, r4, #1
 800fa78:	f7f7 ff98 	bl	80079ac <rmw_uxrce_fini_client_memory>
 800fa7c:	e7c5      	b.n	800fa0a <rmw_destroy_client+0x12>
 800fa7e:	bf00      	nop

0800fa80 <rmw_create_guard_condition>:
 800fa80:	b538      	push	{r3, r4, r5, lr}
 800fa82:	4605      	mov	r5, r0
 800fa84:	4807      	ldr	r0, [pc, #28]	@ (800faa4 <rmw_create_guard_condition+0x24>)
 800fa86:	f7fc ff49 	bl	800c91c <get_memory>
 800fa8a:	b148      	cbz	r0, 800faa0 <rmw_create_guard_condition+0x20>
 800fa8c:	6884      	ldr	r4, [r0, #8]
 800fa8e:	2300      	movs	r3, #0
 800fa90:	7423      	strb	r3, [r4, #16]
 800fa92:	61e5      	str	r5, [r4, #28]
 800fa94:	f7fc ff66 	bl	800c964 <rmw_get_implementation_identifier>
 800fa98:	e9c4 0405 	strd	r0, r4, [r4, #20]
 800fa9c:	f104 0014 	add.w	r0, r4, #20
 800faa0:	bd38      	pop	{r3, r4, r5, pc}
 800faa2:	bf00      	nop
 800faa4:	2000922c 	.word	0x2000922c

0800faa8 <rmw_destroy_guard_condition>:
 800faa8:	b508      	push	{r3, lr}
 800faaa:	4b08      	ldr	r3, [pc, #32]	@ (800facc <rmw_destroy_guard_condition+0x24>)
 800faac:	6819      	ldr	r1, [r3, #0]
 800faae:	b911      	cbnz	r1, 800fab6 <rmw_destroy_guard_condition+0xe>
 800fab0:	e00a      	b.n	800fac8 <rmw_destroy_guard_condition+0x20>
 800fab2:	6849      	ldr	r1, [r1, #4]
 800fab4:	b141      	cbz	r1, 800fac8 <rmw_destroy_guard_condition+0x20>
 800fab6:	688b      	ldr	r3, [r1, #8]
 800fab8:	3314      	adds	r3, #20
 800faba:	4298      	cmp	r0, r3
 800fabc:	d1f9      	bne.n	800fab2 <rmw_destroy_guard_condition+0xa>
 800fabe:	4803      	ldr	r0, [pc, #12]	@ (800facc <rmw_destroy_guard_condition+0x24>)
 800fac0:	f7fc ff3c 	bl	800c93c <put_memory>
 800fac4:	2000      	movs	r0, #0
 800fac6:	bd08      	pop	{r3, pc}
 800fac8:	2001      	movs	r0, #1
 800faca:	bd08      	pop	{r3, pc}
 800facc:	2000922c 	.word	0x2000922c

0800fad0 <calloc>:
 800fad0:	4b02      	ldr	r3, [pc, #8]	@ (800fadc <calloc+0xc>)
 800fad2:	460a      	mov	r2, r1
 800fad4:	4601      	mov	r1, r0
 800fad6:	6818      	ldr	r0, [r3, #0]
 800fad8:	f000 b802 	b.w	800fae0 <_calloc_r>
 800fadc:	20000278 	.word	0x20000278

0800fae0 <_calloc_r>:
 800fae0:	b570      	push	{r4, r5, r6, lr}
 800fae2:	fba1 5402 	umull	r5, r4, r1, r2
 800fae6:	b934      	cbnz	r4, 800faf6 <_calloc_r+0x16>
 800fae8:	4629      	mov	r1, r5
 800faea:	f000 f887 	bl	800fbfc <_malloc_r>
 800faee:	4606      	mov	r6, r0
 800faf0:	b928      	cbnz	r0, 800fafe <_calloc_r+0x1e>
 800faf2:	4630      	mov	r0, r6
 800faf4:	bd70      	pop	{r4, r5, r6, pc}
 800faf6:	220c      	movs	r2, #12
 800faf8:	6002      	str	r2, [r0, #0]
 800fafa:	2600      	movs	r6, #0
 800fafc:	e7f9      	b.n	800faf2 <_calloc_r+0x12>
 800fafe:	462a      	mov	r2, r5
 800fb00:	4621      	mov	r1, r4
 800fb02:	f000 fbab 	bl	801025c <memset>
 800fb06:	e7f4      	b.n	800faf2 <_calloc_r+0x12>

0800fb08 <getenv>:
 800fb08:	b507      	push	{r0, r1, r2, lr}
 800fb0a:	4b04      	ldr	r3, [pc, #16]	@ (800fb1c <getenv+0x14>)
 800fb0c:	4601      	mov	r1, r0
 800fb0e:	aa01      	add	r2, sp, #4
 800fb10:	6818      	ldr	r0, [r3, #0]
 800fb12:	f000 f805 	bl	800fb20 <_findenv_r>
 800fb16:	b003      	add	sp, #12
 800fb18:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb1c:	20000278 	.word	0x20000278

0800fb20 <_findenv_r>:
 800fb20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb24:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800fb94 <_findenv_r+0x74>
 800fb28:	4606      	mov	r6, r0
 800fb2a:	4689      	mov	r9, r1
 800fb2c:	4617      	mov	r7, r2
 800fb2e:	f000 fc9d 	bl	801046c <__env_lock>
 800fb32:	f8da 4000 	ldr.w	r4, [sl]
 800fb36:	b134      	cbz	r4, 800fb46 <_findenv_r+0x26>
 800fb38:	464b      	mov	r3, r9
 800fb3a:	4698      	mov	r8, r3
 800fb3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb40:	b13a      	cbz	r2, 800fb52 <_findenv_r+0x32>
 800fb42:	2a3d      	cmp	r2, #61	@ 0x3d
 800fb44:	d1f9      	bne.n	800fb3a <_findenv_r+0x1a>
 800fb46:	4630      	mov	r0, r6
 800fb48:	f000 fc96 	bl	8010478 <__env_unlock>
 800fb4c:	2000      	movs	r0, #0
 800fb4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb52:	eba8 0809 	sub.w	r8, r8, r9
 800fb56:	46a3      	mov	fp, r4
 800fb58:	f854 0b04 	ldr.w	r0, [r4], #4
 800fb5c:	2800      	cmp	r0, #0
 800fb5e:	d0f2      	beq.n	800fb46 <_findenv_r+0x26>
 800fb60:	4642      	mov	r2, r8
 800fb62:	4649      	mov	r1, r9
 800fb64:	f000 fb8f 	bl	8010286 <strncmp>
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	d1f4      	bne.n	800fb56 <_findenv_r+0x36>
 800fb6c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fb70:	eb03 0508 	add.w	r5, r3, r8
 800fb74:	f813 3008 	ldrb.w	r3, [r3, r8]
 800fb78:	2b3d      	cmp	r3, #61	@ 0x3d
 800fb7a:	d1ec      	bne.n	800fb56 <_findenv_r+0x36>
 800fb7c:	f8da 3000 	ldr.w	r3, [sl]
 800fb80:	ebab 0303 	sub.w	r3, fp, r3
 800fb84:	109b      	asrs	r3, r3, #2
 800fb86:	4630      	mov	r0, r6
 800fb88:	603b      	str	r3, [r7, #0]
 800fb8a:	f000 fc75 	bl	8010478 <__env_unlock>
 800fb8e:	1c68      	adds	r0, r5, #1
 800fb90:	e7dd      	b.n	800fb4e <_findenv_r+0x2e>
 800fb92:	bf00      	nop
 800fb94:	20000000 	.word	0x20000000

0800fb98 <malloc>:
 800fb98:	4b02      	ldr	r3, [pc, #8]	@ (800fba4 <malloc+0xc>)
 800fb9a:	4601      	mov	r1, r0
 800fb9c:	6818      	ldr	r0, [r3, #0]
 800fb9e:	f000 b82d 	b.w	800fbfc <_malloc_r>
 800fba2:	bf00      	nop
 800fba4:	20000278 	.word	0x20000278

0800fba8 <free>:
 800fba8:	4b02      	ldr	r3, [pc, #8]	@ (800fbb4 <free+0xc>)
 800fbaa:	4601      	mov	r1, r0
 800fbac:	6818      	ldr	r0, [r3, #0]
 800fbae:	f000 bc69 	b.w	8010484 <_free_r>
 800fbb2:	bf00      	nop
 800fbb4:	20000278 	.word	0x20000278

0800fbb8 <sbrk_aligned>:
 800fbb8:	b570      	push	{r4, r5, r6, lr}
 800fbba:	4e0f      	ldr	r6, [pc, #60]	@ (800fbf8 <sbrk_aligned+0x40>)
 800fbbc:	460c      	mov	r4, r1
 800fbbe:	6831      	ldr	r1, [r6, #0]
 800fbc0:	4605      	mov	r5, r0
 800fbc2:	b911      	cbnz	r1, 800fbca <sbrk_aligned+0x12>
 800fbc4:	f000 fbce 	bl	8010364 <_sbrk_r>
 800fbc8:	6030      	str	r0, [r6, #0]
 800fbca:	4621      	mov	r1, r4
 800fbcc:	4628      	mov	r0, r5
 800fbce:	f000 fbc9 	bl	8010364 <_sbrk_r>
 800fbd2:	1c43      	adds	r3, r0, #1
 800fbd4:	d103      	bne.n	800fbde <sbrk_aligned+0x26>
 800fbd6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800fbda:	4620      	mov	r0, r4
 800fbdc:	bd70      	pop	{r4, r5, r6, pc}
 800fbde:	1cc4      	adds	r4, r0, #3
 800fbe0:	f024 0403 	bic.w	r4, r4, #3
 800fbe4:	42a0      	cmp	r0, r4
 800fbe6:	d0f8      	beq.n	800fbda <sbrk_aligned+0x22>
 800fbe8:	1a21      	subs	r1, r4, r0
 800fbea:	4628      	mov	r0, r5
 800fbec:	f000 fbba 	bl	8010364 <_sbrk_r>
 800fbf0:	3001      	adds	r0, #1
 800fbf2:	d1f2      	bne.n	800fbda <sbrk_aligned+0x22>
 800fbf4:	e7ef      	b.n	800fbd6 <sbrk_aligned+0x1e>
 800fbf6:	bf00      	nop
 800fbf8:	2000dc20 	.word	0x2000dc20

0800fbfc <_malloc_r>:
 800fbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc00:	1ccd      	adds	r5, r1, #3
 800fc02:	f025 0503 	bic.w	r5, r5, #3
 800fc06:	3508      	adds	r5, #8
 800fc08:	2d0c      	cmp	r5, #12
 800fc0a:	bf38      	it	cc
 800fc0c:	250c      	movcc	r5, #12
 800fc0e:	2d00      	cmp	r5, #0
 800fc10:	4606      	mov	r6, r0
 800fc12:	db01      	blt.n	800fc18 <_malloc_r+0x1c>
 800fc14:	42a9      	cmp	r1, r5
 800fc16:	d904      	bls.n	800fc22 <_malloc_r+0x26>
 800fc18:	230c      	movs	r3, #12
 800fc1a:	6033      	str	r3, [r6, #0]
 800fc1c:	2000      	movs	r0, #0
 800fc1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fcf8 <_malloc_r+0xfc>
 800fc26:	f000 f869 	bl	800fcfc <__malloc_lock>
 800fc2a:	f8d8 3000 	ldr.w	r3, [r8]
 800fc2e:	461c      	mov	r4, r3
 800fc30:	bb44      	cbnz	r4, 800fc84 <_malloc_r+0x88>
 800fc32:	4629      	mov	r1, r5
 800fc34:	4630      	mov	r0, r6
 800fc36:	f7ff ffbf 	bl	800fbb8 <sbrk_aligned>
 800fc3a:	1c43      	adds	r3, r0, #1
 800fc3c:	4604      	mov	r4, r0
 800fc3e:	d158      	bne.n	800fcf2 <_malloc_r+0xf6>
 800fc40:	f8d8 4000 	ldr.w	r4, [r8]
 800fc44:	4627      	mov	r7, r4
 800fc46:	2f00      	cmp	r7, #0
 800fc48:	d143      	bne.n	800fcd2 <_malloc_r+0xd6>
 800fc4a:	2c00      	cmp	r4, #0
 800fc4c:	d04b      	beq.n	800fce6 <_malloc_r+0xea>
 800fc4e:	6823      	ldr	r3, [r4, #0]
 800fc50:	4639      	mov	r1, r7
 800fc52:	4630      	mov	r0, r6
 800fc54:	eb04 0903 	add.w	r9, r4, r3
 800fc58:	f000 fb84 	bl	8010364 <_sbrk_r>
 800fc5c:	4581      	cmp	r9, r0
 800fc5e:	d142      	bne.n	800fce6 <_malloc_r+0xea>
 800fc60:	6821      	ldr	r1, [r4, #0]
 800fc62:	1a6d      	subs	r5, r5, r1
 800fc64:	4629      	mov	r1, r5
 800fc66:	4630      	mov	r0, r6
 800fc68:	f7ff ffa6 	bl	800fbb8 <sbrk_aligned>
 800fc6c:	3001      	adds	r0, #1
 800fc6e:	d03a      	beq.n	800fce6 <_malloc_r+0xea>
 800fc70:	6823      	ldr	r3, [r4, #0]
 800fc72:	442b      	add	r3, r5
 800fc74:	6023      	str	r3, [r4, #0]
 800fc76:	f8d8 3000 	ldr.w	r3, [r8]
 800fc7a:	685a      	ldr	r2, [r3, #4]
 800fc7c:	bb62      	cbnz	r2, 800fcd8 <_malloc_r+0xdc>
 800fc7e:	f8c8 7000 	str.w	r7, [r8]
 800fc82:	e00f      	b.n	800fca4 <_malloc_r+0xa8>
 800fc84:	6822      	ldr	r2, [r4, #0]
 800fc86:	1b52      	subs	r2, r2, r5
 800fc88:	d420      	bmi.n	800fccc <_malloc_r+0xd0>
 800fc8a:	2a0b      	cmp	r2, #11
 800fc8c:	d917      	bls.n	800fcbe <_malloc_r+0xc2>
 800fc8e:	1961      	adds	r1, r4, r5
 800fc90:	42a3      	cmp	r3, r4
 800fc92:	6025      	str	r5, [r4, #0]
 800fc94:	bf18      	it	ne
 800fc96:	6059      	strne	r1, [r3, #4]
 800fc98:	6863      	ldr	r3, [r4, #4]
 800fc9a:	bf08      	it	eq
 800fc9c:	f8c8 1000 	streq.w	r1, [r8]
 800fca0:	5162      	str	r2, [r4, r5]
 800fca2:	604b      	str	r3, [r1, #4]
 800fca4:	4630      	mov	r0, r6
 800fca6:	f000 f82f 	bl	800fd08 <__malloc_unlock>
 800fcaa:	f104 000b 	add.w	r0, r4, #11
 800fcae:	1d23      	adds	r3, r4, #4
 800fcb0:	f020 0007 	bic.w	r0, r0, #7
 800fcb4:	1ac2      	subs	r2, r0, r3
 800fcb6:	bf1c      	itt	ne
 800fcb8:	1a1b      	subne	r3, r3, r0
 800fcba:	50a3      	strne	r3, [r4, r2]
 800fcbc:	e7af      	b.n	800fc1e <_malloc_r+0x22>
 800fcbe:	6862      	ldr	r2, [r4, #4]
 800fcc0:	42a3      	cmp	r3, r4
 800fcc2:	bf0c      	ite	eq
 800fcc4:	f8c8 2000 	streq.w	r2, [r8]
 800fcc8:	605a      	strne	r2, [r3, #4]
 800fcca:	e7eb      	b.n	800fca4 <_malloc_r+0xa8>
 800fccc:	4623      	mov	r3, r4
 800fcce:	6864      	ldr	r4, [r4, #4]
 800fcd0:	e7ae      	b.n	800fc30 <_malloc_r+0x34>
 800fcd2:	463c      	mov	r4, r7
 800fcd4:	687f      	ldr	r7, [r7, #4]
 800fcd6:	e7b6      	b.n	800fc46 <_malloc_r+0x4a>
 800fcd8:	461a      	mov	r2, r3
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	42a3      	cmp	r3, r4
 800fcde:	d1fb      	bne.n	800fcd8 <_malloc_r+0xdc>
 800fce0:	2300      	movs	r3, #0
 800fce2:	6053      	str	r3, [r2, #4]
 800fce4:	e7de      	b.n	800fca4 <_malloc_r+0xa8>
 800fce6:	230c      	movs	r3, #12
 800fce8:	6033      	str	r3, [r6, #0]
 800fcea:	4630      	mov	r0, r6
 800fcec:	f000 f80c 	bl	800fd08 <__malloc_unlock>
 800fcf0:	e794      	b.n	800fc1c <_malloc_r+0x20>
 800fcf2:	6005      	str	r5, [r0, #0]
 800fcf4:	e7d6      	b.n	800fca4 <_malloc_r+0xa8>
 800fcf6:	bf00      	nop
 800fcf8:	2000dc24 	.word	0x2000dc24

0800fcfc <__malloc_lock>:
 800fcfc:	4801      	ldr	r0, [pc, #4]	@ (800fd04 <__malloc_lock+0x8>)
 800fcfe:	f000 bb7e 	b.w	80103fe <__retarget_lock_acquire_recursive>
 800fd02:	bf00      	nop
 800fd04:	2000dd69 	.word	0x2000dd69

0800fd08 <__malloc_unlock>:
 800fd08:	4801      	ldr	r0, [pc, #4]	@ (800fd10 <__malloc_unlock+0x8>)
 800fd0a:	f000 bb79 	b.w	8010400 <__retarget_lock_release_recursive>
 800fd0e:	bf00      	nop
 800fd10:	2000dd69 	.word	0x2000dd69

0800fd14 <srand>:
 800fd14:	b538      	push	{r3, r4, r5, lr}
 800fd16:	4b10      	ldr	r3, [pc, #64]	@ (800fd58 <srand+0x44>)
 800fd18:	681d      	ldr	r5, [r3, #0]
 800fd1a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fd1c:	4604      	mov	r4, r0
 800fd1e:	b9b3      	cbnz	r3, 800fd4e <srand+0x3a>
 800fd20:	2018      	movs	r0, #24
 800fd22:	f7ff ff39 	bl	800fb98 <malloc>
 800fd26:	4602      	mov	r2, r0
 800fd28:	6328      	str	r0, [r5, #48]	@ 0x30
 800fd2a:	b920      	cbnz	r0, 800fd36 <srand+0x22>
 800fd2c:	4b0b      	ldr	r3, [pc, #44]	@ (800fd5c <srand+0x48>)
 800fd2e:	480c      	ldr	r0, [pc, #48]	@ (800fd60 <srand+0x4c>)
 800fd30:	2146      	movs	r1, #70	@ 0x46
 800fd32:	f000 fb7d 	bl	8010430 <__assert_func>
 800fd36:	490b      	ldr	r1, [pc, #44]	@ (800fd64 <srand+0x50>)
 800fd38:	4b0b      	ldr	r3, [pc, #44]	@ (800fd68 <srand+0x54>)
 800fd3a:	e9c0 1300 	strd	r1, r3, [r0]
 800fd3e:	4b0b      	ldr	r3, [pc, #44]	@ (800fd6c <srand+0x58>)
 800fd40:	6083      	str	r3, [r0, #8]
 800fd42:	230b      	movs	r3, #11
 800fd44:	8183      	strh	r3, [r0, #12]
 800fd46:	2100      	movs	r1, #0
 800fd48:	2001      	movs	r0, #1
 800fd4a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800fd4e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fd50:	2200      	movs	r2, #0
 800fd52:	611c      	str	r4, [r3, #16]
 800fd54:	615a      	str	r2, [r3, #20]
 800fd56:	bd38      	pop	{r3, r4, r5, pc}
 800fd58:	20000278 	.word	0x20000278
 800fd5c:	08011db4 	.word	0x08011db4
 800fd60:	08011dcb 	.word	0x08011dcb
 800fd64:	abcd330e 	.word	0xabcd330e
 800fd68:	e66d1234 	.word	0xe66d1234
 800fd6c:	0005deec 	.word	0x0005deec

0800fd70 <rand>:
 800fd70:	4b16      	ldr	r3, [pc, #88]	@ (800fdcc <rand+0x5c>)
 800fd72:	b510      	push	{r4, lr}
 800fd74:	681c      	ldr	r4, [r3, #0]
 800fd76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fd78:	b9b3      	cbnz	r3, 800fda8 <rand+0x38>
 800fd7a:	2018      	movs	r0, #24
 800fd7c:	f7ff ff0c 	bl	800fb98 <malloc>
 800fd80:	4602      	mov	r2, r0
 800fd82:	6320      	str	r0, [r4, #48]	@ 0x30
 800fd84:	b920      	cbnz	r0, 800fd90 <rand+0x20>
 800fd86:	4b12      	ldr	r3, [pc, #72]	@ (800fdd0 <rand+0x60>)
 800fd88:	4812      	ldr	r0, [pc, #72]	@ (800fdd4 <rand+0x64>)
 800fd8a:	2152      	movs	r1, #82	@ 0x52
 800fd8c:	f000 fb50 	bl	8010430 <__assert_func>
 800fd90:	4911      	ldr	r1, [pc, #68]	@ (800fdd8 <rand+0x68>)
 800fd92:	4b12      	ldr	r3, [pc, #72]	@ (800fddc <rand+0x6c>)
 800fd94:	e9c0 1300 	strd	r1, r3, [r0]
 800fd98:	4b11      	ldr	r3, [pc, #68]	@ (800fde0 <rand+0x70>)
 800fd9a:	6083      	str	r3, [r0, #8]
 800fd9c:	230b      	movs	r3, #11
 800fd9e:	8183      	strh	r3, [r0, #12]
 800fda0:	2100      	movs	r1, #0
 800fda2:	2001      	movs	r0, #1
 800fda4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800fda8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fdaa:	480e      	ldr	r0, [pc, #56]	@ (800fde4 <rand+0x74>)
 800fdac:	690b      	ldr	r3, [r1, #16]
 800fdae:	694c      	ldr	r4, [r1, #20]
 800fdb0:	4a0d      	ldr	r2, [pc, #52]	@ (800fde8 <rand+0x78>)
 800fdb2:	4358      	muls	r0, r3
 800fdb4:	fb02 0004 	mla	r0, r2, r4, r0
 800fdb8:	fba3 3202 	umull	r3, r2, r3, r2
 800fdbc:	3301      	adds	r3, #1
 800fdbe:	eb40 0002 	adc.w	r0, r0, r2
 800fdc2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800fdc6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800fdca:	bd10      	pop	{r4, pc}
 800fdcc:	20000278 	.word	0x20000278
 800fdd0:	08011db4 	.word	0x08011db4
 800fdd4:	08011dcb 	.word	0x08011dcb
 800fdd8:	abcd330e 	.word	0xabcd330e
 800fddc:	e66d1234 	.word	0xe66d1234
 800fde0:	0005deec 	.word	0x0005deec
 800fde4:	5851f42d 	.word	0x5851f42d
 800fde8:	4c957f2d 	.word	0x4c957f2d

0800fdec <realloc>:
 800fdec:	4b02      	ldr	r3, [pc, #8]	@ (800fdf8 <realloc+0xc>)
 800fdee:	460a      	mov	r2, r1
 800fdf0:	4601      	mov	r1, r0
 800fdf2:	6818      	ldr	r0, [r3, #0]
 800fdf4:	f000 b802 	b.w	800fdfc <_realloc_r>
 800fdf8:	20000278 	.word	0x20000278

0800fdfc <_realloc_r>:
 800fdfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe00:	4607      	mov	r7, r0
 800fe02:	4614      	mov	r4, r2
 800fe04:	460d      	mov	r5, r1
 800fe06:	b921      	cbnz	r1, 800fe12 <_realloc_r+0x16>
 800fe08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe0c:	4611      	mov	r1, r2
 800fe0e:	f7ff bef5 	b.w	800fbfc <_malloc_r>
 800fe12:	b92a      	cbnz	r2, 800fe20 <_realloc_r+0x24>
 800fe14:	f000 fb36 	bl	8010484 <_free_r>
 800fe18:	4625      	mov	r5, r4
 800fe1a:	4628      	mov	r0, r5
 800fe1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe20:	f000 fb7a 	bl	8010518 <_malloc_usable_size_r>
 800fe24:	4284      	cmp	r4, r0
 800fe26:	4606      	mov	r6, r0
 800fe28:	d802      	bhi.n	800fe30 <_realloc_r+0x34>
 800fe2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe2e:	d8f4      	bhi.n	800fe1a <_realloc_r+0x1e>
 800fe30:	4621      	mov	r1, r4
 800fe32:	4638      	mov	r0, r7
 800fe34:	f7ff fee2 	bl	800fbfc <_malloc_r>
 800fe38:	4680      	mov	r8, r0
 800fe3a:	b908      	cbnz	r0, 800fe40 <_realloc_r+0x44>
 800fe3c:	4645      	mov	r5, r8
 800fe3e:	e7ec      	b.n	800fe1a <_realloc_r+0x1e>
 800fe40:	42b4      	cmp	r4, r6
 800fe42:	4622      	mov	r2, r4
 800fe44:	4629      	mov	r1, r5
 800fe46:	bf28      	it	cs
 800fe48:	4632      	movcs	r2, r6
 800fe4a:	f000 fae2 	bl	8010412 <memcpy>
 800fe4e:	4629      	mov	r1, r5
 800fe50:	4638      	mov	r0, r7
 800fe52:	f000 fb17 	bl	8010484 <_free_r>
 800fe56:	e7f1      	b.n	800fe3c <_realloc_r+0x40>

0800fe58 <_strtoul_l.isra.0>:
 800fe58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe5c:	4e34      	ldr	r6, [pc, #208]	@ (800ff30 <_strtoul_l.isra.0+0xd8>)
 800fe5e:	4686      	mov	lr, r0
 800fe60:	460d      	mov	r5, r1
 800fe62:	4628      	mov	r0, r5
 800fe64:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe68:	5d37      	ldrb	r7, [r6, r4]
 800fe6a:	f017 0708 	ands.w	r7, r7, #8
 800fe6e:	d1f8      	bne.n	800fe62 <_strtoul_l.isra.0+0xa>
 800fe70:	2c2d      	cmp	r4, #45	@ 0x2d
 800fe72:	d110      	bne.n	800fe96 <_strtoul_l.isra.0+0x3e>
 800fe74:	782c      	ldrb	r4, [r5, #0]
 800fe76:	2701      	movs	r7, #1
 800fe78:	1c85      	adds	r5, r0, #2
 800fe7a:	f033 0010 	bics.w	r0, r3, #16
 800fe7e:	d115      	bne.n	800feac <_strtoul_l.isra.0+0x54>
 800fe80:	2c30      	cmp	r4, #48	@ 0x30
 800fe82:	d10d      	bne.n	800fea0 <_strtoul_l.isra.0+0x48>
 800fe84:	7828      	ldrb	r0, [r5, #0]
 800fe86:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800fe8a:	2858      	cmp	r0, #88	@ 0x58
 800fe8c:	d108      	bne.n	800fea0 <_strtoul_l.isra.0+0x48>
 800fe8e:	786c      	ldrb	r4, [r5, #1]
 800fe90:	3502      	adds	r5, #2
 800fe92:	2310      	movs	r3, #16
 800fe94:	e00a      	b.n	800feac <_strtoul_l.isra.0+0x54>
 800fe96:	2c2b      	cmp	r4, #43	@ 0x2b
 800fe98:	bf04      	itt	eq
 800fe9a:	782c      	ldrbeq	r4, [r5, #0]
 800fe9c:	1c85      	addeq	r5, r0, #2
 800fe9e:	e7ec      	b.n	800fe7a <_strtoul_l.isra.0+0x22>
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d1f6      	bne.n	800fe92 <_strtoul_l.isra.0+0x3a>
 800fea4:	2c30      	cmp	r4, #48	@ 0x30
 800fea6:	bf14      	ite	ne
 800fea8:	230a      	movne	r3, #10
 800feaa:	2308      	moveq	r3, #8
 800feac:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800feb0:	2600      	movs	r6, #0
 800feb2:	fbb8 f8f3 	udiv	r8, r8, r3
 800feb6:	fb03 f908 	mul.w	r9, r3, r8
 800feba:	ea6f 0909 	mvn.w	r9, r9
 800febe:	4630      	mov	r0, r6
 800fec0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800fec4:	f1bc 0f09 	cmp.w	ip, #9
 800fec8:	d810      	bhi.n	800feec <_strtoul_l.isra.0+0x94>
 800feca:	4664      	mov	r4, ip
 800fecc:	42a3      	cmp	r3, r4
 800fece:	dd1e      	ble.n	800ff0e <_strtoul_l.isra.0+0xb6>
 800fed0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800fed4:	d007      	beq.n	800fee6 <_strtoul_l.isra.0+0x8e>
 800fed6:	4580      	cmp	r8, r0
 800fed8:	d316      	bcc.n	800ff08 <_strtoul_l.isra.0+0xb0>
 800feda:	d101      	bne.n	800fee0 <_strtoul_l.isra.0+0x88>
 800fedc:	45a1      	cmp	r9, r4
 800fede:	db13      	blt.n	800ff08 <_strtoul_l.isra.0+0xb0>
 800fee0:	fb00 4003 	mla	r0, r0, r3, r4
 800fee4:	2601      	movs	r6, #1
 800fee6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800feea:	e7e9      	b.n	800fec0 <_strtoul_l.isra.0+0x68>
 800feec:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800fef0:	f1bc 0f19 	cmp.w	ip, #25
 800fef4:	d801      	bhi.n	800fefa <_strtoul_l.isra.0+0xa2>
 800fef6:	3c37      	subs	r4, #55	@ 0x37
 800fef8:	e7e8      	b.n	800fecc <_strtoul_l.isra.0+0x74>
 800fefa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800fefe:	f1bc 0f19 	cmp.w	ip, #25
 800ff02:	d804      	bhi.n	800ff0e <_strtoul_l.isra.0+0xb6>
 800ff04:	3c57      	subs	r4, #87	@ 0x57
 800ff06:	e7e1      	b.n	800fecc <_strtoul_l.isra.0+0x74>
 800ff08:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800ff0c:	e7eb      	b.n	800fee6 <_strtoul_l.isra.0+0x8e>
 800ff0e:	1c73      	adds	r3, r6, #1
 800ff10:	d106      	bne.n	800ff20 <_strtoul_l.isra.0+0xc8>
 800ff12:	2322      	movs	r3, #34	@ 0x22
 800ff14:	f8ce 3000 	str.w	r3, [lr]
 800ff18:	4630      	mov	r0, r6
 800ff1a:	b932      	cbnz	r2, 800ff2a <_strtoul_l.isra.0+0xd2>
 800ff1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff20:	b107      	cbz	r7, 800ff24 <_strtoul_l.isra.0+0xcc>
 800ff22:	4240      	negs	r0, r0
 800ff24:	2a00      	cmp	r2, #0
 800ff26:	d0f9      	beq.n	800ff1c <_strtoul_l.isra.0+0xc4>
 800ff28:	b106      	cbz	r6, 800ff2c <_strtoul_l.isra.0+0xd4>
 800ff2a:	1e69      	subs	r1, r5, #1
 800ff2c:	6011      	str	r1, [r2, #0]
 800ff2e:	e7f5      	b.n	800ff1c <_strtoul_l.isra.0+0xc4>
 800ff30:	08011e93 	.word	0x08011e93

0800ff34 <strtoul>:
 800ff34:	4613      	mov	r3, r2
 800ff36:	460a      	mov	r2, r1
 800ff38:	4601      	mov	r1, r0
 800ff3a:	4802      	ldr	r0, [pc, #8]	@ (800ff44 <strtoul+0x10>)
 800ff3c:	6800      	ldr	r0, [r0, #0]
 800ff3e:	f7ff bf8b 	b.w	800fe58 <_strtoul_l.isra.0>
 800ff42:	bf00      	nop
 800ff44:	20000278 	.word	0x20000278

0800ff48 <std>:
 800ff48:	2300      	movs	r3, #0
 800ff4a:	b510      	push	{r4, lr}
 800ff4c:	4604      	mov	r4, r0
 800ff4e:	e9c0 3300 	strd	r3, r3, [r0]
 800ff52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff56:	6083      	str	r3, [r0, #8]
 800ff58:	8181      	strh	r1, [r0, #12]
 800ff5a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ff5c:	81c2      	strh	r2, [r0, #14]
 800ff5e:	6183      	str	r3, [r0, #24]
 800ff60:	4619      	mov	r1, r3
 800ff62:	2208      	movs	r2, #8
 800ff64:	305c      	adds	r0, #92	@ 0x5c
 800ff66:	f000 f979 	bl	801025c <memset>
 800ff6a:	4b0d      	ldr	r3, [pc, #52]	@ (800ffa0 <std+0x58>)
 800ff6c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ff6e:	4b0d      	ldr	r3, [pc, #52]	@ (800ffa4 <std+0x5c>)
 800ff70:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ff72:	4b0d      	ldr	r3, [pc, #52]	@ (800ffa8 <std+0x60>)
 800ff74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ff76:	4b0d      	ldr	r3, [pc, #52]	@ (800ffac <std+0x64>)
 800ff78:	6323      	str	r3, [r4, #48]	@ 0x30
 800ff7a:	4b0d      	ldr	r3, [pc, #52]	@ (800ffb0 <std+0x68>)
 800ff7c:	6224      	str	r4, [r4, #32]
 800ff7e:	429c      	cmp	r4, r3
 800ff80:	d006      	beq.n	800ff90 <std+0x48>
 800ff82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ff86:	4294      	cmp	r4, r2
 800ff88:	d002      	beq.n	800ff90 <std+0x48>
 800ff8a:	33d0      	adds	r3, #208	@ 0xd0
 800ff8c:	429c      	cmp	r4, r3
 800ff8e:	d105      	bne.n	800ff9c <std+0x54>
 800ff90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ff94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff98:	f000 ba30 	b.w	80103fc <__retarget_lock_init_recursive>
 800ff9c:	bd10      	pop	{r4, pc}
 800ff9e:	bf00      	nop
 800ffa0:	0801015d 	.word	0x0801015d
 800ffa4:	0801017f 	.word	0x0801017f
 800ffa8:	080101b7 	.word	0x080101b7
 800ffac:	080101db 	.word	0x080101db
 800ffb0:	2000dc28 	.word	0x2000dc28

0800ffb4 <stdio_exit_handler>:
 800ffb4:	4a02      	ldr	r2, [pc, #8]	@ (800ffc0 <stdio_exit_handler+0xc>)
 800ffb6:	4903      	ldr	r1, [pc, #12]	@ (800ffc4 <stdio_exit_handler+0x10>)
 800ffb8:	4803      	ldr	r0, [pc, #12]	@ (800ffc8 <stdio_exit_handler+0x14>)
 800ffba:	f000 b869 	b.w	8010090 <_fwalk_sglue>
 800ffbe:	bf00      	nop
 800ffc0:	2000026c 	.word	0x2000026c
 800ffc4:	08010e7d 	.word	0x08010e7d
 800ffc8:	2000027c 	.word	0x2000027c

0800ffcc <cleanup_stdio>:
 800ffcc:	6841      	ldr	r1, [r0, #4]
 800ffce:	4b0c      	ldr	r3, [pc, #48]	@ (8010000 <cleanup_stdio+0x34>)
 800ffd0:	4299      	cmp	r1, r3
 800ffd2:	b510      	push	{r4, lr}
 800ffd4:	4604      	mov	r4, r0
 800ffd6:	d001      	beq.n	800ffdc <cleanup_stdio+0x10>
 800ffd8:	f000 ff50 	bl	8010e7c <_fflush_r>
 800ffdc:	68a1      	ldr	r1, [r4, #8]
 800ffde:	4b09      	ldr	r3, [pc, #36]	@ (8010004 <cleanup_stdio+0x38>)
 800ffe0:	4299      	cmp	r1, r3
 800ffe2:	d002      	beq.n	800ffea <cleanup_stdio+0x1e>
 800ffe4:	4620      	mov	r0, r4
 800ffe6:	f000 ff49 	bl	8010e7c <_fflush_r>
 800ffea:	68e1      	ldr	r1, [r4, #12]
 800ffec:	4b06      	ldr	r3, [pc, #24]	@ (8010008 <cleanup_stdio+0x3c>)
 800ffee:	4299      	cmp	r1, r3
 800fff0:	d004      	beq.n	800fffc <cleanup_stdio+0x30>
 800fff2:	4620      	mov	r0, r4
 800fff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fff8:	f000 bf40 	b.w	8010e7c <_fflush_r>
 800fffc:	bd10      	pop	{r4, pc}
 800fffe:	bf00      	nop
 8010000:	2000dc28 	.word	0x2000dc28
 8010004:	2000dc90 	.word	0x2000dc90
 8010008:	2000dcf8 	.word	0x2000dcf8

0801000c <global_stdio_init.part.0>:
 801000c:	b510      	push	{r4, lr}
 801000e:	4b0b      	ldr	r3, [pc, #44]	@ (801003c <global_stdio_init.part.0+0x30>)
 8010010:	4c0b      	ldr	r4, [pc, #44]	@ (8010040 <global_stdio_init.part.0+0x34>)
 8010012:	4a0c      	ldr	r2, [pc, #48]	@ (8010044 <global_stdio_init.part.0+0x38>)
 8010014:	601a      	str	r2, [r3, #0]
 8010016:	4620      	mov	r0, r4
 8010018:	2200      	movs	r2, #0
 801001a:	2104      	movs	r1, #4
 801001c:	f7ff ff94 	bl	800ff48 <std>
 8010020:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010024:	2201      	movs	r2, #1
 8010026:	2109      	movs	r1, #9
 8010028:	f7ff ff8e 	bl	800ff48 <std>
 801002c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010030:	2202      	movs	r2, #2
 8010032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010036:	2112      	movs	r1, #18
 8010038:	f7ff bf86 	b.w	800ff48 <std>
 801003c:	2000dd60 	.word	0x2000dd60
 8010040:	2000dc28 	.word	0x2000dc28
 8010044:	0800ffb5 	.word	0x0800ffb5

08010048 <__sfp_lock_acquire>:
 8010048:	4801      	ldr	r0, [pc, #4]	@ (8010050 <__sfp_lock_acquire+0x8>)
 801004a:	f000 b9d8 	b.w	80103fe <__retarget_lock_acquire_recursive>
 801004e:	bf00      	nop
 8010050:	2000dd6a 	.word	0x2000dd6a

08010054 <__sfp_lock_release>:
 8010054:	4801      	ldr	r0, [pc, #4]	@ (801005c <__sfp_lock_release+0x8>)
 8010056:	f000 b9d3 	b.w	8010400 <__retarget_lock_release_recursive>
 801005a:	bf00      	nop
 801005c:	2000dd6a 	.word	0x2000dd6a

08010060 <__sinit>:
 8010060:	b510      	push	{r4, lr}
 8010062:	4604      	mov	r4, r0
 8010064:	f7ff fff0 	bl	8010048 <__sfp_lock_acquire>
 8010068:	6a23      	ldr	r3, [r4, #32]
 801006a:	b11b      	cbz	r3, 8010074 <__sinit+0x14>
 801006c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010070:	f7ff bff0 	b.w	8010054 <__sfp_lock_release>
 8010074:	4b04      	ldr	r3, [pc, #16]	@ (8010088 <__sinit+0x28>)
 8010076:	6223      	str	r3, [r4, #32]
 8010078:	4b04      	ldr	r3, [pc, #16]	@ (801008c <__sinit+0x2c>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d1f5      	bne.n	801006c <__sinit+0xc>
 8010080:	f7ff ffc4 	bl	801000c <global_stdio_init.part.0>
 8010084:	e7f2      	b.n	801006c <__sinit+0xc>
 8010086:	bf00      	nop
 8010088:	0800ffcd 	.word	0x0800ffcd
 801008c:	2000dd60 	.word	0x2000dd60

08010090 <_fwalk_sglue>:
 8010090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010094:	4607      	mov	r7, r0
 8010096:	4688      	mov	r8, r1
 8010098:	4614      	mov	r4, r2
 801009a:	2600      	movs	r6, #0
 801009c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80100a0:	f1b9 0901 	subs.w	r9, r9, #1
 80100a4:	d505      	bpl.n	80100b2 <_fwalk_sglue+0x22>
 80100a6:	6824      	ldr	r4, [r4, #0]
 80100a8:	2c00      	cmp	r4, #0
 80100aa:	d1f7      	bne.n	801009c <_fwalk_sglue+0xc>
 80100ac:	4630      	mov	r0, r6
 80100ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100b2:	89ab      	ldrh	r3, [r5, #12]
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	d907      	bls.n	80100c8 <_fwalk_sglue+0x38>
 80100b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80100bc:	3301      	adds	r3, #1
 80100be:	d003      	beq.n	80100c8 <_fwalk_sglue+0x38>
 80100c0:	4629      	mov	r1, r5
 80100c2:	4638      	mov	r0, r7
 80100c4:	47c0      	blx	r8
 80100c6:	4306      	orrs	r6, r0
 80100c8:	3568      	adds	r5, #104	@ 0x68
 80100ca:	e7e9      	b.n	80100a0 <_fwalk_sglue+0x10>

080100cc <iprintf>:
 80100cc:	b40f      	push	{r0, r1, r2, r3}
 80100ce:	b507      	push	{r0, r1, r2, lr}
 80100d0:	4906      	ldr	r1, [pc, #24]	@ (80100ec <iprintf+0x20>)
 80100d2:	ab04      	add	r3, sp, #16
 80100d4:	6808      	ldr	r0, [r1, #0]
 80100d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80100da:	6881      	ldr	r1, [r0, #8]
 80100dc:	9301      	str	r3, [sp, #4]
 80100de:	f000 fba5 	bl	801082c <_vfiprintf_r>
 80100e2:	b003      	add	sp, #12
 80100e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80100e8:	b004      	add	sp, #16
 80100ea:	4770      	bx	lr
 80100ec:	20000278 	.word	0x20000278

080100f0 <sniprintf>:
 80100f0:	b40c      	push	{r2, r3}
 80100f2:	b530      	push	{r4, r5, lr}
 80100f4:	4b18      	ldr	r3, [pc, #96]	@ (8010158 <sniprintf+0x68>)
 80100f6:	1e0c      	subs	r4, r1, #0
 80100f8:	681d      	ldr	r5, [r3, #0]
 80100fa:	b09d      	sub	sp, #116	@ 0x74
 80100fc:	da08      	bge.n	8010110 <sniprintf+0x20>
 80100fe:	238b      	movs	r3, #139	@ 0x8b
 8010100:	602b      	str	r3, [r5, #0]
 8010102:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010106:	b01d      	add	sp, #116	@ 0x74
 8010108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801010c:	b002      	add	sp, #8
 801010e:	4770      	bx	lr
 8010110:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010114:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010118:	f04f 0300 	mov.w	r3, #0
 801011c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801011e:	bf14      	ite	ne
 8010120:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8010124:	4623      	moveq	r3, r4
 8010126:	9304      	str	r3, [sp, #16]
 8010128:	9307      	str	r3, [sp, #28]
 801012a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801012e:	9002      	str	r0, [sp, #8]
 8010130:	9006      	str	r0, [sp, #24]
 8010132:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010136:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010138:	ab21      	add	r3, sp, #132	@ 0x84
 801013a:	a902      	add	r1, sp, #8
 801013c:	4628      	mov	r0, r5
 801013e:	9301      	str	r3, [sp, #4]
 8010140:	f000 fa4e 	bl	80105e0 <_svfiprintf_r>
 8010144:	1c43      	adds	r3, r0, #1
 8010146:	bfbc      	itt	lt
 8010148:	238b      	movlt	r3, #139	@ 0x8b
 801014a:	602b      	strlt	r3, [r5, #0]
 801014c:	2c00      	cmp	r4, #0
 801014e:	d0da      	beq.n	8010106 <sniprintf+0x16>
 8010150:	9b02      	ldr	r3, [sp, #8]
 8010152:	2200      	movs	r2, #0
 8010154:	701a      	strb	r2, [r3, #0]
 8010156:	e7d6      	b.n	8010106 <sniprintf+0x16>
 8010158:	20000278 	.word	0x20000278

0801015c <__sread>:
 801015c:	b510      	push	{r4, lr}
 801015e:	460c      	mov	r4, r1
 8010160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010164:	f000 f8ec 	bl	8010340 <_read_r>
 8010168:	2800      	cmp	r0, #0
 801016a:	bfab      	itete	ge
 801016c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801016e:	89a3      	ldrhlt	r3, [r4, #12]
 8010170:	181b      	addge	r3, r3, r0
 8010172:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010176:	bfac      	ite	ge
 8010178:	6563      	strge	r3, [r4, #84]	@ 0x54
 801017a:	81a3      	strhlt	r3, [r4, #12]
 801017c:	bd10      	pop	{r4, pc}

0801017e <__swrite>:
 801017e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010182:	461f      	mov	r7, r3
 8010184:	898b      	ldrh	r3, [r1, #12]
 8010186:	05db      	lsls	r3, r3, #23
 8010188:	4605      	mov	r5, r0
 801018a:	460c      	mov	r4, r1
 801018c:	4616      	mov	r6, r2
 801018e:	d505      	bpl.n	801019c <__swrite+0x1e>
 8010190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010194:	2302      	movs	r3, #2
 8010196:	2200      	movs	r2, #0
 8010198:	f000 f8c0 	bl	801031c <_lseek_r>
 801019c:	89a3      	ldrh	r3, [r4, #12]
 801019e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80101a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80101a6:	81a3      	strh	r3, [r4, #12]
 80101a8:	4632      	mov	r2, r6
 80101aa:	463b      	mov	r3, r7
 80101ac:	4628      	mov	r0, r5
 80101ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101b2:	f000 b8e7 	b.w	8010384 <_write_r>

080101b6 <__sseek>:
 80101b6:	b510      	push	{r4, lr}
 80101b8:	460c      	mov	r4, r1
 80101ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101be:	f000 f8ad 	bl	801031c <_lseek_r>
 80101c2:	1c43      	adds	r3, r0, #1
 80101c4:	89a3      	ldrh	r3, [r4, #12]
 80101c6:	bf15      	itete	ne
 80101c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80101ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80101ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80101d2:	81a3      	strheq	r3, [r4, #12]
 80101d4:	bf18      	it	ne
 80101d6:	81a3      	strhne	r3, [r4, #12]
 80101d8:	bd10      	pop	{r4, pc}

080101da <__sclose>:
 80101da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101de:	f000 b88d 	b.w	80102fc <_close_r>

080101e2 <_vsniprintf_r>:
 80101e2:	b530      	push	{r4, r5, lr}
 80101e4:	4614      	mov	r4, r2
 80101e6:	2c00      	cmp	r4, #0
 80101e8:	b09b      	sub	sp, #108	@ 0x6c
 80101ea:	4605      	mov	r5, r0
 80101ec:	461a      	mov	r2, r3
 80101ee:	da05      	bge.n	80101fc <_vsniprintf_r+0x1a>
 80101f0:	238b      	movs	r3, #139	@ 0x8b
 80101f2:	6003      	str	r3, [r0, #0]
 80101f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80101f8:	b01b      	add	sp, #108	@ 0x6c
 80101fa:	bd30      	pop	{r4, r5, pc}
 80101fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010200:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010204:	f04f 0300 	mov.w	r3, #0
 8010208:	9319      	str	r3, [sp, #100]	@ 0x64
 801020a:	bf14      	ite	ne
 801020c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8010210:	4623      	moveq	r3, r4
 8010212:	9302      	str	r3, [sp, #8]
 8010214:	9305      	str	r3, [sp, #20]
 8010216:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801021a:	9100      	str	r1, [sp, #0]
 801021c:	9104      	str	r1, [sp, #16]
 801021e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010222:	4669      	mov	r1, sp
 8010224:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010226:	f000 f9db 	bl	80105e0 <_svfiprintf_r>
 801022a:	1c43      	adds	r3, r0, #1
 801022c:	bfbc      	itt	lt
 801022e:	238b      	movlt	r3, #139	@ 0x8b
 8010230:	602b      	strlt	r3, [r5, #0]
 8010232:	2c00      	cmp	r4, #0
 8010234:	d0e0      	beq.n	80101f8 <_vsniprintf_r+0x16>
 8010236:	9b00      	ldr	r3, [sp, #0]
 8010238:	2200      	movs	r2, #0
 801023a:	701a      	strb	r2, [r3, #0]
 801023c:	e7dc      	b.n	80101f8 <_vsniprintf_r+0x16>
	...

08010240 <vsniprintf>:
 8010240:	b507      	push	{r0, r1, r2, lr}
 8010242:	9300      	str	r3, [sp, #0]
 8010244:	4613      	mov	r3, r2
 8010246:	460a      	mov	r2, r1
 8010248:	4601      	mov	r1, r0
 801024a:	4803      	ldr	r0, [pc, #12]	@ (8010258 <vsniprintf+0x18>)
 801024c:	6800      	ldr	r0, [r0, #0]
 801024e:	f7ff ffc8 	bl	80101e2 <_vsniprintf_r>
 8010252:	b003      	add	sp, #12
 8010254:	f85d fb04 	ldr.w	pc, [sp], #4
 8010258:	20000278 	.word	0x20000278

0801025c <memset>:
 801025c:	4402      	add	r2, r0
 801025e:	4603      	mov	r3, r0
 8010260:	4293      	cmp	r3, r2
 8010262:	d100      	bne.n	8010266 <memset+0xa>
 8010264:	4770      	bx	lr
 8010266:	f803 1b01 	strb.w	r1, [r3], #1
 801026a:	e7f9      	b.n	8010260 <memset+0x4>

0801026c <strchr>:
 801026c:	b2c9      	uxtb	r1, r1
 801026e:	4603      	mov	r3, r0
 8010270:	4618      	mov	r0, r3
 8010272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010276:	b112      	cbz	r2, 801027e <strchr+0x12>
 8010278:	428a      	cmp	r2, r1
 801027a:	d1f9      	bne.n	8010270 <strchr+0x4>
 801027c:	4770      	bx	lr
 801027e:	2900      	cmp	r1, #0
 8010280:	bf18      	it	ne
 8010282:	2000      	movne	r0, #0
 8010284:	4770      	bx	lr

08010286 <strncmp>:
 8010286:	b510      	push	{r4, lr}
 8010288:	b16a      	cbz	r2, 80102a6 <strncmp+0x20>
 801028a:	3901      	subs	r1, #1
 801028c:	1884      	adds	r4, r0, r2
 801028e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010292:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010296:	429a      	cmp	r2, r3
 8010298:	d103      	bne.n	80102a2 <strncmp+0x1c>
 801029a:	42a0      	cmp	r0, r4
 801029c:	d001      	beq.n	80102a2 <strncmp+0x1c>
 801029e:	2a00      	cmp	r2, #0
 80102a0:	d1f5      	bne.n	801028e <strncmp+0x8>
 80102a2:	1ad0      	subs	r0, r2, r3
 80102a4:	bd10      	pop	{r4, pc}
 80102a6:	4610      	mov	r0, r2
 80102a8:	e7fc      	b.n	80102a4 <strncmp+0x1e>

080102aa <strncpy>:
 80102aa:	b510      	push	{r4, lr}
 80102ac:	3901      	subs	r1, #1
 80102ae:	4603      	mov	r3, r0
 80102b0:	b132      	cbz	r2, 80102c0 <strncpy+0x16>
 80102b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80102b6:	f803 4b01 	strb.w	r4, [r3], #1
 80102ba:	3a01      	subs	r2, #1
 80102bc:	2c00      	cmp	r4, #0
 80102be:	d1f7      	bne.n	80102b0 <strncpy+0x6>
 80102c0:	441a      	add	r2, r3
 80102c2:	2100      	movs	r1, #0
 80102c4:	4293      	cmp	r3, r2
 80102c6:	d100      	bne.n	80102ca <strncpy+0x20>
 80102c8:	bd10      	pop	{r4, pc}
 80102ca:	f803 1b01 	strb.w	r1, [r3], #1
 80102ce:	e7f9      	b.n	80102c4 <strncpy+0x1a>

080102d0 <strstr>:
 80102d0:	780a      	ldrb	r2, [r1, #0]
 80102d2:	b570      	push	{r4, r5, r6, lr}
 80102d4:	b96a      	cbnz	r2, 80102f2 <strstr+0x22>
 80102d6:	bd70      	pop	{r4, r5, r6, pc}
 80102d8:	429a      	cmp	r2, r3
 80102da:	d109      	bne.n	80102f0 <strstr+0x20>
 80102dc:	460c      	mov	r4, r1
 80102de:	4605      	mov	r5, r0
 80102e0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d0f6      	beq.n	80102d6 <strstr+0x6>
 80102e8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80102ec:	429e      	cmp	r6, r3
 80102ee:	d0f7      	beq.n	80102e0 <strstr+0x10>
 80102f0:	3001      	adds	r0, #1
 80102f2:	7803      	ldrb	r3, [r0, #0]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d1ef      	bne.n	80102d8 <strstr+0x8>
 80102f8:	4618      	mov	r0, r3
 80102fa:	e7ec      	b.n	80102d6 <strstr+0x6>

080102fc <_close_r>:
 80102fc:	b538      	push	{r3, r4, r5, lr}
 80102fe:	4d06      	ldr	r5, [pc, #24]	@ (8010318 <_close_r+0x1c>)
 8010300:	2300      	movs	r3, #0
 8010302:	4604      	mov	r4, r0
 8010304:	4608      	mov	r0, r1
 8010306:	602b      	str	r3, [r5, #0]
 8010308:	f7f1 f886 	bl	8001418 <_close>
 801030c:	1c43      	adds	r3, r0, #1
 801030e:	d102      	bne.n	8010316 <_close_r+0x1a>
 8010310:	682b      	ldr	r3, [r5, #0]
 8010312:	b103      	cbz	r3, 8010316 <_close_r+0x1a>
 8010314:	6023      	str	r3, [r4, #0]
 8010316:	bd38      	pop	{r3, r4, r5, pc}
 8010318:	2000dd64 	.word	0x2000dd64

0801031c <_lseek_r>:
 801031c:	b538      	push	{r3, r4, r5, lr}
 801031e:	4d07      	ldr	r5, [pc, #28]	@ (801033c <_lseek_r+0x20>)
 8010320:	4604      	mov	r4, r0
 8010322:	4608      	mov	r0, r1
 8010324:	4611      	mov	r1, r2
 8010326:	2200      	movs	r2, #0
 8010328:	602a      	str	r2, [r5, #0]
 801032a:	461a      	mov	r2, r3
 801032c:	f7f1 f89b 	bl	8001466 <_lseek>
 8010330:	1c43      	adds	r3, r0, #1
 8010332:	d102      	bne.n	801033a <_lseek_r+0x1e>
 8010334:	682b      	ldr	r3, [r5, #0]
 8010336:	b103      	cbz	r3, 801033a <_lseek_r+0x1e>
 8010338:	6023      	str	r3, [r4, #0]
 801033a:	bd38      	pop	{r3, r4, r5, pc}
 801033c:	2000dd64 	.word	0x2000dd64

08010340 <_read_r>:
 8010340:	b538      	push	{r3, r4, r5, lr}
 8010342:	4d07      	ldr	r5, [pc, #28]	@ (8010360 <_read_r+0x20>)
 8010344:	4604      	mov	r4, r0
 8010346:	4608      	mov	r0, r1
 8010348:	4611      	mov	r1, r2
 801034a:	2200      	movs	r2, #0
 801034c:	602a      	str	r2, [r5, #0]
 801034e:	461a      	mov	r2, r3
 8010350:	f7f1 f829 	bl	80013a6 <_read>
 8010354:	1c43      	adds	r3, r0, #1
 8010356:	d102      	bne.n	801035e <_read_r+0x1e>
 8010358:	682b      	ldr	r3, [r5, #0]
 801035a:	b103      	cbz	r3, 801035e <_read_r+0x1e>
 801035c:	6023      	str	r3, [r4, #0]
 801035e:	bd38      	pop	{r3, r4, r5, pc}
 8010360:	2000dd64 	.word	0x2000dd64

08010364 <_sbrk_r>:
 8010364:	b538      	push	{r3, r4, r5, lr}
 8010366:	4d06      	ldr	r5, [pc, #24]	@ (8010380 <_sbrk_r+0x1c>)
 8010368:	2300      	movs	r3, #0
 801036a:	4604      	mov	r4, r0
 801036c:	4608      	mov	r0, r1
 801036e:	602b      	str	r3, [r5, #0]
 8010370:	f7f1 f886 	bl	8001480 <_sbrk>
 8010374:	1c43      	adds	r3, r0, #1
 8010376:	d102      	bne.n	801037e <_sbrk_r+0x1a>
 8010378:	682b      	ldr	r3, [r5, #0]
 801037a:	b103      	cbz	r3, 801037e <_sbrk_r+0x1a>
 801037c:	6023      	str	r3, [r4, #0]
 801037e:	bd38      	pop	{r3, r4, r5, pc}
 8010380:	2000dd64 	.word	0x2000dd64

08010384 <_write_r>:
 8010384:	b538      	push	{r3, r4, r5, lr}
 8010386:	4d07      	ldr	r5, [pc, #28]	@ (80103a4 <_write_r+0x20>)
 8010388:	4604      	mov	r4, r0
 801038a:	4608      	mov	r0, r1
 801038c:	4611      	mov	r1, r2
 801038e:	2200      	movs	r2, #0
 8010390:	602a      	str	r2, [r5, #0]
 8010392:	461a      	mov	r2, r3
 8010394:	f7f1 f824 	bl	80013e0 <_write>
 8010398:	1c43      	adds	r3, r0, #1
 801039a:	d102      	bne.n	80103a2 <_write_r+0x1e>
 801039c:	682b      	ldr	r3, [r5, #0]
 801039e:	b103      	cbz	r3, 80103a2 <_write_r+0x1e>
 80103a0:	6023      	str	r3, [r4, #0]
 80103a2:	bd38      	pop	{r3, r4, r5, pc}
 80103a4:	2000dd64 	.word	0x2000dd64

080103a8 <__errno>:
 80103a8:	4b01      	ldr	r3, [pc, #4]	@ (80103b0 <__errno+0x8>)
 80103aa:	6818      	ldr	r0, [r3, #0]
 80103ac:	4770      	bx	lr
 80103ae:	bf00      	nop
 80103b0:	20000278 	.word	0x20000278

080103b4 <__libc_init_array>:
 80103b4:	b570      	push	{r4, r5, r6, lr}
 80103b6:	4d0d      	ldr	r5, [pc, #52]	@ (80103ec <__libc_init_array+0x38>)
 80103b8:	4c0d      	ldr	r4, [pc, #52]	@ (80103f0 <__libc_init_array+0x3c>)
 80103ba:	1b64      	subs	r4, r4, r5
 80103bc:	10a4      	asrs	r4, r4, #2
 80103be:	2600      	movs	r6, #0
 80103c0:	42a6      	cmp	r6, r4
 80103c2:	d109      	bne.n	80103d8 <__libc_init_array+0x24>
 80103c4:	4d0b      	ldr	r5, [pc, #44]	@ (80103f4 <__libc_init_array+0x40>)
 80103c6:	4c0c      	ldr	r4, [pc, #48]	@ (80103f8 <__libc_init_array+0x44>)
 80103c8:	f000 ff10 	bl	80111ec <_init>
 80103cc:	1b64      	subs	r4, r4, r5
 80103ce:	10a4      	asrs	r4, r4, #2
 80103d0:	2600      	movs	r6, #0
 80103d2:	42a6      	cmp	r6, r4
 80103d4:	d105      	bne.n	80103e2 <__libc_init_array+0x2e>
 80103d6:	bd70      	pop	{r4, r5, r6, pc}
 80103d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80103dc:	4798      	blx	r3
 80103de:	3601      	adds	r6, #1
 80103e0:	e7ee      	b.n	80103c0 <__libc_init_array+0xc>
 80103e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80103e6:	4798      	blx	r3
 80103e8:	3601      	adds	r6, #1
 80103ea:	e7f2      	b.n	80103d2 <__libc_init_array+0x1e>
 80103ec:	08011f9c 	.word	0x08011f9c
 80103f0:	08011f9c 	.word	0x08011f9c
 80103f4:	08011f9c 	.word	0x08011f9c
 80103f8:	08011fa4 	.word	0x08011fa4

080103fc <__retarget_lock_init_recursive>:
 80103fc:	4770      	bx	lr

080103fe <__retarget_lock_acquire_recursive>:
 80103fe:	4770      	bx	lr

08010400 <__retarget_lock_release_recursive>:
 8010400:	4770      	bx	lr

08010402 <strcpy>:
 8010402:	4603      	mov	r3, r0
 8010404:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010408:	f803 2b01 	strb.w	r2, [r3], #1
 801040c:	2a00      	cmp	r2, #0
 801040e:	d1f9      	bne.n	8010404 <strcpy+0x2>
 8010410:	4770      	bx	lr

08010412 <memcpy>:
 8010412:	440a      	add	r2, r1
 8010414:	4291      	cmp	r1, r2
 8010416:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801041a:	d100      	bne.n	801041e <memcpy+0xc>
 801041c:	4770      	bx	lr
 801041e:	b510      	push	{r4, lr}
 8010420:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010424:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010428:	4291      	cmp	r1, r2
 801042a:	d1f9      	bne.n	8010420 <memcpy+0xe>
 801042c:	bd10      	pop	{r4, pc}
	...

08010430 <__assert_func>:
 8010430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010432:	4614      	mov	r4, r2
 8010434:	461a      	mov	r2, r3
 8010436:	4b09      	ldr	r3, [pc, #36]	@ (801045c <__assert_func+0x2c>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	4605      	mov	r5, r0
 801043c:	68d8      	ldr	r0, [r3, #12]
 801043e:	b14c      	cbz	r4, 8010454 <__assert_func+0x24>
 8010440:	4b07      	ldr	r3, [pc, #28]	@ (8010460 <__assert_func+0x30>)
 8010442:	9100      	str	r1, [sp, #0]
 8010444:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010448:	4906      	ldr	r1, [pc, #24]	@ (8010464 <__assert_func+0x34>)
 801044a:	462b      	mov	r3, r5
 801044c:	f000 fd3e 	bl	8010ecc <fiprintf>
 8010450:	f000 fdfc 	bl	801104c <abort>
 8010454:	4b04      	ldr	r3, [pc, #16]	@ (8010468 <__assert_func+0x38>)
 8010456:	461c      	mov	r4, r3
 8010458:	e7f3      	b.n	8010442 <__assert_func+0x12>
 801045a:	bf00      	nop
 801045c:	20000278 	.word	0x20000278
 8010460:	08011e23 	.word	0x08011e23
 8010464:	08011e30 	.word	0x08011e30
 8010468:	08011e5e 	.word	0x08011e5e

0801046c <__env_lock>:
 801046c:	4801      	ldr	r0, [pc, #4]	@ (8010474 <__env_lock+0x8>)
 801046e:	f7ff bfc6 	b.w	80103fe <__retarget_lock_acquire_recursive>
 8010472:	bf00      	nop
 8010474:	2000dd68 	.word	0x2000dd68

08010478 <__env_unlock>:
 8010478:	4801      	ldr	r0, [pc, #4]	@ (8010480 <__env_unlock+0x8>)
 801047a:	f7ff bfc1 	b.w	8010400 <__retarget_lock_release_recursive>
 801047e:	bf00      	nop
 8010480:	2000dd68 	.word	0x2000dd68

08010484 <_free_r>:
 8010484:	b538      	push	{r3, r4, r5, lr}
 8010486:	4605      	mov	r5, r0
 8010488:	2900      	cmp	r1, #0
 801048a:	d041      	beq.n	8010510 <_free_r+0x8c>
 801048c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010490:	1f0c      	subs	r4, r1, #4
 8010492:	2b00      	cmp	r3, #0
 8010494:	bfb8      	it	lt
 8010496:	18e4      	addlt	r4, r4, r3
 8010498:	f7ff fc30 	bl	800fcfc <__malloc_lock>
 801049c:	4a1d      	ldr	r2, [pc, #116]	@ (8010514 <_free_r+0x90>)
 801049e:	6813      	ldr	r3, [r2, #0]
 80104a0:	b933      	cbnz	r3, 80104b0 <_free_r+0x2c>
 80104a2:	6063      	str	r3, [r4, #4]
 80104a4:	6014      	str	r4, [r2, #0]
 80104a6:	4628      	mov	r0, r5
 80104a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104ac:	f7ff bc2c 	b.w	800fd08 <__malloc_unlock>
 80104b0:	42a3      	cmp	r3, r4
 80104b2:	d908      	bls.n	80104c6 <_free_r+0x42>
 80104b4:	6820      	ldr	r0, [r4, #0]
 80104b6:	1821      	adds	r1, r4, r0
 80104b8:	428b      	cmp	r3, r1
 80104ba:	bf01      	itttt	eq
 80104bc:	6819      	ldreq	r1, [r3, #0]
 80104be:	685b      	ldreq	r3, [r3, #4]
 80104c0:	1809      	addeq	r1, r1, r0
 80104c2:	6021      	streq	r1, [r4, #0]
 80104c4:	e7ed      	b.n	80104a2 <_free_r+0x1e>
 80104c6:	461a      	mov	r2, r3
 80104c8:	685b      	ldr	r3, [r3, #4]
 80104ca:	b10b      	cbz	r3, 80104d0 <_free_r+0x4c>
 80104cc:	42a3      	cmp	r3, r4
 80104ce:	d9fa      	bls.n	80104c6 <_free_r+0x42>
 80104d0:	6811      	ldr	r1, [r2, #0]
 80104d2:	1850      	adds	r0, r2, r1
 80104d4:	42a0      	cmp	r0, r4
 80104d6:	d10b      	bne.n	80104f0 <_free_r+0x6c>
 80104d8:	6820      	ldr	r0, [r4, #0]
 80104da:	4401      	add	r1, r0
 80104dc:	1850      	adds	r0, r2, r1
 80104de:	4283      	cmp	r3, r0
 80104e0:	6011      	str	r1, [r2, #0]
 80104e2:	d1e0      	bne.n	80104a6 <_free_r+0x22>
 80104e4:	6818      	ldr	r0, [r3, #0]
 80104e6:	685b      	ldr	r3, [r3, #4]
 80104e8:	6053      	str	r3, [r2, #4]
 80104ea:	4408      	add	r0, r1
 80104ec:	6010      	str	r0, [r2, #0]
 80104ee:	e7da      	b.n	80104a6 <_free_r+0x22>
 80104f0:	d902      	bls.n	80104f8 <_free_r+0x74>
 80104f2:	230c      	movs	r3, #12
 80104f4:	602b      	str	r3, [r5, #0]
 80104f6:	e7d6      	b.n	80104a6 <_free_r+0x22>
 80104f8:	6820      	ldr	r0, [r4, #0]
 80104fa:	1821      	adds	r1, r4, r0
 80104fc:	428b      	cmp	r3, r1
 80104fe:	bf04      	itt	eq
 8010500:	6819      	ldreq	r1, [r3, #0]
 8010502:	685b      	ldreq	r3, [r3, #4]
 8010504:	6063      	str	r3, [r4, #4]
 8010506:	bf04      	itt	eq
 8010508:	1809      	addeq	r1, r1, r0
 801050a:	6021      	streq	r1, [r4, #0]
 801050c:	6054      	str	r4, [r2, #4]
 801050e:	e7ca      	b.n	80104a6 <_free_r+0x22>
 8010510:	bd38      	pop	{r3, r4, r5, pc}
 8010512:	bf00      	nop
 8010514:	2000dc24 	.word	0x2000dc24

08010518 <_malloc_usable_size_r>:
 8010518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801051c:	1f18      	subs	r0, r3, #4
 801051e:	2b00      	cmp	r3, #0
 8010520:	bfbc      	itt	lt
 8010522:	580b      	ldrlt	r3, [r1, r0]
 8010524:	18c0      	addlt	r0, r0, r3
 8010526:	4770      	bx	lr

08010528 <__ssputs_r>:
 8010528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801052c:	688e      	ldr	r6, [r1, #8]
 801052e:	461f      	mov	r7, r3
 8010530:	42be      	cmp	r6, r7
 8010532:	680b      	ldr	r3, [r1, #0]
 8010534:	4682      	mov	sl, r0
 8010536:	460c      	mov	r4, r1
 8010538:	4690      	mov	r8, r2
 801053a:	d82d      	bhi.n	8010598 <__ssputs_r+0x70>
 801053c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010540:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010544:	d026      	beq.n	8010594 <__ssputs_r+0x6c>
 8010546:	6965      	ldr	r5, [r4, #20]
 8010548:	6909      	ldr	r1, [r1, #16]
 801054a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801054e:	eba3 0901 	sub.w	r9, r3, r1
 8010552:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010556:	1c7b      	adds	r3, r7, #1
 8010558:	444b      	add	r3, r9
 801055a:	106d      	asrs	r5, r5, #1
 801055c:	429d      	cmp	r5, r3
 801055e:	bf38      	it	cc
 8010560:	461d      	movcc	r5, r3
 8010562:	0553      	lsls	r3, r2, #21
 8010564:	d527      	bpl.n	80105b6 <__ssputs_r+0x8e>
 8010566:	4629      	mov	r1, r5
 8010568:	f7ff fb48 	bl	800fbfc <_malloc_r>
 801056c:	4606      	mov	r6, r0
 801056e:	b360      	cbz	r0, 80105ca <__ssputs_r+0xa2>
 8010570:	6921      	ldr	r1, [r4, #16]
 8010572:	464a      	mov	r2, r9
 8010574:	f7ff ff4d 	bl	8010412 <memcpy>
 8010578:	89a3      	ldrh	r3, [r4, #12]
 801057a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801057e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010582:	81a3      	strh	r3, [r4, #12]
 8010584:	6126      	str	r6, [r4, #16]
 8010586:	6165      	str	r5, [r4, #20]
 8010588:	444e      	add	r6, r9
 801058a:	eba5 0509 	sub.w	r5, r5, r9
 801058e:	6026      	str	r6, [r4, #0]
 8010590:	60a5      	str	r5, [r4, #8]
 8010592:	463e      	mov	r6, r7
 8010594:	42be      	cmp	r6, r7
 8010596:	d900      	bls.n	801059a <__ssputs_r+0x72>
 8010598:	463e      	mov	r6, r7
 801059a:	6820      	ldr	r0, [r4, #0]
 801059c:	4632      	mov	r2, r6
 801059e:	4641      	mov	r1, r8
 80105a0:	f000 fd3a 	bl	8011018 <memmove>
 80105a4:	68a3      	ldr	r3, [r4, #8]
 80105a6:	1b9b      	subs	r3, r3, r6
 80105a8:	60a3      	str	r3, [r4, #8]
 80105aa:	6823      	ldr	r3, [r4, #0]
 80105ac:	4433      	add	r3, r6
 80105ae:	6023      	str	r3, [r4, #0]
 80105b0:	2000      	movs	r0, #0
 80105b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105b6:	462a      	mov	r2, r5
 80105b8:	f7ff fc20 	bl	800fdfc <_realloc_r>
 80105bc:	4606      	mov	r6, r0
 80105be:	2800      	cmp	r0, #0
 80105c0:	d1e0      	bne.n	8010584 <__ssputs_r+0x5c>
 80105c2:	6921      	ldr	r1, [r4, #16]
 80105c4:	4650      	mov	r0, sl
 80105c6:	f7ff ff5d 	bl	8010484 <_free_r>
 80105ca:	230c      	movs	r3, #12
 80105cc:	f8ca 3000 	str.w	r3, [sl]
 80105d0:	89a3      	ldrh	r3, [r4, #12]
 80105d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80105d6:	81a3      	strh	r3, [r4, #12]
 80105d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80105dc:	e7e9      	b.n	80105b2 <__ssputs_r+0x8a>
	...

080105e0 <_svfiprintf_r>:
 80105e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105e4:	4698      	mov	r8, r3
 80105e6:	898b      	ldrh	r3, [r1, #12]
 80105e8:	061b      	lsls	r3, r3, #24
 80105ea:	b09d      	sub	sp, #116	@ 0x74
 80105ec:	4607      	mov	r7, r0
 80105ee:	460d      	mov	r5, r1
 80105f0:	4614      	mov	r4, r2
 80105f2:	d510      	bpl.n	8010616 <_svfiprintf_r+0x36>
 80105f4:	690b      	ldr	r3, [r1, #16]
 80105f6:	b973      	cbnz	r3, 8010616 <_svfiprintf_r+0x36>
 80105f8:	2140      	movs	r1, #64	@ 0x40
 80105fa:	f7ff faff 	bl	800fbfc <_malloc_r>
 80105fe:	6028      	str	r0, [r5, #0]
 8010600:	6128      	str	r0, [r5, #16]
 8010602:	b930      	cbnz	r0, 8010612 <_svfiprintf_r+0x32>
 8010604:	230c      	movs	r3, #12
 8010606:	603b      	str	r3, [r7, #0]
 8010608:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801060c:	b01d      	add	sp, #116	@ 0x74
 801060e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010612:	2340      	movs	r3, #64	@ 0x40
 8010614:	616b      	str	r3, [r5, #20]
 8010616:	2300      	movs	r3, #0
 8010618:	9309      	str	r3, [sp, #36]	@ 0x24
 801061a:	2320      	movs	r3, #32
 801061c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010620:	f8cd 800c 	str.w	r8, [sp, #12]
 8010624:	2330      	movs	r3, #48	@ 0x30
 8010626:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80107c4 <_svfiprintf_r+0x1e4>
 801062a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801062e:	f04f 0901 	mov.w	r9, #1
 8010632:	4623      	mov	r3, r4
 8010634:	469a      	mov	sl, r3
 8010636:	f813 2b01 	ldrb.w	r2, [r3], #1
 801063a:	b10a      	cbz	r2, 8010640 <_svfiprintf_r+0x60>
 801063c:	2a25      	cmp	r2, #37	@ 0x25
 801063e:	d1f9      	bne.n	8010634 <_svfiprintf_r+0x54>
 8010640:	ebba 0b04 	subs.w	fp, sl, r4
 8010644:	d00b      	beq.n	801065e <_svfiprintf_r+0x7e>
 8010646:	465b      	mov	r3, fp
 8010648:	4622      	mov	r2, r4
 801064a:	4629      	mov	r1, r5
 801064c:	4638      	mov	r0, r7
 801064e:	f7ff ff6b 	bl	8010528 <__ssputs_r>
 8010652:	3001      	adds	r0, #1
 8010654:	f000 80a7 	beq.w	80107a6 <_svfiprintf_r+0x1c6>
 8010658:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801065a:	445a      	add	r2, fp
 801065c:	9209      	str	r2, [sp, #36]	@ 0x24
 801065e:	f89a 3000 	ldrb.w	r3, [sl]
 8010662:	2b00      	cmp	r3, #0
 8010664:	f000 809f 	beq.w	80107a6 <_svfiprintf_r+0x1c6>
 8010668:	2300      	movs	r3, #0
 801066a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801066e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010672:	f10a 0a01 	add.w	sl, sl, #1
 8010676:	9304      	str	r3, [sp, #16]
 8010678:	9307      	str	r3, [sp, #28]
 801067a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801067e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010680:	4654      	mov	r4, sl
 8010682:	2205      	movs	r2, #5
 8010684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010688:	484e      	ldr	r0, [pc, #312]	@ (80107c4 <_svfiprintf_r+0x1e4>)
 801068a:	f7ef fdb9 	bl	8000200 <memchr>
 801068e:	9a04      	ldr	r2, [sp, #16]
 8010690:	b9d8      	cbnz	r0, 80106ca <_svfiprintf_r+0xea>
 8010692:	06d0      	lsls	r0, r2, #27
 8010694:	bf44      	itt	mi
 8010696:	2320      	movmi	r3, #32
 8010698:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801069c:	0711      	lsls	r1, r2, #28
 801069e:	bf44      	itt	mi
 80106a0:	232b      	movmi	r3, #43	@ 0x2b
 80106a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80106a6:	f89a 3000 	ldrb.w	r3, [sl]
 80106aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80106ac:	d015      	beq.n	80106da <_svfiprintf_r+0xfa>
 80106ae:	9a07      	ldr	r2, [sp, #28]
 80106b0:	4654      	mov	r4, sl
 80106b2:	2000      	movs	r0, #0
 80106b4:	f04f 0c0a 	mov.w	ip, #10
 80106b8:	4621      	mov	r1, r4
 80106ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106be:	3b30      	subs	r3, #48	@ 0x30
 80106c0:	2b09      	cmp	r3, #9
 80106c2:	d94b      	bls.n	801075c <_svfiprintf_r+0x17c>
 80106c4:	b1b0      	cbz	r0, 80106f4 <_svfiprintf_r+0x114>
 80106c6:	9207      	str	r2, [sp, #28]
 80106c8:	e014      	b.n	80106f4 <_svfiprintf_r+0x114>
 80106ca:	eba0 0308 	sub.w	r3, r0, r8
 80106ce:	fa09 f303 	lsl.w	r3, r9, r3
 80106d2:	4313      	orrs	r3, r2
 80106d4:	9304      	str	r3, [sp, #16]
 80106d6:	46a2      	mov	sl, r4
 80106d8:	e7d2      	b.n	8010680 <_svfiprintf_r+0xa0>
 80106da:	9b03      	ldr	r3, [sp, #12]
 80106dc:	1d19      	adds	r1, r3, #4
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	9103      	str	r1, [sp, #12]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	bfbb      	ittet	lt
 80106e6:	425b      	neglt	r3, r3
 80106e8:	f042 0202 	orrlt.w	r2, r2, #2
 80106ec:	9307      	strge	r3, [sp, #28]
 80106ee:	9307      	strlt	r3, [sp, #28]
 80106f0:	bfb8      	it	lt
 80106f2:	9204      	strlt	r2, [sp, #16]
 80106f4:	7823      	ldrb	r3, [r4, #0]
 80106f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80106f8:	d10a      	bne.n	8010710 <_svfiprintf_r+0x130>
 80106fa:	7863      	ldrb	r3, [r4, #1]
 80106fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80106fe:	d132      	bne.n	8010766 <_svfiprintf_r+0x186>
 8010700:	9b03      	ldr	r3, [sp, #12]
 8010702:	1d1a      	adds	r2, r3, #4
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	9203      	str	r2, [sp, #12]
 8010708:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801070c:	3402      	adds	r4, #2
 801070e:	9305      	str	r3, [sp, #20]
 8010710:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80107d4 <_svfiprintf_r+0x1f4>
 8010714:	7821      	ldrb	r1, [r4, #0]
 8010716:	2203      	movs	r2, #3
 8010718:	4650      	mov	r0, sl
 801071a:	f7ef fd71 	bl	8000200 <memchr>
 801071e:	b138      	cbz	r0, 8010730 <_svfiprintf_r+0x150>
 8010720:	9b04      	ldr	r3, [sp, #16]
 8010722:	eba0 000a 	sub.w	r0, r0, sl
 8010726:	2240      	movs	r2, #64	@ 0x40
 8010728:	4082      	lsls	r2, r0
 801072a:	4313      	orrs	r3, r2
 801072c:	3401      	adds	r4, #1
 801072e:	9304      	str	r3, [sp, #16]
 8010730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010734:	4824      	ldr	r0, [pc, #144]	@ (80107c8 <_svfiprintf_r+0x1e8>)
 8010736:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801073a:	2206      	movs	r2, #6
 801073c:	f7ef fd60 	bl	8000200 <memchr>
 8010740:	2800      	cmp	r0, #0
 8010742:	d036      	beq.n	80107b2 <_svfiprintf_r+0x1d2>
 8010744:	4b21      	ldr	r3, [pc, #132]	@ (80107cc <_svfiprintf_r+0x1ec>)
 8010746:	bb1b      	cbnz	r3, 8010790 <_svfiprintf_r+0x1b0>
 8010748:	9b03      	ldr	r3, [sp, #12]
 801074a:	3307      	adds	r3, #7
 801074c:	f023 0307 	bic.w	r3, r3, #7
 8010750:	3308      	adds	r3, #8
 8010752:	9303      	str	r3, [sp, #12]
 8010754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010756:	4433      	add	r3, r6
 8010758:	9309      	str	r3, [sp, #36]	@ 0x24
 801075a:	e76a      	b.n	8010632 <_svfiprintf_r+0x52>
 801075c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010760:	460c      	mov	r4, r1
 8010762:	2001      	movs	r0, #1
 8010764:	e7a8      	b.n	80106b8 <_svfiprintf_r+0xd8>
 8010766:	2300      	movs	r3, #0
 8010768:	3401      	adds	r4, #1
 801076a:	9305      	str	r3, [sp, #20]
 801076c:	4619      	mov	r1, r3
 801076e:	f04f 0c0a 	mov.w	ip, #10
 8010772:	4620      	mov	r0, r4
 8010774:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010778:	3a30      	subs	r2, #48	@ 0x30
 801077a:	2a09      	cmp	r2, #9
 801077c:	d903      	bls.n	8010786 <_svfiprintf_r+0x1a6>
 801077e:	2b00      	cmp	r3, #0
 8010780:	d0c6      	beq.n	8010710 <_svfiprintf_r+0x130>
 8010782:	9105      	str	r1, [sp, #20]
 8010784:	e7c4      	b.n	8010710 <_svfiprintf_r+0x130>
 8010786:	fb0c 2101 	mla	r1, ip, r1, r2
 801078a:	4604      	mov	r4, r0
 801078c:	2301      	movs	r3, #1
 801078e:	e7f0      	b.n	8010772 <_svfiprintf_r+0x192>
 8010790:	ab03      	add	r3, sp, #12
 8010792:	9300      	str	r3, [sp, #0]
 8010794:	462a      	mov	r2, r5
 8010796:	4b0e      	ldr	r3, [pc, #56]	@ (80107d0 <_svfiprintf_r+0x1f0>)
 8010798:	a904      	add	r1, sp, #16
 801079a:	4638      	mov	r0, r7
 801079c:	f3af 8000 	nop.w
 80107a0:	1c42      	adds	r2, r0, #1
 80107a2:	4606      	mov	r6, r0
 80107a4:	d1d6      	bne.n	8010754 <_svfiprintf_r+0x174>
 80107a6:	89ab      	ldrh	r3, [r5, #12]
 80107a8:	065b      	lsls	r3, r3, #25
 80107aa:	f53f af2d 	bmi.w	8010608 <_svfiprintf_r+0x28>
 80107ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80107b0:	e72c      	b.n	801060c <_svfiprintf_r+0x2c>
 80107b2:	ab03      	add	r3, sp, #12
 80107b4:	9300      	str	r3, [sp, #0]
 80107b6:	462a      	mov	r2, r5
 80107b8:	4b05      	ldr	r3, [pc, #20]	@ (80107d0 <_svfiprintf_r+0x1f0>)
 80107ba:	a904      	add	r1, sp, #16
 80107bc:	4638      	mov	r0, r7
 80107be:	f000 f9bb 	bl	8010b38 <_printf_i>
 80107c2:	e7ed      	b.n	80107a0 <_svfiprintf_r+0x1c0>
 80107c4:	08011e5f 	.word	0x08011e5f
 80107c8:	08011e69 	.word	0x08011e69
 80107cc:	00000000 	.word	0x00000000
 80107d0:	08010529 	.word	0x08010529
 80107d4:	08011e65 	.word	0x08011e65

080107d8 <__sfputc_r>:
 80107d8:	6893      	ldr	r3, [r2, #8]
 80107da:	3b01      	subs	r3, #1
 80107dc:	2b00      	cmp	r3, #0
 80107de:	b410      	push	{r4}
 80107e0:	6093      	str	r3, [r2, #8]
 80107e2:	da08      	bge.n	80107f6 <__sfputc_r+0x1e>
 80107e4:	6994      	ldr	r4, [r2, #24]
 80107e6:	42a3      	cmp	r3, r4
 80107e8:	db01      	blt.n	80107ee <__sfputc_r+0x16>
 80107ea:	290a      	cmp	r1, #10
 80107ec:	d103      	bne.n	80107f6 <__sfputc_r+0x1e>
 80107ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107f2:	f000 bb7d 	b.w	8010ef0 <__swbuf_r>
 80107f6:	6813      	ldr	r3, [r2, #0]
 80107f8:	1c58      	adds	r0, r3, #1
 80107fa:	6010      	str	r0, [r2, #0]
 80107fc:	7019      	strb	r1, [r3, #0]
 80107fe:	4608      	mov	r0, r1
 8010800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010804:	4770      	bx	lr

08010806 <__sfputs_r>:
 8010806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010808:	4606      	mov	r6, r0
 801080a:	460f      	mov	r7, r1
 801080c:	4614      	mov	r4, r2
 801080e:	18d5      	adds	r5, r2, r3
 8010810:	42ac      	cmp	r4, r5
 8010812:	d101      	bne.n	8010818 <__sfputs_r+0x12>
 8010814:	2000      	movs	r0, #0
 8010816:	e007      	b.n	8010828 <__sfputs_r+0x22>
 8010818:	f814 1b01 	ldrb.w	r1, [r4], #1
 801081c:	463a      	mov	r2, r7
 801081e:	4630      	mov	r0, r6
 8010820:	f7ff ffda 	bl	80107d8 <__sfputc_r>
 8010824:	1c43      	adds	r3, r0, #1
 8010826:	d1f3      	bne.n	8010810 <__sfputs_r+0xa>
 8010828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801082c <_vfiprintf_r>:
 801082c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010830:	460d      	mov	r5, r1
 8010832:	b09d      	sub	sp, #116	@ 0x74
 8010834:	4614      	mov	r4, r2
 8010836:	4698      	mov	r8, r3
 8010838:	4606      	mov	r6, r0
 801083a:	b118      	cbz	r0, 8010844 <_vfiprintf_r+0x18>
 801083c:	6a03      	ldr	r3, [r0, #32]
 801083e:	b90b      	cbnz	r3, 8010844 <_vfiprintf_r+0x18>
 8010840:	f7ff fc0e 	bl	8010060 <__sinit>
 8010844:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010846:	07d9      	lsls	r1, r3, #31
 8010848:	d405      	bmi.n	8010856 <_vfiprintf_r+0x2a>
 801084a:	89ab      	ldrh	r3, [r5, #12]
 801084c:	059a      	lsls	r2, r3, #22
 801084e:	d402      	bmi.n	8010856 <_vfiprintf_r+0x2a>
 8010850:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010852:	f7ff fdd4 	bl	80103fe <__retarget_lock_acquire_recursive>
 8010856:	89ab      	ldrh	r3, [r5, #12]
 8010858:	071b      	lsls	r3, r3, #28
 801085a:	d501      	bpl.n	8010860 <_vfiprintf_r+0x34>
 801085c:	692b      	ldr	r3, [r5, #16]
 801085e:	b99b      	cbnz	r3, 8010888 <_vfiprintf_r+0x5c>
 8010860:	4629      	mov	r1, r5
 8010862:	4630      	mov	r0, r6
 8010864:	f000 fb82 	bl	8010f6c <__swsetup_r>
 8010868:	b170      	cbz	r0, 8010888 <_vfiprintf_r+0x5c>
 801086a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801086c:	07dc      	lsls	r4, r3, #31
 801086e:	d504      	bpl.n	801087a <_vfiprintf_r+0x4e>
 8010870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010874:	b01d      	add	sp, #116	@ 0x74
 8010876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801087a:	89ab      	ldrh	r3, [r5, #12]
 801087c:	0598      	lsls	r0, r3, #22
 801087e:	d4f7      	bmi.n	8010870 <_vfiprintf_r+0x44>
 8010880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010882:	f7ff fdbd 	bl	8010400 <__retarget_lock_release_recursive>
 8010886:	e7f3      	b.n	8010870 <_vfiprintf_r+0x44>
 8010888:	2300      	movs	r3, #0
 801088a:	9309      	str	r3, [sp, #36]	@ 0x24
 801088c:	2320      	movs	r3, #32
 801088e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010892:	f8cd 800c 	str.w	r8, [sp, #12]
 8010896:	2330      	movs	r3, #48	@ 0x30
 8010898:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010a48 <_vfiprintf_r+0x21c>
 801089c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80108a0:	f04f 0901 	mov.w	r9, #1
 80108a4:	4623      	mov	r3, r4
 80108a6:	469a      	mov	sl, r3
 80108a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108ac:	b10a      	cbz	r2, 80108b2 <_vfiprintf_r+0x86>
 80108ae:	2a25      	cmp	r2, #37	@ 0x25
 80108b0:	d1f9      	bne.n	80108a6 <_vfiprintf_r+0x7a>
 80108b2:	ebba 0b04 	subs.w	fp, sl, r4
 80108b6:	d00b      	beq.n	80108d0 <_vfiprintf_r+0xa4>
 80108b8:	465b      	mov	r3, fp
 80108ba:	4622      	mov	r2, r4
 80108bc:	4629      	mov	r1, r5
 80108be:	4630      	mov	r0, r6
 80108c0:	f7ff ffa1 	bl	8010806 <__sfputs_r>
 80108c4:	3001      	adds	r0, #1
 80108c6:	f000 80a7 	beq.w	8010a18 <_vfiprintf_r+0x1ec>
 80108ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108cc:	445a      	add	r2, fp
 80108ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80108d0:	f89a 3000 	ldrb.w	r3, [sl]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	f000 809f 	beq.w	8010a18 <_vfiprintf_r+0x1ec>
 80108da:	2300      	movs	r3, #0
 80108dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80108e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80108e4:	f10a 0a01 	add.w	sl, sl, #1
 80108e8:	9304      	str	r3, [sp, #16]
 80108ea:	9307      	str	r3, [sp, #28]
 80108ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80108f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80108f2:	4654      	mov	r4, sl
 80108f4:	2205      	movs	r2, #5
 80108f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108fa:	4853      	ldr	r0, [pc, #332]	@ (8010a48 <_vfiprintf_r+0x21c>)
 80108fc:	f7ef fc80 	bl	8000200 <memchr>
 8010900:	9a04      	ldr	r2, [sp, #16]
 8010902:	b9d8      	cbnz	r0, 801093c <_vfiprintf_r+0x110>
 8010904:	06d1      	lsls	r1, r2, #27
 8010906:	bf44      	itt	mi
 8010908:	2320      	movmi	r3, #32
 801090a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801090e:	0713      	lsls	r3, r2, #28
 8010910:	bf44      	itt	mi
 8010912:	232b      	movmi	r3, #43	@ 0x2b
 8010914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010918:	f89a 3000 	ldrb.w	r3, [sl]
 801091c:	2b2a      	cmp	r3, #42	@ 0x2a
 801091e:	d015      	beq.n	801094c <_vfiprintf_r+0x120>
 8010920:	9a07      	ldr	r2, [sp, #28]
 8010922:	4654      	mov	r4, sl
 8010924:	2000      	movs	r0, #0
 8010926:	f04f 0c0a 	mov.w	ip, #10
 801092a:	4621      	mov	r1, r4
 801092c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010930:	3b30      	subs	r3, #48	@ 0x30
 8010932:	2b09      	cmp	r3, #9
 8010934:	d94b      	bls.n	80109ce <_vfiprintf_r+0x1a2>
 8010936:	b1b0      	cbz	r0, 8010966 <_vfiprintf_r+0x13a>
 8010938:	9207      	str	r2, [sp, #28]
 801093a:	e014      	b.n	8010966 <_vfiprintf_r+0x13a>
 801093c:	eba0 0308 	sub.w	r3, r0, r8
 8010940:	fa09 f303 	lsl.w	r3, r9, r3
 8010944:	4313      	orrs	r3, r2
 8010946:	9304      	str	r3, [sp, #16]
 8010948:	46a2      	mov	sl, r4
 801094a:	e7d2      	b.n	80108f2 <_vfiprintf_r+0xc6>
 801094c:	9b03      	ldr	r3, [sp, #12]
 801094e:	1d19      	adds	r1, r3, #4
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	9103      	str	r1, [sp, #12]
 8010954:	2b00      	cmp	r3, #0
 8010956:	bfbb      	ittet	lt
 8010958:	425b      	neglt	r3, r3
 801095a:	f042 0202 	orrlt.w	r2, r2, #2
 801095e:	9307      	strge	r3, [sp, #28]
 8010960:	9307      	strlt	r3, [sp, #28]
 8010962:	bfb8      	it	lt
 8010964:	9204      	strlt	r2, [sp, #16]
 8010966:	7823      	ldrb	r3, [r4, #0]
 8010968:	2b2e      	cmp	r3, #46	@ 0x2e
 801096a:	d10a      	bne.n	8010982 <_vfiprintf_r+0x156>
 801096c:	7863      	ldrb	r3, [r4, #1]
 801096e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010970:	d132      	bne.n	80109d8 <_vfiprintf_r+0x1ac>
 8010972:	9b03      	ldr	r3, [sp, #12]
 8010974:	1d1a      	adds	r2, r3, #4
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	9203      	str	r2, [sp, #12]
 801097a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801097e:	3402      	adds	r4, #2
 8010980:	9305      	str	r3, [sp, #20]
 8010982:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010a58 <_vfiprintf_r+0x22c>
 8010986:	7821      	ldrb	r1, [r4, #0]
 8010988:	2203      	movs	r2, #3
 801098a:	4650      	mov	r0, sl
 801098c:	f7ef fc38 	bl	8000200 <memchr>
 8010990:	b138      	cbz	r0, 80109a2 <_vfiprintf_r+0x176>
 8010992:	9b04      	ldr	r3, [sp, #16]
 8010994:	eba0 000a 	sub.w	r0, r0, sl
 8010998:	2240      	movs	r2, #64	@ 0x40
 801099a:	4082      	lsls	r2, r0
 801099c:	4313      	orrs	r3, r2
 801099e:	3401      	adds	r4, #1
 80109a0:	9304      	str	r3, [sp, #16]
 80109a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109a6:	4829      	ldr	r0, [pc, #164]	@ (8010a4c <_vfiprintf_r+0x220>)
 80109a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80109ac:	2206      	movs	r2, #6
 80109ae:	f7ef fc27 	bl	8000200 <memchr>
 80109b2:	2800      	cmp	r0, #0
 80109b4:	d03f      	beq.n	8010a36 <_vfiprintf_r+0x20a>
 80109b6:	4b26      	ldr	r3, [pc, #152]	@ (8010a50 <_vfiprintf_r+0x224>)
 80109b8:	bb1b      	cbnz	r3, 8010a02 <_vfiprintf_r+0x1d6>
 80109ba:	9b03      	ldr	r3, [sp, #12]
 80109bc:	3307      	adds	r3, #7
 80109be:	f023 0307 	bic.w	r3, r3, #7
 80109c2:	3308      	adds	r3, #8
 80109c4:	9303      	str	r3, [sp, #12]
 80109c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109c8:	443b      	add	r3, r7
 80109ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80109cc:	e76a      	b.n	80108a4 <_vfiprintf_r+0x78>
 80109ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80109d2:	460c      	mov	r4, r1
 80109d4:	2001      	movs	r0, #1
 80109d6:	e7a8      	b.n	801092a <_vfiprintf_r+0xfe>
 80109d8:	2300      	movs	r3, #0
 80109da:	3401      	adds	r4, #1
 80109dc:	9305      	str	r3, [sp, #20]
 80109de:	4619      	mov	r1, r3
 80109e0:	f04f 0c0a 	mov.w	ip, #10
 80109e4:	4620      	mov	r0, r4
 80109e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109ea:	3a30      	subs	r2, #48	@ 0x30
 80109ec:	2a09      	cmp	r2, #9
 80109ee:	d903      	bls.n	80109f8 <_vfiprintf_r+0x1cc>
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d0c6      	beq.n	8010982 <_vfiprintf_r+0x156>
 80109f4:	9105      	str	r1, [sp, #20]
 80109f6:	e7c4      	b.n	8010982 <_vfiprintf_r+0x156>
 80109f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80109fc:	4604      	mov	r4, r0
 80109fe:	2301      	movs	r3, #1
 8010a00:	e7f0      	b.n	80109e4 <_vfiprintf_r+0x1b8>
 8010a02:	ab03      	add	r3, sp, #12
 8010a04:	9300      	str	r3, [sp, #0]
 8010a06:	462a      	mov	r2, r5
 8010a08:	4b12      	ldr	r3, [pc, #72]	@ (8010a54 <_vfiprintf_r+0x228>)
 8010a0a:	a904      	add	r1, sp, #16
 8010a0c:	4630      	mov	r0, r6
 8010a0e:	f3af 8000 	nop.w
 8010a12:	4607      	mov	r7, r0
 8010a14:	1c78      	adds	r0, r7, #1
 8010a16:	d1d6      	bne.n	80109c6 <_vfiprintf_r+0x19a>
 8010a18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a1a:	07d9      	lsls	r1, r3, #31
 8010a1c:	d405      	bmi.n	8010a2a <_vfiprintf_r+0x1fe>
 8010a1e:	89ab      	ldrh	r3, [r5, #12]
 8010a20:	059a      	lsls	r2, r3, #22
 8010a22:	d402      	bmi.n	8010a2a <_vfiprintf_r+0x1fe>
 8010a24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a26:	f7ff fceb 	bl	8010400 <__retarget_lock_release_recursive>
 8010a2a:	89ab      	ldrh	r3, [r5, #12]
 8010a2c:	065b      	lsls	r3, r3, #25
 8010a2e:	f53f af1f 	bmi.w	8010870 <_vfiprintf_r+0x44>
 8010a32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010a34:	e71e      	b.n	8010874 <_vfiprintf_r+0x48>
 8010a36:	ab03      	add	r3, sp, #12
 8010a38:	9300      	str	r3, [sp, #0]
 8010a3a:	462a      	mov	r2, r5
 8010a3c:	4b05      	ldr	r3, [pc, #20]	@ (8010a54 <_vfiprintf_r+0x228>)
 8010a3e:	a904      	add	r1, sp, #16
 8010a40:	4630      	mov	r0, r6
 8010a42:	f000 f879 	bl	8010b38 <_printf_i>
 8010a46:	e7e4      	b.n	8010a12 <_vfiprintf_r+0x1e6>
 8010a48:	08011e5f 	.word	0x08011e5f
 8010a4c:	08011e69 	.word	0x08011e69
 8010a50:	00000000 	.word	0x00000000
 8010a54:	08010807 	.word	0x08010807
 8010a58:	08011e65 	.word	0x08011e65

08010a5c <_printf_common>:
 8010a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a60:	4616      	mov	r6, r2
 8010a62:	4698      	mov	r8, r3
 8010a64:	688a      	ldr	r2, [r1, #8]
 8010a66:	690b      	ldr	r3, [r1, #16]
 8010a68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010a6c:	4293      	cmp	r3, r2
 8010a6e:	bfb8      	it	lt
 8010a70:	4613      	movlt	r3, r2
 8010a72:	6033      	str	r3, [r6, #0]
 8010a74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010a78:	4607      	mov	r7, r0
 8010a7a:	460c      	mov	r4, r1
 8010a7c:	b10a      	cbz	r2, 8010a82 <_printf_common+0x26>
 8010a7e:	3301      	adds	r3, #1
 8010a80:	6033      	str	r3, [r6, #0]
 8010a82:	6823      	ldr	r3, [r4, #0]
 8010a84:	0699      	lsls	r1, r3, #26
 8010a86:	bf42      	ittt	mi
 8010a88:	6833      	ldrmi	r3, [r6, #0]
 8010a8a:	3302      	addmi	r3, #2
 8010a8c:	6033      	strmi	r3, [r6, #0]
 8010a8e:	6825      	ldr	r5, [r4, #0]
 8010a90:	f015 0506 	ands.w	r5, r5, #6
 8010a94:	d106      	bne.n	8010aa4 <_printf_common+0x48>
 8010a96:	f104 0a19 	add.w	sl, r4, #25
 8010a9a:	68e3      	ldr	r3, [r4, #12]
 8010a9c:	6832      	ldr	r2, [r6, #0]
 8010a9e:	1a9b      	subs	r3, r3, r2
 8010aa0:	42ab      	cmp	r3, r5
 8010aa2:	dc26      	bgt.n	8010af2 <_printf_common+0x96>
 8010aa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010aa8:	6822      	ldr	r2, [r4, #0]
 8010aaa:	3b00      	subs	r3, #0
 8010aac:	bf18      	it	ne
 8010aae:	2301      	movne	r3, #1
 8010ab0:	0692      	lsls	r2, r2, #26
 8010ab2:	d42b      	bmi.n	8010b0c <_printf_common+0xb0>
 8010ab4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010ab8:	4641      	mov	r1, r8
 8010aba:	4638      	mov	r0, r7
 8010abc:	47c8      	blx	r9
 8010abe:	3001      	adds	r0, #1
 8010ac0:	d01e      	beq.n	8010b00 <_printf_common+0xa4>
 8010ac2:	6823      	ldr	r3, [r4, #0]
 8010ac4:	6922      	ldr	r2, [r4, #16]
 8010ac6:	f003 0306 	and.w	r3, r3, #6
 8010aca:	2b04      	cmp	r3, #4
 8010acc:	bf02      	ittt	eq
 8010ace:	68e5      	ldreq	r5, [r4, #12]
 8010ad0:	6833      	ldreq	r3, [r6, #0]
 8010ad2:	1aed      	subeq	r5, r5, r3
 8010ad4:	68a3      	ldr	r3, [r4, #8]
 8010ad6:	bf0c      	ite	eq
 8010ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010adc:	2500      	movne	r5, #0
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	bfc4      	itt	gt
 8010ae2:	1a9b      	subgt	r3, r3, r2
 8010ae4:	18ed      	addgt	r5, r5, r3
 8010ae6:	2600      	movs	r6, #0
 8010ae8:	341a      	adds	r4, #26
 8010aea:	42b5      	cmp	r5, r6
 8010aec:	d11a      	bne.n	8010b24 <_printf_common+0xc8>
 8010aee:	2000      	movs	r0, #0
 8010af0:	e008      	b.n	8010b04 <_printf_common+0xa8>
 8010af2:	2301      	movs	r3, #1
 8010af4:	4652      	mov	r2, sl
 8010af6:	4641      	mov	r1, r8
 8010af8:	4638      	mov	r0, r7
 8010afa:	47c8      	blx	r9
 8010afc:	3001      	adds	r0, #1
 8010afe:	d103      	bne.n	8010b08 <_printf_common+0xac>
 8010b00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b08:	3501      	adds	r5, #1
 8010b0a:	e7c6      	b.n	8010a9a <_printf_common+0x3e>
 8010b0c:	18e1      	adds	r1, r4, r3
 8010b0e:	1c5a      	adds	r2, r3, #1
 8010b10:	2030      	movs	r0, #48	@ 0x30
 8010b12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010b16:	4422      	add	r2, r4
 8010b18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010b1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010b20:	3302      	adds	r3, #2
 8010b22:	e7c7      	b.n	8010ab4 <_printf_common+0x58>
 8010b24:	2301      	movs	r3, #1
 8010b26:	4622      	mov	r2, r4
 8010b28:	4641      	mov	r1, r8
 8010b2a:	4638      	mov	r0, r7
 8010b2c:	47c8      	blx	r9
 8010b2e:	3001      	adds	r0, #1
 8010b30:	d0e6      	beq.n	8010b00 <_printf_common+0xa4>
 8010b32:	3601      	adds	r6, #1
 8010b34:	e7d9      	b.n	8010aea <_printf_common+0x8e>
	...

08010b38 <_printf_i>:
 8010b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b3c:	7e0f      	ldrb	r7, [r1, #24]
 8010b3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010b40:	2f78      	cmp	r7, #120	@ 0x78
 8010b42:	4691      	mov	r9, r2
 8010b44:	4680      	mov	r8, r0
 8010b46:	460c      	mov	r4, r1
 8010b48:	469a      	mov	sl, r3
 8010b4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010b4e:	d807      	bhi.n	8010b60 <_printf_i+0x28>
 8010b50:	2f62      	cmp	r7, #98	@ 0x62
 8010b52:	d80a      	bhi.n	8010b6a <_printf_i+0x32>
 8010b54:	2f00      	cmp	r7, #0
 8010b56:	f000 80d1 	beq.w	8010cfc <_printf_i+0x1c4>
 8010b5a:	2f58      	cmp	r7, #88	@ 0x58
 8010b5c:	f000 80b8 	beq.w	8010cd0 <_printf_i+0x198>
 8010b60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010b64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010b68:	e03a      	b.n	8010be0 <_printf_i+0xa8>
 8010b6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010b6e:	2b15      	cmp	r3, #21
 8010b70:	d8f6      	bhi.n	8010b60 <_printf_i+0x28>
 8010b72:	a101      	add	r1, pc, #4	@ (adr r1, 8010b78 <_printf_i+0x40>)
 8010b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010b78:	08010bd1 	.word	0x08010bd1
 8010b7c:	08010be5 	.word	0x08010be5
 8010b80:	08010b61 	.word	0x08010b61
 8010b84:	08010b61 	.word	0x08010b61
 8010b88:	08010b61 	.word	0x08010b61
 8010b8c:	08010b61 	.word	0x08010b61
 8010b90:	08010be5 	.word	0x08010be5
 8010b94:	08010b61 	.word	0x08010b61
 8010b98:	08010b61 	.word	0x08010b61
 8010b9c:	08010b61 	.word	0x08010b61
 8010ba0:	08010b61 	.word	0x08010b61
 8010ba4:	08010ce3 	.word	0x08010ce3
 8010ba8:	08010c0f 	.word	0x08010c0f
 8010bac:	08010c9d 	.word	0x08010c9d
 8010bb0:	08010b61 	.word	0x08010b61
 8010bb4:	08010b61 	.word	0x08010b61
 8010bb8:	08010d05 	.word	0x08010d05
 8010bbc:	08010b61 	.word	0x08010b61
 8010bc0:	08010c0f 	.word	0x08010c0f
 8010bc4:	08010b61 	.word	0x08010b61
 8010bc8:	08010b61 	.word	0x08010b61
 8010bcc:	08010ca5 	.word	0x08010ca5
 8010bd0:	6833      	ldr	r3, [r6, #0]
 8010bd2:	1d1a      	adds	r2, r3, #4
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	6032      	str	r2, [r6, #0]
 8010bd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010bdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010be0:	2301      	movs	r3, #1
 8010be2:	e09c      	b.n	8010d1e <_printf_i+0x1e6>
 8010be4:	6833      	ldr	r3, [r6, #0]
 8010be6:	6820      	ldr	r0, [r4, #0]
 8010be8:	1d19      	adds	r1, r3, #4
 8010bea:	6031      	str	r1, [r6, #0]
 8010bec:	0606      	lsls	r6, r0, #24
 8010bee:	d501      	bpl.n	8010bf4 <_printf_i+0xbc>
 8010bf0:	681d      	ldr	r5, [r3, #0]
 8010bf2:	e003      	b.n	8010bfc <_printf_i+0xc4>
 8010bf4:	0645      	lsls	r5, r0, #25
 8010bf6:	d5fb      	bpl.n	8010bf0 <_printf_i+0xb8>
 8010bf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010bfc:	2d00      	cmp	r5, #0
 8010bfe:	da03      	bge.n	8010c08 <_printf_i+0xd0>
 8010c00:	232d      	movs	r3, #45	@ 0x2d
 8010c02:	426d      	negs	r5, r5
 8010c04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010c08:	4858      	ldr	r0, [pc, #352]	@ (8010d6c <_printf_i+0x234>)
 8010c0a:	230a      	movs	r3, #10
 8010c0c:	e011      	b.n	8010c32 <_printf_i+0xfa>
 8010c0e:	6821      	ldr	r1, [r4, #0]
 8010c10:	6833      	ldr	r3, [r6, #0]
 8010c12:	0608      	lsls	r0, r1, #24
 8010c14:	f853 5b04 	ldr.w	r5, [r3], #4
 8010c18:	d402      	bmi.n	8010c20 <_printf_i+0xe8>
 8010c1a:	0649      	lsls	r1, r1, #25
 8010c1c:	bf48      	it	mi
 8010c1e:	b2ad      	uxthmi	r5, r5
 8010c20:	2f6f      	cmp	r7, #111	@ 0x6f
 8010c22:	4852      	ldr	r0, [pc, #328]	@ (8010d6c <_printf_i+0x234>)
 8010c24:	6033      	str	r3, [r6, #0]
 8010c26:	bf14      	ite	ne
 8010c28:	230a      	movne	r3, #10
 8010c2a:	2308      	moveq	r3, #8
 8010c2c:	2100      	movs	r1, #0
 8010c2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010c32:	6866      	ldr	r6, [r4, #4]
 8010c34:	60a6      	str	r6, [r4, #8]
 8010c36:	2e00      	cmp	r6, #0
 8010c38:	db05      	blt.n	8010c46 <_printf_i+0x10e>
 8010c3a:	6821      	ldr	r1, [r4, #0]
 8010c3c:	432e      	orrs	r6, r5
 8010c3e:	f021 0104 	bic.w	r1, r1, #4
 8010c42:	6021      	str	r1, [r4, #0]
 8010c44:	d04b      	beq.n	8010cde <_printf_i+0x1a6>
 8010c46:	4616      	mov	r6, r2
 8010c48:	fbb5 f1f3 	udiv	r1, r5, r3
 8010c4c:	fb03 5711 	mls	r7, r3, r1, r5
 8010c50:	5dc7      	ldrb	r7, [r0, r7]
 8010c52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010c56:	462f      	mov	r7, r5
 8010c58:	42bb      	cmp	r3, r7
 8010c5a:	460d      	mov	r5, r1
 8010c5c:	d9f4      	bls.n	8010c48 <_printf_i+0x110>
 8010c5e:	2b08      	cmp	r3, #8
 8010c60:	d10b      	bne.n	8010c7a <_printf_i+0x142>
 8010c62:	6823      	ldr	r3, [r4, #0]
 8010c64:	07df      	lsls	r7, r3, #31
 8010c66:	d508      	bpl.n	8010c7a <_printf_i+0x142>
 8010c68:	6923      	ldr	r3, [r4, #16]
 8010c6a:	6861      	ldr	r1, [r4, #4]
 8010c6c:	4299      	cmp	r1, r3
 8010c6e:	bfde      	ittt	le
 8010c70:	2330      	movle	r3, #48	@ 0x30
 8010c72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010c76:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8010c7a:	1b92      	subs	r2, r2, r6
 8010c7c:	6122      	str	r2, [r4, #16]
 8010c7e:	f8cd a000 	str.w	sl, [sp]
 8010c82:	464b      	mov	r3, r9
 8010c84:	aa03      	add	r2, sp, #12
 8010c86:	4621      	mov	r1, r4
 8010c88:	4640      	mov	r0, r8
 8010c8a:	f7ff fee7 	bl	8010a5c <_printf_common>
 8010c8e:	3001      	adds	r0, #1
 8010c90:	d14a      	bne.n	8010d28 <_printf_i+0x1f0>
 8010c92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c96:	b004      	add	sp, #16
 8010c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c9c:	6823      	ldr	r3, [r4, #0]
 8010c9e:	f043 0320 	orr.w	r3, r3, #32
 8010ca2:	6023      	str	r3, [r4, #0]
 8010ca4:	4832      	ldr	r0, [pc, #200]	@ (8010d70 <_printf_i+0x238>)
 8010ca6:	2778      	movs	r7, #120	@ 0x78
 8010ca8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010cac:	6823      	ldr	r3, [r4, #0]
 8010cae:	6831      	ldr	r1, [r6, #0]
 8010cb0:	061f      	lsls	r7, r3, #24
 8010cb2:	f851 5b04 	ldr.w	r5, [r1], #4
 8010cb6:	d402      	bmi.n	8010cbe <_printf_i+0x186>
 8010cb8:	065f      	lsls	r7, r3, #25
 8010cba:	bf48      	it	mi
 8010cbc:	b2ad      	uxthmi	r5, r5
 8010cbe:	6031      	str	r1, [r6, #0]
 8010cc0:	07d9      	lsls	r1, r3, #31
 8010cc2:	bf44      	itt	mi
 8010cc4:	f043 0320 	orrmi.w	r3, r3, #32
 8010cc8:	6023      	strmi	r3, [r4, #0]
 8010cca:	b11d      	cbz	r5, 8010cd4 <_printf_i+0x19c>
 8010ccc:	2310      	movs	r3, #16
 8010cce:	e7ad      	b.n	8010c2c <_printf_i+0xf4>
 8010cd0:	4826      	ldr	r0, [pc, #152]	@ (8010d6c <_printf_i+0x234>)
 8010cd2:	e7e9      	b.n	8010ca8 <_printf_i+0x170>
 8010cd4:	6823      	ldr	r3, [r4, #0]
 8010cd6:	f023 0320 	bic.w	r3, r3, #32
 8010cda:	6023      	str	r3, [r4, #0]
 8010cdc:	e7f6      	b.n	8010ccc <_printf_i+0x194>
 8010cde:	4616      	mov	r6, r2
 8010ce0:	e7bd      	b.n	8010c5e <_printf_i+0x126>
 8010ce2:	6833      	ldr	r3, [r6, #0]
 8010ce4:	6825      	ldr	r5, [r4, #0]
 8010ce6:	6961      	ldr	r1, [r4, #20]
 8010ce8:	1d18      	adds	r0, r3, #4
 8010cea:	6030      	str	r0, [r6, #0]
 8010cec:	062e      	lsls	r6, r5, #24
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	d501      	bpl.n	8010cf6 <_printf_i+0x1be>
 8010cf2:	6019      	str	r1, [r3, #0]
 8010cf4:	e002      	b.n	8010cfc <_printf_i+0x1c4>
 8010cf6:	0668      	lsls	r0, r5, #25
 8010cf8:	d5fb      	bpl.n	8010cf2 <_printf_i+0x1ba>
 8010cfa:	8019      	strh	r1, [r3, #0]
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	6123      	str	r3, [r4, #16]
 8010d00:	4616      	mov	r6, r2
 8010d02:	e7bc      	b.n	8010c7e <_printf_i+0x146>
 8010d04:	6833      	ldr	r3, [r6, #0]
 8010d06:	1d1a      	adds	r2, r3, #4
 8010d08:	6032      	str	r2, [r6, #0]
 8010d0a:	681e      	ldr	r6, [r3, #0]
 8010d0c:	6862      	ldr	r2, [r4, #4]
 8010d0e:	2100      	movs	r1, #0
 8010d10:	4630      	mov	r0, r6
 8010d12:	f7ef fa75 	bl	8000200 <memchr>
 8010d16:	b108      	cbz	r0, 8010d1c <_printf_i+0x1e4>
 8010d18:	1b80      	subs	r0, r0, r6
 8010d1a:	6060      	str	r0, [r4, #4]
 8010d1c:	6863      	ldr	r3, [r4, #4]
 8010d1e:	6123      	str	r3, [r4, #16]
 8010d20:	2300      	movs	r3, #0
 8010d22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010d26:	e7aa      	b.n	8010c7e <_printf_i+0x146>
 8010d28:	6923      	ldr	r3, [r4, #16]
 8010d2a:	4632      	mov	r2, r6
 8010d2c:	4649      	mov	r1, r9
 8010d2e:	4640      	mov	r0, r8
 8010d30:	47d0      	blx	sl
 8010d32:	3001      	adds	r0, #1
 8010d34:	d0ad      	beq.n	8010c92 <_printf_i+0x15a>
 8010d36:	6823      	ldr	r3, [r4, #0]
 8010d38:	079b      	lsls	r3, r3, #30
 8010d3a:	d413      	bmi.n	8010d64 <_printf_i+0x22c>
 8010d3c:	68e0      	ldr	r0, [r4, #12]
 8010d3e:	9b03      	ldr	r3, [sp, #12]
 8010d40:	4298      	cmp	r0, r3
 8010d42:	bfb8      	it	lt
 8010d44:	4618      	movlt	r0, r3
 8010d46:	e7a6      	b.n	8010c96 <_printf_i+0x15e>
 8010d48:	2301      	movs	r3, #1
 8010d4a:	4632      	mov	r2, r6
 8010d4c:	4649      	mov	r1, r9
 8010d4e:	4640      	mov	r0, r8
 8010d50:	47d0      	blx	sl
 8010d52:	3001      	adds	r0, #1
 8010d54:	d09d      	beq.n	8010c92 <_printf_i+0x15a>
 8010d56:	3501      	adds	r5, #1
 8010d58:	68e3      	ldr	r3, [r4, #12]
 8010d5a:	9903      	ldr	r1, [sp, #12]
 8010d5c:	1a5b      	subs	r3, r3, r1
 8010d5e:	42ab      	cmp	r3, r5
 8010d60:	dcf2      	bgt.n	8010d48 <_printf_i+0x210>
 8010d62:	e7eb      	b.n	8010d3c <_printf_i+0x204>
 8010d64:	2500      	movs	r5, #0
 8010d66:	f104 0619 	add.w	r6, r4, #25
 8010d6a:	e7f5      	b.n	8010d58 <_printf_i+0x220>
 8010d6c:	08011e70 	.word	0x08011e70
 8010d70:	08011e81 	.word	0x08011e81

08010d74 <__sflush_r>:
 8010d74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d7c:	0716      	lsls	r6, r2, #28
 8010d7e:	4605      	mov	r5, r0
 8010d80:	460c      	mov	r4, r1
 8010d82:	d454      	bmi.n	8010e2e <__sflush_r+0xba>
 8010d84:	684b      	ldr	r3, [r1, #4]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	dc02      	bgt.n	8010d90 <__sflush_r+0x1c>
 8010d8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	dd48      	ble.n	8010e22 <__sflush_r+0xae>
 8010d90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010d92:	2e00      	cmp	r6, #0
 8010d94:	d045      	beq.n	8010e22 <__sflush_r+0xae>
 8010d96:	2300      	movs	r3, #0
 8010d98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010d9c:	682f      	ldr	r7, [r5, #0]
 8010d9e:	6a21      	ldr	r1, [r4, #32]
 8010da0:	602b      	str	r3, [r5, #0]
 8010da2:	d030      	beq.n	8010e06 <__sflush_r+0x92>
 8010da4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010da6:	89a3      	ldrh	r3, [r4, #12]
 8010da8:	0759      	lsls	r1, r3, #29
 8010daa:	d505      	bpl.n	8010db8 <__sflush_r+0x44>
 8010dac:	6863      	ldr	r3, [r4, #4]
 8010dae:	1ad2      	subs	r2, r2, r3
 8010db0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010db2:	b10b      	cbz	r3, 8010db8 <__sflush_r+0x44>
 8010db4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010db6:	1ad2      	subs	r2, r2, r3
 8010db8:	2300      	movs	r3, #0
 8010dba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010dbc:	6a21      	ldr	r1, [r4, #32]
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	47b0      	blx	r6
 8010dc2:	1c43      	adds	r3, r0, #1
 8010dc4:	89a3      	ldrh	r3, [r4, #12]
 8010dc6:	d106      	bne.n	8010dd6 <__sflush_r+0x62>
 8010dc8:	6829      	ldr	r1, [r5, #0]
 8010dca:	291d      	cmp	r1, #29
 8010dcc:	d82b      	bhi.n	8010e26 <__sflush_r+0xb2>
 8010dce:	4a2a      	ldr	r2, [pc, #168]	@ (8010e78 <__sflush_r+0x104>)
 8010dd0:	40ca      	lsrs	r2, r1
 8010dd2:	07d6      	lsls	r6, r2, #31
 8010dd4:	d527      	bpl.n	8010e26 <__sflush_r+0xb2>
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	6062      	str	r2, [r4, #4]
 8010dda:	04d9      	lsls	r1, r3, #19
 8010ddc:	6922      	ldr	r2, [r4, #16]
 8010dde:	6022      	str	r2, [r4, #0]
 8010de0:	d504      	bpl.n	8010dec <__sflush_r+0x78>
 8010de2:	1c42      	adds	r2, r0, #1
 8010de4:	d101      	bne.n	8010dea <__sflush_r+0x76>
 8010de6:	682b      	ldr	r3, [r5, #0]
 8010de8:	b903      	cbnz	r3, 8010dec <__sflush_r+0x78>
 8010dea:	6560      	str	r0, [r4, #84]	@ 0x54
 8010dec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010dee:	602f      	str	r7, [r5, #0]
 8010df0:	b1b9      	cbz	r1, 8010e22 <__sflush_r+0xae>
 8010df2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010df6:	4299      	cmp	r1, r3
 8010df8:	d002      	beq.n	8010e00 <__sflush_r+0x8c>
 8010dfa:	4628      	mov	r0, r5
 8010dfc:	f7ff fb42 	bl	8010484 <_free_r>
 8010e00:	2300      	movs	r3, #0
 8010e02:	6363      	str	r3, [r4, #52]	@ 0x34
 8010e04:	e00d      	b.n	8010e22 <__sflush_r+0xae>
 8010e06:	2301      	movs	r3, #1
 8010e08:	4628      	mov	r0, r5
 8010e0a:	47b0      	blx	r6
 8010e0c:	4602      	mov	r2, r0
 8010e0e:	1c50      	adds	r0, r2, #1
 8010e10:	d1c9      	bne.n	8010da6 <__sflush_r+0x32>
 8010e12:	682b      	ldr	r3, [r5, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d0c6      	beq.n	8010da6 <__sflush_r+0x32>
 8010e18:	2b1d      	cmp	r3, #29
 8010e1a:	d001      	beq.n	8010e20 <__sflush_r+0xac>
 8010e1c:	2b16      	cmp	r3, #22
 8010e1e:	d11e      	bne.n	8010e5e <__sflush_r+0xea>
 8010e20:	602f      	str	r7, [r5, #0]
 8010e22:	2000      	movs	r0, #0
 8010e24:	e022      	b.n	8010e6c <__sflush_r+0xf8>
 8010e26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e2a:	b21b      	sxth	r3, r3
 8010e2c:	e01b      	b.n	8010e66 <__sflush_r+0xf2>
 8010e2e:	690f      	ldr	r7, [r1, #16]
 8010e30:	2f00      	cmp	r7, #0
 8010e32:	d0f6      	beq.n	8010e22 <__sflush_r+0xae>
 8010e34:	0793      	lsls	r3, r2, #30
 8010e36:	680e      	ldr	r6, [r1, #0]
 8010e38:	bf08      	it	eq
 8010e3a:	694b      	ldreq	r3, [r1, #20]
 8010e3c:	600f      	str	r7, [r1, #0]
 8010e3e:	bf18      	it	ne
 8010e40:	2300      	movne	r3, #0
 8010e42:	eba6 0807 	sub.w	r8, r6, r7
 8010e46:	608b      	str	r3, [r1, #8]
 8010e48:	f1b8 0f00 	cmp.w	r8, #0
 8010e4c:	dde9      	ble.n	8010e22 <__sflush_r+0xae>
 8010e4e:	6a21      	ldr	r1, [r4, #32]
 8010e50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010e52:	4643      	mov	r3, r8
 8010e54:	463a      	mov	r2, r7
 8010e56:	4628      	mov	r0, r5
 8010e58:	47b0      	blx	r6
 8010e5a:	2800      	cmp	r0, #0
 8010e5c:	dc08      	bgt.n	8010e70 <__sflush_r+0xfc>
 8010e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e66:	81a3      	strh	r3, [r4, #12]
 8010e68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e70:	4407      	add	r7, r0
 8010e72:	eba8 0800 	sub.w	r8, r8, r0
 8010e76:	e7e7      	b.n	8010e48 <__sflush_r+0xd4>
 8010e78:	20400001 	.word	0x20400001

08010e7c <_fflush_r>:
 8010e7c:	b538      	push	{r3, r4, r5, lr}
 8010e7e:	690b      	ldr	r3, [r1, #16]
 8010e80:	4605      	mov	r5, r0
 8010e82:	460c      	mov	r4, r1
 8010e84:	b913      	cbnz	r3, 8010e8c <_fflush_r+0x10>
 8010e86:	2500      	movs	r5, #0
 8010e88:	4628      	mov	r0, r5
 8010e8a:	bd38      	pop	{r3, r4, r5, pc}
 8010e8c:	b118      	cbz	r0, 8010e96 <_fflush_r+0x1a>
 8010e8e:	6a03      	ldr	r3, [r0, #32]
 8010e90:	b90b      	cbnz	r3, 8010e96 <_fflush_r+0x1a>
 8010e92:	f7ff f8e5 	bl	8010060 <__sinit>
 8010e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d0f3      	beq.n	8010e86 <_fflush_r+0xa>
 8010e9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010ea0:	07d0      	lsls	r0, r2, #31
 8010ea2:	d404      	bmi.n	8010eae <_fflush_r+0x32>
 8010ea4:	0599      	lsls	r1, r3, #22
 8010ea6:	d402      	bmi.n	8010eae <_fflush_r+0x32>
 8010ea8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010eaa:	f7ff faa8 	bl	80103fe <__retarget_lock_acquire_recursive>
 8010eae:	4628      	mov	r0, r5
 8010eb0:	4621      	mov	r1, r4
 8010eb2:	f7ff ff5f 	bl	8010d74 <__sflush_r>
 8010eb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010eb8:	07da      	lsls	r2, r3, #31
 8010eba:	4605      	mov	r5, r0
 8010ebc:	d4e4      	bmi.n	8010e88 <_fflush_r+0xc>
 8010ebe:	89a3      	ldrh	r3, [r4, #12]
 8010ec0:	059b      	lsls	r3, r3, #22
 8010ec2:	d4e1      	bmi.n	8010e88 <_fflush_r+0xc>
 8010ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ec6:	f7ff fa9b 	bl	8010400 <__retarget_lock_release_recursive>
 8010eca:	e7dd      	b.n	8010e88 <_fflush_r+0xc>

08010ecc <fiprintf>:
 8010ecc:	b40e      	push	{r1, r2, r3}
 8010ece:	b503      	push	{r0, r1, lr}
 8010ed0:	4601      	mov	r1, r0
 8010ed2:	ab03      	add	r3, sp, #12
 8010ed4:	4805      	ldr	r0, [pc, #20]	@ (8010eec <fiprintf+0x20>)
 8010ed6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010eda:	6800      	ldr	r0, [r0, #0]
 8010edc:	9301      	str	r3, [sp, #4]
 8010ede:	f7ff fca5 	bl	801082c <_vfiprintf_r>
 8010ee2:	b002      	add	sp, #8
 8010ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ee8:	b003      	add	sp, #12
 8010eea:	4770      	bx	lr
 8010eec:	20000278 	.word	0x20000278

08010ef0 <__swbuf_r>:
 8010ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ef2:	460e      	mov	r6, r1
 8010ef4:	4614      	mov	r4, r2
 8010ef6:	4605      	mov	r5, r0
 8010ef8:	b118      	cbz	r0, 8010f02 <__swbuf_r+0x12>
 8010efa:	6a03      	ldr	r3, [r0, #32]
 8010efc:	b90b      	cbnz	r3, 8010f02 <__swbuf_r+0x12>
 8010efe:	f7ff f8af 	bl	8010060 <__sinit>
 8010f02:	69a3      	ldr	r3, [r4, #24]
 8010f04:	60a3      	str	r3, [r4, #8]
 8010f06:	89a3      	ldrh	r3, [r4, #12]
 8010f08:	071a      	lsls	r2, r3, #28
 8010f0a:	d501      	bpl.n	8010f10 <__swbuf_r+0x20>
 8010f0c:	6923      	ldr	r3, [r4, #16]
 8010f0e:	b943      	cbnz	r3, 8010f22 <__swbuf_r+0x32>
 8010f10:	4621      	mov	r1, r4
 8010f12:	4628      	mov	r0, r5
 8010f14:	f000 f82a 	bl	8010f6c <__swsetup_r>
 8010f18:	b118      	cbz	r0, 8010f22 <__swbuf_r+0x32>
 8010f1a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010f1e:	4638      	mov	r0, r7
 8010f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f22:	6823      	ldr	r3, [r4, #0]
 8010f24:	6922      	ldr	r2, [r4, #16]
 8010f26:	1a98      	subs	r0, r3, r2
 8010f28:	6963      	ldr	r3, [r4, #20]
 8010f2a:	b2f6      	uxtb	r6, r6
 8010f2c:	4283      	cmp	r3, r0
 8010f2e:	4637      	mov	r7, r6
 8010f30:	dc05      	bgt.n	8010f3e <__swbuf_r+0x4e>
 8010f32:	4621      	mov	r1, r4
 8010f34:	4628      	mov	r0, r5
 8010f36:	f7ff ffa1 	bl	8010e7c <_fflush_r>
 8010f3a:	2800      	cmp	r0, #0
 8010f3c:	d1ed      	bne.n	8010f1a <__swbuf_r+0x2a>
 8010f3e:	68a3      	ldr	r3, [r4, #8]
 8010f40:	3b01      	subs	r3, #1
 8010f42:	60a3      	str	r3, [r4, #8]
 8010f44:	6823      	ldr	r3, [r4, #0]
 8010f46:	1c5a      	adds	r2, r3, #1
 8010f48:	6022      	str	r2, [r4, #0]
 8010f4a:	701e      	strb	r6, [r3, #0]
 8010f4c:	6962      	ldr	r2, [r4, #20]
 8010f4e:	1c43      	adds	r3, r0, #1
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d004      	beq.n	8010f5e <__swbuf_r+0x6e>
 8010f54:	89a3      	ldrh	r3, [r4, #12]
 8010f56:	07db      	lsls	r3, r3, #31
 8010f58:	d5e1      	bpl.n	8010f1e <__swbuf_r+0x2e>
 8010f5a:	2e0a      	cmp	r6, #10
 8010f5c:	d1df      	bne.n	8010f1e <__swbuf_r+0x2e>
 8010f5e:	4621      	mov	r1, r4
 8010f60:	4628      	mov	r0, r5
 8010f62:	f7ff ff8b 	bl	8010e7c <_fflush_r>
 8010f66:	2800      	cmp	r0, #0
 8010f68:	d0d9      	beq.n	8010f1e <__swbuf_r+0x2e>
 8010f6a:	e7d6      	b.n	8010f1a <__swbuf_r+0x2a>

08010f6c <__swsetup_r>:
 8010f6c:	b538      	push	{r3, r4, r5, lr}
 8010f6e:	4b29      	ldr	r3, [pc, #164]	@ (8011014 <__swsetup_r+0xa8>)
 8010f70:	4605      	mov	r5, r0
 8010f72:	6818      	ldr	r0, [r3, #0]
 8010f74:	460c      	mov	r4, r1
 8010f76:	b118      	cbz	r0, 8010f80 <__swsetup_r+0x14>
 8010f78:	6a03      	ldr	r3, [r0, #32]
 8010f7a:	b90b      	cbnz	r3, 8010f80 <__swsetup_r+0x14>
 8010f7c:	f7ff f870 	bl	8010060 <__sinit>
 8010f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f84:	0719      	lsls	r1, r3, #28
 8010f86:	d422      	bmi.n	8010fce <__swsetup_r+0x62>
 8010f88:	06da      	lsls	r2, r3, #27
 8010f8a:	d407      	bmi.n	8010f9c <__swsetup_r+0x30>
 8010f8c:	2209      	movs	r2, #9
 8010f8e:	602a      	str	r2, [r5, #0]
 8010f90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f94:	81a3      	strh	r3, [r4, #12]
 8010f96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010f9a:	e033      	b.n	8011004 <__swsetup_r+0x98>
 8010f9c:	0758      	lsls	r0, r3, #29
 8010f9e:	d512      	bpl.n	8010fc6 <__swsetup_r+0x5a>
 8010fa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010fa2:	b141      	cbz	r1, 8010fb6 <__swsetup_r+0x4a>
 8010fa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010fa8:	4299      	cmp	r1, r3
 8010faa:	d002      	beq.n	8010fb2 <__swsetup_r+0x46>
 8010fac:	4628      	mov	r0, r5
 8010fae:	f7ff fa69 	bl	8010484 <_free_r>
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8010fb6:	89a3      	ldrh	r3, [r4, #12]
 8010fb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010fbc:	81a3      	strh	r3, [r4, #12]
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	6063      	str	r3, [r4, #4]
 8010fc2:	6923      	ldr	r3, [r4, #16]
 8010fc4:	6023      	str	r3, [r4, #0]
 8010fc6:	89a3      	ldrh	r3, [r4, #12]
 8010fc8:	f043 0308 	orr.w	r3, r3, #8
 8010fcc:	81a3      	strh	r3, [r4, #12]
 8010fce:	6923      	ldr	r3, [r4, #16]
 8010fd0:	b94b      	cbnz	r3, 8010fe6 <__swsetup_r+0x7a>
 8010fd2:	89a3      	ldrh	r3, [r4, #12]
 8010fd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010fdc:	d003      	beq.n	8010fe6 <__swsetup_r+0x7a>
 8010fde:	4621      	mov	r1, r4
 8010fe0:	4628      	mov	r0, r5
 8010fe2:	f000 f860 	bl	80110a6 <__smakebuf_r>
 8010fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fea:	f013 0201 	ands.w	r2, r3, #1
 8010fee:	d00a      	beq.n	8011006 <__swsetup_r+0x9a>
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	60a2      	str	r2, [r4, #8]
 8010ff4:	6962      	ldr	r2, [r4, #20]
 8010ff6:	4252      	negs	r2, r2
 8010ff8:	61a2      	str	r2, [r4, #24]
 8010ffa:	6922      	ldr	r2, [r4, #16]
 8010ffc:	b942      	cbnz	r2, 8011010 <__swsetup_r+0xa4>
 8010ffe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011002:	d1c5      	bne.n	8010f90 <__swsetup_r+0x24>
 8011004:	bd38      	pop	{r3, r4, r5, pc}
 8011006:	0799      	lsls	r1, r3, #30
 8011008:	bf58      	it	pl
 801100a:	6962      	ldrpl	r2, [r4, #20]
 801100c:	60a2      	str	r2, [r4, #8]
 801100e:	e7f4      	b.n	8010ffa <__swsetup_r+0x8e>
 8011010:	2000      	movs	r0, #0
 8011012:	e7f7      	b.n	8011004 <__swsetup_r+0x98>
 8011014:	20000278 	.word	0x20000278

08011018 <memmove>:
 8011018:	4288      	cmp	r0, r1
 801101a:	b510      	push	{r4, lr}
 801101c:	eb01 0402 	add.w	r4, r1, r2
 8011020:	d902      	bls.n	8011028 <memmove+0x10>
 8011022:	4284      	cmp	r4, r0
 8011024:	4623      	mov	r3, r4
 8011026:	d807      	bhi.n	8011038 <memmove+0x20>
 8011028:	1e43      	subs	r3, r0, #1
 801102a:	42a1      	cmp	r1, r4
 801102c:	d008      	beq.n	8011040 <memmove+0x28>
 801102e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011032:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011036:	e7f8      	b.n	801102a <memmove+0x12>
 8011038:	4402      	add	r2, r0
 801103a:	4601      	mov	r1, r0
 801103c:	428a      	cmp	r2, r1
 801103e:	d100      	bne.n	8011042 <memmove+0x2a>
 8011040:	bd10      	pop	{r4, pc}
 8011042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011046:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801104a:	e7f7      	b.n	801103c <memmove+0x24>

0801104c <abort>:
 801104c:	b508      	push	{r3, lr}
 801104e:	2006      	movs	r0, #6
 8011050:	f000 f88e 	bl	8011170 <raise>
 8011054:	2001      	movs	r0, #1
 8011056:	f7f0 f99b 	bl	8001390 <_exit>

0801105a <__swhatbuf_r>:
 801105a:	b570      	push	{r4, r5, r6, lr}
 801105c:	460c      	mov	r4, r1
 801105e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011062:	2900      	cmp	r1, #0
 8011064:	b096      	sub	sp, #88	@ 0x58
 8011066:	4615      	mov	r5, r2
 8011068:	461e      	mov	r6, r3
 801106a:	da0d      	bge.n	8011088 <__swhatbuf_r+0x2e>
 801106c:	89a3      	ldrh	r3, [r4, #12]
 801106e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011072:	f04f 0100 	mov.w	r1, #0
 8011076:	bf14      	ite	ne
 8011078:	2340      	movne	r3, #64	@ 0x40
 801107a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801107e:	2000      	movs	r0, #0
 8011080:	6031      	str	r1, [r6, #0]
 8011082:	602b      	str	r3, [r5, #0]
 8011084:	b016      	add	sp, #88	@ 0x58
 8011086:	bd70      	pop	{r4, r5, r6, pc}
 8011088:	466a      	mov	r2, sp
 801108a:	f000 f879 	bl	8011180 <_fstat_r>
 801108e:	2800      	cmp	r0, #0
 8011090:	dbec      	blt.n	801106c <__swhatbuf_r+0x12>
 8011092:	9901      	ldr	r1, [sp, #4]
 8011094:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011098:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801109c:	4259      	negs	r1, r3
 801109e:	4159      	adcs	r1, r3
 80110a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80110a4:	e7eb      	b.n	801107e <__swhatbuf_r+0x24>

080110a6 <__smakebuf_r>:
 80110a6:	898b      	ldrh	r3, [r1, #12]
 80110a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80110aa:	079d      	lsls	r5, r3, #30
 80110ac:	4606      	mov	r6, r0
 80110ae:	460c      	mov	r4, r1
 80110b0:	d507      	bpl.n	80110c2 <__smakebuf_r+0x1c>
 80110b2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80110b6:	6023      	str	r3, [r4, #0]
 80110b8:	6123      	str	r3, [r4, #16]
 80110ba:	2301      	movs	r3, #1
 80110bc:	6163      	str	r3, [r4, #20]
 80110be:	b003      	add	sp, #12
 80110c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110c2:	ab01      	add	r3, sp, #4
 80110c4:	466a      	mov	r2, sp
 80110c6:	f7ff ffc8 	bl	801105a <__swhatbuf_r>
 80110ca:	9f00      	ldr	r7, [sp, #0]
 80110cc:	4605      	mov	r5, r0
 80110ce:	4639      	mov	r1, r7
 80110d0:	4630      	mov	r0, r6
 80110d2:	f7fe fd93 	bl	800fbfc <_malloc_r>
 80110d6:	b948      	cbnz	r0, 80110ec <__smakebuf_r+0x46>
 80110d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110dc:	059a      	lsls	r2, r3, #22
 80110de:	d4ee      	bmi.n	80110be <__smakebuf_r+0x18>
 80110e0:	f023 0303 	bic.w	r3, r3, #3
 80110e4:	f043 0302 	orr.w	r3, r3, #2
 80110e8:	81a3      	strh	r3, [r4, #12]
 80110ea:	e7e2      	b.n	80110b2 <__smakebuf_r+0xc>
 80110ec:	89a3      	ldrh	r3, [r4, #12]
 80110ee:	6020      	str	r0, [r4, #0]
 80110f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110f4:	81a3      	strh	r3, [r4, #12]
 80110f6:	9b01      	ldr	r3, [sp, #4]
 80110f8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80110fc:	b15b      	cbz	r3, 8011116 <__smakebuf_r+0x70>
 80110fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011102:	4630      	mov	r0, r6
 8011104:	f000 f84e 	bl	80111a4 <_isatty_r>
 8011108:	b128      	cbz	r0, 8011116 <__smakebuf_r+0x70>
 801110a:	89a3      	ldrh	r3, [r4, #12]
 801110c:	f023 0303 	bic.w	r3, r3, #3
 8011110:	f043 0301 	orr.w	r3, r3, #1
 8011114:	81a3      	strh	r3, [r4, #12]
 8011116:	89a3      	ldrh	r3, [r4, #12]
 8011118:	431d      	orrs	r5, r3
 801111a:	81a5      	strh	r5, [r4, #12]
 801111c:	e7cf      	b.n	80110be <__smakebuf_r+0x18>

0801111e <_raise_r>:
 801111e:	291f      	cmp	r1, #31
 8011120:	b538      	push	{r3, r4, r5, lr}
 8011122:	4605      	mov	r5, r0
 8011124:	460c      	mov	r4, r1
 8011126:	d904      	bls.n	8011132 <_raise_r+0x14>
 8011128:	2316      	movs	r3, #22
 801112a:	6003      	str	r3, [r0, #0]
 801112c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011130:	bd38      	pop	{r3, r4, r5, pc}
 8011132:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011134:	b112      	cbz	r2, 801113c <_raise_r+0x1e>
 8011136:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801113a:	b94b      	cbnz	r3, 8011150 <_raise_r+0x32>
 801113c:	4628      	mov	r0, r5
 801113e:	f000 f853 	bl	80111e8 <_getpid_r>
 8011142:	4622      	mov	r2, r4
 8011144:	4601      	mov	r1, r0
 8011146:	4628      	mov	r0, r5
 8011148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801114c:	f000 b83a 	b.w	80111c4 <_kill_r>
 8011150:	2b01      	cmp	r3, #1
 8011152:	d00a      	beq.n	801116a <_raise_r+0x4c>
 8011154:	1c59      	adds	r1, r3, #1
 8011156:	d103      	bne.n	8011160 <_raise_r+0x42>
 8011158:	2316      	movs	r3, #22
 801115a:	6003      	str	r3, [r0, #0]
 801115c:	2001      	movs	r0, #1
 801115e:	e7e7      	b.n	8011130 <_raise_r+0x12>
 8011160:	2100      	movs	r1, #0
 8011162:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011166:	4620      	mov	r0, r4
 8011168:	4798      	blx	r3
 801116a:	2000      	movs	r0, #0
 801116c:	e7e0      	b.n	8011130 <_raise_r+0x12>
	...

08011170 <raise>:
 8011170:	4b02      	ldr	r3, [pc, #8]	@ (801117c <raise+0xc>)
 8011172:	4601      	mov	r1, r0
 8011174:	6818      	ldr	r0, [r3, #0]
 8011176:	f7ff bfd2 	b.w	801111e <_raise_r>
 801117a:	bf00      	nop
 801117c:	20000278 	.word	0x20000278

08011180 <_fstat_r>:
 8011180:	b538      	push	{r3, r4, r5, lr}
 8011182:	4d07      	ldr	r5, [pc, #28]	@ (80111a0 <_fstat_r+0x20>)
 8011184:	2300      	movs	r3, #0
 8011186:	4604      	mov	r4, r0
 8011188:	4608      	mov	r0, r1
 801118a:	4611      	mov	r1, r2
 801118c:	602b      	str	r3, [r5, #0]
 801118e:	f7f0 f94f 	bl	8001430 <_fstat>
 8011192:	1c43      	adds	r3, r0, #1
 8011194:	d102      	bne.n	801119c <_fstat_r+0x1c>
 8011196:	682b      	ldr	r3, [r5, #0]
 8011198:	b103      	cbz	r3, 801119c <_fstat_r+0x1c>
 801119a:	6023      	str	r3, [r4, #0]
 801119c:	bd38      	pop	{r3, r4, r5, pc}
 801119e:	bf00      	nop
 80111a0:	2000dd64 	.word	0x2000dd64

080111a4 <_isatty_r>:
 80111a4:	b538      	push	{r3, r4, r5, lr}
 80111a6:	4d06      	ldr	r5, [pc, #24]	@ (80111c0 <_isatty_r+0x1c>)
 80111a8:	2300      	movs	r3, #0
 80111aa:	4604      	mov	r4, r0
 80111ac:	4608      	mov	r0, r1
 80111ae:	602b      	str	r3, [r5, #0]
 80111b0:	f7f0 f94e 	bl	8001450 <_isatty>
 80111b4:	1c43      	adds	r3, r0, #1
 80111b6:	d102      	bne.n	80111be <_isatty_r+0x1a>
 80111b8:	682b      	ldr	r3, [r5, #0]
 80111ba:	b103      	cbz	r3, 80111be <_isatty_r+0x1a>
 80111bc:	6023      	str	r3, [r4, #0]
 80111be:	bd38      	pop	{r3, r4, r5, pc}
 80111c0:	2000dd64 	.word	0x2000dd64

080111c4 <_kill_r>:
 80111c4:	b538      	push	{r3, r4, r5, lr}
 80111c6:	4d07      	ldr	r5, [pc, #28]	@ (80111e4 <_kill_r+0x20>)
 80111c8:	2300      	movs	r3, #0
 80111ca:	4604      	mov	r4, r0
 80111cc:	4608      	mov	r0, r1
 80111ce:	4611      	mov	r1, r2
 80111d0:	602b      	str	r3, [r5, #0]
 80111d2:	f7f0 f8cd 	bl	8001370 <_kill>
 80111d6:	1c43      	adds	r3, r0, #1
 80111d8:	d102      	bne.n	80111e0 <_kill_r+0x1c>
 80111da:	682b      	ldr	r3, [r5, #0]
 80111dc:	b103      	cbz	r3, 80111e0 <_kill_r+0x1c>
 80111de:	6023      	str	r3, [r4, #0]
 80111e0:	bd38      	pop	{r3, r4, r5, pc}
 80111e2:	bf00      	nop
 80111e4:	2000dd64 	.word	0x2000dd64

080111e8 <_getpid_r>:
 80111e8:	f7f0 b8ba 	b.w	8001360 <_getpid>

080111ec <_init>:
 80111ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ee:	bf00      	nop
 80111f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111f2:	bc08      	pop	{r3}
 80111f4:	469e      	mov	lr, r3
 80111f6:	4770      	bx	lr

080111f8 <_fini>:
 80111f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111fa:	bf00      	nop
 80111fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111fe:	bc08      	pop	{r3}
 8011200:	469e      	mov	lr, r3
 8011202:	4770      	bx	lr
