
micro_ros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018ad4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a70  08018c78  08018c78  00019c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a6e8  0801a6e8  0001ee90  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801a6e8  0801a6e8  0001b6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a6f0  0801a6f0  0001ee90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801a6f0  0801a6f0  0001b6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a700  0801a700  0001b700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00002e90  20000000  0801a704  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e4d8  20002e90  0801d594  0001ee90  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011368  0801d594  0001f368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001ee90  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015fd8  00000000  00000000  0001eec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003646  00000000  00000000  00034e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  000384e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cba  00000000  00000000  00039598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008a82  00000000  00000000  0003a252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014eb3  00000000  00000000  00042cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a11d3  00000000  00000000  00057b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000069  00000000  00000000  000f8d5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e8  00000000  00000000  000f8dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000fe1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20002e90 	.word	0x20002e90
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08018c5c 	.word	0x08018c5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20002e94 	.word	0x20002e94
 80001dc:	08018c5c 	.word	0x08018c5c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_ldivmod>:
 8000a4c:	b97b      	cbnz	r3, 8000a6e <__aeabi_ldivmod+0x22>
 8000a4e:	b972      	cbnz	r2, 8000a6e <__aeabi_ldivmod+0x22>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bfbe      	ittt	lt
 8000a54:	2000      	movlt	r0, #0
 8000a56:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000a5a:	e006      	blt.n	8000a6a <__aeabi_ldivmod+0x1e>
 8000a5c:	bf08      	it	eq
 8000a5e:	2800      	cmpeq	r0, #0
 8000a60:	bf1c      	itt	ne
 8000a62:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000a66:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a6a:	f000 b9d3 	b.w	8000e14 <__aeabi_idiv0>
 8000a6e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a72:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a76:	2900      	cmp	r1, #0
 8000a78:	db09      	blt.n	8000a8e <__aeabi_ldivmod+0x42>
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	db1a      	blt.n	8000ab4 <__aeabi_ldivmod+0x68>
 8000a7e:	f000 f84d 	bl	8000b1c <__udivmoddi4>
 8000a82:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a8a:	b004      	add	sp, #16
 8000a8c:	4770      	bx	lr
 8000a8e:	4240      	negs	r0, r0
 8000a90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db1b      	blt.n	8000ad0 <__aeabi_ldivmod+0x84>
 8000a98:	f000 f840 	bl	8000b1c <__udivmoddi4>
 8000a9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa4:	b004      	add	sp, #16
 8000aa6:	4240      	negs	r0, r0
 8000aa8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aac:	4252      	negs	r2, r2
 8000aae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ab2:	4770      	bx	lr
 8000ab4:	4252      	negs	r2, r2
 8000ab6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aba:	f000 f82f 	bl	8000b1c <__udivmoddi4>
 8000abe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac6:	b004      	add	sp, #16
 8000ac8:	4240      	negs	r0, r0
 8000aca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ace:	4770      	bx	lr
 8000ad0:	4252      	negs	r2, r2
 8000ad2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ad6:	f000 f821 	bl	8000b1c <__udivmoddi4>
 8000ada:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ade:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae2:	b004      	add	sp, #16
 8000ae4:	4252      	negs	r2, r2
 8000ae6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aea:	4770      	bx	lr

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b00:	f000 b988 	b.w	8000e14 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	468e      	mov	lr, r1
 8000b24:	4604      	mov	r4, r0
 8000b26:	4688      	mov	r8, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d14a      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4617      	mov	r7, r2
 8000b30:	d962      	bls.n	8000bf8 <__udivmoddi4+0xdc>
 8000b32:	fab2 f682 	clz	r6, r2
 8000b36:	b14e      	cbz	r6, 8000b4c <__udivmoddi4+0x30>
 8000b38:	f1c6 0320 	rsb	r3, r6, #32
 8000b3c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b40:	fa20 f303 	lsr.w	r3, r0, r3
 8000b44:	40b7      	lsls	r7, r6
 8000b46:	ea43 0808 	orr.w	r8, r3, r8
 8000b4a:	40b4      	lsls	r4, r6
 8000b4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b50:	fa1f fc87 	uxth.w	ip, r7
 8000b54:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b58:	0c23      	lsrs	r3, r4, #16
 8000b5a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b62:	fb01 f20c 	mul.w	r2, r1, ip
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d909      	bls.n	8000b7e <__udivmoddi4+0x62>
 8000b6a:	18fb      	adds	r3, r7, r3
 8000b6c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000b70:	f080 80ea 	bcs.w	8000d48 <__udivmoddi4+0x22c>
 8000b74:	429a      	cmp	r2, r3
 8000b76:	f240 80e7 	bls.w	8000d48 <__udivmoddi4+0x22c>
 8000b7a:	3902      	subs	r1, #2
 8000b7c:	443b      	add	r3, r7
 8000b7e:	1a9a      	subs	r2, r3, r2
 8000b80:	b2a3      	uxth	r3, r4
 8000b82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b8e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b92:	459c      	cmp	ip, r3
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0x8e>
 8000b96:	18fb      	adds	r3, r7, r3
 8000b98:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000b9c:	f080 80d6 	bcs.w	8000d4c <__udivmoddi4+0x230>
 8000ba0:	459c      	cmp	ip, r3
 8000ba2:	f240 80d3 	bls.w	8000d4c <__udivmoddi4+0x230>
 8000ba6:	443b      	add	r3, r7
 8000ba8:	3802      	subs	r0, #2
 8000baa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bae:	eba3 030c 	sub.w	r3, r3, ip
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	b11d      	cbz	r5, 8000bbe <__udivmoddi4+0xa2>
 8000bb6:	40f3      	lsrs	r3, r6
 8000bb8:	2200      	movs	r2, #0
 8000bba:	e9c5 3200 	strd	r3, r2, [r5]
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d905      	bls.n	8000bd2 <__udivmoddi4+0xb6>
 8000bc6:	b10d      	cbz	r5, 8000bcc <__udivmoddi4+0xb0>
 8000bc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4608      	mov	r0, r1
 8000bd0:	e7f5      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000bd2:	fab3 f183 	clz	r1, r3
 8000bd6:	2900      	cmp	r1, #0
 8000bd8:	d146      	bne.n	8000c68 <__udivmoddi4+0x14c>
 8000bda:	4573      	cmp	r3, lr
 8000bdc:	d302      	bcc.n	8000be4 <__udivmoddi4+0xc8>
 8000bde:	4282      	cmp	r2, r0
 8000be0:	f200 8105 	bhi.w	8000dee <__udivmoddi4+0x2d2>
 8000be4:	1a84      	subs	r4, r0, r2
 8000be6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bea:	2001      	movs	r0, #1
 8000bec:	4690      	mov	r8, r2
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	d0e5      	beq.n	8000bbe <__udivmoddi4+0xa2>
 8000bf2:	e9c5 4800 	strd	r4, r8, [r5]
 8000bf6:	e7e2      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	f000 8090 	beq.w	8000d1e <__udivmoddi4+0x202>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	f040 80a4 	bne.w	8000d50 <__udivmoddi4+0x234>
 8000c08:	1a8a      	subs	r2, r1, r2
 8000c0a:	0c03      	lsrs	r3, r0, #16
 8000c0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c10:	b280      	uxth	r0, r0
 8000c12:	b2bc      	uxth	r4, r7
 8000c14:	2101      	movs	r1, #1
 8000c16:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c1a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c22:	fb04 f20c 	mul.w	r2, r4, ip
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x11e>
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c30:	d202      	bcs.n	8000c38 <__udivmoddi4+0x11c>
 8000c32:	429a      	cmp	r2, r3
 8000c34:	f200 80e0 	bhi.w	8000df8 <__udivmoddi4+0x2dc>
 8000c38:	46c4      	mov	ip, r8
 8000c3a:	1a9b      	subs	r3, r3, r2
 8000c3c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c40:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c44:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c48:	fb02 f404 	mul.w	r4, r2, r4
 8000c4c:	429c      	cmp	r4, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x144>
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x142>
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	f200 80ca 	bhi.w	8000df2 <__udivmoddi4+0x2d6>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	1b1b      	subs	r3, r3, r4
 8000c62:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c66:	e7a5      	b.n	8000bb4 <__udivmoddi4+0x98>
 8000c68:	f1c1 0620 	rsb	r6, r1, #32
 8000c6c:	408b      	lsls	r3, r1
 8000c6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c72:	431f      	orrs	r7, r3
 8000c74:	fa0e f401 	lsl.w	r4, lr, r1
 8000c78:	fa20 f306 	lsr.w	r3, r0, r6
 8000c7c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c80:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c84:	4323      	orrs	r3, r4
 8000c86:	fa00 f801 	lsl.w	r8, r0, r1
 8000c8a:	fa1f fc87 	uxth.w	ip, r7
 8000c8e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c92:	0c1c      	lsrs	r4, r3, #16
 8000c94:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c98:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c9c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ca6:	d909      	bls.n	8000cbc <__udivmoddi4+0x1a0>
 8000ca8:	193c      	adds	r4, r7, r4
 8000caa:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000cae:	f080 809c 	bcs.w	8000dea <__udivmoddi4+0x2ce>
 8000cb2:	45a6      	cmp	lr, r4
 8000cb4:	f240 8099 	bls.w	8000dea <__udivmoddi4+0x2ce>
 8000cb8:	3802      	subs	r0, #2
 8000cba:	443c      	add	r4, r7
 8000cbc:	eba4 040e 	sub.w	r4, r4, lr
 8000cc0:	fa1f fe83 	uxth.w	lr, r3
 8000cc4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cc8:	fb09 4413 	mls	r4, r9, r3, r4
 8000ccc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cd0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cd4:	45a4      	cmp	ip, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x1ce>
 8000cd8:	193c      	adds	r4, r7, r4
 8000cda:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000cde:	f080 8082 	bcs.w	8000de6 <__udivmoddi4+0x2ca>
 8000ce2:	45a4      	cmp	ip, r4
 8000ce4:	d97f      	bls.n	8000de6 <__udivmoddi4+0x2ca>
 8000ce6:	3b02      	subs	r3, #2
 8000ce8:	443c      	add	r4, r7
 8000cea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cee:	eba4 040c 	sub.w	r4, r4, ip
 8000cf2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cf6:	4564      	cmp	r4, ip
 8000cf8:	4673      	mov	r3, lr
 8000cfa:	46e1      	mov	r9, ip
 8000cfc:	d362      	bcc.n	8000dc4 <__udivmoddi4+0x2a8>
 8000cfe:	d05f      	beq.n	8000dc0 <__udivmoddi4+0x2a4>
 8000d00:	b15d      	cbz	r5, 8000d1a <__udivmoddi4+0x1fe>
 8000d02:	ebb8 0203 	subs.w	r2, r8, r3
 8000d06:	eb64 0409 	sbc.w	r4, r4, r9
 8000d0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d0e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d12:	431e      	orrs	r6, r3
 8000d14:	40cc      	lsrs	r4, r1
 8000d16:	e9c5 6400 	strd	r6, r4, [r5]
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	e74f      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000d1e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d22:	0c01      	lsrs	r1, r0, #16
 8000d24:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d28:	b280      	uxth	r0, r0
 8000d2a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4638      	mov	r0, r7
 8000d32:	463c      	mov	r4, r7
 8000d34:	46b8      	mov	r8, r7
 8000d36:	46be      	mov	lr, r7
 8000d38:	2620      	movs	r6, #32
 8000d3a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d3e:	eba2 0208 	sub.w	r2, r2, r8
 8000d42:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d46:	e766      	b.n	8000c16 <__udivmoddi4+0xfa>
 8000d48:	4601      	mov	r1, r0
 8000d4a:	e718      	b.n	8000b7e <__udivmoddi4+0x62>
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	e72c      	b.n	8000baa <__udivmoddi4+0x8e>
 8000d50:	f1c6 0220 	rsb	r2, r6, #32
 8000d54:	fa2e f302 	lsr.w	r3, lr, r2
 8000d58:	40b7      	lsls	r7, r6
 8000d5a:	40b1      	lsls	r1, r6
 8000d5c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d64:	430a      	orrs	r2, r1
 8000d66:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d6a:	b2bc      	uxth	r4, r7
 8000d6c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d70:	0c11      	lsrs	r1, r2, #16
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb08 f904 	mul.w	r9, r8, r4
 8000d7a:	40b0      	lsls	r0, r6
 8000d7c:	4589      	cmp	r9, r1
 8000d7e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d82:	b280      	uxth	r0, r0
 8000d84:	d93e      	bls.n	8000e04 <__udivmoddi4+0x2e8>
 8000d86:	1879      	adds	r1, r7, r1
 8000d88:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000d8c:	d201      	bcs.n	8000d92 <__udivmoddi4+0x276>
 8000d8e:	4589      	cmp	r9, r1
 8000d90:	d81f      	bhi.n	8000dd2 <__udivmoddi4+0x2b6>
 8000d92:	eba1 0109 	sub.w	r1, r1, r9
 8000d96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9a:	fb09 f804 	mul.w	r8, r9, r4
 8000d9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000da2:	b292      	uxth	r2, r2
 8000da4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da8:	4542      	cmp	r2, r8
 8000daa:	d229      	bcs.n	8000e00 <__udivmoddi4+0x2e4>
 8000dac:	18ba      	adds	r2, r7, r2
 8000dae:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000db2:	d2c4      	bcs.n	8000d3e <__udivmoddi4+0x222>
 8000db4:	4542      	cmp	r2, r8
 8000db6:	d2c2      	bcs.n	8000d3e <__udivmoddi4+0x222>
 8000db8:	f1a9 0102 	sub.w	r1, r9, #2
 8000dbc:	443a      	add	r2, r7
 8000dbe:	e7be      	b.n	8000d3e <__udivmoddi4+0x222>
 8000dc0:	45f0      	cmp	r8, lr
 8000dc2:	d29d      	bcs.n	8000d00 <__udivmoddi4+0x1e4>
 8000dc4:	ebbe 0302 	subs.w	r3, lr, r2
 8000dc8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000dcc:	3801      	subs	r0, #1
 8000dce:	46e1      	mov	r9, ip
 8000dd0:	e796      	b.n	8000d00 <__udivmoddi4+0x1e4>
 8000dd2:	eba7 0909 	sub.w	r9, r7, r9
 8000dd6:	4449      	add	r1, r9
 8000dd8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ddc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000de0:	fb09 f804 	mul.w	r8, r9, r4
 8000de4:	e7db      	b.n	8000d9e <__udivmoddi4+0x282>
 8000de6:	4673      	mov	r3, lr
 8000de8:	e77f      	b.n	8000cea <__udivmoddi4+0x1ce>
 8000dea:	4650      	mov	r0, sl
 8000dec:	e766      	b.n	8000cbc <__udivmoddi4+0x1a0>
 8000dee:	4608      	mov	r0, r1
 8000df0:	e6fd      	b.n	8000bee <__udivmoddi4+0xd2>
 8000df2:	443b      	add	r3, r7
 8000df4:	3a02      	subs	r2, #2
 8000df6:	e733      	b.n	8000c60 <__udivmoddi4+0x144>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	443b      	add	r3, r7
 8000dfe:	e71c      	b.n	8000c3a <__udivmoddi4+0x11e>
 8000e00:	4649      	mov	r1, r9
 8000e02:	e79c      	b.n	8000d3e <__udivmoddi4+0x222>
 8000e04:	eba1 0109 	sub.w	r1, r1, r9
 8000e08:	46c4      	mov	ip, r8
 8000e0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0e:	fb09 f804 	mul.w	r8, r9, r4
 8000e12:	e7c4      	b.n	8000d9e <__udivmoddi4+0x282>

08000e14 <__aeabi_idiv0>:
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	@ 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000e24:	f005 f9f4 	bl	8006210 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000e28:	4b5a      	ldr	r3, [pc, #360]	@ (8000f94 <pvPortMallocMicroROS+0x17c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d101      	bne.n	8000e34 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000e30:	f000 f986 	bl	8001140 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000e34:	4b58      	ldr	r3, [pc, #352]	@ (8000f98 <pvPortMallocMicroROS+0x180>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f040 8090 	bne.w	8000f62 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d01e      	beq.n	8000e86 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000e48:	2208      	movs	r2, #8
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d015      	beq.n	8000e86 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f023 0307 	bic.w	r3, r3, #7
 8000e60:	3308      	adds	r3, #8
 8000e62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00b      	beq.n	8000e86 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e72:	f383 8811 	msr	BASEPRI, r3
 8000e76:	f3bf 8f6f 	isb	sy
 8000e7a:	f3bf 8f4f 	dsb	sy
 8000e7e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	e7fd      	b.n	8000e82 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d06a      	beq.n	8000f62 <pvPortMallocMicroROS+0x14a>
 8000e8c:	4b43      	ldr	r3, [pc, #268]	@ (8000f9c <pvPortMallocMicroROS+0x184>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d865      	bhi.n	8000f62 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000e96:	4b42      	ldr	r3, [pc, #264]	@ (8000fa0 <pvPortMallocMicroROS+0x188>)
 8000e98:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000e9a:	4b41      	ldr	r3, [pc, #260]	@ (8000fa0 <pvPortMallocMicroROS+0x188>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000ea0:	e004      	b.n	8000eac <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d903      	bls.n	8000ebe <pvPortMallocMicroROS+0xa6>
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f1      	bne.n	8000ea2 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000ebe:	4b35      	ldr	r3, [pc, #212]	@ (8000f94 <pvPortMallocMicroROS+0x17c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d04c      	beq.n	8000f62 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000ec8:	6a3b      	ldr	r3, [r7, #32]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2208      	movs	r2, #8
 8000ece:	4413      	add	r3, r2
 8000ed0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
 8000ed8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	1ad2      	subs	r2, r2, r3
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d920      	bls.n	8000f2c <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00b      	beq.n	8000f14 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f00:	f383 8811 	msr	BASEPRI, r3
 8000f04:	f3bf 8f6f 	isb	sy
 8000f08:	f3bf 8f4f 	dsb	sy
 8000f0c:	613b      	str	r3, [r7, #16]
}
 8000f0e:	bf00      	nop
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	1ad2      	subs	r2, r2, r3
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000f26:	69b8      	ldr	r0, [r7, #24]
 8000f28:	f000 f96c 	bl	8001204 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <pvPortMallocMicroROS+0x184>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	4a19      	ldr	r2, [pc, #100]	@ (8000f9c <pvPortMallocMicroROS+0x184>)
 8000f38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000f3a:	4b18      	ldr	r3, [pc, #96]	@ (8000f9c <pvPortMallocMicroROS+0x184>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <pvPortMallocMicroROS+0x18c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d203      	bcs.n	8000f4e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000f46:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <pvPortMallocMicroROS+0x184>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a16      	ldr	r2, [pc, #88]	@ (8000fa4 <pvPortMallocMicroROS+0x18c>)
 8000f4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <pvPortMallocMicroROS+0x180>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	431a      	orrs	r2, r3
 8000f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000f62:	f005 f963 	bl	800622c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00b      	beq.n	8000f88 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f74:	f383 8811 	msr	BASEPRI, r3
 8000f78:	f3bf 8f6f 	isb	sy
 8000f7c:	f3bf 8f4f 	dsb	sy
 8000f80:	60fb      	str	r3, [r7, #12]
}
 8000f82:	bf00      	nop
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000f88:	69fb      	ldr	r3, [r7, #28]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3728      	adds	r7, #40	@ 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20006ab4 	.word	0x20006ab4
 8000f98:	20006ac0 	.word	0x20006ac0
 8000f9c:	20006ab8 	.word	0x20006ab8
 8000fa0:	20006aac 	.word	0x20006aac
 8000fa4:	20006abc 	.word	0x20006abc

08000fa8 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d04a      	beq.n	8001050 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000fba:	2308      	movs	r3, #8
 8000fbc:	425b      	negs	r3, r3
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	4b22      	ldr	r3, [pc, #136]	@ (8001058 <vPortFreeMicroROS+0xb0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10b      	bne.n	8000fee <vPortFreeMicroROS+0x46>
	__asm volatile
 8000fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fda:	f383 8811 	msr	BASEPRI, r3
 8000fde:	f3bf 8f6f 	isb	sy
 8000fe2:	f3bf 8f4f 	dsb	sy
 8000fe6:	60fb      	str	r3, [r7, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	e7fd      	b.n	8000fea <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00b      	beq.n	800100e <vPortFreeMicroROS+0x66>
	__asm volatile
 8000ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ffa:	f383 8811 	msr	BASEPRI, r3
 8000ffe:	f3bf 8f6f 	isb	sy
 8001002:	f3bf 8f4f 	dsb	sy
 8001006:	60bb      	str	r3, [r7, #8]
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	e7fd      	b.n	800100a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <vPortFreeMicroROS+0xb0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4013      	ands	r3, r2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d019      	beq.n	8001050 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d115      	bne.n	8001050 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <vPortFreeMicroROS+0xb0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	43db      	mvns	r3, r3
 800102e:	401a      	ands	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001034:	f005 f8ec 	bl	8006210 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	4b07      	ldr	r3, [pc, #28]	@ (800105c <vPortFreeMicroROS+0xb4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4413      	add	r3, r2
 8001042:	4a06      	ldr	r2, [pc, #24]	@ (800105c <vPortFreeMicroROS+0xb4>)
 8001044:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001046:	6938      	ldr	r0, [r7, #16]
 8001048:	f000 f8dc 	bl	8001204 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800104c:	f005 f8ee 	bl	800622c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001050:	bf00      	nop
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20006ac0 	.word	0x20006ac0
 800105c:	20006ab8 	.word	0x20006ab8

08001060 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001060:	b480      	push	{r7}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800106c:	2308      	movs	r3, #8
 800106e:	425b      	negs	r3, r3
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	4413      	add	r3, r2
 8001074:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <getBlockSize+0x38>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	43db      	mvns	r3, r3
 8001084:	4013      	ands	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]

	return count;
 8001088:	68fb      	ldr	r3, [r7, #12]
}
 800108a:	4618      	mov	r0, r3
 800108c:	371c      	adds	r7, #28
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20006ac0 	.word	0x20006ac0

0800109c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80010a6:	f005 f8b3 	bl	8006210 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80010aa:	6838      	ldr	r0, [r7, #0]
 80010ac:	f7ff feb4 	bl	8000e18 <pvPortMallocMicroROS>
 80010b0:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d017      	beq.n	80010e8 <pvPortReallocMicroROS+0x4c>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d014      	beq.n	80010e8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffce 	bl	8001060 <getBlockSize>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2208      	movs	r2, #8
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d201      	bcs.n	80010d8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	68b8      	ldr	r0, [r7, #8]
 80010de:	f016 ff7e 	bl	8017fde <memcpy>

		vPortFreeMicroROS(pv);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ff60 	bl	8000fa8 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80010e8:	f005 f8a0 	bl	800622c <xTaskResumeAll>

	return newmem;
 80010ec:	68bb      	ldr	r3, [r7, #8]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001100:	f005 f886 	bl	8006210 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	fb02 f303 	mul.w	r3, r2, r3
 800110c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff fe82 	bl	8000e18 <pvPortMallocMicroROS>
 8001114:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	613b      	str	r3, [r7, #16]

  	while(count--)
 800111a:	e004      	b.n	8001126 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	613a      	str	r2, [r7, #16]
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	1e5a      	subs	r2, r3, #1
 800112a:	617a      	str	r2, [r7, #20]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f5      	bne.n	800111c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001130:	f005 f87c 	bl	800622c <xTaskResumeAll>
  	return mem;
 8001134:	68fb      	ldr	r3, [r7, #12]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001146:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800114a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800114c:	4b27      	ldr	r3, [pc, #156]	@ (80011ec <prvHeapInit+0xac>)
 800114e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00c      	beq.n	8001174 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3307      	adds	r3, #7
 800115e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f023 0307 	bic.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	4a1f      	ldr	r2, [pc, #124]	@ (80011ec <prvHeapInit+0xac>)
 8001170:	4413      	add	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001178:	4a1d      	ldr	r2, [pc, #116]	@ (80011f0 <prvHeapInit+0xb0>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800117e:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <prvHeapInit+0xb0>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	4413      	add	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800118c:	2208      	movs	r2, #8
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	1a9b      	subs	r3, r3, r2
 8001192:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f023 0307 	bic.w	r3, r3, #7
 800119a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4a15      	ldr	r2, [pc, #84]	@ (80011f4 <prvHeapInit+0xb4>)
 80011a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80011a2:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <prvHeapInit+0xb4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80011aa:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <prvHeapInit+0xb4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	1ad2      	subs	r2, r2, r3
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <prvHeapInit+0xb4>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4a0a      	ldr	r2, [pc, #40]	@ (80011f8 <prvHeapInit+0xb8>)
 80011ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	4a09      	ldr	r2, [pc, #36]	@ (80011fc <prvHeapInit+0xbc>)
 80011d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80011d8:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <prvHeapInit+0xc0>)
 80011da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80011de:	601a      	str	r2, [r3, #0]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	20002eac 	.word	0x20002eac
 80011f0:	20006aac 	.word	0x20006aac
 80011f4:	20006ab4 	.word	0x20006ab4
 80011f8:	20006abc 	.word	0x20006abc
 80011fc:	20006ab8 	.word	0x20006ab8
 8001200:	20006ac0 	.word	0x20006ac0

08001204 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800120c:	4b28      	ldr	r3, [pc, #160]	@ (80012b0 <prvInsertBlockIntoFreeList+0xac>)
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	e002      	b.n	8001218 <prvInsertBlockIntoFreeList+0x14>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	429a      	cmp	r2, r3
 8001220:	d8f7      	bhi.n	8001212 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	4413      	add	r3, r2
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	d108      	bne.n	8001246 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	441a      	add	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	441a      	add	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d118      	bne.n	800128c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <prvInsertBlockIntoFreeList+0xb0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d00d      	beq.n	8001282 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	441a      	add	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	e008      	b.n	8001294 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001282:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <prvInsertBlockIntoFreeList+0xb0>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	e003      	b.n	8001294 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	429a      	cmp	r2, r3
 800129a:	d002      	beq.n	80012a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20006aac 	.word	0x20006aac
 80012b4:	20006ab4 	.word	0x20006ab4

080012b8 <cmd_vel_callback>:
geometry_msgs__msg__Twist msg_cmd_vel;
double v, omega;
double R = 5, L = 20;
double vl, vr;
void cmd_vel_callback(const void * msgin)
{
 80012b8:	b5b0      	push	{r4, r5, r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  // Cast received message to used type
  const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *)msgin;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	60fb      	str	r3, [r7, #12]

   v = msg->linear.x;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	4938      	ldr	r1, [pc, #224]	@ (80013ac <cmd_vel_callback+0xf4>)
 80012cc:	e9c1 2300 	strd	r2, r3, [r1]
   omega = msg->angular.z;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80012d6:	4936      	ldr	r1, [pc, #216]	@ (80013b0 <cmd_vel_callback+0xf8>)
 80012d8:	e9c1 2300 	strd	r2, r3, [r1]

   vl = (2 * v - omega * L) / (2 * R);
 80012dc:	4b33      	ldr	r3, [pc, #204]	@ (80013ac <cmd_vel_callback+0xf4>)
 80012de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	f7fe ffe9 	bl	80002bc <__adddf3>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4614      	mov	r4, r2
 80012f0:	461d      	mov	r5, r3
 80012f2:	4b2f      	ldr	r3, [pc, #188]	@ (80013b0 <cmd_vel_callback+0xf8>)
 80012f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012f8:	4b2e      	ldr	r3, [pc, #184]	@ (80013b4 <cmd_vel_callback+0xfc>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f7ff f993 	bl	8000628 <__aeabi_dmul>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4620      	mov	r0, r4
 8001308:	4629      	mov	r1, r5
 800130a:	f7fe ffd5 	bl	80002b8 <__aeabi_dsub>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4614      	mov	r4, r2
 8001314:	461d      	mov	r5, r3
 8001316:	4b28      	ldr	r3, [pc, #160]	@ (80013b8 <cmd_vel_callback+0x100>)
 8001318:	e9d3 0100 	ldrd	r0, r1, [r3]
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	f7fe ffcc 	bl	80002bc <__adddf3>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4620      	mov	r0, r4
 800132a:	4629      	mov	r1, r5
 800132c:	f7ff faa6 	bl	800087c <__aeabi_ddiv>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4921      	ldr	r1, [pc, #132]	@ (80013bc <cmd_vel_callback+0x104>)
 8001336:	e9c1 2300 	strd	r2, r3, [r1]
   vr = (2 * v + omega * L) / (2 * R);
 800133a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <cmd_vel_callback+0xf4>)
 800133c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	f7fe ffba 	bl	80002bc <__adddf3>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4614      	mov	r4, r2
 800134e:	461d      	mov	r5, r3
 8001350:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <cmd_vel_callback+0xf8>)
 8001352:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001356:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <cmd_vel_callback+0xfc>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7ff f964 	bl	8000628 <__aeabi_dmul>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4620      	mov	r0, r4
 8001366:	4629      	mov	r1, r5
 8001368:	f7fe ffa8 	bl	80002bc <__adddf3>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4614      	mov	r4, r2
 8001372:	461d      	mov	r5, r3
 8001374:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <cmd_vel_callback+0x100>)
 8001376:	e9d3 0100 	ldrd	r0, r1, [r3]
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	f7fe ff9d 	bl	80002bc <__adddf3>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4620      	mov	r0, r4
 8001388:	4629      	mov	r1, r5
 800138a:	f7ff fa77 	bl	800087c <__aeabi_ddiv>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	490b      	ldr	r1, [pc, #44]	@ (80013c0 <cmd_vel_callback+0x108>)
 8001394:	e9c1 2300 	strd	r2, r3, [r1]
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001398:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800139c:	4809      	ldr	r0, [pc, #36]	@ (80013c4 <cmd_vel_callback+0x10c>)
 800139e:	f001 fee4 	bl	800316a <HAL_GPIO_TogglePin>
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bdb0      	pop	{r4, r5, r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20006c00 	.word	0x20006c00
 80013b0:	20006c08 	.word	0x20006c08
 80013b4:	20000008 	.word	0x20000008
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20006c10 	.word	0x20006c10
 80013c0:	20006c18 	.word	0x20006c18
 80013c4:	40020800 	.word	0x40020800

080013c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013cc:	f000 ffaa 	bl	8002324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d0:	f000 f81a 	bl	8001408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d4:	f000 f8c8 	bl	8001568 <MX_GPIO_Init>
  MX_DMA_Init();
 80013d8:	f000 f89e 	bl	8001518 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013dc:	f000 f872 	bl	80014c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013e0:	f003 fdf8 	bl	8004fd4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013e4:	4a05      	ldr	r2, [pc, #20]	@ (80013fc <main+0x34>)
 80013e6:	2100      	movs	r1, #0
 80013e8:	4805      	ldr	r0, [pc, #20]	@ (8001400 <main+0x38>)
 80013ea:	f003 fe3d 	bl	8005068 <osThreadNew>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a04      	ldr	r2, [pc, #16]	@ (8001404 <main+0x3c>)
 80013f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013f4:	f003 fe12 	bl	800501c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <main+0x30>
 80013fc:	08018d90 	.word	0x08018d90
 8001400:	080017d1 	.word	0x080017d1
 8001404:	20006bcc 	.word	0x20006bcc

08001408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b094      	sub	sp, #80	@ 0x50
 800140c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140e:	f107 0320 	add.w	r3, r7, #32
 8001412:	2230      	movs	r2, #48	@ 0x30
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f016 fd06 	bl	8017e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <SystemClock_Config+0xb4>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001434:	4a21      	ldr	r2, [pc, #132]	@ (80014bc <SystemClock_Config+0xb4>)
 8001436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800143a:	6413      	str	r3, [r2, #64]	@ 0x40
 800143c:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <SystemClock_Config+0xb4>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001448:	2300      	movs	r3, #0
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	4b1c      	ldr	r3, [pc, #112]	@ (80014c0 <SystemClock_Config+0xb8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a1b      	ldr	r2, [pc, #108]	@ (80014c0 <SystemClock_Config+0xb8>)
 8001452:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <SystemClock_Config+0xb8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001464:	2302      	movs	r3, #2
 8001466:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001468:	2301      	movs	r3, #1
 800146a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800146c:	2310      	movs	r3, #16
 800146e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001470:	2300      	movs	r3, #0
 8001472:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001474:	f107 0320 	add.w	r3, r7, #32
 8001478:	4618      	mov	r0, r3
 800147a:	f001 fe91 	bl	80031a0 <HAL_RCC_OscConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001484:	f000 fb08 	bl	8001a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001488:	230f      	movs	r3, #15
 800148a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 f8f4 	bl	8003690 <HAL_RCC_ClockConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80014ae:	f000 faf3 	bl	8001a98 <Error_Handler>
  }
}
 80014b2:	bf00      	nop
 80014b4:	3750      	adds	r7, #80	@ 0x50
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40007000 	.word	0x40007000

080014c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	@ (8001514 <MX_USART2_UART_Init+0x50>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014fc:	f002 faa8 	bl	8003a50 <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001506:	f000 fac7 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20006ac4 	.word	0x20006ac4
 8001514:	40004400 	.word	0x40004400

08001518 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <MX_DMA_Init+0x4c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a0f      	ldr	r2, [pc, #60]	@ (8001564 <MX_DMA_Init+0x4c>)
 8001528:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <MX_DMA_Init+0x4c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2105      	movs	r1, #5
 800153e:	2010      	movs	r0, #16
 8001540:	f001 f83d 	bl	80025be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001544:	2010      	movs	r0, #16
 8001546:	f001 f856 	bl	80025f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2105      	movs	r1, #5
 800154e:	2011      	movs	r0, #17
 8001550:	f001 f835 	bl	80025be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001554:	2011      	movs	r0, #17
 8001556:	f001 f84e 	bl	80025f6 <HAL_NVIC_EnableIRQ>

}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800

08001568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <MX_GPIO_Init+0x9c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a1f      	ldr	r2, [pc, #124]	@ (8001604 <MX_GPIO_Init+0x9c>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <MX_GPIO_Init+0x9c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <MX_GPIO_Init+0x9c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a18      	ldr	r2, [pc, #96]	@ (8001604 <MX_GPIO_Init+0x9c>)
 80015a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <MX_GPIO_Init+0x9c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <MX_GPIO_Init+0x9c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a11      	ldr	r2, [pc, #68]	@ (8001604 <MX_GPIO_Init+0x9c>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <MX_GPIO_Init+0x9c>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015d8:	480b      	ldr	r0, [pc, #44]	@ (8001608 <MX_GPIO_Init+0xa0>)
 80015da:	f001 fdad 	bl	8003138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	4619      	mov	r1, r3
 80015f6:	4804      	ldr	r0, [pc, #16]	@ (8001608 <MX_GPIO_Init+0xa0>)
 80015f8:	f001 fc1a 	bl	8002e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015fc:	bf00      	nop
 80015fe:	3720      	adds	r7, #32
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40023800 	.word	0x40023800
 8001608:	40020800 	.word	0x40020800
 800160c:	00000000 	.word	0x00000000

08001610 <timer_callback>:
nav_msgs__msg__Odometry odom_msg;
geometry_msgs__msg__TransformStamped tf;
tf2_msgs__msg__TFMessage tf_msg;
double x_pos = 0, y_pos = 0, z_pos = 0;
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	e9c7 2300 	strd	r2, r3, [r7]
	(void) last_call_time;
	if (timer != NULL) {
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80b4 	beq.w	800178c <timer_callback+0x17c>
		//Get time actual from agent ros to mcumcu
        uint64_t time_ns = rmw_uros_epoch_nanos();
 8001624:	f009 fad2 	bl	800abcc <rmw_uros_epoch_nanos>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        odom_msg.header.stamp.sec     = time_ns / 1000000000ULL;
 8001630:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001634:	a358      	add	r3, pc, #352	@ (adr r3, 8001798 <timer_callback+0x188>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7ff fa57 	bl	8000aec <__aeabi_uldivmod>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4b59      	ldr	r3, [pc, #356]	@ (80017a8 <timer_callback+0x198>)
 8001644:	601a      	str	r2, [r3, #0]
        odom_msg.header.stamp.nanosec = time_ns % 1000000000ULL;
 8001646:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800164a:	a353      	add	r3, pc, #332	@ (adr r3, 8001798 <timer_callback+0x188>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7ff fa4c 	bl	8000aec <__aeabi_uldivmod>
 8001654:	4b54      	ldr	r3, [pc, #336]	@ (80017a8 <timer_callback+0x198>)
 8001656:	605a      	str	r2, [r3, #4]

        // update data /odom
        x_pos = x_pos + 0.05;
 8001658:	4b54      	ldr	r3, [pc, #336]	@ (80017ac <timer_callback+0x19c>)
 800165a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800165e:	a350      	add	r3, pc, #320	@ (adr r3, 80017a0 <timer_callback+0x190>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7fe fe2a 	bl	80002bc <__adddf3>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	494f      	ldr	r1, [pc, #316]	@ (80017ac <timer_callback+0x19c>)
 800166e:	e9c1 2300 	strd	r2, r3, [r1]
        odom_msg.pose.pose.position.x = x_pos;
 8001672:	4b4e      	ldr	r3, [pc, #312]	@ (80017ac <timer_callback+0x19c>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	494b      	ldr	r1, [pc, #300]	@ (80017a8 <timer_callback+0x198>)
 800167a:	e9c1 2308 	strd	r2, r3, [r1, #32]
        odom_msg.pose.pose.position.y = y_pos;
 800167e:	4b4c      	ldr	r3, [pc, #304]	@ (80017b0 <timer_callback+0x1a0>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	4948      	ldr	r1, [pc, #288]	@ (80017a8 <timer_callback+0x198>)
 8001686:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        odom_msg.pose.pose.position.z = z_pos;
 800168a:	4b4a      	ldr	r3, [pc, #296]	@ (80017b4 <timer_callback+0x1a4>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	4945      	ldr	r1, [pc, #276]	@ (80017a8 <timer_callback+0x198>)
 8001692:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        odom_msg.pose.pose.orientation.w = 1.0;
 8001696:	4944      	ldr	r1, [pc, #272]	@ (80017a8 <timer_callback+0x198>)
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	4b46      	ldr	r3, [pc, #280]	@ (80017b8 <timer_callback+0x1a8>)
 800169e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        odom_msg.twist.twist.linear.x = 0.05;
 80016a2:	4941      	ldr	r1, [pc, #260]	@ (80017a8 <timer_callback+0x198>)
 80016a4:	a33e      	add	r3, pc, #248	@ (adr r3, 80017a0 <timer_callback+0x190>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178
        odom_msg.twist.twist.angular.z = 0.0;
 80016ae:	493e      	ldr	r1, [pc, #248]	@ (80017a8 <timer_callback+0x198>)
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	e9c1 2368 	strd	r2, r3, [r1, #416]	@ 0x1a0

        tf.header.stamp.sec = time_ns / 1000000000ULL;
 80016bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016c0:	a335      	add	r3, pc, #212	@ (adr r3, 8001798 <timer_callback+0x188>)
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	f7ff fa11 	bl	8000aec <__aeabi_uldivmod>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4b3b      	ldr	r3, [pc, #236]	@ (80017bc <timer_callback+0x1ac>)
 80016d0:	601a      	str	r2, [r3, #0]
        tf.header.stamp.nanosec = time_ns % 1000000000ULL;
 80016d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016d6:	a330      	add	r3, pc, #192	@ (adr r3, 8001798 <timer_callback+0x188>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	f7ff fa06 	bl	8000aec <__aeabi_uldivmod>
 80016e0:	4b36      	ldr	r3, [pc, #216]	@ (80017bc <timer_callback+0x1ac>)
 80016e2:	605a      	str	r2, [r3, #4]

        tf.transform.translation.x = x_pos;
 80016e4:	4b31      	ldr	r3, [pc, #196]	@ (80017ac <timer_callback+0x19c>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	4934      	ldr	r1, [pc, #208]	@ (80017bc <timer_callback+0x1ac>)
 80016ec:	e9c1 2308 	strd	r2, r3, [r1, #32]
        tf.transform.translation.y = y_pos;
 80016f0:	4b2f      	ldr	r3, [pc, #188]	@ (80017b0 <timer_callback+0x1a0>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	4931      	ldr	r1, [pc, #196]	@ (80017bc <timer_callback+0x1ac>)
 80016f8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        tf.transform.translation.z = z_pos;
 80016fc:	4b2d      	ldr	r3, [pc, #180]	@ (80017b4 <timer_callback+0x1a4>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	492e      	ldr	r1, [pc, #184]	@ (80017bc <timer_callback+0x1ac>)
 8001704:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

        tf.transform.rotation.x = 0.0;
 8001708:	492c      	ldr	r1, [pc, #176]	@ (80017bc <timer_callback+0x1ac>)
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        tf.transform.rotation.y = 0.0;
 8001716:	4929      	ldr	r1, [pc, #164]	@ (80017bc <timer_callback+0x1ac>)
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
        tf.transform.rotation.z = 0.0;
 8001724:	4925      	ldr	r1, [pc, #148]	@ (80017bc <timer_callback+0x1ac>)
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
        tf.transform.rotation.w = 1.0;
 8001732:	4922      	ldr	r1, [pc, #136]	@ (80017bc <timer_callback+0x1ac>)
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	4b1f      	ldr	r3, [pc, #124]	@ (80017b8 <timer_callback+0x1a8>)
 800173a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

        tf_msg.transforms.data = &tf;
 800173e:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <timer_callback+0x1b0>)
 8001740:	4a1e      	ldr	r2, [pc, #120]	@ (80017bc <timer_callback+0x1ac>)
 8001742:	601a      	str	r2, [r3, #0]
        tf_msg.transforms.size = 1;
 8001744:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <timer_callback+0x1b0>)
 8001746:	2201      	movs	r2, #1
 8001748:	605a      	str	r2, [r3, #4]
        tf_msg.transforms.capacity = 1;
 800174a:	4b1d      	ldr	r3, [pc, #116]	@ (80017c0 <timer_callback+0x1b0>)
 800174c:	2201      	movs	r2, #1
 800174e:	609a      	str	r2, [r3, #8]
		RCSOFTCHECK(rcl_publish(&odom_pub, &odom_msg, NULL));
 8001750:	2200      	movs	r2, #0
 8001752:	4915      	ldr	r1, [pc, #84]	@ (80017a8 <timer_callback+0x198>)
 8001754:	481b      	ldr	r0, [pc, #108]	@ (80017c4 <timer_callback+0x1b4>)
 8001756:	f008 f84f 	bl	80097f8 <rcl_publish>
 800175a:	6178      	str	r0, [r7, #20]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <timer_callback+0x15e>
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	f44f 71bb 	mov.w	r1, #374	@ 0x176
 8001768:	4817      	ldr	r0, [pc, #92]	@ (80017c8 <timer_callback+0x1b8>)
 800176a:	f016 f979 	bl	8017a60 <iprintf>
		RCSOFTCHECK(rcl_publish(&tf_pub, &tf_msg, NULL));
 800176e:	2200      	movs	r2, #0
 8001770:	4913      	ldr	r1, [pc, #76]	@ (80017c0 <timer_callback+0x1b0>)
 8001772:	4816      	ldr	r0, [pc, #88]	@ (80017cc <timer_callback+0x1bc>)
 8001774:	f008 f840 	bl	80097f8 <rcl_publish>
 8001778:	6138      	str	r0, [r7, #16]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <timer_callback+0x17c>
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	f240 1177 	movw	r1, #375	@ 0x177
 8001786:	4810      	ldr	r0, [pc, #64]	@ (80017c8 <timer_callback+0x1b8>)
 8001788:	f016 f96a 	bl	8017a60 <iprintf>
	}
}
 800178c:	bf00      	nop
 800178e:	3720      	adds	r7, #32
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	f3af 8000 	nop.w
 8001798:	3b9aca00 	.word	0x3b9aca00
 800179c:	00000000 	.word	0x00000000
 80017a0:	9999999a 	.word	0x9999999a
 80017a4:	3fa99999 	.word	0x3fa99999
 80017a8:	20006c80 	.word	0x20006c80
 80017ac:	20006fb0 	.word	0x20006fb0
 80017b0:	20006fb8 	.word	0x20006fb8
 80017b4:	20006fc0 	.word	0x20006fc0
 80017b8:	3ff00000 	.word	0x3ff00000
 80017bc:	20006f48 	.word	0x20006f48
 80017c0:	20006fa0 	.word	0x20006fa0
 80017c4:	20006c20 	.word	0x20006c20
 80017c8:	08018c84 	.word	0x08018c84
 80017cc:	20006c24 	.word	0x20006c24

080017d0 <StartDefaultTask>:

void StartDefaultTask(void *argument)
{
 80017d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017d4:	b0bc      	sub	sp, #240	@ 0xf0
 80017d6:	af02      	add	r7, sp, #8
 80017d8:	6378      	str	r0, [r7, #52]	@ 0x34
  /* USER CODE BEGIN 5 */

	  // micro-ROS configuration

	  rmw_uros_set_custom_transport(
 80017da:	4b8c      	ldr	r3, [pc, #560]	@ (8001a0c <StartDefaultTask+0x23c>)
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	4b8c      	ldr	r3, [pc, #560]	@ (8001a10 <StartDefaultTask+0x240>)
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	4b8c      	ldr	r3, [pc, #560]	@ (8001a14 <StartDefaultTask+0x244>)
 80017e4:	4a8c      	ldr	r2, [pc, #560]	@ (8001a18 <StartDefaultTask+0x248>)
 80017e6:	498d      	ldr	r1, [pc, #564]	@ (8001a1c <StartDefaultTask+0x24c>)
 80017e8:	2001      	movs	r0, #1
 80017ea:	f009 f839 	bl	800a860 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80017ee:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80017f2:	4618      	mov	r0, r3
 80017f4:	f008 ff5a 	bl	800a6ac <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 80017f8:	4b89      	ldr	r3, [pc, #548]	@ (8001a20 <StartDefaultTask+0x250>)
 80017fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	  freeRTOS_allocator.deallocate = microros_deallocate;
 80017fe:	4b89      	ldr	r3, [pc, #548]	@ (8001a24 <StartDefaultTask+0x254>)
 8001800:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001804:	4b88      	ldr	r3, [pc, #544]	@ (8001a28 <StartDefaultTask+0x258>)
 8001806:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800180a:	4b88      	ldr	r3, [pc, #544]	@ (8001a2c <StartDefaultTask+0x25c>)
 800180c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001810:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001814:	4618      	mov	r0, r3
 8001816:	f008 ff65 	bl	800a6e4 <rcutils_set_default_allocator>
 800181a:	4603      	mov	r3, r0
 800181c:	f083 0301 	eor.w	r3, r3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d004      	beq.n	8001830 <StartDefaultTask+0x60>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001826:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800182a:	4881      	ldr	r0, [pc, #516]	@ (8001a30 <StartDefaultTask+0x260>)
 800182c:	f016 f918 	bl	8017a60 <iprintf>
	  }

	 // Initialize micro-ROS allocator
	 allocator = rcl_get_default_allocator();
 8001830:	4c80      	ldr	r4, [pc, #512]	@ (8001a34 <StartDefaultTask+0x264>)
 8001832:	f107 0318 	add.w	r3, r7, #24
 8001836:	4618      	mov	r0, r3
 8001838:	f008 ff46 	bl	800a6c8 <rcutils_get_default_allocator>
 800183c:	4625      	mov	r5, r4
 800183e:	f107 0418 	add.w	r4, r7, #24
 8001842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	602b      	str	r3, [r5, #0]

	 // create init_options
	 rclc_support_init(&support, 0, NULL, &allocator);
 800184a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a34 <StartDefaultTask+0x264>)
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	4879      	ldr	r0, [pc, #484]	@ (8001a38 <StartDefaultTask+0x268>)
 8001852:	f008 fe03 	bl	800a45c <rclc_support_init>

	 //create node_sub
	 rclc_node_init_default(&node, "stm32_node","", &support);
 8001856:	4b78      	ldr	r3, [pc, #480]	@ (8001a38 <StartDefaultTask+0x268>)
 8001858:	4a78      	ldr	r2, [pc, #480]	@ (8001a3c <StartDefaultTask+0x26c>)
 800185a:	4979      	ldr	r1, [pc, #484]	@ (8001a40 <StartDefaultTask+0x270>)
 800185c:	4879      	ldr	r0, [pc, #484]	@ (8001a44 <StartDefaultTask+0x274>)
 800185e:	f008 fe47 	bl	800a4f0 <rclc_node_init_default>

	  // create publisher
	 rclc_publisher_init_default(
 8001862:	f007 fe05 	bl	8009470 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>
 8001866:	4602      	mov	r2, r0
 8001868:	4b77      	ldr	r3, [pc, #476]	@ (8001a48 <StartDefaultTask+0x278>)
 800186a:	4976      	ldr	r1, [pc, #472]	@ (8001a44 <StartDefaultTask+0x274>)
 800186c:	4877      	ldr	r0, [pc, #476]	@ (8001a4c <StartDefaultTask+0x27c>)
 800186e:	f008 fe7b 	bl	800a568 <rclc_publisher_init_default>
		ROSIDL_GET_MSG_TYPE_SUPPORT(nav_msgs, msg, Odometry),
	    "/odom_data");


	//create subscriber
	rclc_subscription_init_default(
 8001872:	f006 f959 	bl	8007b28 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001876:	4602      	mov	r2, r0
 8001878:	4b75      	ldr	r3, [pc, #468]	@ (8001a50 <StartDefaultTask+0x280>)
 800187a:	4972      	ldr	r1, [pc, #456]	@ (8001a44 <StartDefaultTask+0x274>)
 800187c:	4875      	ldr	r0, [pc, #468]	@ (8001a54 <StartDefaultTask+0x284>)
 800187e:	f008 fea7 	bl	800a5d0 <rclc_subscription_init_default>
		&subscriber,
		&node,
		ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
		"/cmd_vel");

	rclc_publisher_init_default(
 8001882:	f009 fe21 	bl	800b4c8 <rosidl_typesupport_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage>
 8001886:	4602      	mov	r2, r0
 8001888:	4b73      	ldr	r3, [pc, #460]	@ (8001a58 <StartDefaultTask+0x288>)
 800188a:	496e      	ldr	r1, [pc, #440]	@ (8001a44 <StartDefaultTask+0x274>)
 800188c:	4873      	ldr	r0, [pc, #460]	@ (8001a5c <StartDefaultTask+0x28c>)
 800188e:	f008 fe6b 	bl	800a568 <rclc_publisher_init_default>
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(tf2_msgs, msg, TFMessage),
	    "/tf");
	// create timer
	rcl_timer_t timer;
	const unsigned int timer_timeout = 1000;
 8001892:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001896:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	RCCHECK(rclc_timer_init_default(
 800189a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800189e:	2200      	movs	r2, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	617a      	str	r2, [r7, #20]
 80018a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018a8:	4622      	mov	r2, r4
 80018aa:	462b      	mov	r3, r5
 80018ac:	f04f 0000 	mov.w	r0, #0
 80018b0:	f04f 0100 	mov.w	r1, #0
 80018b4:	0159      	lsls	r1, r3, #5
 80018b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ba:	0150      	lsls	r0, r2, #5
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4621      	mov	r1, r4
 80018c2:	ebb2 0801 	subs.w	r8, r2, r1
 80018c6:	4629      	mov	r1, r5
 80018c8:	eb63 0901 	sbc.w	r9, r3, r1
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80018d8:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80018dc:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80018e0:	4690      	mov	r8, r2
 80018e2:	4699      	mov	r9, r3
 80018e4:	4623      	mov	r3, r4
 80018e6:	eb18 0a03 	adds.w	sl, r8, r3
 80018ea:	462b      	mov	r3, r5
 80018ec:	eb49 0b03 	adc.w	fp, r9, r3
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001900:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001904:	ebb2 010a 	subs.w	r1, r2, sl
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	eb63 030b 	sbc.w	r3, r3, fp
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001914:	4603      	mov	r3, r0
 8001916:	4622      	mov	r2, r4
 8001918:	189b      	adds	r3, r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	462b      	mov	r3, r5
 800191e:	460a      	mov	r2, r1
 8001920:	eb42 0303 	adc.w	r3, r2, r3
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800192a:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 800192e:	494c      	ldr	r1, [pc, #304]	@ (8001a60 <StartDefaultTask+0x290>)
 8001930:	9100      	str	r1, [sp, #0]
 8001932:	4941      	ldr	r1, [pc, #260]	@ (8001a38 <StartDefaultTask+0x268>)
 8001934:	f008 fe80 	bl	800a638 <rclc_timer_init_default>
 8001938:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 800193c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d007      	beq.n	8001954 <StartDefaultTask+0x184>
 8001944:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8001948:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800194c:	4845      	ldr	r0, [pc, #276]	@ (8001a64 <StartDefaultTask+0x294>)
 800194e:	f016 f887 	bl	8017a60 <iprintf>
 8001952:	e056      	b.n	8001a02 <StartDefaultTask+0x232>
		&support,
		RCL_MS_TO_NS(timer_timeout),
		timer_callback));

	// create executor
	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8001954:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001958:	4618      	mov	r0, r3
 800195a:	f008 fafb 	bl	8009f54 <rclc_executor_get_zero_initialized_executor>
	rclc_executor_init(&executor, &support.context, 2, &allocator);
 800195e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001962:	4b34      	ldr	r3, [pc, #208]	@ (8001a34 <StartDefaultTask+0x264>)
 8001964:	2202      	movs	r2, #2
 8001966:	4934      	ldr	r1, [pc, #208]	@ (8001a38 <StartDefaultTask+0x268>)
 8001968:	f008 fafe 	bl	8009f68 <rclc_executor_init>

	// add subscriber callback to the executor
	rclc_executor_add_subscription(&executor, &subscriber, &msg_cmd_vel, &cmd_vel_callback, ON_NEW_DATA);
 800196c:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001970:	2300      	movs	r3, #0
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	4b3c      	ldr	r3, [pc, #240]	@ (8001a68 <StartDefaultTask+0x298>)
 8001976:	4a3d      	ldr	r2, [pc, #244]	@ (8001a6c <StartDefaultTask+0x29c>)
 8001978:	4936      	ldr	r1, [pc, #216]	@ (8001a54 <StartDefaultTask+0x284>)
 800197a:	f008 fb61 	bl	800a040 <rclc_executor_add_subscription>
	// add time for executor
	rclc_executor_add_timer(&executor, &timer);
 800197e:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8001982:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f008 fb8d 	bl	800a0a8 <rclc_executor_add_timer>

    if (rmw_uros_sync_session(10) != RMW_RET_OK) {
 800198e:	200a      	movs	r0, #10
 8001990:	f009 f92a 	bl	800abe8 <rmw_uros_sync_session>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <StartDefaultTask+0x1d0>
        printf("Time sync failed\n");
 800199a:	4835      	ldr	r0, [pc, #212]	@ (8001a70 <StartDefaultTask+0x2a0>)
 800199c:	f016 f8c8 	bl	8017b30 <puts>
    }

    // init data odom
    odom_msg.header.frame_id.data = "odom";
 80019a0:	4b34      	ldr	r3, [pc, #208]	@ (8001a74 <StartDefaultTask+0x2a4>)
 80019a2:	4a35      	ldr	r2, [pc, #212]	@ (8001a78 <StartDefaultTask+0x2a8>)
 80019a4:	609a      	str	r2, [r3, #8]
    odom_msg.child_frame_id.data  = "base_link";
 80019a6:	4b33      	ldr	r3, [pc, #204]	@ (8001a74 <StartDefaultTask+0x2a4>)
 80019a8:	4a34      	ldr	r2, [pc, #208]	@ (8001a7c <StartDefaultTask+0x2ac>)
 80019aa:	615a      	str	r2, [r3, #20]
    odom_msg.pose.pose.position.x = x_pos;
 80019ac:	4b34      	ldr	r3, [pc, #208]	@ (8001a80 <StartDefaultTask+0x2b0>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	4930      	ldr	r1, [pc, #192]	@ (8001a74 <StartDefaultTask+0x2a4>)
 80019b4:	e9c1 2308 	strd	r2, r3, [r1, #32]
    odom_msg.pose.pose.position.y = y_pos;
 80019b8:	4b32      	ldr	r3, [pc, #200]	@ (8001a84 <StartDefaultTask+0x2b4>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	492d      	ldr	r1, [pc, #180]	@ (8001a74 <StartDefaultTask+0x2a4>)
 80019c0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    odom_msg.pose.pose.position.z = z_pos;
 80019c4:	4b30      	ldr	r3, [pc, #192]	@ (8001a88 <StartDefaultTask+0x2b8>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	492a      	ldr	r1, [pc, #168]	@ (8001a74 <StartDefaultTask+0x2a4>)
 80019cc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    odom_msg.pose.pose.orientation.w = 1.0;
 80019d0:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <StartDefaultTask+0x2a4>)
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a8c <StartDefaultTask+0x2bc>)
 80019d8:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

    tf.header.frame_id.data = "odom";
 80019dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001a90 <StartDefaultTask+0x2c0>)
 80019de:	4a26      	ldr	r2, [pc, #152]	@ (8001a78 <StartDefaultTask+0x2a8>)
 80019e0:	609a      	str	r2, [r3, #8]
    tf.child_frame_id.data = "base_link";
 80019e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a90 <StartDefaultTask+0x2c0>)
 80019e4:	4a25      	ldr	r2, [pc, #148]	@ (8001a7c <StartDefaultTask+0x2ac>)
 80019e6:	615a      	str	r2, [r3, #20]
	while(1) {
		rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 80019e8:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80019ec:	4a29      	ldr	r2, [pc, #164]	@ (8001a94 <StartDefaultTask+0x2c4>)
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	4608      	mov	r0, r1
 80019f4:	f008 fbcc 	bl	800a190 <rclc_executor_spin_some>
		vTaskDelay(pdMS_TO_TICKS(1));
 80019f8:	2001      	movs	r0, #1
 80019fa:	f004 fb6b 	bl	80060d4 <vTaskDelay>
		rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 80019fe:	bf00      	nop
 8001a00:	e7f2      	b.n	80019e8 <StartDefaultTask+0x218>
	}
  /* USER CODE END 5 */
}
 8001a02:	37e8      	adds	r7, #232	@ 0xe8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a0a:	bf00      	nop
 8001a0c:	08002229 	.word	0x08002229
 8001a10:	080021c1 	.word	0x080021c1
 8001a14:	080021a1 	.word	0x080021a1
 8001a18:	08002175 	.word	0x08002175
 8001a1c:	20006ac4 	.word	0x20006ac4
 8001a20:	08001aa5 	.word	0x08001aa5
 8001a24:	08001ae9 	.word	0x08001ae9
 8001a28:	08001b21 	.word	0x08001b21
 8001a2c:	08001b8d 	.word	0x08001b8d
 8001a30:	08018cb0 	.word	0x08018cb0
 8001a34:	20006c60 	.word	0x20006c60
 8001a38:	20006c2c 	.word	0x20006c2c
 8001a3c:	08018cd8 	.word	0x08018cd8
 8001a40:	08018cdc 	.word	0x08018cdc
 8001a44:	20006c74 	.word	0x20006c74
 8001a48:	08018ce8 	.word	0x08018ce8
 8001a4c:	20006c20 	.word	0x20006c20
 8001a50:	08018cf4 	.word	0x08018cf4
 8001a54:	20006c28 	.word	0x20006c28
 8001a58:	08018d00 	.word	0x08018d00
 8001a5c:	20006c24 	.word	0x20006c24
 8001a60:	08001611 	.word	0x08001611
 8001a64:	08018d04 	.word	0x08018d04
 8001a68:	080012b9 	.word	0x080012b9
 8001a6c:	20006bd0 	.word	0x20006bd0
 8001a70:	08018d30 	.word	0x08018d30
 8001a74:	20006c80 	.word	0x20006c80
 8001a78:	08018d44 	.word	0x08018d44
 8001a7c:	08018d4c 	.word	0x08018d4c
 8001a80:	20006fb0 	.word	0x20006fb0
 8001a84:	20006fb8 	.word	0x20006fb8
 8001a88:	20006fc0 	.word	0x20006fc0
 8001a8c:	3ff00000 	.word	0x3ff00000
 8001a90:	20006f48 	.word	0x20006f48
 8001a94:	00989680 	.word	0x00989680

08001a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9c:	b672      	cpsid	i
}
 8001a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <Error_Handler+0x8>

08001aa4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001aae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <microros_allocate+0x3c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <microros_allocate+0x3c>)
 8001abc:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <microros_allocate+0x40>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <microros_allocate+0x40>)
 8001acc:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff f9a2 	bl	8000e18 <pvPortMallocMicroROS>
 8001ad4:	4603      	mov	r3, r0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20006fc8 	.word	0x20006fc8
 8001ae4:	20006fcc 	.word	0x20006fcc

08001ae8 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00c      	beq.n	8001b12 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff fab1 	bl	8001060 <getBlockSize>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a06      	ldr	r2, [pc, #24]	@ (8001b1c <microros_deallocate+0x34>)
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <microros_deallocate+0x34>)
 8001b0a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff fa4b 	bl	8000fa8 <vPortFreeMicroROS>
  }
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20006fcc 	.word	0x20006fcc

08001b20 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001b2c:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <microros_reallocate+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	4413      	add	r3, r2
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <microros_reallocate+0x64>)
 8001b3a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <microros_reallocate+0x68>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	4413      	add	r3, r2
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b0f      	ldr	r3, [pc, #60]	@ (8001b88 <microros_reallocate+0x68>)
 8001b4a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d104      	bne.n	8001b5c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001b52:	68b8      	ldr	r0, [r7, #8]
 8001b54:	f7ff f960 	bl	8000e18 <pvPortMallocMicroROS>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	e00e      	b.n	8001b7a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f7ff fa7f 	bl	8001060 <getBlockSize>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4a08      	ldr	r2, [pc, #32]	@ (8001b88 <microros_reallocate+0x68>)
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <microros_reallocate+0x68>)
 8001b6e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f7ff fa92 	bl	800109c <pvPortReallocMicroROS>
 8001b78:	4603      	mov	r3, r0
  }
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20006fc8 	.word	0x20006fc8
 8001b88:	20006fcc 	.word	0x20006fcc

08001b8c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd4 <microros_zero_allocate+0x48>)
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <microros_zero_allocate+0x48>)
 8001baa:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	4a08      	ldr	r2, [pc, #32]	@ (8001bd8 <microros_zero_allocate+0x4c>)
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	4413      	add	r3, r2
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <microros_zero_allocate+0x4c>)
 8001bbe:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f7ff fa97 	bl	80010f6 <pvPortCallocMicroROS>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20006fc8 	.word	0x20006fc8
 8001bd8:	20006fcc 	.word	0x20006fcc
 8001bdc:	00000000 	.word	0x00000000

08001be0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001be0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001bf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bf6:	a320      	add	r3, pc, #128	@ (adr r3, 8001c78 <UTILS_NanosecondsToTimespec+0x98>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f7fe ff26 	bl	8000a4c <__aeabi_ldivmod>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001c0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c0e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001c78 <UTILS_NanosecondsToTimespec+0x98>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	f7fe ff1a 	bl	8000a4c <__aeabi_ldivmod>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	da20      	bge.n	8001c66 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	4a11      	ldr	r2, [pc, #68]	@ (8001c70 <UTILS_NanosecondsToTimespec+0x90>)
 8001c2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c2e:	1712      	asrs	r2, r2, #28
 8001c30:	17db      	asrs	r3, r3, #31
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	3301      	adds	r3, #1
 8001c36:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	6979      	ldr	r1, [r7, #20]
 8001c40:	17c8      	asrs	r0, r1, #31
 8001c42:	460c      	mov	r4, r1
 8001c44:	4605      	mov	r5, r0
 8001c46:	ebb2 0804 	subs.w	r8, r2, r4
 8001c4a:	eb63 0905 	sbc.w	r9, r3, r5
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	4906      	ldr	r1, [pc, #24]	@ (8001c74 <UTILS_NanosecondsToTimespec+0x94>)
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	441a      	add	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	609a      	str	r2, [r3, #8]
    }
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c70:	44b82fa1 	.word	0x44b82fa1
 8001c74:	3b9aca00 	.word	0x3b9aca00
 8001c78:	3b9aca00 	.word	0x3b9aca00
 8001c7c:	00000000 	.word	0x00000000

08001c80 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c84:	b08e      	sub	sp, #56	@ 0x38
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6278      	str	r0, [r7, #36]	@ 0x24
 8001c8a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001c8c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001c90:	2300      	movs	r3, #0
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001ca2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f004 fd3c 	bl	8006724 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cae:	17da      	asrs	r2, r3, #31
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	61fa      	str	r2, [r7, #28]
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	69b9      	ldr	r1, [r7, #24]
 8001cbe:	000b      	movs	r3, r1
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cc8:	2200      	movs	r2, #0
 8001cca:	461c      	mov	r4, r3
 8001ccc:	4615      	mov	r5, r2
 8001cce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001cd2:	1911      	adds	r1, r2, r4
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	416b      	adcs	r3, r5
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001cde:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001ce2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	f04f 0400 	mov.w	r4, #0
 8001cee:	f04f 0500 	mov.w	r5, #0
 8001cf2:	015d      	lsls	r5, r3, #5
 8001cf4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001cf8:	0154      	lsls	r4, r2, #5
 8001cfa:	4622      	mov	r2, r4
 8001cfc:	462b      	mov	r3, r5
 8001cfe:	ebb2 0800 	subs.w	r8, r2, r0
 8001d02:	eb63 0901 	sbc.w	r9, r3, r1
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001d12:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001d16:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001d1a:	4690      	mov	r8, r2
 8001d1c:	4699      	mov	r9, r3
 8001d1e:	eb18 0a00 	adds.w	sl, r8, r0
 8001d22:	eb49 0b01 	adc.w	fp, r9, r1
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d32:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d36:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d3a:	ebb2 040a 	subs.w	r4, r2, sl
 8001d3e:	603c      	str	r4, [r7, #0]
 8001d40:	eb63 030b 	sbc.w	r3, r3, fp
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d4a:	4623      	mov	r3, r4
 8001d4c:	181b      	adds	r3, r3, r0
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	462b      	mov	r3, r5
 8001d52:	eb41 0303 	adc.w	r3, r1, r3
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	6a3a      	ldr	r2, [r7, #32]
 8001d5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d5e:	f7ff ff3f 	bl	8001be0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	3738      	adds	r7, #56	@ 0x38
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_MspInit+0x54>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	4a11      	ldr	r2, [pc, #68]	@ (8001dc4 <HAL_MspInit+0x54>)
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d86:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <HAL_MspInit+0x54>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <HAL_MspInit+0x54>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc4 <HAL_MspInit+0x54>)
 8001d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da2:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <HAL_MspInit+0x54>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	210f      	movs	r1, #15
 8001db2:	f06f 0001 	mvn.w	r0, #1
 8001db6:	f000 fc02 	bl	80025be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	@ 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a4d      	ldr	r2, [pc, #308]	@ (8001f1c <HAL_UART_MspInit+0x154>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	f040 8093 	bne.w	8001f12 <HAL_UART_MspInit+0x14a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	4b4b      	ldr	r3, [pc, #300]	@ (8001f20 <HAL_UART_MspInit+0x158>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	4a4a      	ldr	r2, [pc, #296]	@ (8001f20 <HAL_UART_MspInit+0x158>)
 8001df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dfc:	4b48      	ldr	r3, [pc, #288]	@ (8001f20 <HAL_UART_MspInit+0x158>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	4b44      	ldr	r3, [pc, #272]	@ (8001f20 <HAL_UART_MspInit+0x158>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	4a43      	ldr	r2, [pc, #268]	@ (8001f20 <HAL_UART_MspInit+0x158>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e18:	4b41      	ldr	r3, [pc, #260]	@ (8001f20 <HAL_UART_MspInit+0x158>)
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e24:	230c      	movs	r3, #12
 8001e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e34:	2307      	movs	r3, #7
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4839      	ldr	r0, [pc, #228]	@ (8001f24 <HAL_UART_MspInit+0x15c>)
 8001e40:	f000 fff6 	bl	8002e30 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e44:	4b38      	ldr	r3, [pc, #224]	@ (8001f28 <HAL_UART_MspInit+0x160>)
 8001e46:	4a39      	ldr	r2, [pc, #228]	@ (8001f2c <HAL_UART_MspInit+0x164>)
 8001e48:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e4a:	4b37      	ldr	r3, [pc, #220]	@ (8001f28 <HAL_UART_MspInit+0x160>)
 8001e4c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e50:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e52:	4b35      	ldr	r3, [pc, #212]	@ (8001f28 <HAL_UART_MspInit+0x160>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e58:	4b33      	ldr	r3, [pc, #204]	@ (8001f28 <HAL_UART_MspInit+0x160>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e5e:	4b32      	ldr	r3, [pc, #200]	@ (8001f28 <HAL_UART_MspInit+0x160>)
 8001e60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e64:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e66:	4b30      	ldr	r3, [pc, #192]	@ (8001f28 <HAL_UART_MspInit+0x160>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f28 <HAL_UART_MspInit+0x160>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e72:	4b2d      	ldr	r3, [pc, #180]	@ (8001f28 <HAL_UART_MspInit+0x160>)
 8001e74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e78:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f28 <HAL_UART_MspInit+0x160>)
 8001e7c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e80:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e82:	4b29      	ldr	r3, [pc, #164]	@ (8001f28 <HAL_UART_MspInit+0x160>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e88:	4827      	ldr	r0, [pc, #156]	@ (8001f28 <HAL_UART_MspInit+0x160>)
 8001e8a:	f000 fbcf 	bl	800262c <HAL_DMA_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001e94:	f7ff fe00 	bl	8001a98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a23      	ldr	r2, [pc, #140]	@ (8001f28 <HAL_UART_MspInit+0x160>)
 8001e9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e9e:	4a22      	ldr	r2, [pc, #136]	@ (8001f28 <HAL_UART_MspInit+0x160>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001ea4:	4b22      	ldr	r3, [pc, #136]	@ (8001f30 <HAL_UART_MspInit+0x168>)
 8001ea6:	4a23      	ldr	r2, [pc, #140]	@ (8001f34 <HAL_UART_MspInit+0x16c>)
 8001ea8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001eaa:	4b21      	ldr	r3, [pc, #132]	@ (8001f30 <HAL_UART_MspInit+0x168>)
 8001eac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001eb0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f30 <HAL_UART_MspInit+0x168>)
 8001eb4:	2240      	movs	r2, #64	@ 0x40
 8001eb6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f30 <HAL_UART_MspInit+0x168>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <HAL_UART_MspInit+0x168>)
 8001ec0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ec4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <HAL_UART_MspInit+0x168>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ecc:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <HAL_UART_MspInit+0x168>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001ed2:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <HAL_UART_MspInit+0x168>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ed8:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <HAL_UART_MspInit+0x168>)
 8001eda:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001ede:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ee0:	4b13      	ldr	r3, [pc, #76]	@ (8001f30 <HAL_UART_MspInit+0x168>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ee6:	4812      	ldr	r0, [pc, #72]	@ (8001f30 <HAL_UART_MspInit+0x168>)
 8001ee8:	f000 fba0 	bl	800262c <HAL_DMA_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001ef2:	f7ff fdd1 	bl	8001a98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f30 <HAL_UART_MspInit+0x168>)
 8001efa:	639a      	str	r2, [r3, #56]	@ 0x38
 8001efc:	4a0c      	ldr	r2, [pc, #48]	@ (8001f30 <HAL_UART_MspInit+0x168>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2105      	movs	r1, #5
 8001f06:	2026      	movs	r0, #38	@ 0x26
 8001f08:	f000 fb59 	bl	80025be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f0c:	2026      	movs	r0, #38	@ 0x26
 8001f0e:	f000 fb72 	bl	80025f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f12:	bf00      	nop
 8001f14:	3728      	adds	r7, #40	@ 0x28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40004400 	.word	0x40004400
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	20006b0c 	.word	0x20006b0c
 8001f2c:	40026088 	.word	0x40026088
 8001f30:	20006b6c 	.word	0x20006b6c
 8001f34:	400260a0 	.word	0x400260a0

08001f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <NMI_Handler+0x4>

08001f40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <HardFault_Handler+0x4>

08001f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f4c:	bf00      	nop
 8001f4e:	e7fd      	b.n	8001f4c <MemManage_Handler+0x4>

08001f50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <BusFault_Handler+0x4>

08001f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <UsageFault_Handler+0x4>

08001f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f72:	f000 fa29 	bl	80023c8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f76:	f004 fd59 	bl	8006a2c <xTaskGetSchedulerState>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d001      	beq.n	8001f84 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f80:	f005 fb52 	bl	8007628 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f8c:	4802      	ldr	r0, [pc, #8]	@ (8001f98 <DMA1_Stream5_IRQHandler+0x10>)
 8001f8e:	f000 fce5 	bl	800295c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20006b0c 	.word	0x20006b0c

08001f9c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001fa0:	4802      	ldr	r0, [pc, #8]	@ (8001fac <DMA1_Stream6_IRQHandler+0x10>)
 8001fa2:	f000 fcdb 	bl	800295c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20006b6c 	.word	0x20006b6c

08001fb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fb4:	4802      	ldr	r0, [pc, #8]	@ (8001fc0 <USART2_IRQHandler+0x10>)
 8001fb6:	f001 febb 	bl	8003d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20006ac4 	.word	0x20006ac4

08001fc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return 1;
 8001fc8:	2301      	movs	r3, #1
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <_kill>:

int _kill(int pid, int sig)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fde:	f015 ffc9 	bl	8017f74 <__errno>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2216      	movs	r2, #22
 8001fe6:	601a      	str	r2, [r3, #0]
  return -1;
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_exit>:

void _exit (int status)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ffe7 	bl	8001fd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002006:	bf00      	nop
 8002008:	e7fd      	b.n	8002006 <_exit+0x12>

0800200a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	e00a      	b.n	8002032 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800201c:	f3af 8000 	nop.w
 8002020:	4601      	mov	r1, r0
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	60ba      	str	r2, [r7, #8]
 8002028:	b2ca      	uxtb	r2, r1
 800202a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	3301      	adds	r3, #1
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	429a      	cmp	r2, r3
 8002038:	dbf0      	blt.n	800201c <_read+0x12>
  }

  return len;
 800203a:	687b      	ldr	r3, [r7, #4]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	e009      	b.n	800206a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	60ba      	str	r2, [r7, #8]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	3301      	adds	r3, #1
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	429a      	cmp	r2, r3
 8002070:	dbf1      	blt.n	8002056 <_write+0x12>
  }
  return len;
 8002072:	687b      	ldr	r3, [r7, #4]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_close>:

int _close(int file)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020a4:	605a      	str	r2, [r3, #4]
  return 0;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <_isatty>:

int _isatty(int file)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020bc:	2301      	movs	r3, #1
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b085      	sub	sp, #20
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020ec:	4a14      	ldr	r2, [pc, #80]	@ (8002140 <_sbrk+0x5c>)
 80020ee:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <_sbrk+0x60>)
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f8:	4b13      	ldr	r3, [pc, #76]	@ (8002148 <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002100:	4b11      	ldr	r3, [pc, #68]	@ (8002148 <_sbrk+0x64>)
 8002102:	4a12      	ldr	r2, [pc, #72]	@ (800214c <_sbrk+0x68>)
 8002104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002106:	4b10      	ldr	r3, [pc, #64]	@ (8002148 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	429a      	cmp	r2, r3
 8002112:	d207      	bcs.n	8002124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002114:	f015 ff2e 	bl	8017f74 <__errno>
 8002118:	4603      	mov	r3, r0
 800211a:	220c      	movs	r2, #12
 800211c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800211e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002122:	e009      	b.n	8002138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002124:	4b08      	ldr	r3, [pc, #32]	@ (8002148 <_sbrk+0x64>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800212a:	4b07      	ldr	r3, [pc, #28]	@ (8002148 <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	4a05      	ldr	r2, [pc, #20]	@ (8002148 <_sbrk+0x64>)
 8002134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002136:	68fb      	ldr	r3, [r7, #12]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20020000 	.word	0x20020000
 8002144:	00000400 	.word	0x00000400
 8002148:	20006fd4 	.word	0x20006fd4
 800214c:	20011368 	.word	0x20011368

08002150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002154:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <SystemInit+0x20>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215a:	4a05      	ldr	r2, [pc, #20]	@ (8002170 <SystemInit+0x20>)
 800215c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002160:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002182:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002184:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002188:	4904      	ldr	r1, [pc, #16]	@ (800219c <cubemx_transport_open+0x28>)
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f001 fd2c 	bl	8003be8 <HAL_UART_Receive_DMA>
    return true;
 8002190:	2301      	movs	r3, #1
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20006fd8 	.word	0x20006fd8

080021a0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80021ae:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f001 fd3e 	bl	8003c32 <HAL_UART_DMAStop>
    return true;
 80021b6:	2301      	movs	r3, #1
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80021d4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d11c      	bne.n	800221c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f001 fc80 	bl	8003af0 <HAL_UART_Transmit_DMA>
 80021f0:	4603      	mov	r3, r0
 80021f2:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80021f4:	e002      	b.n	80021fc <cubemx_transport_write+0x3c>
            osDelay(1);
 80021f6:	2001      	movs	r0, #1
 80021f8:	f002 ffc8 	bl	800518c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d105      	bne.n	800220e <cubemx_transport_write+0x4e>
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b20      	cmp	r3, #32
 800220c:	d1f3      	bne.n	80021f6 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800220e:	7cfb      	ldrb	r3, [r7, #19]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <cubemx_transport_write+0x58>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	e002      	b.n	800221e <cubemx_transport_write+0x5e>
 8002218:	2300      	movs	r3, #0
 800221a:	e000      	b.n	800221e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 800221c:	2300      	movs	r3, #0
    }
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800223c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002242:	b672      	cpsid	i
}
 8002244:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002252:	4a1c      	ldr	r2, [pc, #112]	@ (80022c4 <cubemx_transport_read+0x9c>)
 8002254:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002256:	b662      	cpsie	i
}
 8002258:	bf00      	nop
        __enable_irq();
        ms_used++;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3301      	adds	r3, #1
 800225e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002260:	2001      	movs	r0, #1
 8002262:	f002 ff93 	bl	800518c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002266:	4b18      	ldr	r3, [pc, #96]	@ (80022c8 <cubemx_transport_read+0xa0>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b16      	ldr	r3, [pc, #88]	@ (80022c4 <cubemx_transport_read+0x9c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d103      	bne.n	800227a <cubemx_transport_read+0x52>
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	dbe3      	blt.n	8002242 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800227e:	e011      	b.n	80022a4 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002280:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <cubemx_transport_read+0xa0>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	440b      	add	r3, r1
 800228a:	4910      	ldr	r1, [pc, #64]	@ (80022cc <cubemx_transport_read+0xa4>)
 800228c:	5c8a      	ldrb	r2, [r1, r2]
 800228e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002290:	4b0d      	ldr	r3, [pc, #52]	@ (80022c8 <cubemx_transport_read+0xa0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800229a:	4a0b      	ldr	r2, [pc, #44]	@ (80022c8 <cubemx_transport_read+0xa0>)
 800229c:	6013      	str	r3, [r2, #0]
        wrote++;
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	3301      	adds	r3, #1
 80022a2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80022a4:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <cubemx_transport_read+0xa0>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <cubemx_transport_read+0x9c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d003      	beq.n	80022b8 <cubemx_transport_read+0x90>
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d3e3      	bcc.n	8002280 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80022b8:	69bb      	ldr	r3, [r7, #24]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200077dc 	.word	0x200077dc
 80022c8:	200077d8 	.word	0x200077d8
 80022cc:	20006fd8 	.word	0x20006fd8

080022d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002308 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022d4:	f7ff ff3c 	bl	8002150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022d8:	480c      	ldr	r0, [pc, #48]	@ (800230c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022da:	490d      	ldr	r1, [pc, #52]	@ (8002310 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002314 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e0:	e002      	b.n	80022e8 <LoopCopyDataInit>

080022e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e6:	3304      	adds	r3, #4

080022e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ec:	d3f9      	bcc.n	80022e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022f0:	4c0a      	ldr	r4, [pc, #40]	@ (800231c <LoopFillZerobss+0x22>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f4:	e001      	b.n	80022fa <LoopFillZerobss>

080022f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f8:	3204      	adds	r2, #4

080022fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022fc:	d3fb      	bcc.n	80022f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022fe:	f015 fe3f 	bl	8017f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002302:	f7ff f861 	bl	80013c8 <main>
  bx  lr    
 8002306:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800230c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002310:	20002e90 	.word	0x20002e90
  ldr r2, =_sidata
 8002314:	0801a704 	.word	0x0801a704
  ldr r2, =_sbss
 8002318:	20002e90 	.word	0x20002e90
  ldr r4, =_ebss
 800231c:	20011368 	.word	0x20011368

08002320 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002320:	e7fe      	b.n	8002320 <ADC_IRQHandler>
	...

08002324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002328:	4b0e      	ldr	r3, [pc, #56]	@ (8002364 <HAL_Init+0x40>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0d      	ldr	r2, [pc, #52]	@ (8002364 <HAL_Init+0x40>)
 800232e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002332:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002334:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <HAL_Init+0x40>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0a      	ldr	r2, [pc, #40]	@ (8002364 <HAL_Init+0x40>)
 800233a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800233e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002340:	4b08      	ldr	r3, [pc, #32]	@ (8002364 <HAL_Init+0x40>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a07      	ldr	r2, [pc, #28]	@ (8002364 <HAL_Init+0x40>)
 8002346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800234a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800234c:	2003      	movs	r0, #3
 800234e:	f000 f92b 	bl	80025a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002352:	200f      	movs	r0, #15
 8002354:	f000 f808 	bl	8002368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002358:	f7ff fd0a 	bl	8001d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40023c00 	.word	0x40023c00

08002368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002370:	4b12      	ldr	r3, [pc, #72]	@ (80023bc <HAL_InitTick+0x54>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b12      	ldr	r3, [pc, #72]	@ (80023c0 <HAL_InitTick+0x58>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	4619      	mov	r1, r3
 800237a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800237e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002382:	fbb2 f3f3 	udiv	r3, r2, r3
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f943 	bl	8002612 <HAL_SYSTICK_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e00e      	b.n	80023b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b0f      	cmp	r3, #15
 800239a:	d80a      	bhi.n	80023b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800239c:	2200      	movs	r2, #0
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023a4:	f000 f90b 	bl	80025be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023a8:	4a06      	ldr	r2, [pc, #24]	@ (80023c4 <HAL_InitTick+0x5c>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	e000      	b.n	80023b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000014 	.word	0x20000014
 80023c0:	2000001c 	.word	0x2000001c
 80023c4:	20000018 	.word	0x20000018

080023c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023cc:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_IncTick+0x20>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <HAL_IncTick+0x24>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	4a04      	ldr	r2, [pc, #16]	@ (80023ec <HAL_IncTick+0x24>)
 80023da:	6013      	str	r3, [r2, #0]
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	2000001c 	.word	0x2000001c
 80023ec:	200077e0 	.word	0x200077e0

080023f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return uwTick;
 80023f4:	4b03      	ldr	r3, [pc, #12]	@ (8002404 <HAL_GetTick+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	200077e0 	.word	0x200077e0

08002408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002418:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <__NVIC_SetPriorityGrouping+0x44>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002424:	4013      	ands	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002430:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002434:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243a:	4a04      	ldr	r2, [pc, #16]	@ (800244c <__NVIC_SetPriorityGrouping+0x44>)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	60d3      	str	r3, [r2, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002454:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <__NVIC_GetPriorityGrouping+0x18>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	f003 0307 	and.w	r3, r3, #7
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	2b00      	cmp	r3, #0
 800247c:	db0b      	blt.n	8002496 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	f003 021f 	and.w	r2, r3, #31
 8002484:	4907      	ldr	r1, [pc, #28]	@ (80024a4 <__NVIC_EnableIRQ+0x38>)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	2001      	movs	r0, #1
 800248e:	fa00 f202 	lsl.w	r2, r0, r2
 8002492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000e100 	.word	0xe000e100

080024a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	6039      	str	r1, [r7, #0]
 80024b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	db0a      	blt.n	80024d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	490c      	ldr	r1, [pc, #48]	@ (80024f4 <__NVIC_SetPriority+0x4c>)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	0112      	lsls	r2, r2, #4
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	440b      	add	r3, r1
 80024cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d0:	e00a      	b.n	80024e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	4908      	ldr	r1, [pc, #32]	@ (80024f8 <__NVIC_SetPriority+0x50>)
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	3b04      	subs	r3, #4
 80024e0:	0112      	lsls	r2, r2, #4
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	440b      	add	r3, r1
 80024e6:	761a      	strb	r2, [r3, #24]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000e100 	.word	0xe000e100
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b089      	sub	sp, #36	@ 0x24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f1c3 0307 	rsb	r3, r3, #7
 8002516:	2b04      	cmp	r3, #4
 8002518:	bf28      	it	cs
 800251a:	2304      	movcs	r3, #4
 800251c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3304      	adds	r3, #4
 8002522:	2b06      	cmp	r3, #6
 8002524:	d902      	bls.n	800252c <NVIC_EncodePriority+0x30>
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3b03      	subs	r3, #3
 800252a:	e000      	b.n	800252e <NVIC_EncodePriority+0x32>
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002530:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43da      	mvns	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	401a      	ands	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002544:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	fa01 f303 	lsl.w	r3, r1, r3
 800254e:	43d9      	mvns	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	4313      	orrs	r3, r2
         );
}
 8002556:	4618      	mov	r0, r3
 8002558:	3724      	adds	r7, #36	@ 0x24
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3b01      	subs	r3, #1
 8002570:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002574:	d301      	bcc.n	800257a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002576:	2301      	movs	r3, #1
 8002578:	e00f      	b.n	800259a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800257a:	4a0a      	ldr	r2, [pc, #40]	@ (80025a4 <SysTick_Config+0x40>)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3b01      	subs	r3, #1
 8002580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002582:	210f      	movs	r1, #15
 8002584:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002588:	f7ff ff8e 	bl	80024a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800258c:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <SysTick_Config+0x40>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002592:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <SysTick_Config+0x40>)
 8002594:	2207      	movs	r2, #7
 8002596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	e000e010 	.word	0xe000e010

080025a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff ff29 	bl	8002408 <__NVIC_SetPriorityGrouping>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	4603      	mov	r3, r0
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d0:	f7ff ff3e 	bl	8002450 <__NVIC_GetPriorityGrouping>
 80025d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	6978      	ldr	r0, [r7, #20]
 80025dc:	f7ff ff8e 	bl	80024fc <NVIC_EncodePriority>
 80025e0:	4602      	mov	r2, r0
 80025e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff5d 	bl	80024a8 <__NVIC_SetPriority>
}
 80025ee:	bf00      	nop
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff31 	bl	800246c <__NVIC_EnableIRQ>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ffa2 	bl	8002564 <SysTick_Config>
 8002620:	4603      	mov	r3, r0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002638:	f7ff feda 	bl	80023f0 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e099      	b.n	800277c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002668:	e00f      	b.n	800268a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800266a:	f7ff fec1 	bl	80023f0 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b05      	cmp	r3, #5
 8002676:	d908      	bls.n	800268a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2203      	movs	r2, #3
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e078      	b.n	800277c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1e8      	bne.n	800266a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	4b38      	ldr	r3, [pc, #224]	@ (8002784 <HAL_DMA_Init+0x158>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4313      	orrs	r3, r2
 80026da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d107      	bne.n	80026f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	4313      	orrs	r3, r2
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f023 0307 	bic.w	r3, r3, #7
 800270a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	2b04      	cmp	r3, #4
 800271c:	d117      	bne.n	800274e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00e      	beq.n	800274e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 fb01 	bl	8002d38 <DMA_CheckFifoParam>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2240      	movs	r2, #64	@ 0x40
 8002740:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800274a:	2301      	movs	r3, #1
 800274c:	e016      	b.n	800277c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 fab8 	bl	8002ccc <DMA_CalcBaseAndBitshift>
 800275c:	4603      	mov	r3, r0
 800275e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002764:	223f      	movs	r2, #63	@ 0x3f
 8002766:	409a      	lsls	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	f010803f 	.word	0xf010803f

08002788 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_DMA_Start_IT+0x26>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e040      	b.n	8002830 <HAL_DMA_Start_IT+0xa8>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d12f      	bne.n	8002822 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2202      	movs	r2, #2
 80027c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fa4a 	bl	8002c70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e0:	223f      	movs	r2, #63	@ 0x3f
 80027e2:	409a      	lsls	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0216 	orr.w	r2, r2, #22
 80027f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d007      	beq.n	8002810 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0208 	orr.w	r2, r2, #8
 800280e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e005      	b.n	800282e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800282a:	2302      	movs	r3, #2
 800282c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800282e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002844:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002846:	f7ff fdd3 	bl	80023f0 <HAL_GetTick>
 800284a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d008      	beq.n	800286a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2280      	movs	r2, #128	@ 0x80
 800285c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e052      	b.n	8002910 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0216 	bic.w	r2, r2, #22
 8002878:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002888:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d103      	bne.n	800289a <HAL_DMA_Abort+0x62>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002896:	2b00      	cmp	r3, #0
 8002898:	d007      	beq.n	80028aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0208 	bic.w	r2, r2, #8
 80028a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0201 	bic.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ba:	e013      	b.n	80028e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028bc:	f7ff fd98 	bl	80023f0 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b05      	cmp	r3, #5
 80028c8:	d90c      	bls.n	80028e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2220      	movs	r2, #32
 80028ce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2203      	movs	r2, #3
 80028d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e015      	b.n	8002910 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1e4      	bne.n	80028bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f6:	223f      	movs	r2, #63	@ 0x3f
 80028f8:	409a      	lsls	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d004      	beq.n	8002936 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2280      	movs	r2, #128	@ 0x80
 8002930:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e00c      	b.n	8002950 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2205      	movs	r2, #5
 800293a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0201 	bic.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002968:	4b8e      	ldr	r3, [pc, #568]	@ (8002ba4 <HAL_DMA_IRQHandler+0x248>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a8e      	ldr	r2, [pc, #568]	@ (8002ba8 <HAL_DMA_IRQHandler+0x24c>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	0a9b      	lsrs	r3, r3, #10
 8002974:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002986:	2208      	movs	r2, #8
 8002988:	409a      	lsls	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01a      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d013      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0204 	bic.w	r2, r2, #4
 80029ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b4:	2208      	movs	r2, #8
 80029b6:	409a      	lsls	r2, r3
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c0:	f043 0201 	orr.w	r2, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029cc:	2201      	movs	r2, #1
 80029ce:	409a      	lsls	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d012      	beq.n	80029fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00b      	beq.n	80029fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ea:	2201      	movs	r2, #1
 80029ec:	409a      	lsls	r2, r3
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f6:	f043 0202 	orr.w	r2, r3, #2
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a02:	2204      	movs	r2, #4
 8002a04:	409a      	lsls	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d012      	beq.n	8002a34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00b      	beq.n	8002a34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a20:	2204      	movs	r2, #4
 8002a22:	409a      	lsls	r2, r3
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2c:	f043 0204 	orr.w	r2, r3, #4
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a38:	2210      	movs	r2, #16
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d043      	beq.n	8002acc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d03c      	beq.n	8002acc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a56:	2210      	movs	r2, #16
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d018      	beq.n	8002a9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d108      	bne.n	8002a8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d024      	beq.n	8002acc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	4798      	blx	r3
 8002a8a:	e01f      	b.n	8002acc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01b      	beq.n	8002acc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
 8002a9c:	e016      	b.n	8002acc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d107      	bne.n	8002abc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0208 	bic.w	r2, r2, #8
 8002aba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 808f 	beq.w	8002bfc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8087 	beq.w	8002bfc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af2:	2220      	movs	r2, #32
 8002af4:	409a      	lsls	r2, r3
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d136      	bne.n	8002b74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0216 	bic.w	r2, r2, #22
 8002b14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695a      	ldr	r2, [r3, #20]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d103      	bne.n	8002b36 <HAL_DMA_IRQHandler+0x1da>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0208 	bic.w	r2, r2, #8
 8002b44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4a:	223f      	movs	r2, #63	@ 0x3f
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d07e      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	4798      	blx	r3
        }
        return;
 8002b72:	e079      	b.n	8002c68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01d      	beq.n	8002bbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10d      	bne.n	8002bac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d031      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	4798      	blx	r3
 8002ba0:	e02c      	b.n	8002bfc <HAL_DMA_IRQHandler+0x2a0>
 8002ba2:	bf00      	nop
 8002ba4:	20000014 	.word	0x20000014
 8002ba8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d023      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	4798      	blx	r3
 8002bbc:	e01e      	b.n	8002bfc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10f      	bne.n	8002bec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0210 	bic.w	r2, r2, #16
 8002bda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d032      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d022      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2205      	movs	r2, #5
 8002c14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d307      	bcc.n	8002c44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f2      	bne.n	8002c28 <HAL_DMA_IRQHandler+0x2cc>
 8002c42:	e000      	b.n	8002c46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
 8002c66:	e000      	b.n	8002c6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c68:	bf00      	nop
    }
  }
}
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b40      	cmp	r3, #64	@ 0x40
 8002c9c:	d108      	bne.n	8002cb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cae:	e007      	b.n	8002cc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	60da      	str	r2, [r3, #12]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	3b10      	subs	r3, #16
 8002cdc:	4a14      	ldr	r2, [pc, #80]	@ (8002d30 <DMA_CalcBaseAndBitshift+0x64>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	091b      	lsrs	r3, r3, #4
 8002ce4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ce6:	4a13      	ldr	r2, [pc, #76]	@ (8002d34 <DMA_CalcBaseAndBitshift+0x68>)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4413      	add	r3, r2
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d909      	bls.n	8002d0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002d02:	f023 0303 	bic.w	r3, r3, #3
 8002d06:	1d1a      	adds	r2, r3, #4
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d0c:	e007      	b.n	8002d1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002d16:	f023 0303 	bic.w	r3, r3, #3
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	aaaaaaab 	.word	0xaaaaaaab
 8002d34:	08018dcc 	.word	0x08018dcc

08002d38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d11f      	bne.n	8002d92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d856      	bhi.n	8002e06 <DMA_CheckFifoParam+0xce>
 8002d58:	a201      	add	r2, pc, #4	@ (adr r2, 8002d60 <DMA_CheckFifoParam+0x28>)
 8002d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5e:	bf00      	nop
 8002d60:	08002d71 	.word	0x08002d71
 8002d64:	08002d83 	.word	0x08002d83
 8002d68:	08002d71 	.word	0x08002d71
 8002d6c:	08002e07 	.word	0x08002e07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d046      	beq.n	8002e0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d80:	e043      	b.n	8002e0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d86:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d8a:	d140      	bne.n	8002e0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d90:	e03d      	b.n	8002e0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d9a:	d121      	bne.n	8002de0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d837      	bhi.n	8002e12 <DMA_CheckFifoParam+0xda>
 8002da2:	a201      	add	r2, pc, #4	@ (adr r2, 8002da8 <DMA_CheckFifoParam+0x70>)
 8002da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da8:	08002db9 	.word	0x08002db9
 8002dac:	08002dbf 	.word	0x08002dbf
 8002db0:	08002db9 	.word	0x08002db9
 8002db4:	08002dd1 	.word	0x08002dd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
      break;
 8002dbc:	e030      	b.n	8002e20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d025      	beq.n	8002e16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dce:	e022      	b.n	8002e16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002dd8:	d11f      	bne.n	8002e1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dde:	e01c      	b.n	8002e1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d903      	bls.n	8002dee <DMA_CheckFifoParam+0xb6>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d003      	beq.n	8002df4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002dec:	e018      	b.n	8002e20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
      break;
 8002df2:	e015      	b.n	8002e20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00e      	beq.n	8002e1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
      break;
 8002e04:	e00b      	b.n	8002e1e <DMA_CheckFifoParam+0xe6>
      break;
 8002e06:	bf00      	nop
 8002e08:	e00a      	b.n	8002e20 <DMA_CheckFifoParam+0xe8>
      break;
 8002e0a:	bf00      	nop
 8002e0c:	e008      	b.n	8002e20 <DMA_CheckFifoParam+0xe8>
      break;
 8002e0e:	bf00      	nop
 8002e10:	e006      	b.n	8002e20 <DMA_CheckFifoParam+0xe8>
      break;
 8002e12:	bf00      	nop
 8002e14:	e004      	b.n	8002e20 <DMA_CheckFifoParam+0xe8>
      break;
 8002e16:	bf00      	nop
 8002e18:	e002      	b.n	8002e20 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e1a:	bf00      	nop
 8002e1c:	e000      	b.n	8002e20 <DMA_CheckFifoParam+0xe8>
      break;
 8002e1e:	bf00      	nop
    }
  } 
  
  return status; 
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop

08002e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b089      	sub	sp, #36	@ 0x24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	e159      	b.n	8003100 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	f040 8148 	bne.w	80030fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d005      	beq.n	8002e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d130      	bne.n	8002ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb8:	2201      	movs	r2, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 0201 	and.w	r2, r3, #1
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d017      	beq.n	8002f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	2203      	movs	r2, #3
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d123      	bne.n	8002f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	08da      	lsrs	r2, r3, #3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3208      	adds	r2, #8
 8002f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	220f      	movs	r2, #15
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	08da      	lsrs	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3208      	adds	r2, #8
 8002f6e:	69b9      	ldr	r1, [r7, #24]
 8002f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	2203      	movs	r2, #3
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0203 	and.w	r2, r3, #3
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80a2 	beq.w	80030fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	4b57      	ldr	r3, [pc, #348]	@ (8003118 <HAL_GPIO_Init+0x2e8>)
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fbe:	4a56      	ldr	r2, [pc, #344]	@ (8003118 <HAL_GPIO_Init+0x2e8>)
 8002fc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fc6:	4b54      	ldr	r3, [pc, #336]	@ (8003118 <HAL_GPIO_Init+0x2e8>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fd2:	4a52      	ldr	r2, [pc, #328]	@ (800311c <HAL_GPIO_Init+0x2ec>)
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	3302      	adds	r3, #2
 8002fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	220f      	movs	r2, #15
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a49      	ldr	r2, [pc, #292]	@ (8003120 <HAL_GPIO_Init+0x2f0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d019      	beq.n	8003032 <HAL_GPIO_Init+0x202>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a48      	ldr	r2, [pc, #288]	@ (8003124 <HAL_GPIO_Init+0x2f4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_GPIO_Init+0x1fe>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a47      	ldr	r2, [pc, #284]	@ (8003128 <HAL_GPIO_Init+0x2f8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00d      	beq.n	800302a <HAL_GPIO_Init+0x1fa>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a46      	ldr	r2, [pc, #280]	@ (800312c <HAL_GPIO_Init+0x2fc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d007      	beq.n	8003026 <HAL_GPIO_Init+0x1f6>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a45      	ldr	r2, [pc, #276]	@ (8003130 <HAL_GPIO_Init+0x300>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d101      	bne.n	8003022 <HAL_GPIO_Init+0x1f2>
 800301e:	2304      	movs	r3, #4
 8003020:	e008      	b.n	8003034 <HAL_GPIO_Init+0x204>
 8003022:	2307      	movs	r3, #7
 8003024:	e006      	b.n	8003034 <HAL_GPIO_Init+0x204>
 8003026:	2303      	movs	r3, #3
 8003028:	e004      	b.n	8003034 <HAL_GPIO_Init+0x204>
 800302a:	2302      	movs	r3, #2
 800302c:	e002      	b.n	8003034 <HAL_GPIO_Init+0x204>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <HAL_GPIO_Init+0x204>
 8003032:	2300      	movs	r3, #0
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	f002 0203 	and.w	r2, r2, #3
 800303a:	0092      	lsls	r2, r2, #2
 800303c:	4093      	lsls	r3, r2
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003044:	4935      	ldr	r1, [pc, #212]	@ (800311c <HAL_GPIO_Init+0x2ec>)
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	089b      	lsrs	r3, r3, #2
 800304a:	3302      	adds	r3, #2
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003052:	4b38      	ldr	r3, [pc, #224]	@ (8003134 <HAL_GPIO_Init+0x304>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003076:	4a2f      	ldr	r2, [pc, #188]	@ (8003134 <HAL_GPIO_Init+0x304>)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800307c:	4b2d      	ldr	r3, [pc, #180]	@ (8003134 <HAL_GPIO_Init+0x304>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030a0:	4a24      	ldr	r2, [pc, #144]	@ (8003134 <HAL_GPIO_Init+0x304>)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030a6:	4b23      	ldr	r3, [pc, #140]	@ (8003134 <HAL_GPIO_Init+0x304>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003134 <HAL_GPIO_Init+0x304>)
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030d0:	4b18      	ldr	r3, [pc, #96]	@ (8003134 <HAL_GPIO_Init+0x304>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003134 <HAL_GPIO_Init+0x304>)
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3301      	adds	r3, #1
 80030fe:	61fb      	str	r3, [r7, #28]
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	2b0f      	cmp	r3, #15
 8003104:	f67f aea2 	bls.w	8002e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	3724      	adds	r7, #36	@ 0x24
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800
 800311c:	40013800 	.word	0x40013800
 8003120:	40020000 	.word	0x40020000
 8003124:	40020400 	.word	0x40020400
 8003128:	40020800 	.word	0x40020800
 800312c:	40020c00 	.word	0x40020c00
 8003130:	40021000 	.word	0x40021000
 8003134:	40013c00 	.word	0x40013c00

08003138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	807b      	strh	r3, [r7, #2]
 8003144:	4613      	mov	r3, r2
 8003146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003148:	787b      	ldrb	r3, [r7, #1]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800314e:	887a      	ldrh	r2, [r7, #2]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003154:	e003      	b.n	800315e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003156:	887b      	ldrh	r3, [r7, #2]
 8003158:	041a      	lsls	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	619a      	str	r2, [r3, #24]
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800316a:	b480      	push	{r7}
 800316c:	b085      	sub	sp, #20
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	460b      	mov	r3, r1
 8003174:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800317c:	887a      	ldrh	r2, [r7, #2]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4013      	ands	r3, r2
 8003182:	041a      	lsls	r2, r3, #16
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	43d9      	mvns	r1, r3
 8003188:	887b      	ldrh	r3, [r7, #2]
 800318a:	400b      	ands	r3, r1
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	619a      	str	r2, [r3, #24]
}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e267      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d075      	beq.n	80032aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031be:	4b88      	ldr	r3, [pc, #544]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d00c      	beq.n	80031e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ca:	4b85      	ldr	r3, [pc, #532]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d112      	bne.n	80031fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d6:	4b82      	ldr	r3, [pc, #520]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031e2:	d10b      	bne.n	80031fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e4:	4b7e      	ldr	r3, [pc, #504]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d05b      	beq.n	80032a8 <HAL_RCC_OscConfig+0x108>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d157      	bne.n	80032a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e242      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003204:	d106      	bne.n	8003214 <HAL_RCC_OscConfig+0x74>
 8003206:	4b76      	ldr	r3, [pc, #472]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a75      	ldr	r2, [pc, #468]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 800320c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e01d      	b.n	8003250 <HAL_RCC_OscConfig+0xb0>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x98>
 800321e:	4b70      	ldr	r3, [pc, #448]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a6f      	ldr	r2, [pc, #444]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b6d      	ldr	r3, [pc, #436]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6c      	ldr	r2, [pc, #432]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e00b      	b.n	8003250 <HAL_RCC_OscConfig+0xb0>
 8003238:	4b69      	ldr	r3, [pc, #420]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a68      	ldr	r2, [pc, #416]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 800323e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	4b66      	ldr	r3, [pc, #408]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a65      	ldr	r2, [pc, #404]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 800324a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800324e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d013      	beq.n	8003280 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7ff f8ca 	bl	80023f0 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003260:	f7ff f8c6 	bl	80023f0 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	@ 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e207      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	4b5b      	ldr	r3, [pc, #364]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0xc0>
 800327e:	e014      	b.n	80032aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7ff f8b6 	bl	80023f0 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003288:	f7ff f8b2 	bl	80023f0 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	@ 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e1f3      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329a:	4b51      	ldr	r3, [pc, #324]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0xe8>
 80032a6:	e000      	b.n	80032aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d063      	beq.n	800337e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032b6:	4b4a      	ldr	r3, [pc, #296]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032c2:	4b47      	ldr	r3, [pc, #284]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d11c      	bne.n	8003308 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ce:	4b44      	ldr	r3, [pc, #272]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d116      	bne.n	8003308 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032da:	4b41      	ldr	r3, [pc, #260]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_RCC_OscConfig+0x152>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d001      	beq.n	80032f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e1c7      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f2:	4b3b      	ldr	r3, [pc, #236]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4937      	ldr	r1, [pc, #220]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003306:	e03a      	b.n	800337e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d020      	beq.n	8003352 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003310:	4b34      	ldr	r3, [pc, #208]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003312:	2201      	movs	r2, #1
 8003314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003316:	f7ff f86b 	bl	80023f0 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331e:	f7ff f867 	bl	80023f0 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e1a8      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003330:	4b2b      	ldr	r3, [pc, #172]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333c:	4b28      	ldr	r3, [pc, #160]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4925      	ldr	r1, [pc, #148]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 800334c:	4313      	orrs	r3, r2
 800334e:	600b      	str	r3, [r1, #0]
 8003350:	e015      	b.n	800337e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003352:	4b24      	ldr	r3, [pc, #144]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7ff f84a 	bl	80023f0 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003360:	f7ff f846 	bl	80023f0 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e187      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003372:	4b1b      	ldr	r3, [pc, #108]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d036      	beq.n	80033f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d016      	beq.n	80033c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003392:	4b15      	ldr	r3, [pc, #84]	@ (80033e8 <HAL_RCC_OscConfig+0x248>)
 8003394:	2201      	movs	r2, #1
 8003396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003398:	f7ff f82a 	bl	80023f0 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a0:	f7ff f826 	bl	80023f0 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e167      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b2:	4b0b      	ldr	r3, [pc, #44]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80033b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x200>
 80033be:	e01b      	b.n	80033f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c0:	4b09      	ldr	r3, [pc, #36]	@ (80033e8 <HAL_RCC_OscConfig+0x248>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c6:	f7ff f813 	bl	80023f0 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033cc:	e00e      	b.n	80033ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ce:	f7ff f80f 	bl	80023f0 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d907      	bls.n	80033ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e150      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
 80033e0:	40023800 	.word	0x40023800
 80033e4:	42470000 	.word	0x42470000
 80033e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ec:	4b88      	ldr	r3, [pc, #544]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80033ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1ea      	bne.n	80033ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8097 	beq.w	8003534 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003406:	2300      	movs	r3, #0
 8003408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800340a:	4b81      	ldr	r3, [pc, #516]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10f      	bne.n	8003436 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	4b7d      	ldr	r3, [pc, #500]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	4a7c      	ldr	r2, [pc, #496]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 8003420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003424:	6413      	str	r3, [r2, #64]	@ 0x40
 8003426:	4b7a      	ldr	r3, [pc, #488]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003432:	2301      	movs	r3, #1
 8003434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003436:	4b77      	ldr	r3, [pc, #476]	@ (8003614 <HAL_RCC_OscConfig+0x474>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d118      	bne.n	8003474 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003442:	4b74      	ldr	r3, [pc, #464]	@ (8003614 <HAL_RCC_OscConfig+0x474>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a73      	ldr	r2, [pc, #460]	@ (8003614 <HAL_RCC_OscConfig+0x474>)
 8003448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800344c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344e:	f7fe ffcf 	bl	80023f0 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003456:	f7fe ffcb 	bl	80023f0 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e10c      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	4b6a      	ldr	r3, [pc, #424]	@ (8003614 <HAL_RCC_OscConfig+0x474>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d106      	bne.n	800348a <HAL_RCC_OscConfig+0x2ea>
 800347c:	4b64      	ldr	r3, [pc, #400]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 800347e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003480:	4a63      	ldr	r2, [pc, #396]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	6713      	str	r3, [r2, #112]	@ 0x70
 8003488:	e01c      	b.n	80034c4 <HAL_RCC_OscConfig+0x324>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b05      	cmp	r3, #5
 8003490:	d10c      	bne.n	80034ac <HAL_RCC_OscConfig+0x30c>
 8003492:	4b5f      	ldr	r3, [pc, #380]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003496:	4a5e      	ldr	r2, [pc, #376]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 8003498:	f043 0304 	orr.w	r3, r3, #4
 800349c:	6713      	str	r3, [r2, #112]	@ 0x70
 800349e:	4b5c      	ldr	r3, [pc, #368]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034aa:	e00b      	b.n	80034c4 <HAL_RCC_OscConfig+0x324>
 80034ac:	4b58      	ldr	r3, [pc, #352]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b0:	4a57      	ldr	r2, [pc, #348]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034b8:	4b55      	ldr	r3, [pc, #340]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80034ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034bc:	4a54      	ldr	r2, [pc, #336]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80034be:	f023 0304 	bic.w	r3, r3, #4
 80034c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d015      	beq.n	80034f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034cc:	f7fe ff90 	bl	80023f0 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d2:	e00a      	b.n	80034ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d4:	f7fe ff8c 	bl	80023f0 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e0cb      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ea:	4b49      	ldr	r3, [pc, #292]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0ee      	beq.n	80034d4 <HAL_RCC_OscConfig+0x334>
 80034f6:	e014      	b.n	8003522 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f8:	f7fe ff7a 	bl	80023f0 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003500:	f7fe ff76 	bl	80023f0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e0b5      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003516:	4b3e      	ldr	r3, [pc, #248]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1ee      	bne.n	8003500 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d105      	bne.n	8003534 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003528:	4b39      	ldr	r3, [pc, #228]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 800352a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352c:	4a38      	ldr	r2, [pc, #224]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 800352e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003532:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80a1 	beq.w	8003680 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800353e:	4b34      	ldr	r3, [pc, #208]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b08      	cmp	r3, #8
 8003548:	d05c      	beq.n	8003604 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d141      	bne.n	80035d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003552:	4b31      	ldr	r3, [pc, #196]	@ (8003618 <HAL_RCC_OscConfig+0x478>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fe ff4a 	bl	80023f0 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003560:	f7fe ff46 	bl	80023f0 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e087      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003572:	4b27      	ldr	r3, [pc, #156]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69da      	ldr	r2, [r3, #28]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	019b      	lsls	r3, r3, #6
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	3b01      	subs	r3, #1
 8003598:	041b      	lsls	r3, r3, #16
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	061b      	lsls	r3, r3, #24
 80035a2:	491b      	ldr	r1, [pc, #108]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003618 <HAL_RCC_OscConfig+0x478>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ae:	f7fe ff1f 	bl	80023f0 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b6:	f7fe ff1b 	bl	80023f0 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e05c      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c8:	4b11      	ldr	r3, [pc, #68]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCC_OscConfig+0x416>
 80035d4:	e054      	b.n	8003680 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d6:	4b10      	ldr	r3, [pc, #64]	@ (8003618 <HAL_RCC_OscConfig+0x478>)
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035dc:	f7fe ff08 	bl	80023f0 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e4:	f7fe ff04 	bl	80023f0 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e045      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f6:	4b06      	ldr	r3, [pc, #24]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x444>
 8003602:	e03d      	b.n	8003680 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d107      	bne.n	800361c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e038      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
 8003610:	40023800 	.word	0x40023800
 8003614:	40007000 	.word	0x40007000
 8003618:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800361c:	4b1b      	ldr	r3, [pc, #108]	@ (800368c <HAL_RCC_OscConfig+0x4ec>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d028      	beq.n	800367c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d121      	bne.n	800367c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	429a      	cmp	r2, r3
 8003644:	d11a      	bne.n	800367c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800364c:	4013      	ands	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003652:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003654:	4293      	cmp	r3, r2
 8003656:	d111      	bne.n	800367c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	3b01      	subs	r3, #1
 8003666:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d107      	bne.n	800367c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003676:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800

08003690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0cc      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a4:	4b68      	ldr	r3, [pc, #416]	@ (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d90c      	bls.n	80036cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b65      	ldr	r3, [pc, #404]	@ (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b63      	ldr	r3, [pc, #396]	@ (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0b8      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d020      	beq.n	800371a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e4:	4b59      	ldr	r3, [pc, #356]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4a58      	ldr	r2, [pc, #352]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036fc:	4b53      	ldr	r3, [pc, #332]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	4a52      	ldr	r2, [pc, #328]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003708:	4b50      	ldr	r3, [pc, #320]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	494d      	ldr	r1, [pc, #308]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d044      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d107      	bne.n	800373e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372e:	4b47      	ldr	r3, [pc, #284]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d119      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e07f      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d003      	beq.n	800374e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800374a:	2b03      	cmp	r3, #3
 800374c:	d107      	bne.n	800375e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374e:	4b3f      	ldr	r3, [pc, #252]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e06f      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375e:	4b3b      	ldr	r3, [pc, #236]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e067      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376e:	4b37      	ldr	r3, [pc, #220]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f023 0203 	bic.w	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4934      	ldr	r1, [pc, #208]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	4313      	orrs	r3, r2
 800377e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003780:	f7fe fe36 	bl	80023f0 <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	e00a      	b.n	800379e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003788:	f7fe fe32 	bl	80023f0 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e04f      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	4b2b      	ldr	r3, [pc, #172]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 020c 	and.w	r2, r3, #12
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d1eb      	bne.n	8003788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037b0:	4b25      	ldr	r3, [pc, #148]	@ (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d20c      	bcs.n	80037d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b22      	ldr	r3, [pc, #136]	@ (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b20      	ldr	r3, [pc, #128]	@ (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e032      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e4:	4b19      	ldr	r3, [pc, #100]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4916      	ldr	r1, [pc, #88]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003802:	4b12      	ldr	r3, [pc, #72]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	490e      	ldr	r1, [pc, #56]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003816:	f000 f821 	bl	800385c <HAL_RCC_GetSysClockFreq>
 800381a:	4602      	mov	r2, r0
 800381c:	4b0b      	ldr	r3, [pc, #44]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	490a      	ldr	r1, [pc, #40]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 8003828:	5ccb      	ldrb	r3, [r1, r3]
 800382a:	fa22 f303 	lsr.w	r3, r2, r3
 800382e:	4a09      	ldr	r2, [pc, #36]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003832:	4b09      	ldr	r3, [pc, #36]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fd96 	bl	8002368 <HAL_InitTick>

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40023c00 	.word	0x40023c00
 800384c:	40023800 	.word	0x40023800
 8003850:	08018db4 	.word	0x08018db4
 8003854:	20000014 	.word	0x20000014
 8003858:	20000018 	.word	0x20000018

0800385c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800385c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003860:	b090      	sub	sp, #64	@ 0x40
 8003862:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003874:	4b59      	ldr	r3, [pc, #356]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b08      	cmp	r3, #8
 800387e:	d00d      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0x40>
 8003880:	2b08      	cmp	r3, #8
 8003882:	f200 80a1 	bhi.w	80039c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0x34>
 800388a:	2b04      	cmp	r3, #4
 800388c:	d003      	beq.n	8003896 <HAL_RCC_GetSysClockFreq+0x3a>
 800388e:	e09b      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003890:	4b53      	ldr	r3, [pc, #332]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003892:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003894:	e09b      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003896:	4b53      	ldr	r3, [pc, #332]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003898:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800389a:	e098      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800389c:	4b4f      	ldr	r3, [pc, #316]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x180>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038a6:	4b4d      	ldr	r3, [pc, #308]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x180>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d028      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b2:	4b4a      	ldr	r3, [pc, #296]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x180>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	099b      	lsrs	r3, r3, #6
 80038b8:	2200      	movs	r2, #0
 80038ba:	623b      	str	r3, [r7, #32]
 80038bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038c4:	2100      	movs	r1, #0
 80038c6:	4b47      	ldr	r3, [pc, #284]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80038c8:	fb03 f201 	mul.w	r2, r3, r1
 80038cc:	2300      	movs	r3, #0
 80038ce:	fb00 f303 	mul.w	r3, r0, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	4a43      	ldr	r2, [pc, #268]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80038d6:	fba0 1202 	umull	r1, r2, r0, r2
 80038da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038dc:	460a      	mov	r2, r1
 80038de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80038e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038e2:	4413      	add	r3, r2
 80038e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e8:	2200      	movs	r2, #0
 80038ea:	61bb      	str	r3, [r7, #24]
 80038ec:	61fa      	str	r2, [r7, #28]
 80038ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80038f6:	f7fd f8f9 	bl	8000aec <__aeabi_uldivmod>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4613      	mov	r3, r2
 8003900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003902:	e053      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003904:	4b35      	ldr	r3, [pc, #212]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	099b      	lsrs	r3, r3, #6
 800390a:	2200      	movs	r2, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	617a      	str	r2, [r7, #20]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003916:	f04f 0b00 	mov.w	fp, #0
 800391a:	4652      	mov	r2, sl
 800391c:	465b      	mov	r3, fp
 800391e:	f04f 0000 	mov.w	r0, #0
 8003922:	f04f 0100 	mov.w	r1, #0
 8003926:	0159      	lsls	r1, r3, #5
 8003928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800392c:	0150      	lsls	r0, r2, #5
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	ebb2 080a 	subs.w	r8, r2, sl
 8003936:	eb63 090b 	sbc.w	r9, r3, fp
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003946:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800394a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800394e:	ebb2 0408 	subs.w	r4, r2, r8
 8003952:	eb63 0509 	sbc.w	r5, r3, r9
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	00eb      	lsls	r3, r5, #3
 8003960:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003964:	00e2      	lsls	r2, r4, #3
 8003966:	4614      	mov	r4, r2
 8003968:	461d      	mov	r5, r3
 800396a:	eb14 030a 	adds.w	r3, r4, sl
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	eb45 030b 	adc.w	r3, r5, fp
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003982:	4629      	mov	r1, r5
 8003984:	028b      	lsls	r3, r1, #10
 8003986:	4621      	mov	r1, r4
 8003988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800398c:	4621      	mov	r1, r4
 800398e:	028a      	lsls	r2, r1, #10
 8003990:	4610      	mov	r0, r2
 8003992:	4619      	mov	r1, r3
 8003994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003996:	2200      	movs	r2, #0
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	60fa      	str	r2, [r7, #12]
 800399c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039a0:	f7fd f8a4 	bl	8000aec <__aeabi_uldivmod>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4613      	mov	r3, r2
 80039aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039ac:	4b0b      	ldr	r3, [pc, #44]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x180>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	3301      	adds	r3, #1
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80039bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039c6:	e002      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039c8:	4b05      	ldr	r3, [pc, #20]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80039ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3740      	adds	r7, #64	@ 0x40
 80039d4:	46bd      	mov	sp, r7
 80039d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800
 80039e0:	00f42400 	.word	0x00f42400
 80039e4:	017d7840 	.word	0x017d7840

080039e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039ec:	4b03      	ldr	r3, [pc, #12]	@ (80039fc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ee:	681b      	ldr	r3, [r3, #0]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	20000014 	.word	0x20000014

08003a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a04:	f7ff fff0 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4b05      	ldr	r3, [pc, #20]	@ (8003a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	0a9b      	lsrs	r3, r3, #10
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	4903      	ldr	r1, [pc, #12]	@ (8003a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a16:	5ccb      	ldrb	r3, [r1, r3]
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40023800 	.word	0x40023800
 8003a24:	08018dc4 	.word	0x08018dc4

08003a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a2c:	f7ff ffdc 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b05      	ldr	r3, [pc, #20]	@ (8003a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	0b5b      	lsrs	r3, r3, #13
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4903      	ldr	r1, [pc, #12]	@ (8003a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	08018dc4 	.word	0x08018dc4

08003a50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e042      	b.n	8003ae8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fe f9a6 	bl	8001dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2224      	movs	r2, #36	@ 0x24
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fff5 	bl	8004a84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003aa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695a      	ldr	r2, [r3, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ab8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ac8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08c      	sub	sp, #48	@ 0x30
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	4613      	mov	r3, r2
 8003afc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	d162      	bne.n	8003bd0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_UART_Transmit_DMA+0x26>
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e05b      	b.n	8003bd2 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	88fa      	ldrh	r2, [r7, #6]
 8003b2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2221      	movs	r2, #33	@ 0x21
 8003b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3e:	4a27      	ldr	r2, [pc, #156]	@ (8003bdc <HAL_UART_Transmit_DMA+0xec>)
 8003b40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b46:	4a26      	ldr	r2, [pc, #152]	@ (8003be0 <HAL_UART_Transmit_DMA+0xf0>)
 8003b48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4e:	4a25      	ldr	r2, [pc, #148]	@ (8003be4 <HAL_UART_Transmit_DMA+0xf4>)
 8003b50:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b56:	2200      	movs	r2, #0
 8003b58:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003b5a:	f107 0308 	add.w	r3, r7, #8
 8003b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b66:	6819      	ldr	r1, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	461a      	mov	r2, r3
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	f7fe fe09 	bl	8002788 <HAL_DMA_Start_IT>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2210      	movs	r2, #16
 8003b80:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e021      	b.n	8003bd2 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b96:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3314      	adds	r3, #20
 8003b9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3314      	adds	r3, #20
 8003bb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bb8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003bba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbc:	6a39      	ldr	r1, [r7, #32]
 8003bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc0:	e841 2300 	strex	r3, r2, [r1]
 8003bc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e5      	bne.n	8003b98 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e000      	b.n	8003bd2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3730      	adds	r7, #48	@ 0x30
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	08004301 	.word	0x08004301
 8003be0:	0800439b 	.word	0x0800439b
 8003be4:	0800451f 	.word	0x0800451f

08003be8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d112      	bne.n	8003c28 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <HAL_UART_Receive_DMA+0x26>
 8003c08:	88fb      	ldrh	r3, [r7, #6]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e00b      	b.n	8003c2a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 fcc8 	bl	80045b4 <UART_Start_Receive_DMA>
 8003c24:	4603      	mov	r3, r0
 8003c26:	e000      	b.n	8003c2a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b090      	sub	sp, #64	@ 0x40
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c48:	2b80      	cmp	r3, #128	@ 0x80
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b21      	cmp	r3, #33	@ 0x21
 8003c5e:	d128      	bne.n	8003cb2 <HAL_UART_DMAStop+0x80>
 8003c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d025      	beq.n	8003cb2 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3314      	adds	r3, #20
 8003c6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	623b      	str	r3, [r7, #32]
   return(result);
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3314      	adds	r3, #20
 8003c84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c86:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c8e:	e841 2300 	strex	r3, r2, [r1]
 8003c92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1e5      	bne.n	8003c66 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d004      	beq.n	8003cac <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe fdc6 	bl	8002838 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fd27 	bl	8004700 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cbc:	2b40      	cmp	r3, #64	@ 0x40
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b22      	cmp	r3, #34	@ 0x22
 8003cd2:	d128      	bne.n	8003d26 <HAL_UART_DMAStop+0xf4>
 8003cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d025      	beq.n	8003d26 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3314      	adds	r3, #20
 8003ce0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3314      	adds	r3, #20
 8003cf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cfa:	61fa      	str	r2, [r7, #28]
 8003cfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	69b9      	ldr	r1, [r7, #24]
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	617b      	str	r3, [r7, #20]
   return(result);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e5      	bne.n	8003cda <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d004      	beq.n	8003d20 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fe fd8c 	bl	8002838 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fd15 	bl	8004750 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3740      	adds	r7, #64	@ 0x40
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b0ba      	sub	sp, #232	@ 0xe8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003d6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10f      	bne.n	8003d96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d7a:	f003 0320 	and.w	r3, r3, #32
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <HAL_UART_IRQHandler+0x66>
 8003d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fdba 	bl	8004908 <UART_Receive_IT>
      return;
 8003d94:	e273      	b.n	800427e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 80de 	beq.w	8003f5c <HAL_UART_IRQHandler+0x22c>
 8003da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d106      	bne.n	8003dba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003db0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 80d1 	beq.w	8003f5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00b      	beq.n	8003dde <HAL_UART_IRQHandler+0xae>
 8003dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d005      	beq.n	8003dde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd6:	f043 0201 	orr.w	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00b      	beq.n	8003e02 <HAL_UART_IRQHandler+0xd2>
 8003dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfa:	f043 0202 	orr.w	r2, r3, #2
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <HAL_UART_IRQHandler+0xf6>
 8003e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1e:	f043 0204 	orr.w	r2, r3, #4
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d011      	beq.n	8003e56 <HAL_UART_IRQHandler+0x126>
 8003e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d105      	bne.n	8003e4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	f043 0208 	orr.w	r2, r3, #8
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 820a 	beq.w	8004274 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_UART_IRQHandler+0x14e>
 8003e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fd45 	bl	8004908 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e88:	2b40      	cmp	r3, #64	@ 0x40
 8003e8a:	bf0c      	ite	eq
 8003e8c:	2301      	moveq	r3, #1
 8003e8e:	2300      	movne	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <HAL_UART_IRQHandler+0x17a>
 8003ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d04f      	beq.n	8003f4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fc50 	bl	8004750 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eba:	2b40      	cmp	r3, #64	@ 0x40
 8003ebc:	d141      	bne.n	8003f42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3314      	adds	r3, #20
 8003ec4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ed8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3314      	adds	r3, #20
 8003ee6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003eea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003eee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ef6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003efa:	e841 2300 	strex	r3, r2, [r1]
 8003efe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1d9      	bne.n	8003ebe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d013      	beq.n	8003f3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f16:	4a8a      	ldr	r2, [pc, #552]	@ (8004140 <HAL_UART_IRQHandler+0x410>)
 8003f18:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fe fcfa 	bl	8002918 <HAL_DMA_Abort_IT>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d016      	beq.n	8003f58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f34:	4610      	mov	r0, r2
 8003f36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f38:	e00e      	b.n	8003f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f9ca 	bl	80042d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f40:	e00a      	b.n	8003f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f9c6 	bl	80042d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f48:	e006      	b.n	8003f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f9c2 	bl	80042d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003f56:	e18d      	b.n	8004274 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f58:	bf00      	nop
    return;
 8003f5a:	e18b      	b.n	8004274 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	f040 8167 	bne.w	8004234 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 8160 	beq.w	8004234 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8159 	beq.w	8004234 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa2:	2b40      	cmp	r3, #64	@ 0x40
 8003fa4:	f040 80ce 	bne.w	8004144 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80a9 	beq.w	8004110 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	f080 80a2 	bcs.w	8004110 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fd2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fde:	f000 8088 	beq.w	80040f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	330c      	adds	r3, #12
 8003fe8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004000:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	330c      	adds	r3, #12
 800400a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800400e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004012:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800401a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004026:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1d9      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3314      	adds	r3, #20
 8004034:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800403e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004040:	f023 0301 	bic.w	r3, r3, #1
 8004044:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3314      	adds	r3, #20
 800404e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004052:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004056:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800405a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004064:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e1      	bne.n	800402e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3314      	adds	r3, #20
 8004070:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800407a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800407c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004080:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3314      	adds	r3, #20
 800408a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800408e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004090:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004094:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800409c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e3      	bne.n	800406a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	330c      	adds	r3, #12
 80040b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040ba:	e853 3f00 	ldrex	r3, [r3]
 80040be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040c2:	f023 0310 	bic.w	r3, r3, #16
 80040c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	330c      	adds	r3, #12
 80040d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80040d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80040d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040dc:	e841 2300 	strex	r3, r2, [r1]
 80040e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80040e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e3      	bne.n	80040b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fe fba3 	bl	8002838 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2202      	movs	r2, #2
 80040f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004100:	b29b      	uxth	r3, r3
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	b29b      	uxth	r3, r3
 8004106:	4619      	mov	r1, r3
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f8ed 	bl	80042e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800410e:	e0b3      	b.n	8004278 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004114:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004118:	429a      	cmp	r2, r3
 800411a:	f040 80ad 	bne.w	8004278 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004128:	f040 80a6 	bne.w	8004278 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004136:	4619      	mov	r1, r3
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f8d5 	bl	80042e8 <HAL_UARTEx_RxEventCallback>
      return;
 800413e:	e09b      	b.n	8004278 <HAL_UART_IRQHandler+0x548>
 8004140:	08004817 	.word	0x08004817
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800414c:	b29b      	uxth	r3, r3
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 808e 	beq.w	800427c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004160:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 8089 	beq.w	800427c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	330c      	adds	r3, #12
 8004170:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800417a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004180:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	330c      	adds	r3, #12
 800418a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800418e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004190:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004194:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800419c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e3      	bne.n	800416a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3314      	adds	r3, #20
 80041a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	623b      	str	r3, [r7, #32]
   return(result);
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3314      	adds	r3, #20
 80041c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80041c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e3      	bne.n	80041a2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0310 	bic.w	r3, r3, #16
 80041fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800420c:	61fa      	str	r2, [r7, #28]
 800420e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	69b9      	ldr	r1, [r7, #24]
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	617b      	str	r3, [r7, #20]
   return(result);
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e3      	bne.n	80041e8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004226:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800422a:	4619      	mov	r1, r3
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f85b 	bl	80042e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004232:	e023      	b.n	800427c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423c:	2b00      	cmp	r3, #0
 800423e:	d009      	beq.n	8004254 <HAL_UART_IRQHandler+0x524>
 8004240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 faf3 	bl	8004838 <UART_Transmit_IT>
    return;
 8004252:	e014      	b.n	800427e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00e      	beq.n	800427e <HAL_UART_IRQHandler+0x54e>
 8004260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fb33 	bl	80048d8 <UART_EndTransmit_IT>
    return;
 8004272:	e004      	b.n	800427e <HAL_UART_IRQHandler+0x54e>
    return;
 8004274:	bf00      	nop
 8004276:	e002      	b.n	800427e <HAL_UART_IRQHandler+0x54e>
      return;
 8004278:	bf00      	nop
 800427a:	e000      	b.n	800427e <HAL_UART_IRQHandler+0x54e>
      return;
 800427c:	bf00      	nop
  }
}
 800427e:	37e8      	adds	r7, #232	@ 0xe8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b090      	sub	sp, #64	@ 0x40
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d137      	bne.n	800438c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800431c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800431e:	2200      	movs	r2, #0
 8004320:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3314      	adds	r3, #20
 8004328:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	e853 3f00 	ldrex	r3, [r3]
 8004330:	623b      	str	r3, [r7, #32]
   return(result);
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004338:	63bb      	str	r3, [r7, #56]	@ 0x38
 800433a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3314      	adds	r3, #20
 8004340:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004342:	633a      	str	r2, [r7, #48]	@ 0x30
 8004344:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004346:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800434a:	e841 2300 	strex	r3, r2, [r1]
 800434e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1e5      	bne.n	8004322 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	330c      	adds	r3, #12
 800435c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	60fb      	str	r3, [r7, #12]
   return(result);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800436c:	637b      	str	r3, [r7, #52]	@ 0x34
 800436e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	330c      	adds	r3, #12
 8004374:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004376:	61fa      	str	r2, [r7, #28]
 8004378:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	69b9      	ldr	r1, [r7, #24]
 800437c:	69fa      	ldr	r2, [r7, #28]
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	617b      	str	r3, [r7, #20]
   return(result);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e5      	bne.n	8004356 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800438a:	e002      	b.n	8004392 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800438c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800438e:	f7ff ff79 	bl	8004284 <HAL_UART_TxCpltCallback>
}
 8004392:	bf00      	nop
 8004394:	3740      	adds	r7, #64	@ 0x40
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f7ff ff75 	bl	8004298 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b09c      	sub	sp, #112	@ 0x70
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d172      	bne.n	80044b8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80043d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043d4:	2200      	movs	r2, #0
 80043d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	330c      	adds	r3, #12
 80043f6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80043f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80043fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004400:	e841 2300 	strex	r3, r2, [r1]
 8004404:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004406:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e5      	bne.n	80043d8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3314      	adds	r3, #20
 8004412:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800441c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800441e:	f023 0301 	bic.w	r3, r3, #1
 8004422:	667b      	str	r3, [r7, #100]	@ 0x64
 8004424:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3314      	adds	r3, #20
 800442a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800442c:	647a      	str	r2, [r7, #68]	@ 0x44
 800442e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800443a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e5      	bne.n	800440c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004440:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3314      	adds	r3, #20
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	623b      	str	r3, [r7, #32]
   return(result);
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004456:	663b      	str	r3, [r7, #96]	@ 0x60
 8004458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3314      	adds	r3, #20
 800445e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004460:	633a      	str	r2, [r7, #48]	@ 0x30
 8004462:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800446e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e5      	bne.n	8004440 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004476:	2220      	movs	r2, #32
 8004478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800447c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800447e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004480:	2b01      	cmp	r3, #1
 8004482:	d119      	bne.n	80044b8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	330c      	adds	r3, #12
 800448a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	60fb      	str	r3, [r7, #12]
   return(result);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0310 	bic.w	r3, r3, #16
 800449a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800449c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	330c      	adds	r3, #12
 80044a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80044a4:	61fa      	str	r2, [r7, #28]
 80044a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	69b9      	ldr	r1, [r7, #24]
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	617b      	str	r3, [r7, #20]
   return(result);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e5      	bne.n	8004484 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ba:	2200      	movs	r2, #0
 80044bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d106      	bne.n	80044d4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044ca:	4619      	mov	r1, r3
 80044cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80044ce:	f7ff ff0b 	bl	80042e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044d2:	e002      	b.n	80044da <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80044d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80044d6:	f7ff fee9 	bl	80042ac <HAL_UART_RxCpltCallback>
}
 80044da:	bf00      	nop
 80044dc:	3770      	adds	r7, #112	@ 0x70
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2201      	movs	r2, #1
 80044f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d108      	bne.n	8004510 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	b29b      	uxth	r3, r3
 8004506:	4619      	mov	r1, r3
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7ff feed 	bl	80042e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800450e:	e002      	b.n	8004516 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f7ff fed5 	bl	80042c0 <HAL_UART_RxHalfCpltCallback>
}
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800453a:	2b80      	cmp	r3, #128	@ 0x80
 800453c:	bf0c      	ite	eq
 800453e:	2301      	moveq	r3, #1
 8004540:	2300      	movne	r3, #0
 8004542:	b2db      	uxtb	r3, r3
 8004544:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b21      	cmp	r3, #33	@ 0x21
 8004550:	d108      	bne.n	8004564 <UART_DMAError+0x46>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2200      	movs	r2, #0
 800455c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800455e:	68b8      	ldr	r0, [r7, #8]
 8004560:	f000 f8ce 	bl	8004700 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456e:	2b40      	cmp	r3, #64	@ 0x40
 8004570:	bf0c      	ite	eq
 8004572:	2301      	moveq	r3, #1
 8004574:	2300      	movne	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b22      	cmp	r3, #34	@ 0x22
 8004584:	d108      	bne.n	8004598 <UART_DMAError+0x7a>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2200      	movs	r2, #0
 8004590:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004592:	68b8      	ldr	r0, [r7, #8]
 8004594:	f000 f8dc 	bl	8004750 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459c:	f043 0210 	orr.w	r2, r3, #16
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045a4:	68b8      	ldr	r0, [r7, #8]
 80045a6:	f7ff fe95 	bl	80042d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b098      	sub	sp, #96	@ 0x60
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	4613      	mov	r3, r2
 80045c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	88fa      	ldrh	r2, [r7, #6]
 80045cc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2222      	movs	r2, #34	@ 0x22
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e0:	4a44      	ldr	r2, [pc, #272]	@ (80046f4 <UART_Start_Receive_DMA+0x140>)
 80045e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e8:	4a43      	ldr	r2, [pc, #268]	@ (80046f8 <UART_Start_Receive_DMA+0x144>)
 80045ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f0:	4a42      	ldr	r2, [pc, #264]	@ (80046fc <UART_Start_Receive_DMA+0x148>)
 80045f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f8:	2200      	movs	r2, #0
 80045fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80045fc:	f107 0308 	add.w	r3, r7, #8
 8004600:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3304      	adds	r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	f7fe f8b8 	bl	8002788 <HAL_DMA_Start_IT>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d008      	beq.n	8004630 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2210      	movs	r2, #16
 8004622:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e05d      	b.n	80046ec <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004630:	2300      	movs	r3, #0
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	613b      	str	r3, [r7, #16]
 8004644:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d019      	beq.n	8004682 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	330c      	adds	r3, #12
 8004654:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800465e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004664:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800466e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004670:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004674:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800467c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e5      	bne.n	800464e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3314      	adds	r3, #20
 8004688:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	657b      	str	r3, [r7, #84]	@ 0x54
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3314      	adds	r3, #20
 80046a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80046a2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80046a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80046a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e5      	bne.n	8004682 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3314      	adds	r3, #20
 80046bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	617b      	str	r3, [r7, #20]
   return(result);
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3314      	adds	r3, #20
 80046d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80046d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80046d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6a39      	ldr	r1, [r7, #32]
 80046dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e5      	bne.n	80046b6 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3760      	adds	r7, #96	@ 0x60
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	080043b7 	.word	0x080043b7
 80046f8:	080044e3 	.word	0x080044e3
 80046fc:	0800451f 	.word	0x0800451f

08004700 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	@ 0x24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	330c      	adds	r3, #12
 800470e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	e853 3f00 	ldrex	r3, [r3]
 8004716:	60bb      	str	r3, [r7, #8]
   return(result);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800471e:	61fb      	str	r3, [r7, #28]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	330c      	adds	r3, #12
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	61ba      	str	r2, [r7, #24]
 800472a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472c:	6979      	ldr	r1, [r7, #20]
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	e841 2300 	strex	r3, r2, [r1]
 8004734:	613b      	str	r3, [r7, #16]
   return(result);
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e5      	bne.n	8004708 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004744:	bf00      	nop
 8004746:	3724      	adds	r7, #36	@ 0x24
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004750:	b480      	push	{r7}
 8004752:	b095      	sub	sp, #84	@ 0x54
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	330c      	adds	r3, #12
 800475e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800476e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	330c      	adds	r3, #12
 8004776:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004778:	643a      	str	r2, [r7, #64]	@ 0x40
 800477a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800477e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004780:	e841 2300 	strex	r3, r2, [r1]
 8004784:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e5      	bne.n	8004758 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3314      	adds	r3, #20
 8004792:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	e853 3f00 	ldrex	r3, [r3]
 800479a:	61fb      	str	r3, [r7, #28]
   return(result);
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f023 0301 	bic.w	r3, r3, #1
 80047a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3314      	adds	r3, #20
 80047aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047b4:	e841 2300 	strex	r3, r2, [r1]
 80047b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e5      	bne.n	800478c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d119      	bne.n	80047fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	330c      	adds	r3, #12
 80047ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	e853 3f00 	ldrex	r3, [r3]
 80047d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f023 0310 	bic.w	r3, r3, #16
 80047de:	647b      	str	r3, [r7, #68]	@ 0x44
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	330c      	adds	r3, #12
 80047e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047e8:	61ba      	str	r2, [r7, #24]
 80047ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ec:	6979      	ldr	r1, [r7, #20]
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	e841 2300 	strex	r3, r2, [r1]
 80047f4:	613b      	str	r3, [r7, #16]
   return(result);
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e5      	bne.n	80047c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800480a:	bf00      	nop
 800480c:	3754      	adds	r7, #84	@ 0x54
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004822:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f7ff fd52 	bl	80042d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b21      	cmp	r3, #33	@ 0x21
 800484a:	d13e      	bne.n	80048ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004854:	d114      	bne.n	8004880 <UART_Transmit_IT+0x48>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d110      	bne.n	8004880 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004872:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	1c9a      	adds	r2, r3, #2
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	621a      	str	r2, [r3, #32]
 800487e:	e008      	b.n	8004892 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	1c59      	adds	r1, r3, #1
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6211      	str	r1, [r2, #32]
 800488a:	781a      	ldrb	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29b      	uxth	r3, r3
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	4619      	mov	r1, r3
 80048a0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10f      	bne.n	80048c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e000      	b.n	80048cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048ca:	2302      	movs	r3, #2
  }
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff fcc3 	bl	8004284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08c      	sub	sp, #48	@ 0x30
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004910:	2300      	movs	r3, #0
 8004912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004914:	2300      	movs	r3, #0
 8004916:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b22      	cmp	r3, #34	@ 0x22
 8004922:	f040 80aa 	bne.w	8004a7a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800492e:	d115      	bne.n	800495c <UART_Receive_IT+0x54>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d111      	bne.n	800495c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	b29b      	uxth	r3, r3
 8004946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494a:	b29a      	uxth	r2, r3
 800494c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004954:	1c9a      	adds	r2, r3, #2
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	629a      	str	r2, [r3, #40]	@ 0x28
 800495a:	e024      	b.n	80049a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004960:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800496a:	d007      	beq.n	800497c <UART_Receive_IT+0x74>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <UART_Receive_IT+0x82>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	b2da      	uxtb	r2, r3
 8004984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	e008      	b.n	800499c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004996:	b2da      	uxtb	r2, r3
 8004998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800499a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	4619      	mov	r1, r3
 80049b4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d15d      	bne.n	8004a76 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0220 	bic.w	r2, r2, #32
 80049c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695a      	ldr	r2, [r3, #20]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0201 	bic.w	r2, r2, #1
 80049e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d135      	bne.n	8004a6c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	330c      	adds	r3, #12
 8004a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	e853 3f00 	ldrex	r3, [r3]
 8004a14:	613b      	str	r3, [r7, #16]
   return(result);
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f023 0310 	bic.w	r3, r3, #16
 8004a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	330c      	adds	r3, #12
 8004a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a26:	623a      	str	r2, [r7, #32]
 8004a28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2a:	69f9      	ldr	r1, [r7, #28]
 8004a2c:	6a3a      	ldr	r2, [r7, #32]
 8004a2e:	e841 2300 	strex	r3, r2, [r1]
 8004a32:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1e5      	bne.n	8004a06 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2b10      	cmp	r3, #16
 8004a46:	d10a      	bne.n	8004a5e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a62:	4619      	mov	r1, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff fc3f 	bl	80042e8 <HAL_UARTEx_RxEventCallback>
 8004a6a:	e002      	b.n	8004a72 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff fc1d 	bl	80042ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	e002      	b.n	8004a7c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	e000      	b.n	8004a7c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a7a:	2302      	movs	r3, #2
  }
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3730      	adds	r7, #48	@ 0x30
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a88:	b0c0      	sub	sp, #256	@ 0x100
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa0:	68d9      	ldr	r1, [r3, #12]
 8004aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	ea40 0301 	orr.w	r3, r0, r1
 8004aac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	431a      	orrs	r2, r3
 8004abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004adc:	f021 010c 	bic.w	r1, r1, #12
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004aea:	430b      	orrs	r3, r1
 8004aec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afe:	6999      	ldr	r1, [r3, #24]
 8004b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	ea40 0301 	orr.w	r3, r0, r1
 8004b0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4b8f      	ldr	r3, [pc, #572]	@ (8004d50 <UART_SetConfig+0x2cc>)
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d005      	beq.n	8004b24 <UART_SetConfig+0xa0>
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b8d      	ldr	r3, [pc, #564]	@ (8004d54 <UART_SetConfig+0x2d0>)
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d104      	bne.n	8004b2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b24:	f7fe ff80 	bl	8003a28 <HAL_RCC_GetPCLK2Freq>
 8004b28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b2c:	e003      	b.n	8004b36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b2e:	f7fe ff67 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 8004b32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b40:	f040 810c 	bne.w	8004d5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b56:	4622      	mov	r2, r4
 8004b58:	462b      	mov	r3, r5
 8004b5a:	1891      	adds	r1, r2, r2
 8004b5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b5e:	415b      	adcs	r3, r3
 8004b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b66:	4621      	mov	r1, r4
 8004b68:	eb12 0801 	adds.w	r8, r2, r1
 8004b6c:	4629      	mov	r1, r5
 8004b6e:	eb43 0901 	adc.w	r9, r3, r1
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b86:	4690      	mov	r8, r2
 8004b88:	4699      	mov	r9, r3
 8004b8a:	4623      	mov	r3, r4
 8004b8c:	eb18 0303 	adds.w	r3, r8, r3
 8004b90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b94:	462b      	mov	r3, r5
 8004b96:	eb49 0303 	adc.w	r3, r9, r3
 8004b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004baa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004bae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	18db      	adds	r3, r3, r3
 8004bb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bb8:	4613      	mov	r3, r2
 8004bba:	eb42 0303 	adc.w	r3, r2, r3
 8004bbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004bc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004bc8:	f7fb ff90 	bl	8000aec <__aeabi_uldivmod>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4b61      	ldr	r3, [pc, #388]	@ (8004d58 <UART_SetConfig+0x2d4>)
 8004bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	011c      	lsls	r4, r3, #4
 8004bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004be4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004be8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004bec:	4642      	mov	r2, r8
 8004bee:	464b      	mov	r3, r9
 8004bf0:	1891      	adds	r1, r2, r2
 8004bf2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004bf4:	415b      	adcs	r3, r3
 8004bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bf8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004bfc:	4641      	mov	r1, r8
 8004bfe:	eb12 0a01 	adds.w	sl, r2, r1
 8004c02:	4649      	mov	r1, r9
 8004c04:	eb43 0b01 	adc.w	fp, r3, r1
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c1c:	4692      	mov	sl, r2
 8004c1e:	469b      	mov	fp, r3
 8004c20:	4643      	mov	r3, r8
 8004c22:	eb1a 0303 	adds.w	r3, sl, r3
 8004c26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	eb4b 0303 	adc.w	r3, fp, r3
 8004c30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	18db      	adds	r3, r3, r3
 8004c4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c4e:	4613      	mov	r3, r2
 8004c50:	eb42 0303 	adc.w	r3, r2, r3
 8004c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c5e:	f7fb ff45 	bl	8000aec <__aeabi_uldivmod>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4611      	mov	r1, r2
 8004c68:	4b3b      	ldr	r3, [pc, #236]	@ (8004d58 <UART_SetConfig+0x2d4>)
 8004c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	2264      	movs	r2, #100	@ 0x64
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
 8004c76:	1acb      	subs	r3, r1, r3
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c7e:	4b36      	ldr	r3, [pc, #216]	@ (8004d58 <UART_SetConfig+0x2d4>)
 8004c80:	fba3 2302 	umull	r2, r3, r3, r2
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c8c:	441c      	add	r4, r3
 8004c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004c9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	464b      	mov	r3, r9
 8004ca4:	1891      	adds	r1, r2, r2
 8004ca6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ca8:	415b      	adcs	r3, r3
 8004caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004cb0:	4641      	mov	r1, r8
 8004cb2:	1851      	adds	r1, r2, r1
 8004cb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	414b      	adcs	r3, r1
 8004cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004cc8:	4659      	mov	r1, fp
 8004cca:	00cb      	lsls	r3, r1, #3
 8004ccc:	4651      	mov	r1, sl
 8004cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cd2:	4651      	mov	r1, sl
 8004cd4:	00ca      	lsls	r2, r1, #3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4642      	mov	r2, r8
 8004cde:	189b      	adds	r3, r3, r2
 8004ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	460a      	mov	r2, r1
 8004ce8:	eb42 0303 	adc.w	r3, r2, r3
 8004cec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004cfc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d04:	460b      	mov	r3, r1
 8004d06:	18db      	adds	r3, r3, r3
 8004d08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	eb42 0303 	adc.w	r3, r2, r3
 8004d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d1a:	f7fb fee7 	bl	8000aec <__aeabi_uldivmod>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4b0d      	ldr	r3, [pc, #52]	@ (8004d58 <UART_SetConfig+0x2d4>)
 8004d24:	fba3 1302 	umull	r1, r3, r3, r2
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	2164      	movs	r1, #100	@ 0x64
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	3332      	adds	r3, #50	@ 0x32
 8004d36:	4a08      	ldr	r2, [pc, #32]	@ (8004d58 <UART_SetConfig+0x2d4>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	f003 0207 	and.w	r2, r3, #7
 8004d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4422      	add	r2, r4
 8004d4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d4c:	e106      	b.n	8004f5c <UART_SetConfig+0x4d8>
 8004d4e:	bf00      	nop
 8004d50:	40011000 	.word	0x40011000
 8004d54:	40011400 	.word	0x40011400
 8004d58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d60:	2200      	movs	r2, #0
 8004d62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004d6e:	4642      	mov	r2, r8
 8004d70:	464b      	mov	r3, r9
 8004d72:	1891      	adds	r1, r2, r2
 8004d74:	6239      	str	r1, [r7, #32]
 8004d76:	415b      	adcs	r3, r3
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d7e:	4641      	mov	r1, r8
 8004d80:	1854      	adds	r4, r2, r1
 8004d82:	4649      	mov	r1, r9
 8004d84:	eb43 0501 	adc.w	r5, r3, r1
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	00eb      	lsls	r3, r5, #3
 8004d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d96:	00e2      	lsls	r2, r4, #3
 8004d98:	4614      	mov	r4, r2
 8004d9a:	461d      	mov	r5, r3
 8004d9c:	4643      	mov	r3, r8
 8004d9e:	18e3      	adds	r3, r4, r3
 8004da0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004da4:	464b      	mov	r3, r9
 8004da6:	eb45 0303 	adc.w	r3, r5, r3
 8004daa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004dba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004dca:	4629      	mov	r1, r5
 8004dcc:	008b      	lsls	r3, r1, #2
 8004dce:	4621      	mov	r1, r4
 8004dd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	008a      	lsls	r2, r1, #2
 8004dd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ddc:	f7fb fe86 	bl	8000aec <__aeabi_uldivmod>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4b60      	ldr	r3, [pc, #384]	@ (8004f68 <UART_SetConfig+0x4e4>)
 8004de6:	fba3 2302 	umull	r2, r3, r3, r2
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	011c      	lsls	r4, r3, #4
 8004dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004df8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004dfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e00:	4642      	mov	r2, r8
 8004e02:	464b      	mov	r3, r9
 8004e04:	1891      	adds	r1, r2, r2
 8004e06:	61b9      	str	r1, [r7, #24]
 8004e08:	415b      	adcs	r3, r3
 8004e0a:	61fb      	str	r3, [r7, #28]
 8004e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e10:	4641      	mov	r1, r8
 8004e12:	1851      	adds	r1, r2, r1
 8004e14:	6139      	str	r1, [r7, #16]
 8004e16:	4649      	mov	r1, r9
 8004e18:	414b      	adcs	r3, r1
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	f04f 0200 	mov.w	r2, #0
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e28:	4659      	mov	r1, fp
 8004e2a:	00cb      	lsls	r3, r1, #3
 8004e2c:	4651      	mov	r1, sl
 8004e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e32:	4651      	mov	r1, sl
 8004e34:	00ca      	lsls	r2, r1, #3
 8004e36:	4610      	mov	r0, r2
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	4642      	mov	r2, r8
 8004e3e:	189b      	adds	r3, r3, r2
 8004e40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e44:	464b      	mov	r3, r9
 8004e46:	460a      	mov	r2, r1
 8004e48:	eb42 0303 	adc.w	r3, r2, r3
 8004e4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e68:	4649      	mov	r1, r9
 8004e6a:	008b      	lsls	r3, r1, #2
 8004e6c:	4641      	mov	r1, r8
 8004e6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e72:	4641      	mov	r1, r8
 8004e74:	008a      	lsls	r2, r1, #2
 8004e76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e7a:	f7fb fe37 	bl	8000aec <__aeabi_uldivmod>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4611      	mov	r1, r2
 8004e84:	4b38      	ldr	r3, [pc, #224]	@ (8004f68 <UART_SetConfig+0x4e4>)
 8004e86:	fba3 2301 	umull	r2, r3, r3, r1
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	2264      	movs	r2, #100	@ 0x64
 8004e8e:	fb02 f303 	mul.w	r3, r2, r3
 8004e92:	1acb      	subs	r3, r1, r3
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	3332      	adds	r3, #50	@ 0x32
 8004e98:	4a33      	ldr	r2, [pc, #204]	@ (8004f68 <UART_SetConfig+0x4e4>)
 8004e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ea4:	441c      	add	r4, r3
 8004ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eaa:	2200      	movs	r2, #0
 8004eac:	673b      	str	r3, [r7, #112]	@ 0x70
 8004eae:	677a      	str	r2, [r7, #116]	@ 0x74
 8004eb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004eb4:	4642      	mov	r2, r8
 8004eb6:	464b      	mov	r3, r9
 8004eb8:	1891      	adds	r1, r2, r2
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	415b      	adcs	r3, r3
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ec4:	4641      	mov	r1, r8
 8004ec6:	1851      	adds	r1, r2, r1
 8004ec8:	6039      	str	r1, [r7, #0]
 8004eca:	4649      	mov	r1, r9
 8004ecc:	414b      	adcs	r3, r1
 8004ece:	607b      	str	r3, [r7, #4]
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004edc:	4659      	mov	r1, fp
 8004ede:	00cb      	lsls	r3, r1, #3
 8004ee0:	4651      	mov	r1, sl
 8004ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ee6:	4651      	mov	r1, sl
 8004ee8:	00ca      	lsls	r2, r1, #3
 8004eea:	4610      	mov	r0, r2
 8004eec:	4619      	mov	r1, r3
 8004eee:	4603      	mov	r3, r0
 8004ef0:	4642      	mov	r2, r8
 8004ef2:	189b      	adds	r3, r3, r2
 8004ef4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ef6:	464b      	mov	r3, r9
 8004ef8:	460a      	mov	r2, r1
 8004efa:	eb42 0303 	adc.w	r3, r2, r3
 8004efe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f18:	4649      	mov	r1, r9
 8004f1a:	008b      	lsls	r3, r1, #2
 8004f1c:	4641      	mov	r1, r8
 8004f1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f22:	4641      	mov	r1, r8
 8004f24:	008a      	lsls	r2, r1, #2
 8004f26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f2a:	f7fb fddf 	bl	8000aec <__aeabi_uldivmod>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4b0d      	ldr	r3, [pc, #52]	@ (8004f68 <UART_SetConfig+0x4e4>)
 8004f34:	fba3 1302 	umull	r1, r3, r3, r2
 8004f38:	095b      	lsrs	r3, r3, #5
 8004f3a:	2164      	movs	r1, #100	@ 0x64
 8004f3c:	fb01 f303 	mul.w	r3, r1, r3
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	3332      	adds	r3, #50	@ 0x32
 8004f46:	4a08      	ldr	r2, [pc, #32]	@ (8004f68 <UART_SetConfig+0x4e4>)
 8004f48:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4c:	095b      	lsrs	r3, r3, #5
 8004f4e:	f003 020f 	and.w	r2, r3, #15
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4422      	add	r2, r4
 8004f5a:	609a      	str	r2, [r3, #8]
}
 8004f5c:	bf00      	nop
 8004f5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f62:	46bd      	mov	sp, r7
 8004f64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f68:	51eb851f 	.word	0x51eb851f

08004f6c <__NVIC_SetPriority>:
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	6039      	str	r1, [r7, #0]
 8004f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	db0a      	blt.n	8004f96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	490c      	ldr	r1, [pc, #48]	@ (8004fb8 <__NVIC_SetPriority+0x4c>)
 8004f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8a:	0112      	lsls	r2, r2, #4
 8004f8c:	b2d2      	uxtb	r2, r2
 8004f8e:	440b      	add	r3, r1
 8004f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004f94:	e00a      	b.n	8004fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	4908      	ldr	r1, [pc, #32]	@ (8004fbc <__NVIC_SetPriority+0x50>)
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	3b04      	subs	r3, #4
 8004fa4:	0112      	lsls	r2, r2, #4
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	440b      	add	r3, r1
 8004faa:	761a      	strb	r2, [r3, #24]
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	e000e100 	.word	0xe000e100
 8004fbc:	e000ed00 	.word	0xe000ed00

08004fc0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	f06f 0004 	mvn.w	r0, #4
 8004fca:	f7ff ffcf 	bl	8004f6c <__NVIC_SetPriority>
#endif
}
 8004fce:	bf00      	nop
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fda:	f3ef 8305 	mrs	r3, IPSR
 8004fde:	603b      	str	r3, [r7, #0]
  return(result);
 8004fe0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004fe6:	f06f 0305 	mvn.w	r3, #5
 8004fea:	607b      	str	r3, [r7, #4]
 8004fec:	e00c      	b.n	8005008 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004fee:	4b0a      	ldr	r3, [pc, #40]	@ (8005018 <osKernelInitialize+0x44>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d105      	bne.n	8005002 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004ff6:	4b08      	ldr	r3, [pc, #32]	@ (8005018 <osKernelInitialize+0x44>)
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	607b      	str	r3, [r7, #4]
 8005000:	e002      	b.n	8005008 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005002:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005006:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005008:	687b      	ldr	r3, [r7, #4]
}
 800500a:	4618      	mov	r0, r3
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	200077e4 	.word	0x200077e4

0800501c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005022:	f3ef 8305 	mrs	r3, IPSR
 8005026:	603b      	str	r3, [r7, #0]
  return(result);
 8005028:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <osKernelStart+0x1a>
    stat = osErrorISR;
 800502e:	f06f 0305 	mvn.w	r3, #5
 8005032:	607b      	str	r3, [r7, #4]
 8005034:	e010      	b.n	8005058 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005036:	4b0b      	ldr	r3, [pc, #44]	@ (8005064 <osKernelStart+0x48>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d109      	bne.n	8005052 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800503e:	f7ff ffbf 	bl	8004fc0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005042:	4b08      	ldr	r3, [pc, #32]	@ (8005064 <osKernelStart+0x48>)
 8005044:	2202      	movs	r2, #2
 8005046:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005048:	f001 f87a 	bl	8006140 <vTaskStartScheduler>
      stat = osOK;
 800504c:	2300      	movs	r3, #0
 800504e:	607b      	str	r3, [r7, #4]
 8005050:	e002      	b.n	8005058 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005052:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005056:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005058:	687b      	ldr	r3, [r7, #4]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	200077e4 	.word	0x200077e4

08005068 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b08e      	sub	sp, #56	@ 0x38
 800506c:	af04      	add	r7, sp, #16
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005074:	2300      	movs	r3, #0
 8005076:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005078:	f3ef 8305 	mrs	r3, IPSR
 800507c:	617b      	str	r3, [r7, #20]
  return(result);
 800507e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005080:	2b00      	cmp	r3, #0
 8005082:	d17e      	bne.n	8005182 <osThreadNew+0x11a>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d07b      	beq.n	8005182 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800508a:	2380      	movs	r3, #128	@ 0x80
 800508c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800508e:	2318      	movs	r3, #24
 8005090:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005096:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800509a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d045      	beq.n	800512e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <osThreadNew+0x48>
        name = attr->name;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d008      	beq.n	80050d6 <osThreadNew+0x6e>
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	2b38      	cmp	r3, #56	@ 0x38
 80050c8:	d805      	bhi.n	80050d6 <osThreadNew+0x6e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <osThreadNew+0x72>
        return (NULL);
 80050d6:	2300      	movs	r3, #0
 80050d8:	e054      	b.n	8005184 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	089b      	lsrs	r3, r3, #2
 80050e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00e      	beq.n	8005110 <osThreadNew+0xa8>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	2b5b      	cmp	r3, #91	@ 0x5b
 80050f8:	d90a      	bls.n	8005110 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d006      	beq.n	8005110 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <osThreadNew+0xa8>
        mem = 1;
 800510a:	2301      	movs	r3, #1
 800510c:	61bb      	str	r3, [r7, #24]
 800510e:	e010      	b.n	8005132 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10c      	bne.n	8005132 <osThreadNew+0xca>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d108      	bne.n	8005132 <osThreadNew+0xca>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d104      	bne.n	8005132 <osThreadNew+0xca>
          mem = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	e001      	b.n	8005132 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d110      	bne.n	800515a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005140:	9202      	str	r2, [sp, #8]
 8005142:	9301      	str	r3, [sp, #4]
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	6a3a      	ldr	r2, [r7, #32]
 800514c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 fe1a 	bl	8005d88 <xTaskCreateStatic>
 8005154:	4603      	mov	r3, r0
 8005156:	613b      	str	r3, [r7, #16]
 8005158:	e013      	b.n	8005182 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d110      	bne.n	8005182 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	b29a      	uxth	r2, r3
 8005164:	f107 0310 	add.w	r3, r7, #16
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 fe68 	bl	8005e48 <xTaskCreate>
 8005178:	4603      	mov	r3, r0
 800517a:	2b01      	cmp	r3, #1
 800517c:	d001      	beq.n	8005182 <osThreadNew+0x11a>
            hTask = NULL;
 800517e:	2300      	movs	r3, #0
 8005180:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005182:	693b      	ldr	r3, [r7, #16]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3728      	adds	r7, #40	@ 0x28
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005194:	f3ef 8305 	mrs	r3, IPSR
 8005198:	60bb      	str	r3, [r7, #8]
  return(result);
 800519a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <osDelay+0x1c>
    stat = osErrorISR;
 80051a0:	f06f 0305 	mvn.w	r3, #5
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	e007      	b.n	80051b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 ff8e 	bl	80060d4 <vTaskDelay>
    }
  }

  return (stat);
 80051b8:	68fb      	ldr	r3, [r7, #12]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4a07      	ldr	r2, [pc, #28]	@ (80051f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80051d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4a06      	ldr	r2, [pc, #24]	@ (80051f4 <vApplicationGetIdleTaskMemory+0x30>)
 80051da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2280      	movs	r2, #128	@ 0x80
 80051e0:	601a      	str	r2, [r3, #0]
}
 80051e2:	bf00      	nop
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	200077e8 	.word	0x200077e8
 80051f4:	20007844 	.word	0x20007844

080051f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4a07      	ldr	r2, [pc, #28]	@ (8005224 <vApplicationGetTimerTaskMemory+0x2c>)
 8005208:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	4a06      	ldr	r2, [pc, #24]	@ (8005228 <vApplicationGetTimerTaskMemory+0x30>)
 800520e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005216:	601a      	str	r2, [r3, #0]
}
 8005218:	bf00      	nop
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	20007a44 	.word	0x20007a44
 8005228:	20007aa0 	.word	0x20007aa0

0800522c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f103 0208 	add.w	r2, r3, #8
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005244:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f103 0208 	add.w	r2, r3, #8
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f103 0208 	add.w	r2, r3, #8
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005286:	b480      	push	{r7}
 8005288:	b085      	sub	sp, #20
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	601a      	str	r2, [r3, #0]
}
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052ce:	b480      	push	{r7}
 80052d0:	b085      	sub	sp, #20
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052e4:	d103      	bne.n	80052ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	e00c      	b.n	8005308 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3308      	adds	r3, #8
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	e002      	b.n	80052fc <vListInsert+0x2e>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	429a      	cmp	r2, r3
 8005306:	d2f6      	bcs.n	80052f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	601a      	str	r2, [r3, #0]
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6892      	ldr	r2, [r2, #8]
 8005356:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6852      	ldr	r2, [r2, #4]
 8005360:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	429a      	cmp	r2, r3
 800536a:	d103      	bne.n	8005374 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	1e5a      	subs	r2, r3, #1
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10b      	bne.n	80053c0 <xQueueGenericReset+0x2c>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	60bb      	str	r3, [r7, #8]
}
 80053ba:	bf00      	nop
 80053bc:	bf00      	nop
 80053be:	e7fd      	b.n	80053bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053c0:	f002 f8a2 	bl	8007508 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053cc:	68f9      	ldr	r1, [r7, #12]
 80053ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80053d0:	fb01 f303 	mul.w	r3, r1, r3
 80053d4:	441a      	add	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f0:	3b01      	subs	r3, #1
 80053f2:	68f9      	ldr	r1, [r7, #12]
 80053f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80053f6:	fb01 f303 	mul.w	r3, r1, r3
 80053fa:	441a      	add	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	22ff      	movs	r2, #255	@ 0xff
 8005404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	22ff      	movs	r2, #255	@ 0xff
 800540c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d114      	bne.n	8005440 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d01a      	beq.n	8005454 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3310      	adds	r3, #16
 8005422:	4618      	mov	r0, r3
 8005424:	f001 f91a 	bl	800665c <xTaskRemoveFromEventList>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d012      	beq.n	8005454 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800542e:	4b0d      	ldr	r3, [pc, #52]	@ (8005464 <xQueueGenericReset+0xd0>)
 8005430:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	e009      	b.n	8005454 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3310      	adds	r3, #16
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff fef1 	bl	800522c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3324      	adds	r3, #36	@ 0x24
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff feec 	bl	800522c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005454:	f002 f88a 	bl	800756c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005458:	2301      	movs	r3, #1
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	e000ed04 	.word	0xe000ed04

08005468 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08e      	sub	sp, #56	@ 0x38
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10b      	bne.n	8005494 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800548e:	bf00      	nop
 8005490:	bf00      	nop
 8005492:	e7fd      	b.n	8005490 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10b      	bne.n	80054b2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054ac:	bf00      	nop
 80054ae:	bf00      	nop
 80054b0:	e7fd      	b.n	80054ae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <xQueueGenericCreateStatic+0x56>
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <xQueueGenericCreateStatic+0x5a>
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <xQueueGenericCreateStatic+0x5c>
 80054c2:	2300      	movs	r3, #0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10b      	bne.n	80054e0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80054c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	623b      	str	r3, [r7, #32]
}
 80054da:	bf00      	nop
 80054dc:	bf00      	nop
 80054de:	e7fd      	b.n	80054dc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d102      	bne.n	80054ec <xQueueGenericCreateStatic+0x84>
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <xQueueGenericCreateStatic+0x88>
 80054ec:	2301      	movs	r3, #1
 80054ee:	e000      	b.n	80054f2 <xQueueGenericCreateStatic+0x8a>
 80054f0:	2300      	movs	r3, #0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10b      	bne.n	800550e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	61fb      	str	r3, [r7, #28]
}
 8005508:	bf00      	nop
 800550a:	bf00      	nop
 800550c:	e7fd      	b.n	800550a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800550e:	2350      	movs	r3, #80	@ 0x50
 8005510:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2b50      	cmp	r3, #80	@ 0x50
 8005516:	d00b      	beq.n	8005530 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	61bb      	str	r3, [r7, #24]
}
 800552a:	bf00      	nop
 800552c:	bf00      	nop
 800552e:	e7fd      	b.n	800552c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005530:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00d      	beq.n	8005558 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800553c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005544:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	4613      	mov	r3, r2
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 f805 	bl	8005562 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800555a:	4618      	mov	r0, r3
 800555c:	3730      	adds	r7, #48	@ 0x30
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]
 800556e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d103      	bne.n	800557e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	e002      	b.n	8005584 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005590:	2101      	movs	r1, #1
 8005592:	69b8      	ldr	r0, [r7, #24]
 8005594:	f7ff fefe 	bl	8005394 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	78fa      	ldrb	r2, [r7, #3]
 800559c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055a0:	bf00      	nop
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08e      	sub	sp, #56	@ 0x38
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055b6:	2300      	movs	r3, #0
 80055b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10b      	bne.n	80055dc <xQueueGenericSend+0x34>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055d6:	bf00      	nop
 80055d8:	bf00      	nop
 80055da:	e7fd      	b.n	80055d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d103      	bne.n	80055ea <xQueueGenericSend+0x42>
 80055e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <xQueueGenericSend+0x46>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <xQueueGenericSend+0x48>
 80055ee:	2300      	movs	r3, #0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10b      	bne.n	800560c <xQueueGenericSend+0x64>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005606:	bf00      	nop
 8005608:	bf00      	nop
 800560a:	e7fd      	b.n	8005608 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d103      	bne.n	800561a <xQueueGenericSend+0x72>
 8005612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <xQueueGenericSend+0x76>
 800561a:	2301      	movs	r3, #1
 800561c:	e000      	b.n	8005620 <xQueueGenericSend+0x78>
 800561e:	2300      	movs	r3, #0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10b      	bne.n	800563c <xQueueGenericSend+0x94>
	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	623b      	str	r3, [r7, #32]
}
 8005636:	bf00      	nop
 8005638:	bf00      	nop
 800563a:	e7fd      	b.n	8005638 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800563c:	f001 f9f6 	bl	8006a2c <xTaskGetSchedulerState>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d102      	bne.n	800564c <xQueueGenericSend+0xa4>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <xQueueGenericSend+0xa8>
 800564c:	2301      	movs	r3, #1
 800564e:	e000      	b.n	8005652 <xQueueGenericSend+0xaa>
 8005650:	2300      	movs	r3, #0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10b      	bne.n	800566e <xQueueGenericSend+0xc6>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	61fb      	str	r3, [r7, #28]
}
 8005668:	bf00      	nop
 800566a:	bf00      	nop
 800566c:	e7fd      	b.n	800566a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800566e:	f001 ff4b 	bl	8007508 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005674:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567a:	429a      	cmp	r2, r3
 800567c:	d302      	bcc.n	8005684 <xQueueGenericSend+0xdc>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d129      	bne.n	80056d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800568a:	f000 fa0f 	bl	8005aac <prvCopyDataToQueue>
 800568e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005694:	2b00      	cmp	r3, #0
 8005696:	d010      	beq.n	80056ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569a:	3324      	adds	r3, #36	@ 0x24
 800569c:	4618      	mov	r0, r3
 800569e:	f000 ffdd 	bl	800665c <xTaskRemoveFromEventList>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d013      	beq.n	80056d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056a8:	4b3f      	ldr	r3, [pc, #252]	@ (80057a8 <xQueueGenericSend+0x200>)
 80056aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	e00a      	b.n	80056d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d007      	beq.n	80056d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056c0:	4b39      	ldr	r3, [pc, #228]	@ (80057a8 <xQueueGenericSend+0x200>)
 80056c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80056d0:	f001 ff4c 	bl	800756c <vPortExitCritical>
				return pdPASS;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e063      	b.n	80057a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d103      	bne.n	80056e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056de:	f001 ff45 	bl	800756c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	e05c      	b.n	80057a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d106      	bne.n	80056fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056ec:	f107 0314 	add.w	r3, r7, #20
 80056f0:	4618      	mov	r0, r3
 80056f2:	f001 f83f 	bl	8006774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056f6:	2301      	movs	r3, #1
 80056f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056fa:	f001 ff37 	bl	800756c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056fe:	f000 fd87 	bl	8006210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005702:	f001 ff01 	bl	8007508 <vPortEnterCritical>
 8005706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005708:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800570c:	b25b      	sxtb	r3, r3
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005712:	d103      	bne.n	800571c <xQueueGenericSend+0x174>
 8005714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800571c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005722:	b25b      	sxtb	r3, r3
 8005724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005728:	d103      	bne.n	8005732 <xQueueGenericSend+0x18a>
 800572a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005732:	f001 ff1b 	bl	800756c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005736:	1d3a      	adds	r2, r7, #4
 8005738:	f107 0314 	add.w	r3, r7, #20
 800573c:	4611      	mov	r1, r2
 800573e:	4618      	mov	r0, r3
 8005740:	f001 f82e 	bl	80067a0 <xTaskCheckForTimeOut>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d124      	bne.n	8005794 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800574a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800574c:	f000 faa6 	bl	8005c9c <prvIsQueueFull>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d018      	beq.n	8005788 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005758:	3310      	adds	r3, #16
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	4611      	mov	r1, r2
 800575e:	4618      	mov	r0, r3
 8005760:	f000 ff2a 	bl	80065b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005764:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005766:	f000 fa31 	bl	8005bcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800576a:	f000 fd5f 	bl	800622c <xTaskResumeAll>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	f47f af7c 	bne.w	800566e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005776:	4b0c      	ldr	r3, [pc, #48]	@ (80057a8 <xQueueGenericSend+0x200>)
 8005778:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	e772      	b.n	800566e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005788:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800578a:	f000 fa1f 	bl	8005bcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800578e:	f000 fd4d 	bl	800622c <xTaskResumeAll>
 8005792:	e76c      	b.n	800566e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005794:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005796:	f000 fa19 	bl	8005bcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800579a:	f000 fd47 	bl	800622c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800579e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3738      	adds	r7, #56	@ 0x38
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	e000ed04 	.word	0xe000ed04

080057ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b090      	sub	sp, #64	@ 0x40
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80057be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10b      	bne.n	80057dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057d6:	bf00      	nop
 80057d8:	bf00      	nop
 80057da:	e7fd      	b.n	80057d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d103      	bne.n	80057ea <xQueueGenericSendFromISR+0x3e>
 80057e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <xQueueGenericSendFromISR+0x42>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <xQueueGenericSendFromISR+0x44>
 80057ee:	2300      	movs	r3, #0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10b      	bne.n	800580c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005806:	bf00      	nop
 8005808:	bf00      	nop
 800580a:	e7fd      	b.n	8005808 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b02      	cmp	r3, #2
 8005810:	d103      	bne.n	800581a <xQueueGenericSendFromISR+0x6e>
 8005812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <xQueueGenericSendFromISR+0x72>
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <xQueueGenericSendFromISR+0x74>
 800581e:	2300      	movs	r3, #0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10b      	bne.n	800583c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	623b      	str	r3, [r7, #32]
}
 8005836:	bf00      	nop
 8005838:	bf00      	nop
 800583a:	e7fd      	b.n	8005838 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800583c:	f001 ff44 	bl	80076c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005840:	f3ef 8211 	mrs	r2, BASEPRI
 8005844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	61fa      	str	r2, [r7, #28]
 8005856:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005858:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800585a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800585c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005864:	429a      	cmp	r2, r3
 8005866:	d302      	bcc.n	800586e <xQueueGenericSendFromISR+0xc2>
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d12f      	bne.n	80058ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800586e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005870:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005874:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005884:	f000 f912 	bl	8005aac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005888:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800588c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005890:	d112      	bne.n	80058b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005896:	2b00      	cmp	r3, #0
 8005898:	d016      	beq.n	80058c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800589a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589c:	3324      	adds	r3, #36	@ 0x24
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fedc 	bl	800665c <xTaskRemoveFromEventList>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00e      	beq.n	80058c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00b      	beq.n	80058c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	e007      	b.n	80058c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80058bc:	3301      	adds	r3, #1
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	b25a      	sxtb	r2, r3
 80058c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80058c8:	2301      	movs	r3, #1
 80058ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80058cc:	e001      	b.n	80058d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80058dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3740      	adds	r7, #64	@ 0x40
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08c      	sub	sp, #48	@ 0x30
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80058f4:	2300      	movs	r3, #0
 80058f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10b      	bne.n	800591a <xQueueReceive+0x32>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	623b      	str	r3, [r7, #32]
}
 8005914:	bf00      	nop
 8005916:	bf00      	nop
 8005918:	e7fd      	b.n	8005916 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d103      	bne.n	8005928 <xQueueReceive+0x40>
 8005920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <xQueueReceive+0x44>
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <xQueueReceive+0x46>
 800592c:	2300      	movs	r3, #0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10b      	bne.n	800594a <xQueueReceive+0x62>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	61fb      	str	r3, [r7, #28]
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop
 8005948:	e7fd      	b.n	8005946 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800594a:	f001 f86f 	bl	8006a2c <xTaskGetSchedulerState>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d102      	bne.n	800595a <xQueueReceive+0x72>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <xQueueReceive+0x76>
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <xQueueReceive+0x78>
 800595e:	2300      	movs	r3, #0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10b      	bne.n	800597c <xQueueReceive+0x94>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	61bb      	str	r3, [r7, #24]
}
 8005976:	bf00      	nop
 8005978:	bf00      	nop
 800597a:	e7fd      	b.n	8005978 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800597c:	f001 fdc4 	bl	8007508 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005984:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01f      	beq.n	80059cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800598c:	68b9      	ldr	r1, [r7, #8]
 800598e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005990:	f000 f8f6 	bl	8005b80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005996:	1e5a      	subs	r2, r3, #1
 8005998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800599c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00f      	beq.n	80059c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a6:	3310      	adds	r3, #16
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fe57 	bl	800665c <xTaskRemoveFromEventList>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d007      	beq.n	80059c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059b4:	4b3c      	ldr	r3, [pc, #240]	@ (8005aa8 <xQueueReceive+0x1c0>)
 80059b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059c4:	f001 fdd2 	bl	800756c <vPortExitCritical>
				return pdPASS;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e069      	b.n	8005aa0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d103      	bne.n	80059da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059d2:	f001 fdcb 	bl	800756c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059d6:	2300      	movs	r3, #0
 80059d8:	e062      	b.n	8005aa0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d106      	bne.n	80059ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059e0:	f107 0310 	add.w	r3, r7, #16
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 fec5 	bl	8006774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059ea:	2301      	movs	r3, #1
 80059ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059ee:	f001 fdbd 	bl	800756c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059f2:	f000 fc0d 	bl	8006210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059f6:	f001 fd87 	bl	8007508 <vPortEnterCritical>
 80059fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a00:	b25b      	sxtb	r3, r3
 8005a02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a06:	d103      	bne.n	8005a10 <xQueueReceive+0x128>
 8005a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a16:	b25b      	sxtb	r3, r3
 8005a18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a1c:	d103      	bne.n	8005a26 <xQueueReceive+0x13e>
 8005a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a26:	f001 fda1 	bl	800756c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a2a:	1d3a      	adds	r2, r7, #4
 8005a2c:	f107 0310 	add.w	r3, r7, #16
 8005a30:	4611      	mov	r1, r2
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 feb4 	bl	80067a0 <xTaskCheckForTimeOut>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d123      	bne.n	8005a86 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a40:	f000 f916 	bl	8005c70 <prvIsQueueEmpty>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d017      	beq.n	8005a7a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4c:	3324      	adds	r3, #36	@ 0x24
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	4611      	mov	r1, r2
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fdb0 	bl	80065b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a5a:	f000 f8b7 	bl	8005bcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a5e:	f000 fbe5 	bl	800622c <xTaskResumeAll>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d189      	bne.n	800597c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005a68:	4b0f      	ldr	r3, [pc, #60]	@ (8005aa8 <xQueueReceive+0x1c0>)
 8005a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	e780      	b.n	800597c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a7c:	f000 f8a6 	bl	8005bcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a80:	f000 fbd4 	bl	800622c <xTaskResumeAll>
 8005a84:	e77a      	b.n	800597c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a88:	f000 f8a0 	bl	8005bcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a8c:	f000 fbce 	bl	800622c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a92:	f000 f8ed 	bl	8005c70 <prvIsQueueEmpty>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f43f af6f 	beq.w	800597c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3730      	adds	r7, #48	@ 0x30
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	e000ed04 	.word	0xe000ed04

08005aac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10d      	bne.n	8005ae6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d14d      	bne.n	8005b6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 ffc6 	bl	8006a68 <xTaskPriorityDisinherit>
 8005adc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	609a      	str	r2, [r3, #8]
 8005ae4:	e043      	b.n	8005b6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d119      	bne.n	8005b20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6858      	ldr	r0, [r3, #4]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af4:	461a      	mov	r2, r3
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	f012 fa71 	bl	8017fde <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b04:	441a      	add	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d32b      	bcc.n	8005b6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	e026      	b.n	8005b6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	68d8      	ldr	r0, [r3, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b28:	461a      	mov	r2, r3
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	f012 fa57 	bl	8017fde <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b38:	425b      	negs	r3, r3
 8005b3a:	441a      	add	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d207      	bcs.n	8005b5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b54:	425b      	negs	r3, r3
 8005b56:	441a      	add	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d105      	bne.n	8005b6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005b76:	697b      	ldr	r3, [r7, #20]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d018      	beq.n	8005bc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9a:	441a      	add	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d303      	bcc.n	8005bb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68d9      	ldr	r1, [r3, #12]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	6838      	ldr	r0, [r7, #0]
 8005bc0:	f012 fa0d 	bl	8017fde <memcpy>
	}
}
 8005bc4:	bf00      	nop
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005bd4:	f001 fc98 	bl	8007508 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005be0:	e011      	b.n	8005c06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d012      	beq.n	8005c10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	3324      	adds	r3, #36	@ 0x24
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fd34 	bl	800665c <xTaskRemoveFromEventList>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005bfa:	f000 fe35 	bl	8006868 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	dce9      	bgt.n	8005be2 <prvUnlockQueue+0x16>
 8005c0e:	e000      	b.n	8005c12 <prvUnlockQueue+0x46>
					break;
 8005c10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	22ff      	movs	r2, #255	@ 0xff
 8005c16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005c1a:	f001 fca7 	bl	800756c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c1e:	f001 fc73 	bl	8007508 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c2a:	e011      	b.n	8005c50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d012      	beq.n	8005c5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	3310      	adds	r3, #16
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 fd0f 	bl	800665c <xTaskRemoveFromEventList>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c44:	f000 fe10 	bl	8006868 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c48:	7bbb      	ldrb	r3, [r7, #14]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	dce9      	bgt.n	8005c2c <prvUnlockQueue+0x60>
 8005c58:	e000      	b.n	8005c5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	22ff      	movs	r2, #255	@ 0xff
 8005c60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005c64:	f001 fc82 	bl	800756c <vPortExitCritical>
}
 8005c68:	bf00      	nop
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c78:	f001 fc46 	bl	8007508 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d102      	bne.n	8005c8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c84:	2301      	movs	r3, #1
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	e001      	b.n	8005c8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c8e:	f001 fc6d 	bl	800756c <vPortExitCritical>

	return xReturn;
 8005c92:	68fb      	ldr	r3, [r7, #12]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ca4:	f001 fc30 	bl	8007508 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d102      	bne.n	8005cba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	e001      	b.n	8005cbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cbe:	f001 fc55 	bl	800756c <vPortExitCritical>

	return xReturn;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	e014      	b.n	8005d06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005cdc:	4a0f      	ldr	r2, [pc, #60]	@ (8005d1c <vQueueAddToRegistry+0x50>)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10b      	bne.n	8005d00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ce8:	490c      	ldr	r1, [pc, #48]	@ (8005d1c <vQueueAddToRegistry+0x50>)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8005d1c <vQueueAddToRegistry+0x50>)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	4413      	add	r3, r2
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005cfe:	e006      	b.n	8005d0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	3301      	adds	r3, #1
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b07      	cmp	r3, #7
 8005d0a:	d9e7      	bls.n	8005cdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d0c:	bf00      	nop
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	20007ea0 	.word	0x20007ea0

08005d20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d30:	f001 fbea 	bl	8007508 <vPortEnterCritical>
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d3a:	b25b      	sxtb	r3, r3
 8005d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d40:	d103      	bne.n	8005d4a <vQueueWaitForMessageRestricted+0x2a>
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d50:	b25b      	sxtb	r3, r3
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d56:	d103      	bne.n	8005d60 <vQueueWaitForMessageRestricted+0x40>
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d60:	f001 fc04 	bl	800756c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d106      	bne.n	8005d7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	3324      	adds	r3, #36	@ 0x24
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	68b9      	ldr	r1, [r7, #8]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 fc45 	bl	8006604 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d7a:	6978      	ldr	r0, [r7, #20]
 8005d7c:	f7ff ff26 	bl	8005bcc <prvUnlockQueue>
	}
 8005d80:	bf00      	nop
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08e      	sub	sp, #56	@ 0x38
 8005d8c:	af04      	add	r7, sp, #16
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10b      	bne.n	8005db4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	623b      	str	r3, [r7, #32]
}
 8005dae:	bf00      	nop
 8005db0:	bf00      	nop
 8005db2:	e7fd      	b.n	8005db0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10b      	bne.n	8005dd2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	61fb      	str	r3, [r7, #28]
}
 8005dcc:	bf00      	nop
 8005dce:	bf00      	nop
 8005dd0:	e7fd      	b.n	8005dce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005dd2:	235c      	movs	r3, #92	@ 0x5c
 8005dd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2b5c      	cmp	r3, #92	@ 0x5c
 8005dda:	d00b      	beq.n	8005df4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	61bb      	str	r3, [r7, #24]
}
 8005dee:	bf00      	nop
 8005df0:	bf00      	nop
 8005df2:	e7fd      	b.n	8005df0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005df4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d01e      	beq.n	8005e3a <xTaskCreateStatic+0xb2>
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d01b      	beq.n	8005e3a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e04:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e0a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e14:	2300      	movs	r3, #0
 8005e16:	9303      	str	r3, [sp, #12]
 8005e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1a:	9302      	str	r3, [sp, #8]
 8005e1c:	f107 0314 	add.w	r3, r7, #20
 8005e20:	9301      	str	r3, [sp, #4]
 8005e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 f850 	bl	8005ed2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e34:	f000 f8de 	bl	8005ff4 <prvAddNewTaskToReadyList>
 8005e38:	e001      	b.n	8005e3e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e3e:	697b      	ldr	r3, [r7, #20]
	}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3728      	adds	r7, #40	@ 0x28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08c      	sub	sp, #48	@ 0x30
 8005e4c:	af04      	add	r7, sp, #16
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	603b      	str	r3, [r7, #0]
 8005e54:	4613      	mov	r3, r2
 8005e56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e58:	88fb      	ldrh	r3, [r7, #6]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 fc75 	bl	800774c <pvPortMalloc>
 8005e62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00e      	beq.n	8005e88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e6a:	205c      	movs	r0, #92	@ 0x5c
 8005e6c:	f001 fc6e 	bl	800774c <pvPortMalloc>
 8005e70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e7e:	e005      	b.n	8005e8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e80:	6978      	ldr	r0, [r7, #20]
 8005e82:	f001 fd31 	bl	80078e8 <vPortFree>
 8005e86:	e001      	b.n	8005e8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d017      	beq.n	8005ec2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e9a:	88fa      	ldrh	r2, [r7, #6]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	9303      	str	r3, [sp, #12]
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	9302      	str	r3, [sp, #8]
 8005ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea6:	9301      	str	r3, [sp, #4]
 8005ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	68b9      	ldr	r1, [r7, #8]
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 f80e 	bl	8005ed2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005eb6:	69f8      	ldr	r0, [r7, #28]
 8005eb8:	f000 f89c 	bl	8005ff4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	61bb      	str	r3, [r7, #24]
 8005ec0:	e002      	b.n	8005ec8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ec2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ec6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ec8:	69bb      	ldr	r3, [r7, #24]
	}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3720      	adds	r7, #32
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b088      	sub	sp, #32
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	607a      	str	r2, [r7, #4]
 8005ede:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	461a      	mov	r2, r3
 8005eea:	21a5      	movs	r1, #165	@ 0xa5
 8005eec:	f011 ff9c 	bl	8017e28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005efa:	3b01      	subs	r3, #1
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	f023 0307 	bic.w	r3, r3, #7
 8005f08:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00b      	beq.n	8005f2c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	617b      	str	r3, [r7, #20]
}
 8005f26:	bf00      	nop
 8005f28:	bf00      	nop
 8005f2a:	e7fd      	b.n	8005f28 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d01f      	beq.n	8005f72 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f32:	2300      	movs	r3, #0
 8005f34:	61fb      	str	r3, [r7, #28]
 8005f36:	e012      	b.n	8005f5e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	7819      	ldrb	r1, [r3, #0]
 8005f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	3334      	adds	r3, #52	@ 0x34
 8005f48:	460a      	mov	r2, r1
 8005f4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	4413      	add	r3, r2
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d006      	beq.n	8005f66 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	61fb      	str	r3, [r7, #28]
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	2b0f      	cmp	r3, #15
 8005f62:	d9e9      	bls.n	8005f38 <prvInitialiseNewTask+0x66>
 8005f64:	e000      	b.n	8005f68 <prvInitialiseNewTask+0x96>
			{
				break;
 8005f66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f70:	e003      	b.n	8005f7a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7c:	2b37      	cmp	r3, #55	@ 0x37
 8005f7e:	d901      	bls.n	8005f84 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f80:	2337      	movs	r3, #55	@ 0x37
 8005f82:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f88:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f8e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f92:	2200      	movs	r2, #0
 8005f94:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f98:	3304      	adds	r3, #4
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7ff f966 	bl	800526c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa2:	3318      	adds	r3, #24
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7ff f961 	bl	800526c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fbe:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	68f9      	ldr	r1, [r7, #12]
 8005fd2:	69b8      	ldr	r0, [r7, #24]
 8005fd4:	f001 f966 	bl	80072a4 <pxPortInitialiseStack>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fdc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fea:	bf00      	nop
 8005fec:	3720      	adds	r7, #32
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ffc:	f001 fa84 	bl	8007508 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006000:	4b2d      	ldr	r3, [pc, #180]	@ (80060b8 <prvAddNewTaskToReadyList+0xc4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3301      	adds	r3, #1
 8006006:	4a2c      	ldr	r2, [pc, #176]	@ (80060b8 <prvAddNewTaskToReadyList+0xc4>)
 8006008:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800600a:	4b2c      	ldr	r3, [pc, #176]	@ (80060bc <prvAddNewTaskToReadyList+0xc8>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d109      	bne.n	8006026 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006012:	4a2a      	ldr	r2, [pc, #168]	@ (80060bc <prvAddNewTaskToReadyList+0xc8>)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006018:	4b27      	ldr	r3, [pc, #156]	@ (80060b8 <prvAddNewTaskToReadyList+0xc4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d110      	bne.n	8006042 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006020:	f000 fc46 	bl	80068b0 <prvInitialiseTaskLists>
 8006024:	e00d      	b.n	8006042 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006026:	4b26      	ldr	r3, [pc, #152]	@ (80060c0 <prvAddNewTaskToReadyList+0xcc>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800602e:	4b23      	ldr	r3, [pc, #140]	@ (80060bc <prvAddNewTaskToReadyList+0xc8>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006038:	429a      	cmp	r2, r3
 800603a:	d802      	bhi.n	8006042 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800603c:	4a1f      	ldr	r2, [pc, #124]	@ (80060bc <prvAddNewTaskToReadyList+0xc8>)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006042:	4b20      	ldr	r3, [pc, #128]	@ (80060c4 <prvAddNewTaskToReadyList+0xd0>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3301      	adds	r3, #1
 8006048:	4a1e      	ldr	r2, [pc, #120]	@ (80060c4 <prvAddNewTaskToReadyList+0xd0>)
 800604a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800604c:	4b1d      	ldr	r3, [pc, #116]	@ (80060c4 <prvAddNewTaskToReadyList+0xd0>)
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006058:	4b1b      	ldr	r3, [pc, #108]	@ (80060c8 <prvAddNewTaskToReadyList+0xd4>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	429a      	cmp	r2, r3
 800605e:	d903      	bls.n	8006068 <prvAddNewTaskToReadyList+0x74>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006064:	4a18      	ldr	r2, [pc, #96]	@ (80060c8 <prvAddNewTaskToReadyList+0xd4>)
 8006066:	6013      	str	r3, [r2, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800606c:	4613      	mov	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4a15      	ldr	r2, [pc, #84]	@ (80060cc <prvAddNewTaskToReadyList+0xd8>)
 8006076:	441a      	add	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3304      	adds	r3, #4
 800607c:	4619      	mov	r1, r3
 800607e:	4610      	mov	r0, r2
 8006080:	f7ff f901 	bl	8005286 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006084:	f001 fa72 	bl	800756c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006088:	4b0d      	ldr	r3, [pc, #52]	@ (80060c0 <prvAddNewTaskToReadyList+0xcc>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00e      	beq.n	80060ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006090:	4b0a      	ldr	r3, [pc, #40]	@ (80060bc <prvAddNewTaskToReadyList+0xc8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609a:	429a      	cmp	r2, r3
 800609c:	d207      	bcs.n	80060ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800609e:	4b0c      	ldr	r3, [pc, #48]	@ (80060d0 <prvAddNewTaskToReadyList+0xdc>)
 80060a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060ae:	bf00      	nop
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	200083b4 	.word	0x200083b4
 80060bc:	20007ee0 	.word	0x20007ee0
 80060c0:	200083c0 	.word	0x200083c0
 80060c4:	200083d0 	.word	0x200083d0
 80060c8:	200083bc 	.word	0x200083bc
 80060cc:	20007ee4 	.word	0x20007ee4
 80060d0:	e000ed04 	.word	0xe000ed04

080060d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d018      	beq.n	8006118 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060e6:	4b14      	ldr	r3, [pc, #80]	@ (8006138 <vTaskDelay+0x64>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <vTaskDelay+0x32>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	60bb      	str	r3, [r7, #8]
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	e7fd      	b.n	8006102 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006106:	f000 f883 	bl	8006210 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800610a:	2100      	movs	r1, #0
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fd1b 	bl	8006b48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006112:	f000 f88b 	bl	800622c <xTaskResumeAll>
 8006116:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d107      	bne.n	800612e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800611e:	4b07      	ldr	r3, [pc, #28]	@ (800613c <vTaskDelay+0x68>)
 8006120:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800612e:	bf00      	nop
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	200083dc 	.word	0x200083dc
 800613c:	e000ed04 	.word	0xe000ed04

08006140 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08a      	sub	sp, #40	@ 0x28
 8006144:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006146:	2300      	movs	r3, #0
 8006148:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800614a:	2300      	movs	r3, #0
 800614c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800614e:	463a      	mov	r2, r7
 8006150:	1d39      	adds	r1, r7, #4
 8006152:	f107 0308 	add.w	r3, r7, #8
 8006156:	4618      	mov	r0, r3
 8006158:	f7ff f834 	bl	80051c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	9202      	str	r2, [sp, #8]
 8006164:	9301      	str	r3, [sp, #4]
 8006166:	2300      	movs	r3, #0
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	2300      	movs	r3, #0
 800616c:	460a      	mov	r2, r1
 800616e:	4922      	ldr	r1, [pc, #136]	@ (80061f8 <vTaskStartScheduler+0xb8>)
 8006170:	4822      	ldr	r0, [pc, #136]	@ (80061fc <vTaskStartScheduler+0xbc>)
 8006172:	f7ff fe09 	bl	8005d88 <xTaskCreateStatic>
 8006176:	4603      	mov	r3, r0
 8006178:	4a21      	ldr	r2, [pc, #132]	@ (8006200 <vTaskStartScheduler+0xc0>)
 800617a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800617c:	4b20      	ldr	r3, [pc, #128]	@ (8006200 <vTaskStartScheduler+0xc0>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006184:	2301      	movs	r3, #1
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	e001      	b.n	800618e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800618a:	2300      	movs	r3, #0
 800618c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d102      	bne.n	800619a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006194:	f000 fd2c 	bl	8006bf0 <xTimerCreateTimerTask>
 8006198:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d116      	bne.n	80061ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	613b      	str	r3, [r7, #16]
}
 80061b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061b4:	4b13      	ldr	r3, [pc, #76]	@ (8006204 <vTaskStartScheduler+0xc4>)
 80061b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80061ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061bc:	4b12      	ldr	r3, [pc, #72]	@ (8006208 <vTaskStartScheduler+0xc8>)
 80061be:	2201      	movs	r2, #1
 80061c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061c2:	4b12      	ldr	r3, [pc, #72]	@ (800620c <vTaskStartScheduler+0xcc>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061c8:	f001 f8fa 	bl	80073c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061cc:	e00f      	b.n	80061ee <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061d4:	d10b      	bne.n	80061ee <vTaskStartScheduler+0xae>
	__asm volatile
 80061d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	60fb      	str	r3, [r7, #12]
}
 80061e8:	bf00      	nop
 80061ea:	bf00      	nop
 80061ec:	e7fd      	b.n	80061ea <vTaskStartScheduler+0xaa>
}
 80061ee:	bf00      	nop
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	08018d58 	.word	0x08018d58
 80061fc:	08006881 	.word	0x08006881
 8006200:	200083d8 	.word	0x200083d8
 8006204:	200083d4 	.word	0x200083d4
 8006208:	200083c0 	.word	0x200083c0
 800620c:	200083b8 	.word	0x200083b8

08006210 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006210:	b480      	push	{r7}
 8006212:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006214:	4b04      	ldr	r3, [pc, #16]	@ (8006228 <vTaskSuspendAll+0x18>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3301      	adds	r3, #1
 800621a:	4a03      	ldr	r2, [pc, #12]	@ (8006228 <vTaskSuspendAll+0x18>)
 800621c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800621e:	bf00      	nop
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	200083dc 	.word	0x200083dc

0800622c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006232:	2300      	movs	r3, #0
 8006234:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006236:	2300      	movs	r3, #0
 8006238:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800623a:	4b42      	ldr	r3, [pc, #264]	@ (8006344 <xTaskResumeAll+0x118>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10b      	bne.n	800625a <xTaskResumeAll+0x2e>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	603b      	str	r3, [r7, #0]
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	e7fd      	b.n	8006256 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800625a:	f001 f955 	bl	8007508 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800625e:	4b39      	ldr	r3, [pc, #228]	@ (8006344 <xTaskResumeAll+0x118>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3b01      	subs	r3, #1
 8006264:	4a37      	ldr	r2, [pc, #220]	@ (8006344 <xTaskResumeAll+0x118>)
 8006266:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006268:	4b36      	ldr	r3, [pc, #216]	@ (8006344 <xTaskResumeAll+0x118>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d162      	bne.n	8006336 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006270:	4b35      	ldr	r3, [pc, #212]	@ (8006348 <xTaskResumeAll+0x11c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d05e      	beq.n	8006336 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006278:	e02f      	b.n	80062da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800627a:	4b34      	ldr	r3, [pc, #208]	@ (800634c <xTaskResumeAll+0x120>)
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3318      	adds	r3, #24
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff f85a 	bl	8005340 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3304      	adds	r3, #4
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff f855 	bl	8005340 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800629a:	4b2d      	ldr	r3, [pc, #180]	@ (8006350 <xTaskResumeAll+0x124>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d903      	bls.n	80062aa <xTaskResumeAll+0x7e>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006350 <xTaskResumeAll+0x124>)
 80062a8:	6013      	str	r3, [r2, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ae:	4613      	mov	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4a27      	ldr	r2, [pc, #156]	@ (8006354 <xTaskResumeAll+0x128>)
 80062b8:	441a      	add	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3304      	adds	r3, #4
 80062be:	4619      	mov	r1, r3
 80062c0:	4610      	mov	r0, r2
 80062c2:	f7fe ffe0 	bl	8005286 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ca:	4b23      	ldr	r3, [pc, #140]	@ (8006358 <xTaskResumeAll+0x12c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d302      	bcc.n	80062da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80062d4:	4b21      	ldr	r3, [pc, #132]	@ (800635c <xTaskResumeAll+0x130>)
 80062d6:	2201      	movs	r2, #1
 80062d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062da:	4b1c      	ldr	r3, [pc, #112]	@ (800634c <xTaskResumeAll+0x120>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1cb      	bne.n	800627a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062e8:	f000 fb80 	bl	80069ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80062ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006360 <xTaskResumeAll+0x134>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d010      	beq.n	800631a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062f8:	f000 f846 	bl	8006388 <xTaskIncrementTick>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d002      	beq.n	8006308 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006302:	4b16      	ldr	r3, [pc, #88]	@ (800635c <xTaskResumeAll+0x130>)
 8006304:	2201      	movs	r2, #1
 8006306:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3b01      	subs	r3, #1
 800630c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1f1      	bne.n	80062f8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006314:	4b12      	ldr	r3, [pc, #72]	@ (8006360 <xTaskResumeAll+0x134>)
 8006316:	2200      	movs	r2, #0
 8006318:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800631a:	4b10      	ldr	r3, [pc, #64]	@ (800635c <xTaskResumeAll+0x130>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d009      	beq.n	8006336 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006322:	2301      	movs	r3, #1
 8006324:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006326:	4b0f      	ldr	r3, [pc, #60]	@ (8006364 <xTaskResumeAll+0x138>)
 8006328:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006336:	f001 f919 	bl	800756c <vPortExitCritical>

	return xAlreadyYielded;
 800633a:	68bb      	ldr	r3, [r7, #8]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	200083dc 	.word	0x200083dc
 8006348:	200083b4 	.word	0x200083b4
 800634c:	20008374 	.word	0x20008374
 8006350:	200083bc 	.word	0x200083bc
 8006354:	20007ee4 	.word	0x20007ee4
 8006358:	20007ee0 	.word	0x20007ee0
 800635c:	200083c8 	.word	0x200083c8
 8006360:	200083c4 	.word	0x200083c4
 8006364:	e000ed04 	.word	0xe000ed04

08006368 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800636e:	4b05      	ldr	r3, [pc, #20]	@ (8006384 <xTaskGetTickCount+0x1c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006374:	687b      	ldr	r3, [r7, #4]
}
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	200083b8 	.word	0x200083b8

08006388 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800638e:	2300      	movs	r3, #0
 8006390:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006392:	4b4f      	ldr	r3, [pc, #316]	@ (80064d0 <xTaskIncrementTick+0x148>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	f040 8090 	bne.w	80064bc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800639c:	4b4d      	ldr	r3, [pc, #308]	@ (80064d4 <xTaskIncrementTick+0x14c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3301      	adds	r3, #1
 80063a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063a4:	4a4b      	ldr	r2, [pc, #300]	@ (80064d4 <xTaskIncrementTick+0x14c>)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d121      	bne.n	80063f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80063b0:	4b49      	ldr	r3, [pc, #292]	@ (80064d8 <xTaskIncrementTick+0x150>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00b      	beq.n	80063d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	603b      	str	r3, [r7, #0]
}
 80063cc:	bf00      	nop
 80063ce:	bf00      	nop
 80063d0:	e7fd      	b.n	80063ce <xTaskIncrementTick+0x46>
 80063d2:	4b41      	ldr	r3, [pc, #260]	@ (80064d8 <xTaskIncrementTick+0x150>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	4b40      	ldr	r3, [pc, #256]	@ (80064dc <xTaskIncrementTick+0x154>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a3e      	ldr	r2, [pc, #248]	@ (80064d8 <xTaskIncrementTick+0x150>)
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	4a3e      	ldr	r2, [pc, #248]	@ (80064dc <xTaskIncrementTick+0x154>)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	4b3e      	ldr	r3, [pc, #248]	@ (80064e0 <xTaskIncrementTick+0x158>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3301      	adds	r3, #1
 80063ec:	4a3c      	ldr	r2, [pc, #240]	@ (80064e0 <xTaskIncrementTick+0x158>)
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	f000 fafc 	bl	80069ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063f4:	4b3b      	ldr	r3, [pc, #236]	@ (80064e4 <xTaskIncrementTick+0x15c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d349      	bcc.n	8006492 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063fe:	4b36      	ldr	r3, [pc, #216]	@ (80064d8 <xTaskIncrementTick+0x150>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d104      	bne.n	8006412 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006408:	4b36      	ldr	r3, [pc, #216]	@ (80064e4 <xTaskIncrementTick+0x15c>)
 800640a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800640e:	601a      	str	r2, [r3, #0]
					break;
 8006410:	e03f      	b.n	8006492 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006412:	4b31      	ldr	r3, [pc, #196]	@ (80064d8 <xTaskIncrementTick+0x150>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	429a      	cmp	r2, r3
 8006428:	d203      	bcs.n	8006432 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800642a:	4a2e      	ldr	r2, [pc, #184]	@ (80064e4 <xTaskIncrementTick+0x15c>)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006430:	e02f      	b.n	8006492 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	3304      	adds	r3, #4
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe ff82 	bl	8005340 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006440:	2b00      	cmp	r3, #0
 8006442:	d004      	beq.n	800644e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	3318      	adds	r3, #24
 8006448:	4618      	mov	r0, r3
 800644a:	f7fe ff79 	bl	8005340 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006452:	4b25      	ldr	r3, [pc, #148]	@ (80064e8 <xTaskIncrementTick+0x160>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d903      	bls.n	8006462 <xTaskIncrementTick+0xda>
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645e:	4a22      	ldr	r2, [pc, #136]	@ (80064e8 <xTaskIncrementTick+0x160>)
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4a1f      	ldr	r2, [pc, #124]	@ (80064ec <xTaskIncrementTick+0x164>)
 8006470:	441a      	add	r2, r3
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	3304      	adds	r3, #4
 8006476:	4619      	mov	r1, r3
 8006478:	4610      	mov	r0, r2
 800647a:	f7fe ff04 	bl	8005286 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006482:	4b1b      	ldr	r3, [pc, #108]	@ (80064f0 <xTaskIncrementTick+0x168>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006488:	429a      	cmp	r2, r3
 800648a:	d3b8      	bcc.n	80063fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800648c:	2301      	movs	r3, #1
 800648e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006490:	e7b5      	b.n	80063fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006492:	4b17      	ldr	r3, [pc, #92]	@ (80064f0 <xTaskIncrementTick+0x168>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006498:	4914      	ldr	r1, [pc, #80]	@ (80064ec <xTaskIncrementTick+0x164>)
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d901      	bls.n	80064ae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80064aa:	2301      	movs	r3, #1
 80064ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80064ae:	4b11      	ldr	r3, [pc, #68]	@ (80064f4 <xTaskIncrementTick+0x16c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d007      	beq.n	80064c6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80064b6:	2301      	movs	r3, #1
 80064b8:	617b      	str	r3, [r7, #20]
 80064ba:	e004      	b.n	80064c6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80064bc:	4b0e      	ldr	r3, [pc, #56]	@ (80064f8 <xTaskIncrementTick+0x170>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3301      	adds	r3, #1
 80064c2:	4a0d      	ldr	r2, [pc, #52]	@ (80064f8 <xTaskIncrementTick+0x170>)
 80064c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80064c6:	697b      	ldr	r3, [r7, #20]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	200083dc 	.word	0x200083dc
 80064d4:	200083b8 	.word	0x200083b8
 80064d8:	2000836c 	.word	0x2000836c
 80064dc:	20008370 	.word	0x20008370
 80064e0:	200083cc 	.word	0x200083cc
 80064e4:	200083d4 	.word	0x200083d4
 80064e8:	200083bc 	.word	0x200083bc
 80064ec:	20007ee4 	.word	0x20007ee4
 80064f0:	20007ee0 	.word	0x20007ee0
 80064f4:	200083c8 	.word	0x200083c8
 80064f8:	200083c4 	.word	0x200083c4

080064fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006502:	4b28      	ldr	r3, [pc, #160]	@ (80065a4 <vTaskSwitchContext+0xa8>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800650a:	4b27      	ldr	r3, [pc, #156]	@ (80065a8 <vTaskSwitchContext+0xac>)
 800650c:	2201      	movs	r2, #1
 800650e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006510:	e042      	b.n	8006598 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006512:	4b25      	ldr	r3, [pc, #148]	@ (80065a8 <vTaskSwitchContext+0xac>)
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006518:	4b24      	ldr	r3, [pc, #144]	@ (80065ac <vTaskSwitchContext+0xb0>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	e011      	b.n	8006544 <vTaskSwitchContext+0x48>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10b      	bne.n	800653e <vTaskSwitchContext+0x42>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	607b      	str	r3, [r7, #4]
}
 8006538:	bf00      	nop
 800653a:	bf00      	nop
 800653c:	e7fd      	b.n	800653a <vTaskSwitchContext+0x3e>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3b01      	subs	r3, #1
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	491a      	ldr	r1, [pc, #104]	@ (80065b0 <vTaskSwitchContext+0xb4>)
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4613      	mov	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	440b      	add	r3, r1
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d0e3      	beq.n	8006520 <vTaskSwitchContext+0x24>
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4a13      	ldr	r2, [pc, #76]	@ (80065b0 <vTaskSwitchContext+0xb4>)
 8006564:	4413      	add	r3, r2
 8006566:	60bb      	str	r3, [r7, #8]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	605a      	str	r2, [r3, #4]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	3308      	adds	r3, #8
 800657a:	429a      	cmp	r2, r3
 800657c:	d104      	bne.n	8006588 <vTaskSwitchContext+0x8c>
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	605a      	str	r2, [r3, #4]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	4a09      	ldr	r2, [pc, #36]	@ (80065b4 <vTaskSwitchContext+0xb8>)
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	4a06      	ldr	r2, [pc, #24]	@ (80065ac <vTaskSwitchContext+0xb0>)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6013      	str	r3, [r2, #0]
}
 8006598:	bf00      	nop
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	200083dc 	.word	0x200083dc
 80065a8:	200083c8 	.word	0x200083c8
 80065ac:	200083bc 	.word	0x200083bc
 80065b0:	20007ee4 	.word	0x20007ee4
 80065b4:	20007ee0 	.word	0x20007ee0

080065b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10b      	bne.n	80065e0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	60fb      	str	r3, [r7, #12]
}
 80065da:	bf00      	nop
 80065dc:	bf00      	nop
 80065de:	e7fd      	b.n	80065dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065e0:	4b07      	ldr	r3, [pc, #28]	@ (8006600 <vTaskPlaceOnEventList+0x48>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3318      	adds	r3, #24
 80065e6:	4619      	mov	r1, r3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7fe fe70 	bl	80052ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065ee:	2101      	movs	r1, #1
 80065f0:	6838      	ldr	r0, [r7, #0]
 80065f2:	f000 faa9 	bl	8006b48 <prvAddCurrentTaskToDelayedList>
}
 80065f6:	bf00      	nop
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20007ee0 	.word	0x20007ee0

08006604 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10b      	bne.n	800662e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	617b      	str	r3, [r7, #20]
}
 8006628:	bf00      	nop
 800662a:	bf00      	nop
 800662c:	e7fd      	b.n	800662a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800662e:	4b0a      	ldr	r3, [pc, #40]	@ (8006658 <vTaskPlaceOnEventListRestricted+0x54>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3318      	adds	r3, #24
 8006634:	4619      	mov	r1, r3
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f7fe fe25 	bl	8005286 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006642:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006646:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	68b8      	ldr	r0, [r7, #8]
 800664c:	f000 fa7c 	bl	8006b48 <prvAddCurrentTaskToDelayedList>
	}
 8006650:	bf00      	nop
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20007ee0 	.word	0x20007ee0

0800665c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10b      	bne.n	800668a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	60fb      	str	r3, [r7, #12]
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop
 8006688:	e7fd      	b.n	8006686 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	3318      	adds	r3, #24
 800668e:	4618      	mov	r0, r3
 8006690:	f7fe fe56 	bl	8005340 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006694:	4b1d      	ldr	r3, [pc, #116]	@ (800670c <xTaskRemoveFromEventList+0xb0>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d11d      	bne.n	80066d8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	3304      	adds	r3, #4
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fe fe4d 	bl	8005340 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066aa:	4b19      	ldr	r3, [pc, #100]	@ (8006710 <xTaskRemoveFromEventList+0xb4>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d903      	bls.n	80066ba <xTaskRemoveFromEventList+0x5e>
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b6:	4a16      	ldr	r2, [pc, #88]	@ (8006710 <xTaskRemoveFromEventList+0xb4>)
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066be:	4613      	mov	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4a13      	ldr	r2, [pc, #76]	@ (8006714 <xTaskRemoveFromEventList+0xb8>)
 80066c8:	441a      	add	r2, r3
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	3304      	adds	r3, #4
 80066ce:	4619      	mov	r1, r3
 80066d0:	4610      	mov	r0, r2
 80066d2:	f7fe fdd8 	bl	8005286 <vListInsertEnd>
 80066d6:	e005      	b.n	80066e4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	3318      	adds	r3, #24
 80066dc:	4619      	mov	r1, r3
 80066de:	480e      	ldr	r0, [pc, #56]	@ (8006718 <xTaskRemoveFromEventList+0xbc>)
 80066e0:	f7fe fdd1 	bl	8005286 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e8:	4b0c      	ldr	r3, [pc, #48]	@ (800671c <xTaskRemoveFromEventList+0xc0>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d905      	bls.n	80066fe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066f2:	2301      	movs	r3, #1
 80066f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006720 <xTaskRemoveFromEventList+0xc4>)
 80066f8:	2201      	movs	r2, #1
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	e001      	b.n	8006702 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80066fe:	2300      	movs	r3, #0
 8006700:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006702:	697b      	ldr	r3, [r7, #20]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	200083dc 	.word	0x200083dc
 8006710:	200083bc 	.word	0x200083bc
 8006714:	20007ee4 	.word	0x20007ee4
 8006718:	20008374 	.word	0x20008374
 800671c:	20007ee0 	.word	0x20007ee0
 8006720:	200083c8 	.word	0x200083c8

08006724 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10b      	bne.n	800674a <vTaskSetTimeOutState+0x26>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	60fb      	str	r3, [r7, #12]
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop
 8006748:	e7fd      	b.n	8006746 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800674a:	f000 fedd 	bl	8007508 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800674e:	4b07      	ldr	r3, [pc, #28]	@ (800676c <vTaskSetTimeOutState+0x48>)
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8006756:	4b06      	ldr	r3, [pc, #24]	@ (8006770 <vTaskSetTimeOutState+0x4c>)
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800675e:	f000 ff05 	bl	800756c <vPortExitCritical>
}
 8006762:	bf00      	nop
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	200083cc 	.word	0x200083cc
 8006770:	200083b8 	.word	0x200083b8

08006774 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800677c:	4b06      	ldr	r3, [pc, #24]	@ (8006798 <vTaskInternalSetTimeOutState+0x24>)
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006784:	4b05      	ldr	r3, [pc, #20]	@ (800679c <vTaskInternalSetTimeOutState+0x28>)
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	605a      	str	r2, [r3, #4]
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	200083cc 	.word	0x200083cc
 800679c:	200083b8 	.word	0x200083b8

080067a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10b      	bne.n	80067c8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	613b      	str	r3, [r7, #16]
}
 80067c2:	bf00      	nop
 80067c4:	bf00      	nop
 80067c6:	e7fd      	b.n	80067c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10b      	bne.n	80067e6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	60fb      	str	r3, [r7, #12]
}
 80067e0:	bf00      	nop
 80067e2:	bf00      	nop
 80067e4:	e7fd      	b.n	80067e2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80067e6:	f000 fe8f 	bl	8007508 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067ea:	4b1d      	ldr	r3, [pc, #116]	@ (8006860 <xTaskCheckForTimeOut+0xc0>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006802:	d102      	bne.n	800680a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006804:	2300      	movs	r3, #0
 8006806:	61fb      	str	r3, [r7, #28]
 8006808:	e023      	b.n	8006852 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	4b15      	ldr	r3, [pc, #84]	@ (8006864 <xTaskCheckForTimeOut+0xc4>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	429a      	cmp	r2, r3
 8006814:	d007      	beq.n	8006826 <xTaskCheckForTimeOut+0x86>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	429a      	cmp	r2, r3
 800681e:	d302      	bcc.n	8006826 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006820:	2301      	movs	r3, #1
 8006822:	61fb      	str	r3, [r7, #28]
 8006824:	e015      	b.n	8006852 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	429a      	cmp	r2, r3
 800682e:	d20b      	bcs.n	8006848 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	1ad2      	subs	r2, r2, r3
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff ff99 	bl	8006774 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006842:	2300      	movs	r3, #0
 8006844:	61fb      	str	r3, [r7, #28]
 8006846:	e004      	b.n	8006852 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2200      	movs	r2, #0
 800684c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800684e:	2301      	movs	r3, #1
 8006850:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006852:	f000 fe8b 	bl	800756c <vPortExitCritical>

	return xReturn;
 8006856:	69fb      	ldr	r3, [r7, #28]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3720      	adds	r7, #32
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	200083b8 	.word	0x200083b8
 8006864:	200083cc 	.word	0x200083cc

08006868 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006868:	b480      	push	{r7}
 800686a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800686c:	4b03      	ldr	r3, [pc, #12]	@ (800687c <vTaskMissedYield+0x14>)
 800686e:	2201      	movs	r2, #1
 8006870:	601a      	str	r2, [r3, #0]
}
 8006872:	bf00      	nop
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	200083c8 	.word	0x200083c8

08006880 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006888:	f000 f852 	bl	8006930 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800688c:	4b06      	ldr	r3, [pc, #24]	@ (80068a8 <prvIdleTask+0x28>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d9f9      	bls.n	8006888 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006894:	4b05      	ldr	r3, [pc, #20]	@ (80068ac <prvIdleTask+0x2c>)
 8006896:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068a4:	e7f0      	b.n	8006888 <prvIdleTask+0x8>
 80068a6:	bf00      	nop
 80068a8:	20007ee4 	.word	0x20007ee4
 80068ac:	e000ed04 	.word	0xe000ed04

080068b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068b6:	2300      	movs	r3, #0
 80068b8:	607b      	str	r3, [r7, #4]
 80068ba:	e00c      	b.n	80068d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4a12      	ldr	r2, [pc, #72]	@ (8006910 <prvInitialiseTaskLists+0x60>)
 80068c8:	4413      	add	r3, r2
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe fcae 	bl	800522c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3301      	adds	r3, #1
 80068d4:	607b      	str	r3, [r7, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b37      	cmp	r3, #55	@ 0x37
 80068da:	d9ef      	bls.n	80068bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068dc:	480d      	ldr	r0, [pc, #52]	@ (8006914 <prvInitialiseTaskLists+0x64>)
 80068de:	f7fe fca5 	bl	800522c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068e2:	480d      	ldr	r0, [pc, #52]	@ (8006918 <prvInitialiseTaskLists+0x68>)
 80068e4:	f7fe fca2 	bl	800522c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068e8:	480c      	ldr	r0, [pc, #48]	@ (800691c <prvInitialiseTaskLists+0x6c>)
 80068ea:	f7fe fc9f 	bl	800522c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068ee:	480c      	ldr	r0, [pc, #48]	@ (8006920 <prvInitialiseTaskLists+0x70>)
 80068f0:	f7fe fc9c 	bl	800522c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068f4:	480b      	ldr	r0, [pc, #44]	@ (8006924 <prvInitialiseTaskLists+0x74>)
 80068f6:	f7fe fc99 	bl	800522c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006928 <prvInitialiseTaskLists+0x78>)
 80068fc:	4a05      	ldr	r2, [pc, #20]	@ (8006914 <prvInitialiseTaskLists+0x64>)
 80068fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006900:	4b0a      	ldr	r3, [pc, #40]	@ (800692c <prvInitialiseTaskLists+0x7c>)
 8006902:	4a05      	ldr	r2, [pc, #20]	@ (8006918 <prvInitialiseTaskLists+0x68>)
 8006904:	601a      	str	r2, [r3, #0]
}
 8006906:	bf00      	nop
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	20007ee4 	.word	0x20007ee4
 8006914:	20008344 	.word	0x20008344
 8006918:	20008358 	.word	0x20008358
 800691c:	20008374 	.word	0x20008374
 8006920:	20008388 	.word	0x20008388
 8006924:	200083a0 	.word	0x200083a0
 8006928:	2000836c 	.word	0x2000836c
 800692c:	20008370 	.word	0x20008370

08006930 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006936:	e019      	b.n	800696c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006938:	f000 fde6 	bl	8007508 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800693c:	4b10      	ldr	r3, [pc, #64]	@ (8006980 <prvCheckTasksWaitingTermination+0x50>)
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	3304      	adds	r3, #4
 8006948:	4618      	mov	r0, r3
 800694a:	f7fe fcf9 	bl	8005340 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800694e:	4b0d      	ldr	r3, [pc, #52]	@ (8006984 <prvCheckTasksWaitingTermination+0x54>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3b01      	subs	r3, #1
 8006954:	4a0b      	ldr	r2, [pc, #44]	@ (8006984 <prvCheckTasksWaitingTermination+0x54>)
 8006956:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006958:	4b0b      	ldr	r3, [pc, #44]	@ (8006988 <prvCheckTasksWaitingTermination+0x58>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3b01      	subs	r3, #1
 800695e:	4a0a      	ldr	r2, [pc, #40]	@ (8006988 <prvCheckTasksWaitingTermination+0x58>)
 8006960:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006962:	f000 fe03 	bl	800756c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f810 	bl	800698c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800696c:	4b06      	ldr	r3, [pc, #24]	@ (8006988 <prvCheckTasksWaitingTermination+0x58>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e1      	bne.n	8006938 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20008388 	.word	0x20008388
 8006984:	200083b4 	.word	0x200083b4
 8006988:	2000839c 	.word	0x2000839c

0800698c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800699a:	2b00      	cmp	r3, #0
 800699c:	d108      	bne.n	80069b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 ffa0 	bl	80078e8 <vPortFree>
				vPortFree( pxTCB );
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 ff9d 	bl	80078e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069ae:	e019      	b.n	80069e4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d103      	bne.n	80069c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 ff94 	bl	80078e8 <vPortFree>
	}
 80069c0:	e010      	b.n	80069e4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d00b      	beq.n	80069e4 <prvDeleteTCB+0x58>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	60fb      	str	r3, [r7, #12]
}
 80069de:	bf00      	nop
 80069e0:	bf00      	nop
 80069e2:	e7fd      	b.n	80069e0 <prvDeleteTCB+0x54>
	}
 80069e4:	bf00      	nop
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006a24 <prvResetNextTaskUnblockTime+0x38>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d104      	bne.n	8006a06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006a28 <prvResetNextTaskUnblockTime+0x3c>)
 80069fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a04:	e008      	b.n	8006a18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a06:	4b07      	ldr	r3, [pc, #28]	@ (8006a24 <prvResetNextTaskUnblockTime+0x38>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	4a04      	ldr	r2, [pc, #16]	@ (8006a28 <prvResetNextTaskUnblockTime+0x3c>)
 8006a16:	6013      	str	r3, [r2, #0]
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	2000836c 	.word	0x2000836c
 8006a28:	200083d4 	.word	0x200083d4

08006a2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a32:	4b0b      	ldr	r3, [pc, #44]	@ (8006a60 <xTaskGetSchedulerState+0x34>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d102      	bne.n	8006a40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	607b      	str	r3, [r7, #4]
 8006a3e:	e008      	b.n	8006a52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a40:	4b08      	ldr	r3, [pc, #32]	@ (8006a64 <xTaskGetSchedulerState+0x38>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d102      	bne.n	8006a4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a48:	2302      	movs	r3, #2
 8006a4a:	607b      	str	r3, [r7, #4]
 8006a4c:	e001      	b.n	8006a52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a52:	687b      	ldr	r3, [r7, #4]
	}
 8006a54:	4618      	mov	r0, r3
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	200083c0 	.word	0x200083c0
 8006a64:	200083dc 	.word	0x200083dc

08006a68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a74:	2300      	movs	r3, #0
 8006a76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d058      	beq.n	8006b30 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8006b3c <xTaskPriorityDisinherit+0xd4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d00b      	beq.n	8006aa0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	60fb      	str	r3, [r7, #12]
}
 8006a9a:	bf00      	nop
 8006a9c:	bf00      	nop
 8006a9e:	e7fd      	b.n	8006a9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10b      	bne.n	8006ac0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	60bb      	str	r3, [r7, #8]
}
 8006aba:	bf00      	nop
 8006abc:	bf00      	nop
 8006abe:	e7fd      	b.n	8006abc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ac4:	1e5a      	subs	r2, r3, #1
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d02c      	beq.n	8006b30 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d128      	bne.n	8006b30 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fe fc2c 	bl	8005340 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b00:	4b0f      	ldr	r3, [pc, #60]	@ (8006b40 <xTaskPriorityDisinherit+0xd8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d903      	bls.n	8006b10 <xTaskPriorityDisinherit+0xa8>
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8006b40 <xTaskPriorityDisinherit+0xd8>)
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4a09      	ldr	r2, [pc, #36]	@ (8006b44 <xTaskPriorityDisinherit+0xdc>)
 8006b1e:	441a      	add	r2, r3
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f7fe fbad 	bl	8005286 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b30:	697b      	ldr	r3, [r7, #20]
	}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20007ee0 	.word	0x20007ee0
 8006b40:	200083bc 	.word	0x200083bc
 8006b44:	20007ee4 	.word	0x20007ee4

08006b48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b52:	4b21      	ldr	r3, [pc, #132]	@ (8006bd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b58:	4b20      	ldr	r3, [pc, #128]	@ (8006bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe fbee 	bl	8005340 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b6a:	d10a      	bne.n	8006b82 <prvAddCurrentTaskToDelayedList+0x3a>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d007      	beq.n	8006b82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b72:	4b1a      	ldr	r3, [pc, #104]	@ (8006bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3304      	adds	r3, #4
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4819      	ldr	r0, [pc, #100]	@ (8006be0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006b7c:	f7fe fb83 	bl	8005286 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b80:	e026      	b.n	8006bd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4413      	add	r3, r2
 8006b88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b8a:	4b14      	ldr	r3, [pc, #80]	@ (8006bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d209      	bcs.n	8006bae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b9a:	4b12      	ldr	r3, [pc, #72]	@ (8006be4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8006bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3304      	adds	r3, #4
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	4610      	mov	r0, r2
 8006ba8:	f7fe fb91 	bl	80052ce <vListInsert>
}
 8006bac:	e010      	b.n	8006bd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bae:	4b0e      	ldr	r3, [pc, #56]	@ (8006be8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4610      	mov	r0, r2
 8006bbc:	f7fe fb87 	bl	80052ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8006bec <prvAddCurrentTaskToDelayedList+0xa4>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d202      	bcs.n	8006bd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006bca:	4a08      	ldr	r2, [pc, #32]	@ (8006bec <prvAddCurrentTaskToDelayedList+0xa4>)
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	6013      	str	r3, [r2, #0]
}
 8006bd0:	bf00      	nop
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	200083b8 	.word	0x200083b8
 8006bdc:	20007ee0 	.word	0x20007ee0
 8006be0:	200083a0 	.word	0x200083a0
 8006be4:	20008370 	.word	0x20008370
 8006be8:	2000836c 	.word	0x2000836c
 8006bec:	200083d4 	.word	0x200083d4

08006bf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08a      	sub	sp, #40	@ 0x28
 8006bf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006bfa:	f000 fb13 	bl	8007224 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8006c74 <xTimerCreateTimerTask+0x84>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d021      	beq.n	8006c4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c0e:	1d3a      	adds	r2, r7, #4
 8006c10:	f107 0108 	add.w	r1, r7, #8
 8006c14:	f107 030c 	add.w	r3, r7, #12
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fe faed 	bl	80051f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	9202      	str	r2, [sp, #8]
 8006c26:	9301      	str	r3, [sp, #4]
 8006c28:	2302      	movs	r3, #2
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	460a      	mov	r2, r1
 8006c30:	4911      	ldr	r1, [pc, #68]	@ (8006c78 <xTimerCreateTimerTask+0x88>)
 8006c32:	4812      	ldr	r0, [pc, #72]	@ (8006c7c <xTimerCreateTimerTask+0x8c>)
 8006c34:	f7ff f8a8 	bl	8005d88 <xTaskCreateStatic>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	4a11      	ldr	r2, [pc, #68]	@ (8006c80 <xTimerCreateTimerTask+0x90>)
 8006c3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c3e:	4b10      	ldr	r3, [pc, #64]	@ (8006c80 <xTimerCreateTimerTask+0x90>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c46:	2301      	movs	r3, #1
 8006c48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10b      	bne.n	8006c68 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	613b      	str	r3, [r7, #16]
}
 8006c62:	bf00      	nop
 8006c64:	bf00      	nop
 8006c66:	e7fd      	b.n	8006c64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006c68:	697b      	ldr	r3, [r7, #20]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	20008410 	.word	0x20008410
 8006c78:	08018d60 	.word	0x08018d60
 8006c7c:	08006dbd 	.word	0x08006dbd
 8006c80:	20008414 	.word	0x20008414

08006c84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b08a      	sub	sp, #40	@ 0x28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
 8006c90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10b      	bne.n	8006cb4 <xTimerGenericCommand+0x30>
	__asm volatile
 8006c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca0:	f383 8811 	msr	BASEPRI, r3
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	623b      	str	r3, [r7, #32]
}
 8006cae:	bf00      	nop
 8006cb0:	bf00      	nop
 8006cb2:	e7fd      	b.n	8006cb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006cb4:	4b19      	ldr	r3, [pc, #100]	@ (8006d1c <xTimerGenericCommand+0x98>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d02a      	beq.n	8006d12 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b05      	cmp	r3, #5
 8006ccc:	dc18      	bgt.n	8006d00 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006cce:	f7ff fead 	bl	8006a2c <xTaskGetSchedulerState>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d109      	bne.n	8006cec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006cd8:	4b10      	ldr	r3, [pc, #64]	@ (8006d1c <xTimerGenericCommand+0x98>)
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	f107 0110 	add.w	r1, r7, #16
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ce4:	f7fe fc60 	bl	80055a8 <xQueueGenericSend>
 8006ce8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006cea:	e012      	b.n	8006d12 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006cec:	4b0b      	ldr	r3, [pc, #44]	@ (8006d1c <xTimerGenericCommand+0x98>)
 8006cee:	6818      	ldr	r0, [r3, #0]
 8006cf0:	f107 0110 	add.w	r1, r7, #16
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f7fe fc56 	bl	80055a8 <xQueueGenericSend>
 8006cfc:	6278      	str	r0, [r7, #36]	@ 0x24
 8006cfe:	e008      	b.n	8006d12 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d00:	4b06      	ldr	r3, [pc, #24]	@ (8006d1c <xTimerGenericCommand+0x98>)
 8006d02:	6818      	ldr	r0, [r3, #0]
 8006d04:	f107 0110 	add.w	r1, r7, #16
 8006d08:	2300      	movs	r3, #0
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	f7fe fd4e 	bl	80057ac <xQueueGenericSendFromISR>
 8006d10:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3728      	adds	r7, #40	@ 0x28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	20008410 	.word	0x20008410

08006d20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af02      	add	r7, sp, #8
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d2a:	4b23      	ldr	r3, [pc, #140]	@ (8006db8 <prvProcessExpiredTimer+0x98>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe fb01 	bl	8005340 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d023      	beq.n	8006d94 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	699a      	ldr	r2, [r3, #24]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	18d1      	adds	r1, r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	6978      	ldr	r0, [r7, #20]
 8006d5a:	f000 f8d5 	bl	8006f08 <prvInsertTimerInActiveList>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d020      	beq.n	8006da6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d64:	2300      	movs	r3, #0
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	6978      	ldr	r0, [r7, #20]
 8006d70:	f7ff ff88 	bl	8006c84 <xTimerGenericCommand>
 8006d74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d114      	bne.n	8006da6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	60fb      	str	r3, [r7, #12]
}
 8006d8e:	bf00      	nop
 8006d90:	bf00      	nop
 8006d92:	e7fd      	b.n	8006d90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d9a:	f023 0301 	bic.w	r3, r3, #1
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	6978      	ldr	r0, [r7, #20]
 8006dac:	4798      	blx	r3
}
 8006dae:	bf00      	nop
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20008408 	.word	0x20008408

08006dbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006dc4:	f107 0308 	add.w	r3, r7, #8
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 f859 	bl	8006e80 <prvGetNextExpireTime>
 8006dce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 f805 	bl	8006de4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006dda:	f000 f8d7 	bl	8006f8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006dde:	bf00      	nop
 8006de0:	e7f0      	b.n	8006dc4 <prvTimerTask+0x8>
	...

08006de4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006dee:	f7ff fa0f 	bl	8006210 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006df2:	f107 0308 	add.w	r3, r7, #8
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 f866 	bl	8006ec8 <prvSampleTimeNow>
 8006dfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d130      	bne.n	8006e66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10a      	bne.n	8006e20 <prvProcessTimerOrBlockTask+0x3c>
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d806      	bhi.n	8006e20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e12:	f7ff fa0b 	bl	800622c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e16:	68f9      	ldr	r1, [r7, #12]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff ff81 	bl	8006d20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e1e:	e024      	b.n	8006e6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d008      	beq.n	8006e38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e26:	4b13      	ldr	r3, [pc, #76]	@ (8006e74 <prvProcessTimerOrBlockTask+0x90>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <prvProcessTimerOrBlockTask+0x50>
 8006e30:	2301      	movs	r3, #1
 8006e32:	e000      	b.n	8006e36 <prvProcessTimerOrBlockTask+0x52>
 8006e34:	2300      	movs	r3, #0
 8006e36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e38:	4b0f      	ldr	r3, [pc, #60]	@ (8006e78 <prvProcessTimerOrBlockTask+0x94>)
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	4619      	mov	r1, r3
 8006e46:	f7fe ff6b 	bl	8005d20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e4a:	f7ff f9ef 	bl	800622c <xTaskResumeAll>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10a      	bne.n	8006e6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e54:	4b09      	ldr	r3, [pc, #36]	@ (8006e7c <prvProcessTimerOrBlockTask+0x98>)
 8006e56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	f3bf 8f6f 	isb	sy
}
 8006e64:	e001      	b.n	8006e6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e66:	f7ff f9e1 	bl	800622c <xTaskResumeAll>
}
 8006e6a:	bf00      	nop
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	2000840c 	.word	0x2000840c
 8006e78:	20008410 	.word	0x20008410
 8006e7c:	e000ed04 	.word	0xe000ed04

08006e80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e88:	4b0e      	ldr	r3, [pc, #56]	@ (8006ec4 <prvGetNextExpireTime+0x44>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <prvGetNextExpireTime+0x16>
 8006e92:	2201      	movs	r2, #1
 8006e94:	e000      	b.n	8006e98 <prvGetNextExpireTime+0x18>
 8006e96:	2200      	movs	r2, #0
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d105      	bne.n	8006eb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ea4:	4b07      	ldr	r3, [pc, #28]	@ (8006ec4 <prvGetNextExpireTime+0x44>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	e001      	b.n	8006eb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	20008408 	.word	0x20008408

08006ec8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ed0:	f7ff fa4a 	bl	8006368 <xTaskGetTickCount>
 8006ed4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8006f04 <prvSampleTimeNow+0x3c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d205      	bcs.n	8006eec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ee0:	f000 f93a 	bl	8007158 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	e002      	b.n	8006ef2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006ef2:	4a04      	ldr	r2, [pc, #16]	@ (8006f04 <prvSampleTimeNow+0x3c>)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20008418 	.word	0x20008418

08006f08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f16:	2300      	movs	r3, #0
 8006f18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d812      	bhi.n	8006f54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	1ad2      	subs	r2, r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d302      	bcc.n	8006f42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	e01b      	b.n	8006f7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f42:	4b10      	ldr	r3, [pc, #64]	@ (8006f84 <prvInsertTimerInActiveList+0x7c>)
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	f7fe f9be 	bl	80052ce <vListInsert>
 8006f52:	e012      	b.n	8006f7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d206      	bcs.n	8006f6a <prvInsertTimerInActiveList+0x62>
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d302      	bcc.n	8006f6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f64:	2301      	movs	r3, #1
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	e007      	b.n	8006f7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f6a:	4b07      	ldr	r3, [pc, #28]	@ (8006f88 <prvInsertTimerInActiveList+0x80>)
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3304      	adds	r3, #4
 8006f72:	4619      	mov	r1, r3
 8006f74:	4610      	mov	r0, r2
 8006f76:	f7fe f9aa 	bl	80052ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f7a:	697b      	ldr	r3, [r7, #20]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	2000840c 	.word	0x2000840c
 8006f88:	20008408 	.word	0x20008408

08006f8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b08e      	sub	sp, #56	@ 0x38
 8006f90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f92:	e0ce      	b.n	8007132 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	da19      	bge.n	8006fce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f9a:	1d3b      	adds	r3, r7, #4
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10b      	bne.n	8006fbe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	61fb      	str	r3, [r7, #28]
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	e7fd      	b.n	8006fba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fc4:	6850      	ldr	r0, [r2, #4]
 8006fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fc8:	6892      	ldr	r2, [r2, #8]
 8006fca:	4611      	mov	r1, r2
 8006fcc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f2c0 80ae 	blt.w	8007132 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d004      	beq.n	8006fec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe f9aa 	bl	8005340 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fec:	463b      	mov	r3, r7
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff ff6a 	bl	8006ec8 <prvSampleTimeNow>
 8006ff4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b09      	cmp	r3, #9
 8006ffa:	f200 8097 	bhi.w	800712c <prvProcessReceivedCommands+0x1a0>
 8006ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8007004 <prvProcessReceivedCommands+0x78>)
 8007000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007004:	0800702d 	.word	0x0800702d
 8007008:	0800702d 	.word	0x0800702d
 800700c:	0800702d 	.word	0x0800702d
 8007010:	080070a3 	.word	0x080070a3
 8007014:	080070b7 	.word	0x080070b7
 8007018:	08007103 	.word	0x08007103
 800701c:	0800702d 	.word	0x0800702d
 8007020:	0800702d 	.word	0x0800702d
 8007024:	080070a3 	.word	0x080070a3
 8007028:	080070b7 	.word	0x080070b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800702c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007032:	f043 0301 	orr.w	r3, r3, #1
 8007036:	b2da      	uxtb	r2, r3
 8007038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	18d1      	adds	r1, r2, r3
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800704a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800704c:	f7ff ff5c 	bl	8006f08 <prvInsertTimerInActiveList>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d06c      	beq.n	8007130 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800705c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800705e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007060:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007064:	f003 0304 	and.w	r3, r3, #4
 8007068:	2b00      	cmp	r3, #0
 800706a:	d061      	beq.n	8007130 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	441a      	add	r2, r3
 8007074:	2300      	movs	r3, #0
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	2300      	movs	r3, #0
 800707a:	2100      	movs	r1, #0
 800707c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800707e:	f7ff fe01 	bl	8006c84 <xTimerGenericCommand>
 8007082:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d152      	bne.n	8007130 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	61bb      	str	r3, [r7, #24]
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	e7fd      	b.n	800709e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070a8:	f023 0301 	bic.w	r3, r3, #1
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80070b4:	e03d      	b.n	8007132 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070bc:	f043 0301 	orr.w	r3, r3, #1
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10b      	bne.n	80070ee <prvProcessReceivedCommands+0x162>
	__asm volatile
 80070d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	617b      	str	r3, [r7, #20]
}
 80070e8:	bf00      	nop
 80070ea:	bf00      	nop
 80070ec:	e7fd      	b.n	80070ea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80070ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f0:	699a      	ldr	r2, [r3, #24]
 80070f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f4:	18d1      	adds	r1, r2, r3
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070fc:	f7ff ff04 	bl	8006f08 <prvInsertTimerInActiveList>
					break;
 8007100:	e017      	b.n	8007132 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007104:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d103      	bne.n	8007118 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007112:	f000 fbe9 	bl	80078e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007116:	e00c      	b.n	8007132 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800711e:	f023 0301 	bic.w	r3, r3, #1
 8007122:	b2da      	uxtb	r2, r3
 8007124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007126:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800712a:	e002      	b.n	8007132 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800712c:	bf00      	nop
 800712e:	e000      	b.n	8007132 <prvProcessReceivedCommands+0x1a6>
					break;
 8007130:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007132:	4b08      	ldr	r3, [pc, #32]	@ (8007154 <prvProcessReceivedCommands+0x1c8>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	1d39      	adds	r1, r7, #4
 8007138:	2200      	movs	r2, #0
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe fbd4 	bl	80058e8 <xQueueReceive>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	f47f af26 	bne.w	8006f94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	3730      	adds	r7, #48	@ 0x30
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20008410 	.word	0x20008410

08007158 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b088      	sub	sp, #32
 800715c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800715e:	e049      	b.n	80071f4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007160:	4b2e      	ldr	r3, [pc, #184]	@ (800721c <prvSwitchTimerLists+0xc4>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800716a:	4b2c      	ldr	r3, [pc, #176]	@ (800721c <prvSwitchTimerLists+0xc4>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3304      	adds	r3, #4
 8007178:	4618      	mov	r0, r3
 800717a:	f7fe f8e1 	bl	8005340 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	d02f      	beq.n	80071f4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	4413      	add	r3, r2
 800719c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d90e      	bls.n	80071c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071b2:	4b1a      	ldr	r3, [pc, #104]	@ (800721c <prvSwitchTimerLists+0xc4>)
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3304      	adds	r3, #4
 80071ba:	4619      	mov	r1, r3
 80071bc:	4610      	mov	r0, r2
 80071be:	f7fe f886 	bl	80052ce <vListInsert>
 80071c2:	e017      	b.n	80071f4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071c4:	2300      	movs	r3, #0
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	2300      	movs	r3, #0
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	2100      	movs	r1, #0
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff fd58 	bl	8006c84 <xTimerGenericCommand>
 80071d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10b      	bne.n	80071f4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	603b      	str	r3, [r7, #0]
}
 80071ee:	bf00      	nop
 80071f0:	bf00      	nop
 80071f2:	e7fd      	b.n	80071f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071f4:	4b09      	ldr	r3, [pc, #36]	@ (800721c <prvSwitchTimerLists+0xc4>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1b0      	bne.n	8007160 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071fe:	4b07      	ldr	r3, [pc, #28]	@ (800721c <prvSwitchTimerLists+0xc4>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007204:	4b06      	ldr	r3, [pc, #24]	@ (8007220 <prvSwitchTimerLists+0xc8>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a04      	ldr	r2, [pc, #16]	@ (800721c <prvSwitchTimerLists+0xc4>)
 800720a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800720c:	4a04      	ldr	r2, [pc, #16]	@ (8007220 <prvSwitchTimerLists+0xc8>)
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	6013      	str	r3, [r2, #0]
}
 8007212:	bf00      	nop
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	20008408 	.word	0x20008408
 8007220:	2000840c 	.word	0x2000840c

08007224 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800722a:	f000 f96d 	bl	8007508 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800722e:	4b15      	ldr	r3, [pc, #84]	@ (8007284 <prvCheckForValidListAndQueue+0x60>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d120      	bne.n	8007278 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007236:	4814      	ldr	r0, [pc, #80]	@ (8007288 <prvCheckForValidListAndQueue+0x64>)
 8007238:	f7fd fff8 	bl	800522c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800723c:	4813      	ldr	r0, [pc, #76]	@ (800728c <prvCheckForValidListAndQueue+0x68>)
 800723e:	f7fd fff5 	bl	800522c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007242:	4b13      	ldr	r3, [pc, #76]	@ (8007290 <prvCheckForValidListAndQueue+0x6c>)
 8007244:	4a10      	ldr	r2, [pc, #64]	@ (8007288 <prvCheckForValidListAndQueue+0x64>)
 8007246:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007248:	4b12      	ldr	r3, [pc, #72]	@ (8007294 <prvCheckForValidListAndQueue+0x70>)
 800724a:	4a10      	ldr	r2, [pc, #64]	@ (800728c <prvCheckForValidListAndQueue+0x68>)
 800724c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800724e:	2300      	movs	r3, #0
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	4b11      	ldr	r3, [pc, #68]	@ (8007298 <prvCheckForValidListAndQueue+0x74>)
 8007254:	4a11      	ldr	r2, [pc, #68]	@ (800729c <prvCheckForValidListAndQueue+0x78>)
 8007256:	2110      	movs	r1, #16
 8007258:	200a      	movs	r0, #10
 800725a:	f7fe f905 	bl	8005468 <xQueueGenericCreateStatic>
 800725e:	4603      	mov	r3, r0
 8007260:	4a08      	ldr	r2, [pc, #32]	@ (8007284 <prvCheckForValidListAndQueue+0x60>)
 8007262:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007264:	4b07      	ldr	r3, [pc, #28]	@ (8007284 <prvCheckForValidListAndQueue+0x60>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d005      	beq.n	8007278 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800726c:	4b05      	ldr	r3, [pc, #20]	@ (8007284 <prvCheckForValidListAndQueue+0x60>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	490b      	ldr	r1, [pc, #44]	@ (80072a0 <prvCheckForValidListAndQueue+0x7c>)
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fd2a 	bl	8005ccc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007278:	f000 f978 	bl	800756c <vPortExitCritical>
}
 800727c:	bf00      	nop
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20008410 	.word	0x20008410
 8007288:	200083e0 	.word	0x200083e0
 800728c:	200083f4 	.word	0x200083f4
 8007290:	20008408 	.word	0x20008408
 8007294:	2000840c 	.word	0x2000840c
 8007298:	200084bc 	.word	0x200084bc
 800729c:	2000841c 	.word	0x2000841c
 80072a0:	08018d68 	.word	0x08018d68

080072a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3b04      	subs	r3, #4
 80072b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80072bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3b04      	subs	r3, #4
 80072c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f023 0201 	bic.w	r2, r3, #1
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	3b04      	subs	r3, #4
 80072d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072d4:	4a0c      	ldr	r2, [pc, #48]	@ (8007308 <pxPortInitialiseStack+0x64>)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	3b14      	subs	r3, #20
 80072de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	3b04      	subs	r3, #4
 80072ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f06f 0202 	mvn.w	r2, #2
 80072f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3b20      	subs	r3, #32
 80072f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072fa:	68fb      	ldr	r3, [r7, #12]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	0800730d 	.word	0x0800730d

0800730c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007316:	4b13      	ldr	r3, [pc, #76]	@ (8007364 <prvTaskExitError+0x58>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800731e:	d00b      	beq.n	8007338 <prvTaskExitError+0x2c>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	60fb      	str	r3, [r7, #12]
}
 8007332:	bf00      	nop
 8007334:	bf00      	nop
 8007336:	e7fd      	b.n	8007334 <prvTaskExitError+0x28>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	60bb      	str	r3, [r7, #8]
}
 800734a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800734c:	bf00      	nop
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d0fc      	beq.n	800734e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	20000020 	.word	0x20000020
	...

08007370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007370:	4b07      	ldr	r3, [pc, #28]	@ (8007390 <pxCurrentTCBConst2>)
 8007372:	6819      	ldr	r1, [r3, #0]
 8007374:	6808      	ldr	r0, [r1, #0]
 8007376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737a:	f380 8809 	msr	PSP, r0
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f04f 0000 	mov.w	r0, #0
 8007386:	f380 8811 	msr	BASEPRI, r0
 800738a:	4770      	bx	lr
 800738c:	f3af 8000 	nop.w

08007390 <pxCurrentTCBConst2>:
 8007390:	20007ee0 	.word	0x20007ee0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop

08007398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007398:	4808      	ldr	r0, [pc, #32]	@ (80073bc <prvPortStartFirstTask+0x24>)
 800739a:	6800      	ldr	r0, [r0, #0]
 800739c:	6800      	ldr	r0, [r0, #0]
 800739e:	f380 8808 	msr	MSP, r0
 80073a2:	f04f 0000 	mov.w	r0, #0
 80073a6:	f380 8814 	msr	CONTROL, r0
 80073aa:	b662      	cpsie	i
 80073ac:	b661      	cpsie	f
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	df00      	svc	0
 80073b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073ba:	bf00      	nop
 80073bc:	e000ed08 	.word	0xe000ed08

080073c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073c6:	4b47      	ldr	r3, [pc, #284]	@ (80074e4 <xPortStartScheduler+0x124>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a47      	ldr	r2, [pc, #284]	@ (80074e8 <xPortStartScheduler+0x128>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d10b      	bne.n	80073e8 <xPortStartScheduler+0x28>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	60fb      	str	r3, [r7, #12]
}
 80073e2:	bf00      	nop
 80073e4:	bf00      	nop
 80073e6:	e7fd      	b.n	80073e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073e8:	4b3e      	ldr	r3, [pc, #248]	@ (80074e4 <xPortStartScheduler+0x124>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a3f      	ldr	r2, [pc, #252]	@ (80074ec <xPortStartScheduler+0x12c>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d10b      	bne.n	800740a <xPortStartScheduler+0x4a>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	613b      	str	r3, [r7, #16]
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
 8007408:	e7fd      	b.n	8007406 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800740a:	4b39      	ldr	r3, [pc, #228]	@ (80074f0 <xPortStartScheduler+0x130>)
 800740c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	22ff      	movs	r2, #255	@ 0xff
 800741a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007424:	78fb      	ldrb	r3, [r7, #3]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800742c:	b2da      	uxtb	r2, r3
 800742e:	4b31      	ldr	r3, [pc, #196]	@ (80074f4 <xPortStartScheduler+0x134>)
 8007430:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007432:	4b31      	ldr	r3, [pc, #196]	@ (80074f8 <xPortStartScheduler+0x138>)
 8007434:	2207      	movs	r2, #7
 8007436:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007438:	e009      	b.n	800744e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800743a:	4b2f      	ldr	r3, [pc, #188]	@ (80074f8 <xPortStartScheduler+0x138>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3b01      	subs	r3, #1
 8007440:	4a2d      	ldr	r2, [pc, #180]	@ (80074f8 <xPortStartScheduler+0x138>)
 8007442:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007444:	78fb      	ldrb	r3, [r7, #3]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	005b      	lsls	r3, r3, #1
 800744a:	b2db      	uxtb	r3, r3
 800744c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800744e:	78fb      	ldrb	r3, [r7, #3]
 8007450:	b2db      	uxtb	r3, r3
 8007452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007456:	2b80      	cmp	r3, #128	@ 0x80
 8007458:	d0ef      	beq.n	800743a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800745a:	4b27      	ldr	r3, [pc, #156]	@ (80074f8 <xPortStartScheduler+0x138>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f1c3 0307 	rsb	r3, r3, #7
 8007462:	2b04      	cmp	r3, #4
 8007464:	d00b      	beq.n	800747e <xPortStartScheduler+0xbe>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	60bb      	str	r3, [r7, #8]
}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	e7fd      	b.n	800747a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800747e:	4b1e      	ldr	r3, [pc, #120]	@ (80074f8 <xPortStartScheduler+0x138>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	021b      	lsls	r3, r3, #8
 8007484:	4a1c      	ldr	r2, [pc, #112]	@ (80074f8 <xPortStartScheduler+0x138>)
 8007486:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007488:	4b1b      	ldr	r3, [pc, #108]	@ (80074f8 <xPortStartScheduler+0x138>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007490:	4a19      	ldr	r2, [pc, #100]	@ (80074f8 <xPortStartScheduler+0x138>)
 8007492:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	b2da      	uxtb	r2, r3
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800749c:	4b17      	ldr	r3, [pc, #92]	@ (80074fc <xPortStartScheduler+0x13c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a16      	ldr	r2, [pc, #88]	@ (80074fc <xPortStartScheduler+0x13c>)
 80074a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80074a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074a8:	4b14      	ldr	r3, [pc, #80]	@ (80074fc <xPortStartScheduler+0x13c>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a13      	ldr	r2, [pc, #76]	@ (80074fc <xPortStartScheduler+0x13c>)
 80074ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80074b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80074b4:	f000 f8da 	bl	800766c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074b8:	4b11      	ldr	r3, [pc, #68]	@ (8007500 <xPortStartScheduler+0x140>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074be:	f000 f8f9 	bl	80076b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074c2:	4b10      	ldr	r3, [pc, #64]	@ (8007504 <xPortStartScheduler+0x144>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a0f      	ldr	r2, [pc, #60]	@ (8007504 <xPortStartScheduler+0x144>)
 80074c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80074cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074ce:	f7ff ff63 	bl	8007398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074d2:	f7ff f813 	bl	80064fc <vTaskSwitchContext>
	prvTaskExitError();
 80074d6:	f7ff ff19 	bl	800730c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	e000ed00 	.word	0xe000ed00
 80074e8:	410fc271 	.word	0x410fc271
 80074ec:	410fc270 	.word	0x410fc270
 80074f0:	e000e400 	.word	0xe000e400
 80074f4:	2000850c 	.word	0x2000850c
 80074f8:	20008510 	.word	0x20008510
 80074fc:	e000ed20 	.word	0xe000ed20
 8007500:	20000020 	.word	0x20000020
 8007504:	e000ef34 	.word	0xe000ef34

08007508 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	607b      	str	r3, [r7, #4]
}
 8007520:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007522:	4b10      	ldr	r3, [pc, #64]	@ (8007564 <vPortEnterCritical+0x5c>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3301      	adds	r3, #1
 8007528:	4a0e      	ldr	r2, [pc, #56]	@ (8007564 <vPortEnterCritical+0x5c>)
 800752a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800752c:	4b0d      	ldr	r3, [pc, #52]	@ (8007564 <vPortEnterCritical+0x5c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d110      	bne.n	8007556 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007534:	4b0c      	ldr	r3, [pc, #48]	@ (8007568 <vPortEnterCritical+0x60>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00b      	beq.n	8007556 <vPortEnterCritical+0x4e>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	603b      	str	r3, [r7, #0]
}
 8007550:	bf00      	nop
 8007552:	bf00      	nop
 8007554:	e7fd      	b.n	8007552 <vPortEnterCritical+0x4a>
	}
}
 8007556:	bf00      	nop
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	20000020 	.word	0x20000020
 8007568:	e000ed04 	.word	0xe000ed04

0800756c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007572:	4b12      	ldr	r3, [pc, #72]	@ (80075bc <vPortExitCritical+0x50>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10b      	bne.n	8007592 <vPortExitCritical+0x26>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	607b      	str	r3, [r7, #4]
}
 800758c:	bf00      	nop
 800758e:	bf00      	nop
 8007590:	e7fd      	b.n	800758e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007592:	4b0a      	ldr	r3, [pc, #40]	@ (80075bc <vPortExitCritical+0x50>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3b01      	subs	r3, #1
 8007598:	4a08      	ldr	r2, [pc, #32]	@ (80075bc <vPortExitCritical+0x50>)
 800759a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800759c:	4b07      	ldr	r3, [pc, #28]	@ (80075bc <vPortExitCritical+0x50>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d105      	bne.n	80075b0 <vPortExitCritical+0x44>
 80075a4:	2300      	movs	r3, #0
 80075a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	f383 8811 	msr	BASEPRI, r3
}
 80075ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	20000020 	.word	0x20000020

080075c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075c0:	f3ef 8009 	mrs	r0, PSP
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	4b15      	ldr	r3, [pc, #84]	@ (8007620 <pxCurrentTCBConst>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	f01e 0f10 	tst.w	lr, #16
 80075d0:	bf08      	it	eq
 80075d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075da:	6010      	str	r0, [r2, #0]
 80075dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80075e4:	f380 8811 	msr	BASEPRI, r0
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f7fe ff84 	bl	80064fc <vTaskSwitchContext>
 80075f4:	f04f 0000 	mov.w	r0, #0
 80075f8:	f380 8811 	msr	BASEPRI, r0
 80075fc:	bc09      	pop	{r0, r3}
 80075fe:	6819      	ldr	r1, [r3, #0]
 8007600:	6808      	ldr	r0, [r1, #0]
 8007602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007606:	f01e 0f10 	tst.w	lr, #16
 800760a:	bf08      	it	eq
 800760c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007610:	f380 8809 	msr	PSP, r0
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	f3af 8000 	nop.w

08007620 <pxCurrentTCBConst>:
 8007620:	20007ee0 	.word	0x20007ee0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007624:	bf00      	nop
 8007626:	bf00      	nop

08007628 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	607b      	str	r3, [r7, #4]
}
 8007640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007642:	f7fe fea1 	bl	8006388 <xTaskIncrementTick>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800764c:	4b06      	ldr	r3, [pc, #24]	@ (8007668 <xPortSysTickHandler+0x40>)
 800764e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	2300      	movs	r3, #0
 8007656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	f383 8811 	msr	BASEPRI, r3
}
 800765e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007660:	bf00      	nop
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	e000ed04 	.word	0xe000ed04

0800766c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800766c:	b480      	push	{r7}
 800766e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007670:	4b0b      	ldr	r3, [pc, #44]	@ (80076a0 <vPortSetupTimerInterrupt+0x34>)
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007676:	4b0b      	ldr	r3, [pc, #44]	@ (80076a4 <vPortSetupTimerInterrupt+0x38>)
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800767c:	4b0a      	ldr	r3, [pc, #40]	@ (80076a8 <vPortSetupTimerInterrupt+0x3c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a0a      	ldr	r2, [pc, #40]	@ (80076ac <vPortSetupTimerInterrupt+0x40>)
 8007682:	fba2 2303 	umull	r2, r3, r2, r3
 8007686:	099b      	lsrs	r3, r3, #6
 8007688:	4a09      	ldr	r2, [pc, #36]	@ (80076b0 <vPortSetupTimerInterrupt+0x44>)
 800768a:	3b01      	subs	r3, #1
 800768c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800768e:	4b04      	ldr	r3, [pc, #16]	@ (80076a0 <vPortSetupTimerInterrupt+0x34>)
 8007690:	2207      	movs	r2, #7
 8007692:	601a      	str	r2, [r3, #0]
}
 8007694:	bf00      	nop
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	e000e010 	.word	0xe000e010
 80076a4:	e000e018 	.word	0xe000e018
 80076a8:	20000014 	.word	0x20000014
 80076ac:	10624dd3 	.word	0x10624dd3
 80076b0:	e000e014 	.word	0xe000e014

080076b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80076c4 <vPortEnableVFP+0x10>
 80076b8:	6801      	ldr	r1, [r0, #0]
 80076ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80076be:	6001      	str	r1, [r0, #0]
 80076c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80076c2:	bf00      	nop
 80076c4:	e000ed88 	.word	0xe000ed88

080076c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076ce:	f3ef 8305 	mrs	r3, IPSR
 80076d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2b0f      	cmp	r3, #15
 80076d8:	d915      	bls.n	8007706 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076da:	4a18      	ldr	r2, [pc, #96]	@ (800773c <vPortValidateInterruptPriority+0x74>)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4413      	add	r3, r2
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076e4:	4b16      	ldr	r3, [pc, #88]	@ (8007740 <vPortValidateInterruptPriority+0x78>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	7afa      	ldrb	r2, [r7, #11]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d20b      	bcs.n	8007706 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	607b      	str	r3, [r7, #4]
}
 8007700:	bf00      	nop
 8007702:	bf00      	nop
 8007704:	e7fd      	b.n	8007702 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007706:	4b0f      	ldr	r3, [pc, #60]	@ (8007744 <vPortValidateInterruptPriority+0x7c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800770e:	4b0e      	ldr	r3, [pc, #56]	@ (8007748 <vPortValidateInterruptPriority+0x80>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	429a      	cmp	r2, r3
 8007714:	d90b      	bls.n	800772e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	603b      	str	r3, [r7, #0]
}
 8007728:	bf00      	nop
 800772a:	bf00      	nop
 800772c:	e7fd      	b.n	800772a <vPortValidateInterruptPriority+0x62>
	}
 800772e:	bf00      	nop
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	e000e3f0 	.word	0xe000e3f0
 8007740:	2000850c 	.word	0x2000850c
 8007744:	e000ed0c 	.word	0xe000ed0c
 8007748:	20008510 	.word	0x20008510

0800774c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08a      	sub	sp, #40	@ 0x28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007754:	2300      	movs	r3, #0
 8007756:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007758:	f7fe fd5a 	bl	8006210 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800775c:	4b5c      	ldr	r3, [pc, #368]	@ (80078d0 <pvPortMalloc+0x184>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007764:	f000 f924 	bl	80079b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007768:	4b5a      	ldr	r3, [pc, #360]	@ (80078d4 <pvPortMalloc+0x188>)
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4013      	ands	r3, r2
 8007770:	2b00      	cmp	r3, #0
 8007772:	f040 8095 	bne.w	80078a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d01e      	beq.n	80077ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800777c:	2208      	movs	r2, #8
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4413      	add	r3, r2
 8007782:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	2b00      	cmp	r3, #0
 800778c:	d015      	beq.n	80077ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f023 0307 	bic.w	r3, r3, #7
 8007794:	3308      	adds	r3, #8
 8007796:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f003 0307 	and.w	r3, r3, #7
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00b      	beq.n	80077ba <pvPortMalloc+0x6e>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	617b      	str	r3, [r7, #20]
}
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop
 80077b8:	e7fd      	b.n	80077b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d06f      	beq.n	80078a0 <pvPortMalloc+0x154>
 80077c0:	4b45      	ldr	r3, [pc, #276]	@ (80078d8 <pvPortMalloc+0x18c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d86a      	bhi.n	80078a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077ca:	4b44      	ldr	r3, [pc, #272]	@ (80078dc <pvPortMalloc+0x190>)
 80077cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077ce:	4b43      	ldr	r3, [pc, #268]	@ (80078dc <pvPortMalloc+0x190>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077d4:	e004      	b.n	80077e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80077d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d903      	bls.n	80077f2 <pvPortMalloc+0xa6>
 80077ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1f1      	bne.n	80077d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077f2:	4b37      	ldr	r3, [pc, #220]	@ (80078d0 <pvPortMalloc+0x184>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d051      	beq.n	80078a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2208      	movs	r2, #8
 8007802:	4413      	add	r3, r2
 8007804:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800780e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	1ad2      	subs	r2, r2, r3
 8007816:	2308      	movs	r3, #8
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	429a      	cmp	r2, r3
 800781c:	d920      	bls.n	8007860 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800781e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4413      	add	r3, r2
 8007824:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	f003 0307 	and.w	r3, r3, #7
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00b      	beq.n	8007848 <pvPortMalloc+0xfc>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	613b      	str	r3, [r7, #16]
}
 8007842:	bf00      	nop
 8007844:	bf00      	nop
 8007846:	e7fd      	b.n	8007844 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	1ad2      	subs	r2, r2, r3
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800785a:	69b8      	ldr	r0, [r7, #24]
 800785c:	f000 f90a 	bl	8007a74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007860:	4b1d      	ldr	r3, [pc, #116]	@ (80078d8 <pvPortMalloc+0x18c>)
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	4a1b      	ldr	r2, [pc, #108]	@ (80078d8 <pvPortMalloc+0x18c>)
 800786c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800786e:	4b1a      	ldr	r3, [pc, #104]	@ (80078d8 <pvPortMalloc+0x18c>)
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	4b1b      	ldr	r3, [pc, #108]	@ (80078e0 <pvPortMalloc+0x194>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	429a      	cmp	r2, r3
 8007878:	d203      	bcs.n	8007882 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800787a:	4b17      	ldr	r3, [pc, #92]	@ (80078d8 <pvPortMalloc+0x18c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a18      	ldr	r2, [pc, #96]	@ (80078e0 <pvPortMalloc+0x194>)
 8007880:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	4b13      	ldr	r3, [pc, #76]	@ (80078d4 <pvPortMalloc+0x188>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	431a      	orrs	r2, r3
 800788c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007896:	4b13      	ldr	r3, [pc, #76]	@ (80078e4 <pvPortMalloc+0x198>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3301      	adds	r3, #1
 800789c:	4a11      	ldr	r2, [pc, #68]	@ (80078e4 <pvPortMalloc+0x198>)
 800789e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078a0:	f7fe fcc4 	bl	800622c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00b      	beq.n	80078c6 <pvPortMalloc+0x17a>
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	60fb      	str	r3, [r7, #12]
}
 80078c0:	bf00      	nop
 80078c2:	bf00      	nop
 80078c4:	e7fd      	b.n	80078c2 <pvPortMalloc+0x176>
	return pvReturn;
 80078c6:	69fb      	ldr	r3, [r7, #28]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3728      	adds	r7, #40	@ 0x28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	2000c11c 	.word	0x2000c11c
 80078d4:	2000c130 	.word	0x2000c130
 80078d8:	2000c120 	.word	0x2000c120
 80078dc:	2000c114 	.word	0x2000c114
 80078e0:	2000c124 	.word	0x2000c124
 80078e4:	2000c128 	.word	0x2000c128

080078e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d04f      	beq.n	800799a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078fa:	2308      	movs	r3, #8
 80078fc:	425b      	negs	r3, r3
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	4413      	add	r3, r2
 8007902:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	4b25      	ldr	r3, [pc, #148]	@ (80079a4 <vPortFree+0xbc>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4013      	ands	r3, r2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10b      	bne.n	800792e <vPortFree+0x46>
	__asm volatile
 8007916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800791a:	f383 8811 	msr	BASEPRI, r3
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	60fb      	str	r3, [r7, #12]
}
 8007928:	bf00      	nop
 800792a:	bf00      	nop
 800792c:	e7fd      	b.n	800792a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00b      	beq.n	800794e <vPortFree+0x66>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	60bb      	str	r3, [r7, #8]
}
 8007948:	bf00      	nop
 800794a:	bf00      	nop
 800794c:	e7fd      	b.n	800794a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	4b14      	ldr	r3, [pc, #80]	@ (80079a4 <vPortFree+0xbc>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4013      	ands	r3, r2
 8007958:	2b00      	cmp	r3, #0
 800795a:	d01e      	beq.n	800799a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d11a      	bne.n	800799a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	4b0e      	ldr	r3, [pc, #56]	@ (80079a4 <vPortFree+0xbc>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	43db      	mvns	r3, r3
 800796e:	401a      	ands	r2, r3
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007974:	f7fe fc4c 	bl	8006210 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	4b0a      	ldr	r3, [pc, #40]	@ (80079a8 <vPortFree+0xc0>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4413      	add	r3, r2
 8007982:	4a09      	ldr	r2, [pc, #36]	@ (80079a8 <vPortFree+0xc0>)
 8007984:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007986:	6938      	ldr	r0, [r7, #16]
 8007988:	f000 f874 	bl	8007a74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800798c:	4b07      	ldr	r3, [pc, #28]	@ (80079ac <vPortFree+0xc4>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3301      	adds	r3, #1
 8007992:	4a06      	ldr	r2, [pc, #24]	@ (80079ac <vPortFree+0xc4>)
 8007994:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007996:	f7fe fc49 	bl	800622c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800799a:	bf00      	nop
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	2000c130 	.word	0x2000c130
 80079a8:	2000c120 	.word	0x2000c120
 80079ac:	2000c12c 	.word	0x2000c12c

080079b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80079ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079bc:	4b27      	ldr	r3, [pc, #156]	@ (8007a5c <prvHeapInit+0xac>)
 80079be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00c      	beq.n	80079e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	3307      	adds	r3, #7
 80079ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f023 0307 	bic.w	r3, r3, #7
 80079d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	4a1f      	ldr	r2, [pc, #124]	@ (8007a5c <prvHeapInit+0xac>)
 80079e0:	4413      	add	r3, r2
 80079e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007a60 <prvHeapInit+0xb0>)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007a60 <prvHeapInit+0xb0>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	4413      	add	r3, r2
 80079fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079fc:	2208      	movs	r2, #8
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	1a9b      	subs	r3, r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 0307 	bic.w	r3, r3, #7
 8007a0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4a15      	ldr	r2, [pc, #84]	@ (8007a64 <prvHeapInit+0xb4>)
 8007a10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a12:	4b14      	ldr	r3, [pc, #80]	@ (8007a64 <prvHeapInit+0xb4>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2200      	movs	r2, #0
 8007a18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a1a:	4b12      	ldr	r3, [pc, #72]	@ (8007a64 <prvHeapInit+0xb4>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	1ad2      	subs	r2, r2, r3
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a30:	4b0c      	ldr	r3, [pc, #48]	@ (8007a64 <prvHeapInit+0xb4>)
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8007a68 <prvHeapInit+0xb8>)
 8007a3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	4a09      	ldr	r2, [pc, #36]	@ (8007a6c <prvHeapInit+0xbc>)
 8007a46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a48:	4b09      	ldr	r3, [pc, #36]	@ (8007a70 <prvHeapInit+0xc0>)
 8007a4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007a4e:	601a      	str	r2, [r3, #0]
}
 8007a50:	bf00      	nop
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	20008514 	.word	0x20008514
 8007a60:	2000c114 	.word	0x2000c114
 8007a64:	2000c11c 	.word	0x2000c11c
 8007a68:	2000c124 	.word	0x2000c124
 8007a6c:	2000c120 	.word	0x2000c120
 8007a70:	2000c130 	.word	0x2000c130

08007a74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a7c:	4b28      	ldr	r3, [pc, #160]	@ (8007b20 <prvInsertBlockIntoFreeList+0xac>)
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	e002      	b.n	8007a88 <prvInsertBlockIntoFreeList+0x14>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	60fb      	str	r3, [r7, #12]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d8f7      	bhi.n	8007a82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d108      	bne.n	8007ab6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	441a      	add	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	441a      	add	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d118      	bne.n	8007afc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	4b15      	ldr	r3, [pc, #84]	@ (8007b24 <prvInsertBlockIntoFreeList+0xb0>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d00d      	beq.n	8007af2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	441a      	add	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	601a      	str	r2, [r3, #0]
 8007af0:	e008      	b.n	8007b04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007af2:	4b0c      	ldr	r3, [pc, #48]	@ (8007b24 <prvInsertBlockIntoFreeList+0xb0>)
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	e003      	b.n	8007b04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d002      	beq.n	8007b12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b12:	bf00      	nop
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	2000c114 	.word	0x2000c114
 8007b24:	2000c11c 	.word	0x2000c11c

08007b28 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8007b28:	4b04      	ldr	r3, [pc, #16]	@ (8007b3c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	b10a      	cbz	r2, 8007b32 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 8007b2e:	4803      	ldr	r0, [pc, #12]	@ (8007b3c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8007b30:	4770      	bx	lr
 8007b32:	4a03      	ldr	r2, [pc, #12]	@ (8007b40 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 8007b34:	4801      	ldr	r0, [pc, #4]	@ (8007b3c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8007b36:	6812      	ldr	r2, [r2, #0]
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	4770      	bx	lr
 8007b3c:	20000024 	.word	0x20000024
 8007b40:	20000378 	.word	0x20000378

08007b44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8007b44:	4a02      	ldr	r2, [pc, #8]	@ (8007b50 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 8007b46:	4b03      	ldr	r3, [pc, #12]	@ (8007b54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 8007b48:	6812      	ldr	r2, [r2, #0]
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	20000378 	.word	0x20000378
 8007b54:	20000024 	.word	0x20000024

08007b58 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 8007b58:	f003 bf78 	b.w	800ba4c <geometry_msgs__msg__Twist__init>

08007b5c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 8007b5c:	f003 bf96 	b.w	800ba8c <geometry_msgs__msg__Twist__fini>

08007b60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8007b60:	b510      	push	{r4, lr}
 8007b62:	f000 f819 	bl	8007b98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007b66:	4c07      	ldr	r4, [pc, #28]	@ (8007b84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 8007b68:	60e0      	str	r0, [r4, #12]
 8007b6a:	f000 f815 	bl	8007b98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007b6e:	4b06      	ldr	r3, [pc, #24]	@ (8007b88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8007b70:	64a0      	str	r0, [r4, #72]	@ 0x48
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	b10a      	cbz	r2, 8007b7a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 8007b76:	4804      	ldr	r0, [pc, #16]	@ (8007b88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8007b78:	bd10      	pop	{r4, pc}
 8007b7a:	4a04      	ldr	r2, [pc, #16]	@ (8007b8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 8007b7c:	4802      	ldr	r0, [pc, #8]	@ (8007b88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8007b7e:	6812      	ldr	r2, [r2, #0]
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	bd10      	pop	{r4, pc}
 8007b84:	2000005c 	.word	0x2000005c
 8007b88:	20000044 	.word	0x20000044
 8007b8c:	2000037c 	.word	0x2000037c

08007b90 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 8007b90:	f003 bfb8 	b.w	800bb04 <geometry_msgs__msg__Vector3__init>

08007b94 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 8007b94:	f003 bfba 	b.w	800bb0c <geometry_msgs__msg__Vector3__fini>

08007b98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8007b98:	4b04      	ldr	r3, [pc, #16]	@ (8007bac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	b10a      	cbz	r2, 8007ba2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 8007b9e:	4803      	ldr	r0, [pc, #12]	@ (8007bac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8007ba0:	4770      	bx	lr
 8007ba2:	4a03      	ldr	r2, [pc, #12]	@ (8007bb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 8007ba4:	4801      	ldr	r0, [pc, #4]	@ (8007bac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8007ba6:	6812      	ldr	r2, [r2, #0]
 8007ba8:	601a      	str	r2, [r3, #0]
 8007baa:	4770      	bx	lr
 8007bac:	200000d4 	.word	0x200000d4
 8007bb0:	2000037c 	.word	0x2000037c

08007bb4 <get_serialized_size_geometry_msgs__msg__Twist>:
 8007bb4:	b570      	push	{r4, r5, r6, lr}
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	b148      	cbz	r0, 8007bce <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 8007bba:	460d      	mov	r5, r1
 8007bbc:	f000 f86a 	bl	8007c94 <get_serialized_size_geometry_msgs__msg__Vector3>
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	1829      	adds	r1, r5, r0
 8007bc4:	f104 0018 	add.w	r0, r4, #24
 8007bc8:	f000 f864 	bl	8007c94 <get_serialized_size_geometry_msgs__msg__Vector3>
 8007bcc:	4430      	add	r0, r6
 8007bce:	bd70      	pop	{r4, r5, r6, pc}

08007bd0 <_Twist__cdr_deserialize>:
 8007bd0:	b570      	push	{r4, r5, r6, lr}
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	b189      	cbz	r1, 8007bfa <_Twist__cdr_deserialize+0x2a>
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	f000 f8e8 	bl	8007dac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007bdc:	6843      	ldr	r3, [r0, #4]
 8007bde:	4621      	mov	r1, r4
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	4628      	mov	r0, r5
 8007be4:	4798      	blx	r3
 8007be6:	f000 f8e1 	bl	8007dac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007bea:	6843      	ldr	r3, [r0, #4]
 8007bec:	f104 0118 	add.w	r1, r4, #24
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007bf8:	4718      	bx	r3
 8007bfa:	4608      	mov	r0, r1
 8007bfc:	bd70      	pop	{r4, r5, r6, pc}
 8007bfe:	bf00      	nop

08007c00 <_Twist__cdr_serialize>:
 8007c00:	b198      	cbz	r0, 8007c2a <_Twist__cdr_serialize+0x2a>
 8007c02:	b570      	push	{r4, r5, r6, lr}
 8007c04:	460d      	mov	r5, r1
 8007c06:	4604      	mov	r4, r0
 8007c08:	f000 f8d0 	bl	8007dac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007c0c:	6843      	ldr	r3, [r0, #4]
 8007c0e:	4629      	mov	r1, r5
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	4620      	mov	r0, r4
 8007c14:	4798      	blx	r3
 8007c16:	f000 f8c9 	bl	8007dac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007c1a:	6843      	ldr	r3, [r0, #4]
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	f104 0018 	add.w	r0, r4, #24
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c28:	4718      	bx	r3
 8007c2a:	4770      	bx	lr

08007c2c <_Twist__get_serialized_size>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	4604      	mov	r4, r0
 8007c30:	b148      	cbz	r0, 8007c46 <_Twist__get_serialized_size+0x1a>
 8007c32:	2100      	movs	r1, #0
 8007c34:	f000 f82e 	bl	8007c94 <get_serialized_size_geometry_msgs__msg__Vector3>
 8007c38:	4605      	mov	r5, r0
 8007c3a:	4601      	mov	r1, r0
 8007c3c:	f104 0018 	add.w	r0, r4, #24
 8007c40:	f000 f828 	bl	8007c94 <get_serialized_size_geometry_msgs__msg__Vector3>
 8007c44:	4428      	add	r0, r5
 8007c46:	bd38      	pop	{r3, r4, r5, pc}

08007c48 <_Twist__max_serialized_size>:
 8007c48:	b510      	push	{r4, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	2100      	movs	r1, #0
 8007c50:	f10d 0007 	add.w	r0, sp, #7
 8007c54:	f88d 3007 	strb.w	r3, [sp, #7]
 8007c58:	f000 f88e 	bl	8007d78 <max_serialized_size_geometry_msgs__msg__Vector3>
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	4601      	mov	r1, r0
 8007c60:	f10d 0007 	add.w	r0, sp, #7
 8007c64:	f000 f888 	bl	8007d78 <max_serialized_size_geometry_msgs__msg__Vector3>
 8007c68:	4420      	add	r0, r4
 8007c6a:	b002      	add	sp, #8
 8007c6c:	bd10      	pop	{r4, pc}
 8007c6e:	bf00      	nop

08007c70 <max_serialized_size_geometry_msgs__msg__Twist>:
 8007c70:	2301      	movs	r3, #1
 8007c72:	b570      	push	{r4, r5, r6, lr}
 8007c74:	7003      	strb	r3, [r0, #0]
 8007c76:	4605      	mov	r5, r0
 8007c78:	460e      	mov	r6, r1
 8007c7a:	f000 f87d 	bl	8007d78 <max_serialized_size_geometry_msgs__msg__Vector3>
 8007c7e:	4604      	mov	r4, r0
 8007c80:	1831      	adds	r1, r6, r0
 8007c82:	4628      	mov	r0, r5
 8007c84:	f000 f878 	bl	8007d78 <max_serialized_size_geometry_msgs__msg__Vector3>
 8007c88:	4420      	add	r0, r4
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}

08007c8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8007c8c:	4800      	ldr	r0, [pc, #0]	@ (8007c90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 8007c8e:	4770      	bx	lr
 8007c90:	200001a0 	.word	0x200001a0

08007c94 <get_serialized_size_geometry_msgs__msg__Vector3>:
 8007c94:	b1b8      	cbz	r0, 8007cc6 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8007c96:	b570      	push	{r4, r5, r6, lr}
 8007c98:	460d      	mov	r5, r1
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	2108      	movs	r1, #8
 8007c9e:	f001 fb7b 	bl	8009398 <ucdr_alignment>
 8007ca2:	2108      	movs	r1, #8
 8007ca4:	186e      	adds	r6, r5, r1
 8007ca6:	4406      	add	r6, r0
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f001 fb75 	bl	8009398 <ucdr_alignment>
 8007cae:	f100 0408 	add.w	r4, r0, #8
 8007cb2:	4434      	add	r4, r6
 8007cb4:	2108      	movs	r1, #8
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f001 fb6e 	bl	8009398 <ucdr_alignment>
 8007cbc:	f1c5 0508 	rsb	r5, r5, #8
 8007cc0:	4405      	add	r5, r0
 8007cc2:	1928      	adds	r0, r5, r4
 8007cc4:	bd70      	pop	{r4, r5, r6, pc}
 8007cc6:	4770      	bx	lr

08007cc8 <_Vector3__cdr_deserialize>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	460c      	mov	r4, r1
 8007ccc:	b171      	cbz	r1, 8007cec <_Vector3__cdr_deserialize+0x24>
 8007cce:	4605      	mov	r5, r0
 8007cd0:	f001 f984 	bl	8008fdc <ucdr_deserialize_double>
 8007cd4:	f104 0108 	add.w	r1, r4, #8
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f001 f97f 	bl	8008fdc <ucdr_deserialize_double>
 8007cde:	f104 0110 	add.w	r1, r4, #16
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ce8:	f001 b978 	b.w	8008fdc <ucdr_deserialize_double>
 8007cec:	4608      	mov	r0, r1
 8007cee:	bd38      	pop	{r3, r4, r5, pc}

08007cf0 <_Vector3__cdr_serialize>:
 8007cf0:	b198      	cbz	r0, 8007d1a <_Vector3__cdr_serialize+0x2a>
 8007cf2:	b538      	push	{r3, r4, r5, lr}
 8007cf4:	ed90 0b00 	vldr	d0, [r0]
 8007cf8:	460d      	mov	r5, r1
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	f000 ffdd 	bl	8008cbc <ucdr_serialize_double>
 8007d02:	ed94 0b02 	vldr	d0, [r4, #8]
 8007d06:	4628      	mov	r0, r5
 8007d08:	f000 ffd8 	bl	8008cbc <ucdr_serialize_double>
 8007d0c:	ed94 0b04 	vldr	d0, [r4, #16]
 8007d10:	4628      	mov	r0, r5
 8007d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d16:	f000 bfd1 	b.w	8008cbc <ucdr_serialize_double>
 8007d1a:	4770      	bx	lr

08007d1c <_Vector3__get_serialized_size>:
 8007d1c:	b1a0      	cbz	r0, 8007d48 <_Vector3__get_serialized_size+0x2c>
 8007d1e:	b538      	push	{r3, r4, r5, lr}
 8007d20:	2108      	movs	r1, #8
 8007d22:	2000      	movs	r0, #0
 8007d24:	f001 fb38 	bl	8009398 <ucdr_alignment>
 8007d28:	f100 0508 	add.w	r5, r0, #8
 8007d2c:	2108      	movs	r1, #8
 8007d2e:	4628      	mov	r0, r5
 8007d30:	f001 fb32 	bl	8009398 <ucdr_alignment>
 8007d34:	f100 0408 	add.w	r4, r0, #8
 8007d38:	442c      	add	r4, r5
 8007d3a:	2108      	movs	r1, #8
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f001 fb2b 	bl	8009398 <ucdr_alignment>
 8007d42:	3008      	adds	r0, #8
 8007d44:	4420      	add	r0, r4
 8007d46:	bd38      	pop	{r3, r4, r5, pc}
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop

08007d4c <_Vector3__max_serialized_size>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	2108      	movs	r1, #8
 8007d50:	2000      	movs	r0, #0
 8007d52:	f001 fb21 	bl	8009398 <ucdr_alignment>
 8007d56:	f100 0508 	add.w	r5, r0, #8
 8007d5a:	2108      	movs	r1, #8
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f001 fb1b 	bl	8009398 <ucdr_alignment>
 8007d62:	f100 0408 	add.w	r4, r0, #8
 8007d66:	442c      	add	r4, r5
 8007d68:	2108      	movs	r1, #8
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f001 fb14 	bl	8009398 <ucdr_alignment>
 8007d70:	3008      	adds	r0, #8
 8007d72:	4420      	add	r0, r4
 8007d74:	bd38      	pop	{r3, r4, r5, pc}
 8007d76:	bf00      	nop

08007d78 <max_serialized_size_geometry_msgs__msg__Vector3>:
 8007d78:	b570      	push	{r4, r5, r6, lr}
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	7003      	strb	r3, [r0, #0]
 8007d80:	2108      	movs	r1, #8
 8007d82:	4620      	mov	r0, r4
 8007d84:	f001 fb08 	bl	8009398 <ucdr_alignment>
 8007d88:	2108      	movs	r1, #8
 8007d8a:	1863      	adds	r3, r4, r1
 8007d8c:	18c6      	adds	r6, r0, r3
 8007d8e:	4630      	mov	r0, r6
 8007d90:	f001 fb02 	bl	8009398 <ucdr_alignment>
 8007d94:	f100 0508 	add.w	r5, r0, #8
 8007d98:	4435      	add	r5, r6
 8007d9a:	2108      	movs	r1, #8
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	f001 fafb 	bl	8009398 <ucdr_alignment>
 8007da2:	f1c4 0408 	rsb	r4, r4, #8
 8007da6:	4420      	add	r0, r4
 8007da8:	4428      	add	r0, r5
 8007daa:	bd70      	pop	{r4, r5, r6, pc}

08007dac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8007dac:	4800      	ldr	r0, [pc, #0]	@ (8007db0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 8007dae:	4770      	bx	lr
 8007db0:	200001d4 	.word	0x200001d4

08007db4 <ucdr_serialize_bool>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	460d      	mov	r5, r1
 8007db8:	2101      	movs	r1, #1
 8007dba:	4604      	mov	r4, r0
 8007dbc:	f001 faa0 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8007dc0:	b148      	cbz	r0, 8007dd6 <ucdr_serialize_bool+0x22>
 8007dc2:	68a3      	ldr	r3, [r4, #8]
 8007dc4:	701d      	strb	r5, [r3, #0]
 8007dc6:	68a2      	ldr	r2, [r4, #8]
 8007dc8:	6923      	ldr	r3, [r4, #16]
 8007dca:	2101      	movs	r1, #1
 8007dcc:	440a      	add	r2, r1
 8007dce:	440b      	add	r3, r1
 8007dd0:	60a2      	str	r2, [r4, #8]
 8007dd2:	6123      	str	r3, [r4, #16]
 8007dd4:	7561      	strb	r1, [r4, #21]
 8007dd6:	7da0      	ldrb	r0, [r4, #22]
 8007dd8:	f080 0001 	eor.w	r0, r0, #1
 8007ddc:	bd38      	pop	{r3, r4, r5, pc}
 8007dde:	bf00      	nop

08007de0 <ucdr_deserialize_bool>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	460d      	mov	r5, r1
 8007de4:	2101      	movs	r1, #1
 8007de6:	4604      	mov	r4, r0
 8007de8:	f001 fa8a 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8007dec:	b160      	cbz	r0, 8007e08 <ucdr_deserialize_bool+0x28>
 8007dee:	68a2      	ldr	r2, [r4, #8]
 8007df0:	6923      	ldr	r3, [r4, #16]
 8007df2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007df6:	3900      	subs	r1, #0
 8007df8:	bf18      	it	ne
 8007dfa:	2101      	movne	r1, #1
 8007dfc:	7029      	strb	r1, [r5, #0]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	2101      	movs	r1, #1
 8007e02:	60a2      	str	r2, [r4, #8]
 8007e04:	6123      	str	r3, [r4, #16]
 8007e06:	7561      	strb	r1, [r4, #21]
 8007e08:	7da0      	ldrb	r0, [r4, #22]
 8007e0a:	f080 0001 	eor.w	r0, r0, #1
 8007e0e:	bd38      	pop	{r3, r4, r5, pc}

08007e10 <ucdr_serialize_uint8_t>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	460d      	mov	r5, r1
 8007e14:	2101      	movs	r1, #1
 8007e16:	4604      	mov	r4, r0
 8007e18:	f001 fa72 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8007e1c:	b148      	cbz	r0, 8007e32 <ucdr_serialize_uint8_t+0x22>
 8007e1e:	68a3      	ldr	r3, [r4, #8]
 8007e20:	701d      	strb	r5, [r3, #0]
 8007e22:	68a2      	ldr	r2, [r4, #8]
 8007e24:	6923      	ldr	r3, [r4, #16]
 8007e26:	2101      	movs	r1, #1
 8007e28:	440a      	add	r2, r1
 8007e2a:	440b      	add	r3, r1
 8007e2c:	60a2      	str	r2, [r4, #8]
 8007e2e:	6123      	str	r3, [r4, #16]
 8007e30:	7561      	strb	r1, [r4, #21]
 8007e32:	7da0      	ldrb	r0, [r4, #22]
 8007e34:	f080 0001 	eor.w	r0, r0, #1
 8007e38:	bd38      	pop	{r3, r4, r5, pc}
 8007e3a:	bf00      	nop

08007e3c <ucdr_deserialize_uint8_t>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	460d      	mov	r5, r1
 8007e40:	2101      	movs	r1, #1
 8007e42:	4604      	mov	r4, r0
 8007e44:	f001 fa5c 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8007e48:	b150      	cbz	r0, 8007e60 <ucdr_deserialize_uint8_t+0x24>
 8007e4a:	68a3      	ldr	r3, [r4, #8]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	702b      	strb	r3, [r5, #0]
 8007e50:	68a2      	ldr	r2, [r4, #8]
 8007e52:	6923      	ldr	r3, [r4, #16]
 8007e54:	2101      	movs	r1, #1
 8007e56:	440a      	add	r2, r1
 8007e58:	440b      	add	r3, r1
 8007e5a:	60a2      	str	r2, [r4, #8]
 8007e5c:	6123      	str	r3, [r4, #16]
 8007e5e:	7561      	strb	r1, [r4, #21]
 8007e60:	7da0      	ldrb	r0, [r4, #22]
 8007e62:	f080 0001 	eor.w	r0, r0, #1
 8007e66:	bd38      	pop	{r3, r4, r5, pc}

08007e68 <ucdr_serialize_uint16_t>:
 8007e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6c:	b082      	sub	sp, #8
 8007e6e:	460b      	mov	r3, r1
 8007e70:	2102      	movs	r1, #2
 8007e72:	4604      	mov	r4, r0
 8007e74:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007e78:	f001 fa96 	bl	80093a8 <ucdr_buffer_alignment>
 8007e7c:	4601      	mov	r1, r0
 8007e7e:	4620      	mov	r0, r4
 8007e80:	7d67      	ldrb	r7, [r4, #21]
 8007e82:	f001 fad5 	bl	8009430 <ucdr_advance_buffer>
 8007e86:	2102      	movs	r1, #2
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f001 fa2d 	bl	80092e8 <ucdr_check_buffer_available_for>
 8007e8e:	b1c0      	cbz	r0, 8007ec2 <ucdr_serialize_uint16_t+0x5a>
 8007e90:	7d22      	ldrb	r2, [r4, #20]
 8007e92:	68a3      	ldr	r3, [r4, #8]
 8007e94:	2a01      	cmp	r2, #1
 8007e96:	d04e      	beq.n	8007f36 <ucdr_serialize_uint16_t+0xce>
 8007e98:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007e9c:	701a      	strb	r2, [r3, #0]
 8007e9e:	68a3      	ldr	r3, [r4, #8]
 8007ea0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007ea4:	705a      	strb	r2, [r3, #1]
 8007ea6:	68a2      	ldr	r2, [r4, #8]
 8007ea8:	6923      	ldr	r3, [r4, #16]
 8007eaa:	3202      	adds	r2, #2
 8007eac:	3302      	adds	r3, #2
 8007eae:	2102      	movs	r1, #2
 8007eb0:	60a2      	str	r2, [r4, #8]
 8007eb2:	6123      	str	r3, [r4, #16]
 8007eb4:	7561      	strb	r1, [r4, #21]
 8007eb6:	7da0      	ldrb	r0, [r4, #22]
 8007eb8:	f080 0001 	eor.w	r0, r0, #1
 8007ebc:	b002      	add	sp, #8
 8007ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007ec6:	42ab      	cmp	r3, r5
 8007ec8:	d923      	bls.n	8007f12 <ucdr_serialize_uint16_t+0xaa>
 8007eca:	1b5e      	subs	r6, r3, r5
 8007ecc:	60a3      	str	r3, [r4, #8]
 8007ece:	6923      	ldr	r3, [r4, #16]
 8007ed0:	f1c6 0802 	rsb	r8, r6, #2
 8007ed4:	4433      	add	r3, r6
 8007ed6:	6123      	str	r3, [r4, #16]
 8007ed8:	4641      	mov	r1, r8
 8007eda:	4620      	mov	r0, r4
 8007edc:	f001 fa10 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8007ee0:	b368      	cbz	r0, 8007f3e <ucdr_serialize_uint16_t+0xd6>
 8007ee2:	7d23      	ldrb	r3, [r4, #20]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d03b      	beq.n	8007f60 <ucdr_serialize_uint16_t+0xf8>
 8007ee8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007eec:	702b      	strb	r3, [r5, #0]
 8007eee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007ef2:	706b      	strb	r3, [r5, #1]
 8007ef4:	6923      	ldr	r3, [r4, #16]
 8007ef6:	68a2      	ldr	r2, [r4, #8]
 8007ef8:	7da0      	ldrb	r0, [r4, #22]
 8007efa:	3302      	adds	r3, #2
 8007efc:	4442      	add	r2, r8
 8007efe:	1b9b      	subs	r3, r3, r6
 8007f00:	2102      	movs	r1, #2
 8007f02:	f080 0001 	eor.w	r0, r0, #1
 8007f06:	60a2      	str	r2, [r4, #8]
 8007f08:	6123      	str	r3, [r4, #16]
 8007f0a:	7561      	strb	r1, [r4, #21]
 8007f0c:	b002      	add	sp, #8
 8007f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f12:	2102      	movs	r1, #2
 8007f14:	4620      	mov	r0, r4
 8007f16:	f001 f9f3 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d0cb      	beq.n	8007eb6 <ucdr_serialize_uint16_t+0x4e>
 8007f1e:	7d23      	ldrb	r3, [r4, #20]
 8007f20:	68a2      	ldr	r2, [r4, #8]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d018      	beq.n	8007f58 <ucdr_serialize_uint16_t+0xf0>
 8007f26:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007f2a:	7013      	strb	r3, [r2, #0]
 8007f2c:	68a3      	ldr	r3, [r4, #8]
 8007f2e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007f32:	705a      	strb	r2, [r3, #1]
 8007f34:	e7b7      	b.n	8007ea6 <ucdr_serialize_uint16_t+0x3e>
 8007f36:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007f3a:	801a      	strh	r2, [r3, #0]
 8007f3c:	e7b3      	b.n	8007ea6 <ucdr_serialize_uint16_t+0x3e>
 8007f3e:	68a2      	ldr	r2, [r4, #8]
 8007f40:	6923      	ldr	r3, [r4, #16]
 8007f42:	7da0      	ldrb	r0, [r4, #22]
 8007f44:	7567      	strb	r7, [r4, #21]
 8007f46:	1b92      	subs	r2, r2, r6
 8007f48:	1b9b      	subs	r3, r3, r6
 8007f4a:	f080 0001 	eor.w	r0, r0, #1
 8007f4e:	60a2      	str	r2, [r4, #8]
 8007f50:	6123      	str	r3, [r4, #16]
 8007f52:	b002      	add	sp, #8
 8007f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f58:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007f5c:	8013      	strh	r3, [r2, #0]
 8007f5e:	e7a2      	b.n	8007ea6 <ucdr_serialize_uint16_t+0x3e>
 8007f60:	4628      	mov	r0, r5
 8007f62:	f10d 0506 	add.w	r5, sp, #6
 8007f66:	4632      	mov	r2, r6
 8007f68:	4629      	mov	r1, r5
 8007f6a:	f010 f838 	bl	8017fde <memcpy>
 8007f6e:	68a0      	ldr	r0, [r4, #8]
 8007f70:	4642      	mov	r2, r8
 8007f72:	19a9      	adds	r1, r5, r6
 8007f74:	f010 f833 	bl	8017fde <memcpy>
 8007f78:	e7bc      	b.n	8007ef4 <ucdr_serialize_uint16_t+0x8c>
 8007f7a:	bf00      	nop

08007f7c <ucdr_serialize_endian_uint16_t>:
 8007f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f80:	b083      	sub	sp, #12
 8007f82:	460d      	mov	r5, r1
 8007f84:	2102      	movs	r1, #2
 8007f86:	4604      	mov	r4, r0
 8007f88:	f8ad 2006 	strh.w	r2, [sp, #6]
 8007f8c:	f001 fa0c 	bl	80093a8 <ucdr_buffer_alignment>
 8007f90:	4601      	mov	r1, r0
 8007f92:	4620      	mov	r0, r4
 8007f94:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007f98:	f001 fa4a 	bl	8009430 <ucdr_advance_buffer>
 8007f9c:	2102      	movs	r1, #2
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f001 f9a2 	bl	80092e8 <ucdr_check_buffer_available_for>
 8007fa4:	bb60      	cbnz	r0, 8008000 <ucdr_serialize_endian_uint16_t+0x84>
 8007fa6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8007faa:	42be      	cmp	r6, r7
 8007fac:	d923      	bls.n	8007ff6 <ucdr_serialize_endian_uint16_t+0x7a>
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	60a6      	str	r6, [r4, #8]
 8007fb2:	1bf6      	subs	r6, r6, r7
 8007fb4:	4433      	add	r3, r6
 8007fb6:	f1c6 0902 	rsb	r9, r6, #2
 8007fba:	6123      	str	r3, [r4, #16]
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f001 f99e 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d037      	beq.n	8008038 <ucdr_serialize_endian_uint16_t+0xbc>
 8007fc8:	2d01      	cmp	r5, #1
 8007fca:	d043      	beq.n	8008054 <ucdr_serialize_endian_uint16_t+0xd8>
 8007fcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007fd0:	703b      	strb	r3, [r7, #0]
 8007fd2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007fd6:	707b      	strb	r3, [r7, #1]
 8007fd8:	6923      	ldr	r3, [r4, #16]
 8007fda:	68a2      	ldr	r2, [r4, #8]
 8007fdc:	7da0      	ldrb	r0, [r4, #22]
 8007fde:	3302      	adds	r3, #2
 8007fe0:	444a      	add	r2, r9
 8007fe2:	1b9b      	subs	r3, r3, r6
 8007fe4:	2102      	movs	r1, #2
 8007fe6:	f080 0001 	eor.w	r0, r0, #1
 8007fea:	60a2      	str	r2, [r4, #8]
 8007fec:	6123      	str	r3, [r4, #16]
 8007fee:	7561      	strb	r1, [r4, #21]
 8007ff0:	b003      	add	sp, #12
 8007ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ff6:	2102      	movs	r1, #2
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f001 f981 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8007ffe:	b188      	cbz	r0, 8008024 <ucdr_serialize_endian_uint16_t+0xa8>
 8008000:	2d01      	cmp	r5, #1
 8008002:	68a3      	ldr	r3, [r4, #8]
 8008004:	d014      	beq.n	8008030 <ucdr_serialize_endian_uint16_t+0xb4>
 8008006:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800800a:	701a      	strb	r2, [r3, #0]
 800800c:	68a3      	ldr	r3, [r4, #8]
 800800e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008012:	705a      	strb	r2, [r3, #1]
 8008014:	68a2      	ldr	r2, [r4, #8]
 8008016:	6923      	ldr	r3, [r4, #16]
 8008018:	3202      	adds	r2, #2
 800801a:	3302      	adds	r3, #2
 800801c:	2102      	movs	r1, #2
 800801e:	60a2      	str	r2, [r4, #8]
 8008020:	6123      	str	r3, [r4, #16]
 8008022:	7561      	strb	r1, [r4, #21]
 8008024:	7da0      	ldrb	r0, [r4, #22]
 8008026:	f080 0001 	eor.w	r0, r0, #1
 800802a:	b003      	add	sp, #12
 800802c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008030:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008034:	801a      	strh	r2, [r3, #0]
 8008036:	e7ed      	b.n	8008014 <ucdr_serialize_endian_uint16_t+0x98>
 8008038:	68a2      	ldr	r2, [r4, #8]
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	7da0      	ldrb	r0, [r4, #22]
 800803e:	f884 8015 	strb.w	r8, [r4, #21]
 8008042:	1b92      	subs	r2, r2, r6
 8008044:	1b9b      	subs	r3, r3, r6
 8008046:	f080 0001 	eor.w	r0, r0, #1
 800804a:	60a2      	str	r2, [r4, #8]
 800804c:	6123      	str	r3, [r4, #16]
 800804e:	b003      	add	sp, #12
 8008050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008054:	f10d 0506 	add.w	r5, sp, #6
 8008058:	4632      	mov	r2, r6
 800805a:	4629      	mov	r1, r5
 800805c:	4638      	mov	r0, r7
 800805e:	f00f ffbe 	bl	8017fde <memcpy>
 8008062:	68a0      	ldr	r0, [r4, #8]
 8008064:	464a      	mov	r2, r9
 8008066:	19a9      	adds	r1, r5, r6
 8008068:	f00f ffb9 	bl	8017fde <memcpy>
 800806c:	e7b4      	b.n	8007fd8 <ucdr_serialize_endian_uint16_t+0x5c>
 800806e:	bf00      	nop

08008070 <ucdr_deserialize_uint16_t>:
 8008070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008074:	460d      	mov	r5, r1
 8008076:	2102      	movs	r1, #2
 8008078:	4604      	mov	r4, r0
 800807a:	f001 f995 	bl	80093a8 <ucdr_buffer_alignment>
 800807e:	4601      	mov	r1, r0
 8008080:	4620      	mov	r0, r4
 8008082:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008086:	f001 f9d3 	bl	8009430 <ucdr_advance_buffer>
 800808a:	2102      	movs	r1, #2
 800808c:	4620      	mov	r0, r4
 800808e:	f001 f92b 	bl	80092e8 <ucdr_check_buffer_available_for>
 8008092:	b1a8      	cbz	r0, 80080c0 <ucdr_deserialize_uint16_t+0x50>
 8008094:	7d22      	ldrb	r2, [r4, #20]
 8008096:	68a3      	ldr	r3, [r4, #8]
 8008098:	2a01      	cmp	r2, #1
 800809a:	d046      	beq.n	800812a <ucdr_deserialize_uint16_t+0xba>
 800809c:	785b      	ldrb	r3, [r3, #1]
 800809e:	702b      	strb	r3, [r5, #0]
 80080a0:	68a3      	ldr	r3, [r4, #8]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	706b      	strb	r3, [r5, #1]
 80080a6:	68a2      	ldr	r2, [r4, #8]
 80080a8:	6923      	ldr	r3, [r4, #16]
 80080aa:	3202      	adds	r2, #2
 80080ac:	3302      	adds	r3, #2
 80080ae:	2102      	movs	r1, #2
 80080b0:	60a2      	str	r2, [r4, #8]
 80080b2:	6123      	str	r3, [r4, #16]
 80080b4:	7561      	strb	r1, [r4, #21]
 80080b6:	7da0      	ldrb	r0, [r4, #22]
 80080b8:	f080 0001 	eor.w	r0, r0, #1
 80080bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080c0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80080c4:	42be      	cmp	r6, r7
 80080c6:	d920      	bls.n	800810a <ucdr_deserialize_uint16_t+0x9a>
 80080c8:	6923      	ldr	r3, [r4, #16]
 80080ca:	60a6      	str	r6, [r4, #8]
 80080cc:	1bf6      	subs	r6, r6, r7
 80080ce:	4433      	add	r3, r6
 80080d0:	f1c6 0902 	rsb	r9, r6, #2
 80080d4:	6123      	str	r3, [r4, #16]
 80080d6:	4649      	mov	r1, r9
 80080d8:	4620      	mov	r0, r4
 80080da:	f001 f911 	bl	8009300 <ucdr_check_final_buffer_behavior>
 80080de:	b338      	cbz	r0, 8008130 <ucdr_deserialize_uint16_t+0xc0>
 80080e0:	7d23      	ldrb	r3, [r4, #20]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d034      	beq.n	8008150 <ucdr_deserialize_uint16_t+0xe0>
 80080e6:	787b      	ldrb	r3, [r7, #1]
 80080e8:	702b      	strb	r3, [r5, #0]
 80080ea:	783b      	ldrb	r3, [r7, #0]
 80080ec:	706b      	strb	r3, [r5, #1]
 80080ee:	6923      	ldr	r3, [r4, #16]
 80080f0:	68a2      	ldr	r2, [r4, #8]
 80080f2:	7da0      	ldrb	r0, [r4, #22]
 80080f4:	2102      	movs	r1, #2
 80080f6:	3302      	adds	r3, #2
 80080f8:	444a      	add	r2, r9
 80080fa:	1b9b      	subs	r3, r3, r6
 80080fc:	7561      	strb	r1, [r4, #21]
 80080fe:	60a2      	str	r2, [r4, #8]
 8008100:	6123      	str	r3, [r4, #16]
 8008102:	f080 0001 	eor.w	r0, r0, #1
 8008106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800810a:	2102      	movs	r1, #2
 800810c:	4620      	mov	r0, r4
 800810e:	f001 f8f7 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8008112:	2800      	cmp	r0, #0
 8008114:	d0cf      	beq.n	80080b6 <ucdr_deserialize_uint16_t+0x46>
 8008116:	7d23      	ldrb	r3, [r4, #20]
 8008118:	68a2      	ldr	r2, [r4, #8]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d015      	beq.n	800814a <ucdr_deserialize_uint16_t+0xda>
 800811e:	7853      	ldrb	r3, [r2, #1]
 8008120:	702b      	strb	r3, [r5, #0]
 8008122:	68a3      	ldr	r3, [r4, #8]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	706b      	strb	r3, [r5, #1]
 8008128:	e7bd      	b.n	80080a6 <ucdr_deserialize_uint16_t+0x36>
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	802b      	strh	r3, [r5, #0]
 800812e:	e7ba      	b.n	80080a6 <ucdr_deserialize_uint16_t+0x36>
 8008130:	68a2      	ldr	r2, [r4, #8]
 8008132:	6923      	ldr	r3, [r4, #16]
 8008134:	7da0      	ldrb	r0, [r4, #22]
 8008136:	f884 8015 	strb.w	r8, [r4, #21]
 800813a:	1b92      	subs	r2, r2, r6
 800813c:	1b9b      	subs	r3, r3, r6
 800813e:	60a2      	str	r2, [r4, #8]
 8008140:	6123      	str	r3, [r4, #16]
 8008142:	f080 0001 	eor.w	r0, r0, #1
 8008146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800814a:	8813      	ldrh	r3, [r2, #0]
 800814c:	802b      	strh	r3, [r5, #0]
 800814e:	e7aa      	b.n	80080a6 <ucdr_deserialize_uint16_t+0x36>
 8008150:	4639      	mov	r1, r7
 8008152:	4632      	mov	r2, r6
 8008154:	4628      	mov	r0, r5
 8008156:	f00f ff42 	bl	8017fde <memcpy>
 800815a:	68a1      	ldr	r1, [r4, #8]
 800815c:	464a      	mov	r2, r9
 800815e:	19a8      	adds	r0, r5, r6
 8008160:	f00f ff3d 	bl	8017fde <memcpy>
 8008164:	e7c3      	b.n	80080ee <ucdr_deserialize_uint16_t+0x7e>
 8008166:	bf00      	nop

08008168 <ucdr_deserialize_endian_uint16_t>:
 8008168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800816c:	460e      	mov	r6, r1
 800816e:	2102      	movs	r1, #2
 8008170:	4604      	mov	r4, r0
 8008172:	4615      	mov	r5, r2
 8008174:	f001 f918 	bl	80093a8 <ucdr_buffer_alignment>
 8008178:	4601      	mov	r1, r0
 800817a:	4620      	mov	r0, r4
 800817c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008180:	f001 f956 	bl	8009430 <ucdr_advance_buffer>
 8008184:	2102      	movs	r1, #2
 8008186:	4620      	mov	r0, r4
 8008188:	f001 f8ae 	bl	80092e8 <ucdr_check_buffer_available_for>
 800818c:	bb60      	cbnz	r0, 80081e8 <ucdr_deserialize_endian_uint16_t+0x80>
 800818e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8008192:	4547      	cmp	r7, r8
 8008194:	d923      	bls.n	80081de <ucdr_deserialize_endian_uint16_t+0x76>
 8008196:	6923      	ldr	r3, [r4, #16]
 8008198:	60a7      	str	r7, [r4, #8]
 800819a:	eba7 0708 	sub.w	r7, r7, r8
 800819e:	443b      	add	r3, r7
 80081a0:	f1c7 0a02 	rsb	sl, r7, #2
 80081a4:	6123      	str	r3, [r4, #16]
 80081a6:	4651      	mov	r1, sl
 80081a8:	4620      	mov	r0, r4
 80081aa:	f001 f8a9 	bl	8009300 <ucdr_check_final_buffer_behavior>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d032      	beq.n	8008218 <ucdr_deserialize_endian_uint16_t+0xb0>
 80081b2:	2e01      	cmp	r6, #1
 80081b4:	d03d      	beq.n	8008232 <ucdr_deserialize_endian_uint16_t+0xca>
 80081b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80081ba:	702b      	strb	r3, [r5, #0]
 80081bc:	f898 3000 	ldrb.w	r3, [r8]
 80081c0:	706b      	strb	r3, [r5, #1]
 80081c2:	6923      	ldr	r3, [r4, #16]
 80081c4:	68a2      	ldr	r2, [r4, #8]
 80081c6:	7da0      	ldrb	r0, [r4, #22]
 80081c8:	2102      	movs	r1, #2
 80081ca:	3302      	adds	r3, #2
 80081cc:	4452      	add	r2, sl
 80081ce:	1bdb      	subs	r3, r3, r7
 80081d0:	7561      	strb	r1, [r4, #21]
 80081d2:	60a2      	str	r2, [r4, #8]
 80081d4:	6123      	str	r3, [r4, #16]
 80081d6:	f080 0001 	eor.w	r0, r0, #1
 80081da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081de:	2102      	movs	r1, #2
 80081e0:	4620      	mov	r0, r4
 80081e2:	f001 f88d 	bl	8009300 <ucdr_check_final_buffer_behavior>
 80081e6:	b178      	cbz	r0, 8008208 <ucdr_deserialize_endian_uint16_t+0xa0>
 80081e8:	2e01      	cmp	r6, #1
 80081ea:	68a3      	ldr	r3, [r4, #8]
 80081ec:	d011      	beq.n	8008212 <ucdr_deserialize_endian_uint16_t+0xaa>
 80081ee:	785b      	ldrb	r3, [r3, #1]
 80081f0:	702b      	strb	r3, [r5, #0]
 80081f2:	68a3      	ldr	r3, [r4, #8]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	706b      	strb	r3, [r5, #1]
 80081f8:	68a2      	ldr	r2, [r4, #8]
 80081fa:	6923      	ldr	r3, [r4, #16]
 80081fc:	3202      	adds	r2, #2
 80081fe:	3302      	adds	r3, #2
 8008200:	2102      	movs	r1, #2
 8008202:	60a2      	str	r2, [r4, #8]
 8008204:	6123      	str	r3, [r4, #16]
 8008206:	7561      	strb	r1, [r4, #21]
 8008208:	7da0      	ldrb	r0, [r4, #22]
 800820a:	f080 0001 	eor.w	r0, r0, #1
 800820e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008212:	881b      	ldrh	r3, [r3, #0]
 8008214:	802b      	strh	r3, [r5, #0]
 8008216:	e7ef      	b.n	80081f8 <ucdr_deserialize_endian_uint16_t+0x90>
 8008218:	68a2      	ldr	r2, [r4, #8]
 800821a:	6923      	ldr	r3, [r4, #16]
 800821c:	7da0      	ldrb	r0, [r4, #22]
 800821e:	f884 9015 	strb.w	r9, [r4, #21]
 8008222:	1bd2      	subs	r2, r2, r7
 8008224:	1bdb      	subs	r3, r3, r7
 8008226:	60a2      	str	r2, [r4, #8]
 8008228:	6123      	str	r3, [r4, #16]
 800822a:	f080 0001 	eor.w	r0, r0, #1
 800822e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008232:	4641      	mov	r1, r8
 8008234:	463a      	mov	r2, r7
 8008236:	4628      	mov	r0, r5
 8008238:	f00f fed1 	bl	8017fde <memcpy>
 800823c:	68a1      	ldr	r1, [r4, #8]
 800823e:	4652      	mov	r2, sl
 8008240:	19e8      	adds	r0, r5, r7
 8008242:	f00f fecc 	bl	8017fde <memcpy>
 8008246:	e7bc      	b.n	80081c2 <ucdr_deserialize_endian_uint16_t+0x5a>

08008248 <ucdr_serialize_uint32_t>:
 8008248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	4604      	mov	r4, r0
 8008250:	9101      	str	r1, [sp, #4]
 8008252:	2104      	movs	r1, #4
 8008254:	f001 f8a8 	bl	80093a8 <ucdr_buffer_alignment>
 8008258:	4601      	mov	r1, r0
 800825a:	4620      	mov	r0, r4
 800825c:	7d67      	ldrb	r7, [r4, #21]
 800825e:	f001 f8e7 	bl	8009430 <ucdr_advance_buffer>
 8008262:	2104      	movs	r1, #4
 8008264:	4620      	mov	r0, r4
 8008266:	f001 f83f 	bl	80092e8 <ucdr_check_buffer_available_for>
 800826a:	b300      	cbz	r0, 80082ae <ucdr_serialize_uint32_t+0x66>
 800826c:	7d22      	ldrb	r2, [r4, #20]
 800826e:	68a3      	ldr	r3, [r4, #8]
 8008270:	2a01      	cmp	r2, #1
 8008272:	d05d      	beq.n	8008330 <ucdr_serialize_uint32_t+0xe8>
 8008274:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008278:	701a      	strb	r2, [r3, #0]
 800827a:	68a3      	ldr	r3, [r4, #8]
 800827c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008280:	705a      	strb	r2, [r3, #1]
 8008282:	68a3      	ldr	r3, [r4, #8]
 8008284:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008288:	709a      	strb	r2, [r3, #2]
 800828a:	68a3      	ldr	r3, [r4, #8]
 800828c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008290:	70da      	strb	r2, [r3, #3]
 8008292:	68a2      	ldr	r2, [r4, #8]
 8008294:	6923      	ldr	r3, [r4, #16]
 8008296:	3204      	adds	r2, #4
 8008298:	3304      	adds	r3, #4
 800829a:	2104      	movs	r1, #4
 800829c:	60a2      	str	r2, [r4, #8]
 800829e:	6123      	str	r3, [r4, #16]
 80082a0:	7561      	strb	r1, [r4, #21]
 80082a2:	7da0      	ldrb	r0, [r4, #22]
 80082a4:	f080 0001 	eor.w	r0, r0, #1
 80082a8:	b002      	add	sp, #8
 80082aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ae:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80082b2:	42ab      	cmp	r3, r5
 80082b4:	d92e      	bls.n	8008314 <ucdr_serialize_uint32_t+0xcc>
 80082b6:	1b5e      	subs	r6, r3, r5
 80082b8:	60a3      	str	r3, [r4, #8]
 80082ba:	6923      	ldr	r3, [r4, #16]
 80082bc:	f1c6 0804 	rsb	r8, r6, #4
 80082c0:	4433      	add	r3, r6
 80082c2:	6123      	str	r3, [r4, #16]
 80082c4:	4641      	mov	r1, r8
 80082c6:	4620      	mov	r0, r4
 80082c8:	f001 f81a 	bl	8009300 <ucdr_check_final_buffer_behavior>
 80082cc:	b398      	cbz	r0, 8008336 <ucdr_serialize_uint32_t+0xee>
 80082ce:	7d23      	ldrb	r3, [r4, #20]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d046      	beq.n	8008362 <ucdr_serialize_uint32_t+0x11a>
 80082d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80082d8:	702b      	strb	r3, [r5, #0]
 80082da:	2e01      	cmp	r6, #1
 80082dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80082e0:	706b      	strb	r3, [r5, #1]
 80082e2:	d035      	beq.n	8008350 <ucdr_serialize_uint32_t+0x108>
 80082e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80082e8:	70ab      	strb	r3, [r5, #2]
 80082ea:	2e02      	cmp	r6, #2
 80082ec:	d034      	beq.n	8008358 <ucdr_serialize_uint32_t+0x110>
 80082ee:	3503      	adds	r5, #3
 80082f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80082f4:	702b      	strb	r3, [r5, #0]
 80082f6:	6923      	ldr	r3, [r4, #16]
 80082f8:	68a2      	ldr	r2, [r4, #8]
 80082fa:	7da0      	ldrb	r0, [r4, #22]
 80082fc:	3304      	adds	r3, #4
 80082fe:	4442      	add	r2, r8
 8008300:	1b9b      	subs	r3, r3, r6
 8008302:	2104      	movs	r1, #4
 8008304:	f080 0001 	eor.w	r0, r0, #1
 8008308:	60a2      	str	r2, [r4, #8]
 800830a:	6123      	str	r3, [r4, #16]
 800830c:	7561      	strb	r1, [r4, #21]
 800830e:	b002      	add	sp, #8
 8008310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008314:	2104      	movs	r1, #4
 8008316:	4620      	mov	r0, r4
 8008318:	f000 fff2 	bl	8009300 <ucdr_check_final_buffer_behavior>
 800831c:	2800      	cmp	r0, #0
 800831e:	d0c0      	beq.n	80082a2 <ucdr_serialize_uint32_t+0x5a>
 8008320:	7d23      	ldrb	r3, [r4, #20]
 8008322:	68a2      	ldr	r2, [r4, #8]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d019      	beq.n	800835c <ucdr_serialize_uint32_t+0x114>
 8008328:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800832c:	7013      	strb	r3, [r2, #0]
 800832e:	e7a4      	b.n	800827a <ucdr_serialize_uint32_t+0x32>
 8008330:	9a01      	ldr	r2, [sp, #4]
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	e7ad      	b.n	8008292 <ucdr_serialize_uint32_t+0x4a>
 8008336:	68a2      	ldr	r2, [r4, #8]
 8008338:	6923      	ldr	r3, [r4, #16]
 800833a:	7da0      	ldrb	r0, [r4, #22]
 800833c:	7567      	strb	r7, [r4, #21]
 800833e:	1b92      	subs	r2, r2, r6
 8008340:	1b9b      	subs	r3, r3, r6
 8008342:	f080 0001 	eor.w	r0, r0, #1
 8008346:	60a2      	str	r2, [r4, #8]
 8008348:	6123      	str	r3, [r4, #16]
 800834a:	b002      	add	sp, #8
 800834c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008350:	68a3      	ldr	r3, [r4, #8]
 8008352:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008356:	701a      	strb	r2, [r3, #0]
 8008358:	68a5      	ldr	r5, [r4, #8]
 800835a:	e7c9      	b.n	80082f0 <ucdr_serialize_uint32_t+0xa8>
 800835c:	9b01      	ldr	r3, [sp, #4]
 800835e:	6013      	str	r3, [r2, #0]
 8008360:	e797      	b.n	8008292 <ucdr_serialize_uint32_t+0x4a>
 8008362:	4628      	mov	r0, r5
 8008364:	ad01      	add	r5, sp, #4
 8008366:	4632      	mov	r2, r6
 8008368:	4629      	mov	r1, r5
 800836a:	f00f fe38 	bl	8017fde <memcpy>
 800836e:	68a0      	ldr	r0, [r4, #8]
 8008370:	4642      	mov	r2, r8
 8008372:	19a9      	adds	r1, r5, r6
 8008374:	f00f fe33 	bl	8017fde <memcpy>
 8008378:	e7bd      	b.n	80082f6 <ucdr_serialize_uint32_t+0xae>
 800837a:	bf00      	nop

0800837c <ucdr_serialize_endian_uint32_t>:
 800837c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008380:	b083      	sub	sp, #12
 8008382:	460d      	mov	r5, r1
 8008384:	2104      	movs	r1, #4
 8008386:	4604      	mov	r4, r0
 8008388:	9201      	str	r2, [sp, #4]
 800838a:	f001 f80d 	bl	80093a8 <ucdr_buffer_alignment>
 800838e:	4601      	mov	r1, r0
 8008390:	4620      	mov	r0, r4
 8008392:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008396:	f001 f84b 	bl	8009430 <ucdr_advance_buffer>
 800839a:	2104      	movs	r1, #4
 800839c:	4620      	mov	r0, r4
 800839e:	f000 ffa3 	bl	80092e8 <ucdr_check_buffer_available_for>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d137      	bne.n	8008416 <ucdr_serialize_endian_uint32_t+0x9a>
 80083a6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80083aa:	42b7      	cmp	r7, r6
 80083ac:	d92e      	bls.n	800840c <ucdr_serialize_endian_uint32_t+0x90>
 80083ae:	6923      	ldr	r3, [r4, #16]
 80083b0:	60a7      	str	r7, [r4, #8]
 80083b2:	1bbf      	subs	r7, r7, r6
 80083b4:	443b      	add	r3, r7
 80083b6:	f1c7 0904 	rsb	r9, r7, #4
 80083ba:	6123      	str	r3, [r4, #16]
 80083bc:	4649      	mov	r1, r9
 80083be:	4620      	mov	r0, r4
 80083c0:	f000 ff9e 	bl	8009300 <ucdr_check_final_buffer_behavior>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d049      	beq.n	800845c <ucdr_serialize_endian_uint32_t+0xe0>
 80083c8:	2d01      	cmp	r5, #1
 80083ca:	d05b      	beq.n	8008484 <ucdr_serialize_endian_uint32_t+0x108>
 80083cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80083d0:	7033      	strb	r3, [r6, #0]
 80083d2:	2f01      	cmp	r7, #1
 80083d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80083d8:	7073      	strb	r3, [r6, #1]
 80083da:	d04d      	beq.n	8008478 <ucdr_serialize_endian_uint32_t+0xfc>
 80083dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80083e0:	70b3      	strb	r3, [r6, #2]
 80083e2:	2f02      	cmp	r7, #2
 80083e4:	d04c      	beq.n	8008480 <ucdr_serialize_endian_uint32_t+0x104>
 80083e6:	3603      	adds	r6, #3
 80083e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80083ec:	7033      	strb	r3, [r6, #0]
 80083ee:	6923      	ldr	r3, [r4, #16]
 80083f0:	68a2      	ldr	r2, [r4, #8]
 80083f2:	7da0      	ldrb	r0, [r4, #22]
 80083f4:	3304      	adds	r3, #4
 80083f6:	444a      	add	r2, r9
 80083f8:	1bdb      	subs	r3, r3, r7
 80083fa:	2104      	movs	r1, #4
 80083fc:	f080 0001 	eor.w	r0, r0, #1
 8008400:	60a2      	str	r2, [r4, #8]
 8008402:	6123      	str	r3, [r4, #16]
 8008404:	7561      	strb	r1, [r4, #21]
 8008406:	b003      	add	sp, #12
 8008408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800840c:	2104      	movs	r1, #4
 800840e:	4620      	mov	r0, r4
 8008410:	f000 ff76 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8008414:	b1c8      	cbz	r0, 800844a <ucdr_serialize_endian_uint32_t+0xce>
 8008416:	2d01      	cmp	r5, #1
 8008418:	68a3      	ldr	r3, [r4, #8]
 800841a:	d01c      	beq.n	8008456 <ucdr_serialize_endian_uint32_t+0xda>
 800841c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008420:	701a      	strb	r2, [r3, #0]
 8008422:	68a3      	ldr	r3, [r4, #8]
 8008424:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008428:	705a      	strb	r2, [r3, #1]
 800842a:	68a3      	ldr	r3, [r4, #8]
 800842c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008430:	709a      	strb	r2, [r3, #2]
 8008432:	68a3      	ldr	r3, [r4, #8]
 8008434:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008438:	70da      	strb	r2, [r3, #3]
 800843a:	68a2      	ldr	r2, [r4, #8]
 800843c:	6923      	ldr	r3, [r4, #16]
 800843e:	3204      	adds	r2, #4
 8008440:	3304      	adds	r3, #4
 8008442:	2104      	movs	r1, #4
 8008444:	60a2      	str	r2, [r4, #8]
 8008446:	6123      	str	r3, [r4, #16]
 8008448:	7561      	strb	r1, [r4, #21]
 800844a:	7da0      	ldrb	r0, [r4, #22]
 800844c:	f080 0001 	eor.w	r0, r0, #1
 8008450:	b003      	add	sp, #12
 8008452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008456:	9a01      	ldr	r2, [sp, #4]
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	e7ee      	b.n	800843a <ucdr_serialize_endian_uint32_t+0xbe>
 800845c:	68a2      	ldr	r2, [r4, #8]
 800845e:	6923      	ldr	r3, [r4, #16]
 8008460:	7da0      	ldrb	r0, [r4, #22]
 8008462:	f884 8015 	strb.w	r8, [r4, #21]
 8008466:	1bd2      	subs	r2, r2, r7
 8008468:	1bdb      	subs	r3, r3, r7
 800846a:	f080 0001 	eor.w	r0, r0, #1
 800846e:	60a2      	str	r2, [r4, #8]
 8008470:	6123      	str	r3, [r4, #16]
 8008472:	b003      	add	sp, #12
 8008474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008478:	68a3      	ldr	r3, [r4, #8]
 800847a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800847e:	701a      	strb	r2, [r3, #0]
 8008480:	68a6      	ldr	r6, [r4, #8]
 8008482:	e7b1      	b.n	80083e8 <ucdr_serialize_endian_uint32_t+0x6c>
 8008484:	ad01      	add	r5, sp, #4
 8008486:	463a      	mov	r2, r7
 8008488:	4629      	mov	r1, r5
 800848a:	4630      	mov	r0, r6
 800848c:	f00f fda7 	bl	8017fde <memcpy>
 8008490:	68a0      	ldr	r0, [r4, #8]
 8008492:	464a      	mov	r2, r9
 8008494:	19e9      	adds	r1, r5, r7
 8008496:	f00f fda2 	bl	8017fde <memcpy>
 800849a:	e7a8      	b.n	80083ee <ucdr_serialize_endian_uint32_t+0x72>

0800849c <ucdr_deserialize_uint32_t>:
 800849c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084a0:	460d      	mov	r5, r1
 80084a2:	2104      	movs	r1, #4
 80084a4:	4604      	mov	r4, r0
 80084a6:	f000 ff7f 	bl	80093a8 <ucdr_buffer_alignment>
 80084aa:	4601      	mov	r1, r0
 80084ac:	4620      	mov	r0, r4
 80084ae:	f894 8015 	ldrb.w	r8, [r4, #21]
 80084b2:	f000 ffbd 	bl	8009430 <ucdr_advance_buffer>
 80084b6:	2104      	movs	r1, #4
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 ff15 	bl	80092e8 <ucdr_check_buffer_available_for>
 80084be:	b1d8      	cbz	r0, 80084f8 <ucdr_deserialize_uint32_t+0x5c>
 80084c0:	7d22      	ldrb	r2, [r4, #20]
 80084c2:	68a3      	ldr	r3, [r4, #8]
 80084c4:	2a01      	cmp	r2, #1
 80084c6:	d052      	beq.n	800856e <ucdr_deserialize_uint32_t+0xd2>
 80084c8:	78db      	ldrb	r3, [r3, #3]
 80084ca:	702b      	strb	r3, [r5, #0]
 80084cc:	68a3      	ldr	r3, [r4, #8]
 80084ce:	789b      	ldrb	r3, [r3, #2]
 80084d0:	706b      	strb	r3, [r5, #1]
 80084d2:	68a3      	ldr	r3, [r4, #8]
 80084d4:	785b      	ldrb	r3, [r3, #1]
 80084d6:	70ab      	strb	r3, [r5, #2]
 80084d8:	68a3      	ldr	r3, [r4, #8]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	70eb      	strb	r3, [r5, #3]
 80084de:	68a2      	ldr	r2, [r4, #8]
 80084e0:	6923      	ldr	r3, [r4, #16]
 80084e2:	3204      	adds	r2, #4
 80084e4:	3304      	adds	r3, #4
 80084e6:	2104      	movs	r1, #4
 80084e8:	60a2      	str	r2, [r4, #8]
 80084ea:	6123      	str	r3, [r4, #16]
 80084ec:	7561      	strb	r1, [r4, #21]
 80084ee:	7da0      	ldrb	r0, [r4, #22]
 80084f0:	f080 0001 	eor.w	r0, r0, #1
 80084f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084f8:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80084fc:	42b7      	cmp	r7, r6
 80084fe:	d92a      	bls.n	8008556 <ucdr_deserialize_uint32_t+0xba>
 8008500:	6923      	ldr	r3, [r4, #16]
 8008502:	60a7      	str	r7, [r4, #8]
 8008504:	1bbf      	subs	r7, r7, r6
 8008506:	443b      	add	r3, r7
 8008508:	f1c7 0904 	rsb	r9, r7, #4
 800850c:	6123      	str	r3, [r4, #16]
 800850e:	4649      	mov	r1, r9
 8008510:	4620      	mov	r0, r4
 8008512:	f000 fef5 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8008516:	b368      	cbz	r0, 8008574 <ucdr_deserialize_uint32_t+0xd8>
 8008518:	7d23      	ldrb	r3, [r4, #20]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d040      	beq.n	80085a0 <ucdr_deserialize_uint32_t+0x104>
 800851e:	78f3      	ldrb	r3, [r6, #3]
 8008520:	702b      	strb	r3, [r5, #0]
 8008522:	78b3      	ldrb	r3, [r6, #2]
 8008524:	706b      	strb	r3, [r5, #1]
 8008526:	2f01      	cmp	r7, #1
 8008528:	d031      	beq.n	800858e <ucdr_deserialize_uint32_t+0xf2>
 800852a:	7873      	ldrb	r3, [r6, #1]
 800852c:	70ab      	strb	r3, [r5, #2]
 800852e:	2f02      	cmp	r7, #2
 8008530:	f105 0503 	add.w	r5, r5, #3
 8008534:	d02f      	beq.n	8008596 <ucdr_deserialize_uint32_t+0xfa>
 8008536:	7833      	ldrb	r3, [r6, #0]
 8008538:	702b      	strb	r3, [r5, #0]
 800853a:	6923      	ldr	r3, [r4, #16]
 800853c:	68a2      	ldr	r2, [r4, #8]
 800853e:	7da0      	ldrb	r0, [r4, #22]
 8008540:	2104      	movs	r1, #4
 8008542:	3304      	adds	r3, #4
 8008544:	444a      	add	r2, r9
 8008546:	1bdb      	subs	r3, r3, r7
 8008548:	7561      	strb	r1, [r4, #21]
 800854a:	60a2      	str	r2, [r4, #8]
 800854c:	6123      	str	r3, [r4, #16]
 800854e:	f080 0001 	eor.w	r0, r0, #1
 8008552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008556:	2104      	movs	r1, #4
 8008558:	4620      	mov	r0, r4
 800855a:	f000 fed1 	bl	8009300 <ucdr_check_final_buffer_behavior>
 800855e:	2800      	cmp	r0, #0
 8008560:	d0c5      	beq.n	80084ee <ucdr_deserialize_uint32_t+0x52>
 8008562:	7d23      	ldrb	r3, [r4, #20]
 8008564:	68a2      	ldr	r2, [r4, #8]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d017      	beq.n	800859a <ucdr_deserialize_uint32_t+0xfe>
 800856a:	78d3      	ldrb	r3, [r2, #3]
 800856c:	e7ad      	b.n	80084ca <ucdr_deserialize_uint32_t+0x2e>
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	602b      	str	r3, [r5, #0]
 8008572:	e7b4      	b.n	80084de <ucdr_deserialize_uint32_t+0x42>
 8008574:	68a2      	ldr	r2, [r4, #8]
 8008576:	6923      	ldr	r3, [r4, #16]
 8008578:	7da0      	ldrb	r0, [r4, #22]
 800857a:	f884 8015 	strb.w	r8, [r4, #21]
 800857e:	1bd2      	subs	r2, r2, r7
 8008580:	1bdb      	subs	r3, r3, r7
 8008582:	60a2      	str	r2, [r4, #8]
 8008584:	6123      	str	r3, [r4, #16]
 8008586:	f080 0001 	eor.w	r0, r0, #1
 800858a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800858e:	68a3      	ldr	r3, [r4, #8]
 8008590:	785b      	ldrb	r3, [r3, #1]
 8008592:	70ab      	strb	r3, [r5, #2]
 8008594:	3503      	adds	r5, #3
 8008596:	68a6      	ldr	r6, [r4, #8]
 8008598:	e7cd      	b.n	8008536 <ucdr_deserialize_uint32_t+0x9a>
 800859a:	6813      	ldr	r3, [r2, #0]
 800859c:	602b      	str	r3, [r5, #0]
 800859e:	e79e      	b.n	80084de <ucdr_deserialize_uint32_t+0x42>
 80085a0:	4631      	mov	r1, r6
 80085a2:	463a      	mov	r2, r7
 80085a4:	4628      	mov	r0, r5
 80085a6:	f00f fd1a 	bl	8017fde <memcpy>
 80085aa:	68a1      	ldr	r1, [r4, #8]
 80085ac:	464a      	mov	r2, r9
 80085ae:	19e8      	adds	r0, r5, r7
 80085b0:	f00f fd15 	bl	8017fde <memcpy>
 80085b4:	e7c1      	b.n	800853a <ucdr_deserialize_uint32_t+0x9e>
 80085b6:	bf00      	nop

080085b8 <ucdr_deserialize_endian_uint32_t>:
 80085b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085bc:	460e      	mov	r6, r1
 80085be:	2104      	movs	r1, #4
 80085c0:	4604      	mov	r4, r0
 80085c2:	4615      	mov	r5, r2
 80085c4:	f000 fef0 	bl	80093a8 <ucdr_buffer_alignment>
 80085c8:	4601      	mov	r1, r0
 80085ca:	4620      	mov	r0, r4
 80085cc:	f894 9015 	ldrb.w	r9, [r4, #21]
 80085d0:	f000 ff2e 	bl	8009430 <ucdr_advance_buffer>
 80085d4:	2104      	movs	r1, #4
 80085d6:	4620      	mov	r0, r4
 80085d8:	f000 fe86 	bl	80092e8 <ucdr_check_buffer_available_for>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d137      	bne.n	8008650 <ucdr_deserialize_endian_uint32_t+0x98>
 80085e0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80085e4:	42bb      	cmp	r3, r7
 80085e6:	d92e      	bls.n	8008646 <ucdr_deserialize_endian_uint32_t+0x8e>
 80085e8:	eba3 0807 	sub.w	r8, r3, r7
 80085ec:	60a3      	str	r3, [r4, #8]
 80085ee:	6923      	ldr	r3, [r4, #16]
 80085f0:	f1c8 0a04 	rsb	sl, r8, #4
 80085f4:	4443      	add	r3, r8
 80085f6:	6123      	str	r3, [r4, #16]
 80085f8:	4651      	mov	r1, sl
 80085fa:	4620      	mov	r0, r4
 80085fc:	f000 fe80 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8008600:	2800      	cmp	r0, #0
 8008602:	d043      	beq.n	800868c <ucdr_deserialize_endian_uint32_t+0xd4>
 8008604:	2e01      	cmp	r6, #1
 8008606:	d056      	beq.n	80086b6 <ucdr_deserialize_endian_uint32_t+0xfe>
 8008608:	78fb      	ldrb	r3, [r7, #3]
 800860a:	702b      	strb	r3, [r5, #0]
 800860c:	78bb      	ldrb	r3, [r7, #2]
 800860e:	706b      	strb	r3, [r5, #1]
 8008610:	f1b8 0f01 	cmp.w	r8, #1
 8008614:	d049      	beq.n	80086aa <ucdr_deserialize_endian_uint32_t+0xf2>
 8008616:	787b      	ldrb	r3, [r7, #1]
 8008618:	70ab      	strb	r3, [r5, #2]
 800861a:	f1b8 0f02 	cmp.w	r8, #2
 800861e:	f105 0503 	add.w	r5, r5, #3
 8008622:	d046      	beq.n	80086b2 <ucdr_deserialize_endian_uint32_t+0xfa>
 8008624:	783b      	ldrb	r3, [r7, #0]
 8008626:	702b      	strb	r3, [r5, #0]
 8008628:	6923      	ldr	r3, [r4, #16]
 800862a:	68a2      	ldr	r2, [r4, #8]
 800862c:	7da0      	ldrb	r0, [r4, #22]
 800862e:	2104      	movs	r1, #4
 8008630:	3304      	adds	r3, #4
 8008632:	4452      	add	r2, sl
 8008634:	eba3 0308 	sub.w	r3, r3, r8
 8008638:	7561      	strb	r1, [r4, #21]
 800863a:	60a2      	str	r2, [r4, #8]
 800863c:	6123      	str	r3, [r4, #16]
 800863e:	f080 0001 	eor.w	r0, r0, #1
 8008642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008646:	2104      	movs	r1, #4
 8008648:	4620      	mov	r0, r4
 800864a:	f000 fe59 	bl	8009300 <ucdr_check_final_buffer_behavior>
 800864e:	b1a8      	cbz	r0, 800867c <ucdr_deserialize_endian_uint32_t+0xc4>
 8008650:	2e01      	cmp	r6, #1
 8008652:	68a3      	ldr	r3, [r4, #8]
 8008654:	d017      	beq.n	8008686 <ucdr_deserialize_endian_uint32_t+0xce>
 8008656:	78db      	ldrb	r3, [r3, #3]
 8008658:	702b      	strb	r3, [r5, #0]
 800865a:	68a3      	ldr	r3, [r4, #8]
 800865c:	789b      	ldrb	r3, [r3, #2]
 800865e:	706b      	strb	r3, [r5, #1]
 8008660:	68a3      	ldr	r3, [r4, #8]
 8008662:	785b      	ldrb	r3, [r3, #1]
 8008664:	70ab      	strb	r3, [r5, #2]
 8008666:	68a3      	ldr	r3, [r4, #8]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	70eb      	strb	r3, [r5, #3]
 800866c:	68a2      	ldr	r2, [r4, #8]
 800866e:	6923      	ldr	r3, [r4, #16]
 8008670:	3204      	adds	r2, #4
 8008672:	3304      	adds	r3, #4
 8008674:	2104      	movs	r1, #4
 8008676:	60a2      	str	r2, [r4, #8]
 8008678:	6123      	str	r3, [r4, #16]
 800867a:	7561      	strb	r1, [r4, #21]
 800867c:	7da0      	ldrb	r0, [r4, #22]
 800867e:	f080 0001 	eor.w	r0, r0, #1
 8008682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	602b      	str	r3, [r5, #0]
 800868a:	e7ef      	b.n	800866c <ucdr_deserialize_endian_uint32_t+0xb4>
 800868c:	68a2      	ldr	r2, [r4, #8]
 800868e:	6923      	ldr	r3, [r4, #16]
 8008690:	7da0      	ldrb	r0, [r4, #22]
 8008692:	f884 9015 	strb.w	r9, [r4, #21]
 8008696:	eba2 0208 	sub.w	r2, r2, r8
 800869a:	eba3 0308 	sub.w	r3, r3, r8
 800869e:	60a2      	str	r2, [r4, #8]
 80086a0:	6123      	str	r3, [r4, #16]
 80086a2:	f080 0001 	eor.w	r0, r0, #1
 80086a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086aa:	68a3      	ldr	r3, [r4, #8]
 80086ac:	785b      	ldrb	r3, [r3, #1]
 80086ae:	70ab      	strb	r3, [r5, #2]
 80086b0:	3503      	adds	r5, #3
 80086b2:	68a7      	ldr	r7, [r4, #8]
 80086b4:	e7b6      	b.n	8008624 <ucdr_deserialize_endian_uint32_t+0x6c>
 80086b6:	4639      	mov	r1, r7
 80086b8:	4642      	mov	r2, r8
 80086ba:	4628      	mov	r0, r5
 80086bc:	f00f fc8f 	bl	8017fde <memcpy>
 80086c0:	68a1      	ldr	r1, [r4, #8]
 80086c2:	4652      	mov	r2, sl
 80086c4:	eb05 0008 	add.w	r0, r5, r8
 80086c8:	f00f fc89 	bl	8017fde <memcpy>
 80086cc:	e7ac      	b.n	8008628 <ucdr_deserialize_endian_uint32_t+0x70>
 80086ce:	bf00      	nop

080086d0 <ucdr_serialize_uint64_t>:
 80086d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d4:	2108      	movs	r1, #8
 80086d6:	b082      	sub	sp, #8
 80086d8:	4604      	mov	r4, r0
 80086da:	e9cd 2300 	strd	r2, r3, [sp]
 80086de:	f000 fe63 	bl	80093a8 <ucdr_buffer_alignment>
 80086e2:	4601      	mov	r1, r0
 80086e4:	4620      	mov	r0, r4
 80086e6:	7d67      	ldrb	r7, [r4, #21]
 80086e8:	f000 fea2 	bl	8009430 <ucdr_advance_buffer>
 80086ec:	2108      	movs	r1, #8
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 fdfa 	bl	80092e8 <ucdr_check_buffer_available_for>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d14d      	bne.n	8008794 <ucdr_serialize_uint64_t+0xc4>
 80086f8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80086fc:	42ab      	cmp	r3, r5
 80086fe:	d944      	bls.n	800878a <ucdr_serialize_uint64_t+0xba>
 8008700:	1b5e      	subs	r6, r3, r5
 8008702:	60a3      	str	r3, [r4, #8]
 8008704:	6923      	ldr	r3, [r4, #16]
 8008706:	f1c6 0808 	rsb	r8, r6, #8
 800870a:	4433      	add	r3, r6
 800870c:	6123      	str	r3, [r4, #16]
 800870e:	4641      	mov	r1, r8
 8008710:	4620      	mov	r0, r4
 8008712:	f000 fdf5 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8008716:	2800      	cmp	r0, #0
 8008718:	d072      	beq.n	8008800 <ucdr_serialize_uint64_t+0x130>
 800871a:	7d23      	ldrb	r3, [r4, #20]
 800871c:	2b01      	cmp	r3, #1
 800871e:	f000 8092 	beq.w	8008846 <ucdr_serialize_uint64_t+0x176>
 8008722:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008726:	702b      	strb	r3, [r5, #0]
 8008728:	2e01      	cmp	r6, #1
 800872a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800872e:	706b      	strb	r3, [r5, #1]
 8008730:	d073      	beq.n	800881a <ucdr_serialize_uint64_t+0x14a>
 8008732:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008736:	70ab      	strb	r3, [r5, #2]
 8008738:	2e02      	cmp	r6, #2
 800873a:	d072      	beq.n	8008822 <ucdr_serialize_uint64_t+0x152>
 800873c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008740:	70eb      	strb	r3, [r5, #3]
 8008742:	2e03      	cmp	r6, #3
 8008744:	d071      	beq.n	800882a <ucdr_serialize_uint64_t+0x15a>
 8008746:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800874a:	712b      	strb	r3, [r5, #4]
 800874c:	2e04      	cmp	r6, #4
 800874e:	d070      	beq.n	8008832 <ucdr_serialize_uint64_t+0x162>
 8008750:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8008754:	716b      	strb	r3, [r5, #5]
 8008756:	2e05      	cmp	r6, #5
 8008758:	d06f      	beq.n	800883a <ucdr_serialize_uint64_t+0x16a>
 800875a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800875e:	71ab      	strb	r3, [r5, #6]
 8008760:	2e06      	cmp	r6, #6
 8008762:	d06e      	beq.n	8008842 <ucdr_serialize_uint64_t+0x172>
 8008764:	3507      	adds	r5, #7
 8008766:	f89d 3000 	ldrb.w	r3, [sp]
 800876a:	702b      	strb	r3, [r5, #0]
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	68a2      	ldr	r2, [r4, #8]
 8008770:	7da0      	ldrb	r0, [r4, #22]
 8008772:	3308      	adds	r3, #8
 8008774:	4442      	add	r2, r8
 8008776:	1b9b      	subs	r3, r3, r6
 8008778:	2108      	movs	r1, #8
 800877a:	f080 0001 	eor.w	r0, r0, #1
 800877e:	60a2      	str	r2, [r4, #8]
 8008780:	6123      	str	r3, [r4, #16]
 8008782:	7561      	strb	r1, [r4, #21]
 8008784:	b002      	add	sp, #8
 8008786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800878a:	2108      	movs	r1, #8
 800878c:	4620      	mov	r0, r4
 800878e:	f000 fdb7 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8008792:	b350      	cbz	r0, 80087ea <ucdr_serialize_uint64_t+0x11a>
 8008794:	7d22      	ldrb	r2, [r4, #20]
 8008796:	68a3      	ldr	r3, [r4, #8]
 8008798:	2a01      	cmp	r2, #1
 800879a:	d02c      	beq.n	80087f6 <ucdr_serialize_uint64_t+0x126>
 800879c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80087a0:	701a      	strb	r2, [r3, #0]
 80087a2:	68a3      	ldr	r3, [r4, #8]
 80087a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80087a8:	705a      	strb	r2, [r3, #1]
 80087aa:	68a3      	ldr	r3, [r4, #8]
 80087ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80087b0:	709a      	strb	r2, [r3, #2]
 80087b2:	68a3      	ldr	r3, [r4, #8]
 80087b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80087b8:	70da      	strb	r2, [r3, #3]
 80087ba:	68a3      	ldr	r3, [r4, #8]
 80087bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80087c0:	711a      	strb	r2, [r3, #4]
 80087c2:	68a3      	ldr	r3, [r4, #8]
 80087c4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80087c8:	715a      	strb	r2, [r3, #5]
 80087ca:	68a3      	ldr	r3, [r4, #8]
 80087cc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80087d0:	719a      	strb	r2, [r3, #6]
 80087d2:	68a3      	ldr	r3, [r4, #8]
 80087d4:	f89d 2000 	ldrb.w	r2, [sp]
 80087d8:	71da      	strb	r2, [r3, #7]
 80087da:	68a2      	ldr	r2, [r4, #8]
 80087dc:	6923      	ldr	r3, [r4, #16]
 80087de:	3208      	adds	r2, #8
 80087e0:	3308      	adds	r3, #8
 80087e2:	2108      	movs	r1, #8
 80087e4:	60a2      	str	r2, [r4, #8]
 80087e6:	6123      	str	r3, [r4, #16]
 80087e8:	7561      	strb	r1, [r4, #21]
 80087ea:	7da0      	ldrb	r0, [r4, #22]
 80087ec:	f080 0001 	eor.w	r0, r0, #1
 80087f0:	b002      	add	sp, #8
 80087f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80087fa:	6019      	str	r1, [r3, #0]
 80087fc:	605a      	str	r2, [r3, #4]
 80087fe:	e7ec      	b.n	80087da <ucdr_serialize_uint64_t+0x10a>
 8008800:	68a2      	ldr	r2, [r4, #8]
 8008802:	6923      	ldr	r3, [r4, #16]
 8008804:	7da0      	ldrb	r0, [r4, #22]
 8008806:	7567      	strb	r7, [r4, #21]
 8008808:	1b92      	subs	r2, r2, r6
 800880a:	1b9b      	subs	r3, r3, r6
 800880c:	f080 0001 	eor.w	r0, r0, #1
 8008810:	60a2      	str	r2, [r4, #8]
 8008812:	6123      	str	r3, [r4, #16]
 8008814:	b002      	add	sp, #8
 8008816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800881a:	68a3      	ldr	r3, [r4, #8]
 800881c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008820:	701a      	strb	r2, [r3, #0]
 8008822:	68a3      	ldr	r3, [r4, #8]
 8008824:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008828:	701a      	strb	r2, [r3, #0]
 800882a:	68a3      	ldr	r3, [r4, #8]
 800882c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008830:	701a      	strb	r2, [r3, #0]
 8008832:	68a3      	ldr	r3, [r4, #8]
 8008834:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008838:	701a      	strb	r2, [r3, #0]
 800883a:	68a3      	ldr	r3, [r4, #8]
 800883c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008840:	701a      	strb	r2, [r3, #0]
 8008842:	68a5      	ldr	r5, [r4, #8]
 8008844:	e78f      	b.n	8008766 <ucdr_serialize_uint64_t+0x96>
 8008846:	4628      	mov	r0, r5
 8008848:	466d      	mov	r5, sp
 800884a:	4632      	mov	r2, r6
 800884c:	4629      	mov	r1, r5
 800884e:	f00f fbc6 	bl	8017fde <memcpy>
 8008852:	68a0      	ldr	r0, [r4, #8]
 8008854:	4642      	mov	r2, r8
 8008856:	19a9      	adds	r1, r5, r6
 8008858:	f00f fbc1 	bl	8017fde <memcpy>
 800885c:	e786      	b.n	800876c <ucdr_serialize_uint64_t+0x9c>
 800885e:	bf00      	nop

08008860 <ucdr_serialize_int16_t>:
 8008860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008864:	b082      	sub	sp, #8
 8008866:	460b      	mov	r3, r1
 8008868:	2102      	movs	r1, #2
 800886a:	4604      	mov	r4, r0
 800886c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008870:	f000 fd9a 	bl	80093a8 <ucdr_buffer_alignment>
 8008874:	4601      	mov	r1, r0
 8008876:	4620      	mov	r0, r4
 8008878:	7d67      	ldrb	r7, [r4, #21]
 800887a:	f000 fdd9 	bl	8009430 <ucdr_advance_buffer>
 800887e:	2102      	movs	r1, #2
 8008880:	4620      	mov	r0, r4
 8008882:	f000 fd31 	bl	80092e8 <ucdr_check_buffer_available_for>
 8008886:	b1c0      	cbz	r0, 80088ba <ucdr_serialize_int16_t+0x5a>
 8008888:	7d22      	ldrb	r2, [r4, #20]
 800888a:	68a3      	ldr	r3, [r4, #8]
 800888c:	2a01      	cmp	r2, #1
 800888e:	d04e      	beq.n	800892e <ucdr_serialize_int16_t+0xce>
 8008890:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008894:	701a      	strb	r2, [r3, #0]
 8008896:	68a3      	ldr	r3, [r4, #8]
 8008898:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800889c:	705a      	strb	r2, [r3, #1]
 800889e:	68a2      	ldr	r2, [r4, #8]
 80088a0:	6923      	ldr	r3, [r4, #16]
 80088a2:	3202      	adds	r2, #2
 80088a4:	3302      	adds	r3, #2
 80088a6:	2102      	movs	r1, #2
 80088a8:	60a2      	str	r2, [r4, #8]
 80088aa:	6123      	str	r3, [r4, #16]
 80088ac:	7561      	strb	r1, [r4, #21]
 80088ae:	7da0      	ldrb	r0, [r4, #22]
 80088b0:	f080 0001 	eor.w	r0, r0, #1
 80088b4:	b002      	add	sp, #8
 80088b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088ba:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80088be:	42ab      	cmp	r3, r5
 80088c0:	d923      	bls.n	800890a <ucdr_serialize_int16_t+0xaa>
 80088c2:	1b5e      	subs	r6, r3, r5
 80088c4:	60a3      	str	r3, [r4, #8]
 80088c6:	6923      	ldr	r3, [r4, #16]
 80088c8:	f1c6 0802 	rsb	r8, r6, #2
 80088cc:	4433      	add	r3, r6
 80088ce:	6123      	str	r3, [r4, #16]
 80088d0:	4641      	mov	r1, r8
 80088d2:	4620      	mov	r0, r4
 80088d4:	f000 fd14 	bl	8009300 <ucdr_check_final_buffer_behavior>
 80088d8:	b368      	cbz	r0, 8008936 <ucdr_serialize_int16_t+0xd6>
 80088da:	7d23      	ldrb	r3, [r4, #20]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d03b      	beq.n	8008958 <ucdr_serialize_int16_t+0xf8>
 80088e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80088e4:	702b      	strb	r3, [r5, #0]
 80088e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80088ea:	706b      	strb	r3, [r5, #1]
 80088ec:	6923      	ldr	r3, [r4, #16]
 80088ee:	68a2      	ldr	r2, [r4, #8]
 80088f0:	7da0      	ldrb	r0, [r4, #22]
 80088f2:	3302      	adds	r3, #2
 80088f4:	4442      	add	r2, r8
 80088f6:	1b9b      	subs	r3, r3, r6
 80088f8:	2102      	movs	r1, #2
 80088fa:	f080 0001 	eor.w	r0, r0, #1
 80088fe:	60a2      	str	r2, [r4, #8]
 8008900:	6123      	str	r3, [r4, #16]
 8008902:	7561      	strb	r1, [r4, #21]
 8008904:	b002      	add	sp, #8
 8008906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800890a:	2102      	movs	r1, #2
 800890c:	4620      	mov	r0, r4
 800890e:	f000 fcf7 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8008912:	2800      	cmp	r0, #0
 8008914:	d0cb      	beq.n	80088ae <ucdr_serialize_int16_t+0x4e>
 8008916:	7d23      	ldrb	r3, [r4, #20]
 8008918:	68a2      	ldr	r2, [r4, #8]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d018      	beq.n	8008950 <ucdr_serialize_int16_t+0xf0>
 800891e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008922:	7013      	strb	r3, [r2, #0]
 8008924:	68a3      	ldr	r3, [r4, #8]
 8008926:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800892a:	705a      	strb	r2, [r3, #1]
 800892c:	e7b7      	b.n	800889e <ucdr_serialize_int16_t+0x3e>
 800892e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008932:	801a      	strh	r2, [r3, #0]
 8008934:	e7b3      	b.n	800889e <ucdr_serialize_int16_t+0x3e>
 8008936:	68a2      	ldr	r2, [r4, #8]
 8008938:	6923      	ldr	r3, [r4, #16]
 800893a:	7da0      	ldrb	r0, [r4, #22]
 800893c:	7567      	strb	r7, [r4, #21]
 800893e:	1b92      	subs	r2, r2, r6
 8008940:	1b9b      	subs	r3, r3, r6
 8008942:	f080 0001 	eor.w	r0, r0, #1
 8008946:	60a2      	str	r2, [r4, #8]
 8008948:	6123      	str	r3, [r4, #16]
 800894a:	b002      	add	sp, #8
 800894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008950:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008954:	8013      	strh	r3, [r2, #0]
 8008956:	e7a2      	b.n	800889e <ucdr_serialize_int16_t+0x3e>
 8008958:	4628      	mov	r0, r5
 800895a:	f10d 0506 	add.w	r5, sp, #6
 800895e:	4632      	mov	r2, r6
 8008960:	4629      	mov	r1, r5
 8008962:	f00f fb3c 	bl	8017fde <memcpy>
 8008966:	68a0      	ldr	r0, [r4, #8]
 8008968:	4642      	mov	r2, r8
 800896a:	19a9      	adds	r1, r5, r6
 800896c:	f00f fb37 	bl	8017fde <memcpy>
 8008970:	e7bc      	b.n	80088ec <ucdr_serialize_int16_t+0x8c>
 8008972:	bf00      	nop

08008974 <ucdr_deserialize_int16_t>:
 8008974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008978:	460d      	mov	r5, r1
 800897a:	2102      	movs	r1, #2
 800897c:	4604      	mov	r4, r0
 800897e:	f000 fd13 	bl	80093a8 <ucdr_buffer_alignment>
 8008982:	4601      	mov	r1, r0
 8008984:	4620      	mov	r0, r4
 8008986:	f894 8015 	ldrb.w	r8, [r4, #21]
 800898a:	f000 fd51 	bl	8009430 <ucdr_advance_buffer>
 800898e:	2102      	movs	r1, #2
 8008990:	4620      	mov	r0, r4
 8008992:	f000 fca9 	bl	80092e8 <ucdr_check_buffer_available_for>
 8008996:	b1a8      	cbz	r0, 80089c4 <ucdr_deserialize_int16_t+0x50>
 8008998:	7d22      	ldrb	r2, [r4, #20]
 800899a:	68a3      	ldr	r3, [r4, #8]
 800899c:	2a01      	cmp	r2, #1
 800899e:	d046      	beq.n	8008a2e <ucdr_deserialize_int16_t+0xba>
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	702b      	strb	r3, [r5, #0]
 80089a4:	68a3      	ldr	r3, [r4, #8]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	706b      	strb	r3, [r5, #1]
 80089aa:	68a2      	ldr	r2, [r4, #8]
 80089ac:	6923      	ldr	r3, [r4, #16]
 80089ae:	3202      	adds	r2, #2
 80089b0:	3302      	adds	r3, #2
 80089b2:	2102      	movs	r1, #2
 80089b4:	60a2      	str	r2, [r4, #8]
 80089b6:	6123      	str	r3, [r4, #16]
 80089b8:	7561      	strb	r1, [r4, #21]
 80089ba:	7da0      	ldrb	r0, [r4, #22]
 80089bc:	f080 0001 	eor.w	r0, r0, #1
 80089c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089c4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80089c8:	42be      	cmp	r6, r7
 80089ca:	d920      	bls.n	8008a0e <ucdr_deserialize_int16_t+0x9a>
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	60a6      	str	r6, [r4, #8]
 80089d0:	1bf6      	subs	r6, r6, r7
 80089d2:	4433      	add	r3, r6
 80089d4:	f1c6 0902 	rsb	r9, r6, #2
 80089d8:	6123      	str	r3, [r4, #16]
 80089da:	4649      	mov	r1, r9
 80089dc:	4620      	mov	r0, r4
 80089de:	f000 fc8f 	bl	8009300 <ucdr_check_final_buffer_behavior>
 80089e2:	b338      	cbz	r0, 8008a34 <ucdr_deserialize_int16_t+0xc0>
 80089e4:	7d23      	ldrb	r3, [r4, #20]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d034      	beq.n	8008a54 <ucdr_deserialize_int16_t+0xe0>
 80089ea:	787b      	ldrb	r3, [r7, #1]
 80089ec:	702b      	strb	r3, [r5, #0]
 80089ee:	783b      	ldrb	r3, [r7, #0]
 80089f0:	706b      	strb	r3, [r5, #1]
 80089f2:	6923      	ldr	r3, [r4, #16]
 80089f4:	68a2      	ldr	r2, [r4, #8]
 80089f6:	7da0      	ldrb	r0, [r4, #22]
 80089f8:	2102      	movs	r1, #2
 80089fa:	3302      	adds	r3, #2
 80089fc:	444a      	add	r2, r9
 80089fe:	1b9b      	subs	r3, r3, r6
 8008a00:	7561      	strb	r1, [r4, #21]
 8008a02:	60a2      	str	r2, [r4, #8]
 8008a04:	6123      	str	r3, [r4, #16]
 8008a06:	f080 0001 	eor.w	r0, r0, #1
 8008a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a0e:	2102      	movs	r1, #2
 8008a10:	4620      	mov	r0, r4
 8008a12:	f000 fc75 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d0cf      	beq.n	80089ba <ucdr_deserialize_int16_t+0x46>
 8008a1a:	7d23      	ldrb	r3, [r4, #20]
 8008a1c:	68a2      	ldr	r2, [r4, #8]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d015      	beq.n	8008a4e <ucdr_deserialize_int16_t+0xda>
 8008a22:	7853      	ldrb	r3, [r2, #1]
 8008a24:	702b      	strb	r3, [r5, #0]
 8008a26:	68a3      	ldr	r3, [r4, #8]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	706b      	strb	r3, [r5, #1]
 8008a2c:	e7bd      	b.n	80089aa <ucdr_deserialize_int16_t+0x36>
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	802b      	strh	r3, [r5, #0]
 8008a32:	e7ba      	b.n	80089aa <ucdr_deserialize_int16_t+0x36>
 8008a34:	68a2      	ldr	r2, [r4, #8]
 8008a36:	6923      	ldr	r3, [r4, #16]
 8008a38:	7da0      	ldrb	r0, [r4, #22]
 8008a3a:	f884 8015 	strb.w	r8, [r4, #21]
 8008a3e:	1b92      	subs	r2, r2, r6
 8008a40:	1b9b      	subs	r3, r3, r6
 8008a42:	60a2      	str	r2, [r4, #8]
 8008a44:	6123      	str	r3, [r4, #16]
 8008a46:	f080 0001 	eor.w	r0, r0, #1
 8008a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a4e:	8813      	ldrh	r3, [r2, #0]
 8008a50:	802b      	strh	r3, [r5, #0]
 8008a52:	e7aa      	b.n	80089aa <ucdr_deserialize_int16_t+0x36>
 8008a54:	4639      	mov	r1, r7
 8008a56:	4632      	mov	r2, r6
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f00f fac0 	bl	8017fde <memcpy>
 8008a5e:	68a1      	ldr	r1, [r4, #8]
 8008a60:	464a      	mov	r2, r9
 8008a62:	19a8      	adds	r0, r5, r6
 8008a64:	f00f fabb 	bl	8017fde <memcpy>
 8008a68:	e7c3      	b.n	80089f2 <ucdr_deserialize_int16_t+0x7e>
 8008a6a:	bf00      	nop

08008a6c <ucdr_serialize_int32_t>:
 8008a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a70:	b082      	sub	sp, #8
 8008a72:	4604      	mov	r4, r0
 8008a74:	9101      	str	r1, [sp, #4]
 8008a76:	2104      	movs	r1, #4
 8008a78:	f000 fc96 	bl	80093a8 <ucdr_buffer_alignment>
 8008a7c:	4601      	mov	r1, r0
 8008a7e:	4620      	mov	r0, r4
 8008a80:	7d67      	ldrb	r7, [r4, #21]
 8008a82:	f000 fcd5 	bl	8009430 <ucdr_advance_buffer>
 8008a86:	2104      	movs	r1, #4
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 fc2d 	bl	80092e8 <ucdr_check_buffer_available_for>
 8008a8e:	b300      	cbz	r0, 8008ad2 <ucdr_serialize_int32_t+0x66>
 8008a90:	7d22      	ldrb	r2, [r4, #20]
 8008a92:	68a3      	ldr	r3, [r4, #8]
 8008a94:	2a01      	cmp	r2, #1
 8008a96:	d05d      	beq.n	8008b54 <ucdr_serialize_int32_t+0xe8>
 8008a98:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008a9c:	701a      	strb	r2, [r3, #0]
 8008a9e:	68a3      	ldr	r3, [r4, #8]
 8008aa0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008aa4:	705a      	strb	r2, [r3, #1]
 8008aa6:	68a3      	ldr	r3, [r4, #8]
 8008aa8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008aac:	709a      	strb	r2, [r3, #2]
 8008aae:	68a3      	ldr	r3, [r4, #8]
 8008ab0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008ab4:	70da      	strb	r2, [r3, #3]
 8008ab6:	68a2      	ldr	r2, [r4, #8]
 8008ab8:	6923      	ldr	r3, [r4, #16]
 8008aba:	3204      	adds	r2, #4
 8008abc:	3304      	adds	r3, #4
 8008abe:	2104      	movs	r1, #4
 8008ac0:	60a2      	str	r2, [r4, #8]
 8008ac2:	6123      	str	r3, [r4, #16]
 8008ac4:	7561      	strb	r1, [r4, #21]
 8008ac6:	7da0      	ldrb	r0, [r4, #22]
 8008ac8:	f080 0001 	eor.w	r0, r0, #1
 8008acc:	b002      	add	sp, #8
 8008ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ad2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008ad6:	42ab      	cmp	r3, r5
 8008ad8:	d92e      	bls.n	8008b38 <ucdr_serialize_int32_t+0xcc>
 8008ada:	1b5e      	subs	r6, r3, r5
 8008adc:	60a3      	str	r3, [r4, #8]
 8008ade:	6923      	ldr	r3, [r4, #16]
 8008ae0:	f1c6 0804 	rsb	r8, r6, #4
 8008ae4:	4433      	add	r3, r6
 8008ae6:	6123      	str	r3, [r4, #16]
 8008ae8:	4641      	mov	r1, r8
 8008aea:	4620      	mov	r0, r4
 8008aec:	f000 fc08 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8008af0:	b398      	cbz	r0, 8008b5a <ucdr_serialize_int32_t+0xee>
 8008af2:	7d23      	ldrb	r3, [r4, #20]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d046      	beq.n	8008b86 <ucdr_serialize_int32_t+0x11a>
 8008af8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008afc:	702b      	strb	r3, [r5, #0]
 8008afe:	2e01      	cmp	r6, #1
 8008b00:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008b04:	706b      	strb	r3, [r5, #1]
 8008b06:	d035      	beq.n	8008b74 <ucdr_serialize_int32_t+0x108>
 8008b08:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008b0c:	70ab      	strb	r3, [r5, #2]
 8008b0e:	2e02      	cmp	r6, #2
 8008b10:	d034      	beq.n	8008b7c <ucdr_serialize_int32_t+0x110>
 8008b12:	3503      	adds	r5, #3
 8008b14:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008b18:	702b      	strb	r3, [r5, #0]
 8008b1a:	6923      	ldr	r3, [r4, #16]
 8008b1c:	68a2      	ldr	r2, [r4, #8]
 8008b1e:	7da0      	ldrb	r0, [r4, #22]
 8008b20:	3304      	adds	r3, #4
 8008b22:	4442      	add	r2, r8
 8008b24:	1b9b      	subs	r3, r3, r6
 8008b26:	2104      	movs	r1, #4
 8008b28:	f080 0001 	eor.w	r0, r0, #1
 8008b2c:	60a2      	str	r2, [r4, #8]
 8008b2e:	6123      	str	r3, [r4, #16]
 8008b30:	7561      	strb	r1, [r4, #21]
 8008b32:	b002      	add	sp, #8
 8008b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b38:	2104      	movs	r1, #4
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 fbe0 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d0c0      	beq.n	8008ac6 <ucdr_serialize_int32_t+0x5a>
 8008b44:	7d23      	ldrb	r3, [r4, #20]
 8008b46:	68a2      	ldr	r2, [r4, #8]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d019      	beq.n	8008b80 <ucdr_serialize_int32_t+0x114>
 8008b4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008b50:	7013      	strb	r3, [r2, #0]
 8008b52:	e7a4      	b.n	8008a9e <ucdr_serialize_int32_t+0x32>
 8008b54:	9a01      	ldr	r2, [sp, #4]
 8008b56:	601a      	str	r2, [r3, #0]
 8008b58:	e7ad      	b.n	8008ab6 <ucdr_serialize_int32_t+0x4a>
 8008b5a:	68a2      	ldr	r2, [r4, #8]
 8008b5c:	6923      	ldr	r3, [r4, #16]
 8008b5e:	7da0      	ldrb	r0, [r4, #22]
 8008b60:	7567      	strb	r7, [r4, #21]
 8008b62:	1b92      	subs	r2, r2, r6
 8008b64:	1b9b      	subs	r3, r3, r6
 8008b66:	f080 0001 	eor.w	r0, r0, #1
 8008b6a:	60a2      	str	r2, [r4, #8]
 8008b6c:	6123      	str	r3, [r4, #16]
 8008b6e:	b002      	add	sp, #8
 8008b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b74:	68a3      	ldr	r3, [r4, #8]
 8008b76:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008b7a:	701a      	strb	r2, [r3, #0]
 8008b7c:	68a5      	ldr	r5, [r4, #8]
 8008b7e:	e7c9      	b.n	8008b14 <ucdr_serialize_int32_t+0xa8>
 8008b80:	9b01      	ldr	r3, [sp, #4]
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	e797      	b.n	8008ab6 <ucdr_serialize_int32_t+0x4a>
 8008b86:	4628      	mov	r0, r5
 8008b88:	ad01      	add	r5, sp, #4
 8008b8a:	4632      	mov	r2, r6
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	f00f fa26 	bl	8017fde <memcpy>
 8008b92:	68a0      	ldr	r0, [r4, #8]
 8008b94:	4642      	mov	r2, r8
 8008b96:	19a9      	adds	r1, r5, r6
 8008b98:	f00f fa21 	bl	8017fde <memcpy>
 8008b9c:	e7bd      	b.n	8008b1a <ucdr_serialize_int32_t+0xae>
 8008b9e:	bf00      	nop

08008ba0 <ucdr_deserialize_int32_t>:
 8008ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ba4:	460d      	mov	r5, r1
 8008ba6:	2104      	movs	r1, #4
 8008ba8:	4604      	mov	r4, r0
 8008baa:	f000 fbfd 	bl	80093a8 <ucdr_buffer_alignment>
 8008bae:	4601      	mov	r1, r0
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008bb6:	f000 fc3b 	bl	8009430 <ucdr_advance_buffer>
 8008bba:	2104      	movs	r1, #4
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f000 fb93 	bl	80092e8 <ucdr_check_buffer_available_for>
 8008bc2:	b1d8      	cbz	r0, 8008bfc <ucdr_deserialize_int32_t+0x5c>
 8008bc4:	7d22      	ldrb	r2, [r4, #20]
 8008bc6:	68a3      	ldr	r3, [r4, #8]
 8008bc8:	2a01      	cmp	r2, #1
 8008bca:	d052      	beq.n	8008c72 <ucdr_deserialize_int32_t+0xd2>
 8008bcc:	78db      	ldrb	r3, [r3, #3]
 8008bce:	702b      	strb	r3, [r5, #0]
 8008bd0:	68a3      	ldr	r3, [r4, #8]
 8008bd2:	789b      	ldrb	r3, [r3, #2]
 8008bd4:	706b      	strb	r3, [r5, #1]
 8008bd6:	68a3      	ldr	r3, [r4, #8]
 8008bd8:	785b      	ldrb	r3, [r3, #1]
 8008bda:	70ab      	strb	r3, [r5, #2]
 8008bdc:	68a3      	ldr	r3, [r4, #8]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	70eb      	strb	r3, [r5, #3]
 8008be2:	68a2      	ldr	r2, [r4, #8]
 8008be4:	6923      	ldr	r3, [r4, #16]
 8008be6:	3204      	adds	r2, #4
 8008be8:	3304      	adds	r3, #4
 8008bea:	2104      	movs	r1, #4
 8008bec:	60a2      	str	r2, [r4, #8]
 8008bee:	6123      	str	r3, [r4, #16]
 8008bf0:	7561      	strb	r1, [r4, #21]
 8008bf2:	7da0      	ldrb	r0, [r4, #22]
 8008bf4:	f080 0001 	eor.w	r0, r0, #1
 8008bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bfc:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008c00:	42b7      	cmp	r7, r6
 8008c02:	d92a      	bls.n	8008c5a <ucdr_deserialize_int32_t+0xba>
 8008c04:	6923      	ldr	r3, [r4, #16]
 8008c06:	60a7      	str	r7, [r4, #8]
 8008c08:	1bbf      	subs	r7, r7, r6
 8008c0a:	443b      	add	r3, r7
 8008c0c:	f1c7 0904 	rsb	r9, r7, #4
 8008c10:	6123      	str	r3, [r4, #16]
 8008c12:	4649      	mov	r1, r9
 8008c14:	4620      	mov	r0, r4
 8008c16:	f000 fb73 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8008c1a:	b368      	cbz	r0, 8008c78 <ucdr_deserialize_int32_t+0xd8>
 8008c1c:	7d23      	ldrb	r3, [r4, #20]
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d040      	beq.n	8008ca4 <ucdr_deserialize_int32_t+0x104>
 8008c22:	78f3      	ldrb	r3, [r6, #3]
 8008c24:	702b      	strb	r3, [r5, #0]
 8008c26:	78b3      	ldrb	r3, [r6, #2]
 8008c28:	706b      	strb	r3, [r5, #1]
 8008c2a:	2f01      	cmp	r7, #1
 8008c2c:	d031      	beq.n	8008c92 <ucdr_deserialize_int32_t+0xf2>
 8008c2e:	7873      	ldrb	r3, [r6, #1]
 8008c30:	70ab      	strb	r3, [r5, #2]
 8008c32:	2f02      	cmp	r7, #2
 8008c34:	f105 0503 	add.w	r5, r5, #3
 8008c38:	d02f      	beq.n	8008c9a <ucdr_deserialize_int32_t+0xfa>
 8008c3a:	7833      	ldrb	r3, [r6, #0]
 8008c3c:	702b      	strb	r3, [r5, #0]
 8008c3e:	6923      	ldr	r3, [r4, #16]
 8008c40:	68a2      	ldr	r2, [r4, #8]
 8008c42:	7da0      	ldrb	r0, [r4, #22]
 8008c44:	2104      	movs	r1, #4
 8008c46:	3304      	adds	r3, #4
 8008c48:	444a      	add	r2, r9
 8008c4a:	1bdb      	subs	r3, r3, r7
 8008c4c:	7561      	strb	r1, [r4, #21]
 8008c4e:	60a2      	str	r2, [r4, #8]
 8008c50:	6123      	str	r3, [r4, #16]
 8008c52:	f080 0001 	eor.w	r0, r0, #1
 8008c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c5a:	2104      	movs	r1, #4
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f000 fb4f 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d0c5      	beq.n	8008bf2 <ucdr_deserialize_int32_t+0x52>
 8008c66:	7d23      	ldrb	r3, [r4, #20]
 8008c68:	68a2      	ldr	r2, [r4, #8]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d017      	beq.n	8008c9e <ucdr_deserialize_int32_t+0xfe>
 8008c6e:	78d3      	ldrb	r3, [r2, #3]
 8008c70:	e7ad      	b.n	8008bce <ucdr_deserialize_int32_t+0x2e>
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	602b      	str	r3, [r5, #0]
 8008c76:	e7b4      	b.n	8008be2 <ucdr_deserialize_int32_t+0x42>
 8008c78:	68a2      	ldr	r2, [r4, #8]
 8008c7a:	6923      	ldr	r3, [r4, #16]
 8008c7c:	7da0      	ldrb	r0, [r4, #22]
 8008c7e:	f884 8015 	strb.w	r8, [r4, #21]
 8008c82:	1bd2      	subs	r2, r2, r7
 8008c84:	1bdb      	subs	r3, r3, r7
 8008c86:	60a2      	str	r2, [r4, #8]
 8008c88:	6123      	str	r3, [r4, #16]
 8008c8a:	f080 0001 	eor.w	r0, r0, #1
 8008c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c92:	68a3      	ldr	r3, [r4, #8]
 8008c94:	785b      	ldrb	r3, [r3, #1]
 8008c96:	70ab      	strb	r3, [r5, #2]
 8008c98:	3503      	adds	r5, #3
 8008c9a:	68a6      	ldr	r6, [r4, #8]
 8008c9c:	e7cd      	b.n	8008c3a <ucdr_deserialize_int32_t+0x9a>
 8008c9e:	6813      	ldr	r3, [r2, #0]
 8008ca0:	602b      	str	r3, [r5, #0]
 8008ca2:	e79e      	b.n	8008be2 <ucdr_deserialize_int32_t+0x42>
 8008ca4:	4631      	mov	r1, r6
 8008ca6:	463a      	mov	r2, r7
 8008ca8:	4628      	mov	r0, r5
 8008caa:	f00f f998 	bl	8017fde <memcpy>
 8008cae:	68a1      	ldr	r1, [r4, #8]
 8008cb0:	464a      	mov	r2, r9
 8008cb2:	19e8      	adds	r0, r5, r7
 8008cb4:	f00f f993 	bl	8017fde <memcpy>
 8008cb8:	e7c1      	b.n	8008c3e <ucdr_deserialize_int32_t+0x9e>
 8008cba:	bf00      	nop

08008cbc <ucdr_serialize_double>:
 8008cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc0:	2108      	movs	r1, #8
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	ed8d 0b00 	vstr	d0, [sp]
 8008cca:	f000 fb6d 	bl	80093a8 <ucdr_buffer_alignment>
 8008cce:	4601      	mov	r1, r0
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	7d67      	ldrb	r7, [r4, #21]
 8008cd4:	f000 fbac 	bl	8009430 <ucdr_advance_buffer>
 8008cd8:	2108      	movs	r1, #8
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f000 fb04 	bl	80092e8 <ucdr_check_buffer_available_for>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d14d      	bne.n	8008d80 <ucdr_serialize_double+0xc4>
 8008ce4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008ce8:	42ab      	cmp	r3, r5
 8008cea:	d944      	bls.n	8008d76 <ucdr_serialize_double+0xba>
 8008cec:	1b5e      	subs	r6, r3, r5
 8008cee:	60a3      	str	r3, [r4, #8]
 8008cf0:	6923      	ldr	r3, [r4, #16]
 8008cf2:	f1c6 0808 	rsb	r8, r6, #8
 8008cf6:	4433      	add	r3, r6
 8008cf8:	6123      	str	r3, [r4, #16]
 8008cfa:	4641      	mov	r1, r8
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f000 faff 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	d072      	beq.n	8008dec <ucdr_serialize_double+0x130>
 8008d06:	7d23      	ldrb	r3, [r4, #20]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	f000 8092 	beq.w	8008e32 <ucdr_serialize_double+0x176>
 8008d0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008d12:	702b      	strb	r3, [r5, #0]
 8008d14:	2e01      	cmp	r6, #1
 8008d16:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008d1a:	706b      	strb	r3, [r5, #1]
 8008d1c:	d073      	beq.n	8008e06 <ucdr_serialize_double+0x14a>
 8008d1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008d22:	70ab      	strb	r3, [r5, #2]
 8008d24:	2e02      	cmp	r6, #2
 8008d26:	d072      	beq.n	8008e0e <ucdr_serialize_double+0x152>
 8008d28:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008d2c:	70eb      	strb	r3, [r5, #3]
 8008d2e:	2e03      	cmp	r6, #3
 8008d30:	d071      	beq.n	8008e16 <ucdr_serialize_double+0x15a>
 8008d32:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008d36:	712b      	strb	r3, [r5, #4]
 8008d38:	2e04      	cmp	r6, #4
 8008d3a:	d070      	beq.n	8008e1e <ucdr_serialize_double+0x162>
 8008d3c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8008d40:	716b      	strb	r3, [r5, #5]
 8008d42:	2e05      	cmp	r6, #5
 8008d44:	d06f      	beq.n	8008e26 <ucdr_serialize_double+0x16a>
 8008d46:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8008d4a:	71ab      	strb	r3, [r5, #6]
 8008d4c:	2e06      	cmp	r6, #6
 8008d4e:	d06e      	beq.n	8008e2e <ucdr_serialize_double+0x172>
 8008d50:	3507      	adds	r5, #7
 8008d52:	f89d 3000 	ldrb.w	r3, [sp]
 8008d56:	702b      	strb	r3, [r5, #0]
 8008d58:	6923      	ldr	r3, [r4, #16]
 8008d5a:	68a2      	ldr	r2, [r4, #8]
 8008d5c:	7da0      	ldrb	r0, [r4, #22]
 8008d5e:	3308      	adds	r3, #8
 8008d60:	4442      	add	r2, r8
 8008d62:	1b9b      	subs	r3, r3, r6
 8008d64:	2108      	movs	r1, #8
 8008d66:	f080 0001 	eor.w	r0, r0, #1
 8008d6a:	60a2      	str	r2, [r4, #8]
 8008d6c:	6123      	str	r3, [r4, #16]
 8008d6e:	7561      	strb	r1, [r4, #21]
 8008d70:	b002      	add	sp, #8
 8008d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d76:	2108      	movs	r1, #8
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f000 fac1 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8008d7e:	b350      	cbz	r0, 8008dd6 <ucdr_serialize_double+0x11a>
 8008d80:	7d22      	ldrb	r2, [r4, #20]
 8008d82:	68a3      	ldr	r3, [r4, #8]
 8008d84:	2a01      	cmp	r2, #1
 8008d86:	d02c      	beq.n	8008de2 <ucdr_serialize_double+0x126>
 8008d88:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008d8c:	701a      	strb	r2, [r3, #0]
 8008d8e:	68a3      	ldr	r3, [r4, #8]
 8008d90:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008d94:	705a      	strb	r2, [r3, #1]
 8008d96:	68a3      	ldr	r3, [r4, #8]
 8008d98:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008d9c:	709a      	strb	r2, [r3, #2]
 8008d9e:	68a3      	ldr	r3, [r4, #8]
 8008da0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008da4:	70da      	strb	r2, [r3, #3]
 8008da6:	68a3      	ldr	r3, [r4, #8]
 8008da8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008dac:	711a      	strb	r2, [r3, #4]
 8008dae:	68a3      	ldr	r3, [r4, #8]
 8008db0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008db4:	715a      	strb	r2, [r3, #5]
 8008db6:	68a3      	ldr	r3, [r4, #8]
 8008db8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008dbc:	719a      	strb	r2, [r3, #6]
 8008dbe:	68a3      	ldr	r3, [r4, #8]
 8008dc0:	f89d 2000 	ldrb.w	r2, [sp]
 8008dc4:	71da      	strb	r2, [r3, #7]
 8008dc6:	68a2      	ldr	r2, [r4, #8]
 8008dc8:	6923      	ldr	r3, [r4, #16]
 8008dca:	3208      	adds	r2, #8
 8008dcc:	3308      	adds	r3, #8
 8008dce:	2108      	movs	r1, #8
 8008dd0:	60a2      	str	r2, [r4, #8]
 8008dd2:	6123      	str	r3, [r4, #16]
 8008dd4:	7561      	strb	r1, [r4, #21]
 8008dd6:	7da0      	ldrb	r0, [r4, #22]
 8008dd8:	f080 0001 	eor.w	r0, r0, #1
 8008ddc:	b002      	add	sp, #8
 8008dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008de2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008de6:	6019      	str	r1, [r3, #0]
 8008de8:	605a      	str	r2, [r3, #4]
 8008dea:	e7ec      	b.n	8008dc6 <ucdr_serialize_double+0x10a>
 8008dec:	68a2      	ldr	r2, [r4, #8]
 8008dee:	6923      	ldr	r3, [r4, #16]
 8008df0:	7da0      	ldrb	r0, [r4, #22]
 8008df2:	7567      	strb	r7, [r4, #21]
 8008df4:	1b92      	subs	r2, r2, r6
 8008df6:	1b9b      	subs	r3, r3, r6
 8008df8:	f080 0001 	eor.w	r0, r0, #1
 8008dfc:	60a2      	str	r2, [r4, #8]
 8008dfe:	6123      	str	r3, [r4, #16]
 8008e00:	b002      	add	sp, #8
 8008e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e06:	68a3      	ldr	r3, [r4, #8]
 8008e08:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008e0c:	701a      	strb	r2, [r3, #0]
 8008e0e:	68a3      	ldr	r3, [r4, #8]
 8008e10:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008e14:	701a      	strb	r2, [r3, #0]
 8008e16:	68a3      	ldr	r3, [r4, #8]
 8008e18:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008e1c:	701a      	strb	r2, [r3, #0]
 8008e1e:	68a3      	ldr	r3, [r4, #8]
 8008e20:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008e24:	701a      	strb	r2, [r3, #0]
 8008e26:	68a3      	ldr	r3, [r4, #8]
 8008e28:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008e2c:	701a      	strb	r2, [r3, #0]
 8008e2e:	68a5      	ldr	r5, [r4, #8]
 8008e30:	e78f      	b.n	8008d52 <ucdr_serialize_double+0x96>
 8008e32:	4628      	mov	r0, r5
 8008e34:	466d      	mov	r5, sp
 8008e36:	4632      	mov	r2, r6
 8008e38:	4629      	mov	r1, r5
 8008e3a:	f00f f8d0 	bl	8017fde <memcpy>
 8008e3e:	68a0      	ldr	r0, [r4, #8]
 8008e40:	4642      	mov	r2, r8
 8008e42:	19a9      	adds	r1, r5, r6
 8008e44:	f00f f8cb 	bl	8017fde <memcpy>
 8008e48:	e786      	b.n	8008d58 <ucdr_serialize_double+0x9c>
 8008e4a:	bf00      	nop

08008e4c <ucdr_serialize_endian_double>:
 8008e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e50:	460e      	mov	r6, r1
 8008e52:	b083      	sub	sp, #12
 8008e54:	2108      	movs	r1, #8
 8008e56:	4604      	mov	r4, r0
 8008e58:	ed8d 0b00 	vstr	d0, [sp]
 8008e5c:	f000 faa4 	bl	80093a8 <ucdr_buffer_alignment>
 8008e60:	4601      	mov	r1, r0
 8008e62:	4620      	mov	r0, r4
 8008e64:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008e68:	f000 fae2 	bl	8009430 <ucdr_advance_buffer>
 8008e6c:	2108      	movs	r1, #8
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f000 fa3a 	bl	80092e8 <ucdr_check_buffer_available_for>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d14c      	bne.n	8008f12 <ucdr_serialize_endian_double+0xc6>
 8008e78:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 8008e7c:	42bd      	cmp	r5, r7
 8008e7e:	d943      	bls.n	8008f08 <ucdr_serialize_endian_double+0xbc>
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	60a5      	str	r5, [r4, #8]
 8008e84:	1bed      	subs	r5, r5, r7
 8008e86:	442b      	add	r3, r5
 8008e88:	f1c5 0908 	rsb	r9, r5, #8
 8008e8c:	6123      	str	r3, [r4, #16]
 8008e8e:	4649      	mov	r1, r9
 8008e90:	4620      	mov	r0, r4
 8008e92:	f000 fa35 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d070      	beq.n	8008f7c <ucdr_serialize_endian_double+0x130>
 8008e9a:	2e01      	cmp	r6, #1
 8008e9c:	f000 8092 	beq.w	8008fc4 <ucdr_serialize_endian_double+0x178>
 8008ea0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008ea4:	703b      	strb	r3, [r7, #0]
 8008ea6:	2d01      	cmp	r5, #1
 8008ea8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008eac:	707b      	strb	r3, [r7, #1]
 8008eae:	d073      	beq.n	8008f98 <ucdr_serialize_endian_double+0x14c>
 8008eb0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008eb4:	70bb      	strb	r3, [r7, #2]
 8008eb6:	2d02      	cmp	r5, #2
 8008eb8:	d072      	beq.n	8008fa0 <ucdr_serialize_endian_double+0x154>
 8008eba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008ebe:	70fb      	strb	r3, [r7, #3]
 8008ec0:	2d03      	cmp	r5, #3
 8008ec2:	d071      	beq.n	8008fa8 <ucdr_serialize_endian_double+0x15c>
 8008ec4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008ec8:	713b      	strb	r3, [r7, #4]
 8008eca:	2d04      	cmp	r5, #4
 8008ecc:	d070      	beq.n	8008fb0 <ucdr_serialize_endian_double+0x164>
 8008ece:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8008ed2:	717b      	strb	r3, [r7, #5]
 8008ed4:	2d05      	cmp	r5, #5
 8008ed6:	d06f      	beq.n	8008fb8 <ucdr_serialize_endian_double+0x16c>
 8008ed8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8008edc:	71bb      	strb	r3, [r7, #6]
 8008ede:	2d06      	cmp	r5, #6
 8008ee0:	d06e      	beq.n	8008fc0 <ucdr_serialize_endian_double+0x174>
 8008ee2:	3707      	adds	r7, #7
 8008ee4:	f89d 3000 	ldrb.w	r3, [sp]
 8008ee8:	703b      	strb	r3, [r7, #0]
 8008eea:	6923      	ldr	r3, [r4, #16]
 8008eec:	68a2      	ldr	r2, [r4, #8]
 8008eee:	7da0      	ldrb	r0, [r4, #22]
 8008ef0:	3308      	adds	r3, #8
 8008ef2:	444a      	add	r2, r9
 8008ef4:	1b5b      	subs	r3, r3, r5
 8008ef6:	2108      	movs	r1, #8
 8008ef8:	f080 0001 	eor.w	r0, r0, #1
 8008efc:	60a2      	str	r2, [r4, #8]
 8008efe:	6123      	str	r3, [r4, #16]
 8008f00:	7561      	strb	r1, [r4, #21]
 8008f02:	b003      	add	sp, #12
 8008f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f08:	2108      	movs	r1, #8
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f000 f9f8 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8008f10:	b348      	cbz	r0, 8008f66 <ucdr_serialize_endian_double+0x11a>
 8008f12:	2e01      	cmp	r6, #1
 8008f14:	68a3      	ldr	r3, [r4, #8]
 8008f16:	d02c      	beq.n	8008f72 <ucdr_serialize_endian_double+0x126>
 8008f18:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008f1c:	701a      	strb	r2, [r3, #0]
 8008f1e:	68a3      	ldr	r3, [r4, #8]
 8008f20:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008f24:	705a      	strb	r2, [r3, #1]
 8008f26:	68a3      	ldr	r3, [r4, #8]
 8008f28:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008f2c:	709a      	strb	r2, [r3, #2]
 8008f2e:	68a3      	ldr	r3, [r4, #8]
 8008f30:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008f34:	70da      	strb	r2, [r3, #3]
 8008f36:	68a3      	ldr	r3, [r4, #8]
 8008f38:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008f3c:	711a      	strb	r2, [r3, #4]
 8008f3e:	68a3      	ldr	r3, [r4, #8]
 8008f40:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008f44:	715a      	strb	r2, [r3, #5]
 8008f46:	68a3      	ldr	r3, [r4, #8]
 8008f48:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008f4c:	719a      	strb	r2, [r3, #6]
 8008f4e:	68a3      	ldr	r3, [r4, #8]
 8008f50:	f89d 2000 	ldrb.w	r2, [sp]
 8008f54:	71da      	strb	r2, [r3, #7]
 8008f56:	68a2      	ldr	r2, [r4, #8]
 8008f58:	6923      	ldr	r3, [r4, #16]
 8008f5a:	3208      	adds	r2, #8
 8008f5c:	3308      	adds	r3, #8
 8008f5e:	2108      	movs	r1, #8
 8008f60:	60a2      	str	r2, [r4, #8]
 8008f62:	6123      	str	r3, [r4, #16]
 8008f64:	7561      	strb	r1, [r4, #21]
 8008f66:	7da0      	ldrb	r0, [r4, #22]
 8008f68:	f080 0001 	eor.w	r0, r0, #1
 8008f6c:	b003      	add	sp, #12
 8008f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f72:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f76:	6019      	str	r1, [r3, #0]
 8008f78:	605a      	str	r2, [r3, #4]
 8008f7a:	e7ec      	b.n	8008f56 <ucdr_serialize_endian_double+0x10a>
 8008f7c:	68a2      	ldr	r2, [r4, #8]
 8008f7e:	6923      	ldr	r3, [r4, #16]
 8008f80:	7da0      	ldrb	r0, [r4, #22]
 8008f82:	f884 8015 	strb.w	r8, [r4, #21]
 8008f86:	1b52      	subs	r2, r2, r5
 8008f88:	1b5b      	subs	r3, r3, r5
 8008f8a:	f080 0001 	eor.w	r0, r0, #1
 8008f8e:	60a2      	str	r2, [r4, #8]
 8008f90:	6123      	str	r3, [r4, #16]
 8008f92:	b003      	add	sp, #12
 8008f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f98:	68a3      	ldr	r3, [r4, #8]
 8008f9a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008f9e:	701a      	strb	r2, [r3, #0]
 8008fa0:	68a3      	ldr	r3, [r4, #8]
 8008fa2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008fa6:	701a      	strb	r2, [r3, #0]
 8008fa8:	68a3      	ldr	r3, [r4, #8]
 8008faa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008fae:	701a      	strb	r2, [r3, #0]
 8008fb0:	68a3      	ldr	r3, [r4, #8]
 8008fb2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008fb6:	701a      	strb	r2, [r3, #0]
 8008fb8:	68a3      	ldr	r3, [r4, #8]
 8008fba:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008fbe:	701a      	strb	r2, [r3, #0]
 8008fc0:	68a7      	ldr	r7, [r4, #8]
 8008fc2:	e78f      	b.n	8008ee4 <ucdr_serialize_endian_double+0x98>
 8008fc4:	466e      	mov	r6, sp
 8008fc6:	462a      	mov	r2, r5
 8008fc8:	4631      	mov	r1, r6
 8008fca:	4638      	mov	r0, r7
 8008fcc:	f00f f807 	bl	8017fde <memcpy>
 8008fd0:	68a0      	ldr	r0, [r4, #8]
 8008fd2:	464a      	mov	r2, r9
 8008fd4:	1971      	adds	r1, r6, r5
 8008fd6:	f00f f802 	bl	8017fde <memcpy>
 8008fda:	e786      	b.n	8008eea <ucdr_serialize_endian_double+0x9e>

08008fdc <ucdr_deserialize_double>:
 8008fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fe0:	460d      	mov	r5, r1
 8008fe2:	2108      	movs	r1, #8
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	f000 f9df 	bl	80093a8 <ucdr_buffer_alignment>
 8008fea:	4601      	mov	r1, r0
 8008fec:	4620      	mov	r0, r4
 8008fee:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008ff2:	f000 fa1d 	bl	8009430 <ucdr_advance_buffer>
 8008ff6:	2108      	movs	r1, #8
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f000 f975 	bl	80092e8 <ucdr_check_buffer_available_for>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d147      	bne.n	8009092 <ucdr_deserialize_double+0xb6>
 8009002:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009006:	42be      	cmp	r6, r7
 8009008:	d93e      	bls.n	8009088 <ucdr_deserialize_double+0xac>
 800900a:	6923      	ldr	r3, [r4, #16]
 800900c:	60a6      	str	r6, [r4, #8]
 800900e:	1bf6      	subs	r6, r6, r7
 8009010:	4433      	add	r3, r6
 8009012:	f1c6 0908 	rsb	r9, r6, #8
 8009016:	6123      	str	r3, [r4, #16]
 8009018:	4649      	mov	r1, r9
 800901a:	4620      	mov	r0, r4
 800901c:	f000 f970 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8009020:	2800      	cmp	r0, #0
 8009022:	d063      	beq.n	80090ec <ucdr_deserialize_double+0x110>
 8009024:	7d23      	ldrb	r3, [r4, #20]
 8009026:	2b01      	cmp	r3, #1
 8009028:	f000 8083 	beq.w	8009132 <ucdr_deserialize_double+0x156>
 800902c:	79fb      	ldrb	r3, [r7, #7]
 800902e:	702b      	strb	r3, [r5, #0]
 8009030:	79bb      	ldrb	r3, [r7, #6]
 8009032:	706b      	strb	r3, [r5, #1]
 8009034:	2e01      	cmp	r6, #1
 8009036:	d066      	beq.n	8009106 <ucdr_deserialize_double+0x12a>
 8009038:	797b      	ldrb	r3, [r7, #5]
 800903a:	70ab      	strb	r3, [r5, #2]
 800903c:	2e02      	cmp	r6, #2
 800903e:	f000 8089 	beq.w	8009154 <ucdr_deserialize_double+0x178>
 8009042:	793b      	ldrb	r3, [r7, #4]
 8009044:	70eb      	strb	r3, [r5, #3]
 8009046:	2e03      	cmp	r6, #3
 8009048:	f000 8082 	beq.w	8009150 <ucdr_deserialize_double+0x174>
 800904c:	78fb      	ldrb	r3, [r7, #3]
 800904e:	712b      	strb	r3, [r5, #4]
 8009050:	2e04      	cmp	r6, #4
 8009052:	d07b      	beq.n	800914c <ucdr_deserialize_double+0x170>
 8009054:	78bb      	ldrb	r3, [r7, #2]
 8009056:	716b      	strb	r3, [r5, #5]
 8009058:	2e05      	cmp	r6, #5
 800905a:	d075      	beq.n	8009148 <ucdr_deserialize_double+0x16c>
 800905c:	787b      	ldrb	r3, [r7, #1]
 800905e:	71ab      	strb	r3, [r5, #6]
 8009060:	2e06      	cmp	r6, #6
 8009062:	f105 0507 	add.w	r5, r5, #7
 8009066:	d062      	beq.n	800912e <ucdr_deserialize_double+0x152>
 8009068:	783b      	ldrb	r3, [r7, #0]
 800906a:	702b      	strb	r3, [r5, #0]
 800906c:	6923      	ldr	r3, [r4, #16]
 800906e:	68a2      	ldr	r2, [r4, #8]
 8009070:	7da0      	ldrb	r0, [r4, #22]
 8009072:	2108      	movs	r1, #8
 8009074:	3308      	adds	r3, #8
 8009076:	444a      	add	r2, r9
 8009078:	1b9b      	subs	r3, r3, r6
 800907a:	7561      	strb	r1, [r4, #21]
 800907c:	60a2      	str	r2, [r4, #8]
 800907e:	6123      	str	r3, [r4, #16]
 8009080:	f080 0001 	eor.w	r0, r0, #1
 8009084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009088:	2108      	movs	r1, #8
 800908a:	4620      	mov	r0, r4
 800908c:	f000 f938 	bl	8009300 <ucdr_check_final_buffer_behavior>
 8009090:	b310      	cbz	r0, 80090d8 <ucdr_deserialize_double+0xfc>
 8009092:	7d22      	ldrb	r2, [r4, #20]
 8009094:	68a3      	ldr	r3, [r4, #8]
 8009096:	2a01      	cmp	r2, #1
 8009098:	d023      	beq.n	80090e2 <ucdr_deserialize_double+0x106>
 800909a:	79db      	ldrb	r3, [r3, #7]
 800909c:	702b      	strb	r3, [r5, #0]
 800909e:	68a3      	ldr	r3, [r4, #8]
 80090a0:	799b      	ldrb	r3, [r3, #6]
 80090a2:	706b      	strb	r3, [r5, #1]
 80090a4:	68a3      	ldr	r3, [r4, #8]
 80090a6:	795b      	ldrb	r3, [r3, #5]
 80090a8:	70ab      	strb	r3, [r5, #2]
 80090aa:	68a3      	ldr	r3, [r4, #8]
 80090ac:	791b      	ldrb	r3, [r3, #4]
 80090ae:	70eb      	strb	r3, [r5, #3]
 80090b0:	68a3      	ldr	r3, [r4, #8]
 80090b2:	78db      	ldrb	r3, [r3, #3]
 80090b4:	712b      	strb	r3, [r5, #4]
 80090b6:	68a3      	ldr	r3, [r4, #8]
 80090b8:	789b      	ldrb	r3, [r3, #2]
 80090ba:	716b      	strb	r3, [r5, #5]
 80090bc:	68a3      	ldr	r3, [r4, #8]
 80090be:	785b      	ldrb	r3, [r3, #1]
 80090c0:	71ab      	strb	r3, [r5, #6]
 80090c2:	68a3      	ldr	r3, [r4, #8]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	71eb      	strb	r3, [r5, #7]
 80090c8:	68a2      	ldr	r2, [r4, #8]
 80090ca:	6923      	ldr	r3, [r4, #16]
 80090cc:	3208      	adds	r2, #8
 80090ce:	3308      	adds	r3, #8
 80090d0:	2108      	movs	r1, #8
 80090d2:	60a2      	str	r2, [r4, #8]
 80090d4:	6123      	str	r3, [r4, #16]
 80090d6:	7561      	strb	r1, [r4, #21]
 80090d8:	7da0      	ldrb	r0, [r4, #22]
 80090da:	f080 0001 	eor.w	r0, r0, #1
 80090de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	606b      	str	r3, [r5, #4]
 80090e8:	602a      	str	r2, [r5, #0]
 80090ea:	e7ed      	b.n	80090c8 <ucdr_deserialize_double+0xec>
 80090ec:	68a2      	ldr	r2, [r4, #8]
 80090ee:	6923      	ldr	r3, [r4, #16]
 80090f0:	7da0      	ldrb	r0, [r4, #22]
 80090f2:	f884 8015 	strb.w	r8, [r4, #21]
 80090f6:	1b92      	subs	r2, r2, r6
 80090f8:	1b9b      	subs	r3, r3, r6
 80090fa:	60a2      	str	r2, [r4, #8]
 80090fc:	6123      	str	r3, [r4, #16]
 80090fe:	f080 0001 	eor.w	r0, r0, #1
 8009102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009106:	68a3      	ldr	r3, [r4, #8]
 8009108:	795b      	ldrb	r3, [r3, #5]
 800910a:	70ab      	strb	r3, [r5, #2]
 800910c:	3503      	adds	r5, #3
 800910e:	68a3      	ldr	r3, [r4, #8]
 8009110:	791b      	ldrb	r3, [r3, #4]
 8009112:	f805 3b01 	strb.w	r3, [r5], #1
 8009116:	68a3      	ldr	r3, [r4, #8]
 8009118:	78db      	ldrb	r3, [r3, #3]
 800911a:	f805 3b01 	strb.w	r3, [r5], #1
 800911e:	68a3      	ldr	r3, [r4, #8]
 8009120:	789b      	ldrb	r3, [r3, #2]
 8009122:	f805 3b01 	strb.w	r3, [r5], #1
 8009126:	68a3      	ldr	r3, [r4, #8]
 8009128:	785b      	ldrb	r3, [r3, #1]
 800912a:	f805 3b01 	strb.w	r3, [r5], #1
 800912e:	68a7      	ldr	r7, [r4, #8]
 8009130:	e79a      	b.n	8009068 <ucdr_deserialize_double+0x8c>
 8009132:	4639      	mov	r1, r7
 8009134:	4632      	mov	r2, r6
 8009136:	4628      	mov	r0, r5
 8009138:	f00e ff51 	bl	8017fde <memcpy>
 800913c:	68a1      	ldr	r1, [r4, #8]
 800913e:	464a      	mov	r2, r9
 8009140:	19a8      	adds	r0, r5, r6
 8009142:	f00e ff4c 	bl	8017fde <memcpy>
 8009146:	e791      	b.n	800906c <ucdr_deserialize_double+0x90>
 8009148:	3506      	adds	r5, #6
 800914a:	e7ec      	b.n	8009126 <ucdr_deserialize_double+0x14a>
 800914c:	3505      	adds	r5, #5
 800914e:	e7e6      	b.n	800911e <ucdr_deserialize_double+0x142>
 8009150:	3504      	adds	r5, #4
 8009152:	e7e0      	b.n	8009116 <ucdr_deserialize_double+0x13a>
 8009154:	3503      	adds	r5, #3
 8009156:	e7da      	b.n	800910e <ucdr_deserialize_double+0x132>

08009158 <ucdr_deserialize_endian_double>:
 8009158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800915c:	460f      	mov	r7, r1
 800915e:	2108      	movs	r1, #8
 8009160:	4604      	mov	r4, r0
 8009162:	4615      	mov	r5, r2
 8009164:	f000 f920 	bl	80093a8 <ucdr_buffer_alignment>
 8009168:	4601      	mov	r1, r0
 800916a:	4620      	mov	r0, r4
 800916c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009170:	f000 f95e 	bl	8009430 <ucdr_advance_buffer>
 8009174:	2108      	movs	r1, #8
 8009176:	4620      	mov	r0, r4
 8009178:	f000 f8b6 	bl	80092e8 <ucdr_check_buffer_available_for>
 800917c:	2800      	cmp	r0, #0
 800917e:	d14f      	bne.n	8009220 <ucdr_deserialize_endian_double+0xc8>
 8009180:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 8009184:	4546      	cmp	r6, r8
 8009186:	d946      	bls.n	8009216 <ucdr_deserialize_endian_double+0xbe>
 8009188:	6923      	ldr	r3, [r4, #16]
 800918a:	60a6      	str	r6, [r4, #8]
 800918c:	eba6 0608 	sub.w	r6, r6, r8
 8009190:	4433      	add	r3, r6
 8009192:	f1c6 0a08 	rsb	sl, r6, #8
 8009196:	6123      	str	r3, [r4, #16]
 8009198:	4651      	mov	r1, sl
 800919a:	4620      	mov	r0, r4
 800919c:	f000 f8b0 	bl	8009300 <ucdr_check_final_buffer_behavior>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d069      	beq.n	8009278 <ucdr_deserialize_endian_double+0x120>
 80091a4:	2f01      	cmp	r7, #1
 80091a6:	f000 808b 	beq.w	80092c0 <ucdr_deserialize_endian_double+0x168>
 80091aa:	f898 3007 	ldrb.w	r3, [r8, #7]
 80091ae:	702b      	strb	r3, [r5, #0]
 80091b0:	f898 3006 	ldrb.w	r3, [r8, #6]
 80091b4:	706b      	strb	r3, [r5, #1]
 80091b6:	2e01      	cmp	r6, #1
 80091b8:	d06b      	beq.n	8009292 <ucdr_deserialize_endian_double+0x13a>
 80091ba:	f898 3005 	ldrb.w	r3, [r8, #5]
 80091be:	70ab      	strb	r3, [r5, #2]
 80091c0:	2e02      	cmp	r6, #2
 80091c2:	f000 808e 	beq.w	80092e2 <ucdr_deserialize_endian_double+0x18a>
 80091c6:	f898 3004 	ldrb.w	r3, [r8, #4]
 80091ca:	70eb      	strb	r3, [r5, #3]
 80091cc:	2e03      	cmp	r6, #3
 80091ce:	f000 8086 	beq.w	80092de <ucdr_deserialize_endian_double+0x186>
 80091d2:	f898 3003 	ldrb.w	r3, [r8, #3]
 80091d6:	712b      	strb	r3, [r5, #4]
 80091d8:	2e04      	cmp	r6, #4
 80091da:	d07e      	beq.n	80092da <ucdr_deserialize_endian_double+0x182>
 80091dc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80091e0:	716b      	strb	r3, [r5, #5]
 80091e2:	2e05      	cmp	r6, #5
 80091e4:	d077      	beq.n	80092d6 <ucdr_deserialize_endian_double+0x17e>
 80091e6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80091ea:	71ab      	strb	r3, [r5, #6]
 80091ec:	2e06      	cmp	r6, #6
 80091ee:	f105 0507 	add.w	r5, r5, #7
 80091f2:	d062      	beq.n	80092ba <ucdr_deserialize_endian_double+0x162>
 80091f4:	f898 3000 	ldrb.w	r3, [r8]
 80091f8:	702b      	strb	r3, [r5, #0]
 80091fa:	6923      	ldr	r3, [r4, #16]
 80091fc:	68a2      	ldr	r2, [r4, #8]
 80091fe:	7da0      	ldrb	r0, [r4, #22]
 8009200:	2108      	movs	r1, #8
 8009202:	3308      	adds	r3, #8
 8009204:	4452      	add	r2, sl
 8009206:	1b9b      	subs	r3, r3, r6
 8009208:	7561      	strb	r1, [r4, #21]
 800920a:	60a2      	str	r2, [r4, #8]
 800920c:	6123      	str	r3, [r4, #16]
 800920e:	f080 0001 	eor.w	r0, r0, #1
 8009212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009216:	2108      	movs	r1, #8
 8009218:	4620      	mov	r0, r4
 800921a:	f000 f871 	bl	8009300 <ucdr_check_final_buffer_behavior>
 800921e:	b308      	cbz	r0, 8009264 <ucdr_deserialize_endian_double+0x10c>
 8009220:	2f01      	cmp	r7, #1
 8009222:	68a3      	ldr	r3, [r4, #8]
 8009224:	d023      	beq.n	800926e <ucdr_deserialize_endian_double+0x116>
 8009226:	79db      	ldrb	r3, [r3, #7]
 8009228:	702b      	strb	r3, [r5, #0]
 800922a:	68a3      	ldr	r3, [r4, #8]
 800922c:	799b      	ldrb	r3, [r3, #6]
 800922e:	706b      	strb	r3, [r5, #1]
 8009230:	68a3      	ldr	r3, [r4, #8]
 8009232:	795b      	ldrb	r3, [r3, #5]
 8009234:	70ab      	strb	r3, [r5, #2]
 8009236:	68a3      	ldr	r3, [r4, #8]
 8009238:	791b      	ldrb	r3, [r3, #4]
 800923a:	70eb      	strb	r3, [r5, #3]
 800923c:	68a3      	ldr	r3, [r4, #8]
 800923e:	78db      	ldrb	r3, [r3, #3]
 8009240:	712b      	strb	r3, [r5, #4]
 8009242:	68a3      	ldr	r3, [r4, #8]
 8009244:	789b      	ldrb	r3, [r3, #2]
 8009246:	716b      	strb	r3, [r5, #5]
 8009248:	68a3      	ldr	r3, [r4, #8]
 800924a:	785b      	ldrb	r3, [r3, #1]
 800924c:	71ab      	strb	r3, [r5, #6]
 800924e:	68a3      	ldr	r3, [r4, #8]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	71eb      	strb	r3, [r5, #7]
 8009254:	68a2      	ldr	r2, [r4, #8]
 8009256:	6923      	ldr	r3, [r4, #16]
 8009258:	3208      	adds	r2, #8
 800925a:	3308      	adds	r3, #8
 800925c:	2108      	movs	r1, #8
 800925e:	60a2      	str	r2, [r4, #8]
 8009260:	6123      	str	r3, [r4, #16]
 8009262:	7561      	strb	r1, [r4, #21]
 8009264:	7da0      	ldrb	r0, [r4, #22]
 8009266:	f080 0001 	eor.w	r0, r0, #1
 800926a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	606b      	str	r3, [r5, #4]
 8009274:	602a      	str	r2, [r5, #0]
 8009276:	e7ed      	b.n	8009254 <ucdr_deserialize_endian_double+0xfc>
 8009278:	68a2      	ldr	r2, [r4, #8]
 800927a:	6923      	ldr	r3, [r4, #16]
 800927c:	7da0      	ldrb	r0, [r4, #22]
 800927e:	f884 9015 	strb.w	r9, [r4, #21]
 8009282:	1b92      	subs	r2, r2, r6
 8009284:	1b9b      	subs	r3, r3, r6
 8009286:	60a2      	str	r2, [r4, #8]
 8009288:	6123      	str	r3, [r4, #16]
 800928a:	f080 0001 	eor.w	r0, r0, #1
 800928e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009292:	68a3      	ldr	r3, [r4, #8]
 8009294:	795b      	ldrb	r3, [r3, #5]
 8009296:	70ab      	strb	r3, [r5, #2]
 8009298:	3503      	adds	r5, #3
 800929a:	68a3      	ldr	r3, [r4, #8]
 800929c:	791b      	ldrb	r3, [r3, #4]
 800929e:	f805 3b01 	strb.w	r3, [r5], #1
 80092a2:	68a3      	ldr	r3, [r4, #8]
 80092a4:	78db      	ldrb	r3, [r3, #3]
 80092a6:	f805 3b01 	strb.w	r3, [r5], #1
 80092aa:	68a3      	ldr	r3, [r4, #8]
 80092ac:	789b      	ldrb	r3, [r3, #2]
 80092ae:	f805 3b01 	strb.w	r3, [r5], #1
 80092b2:	68a3      	ldr	r3, [r4, #8]
 80092b4:	785b      	ldrb	r3, [r3, #1]
 80092b6:	f805 3b01 	strb.w	r3, [r5], #1
 80092ba:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80092be:	e799      	b.n	80091f4 <ucdr_deserialize_endian_double+0x9c>
 80092c0:	4641      	mov	r1, r8
 80092c2:	4632      	mov	r2, r6
 80092c4:	4628      	mov	r0, r5
 80092c6:	f00e fe8a 	bl	8017fde <memcpy>
 80092ca:	68a1      	ldr	r1, [r4, #8]
 80092cc:	4652      	mov	r2, sl
 80092ce:	19a8      	adds	r0, r5, r6
 80092d0:	f00e fe85 	bl	8017fde <memcpy>
 80092d4:	e791      	b.n	80091fa <ucdr_deserialize_endian_double+0xa2>
 80092d6:	3506      	adds	r5, #6
 80092d8:	e7eb      	b.n	80092b2 <ucdr_deserialize_endian_double+0x15a>
 80092da:	3505      	adds	r5, #5
 80092dc:	e7e5      	b.n	80092aa <ucdr_deserialize_endian_double+0x152>
 80092de:	3504      	adds	r5, #4
 80092e0:	e7df      	b.n	80092a2 <ucdr_deserialize_endian_double+0x14a>
 80092e2:	3503      	adds	r5, #3
 80092e4:	e7d9      	b.n	800929a <ucdr_deserialize_endian_double+0x142>
 80092e6:	bf00      	nop

080092e8 <ucdr_check_buffer_available_for>:
 80092e8:	7d83      	ldrb	r3, [r0, #22]
 80092ea:	b93b      	cbnz	r3, 80092fc <ucdr_check_buffer_available_for+0x14>
 80092ec:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80092f0:	440b      	add	r3, r1
 80092f2:	4298      	cmp	r0, r3
 80092f4:	bf34      	ite	cc
 80092f6:	2000      	movcc	r0, #0
 80092f8:	2001      	movcs	r0, #1
 80092fa:	4770      	bx	lr
 80092fc:	2000      	movs	r0, #0
 80092fe:	4770      	bx	lr

08009300 <ucdr_check_final_buffer_behavior>:
 8009300:	7d83      	ldrb	r3, [r0, #22]
 8009302:	b943      	cbnz	r3, 8009316 <ucdr_check_final_buffer_behavior+0x16>
 8009304:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8009308:	4291      	cmp	r1, r2
 800930a:	b510      	push	{r4, lr}
 800930c:	4604      	mov	r4, r0
 800930e:	d205      	bcs.n	800931c <ucdr_check_final_buffer_behavior+0x1c>
 8009310:	2301      	movs	r3, #1
 8009312:	4618      	mov	r0, r3
 8009314:	bd10      	pop	{r4, pc}
 8009316:	2300      	movs	r3, #0
 8009318:	4618      	mov	r0, r3
 800931a:	4770      	bx	lr
 800931c:	6982      	ldr	r2, [r0, #24]
 800931e:	b13a      	cbz	r2, 8009330 <ucdr_check_final_buffer_behavior+0x30>
 8009320:	69c1      	ldr	r1, [r0, #28]
 8009322:	4790      	blx	r2
 8009324:	f080 0301 	eor.w	r3, r0, #1
 8009328:	b2db      	uxtb	r3, r3
 800932a:	75a0      	strb	r0, [r4, #22]
 800932c:	4618      	mov	r0, r3
 800932e:	bd10      	pop	{r4, pc}
 8009330:	2001      	movs	r0, #1
 8009332:	75a0      	strb	r0, [r4, #22]
 8009334:	e7fa      	b.n	800932c <ucdr_check_final_buffer_behavior+0x2c>
 8009336:	bf00      	nop

08009338 <ucdr_set_on_full_buffer_callback>:
 8009338:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop

08009340 <ucdr_init_buffer_origin_offset_endian>:
 8009340:	b410      	push	{r4}
 8009342:	9c01      	ldr	r4, [sp, #4]
 8009344:	6001      	str	r1, [r0, #0]
 8009346:	440a      	add	r2, r1
 8009348:	6042      	str	r2, [r0, #4]
 800934a:	190a      	adds	r2, r1, r4
 800934c:	441c      	add	r4, r3
 800934e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8009352:	6082      	str	r2, [r0, #8]
 8009354:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009358:	7503      	strb	r3, [r0, #20]
 800935a:	2200      	movs	r2, #0
 800935c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8009360:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009364:	7542      	strb	r2, [r0, #21]
 8009366:	7582      	strb	r2, [r0, #22]
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop

0800936c <ucdr_init_buffer_origin_offset>:
 800936c:	b510      	push	{r4, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	9c04      	ldr	r4, [sp, #16]
 8009372:	9400      	str	r4, [sp, #0]
 8009374:	2401      	movs	r4, #1
 8009376:	9401      	str	r4, [sp, #4]
 8009378:	f7ff ffe2 	bl	8009340 <ucdr_init_buffer_origin_offset_endian>
 800937c:	b002      	add	sp, #8
 800937e:	bd10      	pop	{r4, pc}

08009380 <ucdr_init_buffer_origin>:
 8009380:	b510      	push	{r4, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	2400      	movs	r4, #0
 8009386:	9400      	str	r4, [sp, #0]
 8009388:	f7ff fff0 	bl	800936c <ucdr_init_buffer_origin_offset>
 800938c:	b002      	add	sp, #8
 800938e:	bd10      	pop	{r4, pc}

08009390 <ucdr_init_buffer>:
 8009390:	2300      	movs	r3, #0
 8009392:	f7ff bff5 	b.w	8009380 <ucdr_init_buffer_origin>
 8009396:	bf00      	nop

08009398 <ucdr_alignment>:
 8009398:	fbb0 f3f1 	udiv	r3, r0, r1
 800939c:	fb03 0011 	mls	r0, r3, r1, r0
 80093a0:	1a08      	subs	r0, r1, r0
 80093a2:	3901      	subs	r1, #1
 80093a4:	4008      	ands	r0, r1
 80093a6:	4770      	bx	lr

080093a8 <ucdr_buffer_alignment>:
 80093a8:	7d43      	ldrb	r3, [r0, #21]
 80093aa:	428b      	cmp	r3, r1
 80093ac:	d208      	bcs.n	80093c0 <ucdr_buffer_alignment+0x18>
 80093ae:	6900      	ldr	r0, [r0, #16]
 80093b0:	fbb0 f3f1 	udiv	r3, r0, r1
 80093b4:	fb01 0013 	mls	r0, r1, r3, r0
 80093b8:	1a08      	subs	r0, r1, r0
 80093ba:	3901      	subs	r1, #1
 80093bc:	4008      	ands	r0, r1
 80093be:	4770      	bx	lr
 80093c0:	2000      	movs	r0, #0
 80093c2:	4770      	bx	lr

080093c4 <ucdr_align_to>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	4604      	mov	r4, r0
 80093c8:	460d      	mov	r5, r1
 80093ca:	f7ff ffed 	bl	80093a8 <ucdr_buffer_alignment>
 80093ce:	68a3      	ldr	r3, [r4, #8]
 80093d0:	6861      	ldr	r1, [r4, #4]
 80093d2:	6922      	ldr	r2, [r4, #16]
 80093d4:	7565      	strb	r5, [r4, #21]
 80093d6:	4403      	add	r3, r0
 80093d8:	428b      	cmp	r3, r1
 80093da:	bf28      	it	cs
 80093dc:	460b      	movcs	r3, r1
 80093de:	4402      	add	r2, r0
 80093e0:	60a3      	str	r3, [r4, #8]
 80093e2:	6122      	str	r2, [r4, #16]
 80093e4:	bd38      	pop	{r3, r4, r5, pc}
 80093e6:	bf00      	nop

080093e8 <ucdr_buffer_length>:
 80093e8:	6882      	ldr	r2, [r0, #8]
 80093ea:	6800      	ldr	r0, [r0, #0]
 80093ec:	1a10      	subs	r0, r2, r0
 80093ee:	4770      	bx	lr

080093f0 <ucdr_buffer_remaining>:
 80093f0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80093f4:	1a10      	subs	r0, r2, r0
 80093f6:	4770      	bx	lr

080093f8 <ucdr_check_final_buffer_behavior_array>:
 80093f8:	b538      	push	{r3, r4, r5, lr}
 80093fa:	7d83      	ldrb	r3, [r0, #22]
 80093fc:	b963      	cbnz	r3, 8009418 <ucdr_check_final_buffer_behavior_array+0x20>
 80093fe:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8009402:	429a      	cmp	r2, r3
 8009404:	4604      	mov	r4, r0
 8009406:	460d      	mov	r5, r1
 8009408:	d308      	bcc.n	800941c <ucdr_check_final_buffer_behavior_array+0x24>
 800940a:	b139      	cbz	r1, 800941c <ucdr_check_final_buffer_behavior_array+0x24>
 800940c:	6983      	ldr	r3, [r0, #24]
 800940e:	b163      	cbz	r3, 800942a <ucdr_check_final_buffer_behavior_array+0x32>
 8009410:	69c1      	ldr	r1, [r0, #28]
 8009412:	4798      	blx	r3
 8009414:	75a0      	strb	r0, [r4, #22]
 8009416:	b108      	cbz	r0, 800941c <ucdr_check_final_buffer_behavior_array+0x24>
 8009418:	2000      	movs	r0, #0
 800941a:	bd38      	pop	{r3, r4, r5, pc}
 800941c:	4620      	mov	r0, r4
 800941e:	f7ff ffe7 	bl	80093f0 <ucdr_buffer_remaining>
 8009422:	42a8      	cmp	r0, r5
 8009424:	bf28      	it	cs
 8009426:	4628      	movcs	r0, r5
 8009428:	bd38      	pop	{r3, r4, r5, pc}
 800942a:	2301      	movs	r3, #1
 800942c:	7583      	strb	r3, [r0, #22]
 800942e:	e7f3      	b.n	8009418 <ucdr_check_final_buffer_behavior_array+0x20>

08009430 <ucdr_advance_buffer>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	4604      	mov	r4, r0
 8009434:	460d      	mov	r5, r1
 8009436:	f7ff ff57 	bl	80092e8 <ucdr_check_buffer_available_for>
 800943a:	b178      	cbz	r0, 800945c <ucdr_advance_buffer+0x2c>
 800943c:	6923      	ldr	r3, [r4, #16]
 800943e:	68a2      	ldr	r2, [r4, #8]
 8009440:	442b      	add	r3, r5
 8009442:	6123      	str	r3, [r4, #16]
 8009444:	2301      	movs	r3, #1
 8009446:	442a      	add	r2, r5
 8009448:	7563      	strb	r3, [r4, #21]
 800944a:	60a2      	str	r2, [r4, #8]
 800944c:	bd38      	pop	{r3, r4, r5, pc}
 800944e:	68a2      	ldr	r2, [r4, #8]
 8009450:	6923      	ldr	r3, [r4, #16]
 8009452:	4402      	add	r2, r0
 8009454:	4403      	add	r3, r0
 8009456:	1a2d      	subs	r5, r5, r0
 8009458:	60a2      	str	r2, [r4, #8]
 800945a:	6123      	str	r3, [r4, #16]
 800945c:	2201      	movs	r2, #1
 800945e:	4629      	mov	r1, r5
 8009460:	4620      	mov	r0, r4
 8009462:	f7ff ffc9 	bl	80093f8 <ucdr_check_final_buffer_behavior_array>
 8009466:	2800      	cmp	r0, #0
 8009468:	d1f1      	bne.n	800944e <ucdr_advance_buffer+0x1e>
 800946a:	2301      	movs	r3, #1
 800946c:	7563      	strb	r3, [r4, #21]
 800946e:	bd38      	pop	{r3, r4, r5, pc}

08009470 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 8009470:	4b04      	ldr	r3, [pc, #16]	@ (8009484 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	b10a      	cbz	r2, 800947a <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xa>
 8009476:	4803      	ldr	r0, [pc, #12]	@ (8009484 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 8009478:	4770      	bx	lr
 800947a:	4a03      	ldr	r2, [pc, #12]	@ (8009488 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x18>)
 800947c:	4801      	ldr	r0, [pc, #4]	@ (8009484 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800947e:	6812      	ldr	r2, [r2, #0]
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	4770      	bx	lr
 8009484:	20000208 	.word	0x20000208
 8009488:	20000378 	.word	0x20000378

0800948c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800948c:	4a02      	ldr	r2, [pc, #8]	@ (8009498 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xc>)
 800948e:	4b03      	ldr	r3, [pc, #12]	@ (800949c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x10>)
 8009490:	6812      	ldr	r2, [r2, #0]
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	20000378 	.word	0x20000378
 800949c:	20000208 	.word	0x20000208

080094a0 <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_init_function>:
 80094a0:	f005 beb2 	b.w	800f208 <nav_msgs__msg__Odometry__init>

080094a4 <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_fini_function>:
 80094a4:	f005 befc 	b.w	800f2a0 <nav_msgs__msg__Odometry__fini>

080094a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 80094a8:	b510      	push	{r4, lr}
 80094aa:	f001 ff63 	bl	800b374 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80094ae:	4c0a      	ldr	r4, [pc, #40]	@ (80094d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x30>)
 80094b0:	60e0      	str	r0, [r4, #12]
 80094b2:	f002 fb4b 	bl	800bb4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 80094b6:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80094ba:	f002 fb99 	bl	800bbf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 80094be:	4b07      	ldr	r3, [pc, #28]	@ (80094dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 80094c0:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	b10a      	cbz	r2, 80094cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x24>
 80094c8:	4804      	ldr	r0, [pc, #16]	@ (80094dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 80094ca:	bd10      	pop	{r4, pc}
 80094cc:	4a04      	ldr	r2, [pc, #16]	@ (80094e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x38>)
 80094ce:	4803      	ldr	r0, [pc, #12]	@ (80094dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 80094d0:	6812      	ldr	r2, [r2, #0]
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	bd10      	pop	{r4, pc}
 80094d6:	bf00      	nop
 80094d8:	20000240 	.word	0x20000240
 80094dc:	20000228 	.word	0x20000228
 80094e0:	2000037c 	.word	0x2000037c

080094e4 <get_serialized_size_nav_msgs__msg__Odometry>:
 80094e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e6:	4604      	mov	r4, r0
 80094e8:	b1c0      	cbz	r0, 800951c <get_serialized_size_nav_msgs__msg__Odometry+0x38>
 80094ea:	460e      	mov	r6, r1
 80094ec:	f001 ff66 	bl	800b3bc <get_serialized_size_std_msgs__msg__Header>
 80094f0:	1837      	adds	r7, r6, r0
 80094f2:	2104      	movs	r1, #4
 80094f4:	4638      	mov	r0, r7
 80094f6:	f7ff ff4f 	bl	8009398 <ucdr_alignment>
 80094fa:	69a5      	ldr	r5, [r4, #24]
 80094fc:	3505      	adds	r5, #5
 80094fe:	4405      	add	r5, r0
 8009500:	443d      	add	r5, r7
 8009502:	4629      	mov	r1, r5
 8009504:	f104 0020 	add.w	r0, r4, #32
 8009508:	f002 fb88 	bl	800bc1c <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800950c:	4405      	add	r5, r0
 800950e:	4629      	mov	r1, r5
 8009510:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 8009514:	f002 fc94 	bl	800be40 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 8009518:	1b80      	subs	r0, r0, r6
 800951a:	4428      	add	r0, r5
 800951c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800951e:	bf00      	nop

08009520 <_Odometry__cdr_deserialize>:
 8009520:	b570      	push	{r4, r5, r6, lr}
 8009522:	460c      	mov	r4, r1
 8009524:	b082      	sub	sp, #8
 8009526:	b349      	cbz	r1, 800957c <_Odometry__cdr_deserialize+0x5c>
 8009528:	4605      	mov	r5, r0
 800952a:	f001 ffc9 	bl	800b4c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800952e:	6843      	ldr	r3, [r0, #4]
 8009530:	4621      	mov	r1, r4
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	4628      	mov	r0, r5
 8009536:	4798      	blx	r3
 8009538:	69e6      	ldr	r6, [r4, #28]
 800953a:	6961      	ldr	r1, [r4, #20]
 800953c:	ab01      	add	r3, sp, #4
 800953e:	4632      	mov	r2, r6
 8009540:	4628      	mov	r0, r5
 8009542:	f002 fed5 	bl	800c2f0 <ucdr_deserialize_sequence_char>
 8009546:	9b01      	ldr	r3, [sp, #4]
 8009548:	b9a0      	cbnz	r0, 8009574 <_Odometry__cdr_deserialize+0x54>
 800954a:	429e      	cmp	r6, r3
 800954c:	d319      	bcc.n	8009582 <_Odometry__cdr_deserialize+0x62>
 800954e:	f002 fbd1 	bl	800bcf4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 8009552:	6843      	ldr	r3, [r0, #4]
 8009554:	f104 0120 	add.w	r1, r4, #32
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	4628      	mov	r0, r5
 800955c:	4798      	blx	r3
 800955e:	f002 fcdb 	bl	800bf18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 8009562:	6843      	ldr	r3, [r0, #4]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	f504 71bc 	add.w	r1, r4, #376	@ 0x178
 800956a:	4628      	mov	r0, r5
 800956c:	b002      	add	sp, #8
 800956e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009572:	4718      	bx	r3
 8009574:	b103      	cbz	r3, 8009578 <_Odometry__cdr_deserialize+0x58>
 8009576:	3b01      	subs	r3, #1
 8009578:	61a3      	str	r3, [r4, #24]
 800957a:	e7e8      	b.n	800954e <_Odometry__cdr_deserialize+0x2e>
 800957c:	4608      	mov	r0, r1
 800957e:	b002      	add	sp, #8
 8009580:	bd70      	pop	{r4, r5, r6, pc}
 8009582:	2101      	movs	r1, #1
 8009584:	75a8      	strb	r0, [r5, #22]
 8009586:	7569      	strb	r1, [r5, #21]
 8009588:	61a0      	str	r0, [r4, #24]
 800958a:	4628      	mov	r0, r5
 800958c:	f7ff ff1a 	bl	80093c4 <ucdr_align_to>
 8009590:	9901      	ldr	r1, [sp, #4]
 8009592:	4628      	mov	r0, r5
 8009594:	f7ff ff4c 	bl	8009430 <ucdr_advance_buffer>
 8009598:	e7d9      	b.n	800954e <_Odometry__cdr_deserialize+0x2e>
 800959a:	bf00      	nop

0800959c <_Odometry__cdr_serialize>:
 800959c:	b348      	cbz	r0, 80095f2 <_Odometry__cdr_serialize+0x56>
 800959e:	b570      	push	{r4, r5, r6, lr}
 80095a0:	4604      	mov	r4, r0
 80095a2:	460e      	mov	r6, r1
 80095a4:	f001 ff8c 	bl	800b4c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80095a8:	6843      	ldr	r3, [r0, #4]
 80095aa:	4631      	mov	r1, r6
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	4620      	mov	r0, r4
 80095b0:	4798      	blx	r3
 80095b2:	6965      	ldr	r5, [r4, #20]
 80095b4:	b1d5      	cbz	r5, 80095ec <_Odometry__cdr_serialize+0x50>
 80095b6:	4628      	mov	r0, r5
 80095b8:	f7f6 fe72 	bl	80002a0 <strlen>
 80095bc:	1c42      	adds	r2, r0, #1
 80095be:	4629      	mov	r1, r5
 80095c0:	61a0      	str	r0, [r4, #24]
 80095c2:	4630      	mov	r0, r6
 80095c4:	f002 fe82 	bl	800c2cc <ucdr_serialize_sequence_char>
 80095c8:	f002 fb94 	bl	800bcf4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 80095cc:	6843      	ldr	r3, [r0, #4]
 80095ce:	4631      	mov	r1, r6
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	f104 0020 	add.w	r0, r4, #32
 80095d6:	4798      	blx	r3
 80095d8:	f002 fc9e 	bl	800bf18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 80095dc:	6843      	ldr	r3, [r0, #4]
 80095de:	4631      	mov	r1, r6
 80095e0:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80095ea:	4718      	bx	r3
 80095ec:	462a      	mov	r2, r5
 80095ee:	4628      	mov	r0, r5
 80095f0:	e7e5      	b.n	80095be <_Odometry__cdr_serialize+0x22>
 80095f2:	4770      	bx	lr

080095f4 <_Odometry__max_serialized_size>:
 80095f4:	b510      	push	{r4, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	2301      	movs	r3, #1
 80095fa:	2100      	movs	r1, #0
 80095fc:	f10d 0007 	add.w	r0, sp, #7
 8009600:	f88d 3007 	strb.w	r3, [sp, #7]
 8009604:	f001 ff52 	bl	800b4ac <max_serialized_size_std_msgs__msg__Header>
 8009608:	2300      	movs	r3, #0
 800960a:	4601      	mov	r1, r0
 800960c:	4604      	mov	r4, r0
 800960e:	f10d 0007 	add.w	r0, sp, #7
 8009612:	f88d 3007 	strb.w	r3, [sp, #7]
 8009616:	f002 fb5d 	bl	800bcd4 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800961a:	4404      	add	r4, r0
 800961c:	4621      	mov	r1, r4
 800961e:	f10d 0007 	add.w	r0, sp, #7
 8009622:	f002 fc69 	bl	800bef8 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 8009626:	4420      	add	r0, r4
 8009628:	b002      	add	sp, #8
 800962a:	bd10      	pop	{r4, pc}

0800962c <_Odometry__get_serialized_size>:
 800962c:	b570      	push	{r4, r5, r6, lr}
 800962e:	4604      	mov	r4, r0
 8009630:	b1b8      	cbz	r0, 8009662 <_Odometry__get_serialized_size+0x36>
 8009632:	2100      	movs	r1, #0
 8009634:	f001 fec2 	bl	800b3bc <get_serialized_size_std_msgs__msg__Header>
 8009638:	2104      	movs	r1, #4
 800963a:	4606      	mov	r6, r0
 800963c:	f7ff feac 	bl	8009398 <ucdr_alignment>
 8009640:	69a5      	ldr	r5, [r4, #24]
 8009642:	3505      	adds	r5, #5
 8009644:	4603      	mov	r3, r0
 8009646:	4435      	add	r5, r6
 8009648:	441d      	add	r5, r3
 800964a:	4629      	mov	r1, r5
 800964c:	f104 0020 	add.w	r0, r4, #32
 8009650:	f002 fae4 	bl	800bc1c <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 8009654:	4405      	add	r5, r0
 8009656:	4629      	mov	r1, r5
 8009658:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800965c:	f002 fbf0 	bl	800be40 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 8009660:	4428      	add	r0, r5
 8009662:	bd70      	pop	{r4, r5, r6, pc}

08009664 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 8009664:	4800      	ldr	r0, [pc, #0]	@ (8009668 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x4>)
 8009666:	4770      	bx	lr
 8009668:	20000330 	.word	0x20000330

0800966c <rcl_get_zero_initialized_publisher>:
 800966c:	4b01      	ldr	r3, [pc, #4]	@ (8009674 <rcl_get_zero_initialized_publisher+0x8>)
 800966e:	6818      	ldr	r0, [r3, #0]
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop
 8009674:	08019904 	.word	0x08019904

08009678 <rcl_publisher_init>:
 8009678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800967c:	b088      	sub	sp, #32
 800967e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8009680:	2d00      	cmp	r5, #0
 8009682:	d06a      	beq.n	800975a <rcl_publisher_init+0xe2>
 8009684:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8009688:	4604      	mov	r4, r0
 800968a:	4648      	mov	r0, r9
 800968c:	460e      	mov	r6, r1
 800968e:	4690      	mov	r8, r2
 8009690:	461f      	mov	r7, r3
 8009692:	f001 f845 	bl	800a720 <rcutils_allocator_is_valid>
 8009696:	2800      	cmp	r0, #0
 8009698:	d05f      	beq.n	800975a <rcl_publisher_init+0xe2>
 800969a:	2c00      	cmp	r4, #0
 800969c:	d05d      	beq.n	800975a <rcl_publisher_init+0xe2>
 800969e:	f8d4 a000 	ldr.w	sl, [r4]
 80096a2:	f1ba 0f00 	cmp.w	sl, #0
 80096a6:	d004      	beq.n	80096b2 <rcl_publisher_init+0x3a>
 80096a8:	2764      	movs	r7, #100	@ 0x64
 80096aa:	4638      	mov	r0, r7
 80096ac:	b008      	add	sp, #32
 80096ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096b2:	4630      	mov	r0, r6
 80096b4:	f006 fa9e 	bl	800fbf4 <rcl_node_is_valid>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	d053      	beq.n	8009764 <rcl_publisher_init+0xec>
 80096bc:	f1b8 0f00 	cmp.w	r8, #0
 80096c0:	d04b      	beq.n	800975a <rcl_publisher_init+0xe2>
 80096c2:	2f00      	cmp	r7, #0
 80096c4:	d049      	beq.n	800975a <rcl_publisher_init+0xe2>
 80096c6:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80096ca:	aa07      	add	r2, sp, #28
 80096cc:	9205      	str	r2, [sp, #20]
 80096ce:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 80096d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096d6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80096da:	f8cd a01c 	str.w	sl, [sp, #28]
 80096de:	4639      	mov	r1, r7
 80096e0:	e899 000c 	ldmia.w	r9, {r2, r3}
 80096e4:	4630      	mov	r0, r6
 80096e6:	f006 fb15 	bl	800fd14 <rcl_node_resolve_name>
 80096ea:	4607      	mov	r7, r0
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d150      	bne.n	8009792 <rcl_publisher_init+0x11a>
 80096f0:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 80096f4:	21c8      	movs	r1, #200	@ 0xc8
 80096f6:	2001      	movs	r0, #1
 80096f8:	4798      	blx	r3
 80096fa:	6020      	str	r0, [r4, #0]
 80096fc:	2800      	cmp	r0, #0
 80096fe:	d04e      	beq.n	800979e <rcl_publisher_init+0x126>
 8009700:	4630      	mov	r0, r6
 8009702:	f006 fa99 	bl	800fc38 <rcl_node_get_rmw_handle>
 8009706:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	9a07      	ldr	r2, [sp, #28]
 800970e:	6827      	ldr	r7, [r4, #0]
 8009710:	462b      	mov	r3, r5
 8009712:	4641      	mov	r1, r8
 8009714:	f001 f91e 	bl	800a954 <rmw_create_publisher>
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800971e:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8009722:	b370      	cbz	r0, 8009782 <rcl_publisher_init+0x10a>
 8009724:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8009728:	f001 f9f0 	bl	800ab0c <rmw_publisher_get_actual_qos>
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	4607      	mov	r7, r0
 8009730:	b9d0      	cbnz	r0, 8009768 <rcl_publisher_init+0xf0>
 8009732:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 8009736:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800973a:	4629      	mov	r1, r5
 800973c:	2270      	movs	r2, #112	@ 0x70
 800973e:	4618      	mov	r0, r3
 8009740:	f00e fc4d 	bl	8017fde <memcpy>
 8009744:	6832      	ldr	r2, [r6, #0]
 8009746:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800974a:	9807      	ldr	r0, [sp, #28]
 800974c:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800974e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009750:	4798      	blx	r3
 8009752:	4638      	mov	r0, r7
 8009754:	b008      	add	sp, #32
 8009756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800975a:	270b      	movs	r7, #11
 800975c:	4638      	mov	r0, r7
 800975e:	b008      	add	sp, #32
 8009760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009764:	27c8      	movs	r7, #200	@ 0xc8
 8009766:	e7a0      	b.n	80096aa <rcl_publisher_init+0x32>
 8009768:	b18b      	cbz	r3, 800978e <rcl_publisher_init+0x116>
 800976a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800976e:	b142      	cbz	r2, 8009782 <rcl_publisher_init+0x10a>
 8009770:	4630      	mov	r0, r6
 8009772:	f006 fa61 	bl	800fc38 <rcl_node_get_rmw_handle>
 8009776:	6823      	ldr	r3, [r4, #0]
 8009778:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800977c:	f001 f9d4 	bl	800ab28 <rmw_destroy_publisher>
 8009780:	6823      	ldr	r3, [r4, #0]
 8009782:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8009784:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009786:	4618      	mov	r0, r3
 8009788:	4790      	blx	r2
 800978a:	2300      	movs	r3, #0
 800978c:	6023      	str	r3, [r4, #0]
 800978e:	2701      	movs	r7, #1
 8009790:	e7db      	b.n	800974a <rcl_publisher_init+0xd2>
 8009792:	2867      	cmp	r0, #103	@ 0x67
 8009794:	d0d9      	beq.n	800974a <rcl_publisher_init+0xd2>
 8009796:	2869      	cmp	r0, #105	@ 0x69
 8009798:	d003      	beq.n	80097a2 <rcl_publisher_init+0x12a>
 800979a:	280a      	cmp	r0, #10
 800979c:	d1f7      	bne.n	800978e <rcl_publisher_init+0x116>
 800979e:	270a      	movs	r7, #10
 80097a0:	e7d3      	b.n	800974a <rcl_publisher_init+0xd2>
 80097a2:	2767      	movs	r7, #103	@ 0x67
 80097a4:	e7d1      	b.n	800974a <rcl_publisher_init+0xd2>
 80097a6:	bf00      	nop

080097a8 <rcl_publisher_get_default_options>:
 80097a8:	b530      	push	{r4, r5, lr}
 80097aa:	4912      	ldr	r1, [pc, #72]	@ (80097f4 <rcl_publisher_get_default_options+0x4c>)
 80097ac:	b083      	sub	sp, #12
 80097ae:	2250      	movs	r2, #80	@ 0x50
 80097b0:	4604      	mov	r4, r0
 80097b2:	f00e fc14 	bl	8017fde <memcpy>
 80097b6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80097ba:	f000 ff85 	bl	800a6c8 <rcutils_get_default_allocator>
 80097be:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 80097c2:	f001 f849 	bl	800a858 <rmw_get_default_publisher_options>
 80097c6:	2500      	movs	r5, #0
 80097c8:	f10d 0007 	add.w	r0, sp, #7
 80097cc:	f88d 5007 	strb.w	r5, [sp, #7]
 80097d0:	f006 fa38 	bl	800fc44 <rcl_get_disable_loaned_message>
 80097d4:	b930      	cbnz	r0, 80097e4 <rcl_publisher_get_default_options+0x3c>
 80097d6:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80097da:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 80097de:	4620      	mov	r0, r4
 80097e0:	b003      	add	sp, #12
 80097e2:	bd30      	pop	{r4, r5, pc}
 80097e4:	f000 ffc8 	bl	800a778 <rcutils_reset_error>
 80097e8:	4620      	mov	r0, r4
 80097ea:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 80097ee:	b003      	add	sp, #12
 80097f0:	bd30      	pop	{r4, r5, pc}
 80097f2:	bf00      	nop
 80097f4:	08019908 	.word	0x08019908

080097f8 <rcl_publish>:
 80097f8:	b308      	cbz	r0, 800983e <rcl_publish+0x46>
 80097fa:	6803      	ldr	r3, [r0, #0]
 80097fc:	b570      	push	{r4, r5, r6, lr}
 80097fe:	4604      	mov	r4, r0
 8009800:	b1c3      	cbz	r3, 8009834 <rcl_publish+0x3c>
 8009802:	4616      	mov	r6, r2
 8009804:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8009808:	b1a2      	cbz	r2, 8009834 <rcl_publish+0x3c>
 800980a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800980e:	460d      	mov	r5, r1
 8009810:	f005 fe42 	bl	800f498 <rcl_context_is_valid>
 8009814:	b160      	cbz	r0, 8009830 <rcl_publish+0x38>
 8009816:	6823      	ldr	r3, [r4, #0]
 8009818:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800981c:	b150      	cbz	r0, 8009834 <rcl_publish+0x3c>
 800981e:	b165      	cbz	r5, 800983a <rcl_publish+0x42>
 8009820:	4632      	mov	r2, r6
 8009822:	4629      	mov	r1, r5
 8009824:	f001 f836 	bl	800a894 <rmw_publish>
 8009828:	3800      	subs	r0, #0
 800982a:	bf18      	it	ne
 800982c:	2001      	movne	r0, #1
 800982e:	bd70      	pop	{r4, r5, r6, pc}
 8009830:	f000 ff84 	bl	800a73c <rcutils_error_is_set>
 8009834:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8009838:	bd70      	pop	{r4, r5, r6, pc}
 800983a:	200b      	movs	r0, #11
 800983c:	bd70      	pop	{r4, r5, r6, pc}
 800983e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8009842:	4770      	bx	lr

08009844 <rcl_publisher_is_valid>:
 8009844:	b1b0      	cbz	r0, 8009874 <rcl_publisher_is_valid+0x30>
 8009846:	6803      	ldr	r3, [r0, #0]
 8009848:	b510      	push	{r4, lr}
 800984a:	4604      	mov	r4, r0
 800984c:	b183      	cbz	r3, 8009870 <rcl_publisher_is_valid+0x2c>
 800984e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8009852:	b16a      	cbz	r2, 8009870 <rcl_publisher_is_valid+0x2c>
 8009854:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8009858:	f005 fe1e 	bl	800f498 <rcl_context_is_valid>
 800985c:	b130      	cbz	r0, 800986c <rcl_publisher_is_valid+0x28>
 800985e:	6823      	ldr	r3, [r4, #0]
 8009860:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8009864:	3800      	subs	r0, #0
 8009866:	bf18      	it	ne
 8009868:	2001      	movne	r0, #1
 800986a:	bd10      	pop	{r4, pc}
 800986c:	f000 ff66 	bl	800a73c <rcutils_error_is_set>
 8009870:	2000      	movs	r0, #0
 8009872:	bd10      	pop	{r4, pc}
 8009874:	2000      	movs	r0, #0
 8009876:	4770      	bx	lr

08009878 <rcl_publisher_is_valid_except_context>:
 8009878:	b130      	cbz	r0, 8009888 <rcl_publisher_is_valid_except_context+0x10>
 800987a:	6800      	ldr	r0, [r0, #0]
 800987c:	b120      	cbz	r0, 8009888 <rcl_publisher_is_valid_except_context+0x10>
 800987e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8009882:	3800      	subs	r0, #0
 8009884:	bf18      	it	ne
 8009886:	2001      	movne	r0, #1
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop

0800988c <_rclc_check_for_new_data>:
 800988c:	2800      	cmp	r0, #0
 800988e:	d046      	beq.n	800991e <_rclc_check_for_new_data+0x92>
 8009890:	b510      	push	{r4, lr}
 8009892:	7802      	ldrb	r2, [r0, #0]
 8009894:	b084      	sub	sp, #16
 8009896:	4603      	mov	r3, r0
 8009898:	2a0a      	cmp	r2, #10
 800989a:	d842      	bhi.n	8009922 <_rclc_check_for_new_data+0x96>
 800989c:	e8df f002 	tbb	[pc, r2]
 80098a0:	14181212 	.word	0x14181212
 80098a4:	06060614 	.word	0x06060614
 80098a8:	2e1a      	.short	0x2e1a
 80098aa:	16          	.byte	0x16
 80098ab:	00          	.byte	0x00
 80098ac:	6a0a      	ldr	r2, [r1, #32]
 80098ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80098b0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80098b4:	3a00      	subs	r2, #0
 80098b6:	bf18      	it	ne
 80098b8:	2201      	movne	r2, #1
 80098ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80098be:	2000      	movs	r0, #0
 80098c0:	b004      	add	sp, #16
 80098c2:	bd10      	pop	{r4, pc}
 80098c4:	680a      	ldr	r2, [r1, #0]
 80098c6:	e7f2      	b.n	80098ae <_rclc_check_for_new_data+0x22>
 80098c8:	698a      	ldr	r2, [r1, #24]
 80098ca:	e7f0      	b.n	80098ae <_rclc_check_for_new_data+0x22>
 80098cc:	688a      	ldr	r2, [r1, #8]
 80098ce:	e7ee      	b.n	80098ae <_rclc_check_for_new_data+0x22>
 80098d0:	690a      	ldr	r2, [r1, #16]
 80098d2:	e7ec      	b.n	80098ae <_rclc_check_for_new_data+0x22>
 80098d4:	685c      	ldr	r4, [r3, #4]
 80098d6:	4608      	mov	r0, r1
 80098d8:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 80098dc:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 80098e0:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 80098e4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 80098ee:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 80098f2:	f104 0110 	add.w	r1, r4, #16
 80098f6:	f008 f8b3 	bl	8011a60 <rcl_action_client_wait_set_get_entities_ready>
 80098fa:	e7e1      	b.n	80098c0 <_rclc_check_for_new_data+0x34>
 80098fc:	685c      	ldr	r4, [r3, #4]
 80098fe:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 8009902:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 8009906:	e9cd 3200 	strd	r3, r2, [sp]
 800990a:	4608      	mov	r0, r1
 800990c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8009910:	f104 0220 	add.w	r2, r4, #32
 8009914:	f104 0110 	add.w	r1, r4, #16
 8009918:	f008 faa4 	bl	8011e64 <rcl_action_server_wait_set_get_entities_ready>
 800991c:	e7d0      	b.n	80098c0 <_rclc_check_for_new_data+0x34>
 800991e:	200b      	movs	r0, #11
 8009920:	4770      	bx	lr
 8009922:	2001      	movs	r0, #1
 8009924:	e7cc      	b.n	80098c0 <_rclc_check_for_new_data+0x34>
 8009926:	bf00      	nop

08009928 <_rclc_take_new_data>:
 8009928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800992a:	b099      	sub	sp, #100	@ 0x64
 800992c:	2800      	cmp	r0, #0
 800992e:	f000 8082 	beq.w	8009a36 <_rclc_take_new_data+0x10e>
 8009932:	7803      	ldrb	r3, [r0, #0]
 8009934:	4604      	mov	r4, r0
 8009936:	2b0a      	cmp	r3, #10
 8009938:	f200 815d 	bhi.w	8009bf6 <_rclc_take_new_data+0x2ce>
 800993c:	e8df f003 	tbb	[pc, r3]
 8009940:	31531f1f 	.word	0x31531f1f
 8009944:	06060631 	.word	0x06060631
 8009948:	4555      	.short	0x4555
 800994a:	53          	.byte	0x53
 800994b:	00          	.byte	0x00
 800994c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800994e:	6a0b      	ldr	r3, [r1, #32]
 8009950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d046      	beq.n	80099e6 <_rclc_take_new_data+0xbe>
 8009958:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800995c:	f104 0110 	add.w	r1, r4, #16
 8009960:	f006 fa86 	bl	800fe70 <rcl_take_request>
 8009964:	4605      	mov	r5, r0
 8009966:	2800      	cmp	r0, #0
 8009968:	d03d      	beq.n	80099e6 <_rclc_take_new_data+0xbe>
 800996a:	f240 2359 	movw	r3, #601	@ 0x259
 800996e:	4298      	cmp	r0, r3
 8009970:	d128      	bne.n	80099c4 <_rclc_take_new_data+0x9c>
 8009972:	2300      	movs	r3, #0
 8009974:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8009978:	4628      	mov	r0, r5
 800997a:	b019      	add	sp, #100	@ 0x64
 800997c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800997e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009980:	680b      	ldr	r3, [r1, #0]
 8009982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009986:	b373      	cbz	r3, 80099e6 <_rclc_take_new_data+0xbe>
 8009988:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800998c:	2300      	movs	r3, #0
 800998e:	aa0a      	add	r2, sp, #40	@ 0x28
 8009990:	f006 fc42 	bl	8010218 <rcl_take>
 8009994:	4605      	mov	r5, r0
 8009996:	b330      	cbz	r0, 80099e6 <_rclc_take_new_data+0xbe>
 8009998:	f240 1391 	movw	r3, #401	@ 0x191
 800999c:	4298      	cmp	r0, r3
 800999e:	d0e8      	beq.n	8009972 <_rclc_take_new_data+0x4a>
 80099a0:	e010      	b.n	80099c4 <_rclc_take_new_data+0x9c>
 80099a2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80099a4:	698b      	ldr	r3, [r1, #24]
 80099a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099aa:	b1e3      	cbz	r3, 80099e6 <_rclc_take_new_data+0xbe>
 80099ac:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80099b0:	f104 0110 	add.w	r1, r4, #16
 80099b4:	f005 fce0 	bl	800f378 <rcl_take_response>
 80099b8:	4605      	mov	r5, r0
 80099ba:	b1a0      	cbz	r0, 80099e6 <_rclc_take_new_data+0xbe>
 80099bc:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80099c0:	4298      	cmp	r0, r3
 80099c2:	d0d9      	beq.n	8009978 <_rclc_take_new_data+0x50>
 80099c4:	f000 fed8 	bl	800a778 <rcutils_reset_error>
 80099c8:	e7d6      	b.n	8009978 <_rclc_take_new_data+0x50>
 80099ca:	6840      	ldr	r0, [r0, #4]
 80099cc:	f890 3020 	ldrb.w	r3, [r0, #32]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d15f      	bne.n	8009a94 <_rclc_take_new_data+0x16c>
 80099d4:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d179      	bne.n	8009ad0 <_rclc_take_new_data+0x1a8>
 80099dc:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f040 8096 	bne.w	8009b12 <_rclc_take_new_data+0x1ea>
 80099e6:	2500      	movs	r5, #0
 80099e8:	e7c6      	b.n	8009978 <_rclc_take_new_data+0x50>
 80099ea:	6840      	ldr	r0, [r0, #4]
 80099ec:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d138      	bne.n	8009a66 <_rclc_take_new_data+0x13e>
 80099f4:	69c3      	ldr	r3, [r0, #28]
 80099f6:	b113      	cbz	r3, 80099fe <_rclc_take_new_data+0xd6>
 80099f8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80099fc:	b9fb      	cbnz	r3, 8009a3e <_rclc_take_new_data+0x116>
 80099fe:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f040 80a8 	bne.w	8009b58 <_rclc_take_new_data+0x230>
 8009a08:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d0ea      	beq.n	80099e6 <_rclc_take_new_data+0xbe>
 8009a10:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8009a12:	a90a      	add	r1, sp, #40	@ 0x28
 8009a14:	3010      	adds	r0, #16
 8009a16:	f007 ff07 	bl	8011828 <rcl_action_take_result_response>
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d1d1      	bne.n	80099c4 <_rclc_take_new_data+0x9c>
 8009a20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a24:	6860      	ldr	r0, [r4, #4]
 8009a26:	f008 fb47 	bl	80120b8 <rclc_action_find_handle_by_result_request_sequence_number>
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	d0db      	beq.n	80099e6 <_rclc_take_new_data+0xbe>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8009a34:	e7d7      	b.n	80099e6 <_rclc_take_new_data+0xbe>
 8009a36:	250b      	movs	r5, #11
 8009a38:	4628      	mov	r0, r5
 8009a3a:	b019      	add	sp, #100	@ 0x64
 8009a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a3e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009a40:	3010      	adds	r0, #16
 8009a42:	f007 ff6d 	bl	8011920 <rcl_action_take_feedback>
 8009a46:	4605      	mov	r5, r0
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	d1bb      	bne.n	80099c4 <_rclc_take_new_data+0x9c>
 8009a4c:	6860      	ldr	r0, [r4, #4]
 8009a4e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009a50:	f008 faf0 	bl	8012034 <rclc_action_find_goal_handle_by_uuid>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2800      	cmp	r0, #0
 8009a58:	f000 80c4 	beq.w	8009be4 <_rclc_take_new_data+0x2bc>
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	6860      	ldr	r0, [r4, #4]
 8009a60:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8009a64:	e7cb      	b.n	80099fe <_rclc_take_new_data+0xd6>
 8009a66:	aa04      	add	r2, sp, #16
 8009a68:	a90a      	add	r1, sp, #40	@ 0x28
 8009a6a:	3010      	adds	r0, #16
 8009a6c:	f007 fe6c 	bl	8011748 <rcl_action_take_goal_response>
 8009a70:	4605      	mov	r5, r0
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d1a6      	bne.n	80099c4 <_rclc_take_new_data+0x9c>
 8009a76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a7a:	6860      	ldr	r0, [r4, #4]
 8009a7c:	f008 fb0a 	bl	8012094 <rclc_action_find_handle_by_goal_request_sequence_number>
 8009a80:	b130      	cbz	r0, 8009a90 <_rclc_take_new_data+0x168>
 8009a82:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009a86:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f880 2020 	strb.w	r2, [r0, #32]
 8009a90:	6860      	ldr	r0, [r4, #4]
 8009a92:	e7af      	b.n	80099f4 <_rclc_take_new_data+0xcc>
 8009a94:	f008 faa8 	bl	8011fe8 <rclc_action_take_goal_handle>
 8009a98:	4606      	mov	r6, r0
 8009a9a:	6860      	ldr	r0, [r4, #4]
 8009a9c:	2e00      	cmp	r6, #0
 8009a9e:	d099      	beq.n	80099d4 <_rclc_take_new_data+0xac>
 8009aa0:	6070      	str	r0, [r6, #4]
 8009aa2:	69f2      	ldr	r2, [r6, #28]
 8009aa4:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8009aa8:	3010      	adds	r0, #16
 8009aaa:	f008 f869 	bl	8011b80 <rcl_action_take_goal_request>
 8009aae:	4605      	mov	r5, r0
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	f040 8099 	bne.w	8009be8 <_rclc_take_new_data+0x2c0>
 8009ab6:	69f7      	ldr	r7, [r6, #28]
 8009ab8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009aba:	7235      	strb	r5, [r6, #8]
 8009abc:	f8c6 0009 	str.w	r0, [r6, #9]
 8009ac0:	f8c6 100d 	str.w	r1, [r6, #13]
 8009ac4:	6860      	ldr	r0, [r4, #4]
 8009ac6:	f8c6 2011 	str.w	r2, [r6, #17]
 8009aca:	f8c6 3015 	str.w	r3, [r6, #21]
 8009ace:	e781      	b.n	80099d4 <_rclc_take_new_data+0xac>
 8009ad0:	aa04      	add	r2, sp, #16
 8009ad2:	3010      	adds	r0, #16
 8009ad4:	a90a      	add	r1, sp, #40	@ 0x28
 8009ad6:	f008 f8c3 	bl	8011c60 <rcl_action_take_result_request>
 8009ada:	4605      	mov	r5, r0
 8009adc:	2800      	cmp	r0, #0
 8009ade:	f47f af71 	bne.w	80099c4 <_rclc_take_new_data+0x9c>
 8009ae2:	6860      	ldr	r0, [r4, #4]
 8009ae4:	a904      	add	r1, sp, #16
 8009ae6:	f008 faa5 	bl	8012034 <rclc_action_find_goal_handle_by_uuid>
 8009aea:	4607      	mov	r7, r0
 8009aec:	b160      	cbz	r0, 8009b08 <_rclc_take_new_data+0x1e0>
 8009aee:	ad0a      	add	r5, sp, #40	@ 0x28
 8009af0:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8009af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009af6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009af8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009afc:	f04f 0c02 	mov.w	ip, #2
 8009b00:	e886 0003 	stmia.w	r6, {r0, r1}
 8009b04:	f887 c008 	strb.w	ip, [r7, #8]
 8009b08:	6860      	ldr	r0, [r4, #4]
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8009b10:	e764      	b.n	80099dc <_rclc_take_new_data+0xb4>
 8009b12:	ae04      	add	r6, sp, #16
 8009b14:	aa0a      	add	r2, sp, #40	@ 0x28
 8009b16:	3010      	adds	r0, #16
 8009b18:	4631      	mov	r1, r6
 8009b1a:	f008 f8df 	bl	8011cdc <rcl_action_take_cancel_request>
 8009b1e:	4605      	mov	r5, r0
 8009b20:	2800      	cmp	r0, #0
 8009b22:	f47f af4f 	bne.w	80099c4 <_rclc_take_new_data+0x9c>
 8009b26:	6860      	ldr	r0, [r4, #4]
 8009b28:	a90a      	add	r1, sp, #40	@ 0x28
 8009b2a:	f008 fa83 	bl	8012034 <rclc_action_find_goal_handle_by_uuid>
 8009b2e:	4605      	mov	r5, r0
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d04c      	beq.n	8009bce <_rclc_take_new_data+0x2a6>
 8009b34:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009b38:	2101      	movs	r1, #1
 8009b3a:	f008 fa03 	bl	8011f44 <rcl_action_transition_goal_state>
 8009b3e:	2803      	cmp	r0, #3
 8009b40:	4607      	mov	r7, r0
 8009b42:	d139      	bne.n	8009bb8 <_rclc_take_new_data+0x290>
 8009b44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009b46:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 8009b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b4c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009b50:	e884 0003 	stmia.w	r4, {r0, r1}
 8009b54:	722f      	strb	r7, [r5, #8]
 8009b56:	e746      	b.n	80099e6 <_rclc_take_new_data+0xbe>
 8009b58:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8009b5c:	a90a      	add	r1, sp, #40	@ 0x28
 8009b5e:	3010      	adds	r0, #16
 8009b60:	f007 fea0 	bl	80118a4 <rcl_action_take_cancel_response>
 8009b64:	4605      	mov	r5, r0
 8009b66:	2800      	cmp	r0, #0
 8009b68:	f47f af2c 	bne.w	80099c4 <_rclc_take_new_data+0x9c>
 8009b6c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009b70:	6860      	ldr	r0, [r4, #4]
 8009b72:	f008 fab3 	bl	80120dc <rclc_action_find_handle_by_cancel_request_sequence_number>
 8009b76:	4606      	mov	r6, r0
 8009b78:	6860      	ldr	r0, [r4, #4]
 8009b7a:	2e00      	cmp	r6, #0
 8009b7c:	f43f af44 	beq.w	8009a08 <_rclc_take_new_data+0xe0>
 8009b80:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009b82:	2701      	movs	r7, #1
 8009b84:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f43f af3e 	beq.w	8009a08 <_rclc_take_new_data+0xe0>
 8009b8c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009b8e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009b92:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009b96:	f008 fa4d 	bl	8012034 <rclc_action_find_goal_handle_by_uuid>
 8009b9a:	b138      	cbz	r0, 8009bac <_rclc_take_new_data+0x284>
 8009b9c:	6860      	ldr	r0, [r4, #4]
 8009b9e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009ba0:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8009ba4:	3501      	adds	r5, #1
 8009ba6:	42ab      	cmp	r3, r5
 8009ba8:	d8f0      	bhi.n	8009b8c <_rclc_take_new_data+0x264>
 8009baa:	e72d      	b.n	8009a08 <_rclc_take_new_data+0xe0>
 8009bac:	6860      	ldr	r0, [r4, #4]
 8009bae:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009bb0:	3501      	adds	r5, #1
 8009bb2:	42ab      	cmp	r3, r5
 8009bb4:	d8ea      	bhi.n	8009b8c <_rclc_take_new_data+0x264>
 8009bb6:	e727      	b.n	8009a08 <_rclc_take_new_data+0xe0>
 8009bb8:	ab06      	add	r3, sp, #24
 8009bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009bbc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009bc0:	2103      	movs	r1, #3
 8009bc2:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009bc6:	6860      	ldr	r0, [r4, #4]
 8009bc8:	f008 fafe 	bl	80121c8 <rclc_action_server_goal_cancel_reject>
 8009bcc:	e70b      	b.n	80099e6 <_rclc_take_new_data+0xbe>
 8009bce:	ab06      	add	r3, sp, #24
 8009bd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009bd2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009bd6:	2102      	movs	r1, #2
 8009bd8:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009bdc:	6860      	ldr	r0, [r4, #4]
 8009bde:	f008 faf3 	bl	80121c8 <rclc_action_server_goal_cancel_reject>
 8009be2:	e700      	b.n	80099e6 <_rclc_take_new_data+0xbe>
 8009be4:	6860      	ldr	r0, [r4, #4]
 8009be6:	e70a      	b.n	80099fe <_rclc_take_new_data+0xd6>
 8009be8:	6860      	ldr	r0, [r4, #4]
 8009bea:	4631      	mov	r1, r6
 8009bec:	f008 fa0c 	bl	8012008 <rclc_action_remove_used_goal_handle>
 8009bf0:	f000 fdc2 	bl	800a778 <rcutils_reset_error>
 8009bf4:	e6c0      	b.n	8009978 <_rclc_take_new_data+0x50>
 8009bf6:	2501      	movs	r5, #1
 8009bf8:	e6be      	b.n	8009978 <_rclc_take_new_data+0x50>
 8009bfa:	bf00      	nop

08009bfc <rclc_executor_trigger_any>:
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	b370      	cbz	r0, 8009c5e <rclc_executor_trigger_any+0x62>
 8009c00:	b379      	cbz	r1, 8009c62 <rclc_executor_trigger_any+0x66>
 8009c02:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8009c06:	2200      	movs	r2, #0
 8009c08:	b350      	cbz	r0, 8009c60 <rclc_executor_trigger_any+0x64>
 8009c0a:	b430      	push	{r4, r5}
 8009c0c:	f893 c000 	ldrb.w	ip, [r3]
 8009c10:	f1bc 0f08 	cmp.w	ip, #8
 8009c14:	d017      	beq.n	8009c46 <rclc_executor_trigger_any+0x4a>
 8009c16:	f1bc 0f09 	cmp.w	ip, #9
 8009c1a:	d00d      	beq.n	8009c38 <rclc_executor_trigger_any+0x3c>
 8009c1c:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8009c20:	b940      	cbnz	r0, 8009c34 <rclc_executor_trigger_any+0x38>
 8009c22:	3201      	adds	r2, #1
 8009c24:	4291      	cmp	r1, r2
 8009c26:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009c2a:	d003      	beq.n	8009c34 <rclc_executor_trigger_any+0x38>
 8009c2c:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d1eb      	bne.n	8009c0c <rclc_executor_trigger_any+0x10>
 8009c34:	bc30      	pop	{r4, r5}
 8009c36:	4770      	bx	lr
 8009c38:	685c      	ldr	r4, [r3, #4]
 8009c3a:	6a25      	ldr	r5, [r4, #32]
 8009c3c:	2d00      	cmp	r5, #0
 8009c3e:	d1f9      	bne.n	8009c34 <rclc_executor_trigger_any+0x38>
 8009c40:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8009c44:	e7ec      	b.n	8009c20 <rclc_executor_trigger_any+0x24>
 8009c46:	685c      	ldr	r4, [r3, #4]
 8009c48:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8009c4a:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8009c4e:	d1f1      	bne.n	8009c34 <rclc_executor_trigger_any+0x38>
 8009c50:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d1ed      	bne.n	8009c34 <rclc_executor_trigger_any+0x38>
 8009c58:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8009c5c:	e7e0      	b.n	8009c20 <rclc_executor_trigger_any+0x24>
 8009c5e:	4770      	bx	lr
 8009c60:	4770      	bx	lr
 8009c62:	4608      	mov	r0, r1
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop

08009c68 <_rclc_execute>:
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	f000 80dc 	beq.w	8009e26 <_rclc_execute+0x1be>
 8009c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c70:	7843      	ldrb	r3, [r0, #1]
 8009c72:	b087      	sub	sp, #28
 8009c74:	4604      	mov	r4, r0
 8009c76:	b123      	cbz	r3, 8009c82 <_rclc_execute+0x1a>
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d01c      	beq.n	8009cb6 <_rclc_execute+0x4e>
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	b007      	add	sp, #28
 8009c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c82:	7803      	ldrb	r3, [r0, #0]
 8009c84:	2b08      	cmp	r3, #8
 8009c86:	f000 80a0 	beq.w	8009dca <_rclc_execute+0x162>
 8009c8a:	2b09      	cmp	r3, #9
 8009c8c:	d024      	beq.n	8009cd8 <_rclc_execute+0x70>
 8009c8e:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8009c92:	2800      	cmp	r0, #0
 8009c94:	d0f2      	beq.n	8009c7c <_rclc_execute+0x14>
 8009c96:	2b0a      	cmp	r3, #10
 8009c98:	f200 815a 	bhi.w	8009f50 <_rclc_execute+0x2e8>
 8009c9c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009ca0:	008e006f 	.word	0x008e006f
 8009ca4:	006f007c 	.word	0x006f007c
 8009ca8:	00590073 	.word	0x00590073
 8009cac:	00590059 	.word	0x00590059
 8009cb0:	01580158 	.word	0x01580158
 8009cb4:	0079      	.short	0x0079
 8009cb6:	7803      	ldrb	r3, [r0, #0]
 8009cb8:	2b0a      	cmp	r3, #10
 8009cba:	f200 8149 	bhi.w	8009f50 <_rclc_execute+0x2e8>
 8009cbe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009cc2:	00f9      	.short	0x00f9
 8009cc4:	006b007b 	.word	0x006b007b
 8009cc8:	0062005e 	.word	0x0062005e
 8009ccc:	00480048 	.word	0x00480048
 8009cd0:	01000048 	.word	0x01000048
 8009cd4:	00680102 	.word	0x00680102
 8009cd8:	6840      	ldr	r0, [r0, #4]
 8009cda:	6a02      	ldr	r2, [r0, #32]
 8009cdc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009ce0:	2a00      	cmp	r2, #0
 8009ce2:	f040 80f3 	bne.w	8009ecc <_rclc_execute+0x264>
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d0c8      	beq.n	8009c7c <_rclc_execute+0x14>
 8009cea:	e003      	b.n	8009cf4 <_rclc_execute+0x8c>
 8009cec:	6858      	ldr	r0, [r3, #4]
 8009cee:	f008 f98b 	bl	8012008 <rclc_action_remove_used_goal_handle>
 8009cf2:	6860      	ldr	r0, [r4, #4]
 8009cf4:	f008 f9c2 	bl	801207c <rclc_action_find_first_terminated_handle>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	4601      	mov	r1, r0
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	d1f5      	bne.n	8009cec <_rclc_execute+0x84>
 8009d00:	6860      	ldr	r0, [r4, #4]
 8009d02:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 8009d06:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f000 80eb 	beq.w	8009ee6 <_rclc_execute+0x27e>
 8009d10:	f241 0604 	movw	r6, #4100	@ 0x1004
 8009d14:	2701      	movs	r7, #1
 8009d16:	e007      	b.n	8009d28 <_rclc_execute+0xc0>
 8009d18:	4628      	mov	r0, r5
 8009d1a:	f008 fa09 	bl	8012130 <rclc_action_server_response_goal_request>
 8009d1e:	6860      	ldr	r0, [r4, #4]
 8009d20:	4629      	mov	r1, r5
 8009d22:	f008 f971 	bl	8012008 <rclc_action_remove_used_goal_handle>
 8009d26:	6860      	ldr	r0, [r4, #4]
 8009d28:	2100      	movs	r1, #0
 8009d2a:	f008 f99b 	bl	8012064 <rclc_action_find_first_handle_by_status>
 8009d2e:	4605      	mov	r5, r0
 8009d30:	2800      	cmp	r0, #0
 8009d32:	f000 80d5 	beq.w	8009ee0 <_rclc_execute+0x278>
 8009d36:	6863      	ldr	r3, [r4, #4]
 8009d38:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	4798      	blx	r3
 8009d3e:	42b0      	cmp	r0, r6
 8009d40:	f04f 0100 	mov.w	r1, #0
 8009d44:	d1e8      	bne.n	8009d18 <_rclc_execute+0xb0>
 8009d46:	2101      	movs	r1, #1
 8009d48:	4628      	mov	r0, r5
 8009d4a:	f008 f9f1 	bl	8012130 <rclc_action_server_response_goal_request>
 8009d4e:	722f      	strb	r7, [r5, #8]
 8009d50:	e7e9      	b.n	8009d26 <_rclc_execute+0xbe>
 8009d52:	2b06      	cmp	r3, #6
 8009d54:	68a0      	ldr	r0, [r4, #8]
 8009d56:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8009d58:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8009d5a:	f000 80bb 	beq.w	8009ed4 <_rclc_execute+0x26c>
 8009d5e:	2b07      	cmp	r3, #7
 8009d60:	f000 80f1 	beq.w	8009f46 <_rclc_execute+0x2de>
 8009d64:	47b0      	blx	r6
 8009d66:	f104 0510 	add.w	r5, r4, #16
 8009d6a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009d6c:	6860      	ldr	r0, [r4, #4]
 8009d6e:	4629      	mov	r1, r5
 8009d70:	f006 f8ce 	bl	800ff10 <rcl_send_response>
 8009d74:	2802      	cmp	r0, #2
 8009d76:	d117      	bne.n	8009da8 <_rclc_execute+0x140>
 8009d78:	f000 fcfe 	bl	800a778 <rcutils_reset_error>
 8009d7c:	e77e      	b.n	8009c7c <_rclc_execute+0x14>
 8009d7e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009d80:	68a0      	ldr	r0, [r4, #8]
 8009d82:	4798      	blx	r3
 8009d84:	e77a      	b.n	8009c7c <_rclc_execute+0x14>
 8009d86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009d88:	68a0      	ldr	r0, [r4, #8]
 8009d8a:	f104 0110 	add.w	r1, r4, #16
 8009d8e:	4798      	blx	r3
 8009d90:	e774      	b.n	8009c7c <_rclc_execute+0x14>
 8009d92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009d94:	4798      	blx	r3
 8009d96:	e771      	b.n	8009c7c <_rclc_execute+0x14>
 8009d98:	6860      	ldr	r0, [r4, #4]
 8009d9a:	f006 fd81 	bl	80108a0 <rcl_timer_call>
 8009d9e:	f240 3321 	movw	r3, #801	@ 0x321
 8009da2:	4298      	cmp	r0, r3
 8009da4:	f43f af6a 	beq.w	8009c7c <_rclc_execute+0x14>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	f43f af68 	beq.w	8009c7e <_rclc_execute+0x16>
 8009dae:	9005      	str	r0, [sp, #20]
 8009db0:	f000 fce2 	bl	800a778 <rcutils_reset_error>
 8009db4:	9805      	ldr	r0, [sp, #20]
 8009db6:	e762      	b.n	8009c7e <_rclc_execute+0x16>
 8009db8:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8009dbc:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d0e4      	beq.n	8009d8e <_rclc_execute+0x126>
 8009dc4:	68a0      	ldr	r0, [r4, #8]
 8009dc6:	4798      	blx	r3
 8009dc8:	e758      	b.n	8009c7c <_rclc_execute+0x14>
 8009dca:	6840      	ldr	r0, [r0, #4]
 8009dcc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009dce:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 8009dd2:	d107      	bne.n	8009de4 <_rclc_execute+0x17c>
 8009dd4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009dd8:	b923      	cbnz	r3, 8009de4 <_rclc_execute+0x17c>
 8009dda:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f43f af4c 	beq.w	8009c7c <_rclc_execute+0x14>
 8009de4:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009de8:	b303      	cbz	r3, 8009e2c <_rclc_execute+0x1c4>
 8009dea:	2600      	movs	r6, #0
 8009dec:	2701      	movs	r7, #1
 8009dee:	e004      	b.n	8009dfa <_rclc_execute+0x192>
 8009df0:	f008 f8d4 	bl	8011f9c <rclc_action_send_result_request>
 8009df4:	b990      	cbnz	r0, 8009e1c <_rclc_execute+0x1b4>
 8009df6:	722f      	strb	r7, [r5, #8]
 8009df8:	6860      	ldr	r0, [r4, #4]
 8009dfa:	f008 f981 	bl	8012100 <rclc_action_find_first_handle_with_goal_response>
 8009dfe:	4605      	mov	r5, r0
 8009e00:	b198      	cbz	r0, 8009e2a <_rclc_execute+0x1c2>
 8009e02:	6863      	ldr	r3, [r4, #4]
 8009e04:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009e06:	699b      	ldr	r3, [r3, #24]
 8009e08:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8009e0c:	f885 6020 	strb.w	r6, [r5, #32]
 8009e10:	4798      	blx	r3
 8009e12:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8009e16:	4628      	mov	r0, r5
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1e9      	bne.n	8009df0 <_rclc_execute+0x188>
 8009e1c:	6860      	ldr	r0, [r4, #4]
 8009e1e:	4629      	mov	r1, r5
 8009e20:	f008 f8f2 	bl	8012008 <rclc_action_remove_used_goal_handle>
 8009e24:	e7e8      	b.n	8009df8 <_rclc_execute+0x190>
 8009e26:	200b      	movs	r0, #11
 8009e28:	4770      	bx	lr
 8009e2a:	6860      	ldr	r0, [r4, #4]
 8009e2c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009e30:	b18b      	cbz	r3, 8009e56 <_rclc_execute+0x1ee>
 8009e32:	68c5      	ldr	r5, [r0, #12]
 8009e34:	b32d      	cbz	r5, 8009e82 <_rclc_execute+0x21a>
 8009e36:	2600      	movs	r6, #0
 8009e38:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8009e3c:	b143      	cbz	r3, 8009e50 <_rclc_execute+0x1e8>
 8009e3e:	69c3      	ldr	r3, [r0, #28]
 8009e40:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8009e44:	b123      	cbz	r3, 8009e50 <_rclc_execute+0x1e8>
 8009e46:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009e48:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	4798      	blx	r3
 8009e4e:	6860      	ldr	r0, [r4, #4]
 8009e50:	682d      	ldr	r5, [r5, #0]
 8009e52:	2d00      	cmp	r5, #0
 8009e54:	d1f0      	bne.n	8009e38 <_rclc_execute+0x1d0>
 8009e56:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009e5a:	b193      	cbz	r3, 8009e82 <_rclc_execute+0x21a>
 8009e5c:	68c5      	ldr	r5, [r0, #12]
 8009e5e:	b185      	cbz	r5, 8009e82 <_rclc_execute+0x21a>
 8009e60:	2600      	movs	r6, #0
 8009e62:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8009e66:	b14b      	cbz	r3, 8009e7c <_rclc_execute+0x214>
 8009e68:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009e6a:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8009e6e:	b12b      	cbz	r3, 8009e7c <_rclc_execute+0x214>
 8009e70:	4628      	mov	r0, r5
 8009e72:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009e74:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8009e78:	4798      	blx	r3
 8009e7a:	6860      	ldr	r0, [r4, #4]
 8009e7c:	682d      	ldr	r5, [r5, #0]
 8009e7e:	2d00      	cmp	r5, #0
 8009e80:	d1ef      	bne.n	8009e62 <_rclc_execute+0x1fa>
 8009e82:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f43f aef8 	beq.w	8009c7c <_rclc_execute+0x14>
 8009e8c:	2700      	movs	r7, #0
 8009e8e:	e00b      	b.n	8009ea8 <_rclc_execute+0x240>
 8009e90:	6863      	ldr	r3, [r4, #4]
 8009e92:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009e94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009e96:	6a1e      	ldr	r6, [r3, #32]
 8009e98:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8009e9c:	47b0      	blx	r6
 8009e9e:	6860      	ldr	r0, [r4, #4]
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	f008 f8b1 	bl	8012008 <rclc_action_remove_used_goal_handle>
 8009ea6:	6860      	ldr	r0, [r4, #4]
 8009ea8:	f008 f936 	bl	8012118 <rclc_action_find_first_handle_with_result_response>
 8009eac:	4605      	mov	r5, r0
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d1ee      	bne.n	8009e90 <_rclc_execute+0x228>
 8009eb2:	e6e3      	b.n	8009c7c <_rclc_execute+0x14>
 8009eb4:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8009eb8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	f43f af61 	beq.w	8009d82 <_rclc_execute+0x11a>
 8009ec0:	e75e      	b.n	8009d80 <_rclc_execute+0x118>
 8009ec2:	6840      	ldr	r0, [r0, #4]
 8009ec4:	e78e      	b.n	8009de4 <_rclc_execute+0x17c>
 8009ec6:	6840      	ldr	r0, [r0, #4]
 8009ec8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f43f af1a 	beq.w	8009d06 <_rclc_execute+0x9e>
 8009ed2:	e70f      	b.n	8009cf4 <_rclc_execute+0x8c>
 8009ed4:	f104 0510 	add.w	r5, r4, #16
 8009ed8:	460a      	mov	r2, r1
 8009eda:	4629      	mov	r1, r5
 8009edc:	47b0      	blx	r6
 8009ede:	e744      	b.n	8009d6a <_rclc_execute+0x102>
 8009ee0:	6860      	ldr	r0, [r4, #4]
 8009ee2:	f880 5020 	strb.w	r5, [r0, #32]
 8009ee6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	f43f aec6 	beq.w	8009c7c <_rclc_execute+0x14>
 8009ef0:	68c5      	ldr	r5, [r0, #12]
 8009ef2:	b325      	cbz	r5, 8009f3e <_rclc_execute+0x2d6>
 8009ef4:	2602      	movs	r6, #2
 8009ef6:	e001      	b.n	8009efc <_rclc_execute+0x294>
 8009ef8:	682d      	ldr	r5, [r5, #0]
 8009efa:	b305      	cbz	r5, 8009f3e <_rclc_execute+0x2d6>
 8009efc:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8009f00:	2b03      	cmp	r3, #3
 8009f02:	d1f9      	bne.n	8009ef8 <_rclc_execute+0x290>
 8009f04:	69c3      	ldr	r3, [r0, #28]
 8009f06:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009f08:	4628      	mov	r0, r5
 8009f0a:	4798      	blx	r3
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8009f12:	4628      	mov	r0, r5
 8009f14:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009f18:	b11b      	cbz	r3, 8009f22 <_rclc_execute+0x2ba>
 8009f1a:	f008 f929 	bl	8012170 <rclc_action_server_goal_cancel_accept>
 8009f1e:	6860      	ldr	r0, [r4, #4]
 8009f20:	e7ea      	b.n	8009ef8 <_rclc_execute+0x290>
 8009f22:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8009f24:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009f28:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8009f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f30:	6860      	ldr	r0, [r4, #4]
 8009f32:	2101      	movs	r1, #1
 8009f34:	f008 f948 	bl	80121c8 <rclc_action_server_goal_cancel_reject>
 8009f38:	722e      	strb	r6, [r5, #8]
 8009f3a:	6860      	ldr	r0, [r4, #4]
 8009f3c:	e7dc      	b.n	8009ef8 <_rclc_execute+0x290>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009f44:	e69a      	b.n	8009c7c <_rclc_execute+0x14>
 8009f46:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009f48:	47b0      	blx	r6
 8009f4a:	f104 0510 	add.w	r5, r4, #16
 8009f4e:	e70c      	b.n	8009d6a <_rclc_execute+0x102>
 8009f50:	2001      	movs	r0, #1
 8009f52:	e694      	b.n	8009c7e <_rclc_execute+0x16>

08009f54 <rclc_executor_get_zero_initialized_executor>:
 8009f54:	b510      	push	{r4, lr}
 8009f56:	4903      	ldr	r1, [pc, #12]	@ (8009f64 <rclc_executor_get_zero_initialized_executor+0x10>)
 8009f58:	4604      	mov	r4, r0
 8009f5a:	2290      	movs	r2, #144	@ 0x90
 8009f5c:	f00e f83f 	bl	8017fde <memcpy>
 8009f60:	4620      	mov	r0, r4
 8009f62:	bd10      	pop	{r4, pc}
 8009f64:	08019958 	.word	0x08019958

08009f68 <rclc_executor_init>:
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	d05a      	beq.n	800a022 <rclc_executor_init+0xba>
 8009f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f70:	460d      	mov	r5, r1
 8009f72:	b0b2      	sub	sp, #200	@ 0xc8
 8009f74:	2900      	cmp	r1, #0
 8009f76:	d050      	beq.n	800a01a <rclc_executor_init+0xb2>
 8009f78:	4604      	mov	r4, r0
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	4616      	mov	r6, r2
 8009f7e:	461f      	mov	r7, r3
 8009f80:	f000 fbce 	bl	800a720 <rcutils_allocator_is_valid>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d048      	beq.n	800a01a <rclc_executor_init+0xb2>
 8009f88:	2e00      	cmp	r6, #0
 8009f8a:	d046      	beq.n	800a01a <rclc_executor_init+0xb2>
 8009f8c:	492a      	ldr	r1, [pc, #168]	@ (800a038 <rclc_executor_init+0xd0>)
 8009f8e:	2290      	movs	r2, #144	@ 0x90
 8009f90:	a80e      	add	r0, sp, #56	@ 0x38
 8009f92:	f00e f824 	bl	8017fde <memcpy>
 8009f96:	a90e      	add	r1, sp, #56	@ 0x38
 8009f98:	2290      	movs	r2, #144	@ 0x90
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	f00e f81f 	bl	8017fde <memcpy>
 8009fa0:	6065      	str	r5, [r4, #4]
 8009fa2:	4668      	mov	r0, sp
 8009fa4:	60e6      	str	r6, [r4, #12]
 8009fa6:	466d      	mov	r5, sp
 8009fa8:	f006 fd6c 	bl	8010a84 <rcl_get_zero_initialized_wait_set>
 8009fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fae:	f104 0c18 	add.w	ip, r4, #24
 8009fb2:	f8d7 8000 	ldr.w	r8, [r7]
 8009fb6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fc2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009fc6:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 800a030 <rclc_executor_init+0xc8>
 8009fca:	682b      	ldr	r3, [r5, #0]
 8009fcc:	f8cc 3000 	str.w	r3, [ip]
 8009fd0:	6939      	ldr	r1, [r7, #16]
 8009fd2:	6167      	str	r7, [r4, #20]
 8009fd4:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 8009fd8:	01b0      	lsls	r0, r6, #6
 8009fda:	47c0      	blx	r8
 8009fdc:	60a0      	str	r0, [r4, #8]
 8009fde:	b310      	cbz	r0, 800a026 <rclc_executor_init+0xbe>
 8009fe0:	2500      	movs	r5, #0
 8009fe2:	e000      	b.n	8009fe6 <rclc_executor_init+0x7e>
 8009fe4:	68a0      	ldr	r0, [r4, #8]
 8009fe6:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 8009fea:	4631      	mov	r1, r6
 8009fec:	3501      	adds	r5, #1
 8009fee:	f000 fa25 	bl	800a43c <rclc_executor_handle_init>
 8009ff2:	42ae      	cmp	r6, r5
 8009ff4:	d1f6      	bne.n	8009fe4 <rclc_executor_init+0x7c>
 8009ff6:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 8009ffa:	f000 fa15 	bl	800a428 <rclc_executor_handle_counters_zero_init>
 8009ffe:	490f      	ldr	r1, [pc, #60]	@ (800a03c <rclc_executor_init+0xd4>)
 800a000:	68a2      	ldr	r2, [r4, #8]
 800a002:	2300      	movs	r3, #0
 800a004:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 800a008:	b12a      	cbz	r2, 800a016 <rclc_executor_init+0xae>
 800a00a:	6962      	ldr	r2, [r4, #20]
 800a00c:	b11a      	cbz	r2, 800a016 <rclc_executor_init+0xae>
 800a00e:	68e2      	ldr	r2, [r4, #12]
 800a010:	b10a      	cbz	r2, 800a016 <rclc_executor_init+0xae>
 800a012:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 800a016:	2000      	movs	r0, #0
 800a018:	e000      	b.n	800a01c <rclc_executor_init+0xb4>
 800a01a:	200b      	movs	r0, #11
 800a01c:	b032      	add	sp, #200	@ 0xc8
 800a01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a022:	200b      	movs	r0, #11
 800a024:	4770      	bx	lr
 800a026:	200a      	movs	r0, #10
 800a028:	e7f8      	b.n	800a01c <rclc_executor_init+0xb4>
 800a02a:	bf00      	nop
 800a02c:	f3af 8000 	nop.w
 800a030:	3b9aca00 	.word	0x3b9aca00
 800a034:	00000000 	.word	0x00000000
 800a038:	08019958 	.word	0x08019958
 800a03c:	08009bfd 	.word	0x08009bfd

0800a040 <rclc_executor_add_subscription>:
 800a040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a042:	f89d e018 	ldrb.w	lr, [sp, #24]
 800a046:	b338      	cbz	r0, 800a098 <rclc_executor_add_subscription+0x58>
 800a048:	b331      	cbz	r1, 800a098 <rclc_executor_add_subscription+0x58>
 800a04a:	b32a      	cbz	r2, 800a098 <rclc_executor_add_subscription+0x58>
 800a04c:	b323      	cbz	r3, 800a098 <rclc_executor_add_subscription+0x58>
 800a04e:	4604      	mov	r4, r0
 800a050:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 800a054:	42a8      	cmp	r0, r5
 800a056:	d301      	bcc.n	800a05c <rclc_executor_add_subscription+0x1c>
 800a058:	2001      	movs	r0, #1
 800a05a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a05c:	68a6      	ldr	r6, [r4, #8]
 800a05e:	0187      	lsls	r7, r0, #6
 800a060:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800a064:	2500      	movs	r5, #0
 800a066:	55f5      	strb	r5, [r6, r7]
 800a068:	3001      	adds	r0, #1
 800a06a:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800a06e:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800a072:	2301      	movs	r3, #1
 800a074:	f104 0518 	add.w	r5, r4, #24
 800a078:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800a07c:	f88c e001 	strb.w	lr, [ip, #1]
 800a080:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800a084:	6120      	str	r0, [r4, #16]
 800a086:	4628      	mov	r0, r5
 800a088:	f006 fd10 	bl	8010aac <rcl_wait_set_is_valid>
 800a08c:	b930      	cbnz	r0, 800a09c <rclc_executor_add_subscription+0x5c>
 800a08e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a090:	3301      	adds	r3, #1
 800a092:	2000      	movs	r0, #0
 800a094:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800a096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a098:	200b      	movs	r0, #11
 800a09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a09c:	4628      	mov	r0, r5
 800a09e:	f006 fd0b 	bl	8010ab8 <rcl_wait_set_fini>
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	d0f3      	beq.n	800a08e <rclc_executor_add_subscription+0x4e>
 800a0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a0a8 <rclc_executor_add_timer>:
 800a0a8:	b300      	cbz	r0, 800a0ec <rclc_executor_add_timer+0x44>
 800a0aa:	b1f9      	cbz	r1, 800a0ec <rclc_executor_add_timer+0x44>
 800a0ac:	b538      	push	{r3, r4, r5, lr}
 800a0ae:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	d301      	bcc.n	800a0bc <rclc_executor_add_timer+0x14>
 800a0b8:	2001      	movs	r0, #1
 800a0ba:	bd38      	pop	{r3, r4, r5, pc}
 800a0bc:	6880      	ldr	r0, [r0, #8]
 800a0be:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800a0c2:	019d      	lsls	r5, r3, #6
 800a0c4:	6051      	str	r1, [r2, #4]
 800a0c6:	2102      	movs	r1, #2
 800a0c8:	5341      	strh	r1, [r0, r5]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	f104 0518 	add.w	r5, r4, #24
 800a0d4:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800a0d6:	8711      	strh	r1, [r2, #56]	@ 0x38
 800a0d8:	4628      	mov	r0, r5
 800a0da:	6123      	str	r3, [r4, #16]
 800a0dc:	f006 fce6 	bl	8010aac <rcl_wait_set_is_valid>
 800a0e0:	b930      	cbnz	r0, 800a0f0 <rclc_executor_add_timer+0x48>
 800a0e2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	6523      	str	r3, [r4, #80]	@ 0x50
 800a0ea:	bd38      	pop	{r3, r4, r5, pc}
 800a0ec:	200b      	movs	r0, #11
 800a0ee:	4770      	bx	lr
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f006 fce1 	bl	8010ab8 <rcl_wait_set_fini>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	d0f3      	beq.n	800a0e2 <rclc_executor_add_timer+0x3a>
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}

0800a0fc <rclc_executor_prepare>:
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d044      	beq.n	800a18a <rclc_executor_prepare+0x8e>
 800a100:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a102:	f100 0518 	add.w	r5, r0, #24
 800a106:	b09b      	sub	sp, #108	@ 0x6c
 800a108:	4604      	mov	r4, r0
 800a10a:	4628      	mov	r0, r5
 800a10c:	f006 fcce 	bl	8010aac <rcl_wait_set_is_valid>
 800a110:	b110      	cbz	r0, 800a118 <rclc_executor_prepare+0x1c>
 800a112:	2000      	movs	r0, #0
 800a114:	b01b      	add	sp, #108	@ 0x6c
 800a116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a118:	4628      	mov	r0, r5
 800a11a:	f006 fccd 	bl	8010ab8 <rcl_wait_set_fini>
 800a11e:	2800      	cmp	r0, #0
 800a120:	d130      	bne.n	800a184 <rclc_executor_prepare+0x88>
 800a122:	a80c      	add	r0, sp, #48	@ 0x30
 800a124:	f006 fcae 	bl	8010a84 <rcl_get_zero_initialized_wait_set>
 800a128:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800a12c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a130:	46ae      	mov	lr, r5
 800a132:	6967      	ldr	r7, [r4, #20]
 800a134:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a138:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a13c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a140:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a144:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a148:	f8dc 3000 	ldr.w	r3, [ip]
 800a14c:	f8ce 3000 	str.w	r3, [lr]
 800a150:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a152:	ae04      	add	r6, sp, #16
 800a154:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	6862      	ldr	r2, [r4, #4]
 800a15a:	6033      	str	r3, [r6, #0]
 800a15c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800a15e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800a160:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800a164:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800a168:	e9cd 2100 	strd	r2, r1, [sp]
 800a16c:	4628      	mov	r0, r5
 800a16e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a170:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800a172:	f006 ffd1 	bl	8011118 <rcl_wait_set_init>
 800a176:	2800      	cmp	r0, #0
 800a178:	d0cc      	beq.n	800a114 <rclc_executor_prepare+0x18>
 800a17a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a17c:	f000 fafc 	bl	800a778 <rcutils_reset_error>
 800a180:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a182:	e7c7      	b.n	800a114 <rclc_executor_prepare+0x18>
 800a184:	f000 faf8 	bl	800a778 <rcutils_reset_error>
 800a188:	e7cb      	b.n	800a122 <rclc_executor_prepare+0x26>
 800a18a:	200b      	movs	r0, #11
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop

0800a190 <rclc_executor_spin_some>:
 800a190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a194:	b083      	sub	sp, #12
 800a196:	2800      	cmp	r0, #0
 800a198:	f000 8091 	beq.w	800a2be <rclc_executor_spin_some+0x12e>
 800a19c:	4604      	mov	r4, r0
 800a19e:	6840      	ldr	r0, [r0, #4]
 800a1a0:	4690      	mov	r8, r2
 800a1a2:	4699      	mov	r9, r3
 800a1a4:	f005 f978 	bl	800f498 <rcl_context_is_valid>
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d037      	beq.n	800a21c <rclc_executor_spin_some+0x8c>
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	f104 0718 	add.w	r7, r4, #24
 800a1b2:	f7ff ffa3 	bl	800a0fc <rclc_executor_prepare>
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	f006 fd62 	bl	8010c80 <rcl_wait_set_clear>
 800a1bc:	4606      	mov	r6, r0
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d177      	bne.n	800a2b2 <rclc_executor_spin_some+0x122>
 800a1c2:	68e3      	ldr	r3, [r4, #12]
 800a1c4:	4605      	mov	r5, r0
 800a1c6:	b1eb      	cbz	r3, 800a204 <rclc_executor_spin_some+0x74>
 800a1c8:	68a1      	ldr	r1, [r4, #8]
 800a1ca:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 800a1ce:	01aa      	lsls	r2, r5, #6
 800a1d0:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800a1d4:	b1b3      	cbz	r3, 800a204 <rclc_executor_spin_some+0x74>
 800a1d6:	5c8b      	ldrb	r3, [r1, r2]
 800a1d8:	2b0a      	cmp	r3, #10
 800a1da:	d81f      	bhi.n	800a21c <rclc_executor_spin_some+0x8c>
 800a1dc:	e8df f003 	tbb	[pc, r3]
 800a1e0:	253e3434 	.word	0x253e3434
 800a1e4:	06060625 	.word	0x06060625
 800a1e8:	525d      	.short	0x525d
 800a1ea:	48          	.byte	0x48
 800a1eb:	00          	.byte	0x00
 800a1ec:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a1f0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a1f4:	4638      	mov	r0, r7
 800a1f6:	f007 f899 	bl	801132c <rcl_wait_set_add_service>
 800a1fa:	b9f8      	cbnz	r0, 800a23c <rclc_executor_spin_some+0xac>
 800a1fc:	68e3      	ldr	r3, [r4, #12]
 800a1fe:	3501      	adds	r5, #1
 800a200:	42ab      	cmp	r3, r5
 800a202:	d8e1      	bhi.n	800a1c8 <rclc_executor_spin_some+0x38>
 800a204:	4642      	mov	r2, r8
 800a206:	464b      	mov	r3, r9
 800a208:	4638      	mov	r0, r7
 800a20a:	f007 f8bd 	bl	8011388 <rcl_wait>
 800a20e:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 800a212:	2d00      	cmp	r5, #0
 800a214:	f000 80ab 	beq.w	800a36e <rclc_executor_spin_some+0x1de>
 800a218:	2d01      	cmp	r5, #1
 800a21a:	d055      	beq.n	800a2c8 <rclc_executor_spin_some+0x138>
 800a21c:	f000 faac 	bl	800a778 <rcutils_reset_error>
 800a220:	2601      	movs	r6, #1
 800a222:	4630      	mov	r0, r6
 800a224:	b003      	add	sp, #12
 800a226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a22a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a22e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a232:	4638      	mov	r0, r7
 800a234:	f007 f84e 	bl	80112d4 <rcl_wait_set_add_client>
 800a238:	2800      	cmp	r0, #0
 800a23a:	d0df      	beq.n	800a1fc <rclc_executor_spin_some+0x6c>
 800a23c:	9001      	str	r0, [sp, #4]
 800a23e:	f000 fa9b 	bl	800a778 <rcutils_reset_error>
 800a242:	9801      	ldr	r0, [sp, #4]
 800a244:	4606      	mov	r6, r0
 800a246:	e7ec      	b.n	800a222 <rclc_executor_spin_some+0x92>
 800a248:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a24c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a250:	4638      	mov	r0, r7
 800a252:	f006 fce9 	bl	8010c28 <rcl_wait_set_add_subscription>
 800a256:	2800      	cmp	r0, #0
 800a258:	d0d0      	beq.n	800a1fc <rclc_executor_spin_some+0x6c>
 800a25a:	e7ef      	b.n	800a23c <rclc_executor_spin_some+0xac>
 800a25c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a260:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a264:	4638      	mov	r0, r7
 800a266:	f007 f805 	bl	8011274 <rcl_wait_set_add_timer>
 800a26a:	2800      	cmp	r0, #0
 800a26c:	d0c6      	beq.n	800a1fc <rclc_executor_spin_some+0x6c>
 800a26e:	e7e5      	b.n	800a23c <rclc_executor_spin_some+0xac>
 800a270:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a274:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a278:	4638      	mov	r0, r7
 800a27a:	f006 ffcf 	bl	801121c <rcl_wait_set_add_guard_condition>
 800a27e:	2800      	cmp	r0, #0
 800a280:	d0bc      	beq.n	800a1fc <rclc_executor_spin_some+0x6c>
 800a282:	e7db      	b.n	800a23c <rclc_executor_spin_some+0xac>
 800a284:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a288:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a28c:	3110      	adds	r1, #16
 800a28e:	4638      	mov	r0, r7
 800a290:	f007 fd98 	bl	8011dc4 <rcl_action_wait_set_add_action_server>
 800a294:	2800      	cmp	r0, #0
 800a296:	d0b1      	beq.n	800a1fc <rclc_executor_spin_some+0x6c>
 800a298:	e7d0      	b.n	800a23c <rclc_executor_spin_some+0xac>
 800a29a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a29e:	2300      	movs	r3, #0
 800a2a0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a2a4:	3110      	adds	r1, #16
 800a2a6:	4638      	mov	r0, r7
 800a2a8:	f007 fb7a 	bl	80119a0 <rcl_action_wait_set_add_action_client>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d0a5      	beq.n	800a1fc <rclc_executor_spin_some+0x6c>
 800a2b0:	e7c4      	b.n	800a23c <rclc_executor_spin_some+0xac>
 800a2b2:	f000 fa61 	bl	800a778 <rcutils_reset_error>
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	b003      	add	sp, #12
 800a2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2be:	260b      	movs	r6, #11
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	b003      	add	sp, #12
 800a2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c8:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800a2cc:	4663      	mov	r3, ip
 800a2ce:	4615      	mov	r5, r2
 800a2d0:	b1ca      	cbz	r2, 800a306 <rclc_executor_spin_some+0x176>
 800a2d2:	2500      	movs	r5, #0
 800a2d4:	46a8      	mov	r8, r5
 800a2d6:	f240 1991 	movw	r9, #401	@ 0x191
 800a2da:	e00c      	b.n	800a2f6 <rclc_executor_spin_some+0x166>
 800a2dc:	f7ff fad6 	bl	800988c <_rclc_check_for_new_data>
 800a2e0:	f108 0801 	add.w	r8, r8, #1
 800a2e4:	4605      	mov	r5, r0
 800a2e6:	b108      	cbz	r0, 800a2ec <rclc_executor_spin_some+0x15c>
 800a2e8:	4548      	cmp	r0, r9
 800a2ea:	d13e      	bne.n	800a36a <rclc_executor_spin_some+0x1da>
 800a2ec:	68e2      	ldr	r2, [r4, #12]
 800a2ee:	4590      	cmp	r8, r2
 800a2f0:	f080 808b 	bcs.w	800a40a <rclc_executor_spin_some+0x27a>
 800a2f4:	68a3      	ldr	r3, [r4, #8]
 800a2f6:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800a2fa:	469c      	mov	ip, r3
 800a2fc:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a300:	4639      	mov	r1, r7
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1ea      	bne.n	800a2dc <rclc_executor_spin_some+0x14c>
 800a306:	4611      	mov	r1, r2
 800a308:	4660      	mov	r0, ip
 800a30a:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800a30e:	4798      	blx	r3
 800a310:	b358      	cbz	r0, 800a36a <rclc_executor_spin_some+0x1da>
 800a312:	68e3      	ldr	r3, [r4, #12]
 800a314:	b34b      	cbz	r3, 800a36a <rclc_executor_spin_some+0x1da>
 800a316:	f04f 0800 	mov.w	r8, #0
 800a31a:	f240 1991 	movw	r9, #401	@ 0x191
 800a31e:	e00a      	b.n	800a336 <rclc_executor_spin_some+0x1a6>
 800a320:	f7ff fb02 	bl	8009928 <_rclc_take_new_data>
 800a324:	f108 0801 	add.w	r8, r8, #1
 800a328:	4605      	mov	r5, r0
 800a32a:	b108      	cbz	r0, 800a330 <rclc_executor_spin_some+0x1a0>
 800a32c:	4548      	cmp	r0, r9
 800a32e:	d11c      	bne.n	800a36a <rclc_executor_spin_some+0x1da>
 800a330:	68e3      	ldr	r3, [r4, #12]
 800a332:	4598      	cmp	r8, r3
 800a334:	d26f      	bcs.n	800a416 <rclc_executor_spin_some+0x286>
 800a336:	68a3      	ldr	r3, [r4, #8]
 800a338:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800a33c:	4639      	mov	r1, r7
 800a33e:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800a342:	2a00      	cmp	r2, #0
 800a344:	d1ec      	bne.n	800a320 <rclc_executor_spin_some+0x190>
 800a346:	2700      	movs	r7, #0
 800a348:	e009      	b.n	800a35e <rclc_executor_spin_some+0x1ce>
 800a34a:	f7ff fc8d 	bl	8009c68 <_rclc_execute>
 800a34e:	3701      	adds	r7, #1
 800a350:	4605      	mov	r5, r0
 800a352:	b950      	cbnz	r0, 800a36a <rclc_executor_spin_some+0x1da>
 800a354:	68e3      	ldr	r3, [r4, #12]
 800a356:	429f      	cmp	r7, r3
 800a358:	f4bf af63 	bcs.w	800a222 <rclc_executor_spin_some+0x92>
 800a35c:	68a3      	ldr	r3, [r4, #8]
 800a35e:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 800a362:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a366:	2b00      	cmp	r3, #0
 800a368:	d1ef      	bne.n	800a34a <rclc_executor_spin_some+0x1ba>
 800a36a:	462e      	mov	r6, r5
 800a36c:	e759      	b.n	800a222 <rclc_executor_spin_some+0x92>
 800a36e:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800a372:	4663      	mov	r3, ip
 800a374:	2a00      	cmp	r2, #0
 800a376:	d054      	beq.n	800a422 <rclc_executor_spin_some+0x292>
 800a378:	46a8      	mov	r8, r5
 800a37a:	f240 1991 	movw	r9, #401	@ 0x191
 800a37e:	e00b      	b.n	800a398 <rclc_executor_spin_some+0x208>
 800a380:	f7ff fa84 	bl	800988c <_rclc_check_for_new_data>
 800a384:	f108 0801 	add.w	r8, r8, #1
 800a388:	4605      	mov	r5, r0
 800a38a:	b108      	cbz	r0, 800a390 <rclc_executor_spin_some+0x200>
 800a38c:	4548      	cmp	r0, r9
 800a38e:	d1ec      	bne.n	800a36a <rclc_executor_spin_some+0x1da>
 800a390:	68e2      	ldr	r2, [r4, #12]
 800a392:	4590      	cmp	r8, r2
 800a394:	d23c      	bcs.n	800a410 <rclc_executor_spin_some+0x280>
 800a396:	68a3      	ldr	r3, [r4, #8]
 800a398:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800a39c:	469c      	mov	ip, r3
 800a39e:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a3a2:	4639      	mov	r1, r7
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1eb      	bne.n	800a380 <rclc_executor_spin_some+0x1f0>
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	4660      	mov	r0, ip
 800a3ac:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800a3b0:	4798      	blx	r3
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	d0d9      	beq.n	800a36a <rclc_executor_spin_some+0x1da>
 800a3b6:	68e3      	ldr	r3, [r4, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d0d6      	beq.n	800a36a <rclc_executor_spin_some+0x1da>
 800a3bc:	f04f 0a00 	mov.w	sl, #0
 800a3c0:	f240 1891 	movw	r8, #401	@ 0x191
 800a3c4:	f240 2959 	movw	r9, #601	@ 0x259
 800a3c8:	e013      	b.n	800a3f2 <rclc_executor_spin_some+0x262>
 800a3ca:	f7ff faad 	bl	8009928 <_rclc_take_new_data>
 800a3ce:	b118      	cbz	r0, 800a3d8 <rclc_executor_spin_some+0x248>
 800a3d0:	4540      	cmp	r0, r8
 800a3d2:	d001      	beq.n	800a3d8 <rclc_executor_spin_some+0x248>
 800a3d4:	4548      	cmp	r0, r9
 800a3d6:	d122      	bne.n	800a41e <rclc_executor_spin_some+0x28e>
 800a3d8:	68a0      	ldr	r0, [r4, #8]
 800a3da:	4458      	add	r0, fp
 800a3dc:	f7ff fc44 	bl	8009c68 <_rclc_execute>
 800a3e0:	f10a 0a01 	add.w	sl, sl, #1
 800a3e4:	4605      	mov	r5, r0
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d1bf      	bne.n	800a36a <rclc_executor_spin_some+0x1da>
 800a3ea:	68e3      	ldr	r3, [r4, #12]
 800a3ec:	459a      	cmp	sl, r3
 800a3ee:	f4bf af18 	bcs.w	800a222 <rclc_executor_spin_some+0x92>
 800a3f2:	68a0      	ldr	r0, [r4, #8]
 800a3f4:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800a3f8:	4639      	mov	r1, r7
 800a3fa:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a3fe:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800a402:	2b00      	cmp	r3, #0
 800a404:	d1e1      	bne.n	800a3ca <rclc_executor_spin_some+0x23a>
 800a406:	462e      	mov	r6, r5
 800a408:	e70b      	b.n	800a222 <rclc_executor_spin_some+0x92>
 800a40a:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800a40e:	e77a      	b.n	800a306 <rclc_executor_spin_some+0x176>
 800a410:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800a414:	e7c8      	b.n	800a3a8 <rclc_executor_spin_some+0x218>
 800a416:	2b00      	cmp	r3, #0
 800a418:	d0a7      	beq.n	800a36a <rclc_executor_spin_some+0x1da>
 800a41a:	68a3      	ldr	r3, [r4, #8]
 800a41c:	e793      	b.n	800a346 <rclc_executor_spin_some+0x1b6>
 800a41e:	4606      	mov	r6, r0
 800a420:	e6ff      	b.n	800a222 <rclc_executor_spin_some+0x92>
 800a422:	4615      	mov	r5, r2
 800a424:	e7c0      	b.n	800a3a8 <rclc_executor_spin_some+0x218>
 800a426:	bf00      	nop

0800a428 <rclc_executor_handle_counters_zero_init>:
 800a428:	b130      	cbz	r0, 800a438 <rclc_executor_handle_counters_zero_init+0x10>
 800a42a:	b508      	push	{r3, lr}
 800a42c:	2220      	movs	r2, #32
 800a42e:	2100      	movs	r1, #0
 800a430:	f00d fcfa 	bl	8017e28 <memset>
 800a434:	2000      	movs	r0, #0
 800a436:	bd08      	pop	{r3, pc}
 800a438:	200b      	movs	r0, #11
 800a43a:	4770      	bx	lr

0800a43c <rclc_executor_handle_init>:
 800a43c:	b158      	cbz	r0, 800a456 <rclc_executor_handle_init+0x1a>
 800a43e:	2300      	movs	r3, #0
 800a440:	220b      	movs	r2, #11
 800a442:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a446:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 800a44a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800a44e:	8002      	strh	r2, [r0, #0]
 800a450:	8703      	strh	r3, [r0, #56]	@ 0x38
 800a452:	4618      	mov	r0, r3
 800a454:	4770      	bx	lr
 800a456:	200b      	movs	r0, #11
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop

0800a45c <rclc_support_init>:
 800a45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a460:	b086      	sub	sp, #24
 800a462:	b3b8      	cbz	r0, 800a4d4 <rclc_support_init+0x78>
 800a464:	461c      	mov	r4, r3
 800a466:	b3ab      	cbz	r3, 800a4d4 <rclc_support_init+0x78>
 800a468:	460f      	mov	r7, r1
 800a46a:	4690      	mov	r8, r2
 800a46c:	4606      	mov	r6, r0
 800a46e:	f005 f97d 	bl	800f76c <rcl_get_zero_initialized_init_options>
 800a472:	f104 030c 	add.w	r3, r4, #12
 800a476:	9005      	str	r0, [sp, #20]
 800a478:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a47c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a480:	a805      	add	r0, sp, #20
 800a482:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a486:	f005 f973 	bl	800f770 <rcl_init_options_init>
 800a48a:	4605      	mov	r5, r0
 800a48c:	b9e0      	cbnz	r0, 800a4c8 <rclc_support_init+0x6c>
 800a48e:	ad02      	add	r5, sp, #8
 800a490:	4628      	mov	r0, r5
 800a492:	f004 fffd 	bl	800f490 <rcl_get_zero_initialized_context>
 800a496:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a49a:	4633      	mov	r3, r6
 800a49c:	e886 0003 	stmia.w	r6, {r0, r1}
 800a4a0:	aa05      	add	r2, sp, #20
 800a4a2:	4641      	mov	r1, r8
 800a4a4:	4638      	mov	r0, r7
 800a4a6:	f005 f85d 	bl	800f564 <rcl_init>
 800a4aa:	4605      	mov	r5, r0
 800a4ac:	b9b8      	cbnz	r0, 800a4de <rclc_support_init+0x82>
 800a4ae:	60b4      	str	r4, [r6, #8]
 800a4b0:	4622      	mov	r2, r4
 800a4b2:	f106 010c 	add.w	r1, r6, #12
 800a4b6:	2003      	movs	r0, #3
 800a4b8:	f005 ff3a 	bl	8010330 <rcl_clock_init>
 800a4bc:	4605      	mov	r5, r0
 800a4be:	b970      	cbnz	r0, 800a4de <rclc_support_init+0x82>
 800a4c0:	a805      	add	r0, sp, #20
 800a4c2:	f005 f9b1 	bl	800f828 <rcl_init_options_fini>
 800a4c6:	b108      	cbz	r0, 800a4cc <rclc_support_init+0x70>
 800a4c8:	f000 f956 	bl	800a778 <rcutils_reset_error>
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	b006      	add	sp, #24
 800a4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4d4:	250b      	movs	r5, #11
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	b006      	add	sp, #24
 800a4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4de:	f000 f94b 	bl	800a778 <rcutils_reset_error>
 800a4e2:	a805      	add	r0, sp, #20
 800a4e4:	f005 f9a0 	bl	800f828 <rcl_init_options_fini>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d0ef      	beq.n	800a4cc <rclc_support_init+0x70>
 800a4ec:	e7ec      	b.n	800a4c8 <rclc_support_init+0x6c>
 800a4ee:	bf00      	nop

0800a4f0 <rclc_node_init_default>:
 800a4f0:	b3b8      	cbz	r0, 800a562 <rclc_node_init_default+0x72>
 800a4f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4f6:	460d      	mov	r5, r1
 800a4f8:	b0a1      	sub	sp, #132	@ 0x84
 800a4fa:	b329      	cbz	r1, 800a548 <rclc_node_init_default+0x58>
 800a4fc:	4616      	mov	r6, r2
 800a4fe:	b31a      	cbz	r2, 800a548 <rclc_node_init_default+0x58>
 800a500:	461f      	mov	r7, r3
 800a502:	b30b      	cbz	r3, 800a548 <rclc_node_init_default+0x58>
 800a504:	f10d 0810 	add.w	r8, sp, #16
 800a508:	4604      	mov	r4, r0
 800a50a:	4640      	mov	r0, r8
 800a50c:	f005 fa12 	bl	800f934 <rcl_get_zero_initialized_node>
 800a510:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a514:	f10d 0918 	add.w	r9, sp, #24
 800a518:	e884 0003 	stmia.w	r4, {r0, r1}
 800a51c:	4648      	mov	r0, r9
 800a51e:	f005 fbb1 	bl	800fc84 <rcl_node_get_default_options>
 800a522:	4640      	mov	r0, r8
 800a524:	f005 fa06 	bl	800f934 <rcl_get_zero_initialized_node>
 800a528:	f8cd 9000 	str.w	r9, [sp]
 800a52c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a530:	463b      	mov	r3, r7
 800a532:	e884 0003 	stmia.w	r4, {r0, r1}
 800a536:	4632      	mov	r2, r6
 800a538:	4629      	mov	r1, r5
 800a53a:	4620      	mov	r0, r4
 800a53c:	f005 fa04 	bl	800f948 <rcl_node_init>
 800a540:	b930      	cbnz	r0, 800a550 <rclc_node_init_default+0x60>
 800a542:	b021      	add	sp, #132	@ 0x84
 800a544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a548:	200b      	movs	r0, #11
 800a54a:	b021      	add	sp, #132	@ 0x84
 800a54c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a550:	9003      	str	r0, [sp, #12]
 800a552:	f000 f911 	bl	800a778 <rcutils_reset_error>
 800a556:	f000 f90f 	bl	800a778 <rcutils_reset_error>
 800a55a:	9803      	ldr	r0, [sp, #12]
 800a55c:	b021      	add	sp, #132	@ 0x84
 800a55e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a562:	200b      	movs	r0, #11
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop

0800a568 <rclc_publisher_init_default>:
 800a568:	b368      	cbz	r0, 800a5c6 <rclc_publisher_init_default+0x5e>
 800a56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a56e:	460d      	mov	r5, r1
 800a570:	b0a0      	sub	sp, #128	@ 0x80
 800a572:	b321      	cbz	r1, 800a5be <rclc_publisher_init_default+0x56>
 800a574:	4616      	mov	r6, r2
 800a576:	b312      	cbz	r2, 800a5be <rclc_publisher_init_default+0x56>
 800a578:	461f      	mov	r7, r3
 800a57a:	b303      	cbz	r3, 800a5be <rclc_publisher_init_default+0x56>
 800a57c:	4604      	mov	r4, r0
 800a57e:	f7ff f875 	bl	800966c <rcl_get_zero_initialized_publisher>
 800a582:	f10d 0810 	add.w	r8, sp, #16
 800a586:	6020      	str	r0, [r4, #0]
 800a588:	4640      	mov	r0, r8
 800a58a:	f7ff f90d 	bl	80097a8 <rcl_publisher_get_default_options>
 800a58e:	490f      	ldr	r1, [pc, #60]	@ (800a5cc <rclc_publisher_init_default+0x64>)
 800a590:	2250      	movs	r2, #80	@ 0x50
 800a592:	4640      	mov	r0, r8
 800a594:	f00d fd23 	bl	8017fde <memcpy>
 800a598:	f8cd 8000 	str.w	r8, [sp]
 800a59c:	463b      	mov	r3, r7
 800a59e:	4632      	mov	r2, r6
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f7ff f868 	bl	8009678 <rcl_publisher_init>
 800a5a8:	b910      	cbnz	r0, 800a5b0 <rclc_publisher_init_default+0x48>
 800a5aa:	b020      	add	sp, #128	@ 0x80
 800a5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b0:	9003      	str	r0, [sp, #12]
 800a5b2:	f000 f8e1 	bl	800a778 <rcutils_reset_error>
 800a5b6:	9803      	ldr	r0, [sp, #12]
 800a5b8:	b020      	add	sp, #128	@ 0x80
 800a5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5be:	200b      	movs	r0, #11
 800a5c0:	b020      	add	sp, #128	@ 0x80
 800a5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5c6:	200b      	movs	r0, #11
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	080199e8 	.word	0x080199e8

0800a5d0 <rclc_subscription_init_default>:
 800a5d0:	b368      	cbz	r0, 800a62e <rclc_subscription_init_default+0x5e>
 800a5d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d6:	460d      	mov	r5, r1
 800a5d8:	b0a2      	sub	sp, #136	@ 0x88
 800a5da:	b321      	cbz	r1, 800a626 <rclc_subscription_init_default+0x56>
 800a5dc:	4616      	mov	r6, r2
 800a5de:	b312      	cbz	r2, 800a626 <rclc_subscription_init_default+0x56>
 800a5e0:	461f      	mov	r7, r3
 800a5e2:	b303      	cbz	r3, 800a626 <rclc_subscription_init_default+0x56>
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	f005 fd57 	bl	8010098 <rcl_get_zero_initialized_subscription>
 800a5ea:	f10d 0810 	add.w	r8, sp, #16
 800a5ee:	6020      	str	r0, [r4, #0]
 800a5f0:	4640      	mov	r0, r8
 800a5f2:	f005 fdff 	bl	80101f4 <rcl_subscription_get_default_options>
 800a5f6:	490f      	ldr	r1, [pc, #60]	@ (800a634 <rclc_subscription_init_default+0x64>)
 800a5f8:	2250      	movs	r2, #80	@ 0x50
 800a5fa:	4640      	mov	r0, r8
 800a5fc:	f00d fcef 	bl	8017fde <memcpy>
 800a600:	f8cd 8000 	str.w	r8, [sp]
 800a604:	463b      	mov	r3, r7
 800a606:	4632      	mov	r2, r6
 800a608:	4629      	mov	r1, r5
 800a60a:	4620      	mov	r0, r4
 800a60c:	f005 fd4a 	bl	80100a4 <rcl_subscription_init>
 800a610:	b910      	cbnz	r0, 800a618 <rclc_subscription_init_default+0x48>
 800a612:	b022      	add	sp, #136	@ 0x88
 800a614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a618:	9003      	str	r0, [sp, #12]
 800a61a:	f000 f8ad 	bl	800a778 <rcutils_reset_error>
 800a61e:	9803      	ldr	r0, [sp, #12]
 800a620:	b022      	add	sp, #136	@ 0x88
 800a622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a626:	200b      	movs	r0, #11
 800a628:	b022      	add	sp, #136	@ 0x88
 800a62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a62e:	200b      	movs	r0, #11
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	08019a38 	.word	0x08019a38

0800a638 <rclc_timer_init_default>:
 800a638:	b370      	cbz	r0, 800a698 <rclc_timer_init_default+0x60>
 800a63a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a63e:	460e      	mov	r6, r1
 800a640:	b08c      	sub	sp, #48	@ 0x30
 800a642:	b329      	cbz	r1, 800a690 <rclc_timer_init_default+0x58>
 800a644:	4690      	mov	r8, r2
 800a646:	461f      	mov	r7, r3
 800a648:	4605      	mov	r5, r0
 800a64a:	f006 f851 	bl	80106f0 <rcl_get_zero_initialized_timer>
 800a64e:	2301      	movs	r3, #1
 800a650:	6028      	str	r0, [r5, #0]
 800a652:	9308      	str	r3, [sp, #32]
 800a654:	68b4      	ldr	r4, [r6, #8]
 800a656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a658:	f10d 0c0c 	add.w	ip, sp, #12
 800a65c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a660:	6823      	ldr	r3, [r4, #0]
 800a662:	f8cc 3000 	str.w	r3, [ip]
 800a666:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a668:	9302      	str	r3, [sp, #8]
 800a66a:	e9cd 8700 	strd	r8, r7, [sp]
 800a66e:	4628      	mov	r0, r5
 800a670:	4632      	mov	r2, r6
 800a672:	f106 010c 	add.w	r1, r6, #12
 800a676:	f006 f843 	bl	8010700 <rcl_timer_init2>
 800a67a:	b910      	cbnz	r0, 800a682 <rclc_timer_init_default+0x4a>
 800a67c:	b00c      	add	sp, #48	@ 0x30
 800a67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a682:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a684:	f000 f878 	bl	800a778 <rcutils_reset_error>
 800a688:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a68a:	b00c      	add	sp, #48	@ 0x30
 800a68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a690:	200b      	movs	r0, #11
 800a692:	b00c      	add	sp, #48	@ 0x30
 800a694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a698:	200b      	movs	r0, #11
 800a69a:	4770      	bx	lr

0800a69c <__default_zero_allocate>:
 800a69c:	f00c be76 	b.w	801738c <calloc>

0800a6a0 <__default_reallocate>:
 800a6a0:	f00d b814 	b.w	80176cc <realloc>

0800a6a4 <__default_deallocate>:
 800a6a4:	f00c bef0 	b.w	8017488 <free>

0800a6a8 <__default_allocate>:
 800a6a8:	f00c bee6 	b.w	8017478 <malloc>

0800a6ac <rcutils_get_zero_initialized_allocator>:
 800a6ac:	b510      	push	{r4, lr}
 800a6ae:	4c05      	ldr	r4, [pc, #20]	@ (800a6c4 <rcutils_get_zero_initialized_allocator+0x18>)
 800a6b0:	4686      	mov	lr, r0
 800a6b2:	4684      	mov	ip, r0
 800a6b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	f8cc 3000 	str.w	r3, [ip]
 800a6c0:	4670      	mov	r0, lr
 800a6c2:	bd10      	pop	{r4, pc}
 800a6c4:	08019a88 	.word	0x08019a88

0800a6c8 <rcutils_get_default_allocator>:
 800a6c8:	b510      	push	{r4, lr}
 800a6ca:	4c05      	ldr	r4, [pc, #20]	@ (800a6e0 <rcutils_get_default_allocator+0x18>)
 800a6cc:	4686      	mov	lr, r0
 800a6ce:	4684      	mov	ip, r0
 800a6d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a6d6:	6823      	ldr	r3, [r4, #0]
 800a6d8:	f8cc 3000 	str.w	r3, [ip]
 800a6dc:	4670      	mov	r0, lr
 800a6de:	bd10      	pop	{r4, pc}
 800a6e0:	20000364 	.word	0x20000364

0800a6e4 <rcutils_set_default_allocator>:
 800a6e4:	b1a8      	cbz	r0, 800a712 <rcutils_set_default_allocator+0x2e>
 800a6e6:	6802      	ldr	r2, [r0, #0]
 800a6e8:	b1a2      	cbz	r2, 800a714 <rcutils_set_default_allocator+0x30>
 800a6ea:	6841      	ldr	r1, [r0, #4]
 800a6ec:	b1a1      	cbz	r1, 800a718 <rcutils_set_default_allocator+0x34>
 800a6ee:	b410      	push	{r4}
 800a6f0:	68c4      	ldr	r4, [r0, #12]
 800a6f2:	b164      	cbz	r4, 800a70e <rcutils_set_default_allocator+0x2a>
 800a6f4:	6880      	ldr	r0, [r0, #8]
 800a6f6:	b138      	cbz	r0, 800a708 <rcutils_set_default_allocator+0x24>
 800a6f8:	4b08      	ldr	r3, [pc, #32]	@ (800a71c <rcutils_set_default_allocator+0x38>)
 800a6fa:	601a      	str	r2, [r3, #0]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800a702:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800a706:	2001      	movs	r0, #1
 800a708:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a70c:	4770      	bx	lr
 800a70e:	4620      	mov	r0, r4
 800a710:	e7fa      	b.n	800a708 <rcutils_set_default_allocator+0x24>
 800a712:	4770      	bx	lr
 800a714:	4610      	mov	r0, r2
 800a716:	4770      	bx	lr
 800a718:	4608      	mov	r0, r1
 800a71a:	4770      	bx	lr
 800a71c:	20000364 	.word	0x20000364

0800a720 <rcutils_allocator_is_valid>:
 800a720:	b158      	cbz	r0, 800a73a <rcutils_allocator_is_valid+0x1a>
 800a722:	6803      	ldr	r3, [r0, #0]
 800a724:	b143      	cbz	r3, 800a738 <rcutils_allocator_is_valid+0x18>
 800a726:	6843      	ldr	r3, [r0, #4]
 800a728:	b133      	cbz	r3, 800a738 <rcutils_allocator_is_valid+0x18>
 800a72a:	68c3      	ldr	r3, [r0, #12]
 800a72c:	b123      	cbz	r3, 800a738 <rcutils_allocator_is_valid+0x18>
 800a72e:	6880      	ldr	r0, [r0, #8]
 800a730:	3800      	subs	r0, #0
 800a732:	bf18      	it	ne
 800a734:	2001      	movne	r0, #1
 800a736:	4770      	bx	lr
 800a738:	4618      	mov	r0, r3
 800a73a:	4770      	bx	lr

0800a73c <rcutils_error_is_set>:
 800a73c:	4b01      	ldr	r3, [pc, #4]	@ (800a744 <rcutils_error_is_set+0x8>)
 800a73e:	7818      	ldrb	r0, [r3, #0]
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	2000c134 	.word	0x2000c134

0800a748 <rcutils_get_error_string>:
 800a748:	4b06      	ldr	r3, [pc, #24]	@ (800a764 <rcutils_get_error_string+0x1c>)
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	b13b      	cbz	r3, 800a75e <rcutils_get_error_string+0x16>
 800a74e:	4b06      	ldr	r3, [pc, #24]	@ (800a768 <rcutils_get_error_string+0x20>)
 800a750:	781a      	ldrb	r2, [r3, #0]
 800a752:	b90a      	cbnz	r2, 800a758 <rcutils_get_error_string+0x10>
 800a754:	2201      	movs	r2, #1
 800a756:	701a      	strb	r2, [r3, #0]
 800a758:	4b04      	ldr	r3, [pc, #16]	@ (800a76c <rcutils_get_error_string+0x24>)
 800a75a:	7818      	ldrb	r0, [r3, #0]
 800a75c:	4770      	bx	lr
 800a75e:	4b04      	ldr	r3, [pc, #16]	@ (800a770 <rcutils_get_error_string+0x28>)
 800a760:	7818      	ldrb	r0, [r3, #0]
 800a762:	4770      	bx	lr
 800a764:	2000c134 	.word	0x2000c134
 800a768:	2000c139 	.word	0x2000c139
 800a76c:	2000c138 	.word	0x2000c138
 800a770:	08019128 	.word	0x08019128
 800a774:	00000000 	.word	0x00000000

0800a778 <rcutils_reset_error>:
 800a778:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800a798 <rcutils_reset_error+0x20>
 800a77c:	4a08      	ldr	r2, [pc, #32]	@ (800a7a0 <rcutils_reset_error+0x28>)
 800a77e:	4809      	ldr	r0, [pc, #36]	@ (800a7a4 <rcutils_reset_error+0x2c>)
 800a780:	4909      	ldr	r1, [pc, #36]	@ (800a7a8 <rcutils_reset_error+0x30>)
 800a782:	2300      	movs	r3, #0
 800a784:	8013      	strh	r3, [r2, #0]
 800a786:	ed82 7b02 	vstr	d7, [r2, #8]
 800a78a:	4a08      	ldr	r2, [pc, #32]	@ (800a7ac <rcutils_reset_error+0x34>)
 800a78c:	7003      	strb	r3, [r0, #0]
 800a78e:	700b      	strb	r3, [r1, #0]
 800a790:	7013      	strb	r3, [r2, #0]
 800a792:	4770      	bx	lr
 800a794:	f3af 8000 	nop.w
	...
 800a7a0:	2000c140 	.word	0x2000c140
 800a7a4:	2000c139 	.word	0x2000c139
 800a7a8:	2000c138 	.word	0x2000c138
 800a7ac:	2000c134 	.word	0x2000c134

0800a7b0 <rcutils_system_time_now>:
 800a7b0:	b318      	cbz	r0, 800a7fa <rcutils_system_time_now+0x4a>
 800a7b2:	b570      	push	{r4, r5, r6, lr}
 800a7b4:	b084      	sub	sp, #16
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	4669      	mov	r1, sp
 800a7ba:	2001      	movs	r0, #1
 800a7bc:	f7f7 fa60 	bl	8001c80 <clock_gettime>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	db17      	blt.n	800a7f4 <rcutils_system_time_now+0x44>
 800a7c4:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a7c8:	2900      	cmp	r1, #0
 800a7ca:	db13      	blt.n	800a7f4 <rcutils_system_time_now+0x44>
 800a7cc:	9d02      	ldr	r5, [sp, #8]
 800a7ce:	2d00      	cmp	r5, #0
 800a7d0:	db0d      	blt.n	800a7ee <rcutils_system_time_now+0x3e>
 800a7d2:	4e0b      	ldr	r6, [pc, #44]	@ (800a800 <rcutils_system_time_now+0x50>)
 800a7d4:	fba3 3206 	umull	r3, r2, r3, r6
 800a7d8:	195b      	adds	r3, r3, r5
 800a7da:	fb06 2201 	mla	r2, r6, r1, r2
 800a7de:	f04f 0000 	mov.w	r0, #0
 800a7e2:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800a7e6:	e9c4 3200 	strd	r3, r2, [r4]
 800a7ea:	b004      	add	sp, #16
 800a7ec:	bd70      	pop	{r4, r5, r6, pc}
 800a7ee:	ea53 0201 	orrs.w	r2, r3, r1
 800a7f2:	d1ee      	bne.n	800a7d2 <rcutils_system_time_now+0x22>
 800a7f4:	2002      	movs	r0, #2
 800a7f6:	b004      	add	sp, #16
 800a7f8:	bd70      	pop	{r4, r5, r6, pc}
 800a7fa:	200b      	movs	r0, #11
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	3b9aca00 	.word	0x3b9aca00

0800a804 <rcutils_steady_time_now>:
 800a804:	b318      	cbz	r0, 800a84e <rcutils_steady_time_now+0x4a>
 800a806:	b570      	push	{r4, r5, r6, lr}
 800a808:	b084      	sub	sp, #16
 800a80a:	4604      	mov	r4, r0
 800a80c:	4669      	mov	r1, sp
 800a80e:	2000      	movs	r0, #0
 800a810:	f7f7 fa36 	bl	8001c80 <clock_gettime>
 800a814:	2800      	cmp	r0, #0
 800a816:	db17      	blt.n	800a848 <rcutils_steady_time_now+0x44>
 800a818:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a81c:	2900      	cmp	r1, #0
 800a81e:	db13      	blt.n	800a848 <rcutils_steady_time_now+0x44>
 800a820:	9d02      	ldr	r5, [sp, #8]
 800a822:	2d00      	cmp	r5, #0
 800a824:	db0d      	blt.n	800a842 <rcutils_steady_time_now+0x3e>
 800a826:	4e0b      	ldr	r6, [pc, #44]	@ (800a854 <rcutils_steady_time_now+0x50>)
 800a828:	fba3 3206 	umull	r3, r2, r3, r6
 800a82c:	195b      	adds	r3, r3, r5
 800a82e:	fb06 2201 	mla	r2, r6, r1, r2
 800a832:	f04f 0000 	mov.w	r0, #0
 800a836:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800a83a:	e9c4 3200 	strd	r3, r2, [r4]
 800a83e:	b004      	add	sp, #16
 800a840:	bd70      	pop	{r4, r5, r6, pc}
 800a842:	ea53 0201 	orrs.w	r2, r3, r1
 800a846:	d1ee      	bne.n	800a826 <rcutils_steady_time_now+0x22>
 800a848:	2002      	movs	r0, #2
 800a84a:	b004      	add	sp, #16
 800a84c:	bd70      	pop	{r4, r5, r6, pc}
 800a84e:	200b      	movs	r0, #11
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	3b9aca00 	.word	0x3b9aca00

0800a858 <rmw_get_default_publisher_options>:
 800a858:	2200      	movs	r2, #0
 800a85a:	6002      	str	r2, [r0, #0]
 800a85c:	7102      	strb	r2, [r0, #4]
 800a85e:	4770      	bx	lr

0800a860 <rmw_uros_set_custom_transport>:
 800a860:	b470      	push	{r4, r5, r6}
 800a862:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a866:	b162      	cbz	r2, 800a882 <rmw_uros_set_custom_transport+0x22>
 800a868:	b15b      	cbz	r3, 800a882 <rmw_uros_set_custom_transport+0x22>
 800a86a:	b155      	cbz	r5, 800a882 <rmw_uros_set_custom_transport+0x22>
 800a86c:	b14e      	cbz	r6, 800a882 <rmw_uros_set_custom_transport+0x22>
 800a86e:	4c06      	ldr	r4, [pc, #24]	@ (800a888 <rmw_uros_set_custom_transport+0x28>)
 800a870:	7020      	strb	r0, [r4, #0]
 800a872:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a876:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a87a:	6166      	str	r6, [r4, #20]
 800a87c:	2000      	movs	r0, #0
 800a87e:	bc70      	pop	{r4, r5, r6}
 800a880:	4770      	bx	lr
 800a882:	200b      	movs	r0, #11
 800a884:	bc70      	pop	{r4, r5, r6}
 800a886:	4770      	bx	lr
 800a888:	2000c150 	.word	0x2000c150

0800a88c <flush_session>:
 800a88c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800a88e:	f002 bc17 	b.w	800d0c0 <uxr_run_session_until_confirm_delivery>
 800a892:	bf00      	nop

0800a894 <rmw_publish>:
 800a894:	2800      	cmp	r0, #0
 800a896:	d053      	beq.n	800a940 <rmw_publish+0xac>
 800a898:	b570      	push	{r4, r5, r6, lr}
 800a89a:	460d      	mov	r5, r1
 800a89c:	b08e      	sub	sp, #56	@ 0x38
 800a89e:	2900      	cmp	r1, #0
 800a8a0:	d04b      	beq.n	800a93a <rmw_publish+0xa6>
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	6800      	ldr	r0, [r0, #0]
 800a8a6:	f000 fd17 	bl	800b2d8 <is_uxrce_rmw_identifier_valid>
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	d045      	beq.n	800a93a <rmw_publish+0xa6>
 800a8ae:	6866      	ldr	r6, [r4, #4]
 800a8b0:	2e00      	cmp	r6, #0
 800a8b2:	d042      	beq.n	800a93a <rmw_publish+0xa6>
 800a8b4:	69b4      	ldr	r4, [r6, #24]
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	6923      	ldr	r3, [r4, #16]
 800a8ba:	4798      	blx	r3
 800a8bc:	69f3      	ldr	r3, [r6, #28]
 800a8be:	9005      	str	r0, [sp, #20]
 800a8c0:	b113      	cbz	r3, 800a8c8 <rmw_publish+0x34>
 800a8c2:	a805      	add	r0, sp, #20
 800a8c4:	4798      	blx	r3
 800a8c6:	9805      	ldr	r0, [sp, #20]
 800a8c8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	9000      	str	r0, [sp, #0]
 800a8d0:	6972      	ldr	r2, [r6, #20]
 800a8d2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a8d4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800a8d8:	ab06      	add	r3, sp, #24
 800a8da:	f003 fa21 	bl	800dd20 <uxr_prepare_output_stream>
 800a8de:	b1d8      	cbz	r0, 800a918 <rmw_publish+0x84>
 800a8e0:	68a3      	ldr	r3, [r4, #8]
 800a8e2:	a906      	add	r1, sp, #24
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	4798      	blx	r3
 800a8e8:	6a33      	ldr	r3, [r6, #32]
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	b10b      	cbz	r3, 800a8f2 <rmw_publish+0x5e>
 800a8ee:	a806      	add	r0, sp, #24
 800a8f0:	4798      	blx	r3
 800a8f2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800a8f6:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	6910      	ldr	r0, [r2, #16]
 800a8fe:	d021      	beq.n	800a944 <rmw_publish+0xb0>
 800a900:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800a902:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a906:	f002 fbdb 	bl	800d0c0 <uxr_run_session_until_confirm_delivery>
 800a90a:	4004      	ands	r4, r0
 800a90c:	b2e4      	uxtb	r4, r4
 800a90e:	f084 0001 	eor.w	r0, r4, #1
 800a912:	b2c0      	uxtb	r0, r0
 800a914:	b00e      	add	sp, #56	@ 0x38
 800a916:	bd70      	pop	{r4, r5, r6, pc}
 800a918:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a91c:	6918      	ldr	r0, [r3, #16]
 800a91e:	4b0c      	ldr	r3, [pc, #48]	@ (800a950 <rmw_publish+0xbc>)
 800a920:	9301      	str	r3, [sp, #4]
 800a922:	9b05      	ldr	r3, [sp, #20]
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	9602      	str	r6, [sp, #8]
 800a928:	6972      	ldr	r2, [r6, #20]
 800a92a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a92c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a930:	ab06      	add	r3, sp, #24
 800a932:	f003 fa25 	bl	800dd80 <uxr_prepare_output_stream_fragmented>
 800a936:	2800      	cmp	r0, #0
 800a938:	d1d2      	bne.n	800a8e0 <rmw_publish+0x4c>
 800a93a:	2001      	movs	r0, #1
 800a93c:	b00e      	add	sp, #56	@ 0x38
 800a93e:	bd70      	pop	{r4, r5, r6, pc}
 800a940:	2001      	movs	r0, #1
 800a942:	4770      	bx	lr
 800a944:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a948:	f002 f822 	bl	800c990 <uxr_flash_output_streams>
 800a94c:	e7df      	b.n	800a90e <rmw_publish+0x7a>
 800a94e:	bf00      	nop
 800a950:	0800a88d 	.word	0x0800a88d

0800a954 <rmw_create_publisher>:
 800a954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a958:	b087      	sub	sp, #28
 800a95a:	2800      	cmp	r0, #0
 800a95c:	f000 80c9 	beq.w	800aaf2 <rmw_create_publisher+0x19e>
 800a960:	460f      	mov	r7, r1
 800a962:	2900      	cmp	r1, #0
 800a964:	f000 80c5 	beq.w	800aaf2 <rmw_create_publisher+0x19e>
 800a968:	4604      	mov	r4, r0
 800a96a:	6800      	ldr	r0, [r0, #0]
 800a96c:	4615      	mov	r5, r2
 800a96e:	461e      	mov	r6, r3
 800a970:	f000 fcb2 	bl	800b2d8 <is_uxrce_rmw_identifier_valid>
 800a974:	2800      	cmp	r0, #0
 800a976:	f000 80bc 	beq.w	800aaf2 <rmw_create_publisher+0x19e>
 800a97a:	2d00      	cmp	r5, #0
 800a97c:	f000 80b9 	beq.w	800aaf2 <rmw_create_publisher+0x19e>
 800a980:	782b      	ldrb	r3, [r5, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	f000 80b5 	beq.w	800aaf2 <rmw_create_publisher+0x19e>
 800a988:	2e00      	cmp	r6, #0
 800a98a:	f000 80b2 	beq.w	800aaf2 <rmw_create_publisher+0x19e>
 800a98e:	485c      	ldr	r0, [pc, #368]	@ (800ab00 <rmw_create_publisher+0x1ac>)
 800a990:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a994:	f008 f98e 	bl	8012cb4 <get_memory>
 800a998:	2800      	cmp	r0, #0
 800a99a:	f000 80aa 	beq.w	800aaf2 <rmw_create_publisher+0x19e>
 800a99e:	6884      	ldr	r4, [r0, #8]
 800a9a0:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800a9a4:	f008 fa0c 	bl	8012dc0 <rmw_get_implementation_identifier>
 800a9a8:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800a9ac:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800a9b0:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	f7f5 fc73 	bl	80002a0 <strlen>
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	283c      	cmp	r0, #60	@ 0x3c
 800a9be:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800a9c2:	f200 808f 	bhi.w	800aae4 <rmw_create_publisher+0x190>
 800a9c6:	4a4f      	ldr	r2, [pc, #316]	@ (800ab04 <rmw_create_publisher+0x1b0>)
 800a9c8:	462b      	mov	r3, r5
 800a9ca:	213c      	movs	r1, #60	@ 0x3c
 800a9cc:	4650      	mov	r0, sl
 800a9ce:	f00d f8b7 	bl	8017b40 <sniprintf>
 800a9d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a9d6:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800a9d8:	4631      	mov	r1, r6
 800a9da:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800a9de:	2250      	movs	r2, #80	@ 0x50
 800a9e0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a9e4:	f00d fafb 	bl	8017fde <memcpy>
 800a9e8:	7a33      	ldrb	r3, [r6, #8]
 800a9ea:	4947      	ldr	r1, [pc, #284]	@ (800ab08 <rmw_create_publisher+0x1b4>)
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9f2:	bf0c      	ite	eq
 800a9f4:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800a9f8:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800a9fc:	67a3      	str	r3, [r4, #120]	@ 0x78
 800a9fe:	2300      	movs	r3, #0
 800aa00:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800aa04:	4638      	mov	r0, r7
 800aa06:	f000 fc75 	bl	800b2f4 <get_message_typesupport_handle>
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	d06a      	beq.n	800aae4 <rmw_create_publisher+0x190>
 800aa0e:	6842      	ldr	r2, [r0, #4]
 800aa10:	61a2      	str	r2, [r4, #24]
 800aa12:	2a00      	cmp	r2, #0
 800aa14:	d066      	beq.n	800aae4 <rmw_create_publisher+0x190>
 800aa16:	4629      	mov	r1, r5
 800aa18:	4633      	mov	r3, r6
 800aa1a:	4648      	mov	r0, r9
 800aa1c:	f008 fc2c 	bl	8013278 <create_topic>
 800aa20:	6260      	str	r0, [r4, #36]	@ 0x24
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d062      	beq.n	800aaec <rmw_create_publisher+0x198>
 800aa26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa2e:	2103      	movs	r1, #3
 800aa30:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800aa34:	1c42      	adds	r2, r0, #1
 800aa36:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800aa3a:	f001 fe7b 	bl	800c734 <uxr_object_id>
 800aa3e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800aa42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa46:	6120      	str	r0, [r4, #16]
 800aa48:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800aa4c:	6910      	ldr	r0, [r2, #16]
 800aa4e:	2506      	movs	r5, #6
 800aa50:	9500      	str	r5, [sp, #0]
 800aa52:	6819      	ldr	r1, [r3, #0]
 800aa54:	6922      	ldr	r2, [r4, #16]
 800aa56:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800aa5a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800aa5e:	f001 fd41 	bl	800c4e4 <uxr_buffer_create_publisher_bin>
 800aa62:	4602      	mov	r2, r0
 800aa64:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800aa68:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800aa6c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800aa70:	f000 fbac 	bl	800b1cc <run_xrce_session>
 800aa74:	b3b0      	cbz	r0, 800aae4 <rmw_create_publisher+0x190>
 800aa76:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa7e:	2105      	movs	r1, #5
 800aa80:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800aa84:	1c42      	adds	r2, r0, #1
 800aa86:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800aa8a:	f001 fe53 	bl	800c734 <uxr_object_id>
 800aa8e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800aa92:	6160      	str	r0, [r4, #20]
 800aa94:	4631      	mov	r1, r6
 800aa96:	af04      	add	r7, sp, #16
 800aa98:	691e      	ldr	r6, [r3, #16]
 800aa9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa9e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800aaa2:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 800aaa6:	4638      	mov	r0, r7
 800aaa8:	f000 fbb0 	bl	800b20c <convert_qos_profile>
 800aaac:	9503      	str	r5, [sp, #12]
 800aaae:	e897 0003 	ldmia.w	r7, {r0, r1}
 800aab2:	9001      	str	r0, [sp, #4]
 800aab4:	f8ad 1008 	strh.w	r1, [sp, #8]
 800aab8:	f8db 3010 	ldr.w	r3, [fp, #16]
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800aac2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800aac6:	f8da 1000 	ldr.w	r1, [sl]
 800aaca:	4630      	mov	r0, r6
 800aacc:	f001 fd68 	bl	800c5a0 <uxr_buffer_create_datawriter_bin>
 800aad0:	4602      	mov	r2, r0
 800aad2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800aad6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800aada:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800aade:	f000 fb75 	bl	800b1cc <run_xrce_session>
 800aae2:	b940      	cbnz	r0, 800aaf6 <rmw_create_publisher+0x1a2>
 800aae4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800aae6:	b108      	cbz	r0, 800aaec <rmw_create_publisher+0x198>
 800aae8:	f000 fa66 	bl	800afb8 <rmw_uxrce_fini_topic_memory>
 800aaec:	4640      	mov	r0, r8
 800aaee:	f000 fa0b 	bl	800af08 <rmw_uxrce_fini_publisher_memory>
 800aaf2:	f04f 0800 	mov.w	r8, #0
 800aaf6:	4640      	mov	r0, r8
 800aaf8:	b007      	add	sp, #28
 800aafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aafe:	bf00      	nop
 800ab00:	2000f440 	.word	0x2000f440
 800ab04:	08019058 	.word	0x08019058
 800ab08:	08018ec8 	.word	0x08018ec8

0800ab0c <rmw_publisher_get_actual_qos>:
 800ab0c:	b508      	push	{r3, lr}
 800ab0e:	4603      	mov	r3, r0
 800ab10:	b140      	cbz	r0, 800ab24 <rmw_publisher_get_actual_qos+0x18>
 800ab12:	4608      	mov	r0, r1
 800ab14:	b131      	cbz	r1, 800ab24 <rmw_publisher_get_actual_qos+0x18>
 800ab16:	6859      	ldr	r1, [r3, #4]
 800ab18:	2250      	movs	r2, #80	@ 0x50
 800ab1a:	3128      	adds	r1, #40	@ 0x28
 800ab1c:	f00d fa5f 	bl	8017fde <memcpy>
 800ab20:	2000      	movs	r0, #0
 800ab22:	bd08      	pop	{r3, pc}
 800ab24:	200b      	movs	r0, #11
 800ab26:	bd08      	pop	{r3, pc}

0800ab28 <rmw_destroy_publisher>:
 800ab28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab2c:	b128      	cbz	r0, 800ab3a <rmw_destroy_publisher+0x12>
 800ab2e:	4604      	mov	r4, r0
 800ab30:	6800      	ldr	r0, [r0, #0]
 800ab32:	460d      	mov	r5, r1
 800ab34:	f000 fbd0 	bl	800b2d8 <is_uxrce_rmw_identifier_valid>
 800ab38:	b918      	cbnz	r0, 800ab42 <rmw_destroy_publisher+0x1a>
 800ab3a:	2401      	movs	r4, #1
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab42:	6863      	ldr	r3, [r4, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d0f8      	beq.n	800ab3a <rmw_destroy_publisher+0x12>
 800ab48:	2d00      	cmp	r5, #0
 800ab4a:	d0f6      	beq.n	800ab3a <rmw_destroy_publisher+0x12>
 800ab4c:	6828      	ldr	r0, [r5, #0]
 800ab4e:	f000 fbc3 	bl	800b2d8 <is_uxrce_rmw_identifier_valid>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d0f1      	beq.n	800ab3a <rmw_destroy_publisher+0x12>
 800ab56:	686c      	ldr	r4, [r5, #4]
 800ab58:	2c00      	cmp	r4, #0
 800ab5a:	d0ee      	beq.n	800ab3a <rmw_destroy_publisher+0x12>
 800ab5c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ab5e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800ab62:	f008 fbdd 	bl	8013320 <destroy_topic>
 800ab66:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ab6a:	6962      	ldr	r2, [r4, #20]
 800ab6c:	6918      	ldr	r0, [r3, #16]
 800ab6e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ab72:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ab76:	6819      	ldr	r1, [r3, #0]
 800ab78:	f001 fc04 	bl	800c384 <uxr_buffer_delete_entity>
 800ab7c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ab80:	6922      	ldr	r2, [r4, #16]
 800ab82:	4680      	mov	r8, r0
 800ab84:	6918      	ldr	r0, [r3, #16]
 800ab86:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ab8a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ab8e:	6819      	ldr	r1, [r3, #0]
 800ab90:	f001 fbf8 	bl	800c384 <uxr_buffer_delete_entity>
 800ab94:	4606      	mov	r6, r0
 800ab96:	6938      	ldr	r0, [r7, #16]
 800ab98:	4642      	mov	r2, r8
 800ab9a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ab9e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800aba2:	f000 fb13 	bl	800b1cc <run_xrce_session>
 800aba6:	4604      	mov	r4, r0
 800aba8:	6938      	ldr	r0, [r7, #16]
 800abaa:	4632      	mov	r2, r6
 800abac:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800abb0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800abb4:	f000 fb0a 	bl	800b1cc <run_xrce_session>
 800abb8:	4004      	ands	r4, r0
 800abba:	f084 0401 	eor.w	r4, r4, #1
 800abbe:	b2e4      	uxtb	r4, r4
 800abc0:	4628      	mov	r0, r5
 800abc2:	0064      	lsls	r4, r4, #1
 800abc4:	f000 f9a0 	bl	800af08 <rmw_uxrce_fini_publisher_memory>
 800abc8:	e7b8      	b.n	800ab3c <rmw_destroy_publisher+0x14>
 800abca:	bf00      	nop

0800abcc <rmw_uros_epoch_nanos>:
 800abcc:	4b05      	ldr	r3, [pc, #20]	@ (800abe4 <rmw_uros_epoch_nanos+0x18>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	b123      	cbz	r3, 800abdc <rmw_uros_epoch_nanos+0x10>
 800abd2:	6898      	ldr	r0, [r3, #8]
 800abd4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800abd8:	f001 bed0 	b.w	800c97c <uxr_epoch_nanos>
 800abdc:	2000      	movs	r0, #0
 800abde:	2100      	movs	r1, #0
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	20010ab0 	.word	0x20010ab0

0800abe8 <rmw_uros_sync_session>:
 800abe8:	b508      	push	{r3, lr}
 800abea:	4b07      	ldr	r3, [pc, #28]	@ (800ac08 <rmw_uros_sync_session+0x20>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	b14b      	cbz	r3, 800ac04 <rmw_uros_sync_session+0x1c>
 800abf0:	4601      	mov	r1, r0
 800abf2:	6898      	ldr	r0, [r3, #8]
 800abf4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800abf8:	f002 fade 	bl	800d1b8 <uxr_sync_session>
 800abfc:	f080 0001 	eor.w	r0, r0, #1
 800ac00:	b2c0      	uxtb	r0, r0
 800ac02:	bd08      	pop	{r3, pc}
 800ac04:	2001      	movs	r0, #1
 800ac06:	bd08      	pop	{r3, pc}
 800ac08:	20010ab0 	.word	0x20010ab0

0800ac0c <rmw_uxrce_init_service_memory>:
 800ac0c:	b1e2      	cbz	r2, 800ac48 <rmw_uxrce_init_service_memory+0x3c>
 800ac0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac12:	7b05      	ldrb	r5, [r0, #12]
 800ac14:	4606      	mov	r6, r0
 800ac16:	b9ad      	cbnz	r5, 800ac44 <rmw_uxrce_init_service_memory+0x38>
 800ac18:	23c8      	movs	r3, #200	@ 0xc8
 800ac1a:	e9c0 5500 	strd	r5, r5, [r0]
 800ac1e:	6083      	str	r3, [r0, #8]
 800ac20:	f240 1301 	movw	r3, #257	@ 0x101
 800ac24:	4617      	mov	r7, r2
 800ac26:	8183      	strh	r3, [r0, #12]
 800ac28:	460c      	mov	r4, r1
 800ac2a:	46a8      	mov	r8, r5
 800ac2c:	4621      	mov	r1, r4
 800ac2e:	4630      	mov	r0, r6
 800ac30:	3501      	adds	r5, #1
 800ac32:	f008 f84f 	bl	8012cd4 <put_memory>
 800ac36:	42af      	cmp	r7, r5
 800ac38:	60a4      	str	r4, [r4, #8]
 800ac3a:	f884 800c 	strb.w	r8, [r4, #12]
 800ac3e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ac42:	d1f3      	bne.n	800ac2c <rmw_uxrce_init_service_memory+0x20>
 800ac44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop

0800ac4c <rmw_uxrce_init_client_memory>:
 800ac4c:	b1e2      	cbz	r2, 800ac88 <rmw_uxrce_init_client_memory+0x3c>
 800ac4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac52:	7b05      	ldrb	r5, [r0, #12]
 800ac54:	4606      	mov	r6, r0
 800ac56:	b9ad      	cbnz	r5, 800ac84 <rmw_uxrce_init_client_memory+0x38>
 800ac58:	23c8      	movs	r3, #200	@ 0xc8
 800ac5a:	e9c0 5500 	strd	r5, r5, [r0]
 800ac5e:	6083      	str	r3, [r0, #8]
 800ac60:	f240 1301 	movw	r3, #257	@ 0x101
 800ac64:	4617      	mov	r7, r2
 800ac66:	8183      	strh	r3, [r0, #12]
 800ac68:	460c      	mov	r4, r1
 800ac6a:	46a8      	mov	r8, r5
 800ac6c:	4621      	mov	r1, r4
 800ac6e:	4630      	mov	r0, r6
 800ac70:	3501      	adds	r5, #1
 800ac72:	f008 f82f 	bl	8012cd4 <put_memory>
 800ac76:	42af      	cmp	r7, r5
 800ac78:	60a4      	str	r4, [r4, #8]
 800ac7a:	f884 800c 	strb.w	r8, [r4, #12]
 800ac7e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ac82:	d1f3      	bne.n	800ac6c <rmw_uxrce_init_client_memory+0x20>
 800ac84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop

0800ac8c <rmw_uxrce_init_publisher_memory>:
 800ac8c:	b1e2      	cbz	r2, 800acc8 <rmw_uxrce_init_publisher_memory+0x3c>
 800ac8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac92:	7b05      	ldrb	r5, [r0, #12]
 800ac94:	4606      	mov	r6, r0
 800ac96:	b9ad      	cbnz	r5, 800acc4 <rmw_uxrce_init_publisher_memory+0x38>
 800ac98:	23d8      	movs	r3, #216	@ 0xd8
 800ac9a:	e9c0 5500 	strd	r5, r5, [r0]
 800ac9e:	6083      	str	r3, [r0, #8]
 800aca0:	f240 1301 	movw	r3, #257	@ 0x101
 800aca4:	4617      	mov	r7, r2
 800aca6:	8183      	strh	r3, [r0, #12]
 800aca8:	460c      	mov	r4, r1
 800acaa:	46a8      	mov	r8, r5
 800acac:	4621      	mov	r1, r4
 800acae:	4630      	mov	r0, r6
 800acb0:	3501      	adds	r5, #1
 800acb2:	f008 f80f 	bl	8012cd4 <put_memory>
 800acb6:	42af      	cmp	r7, r5
 800acb8:	60a4      	str	r4, [r4, #8]
 800acba:	f884 800c 	strb.w	r8, [r4, #12]
 800acbe:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800acc2:	d1f3      	bne.n	800acac <rmw_uxrce_init_publisher_memory+0x20>
 800acc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop

0800accc <rmw_uxrce_init_subscription_memory>:
 800accc:	b1e2      	cbz	r2, 800ad08 <rmw_uxrce_init_subscription_memory+0x3c>
 800acce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd2:	7b05      	ldrb	r5, [r0, #12]
 800acd4:	4606      	mov	r6, r0
 800acd6:	b9ad      	cbnz	r5, 800ad04 <rmw_uxrce_init_subscription_memory+0x38>
 800acd8:	23d8      	movs	r3, #216	@ 0xd8
 800acda:	e9c0 5500 	strd	r5, r5, [r0]
 800acde:	6083      	str	r3, [r0, #8]
 800ace0:	f240 1301 	movw	r3, #257	@ 0x101
 800ace4:	4617      	mov	r7, r2
 800ace6:	8183      	strh	r3, [r0, #12]
 800ace8:	460c      	mov	r4, r1
 800acea:	46a8      	mov	r8, r5
 800acec:	4621      	mov	r1, r4
 800acee:	4630      	mov	r0, r6
 800acf0:	3501      	adds	r5, #1
 800acf2:	f007 ffef 	bl	8012cd4 <put_memory>
 800acf6:	42af      	cmp	r7, r5
 800acf8:	60a4      	str	r4, [r4, #8]
 800acfa:	f884 800c 	strb.w	r8, [r4, #12]
 800acfe:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ad02:	d1f3      	bne.n	800acec <rmw_uxrce_init_subscription_memory+0x20>
 800ad04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop

0800ad0c <rmw_uxrce_init_node_memory>:
 800ad0c:	b1e2      	cbz	r2, 800ad48 <rmw_uxrce_init_node_memory+0x3c>
 800ad0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad12:	7b05      	ldrb	r5, [r0, #12]
 800ad14:	4606      	mov	r6, r0
 800ad16:	b9ad      	cbnz	r5, 800ad44 <rmw_uxrce_init_node_memory+0x38>
 800ad18:	23a4      	movs	r3, #164	@ 0xa4
 800ad1a:	e9c0 5500 	strd	r5, r5, [r0]
 800ad1e:	6083      	str	r3, [r0, #8]
 800ad20:	f240 1301 	movw	r3, #257	@ 0x101
 800ad24:	4617      	mov	r7, r2
 800ad26:	8183      	strh	r3, [r0, #12]
 800ad28:	460c      	mov	r4, r1
 800ad2a:	46a8      	mov	r8, r5
 800ad2c:	4621      	mov	r1, r4
 800ad2e:	4630      	mov	r0, r6
 800ad30:	3501      	adds	r5, #1
 800ad32:	f007 ffcf 	bl	8012cd4 <put_memory>
 800ad36:	42af      	cmp	r7, r5
 800ad38:	60a4      	str	r4, [r4, #8]
 800ad3a:	f884 800c 	strb.w	r8, [r4, #12]
 800ad3e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ad42:	d1f3      	bne.n	800ad2c <rmw_uxrce_init_node_memory+0x20>
 800ad44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop

0800ad4c <rmw_uxrce_init_session_memory>:
 800ad4c:	b1ea      	cbz	r2, 800ad8a <rmw_uxrce_init_session_memory+0x3e>
 800ad4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad52:	7b05      	ldrb	r5, [r0, #12]
 800ad54:	4606      	mov	r6, r0
 800ad56:	b9b5      	cbnz	r5, 800ad86 <rmw_uxrce_init_session_memory+0x3a>
 800ad58:	e9c0 5500 	strd	r5, r5, [r0]
 800ad5c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ad60:	f240 1301 	movw	r3, #257	@ 0x101
 800ad64:	4617      	mov	r7, r2
 800ad66:	f8c0 8008 	str.w	r8, [r0, #8]
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	8183      	strh	r3, [r0, #12]
 800ad6e:	46a9      	mov	r9, r5
 800ad70:	4621      	mov	r1, r4
 800ad72:	4630      	mov	r0, r6
 800ad74:	3501      	adds	r5, #1
 800ad76:	f007 ffad 	bl	8012cd4 <put_memory>
 800ad7a:	42af      	cmp	r7, r5
 800ad7c:	60a4      	str	r4, [r4, #8]
 800ad7e:	f884 900c 	strb.w	r9, [r4, #12]
 800ad82:	4444      	add	r4, r8
 800ad84:	d1f4      	bne.n	800ad70 <rmw_uxrce_init_session_memory+0x24>
 800ad86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad8a:	4770      	bx	lr

0800ad8c <rmw_uxrce_init_topic_memory>:
 800ad8c:	b1e2      	cbz	r2, 800adc8 <rmw_uxrce_init_topic_memory+0x3c>
 800ad8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad92:	7b05      	ldrb	r5, [r0, #12]
 800ad94:	4606      	mov	r6, r0
 800ad96:	b9ad      	cbnz	r5, 800adc4 <rmw_uxrce_init_topic_memory+0x38>
 800ad98:	231c      	movs	r3, #28
 800ad9a:	e9c0 5500 	strd	r5, r5, [r0]
 800ad9e:	6083      	str	r3, [r0, #8]
 800ada0:	f240 1301 	movw	r3, #257	@ 0x101
 800ada4:	4617      	mov	r7, r2
 800ada6:	8183      	strh	r3, [r0, #12]
 800ada8:	460c      	mov	r4, r1
 800adaa:	46a8      	mov	r8, r5
 800adac:	4621      	mov	r1, r4
 800adae:	4630      	mov	r0, r6
 800adb0:	3501      	adds	r5, #1
 800adb2:	f007 ff8f 	bl	8012cd4 <put_memory>
 800adb6:	42af      	cmp	r7, r5
 800adb8:	60a4      	str	r4, [r4, #8]
 800adba:	f884 800c 	strb.w	r8, [r4, #12]
 800adbe:	f104 041c 	add.w	r4, r4, #28
 800adc2:	d1f3      	bne.n	800adac <rmw_uxrce_init_topic_memory+0x20>
 800adc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop

0800adcc <rmw_uxrce_init_static_input_buffer_memory>:
 800adcc:	b1ea      	cbz	r2, 800ae0a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800adce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add2:	7b05      	ldrb	r5, [r0, #12]
 800add4:	4606      	mov	r6, r0
 800add6:	b9b5      	cbnz	r5, 800ae06 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800add8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800addc:	e9c0 5500 	strd	r5, r5, [r0]
 800ade0:	6083      	str	r3, [r0, #8]
 800ade2:	f240 1301 	movw	r3, #257	@ 0x101
 800ade6:	4617      	mov	r7, r2
 800ade8:	8183      	strh	r3, [r0, #12]
 800adea:	460c      	mov	r4, r1
 800adec:	46a8      	mov	r8, r5
 800adee:	4621      	mov	r1, r4
 800adf0:	4630      	mov	r0, r6
 800adf2:	3501      	adds	r5, #1
 800adf4:	f007 ff6e 	bl	8012cd4 <put_memory>
 800adf8:	42af      	cmp	r7, r5
 800adfa:	60a4      	str	r4, [r4, #8]
 800adfc:	f884 800c 	strb.w	r8, [r4, #12]
 800ae00:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ae04:	d1f3      	bne.n	800adee <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ae06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae0a:	4770      	bx	lr

0800ae0c <rmw_uxrce_init_init_options_impl_memory>:
 800ae0c:	b1e2      	cbz	r2, 800ae48 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ae0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae12:	7b05      	ldrb	r5, [r0, #12]
 800ae14:	4606      	mov	r6, r0
 800ae16:	b9ad      	cbnz	r5, 800ae44 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800ae18:	232c      	movs	r3, #44	@ 0x2c
 800ae1a:	e9c0 5500 	strd	r5, r5, [r0]
 800ae1e:	6083      	str	r3, [r0, #8]
 800ae20:	f240 1301 	movw	r3, #257	@ 0x101
 800ae24:	4617      	mov	r7, r2
 800ae26:	8183      	strh	r3, [r0, #12]
 800ae28:	460c      	mov	r4, r1
 800ae2a:	46a8      	mov	r8, r5
 800ae2c:	4621      	mov	r1, r4
 800ae2e:	4630      	mov	r0, r6
 800ae30:	3501      	adds	r5, #1
 800ae32:	f007 ff4f 	bl	8012cd4 <put_memory>
 800ae36:	42af      	cmp	r7, r5
 800ae38:	60a4      	str	r4, [r4, #8]
 800ae3a:	f884 800c 	strb.w	r8, [r4, #12]
 800ae3e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800ae42:	d1f3      	bne.n	800ae2c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800ae44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop

0800ae4c <rmw_uxrce_init_wait_set_memory>:
 800ae4c:	b1e2      	cbz	r2, 800ae88 <rmw_uxrce_init_wait_set_memory+0x3c>
 800ae4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae52:	7b05      	ldrb	r5, [r0, #12]
 800ae54:	4606      	mov	r6, r0
 800ae56:	b9ad      	cbnz	r5, 800ae84 <rmw_uxrce_init_wait_set_memory+0x38>
 800ae58:	231c      	movs	r3, #28
 800ae5a:	e9c0 5500 	strd	r5, r5, [r0]
 800ae5e:	6083      	str	r3, [r0, #8]
 800ae60:	f240 1301 	movw	r3, #257	@ 0x101
 800ae64:	4617      	mov	r7, r2
 800ae66:	8183      	strh	r3, [r0, #12]
 800ae68:	460c      	mov	r4, r1
 800ae6a:	46a8      	mov	r8, r5
 800ae6c:	4621      	mov	r1, r4
 800ae6e:	4630      	mov	r0, r6
 800ae70:	3501      	adds	r5, #1
 800ae72:	f007 ff2f 	bl	8012cd4 <put_memory>
 800ae76:	42af      	cmp	r7, r5
 800ae78:	60a4      	str	r4, [r4, #8]
 800ae7a:	f884 800c 	strb.w	r8, [r4, #12]
 800ae7e:	f104 041c 	add.w	r4, r4, #28
 800ae82:	d1f3      	bne.n	800ae6c <rmw_uxrce_init_wait_set_memory+0x20>
 800ae84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop

0800ae8c <rmw_uxrce_init_guard_condition_memory>:
 800ae8c:	b1e2      	cbz	r2, 800aec8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800ae8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae92:	7b05      	ldrb	r5, [r0, #12]
 800ae94:	4606      	mov	r6, r0
 800ae96:	b9ad      	cbnz	r5, 800aec4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800ae98:	2320      	movs	r3, #32
 800ae9a:	e9c0 5500 	strd	r5, r5, [r0]
 800ae9e:	6083      	str	r3, [r0, #8]
 800aea0:	f240 1301 	movw	r3, #257	@ 0x101
 800aea4:	4617      	mov	r7, r2
 800aea6:	8183      	strh	r3, [r0, #12]
 800aea8:	460c      	mov	r4, r1
 800aeaa:	46a8      	mov	r8, r5
 800aeac:	4621      	mov	r1, r4
 800aeae:	4630      	mov	r0, r6
 800aeb0:	3501      	adds	r5, #1
 800aeb2:	f007 ff0f 	bl	8012cd4 <put_memory>
 800aeb6:	42af      	cmp	r7, r5
 800aeb8:	60a4      	str	r4, [r4, #8]
 800aeba:	f884 800c 	strb.w	r8, [r4, #12]
 800aebe:	f104 0420 	add.w	r4, r4, #32
 800aec2:	d1f3      	bne.n	800aeac <rmw_uxrce_init_guard_condition_memory+0x20>
 800aec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop

0800aecc <rmw_uxrce_fini_session_memory>:
 800aecc:	4601      	mov	r1, r0
 800aece:	4801      	ldr	r0, [pc, #4]	@ (800aed4 <rmw_uxrce_fini_session_memory+0x8>)
 800aed0:	f007 bf00 	b.w	8012cd4 <put_memory>
 800aed4:	20010ab0 	.word	0x20010ab0

0800aed8 <rmw_uxrce_fini_node_memory>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	4604      	mov	r4, r0
 800aedc:	6800      	ldr	r0, [r0, #0]
 800aede:	b128      	cbz	r0, 800aeec <rmw_uxrce_fini_node_memory+0x14>
 800aee0:	4b07      	ldr	r3, [pc, #28]	@ (800af00 <rmw_uxrce_fini_node_memory+0x28>)
 800aee2:	6819      	ldr	r1, [r3, #0]
 800aee4:	f7f5 f97c 	bl	80001e0 <strcmp>
 800aee8:	b940      	cbnz	r0, 800aefc <rmw_uxrce_fini_node_memory+0x24>
 800aeea:	6020      	str	r0, [r4, #0]
 800aeec:	6861      	ldr	r1, [r4, #4]
 800aeee:	b129      	cbz	r1, 800aefc <rmw_uxrce_fini_node_memory+0x24>
 800aef0:	2500      	movs	r5, #0
 800aef2:	4804      	ldr	r0, [pc, #16]	@ (800af04 <rmw_uxrce_fini_node_memory+0x2c>)
 800aef4:	610d      	str	r5, [r1, #16]
 800aef6:	f007 feed 	bl	8012cd4 <put_memory>
 800aefa:	6065      	str	r5, [r4, #4]
 800aefc:	bd38      	pop	{r3, r4, r5, pc}
 800aefe:	bf00      	nop
 800af00:	08019f04 	.word	0x08019f04
 800af04:	2000f4f4 	.word	0x2000f4f4

0800af08 <rmw_uxrce_fini_publisher_memory>:
 800af08:	b510      	push	{r4, lr}
 800af0a:	4604      	mov	r4, r0
 800af0c:	6800      	ldr	r0, [r0, #0]
 800af0e:	b128      	cbz	r0, 800af1c <rmw_uxrce_fini_publisher_memory+0x14>
 800af10:	4b06      	ldr	r3, [pc, #24]	@ (800af2c <rmw_uxrce_fini_publisher_memory+0x24>)
 800af12:	6819      	ldr	r1, [r3, #0]
 800af14:	f7f5 f964 	bl	80001e0 <strcmp>
 800af18:	b938      	cbnz	r0, 800af2a <rmw_uxrce_fini_publisher_memory+0x22>
 800af1a:	6020      	str	r0, [r4, #0]
 800af1c:	6861      	ldr	r1, [r4, #4]
 800af1e:	b121      	cbz	r1, 800af2a <rmw_uxrce_fini_publisher_memory+0x22>
 800af20:	4803      	ldr	r0, [pc, #12]	@ (800af30 <rmw_uxrce_fini_publisher_memory+0x28>)
 800af22:	f007 fed7 	bl	8012cd4 <put_memory>
 800af26:	2300      	movs	r3, #0
 800af28:	6063      	str	r3, [r4, #4]
 800af2a:	bd10      	pop	{r4, pc}
 800af2c:	08019f04 	.word	0x08019f04
 800af30:	2000f440 	.word	0x2000f440

0800af34 <rmw_uxrce_fini_subscription_memory>:
 800af34:	b510      	push	{r4, lr}
 800af36:	4604      	mov	r4, r0
 800af38:	6800      	ldr	r0, [r0, #0]
 800af3a:	b128      	cbz	r0, 800af48 <rmw_uxrce_fini_subscription_memory+0x14>
 800af3c:	4b06      	ldr	r3, [pc, #24]	@ (800af58 <rmw_uxrce_fini_subscription_memory+0x24>)
 800af3e:	6819      	ldr	r1, [r3, #0]
 800af40:	f7f5 f94e 	bl	80001e0 <strcmp>
 800af44:	b938      	cbnz	r0, 800af56 <rmw_uxrce_fini_subscription_memory+0x22>
 800af46:	6020      	str	r0, [r4, #0]
 800af48:	6861      	ldr	r1, [r4, #4]
 800af4a:	b121      	cbz	r1, 800af56 <rmw_uxrce_fini_subscription_memory+0x22>
 800af4c:	4803      	ldr	r0, [pc, #12]	@ (800af5c <rmw_uxrce_fini_subscription_memory+0x28>)
 800af4e:	f007 fec1 	bl	8012cd4 <put_memory>
 800af52:	2300      	movs	r3, #0
 800af54:	6063      	str	r3, [r4, #4]
 800af56:	bd10      	pop	{r4, pc}
 800af58:	08019f04 	.word	0x08019f04
 800af5c:	2000ebc0 	.word	0x2000ebc0

0800af60 <rmw_uxrce_fini_service_memory>:
 800af60:	b510      	push	{r4, lr}
 800af62:	4604      	mov	r4, r0
 800af64:	6800      	ldr	r0, [r0, #0]
 800af66:	b128      	cbz	r0, 800af74 <rmw_uxrce_fini_service_memory+0x14>
 800af68:	4b06      	ldr	r3, [pc, #24]	@ (800af84 <rmw_uxrce_fini_service_memory+0x24>)
 800af6a:	6819      	ldr	r1, [r3, #0]
 800af6c:	f7f5 f938 	bl	80001e0 <strcmp>
 800af70:	b938      	cbnz	r0, 800af82 <rmw_uxrce_fini_service_memory+0x22>
 800af72:	6020      	str	r0, [r4, #0]
 800af74:	6861      	ldr	r1, [r4, #4]
 800af76:	b121      	cbz	r1, 800af82 <rmw_uxrce_fini_service_memory+0x22>
 800af78:	4803      	ldr	r0, [pc, #12]	@ (800af88 <rmw_uxrce_fini_service_memory+0x28>)
 800af7a:	f007 feab 	bl	8012cd4 <put_memory>
 800af7e:	2300      	movs	r3, #0
 800af80:	6063      	str	r3, [r4, #4]
 800af82:	bd10      	pop	{r4, pc}
 800af84:	08019f04 	.word	0x08019f04
 800af88:	2000e778 	.word	0x2000e778

0800af8c <rmw_uxrce_fini_client_memory>:
 800af8c:	b510      	push	{r4, lr}
 800af8e:	4604      	mov	r4, r0
 800af90:	6800      	ldr	r0, [r0, #0]
 800af92:	b128      	cbz	r0, 800afa0 <rmw_uxrce_fini_client_memory+0x14>
 800af94:	4b06      	ldr	r3, [pc, #24]	@ (800afb0 <rmw_uxrce_fini_client_memory+0x24>)
 800af96:	6819      	ldr	r1, [r3, #0]
 800af98:	f7f5 f922 	bl	80001e0 <strcmp>
 800af9c:	b938      	cbnz	r0, 800afae <rmw_uxrce_fini_client_memory+0x22>
 800af9e:	6020      	str	r0, [r4, #0]
 800afa0:	6861      	ldr	r1, [r4, #4]
 800afa2:	b121      	cbz	r1, 800afae <rmw_uxrce_fini_client_memory+0x22>
 800afa4:	4803      	ldr	r0, [pc, #12]	@ (800afb4 <rmw_uxrce_fini_client_memory+0x28>)
 800afa6:	f007 fe95 	bl	8012cd4 <put_memory>
 800afaa:	2300      	movs	r3, #0
 800afac:	6063      	str	r3, [r4, #4]
 800afae:	bd10      	pop	{r4, pc}
 800afb0:	08019f04 	.word	0x08019f04
 800afb4:	2000e6a0 	.word	0x2000e6a0

0800afb8 <rmw_uxrce_fini_topic_memory>:
 800afb8:	b510      	push	{r4, lr}
 800afba:	4604      	mov	r4, r0
 800afbc:	4621      	mov	r1, r4
 800afbe:	4803      	ldr	r0, [pc, #12]	@ (800afcc <rmw_uxrce_fini_topic_memory+0x14>)
 800afc0:	f007 fe88 	bl	8012cd4 <put_memory>
 800afc4:	2300      	movs	r3, #0
 800afc6:	61a3      	str	r3, [r4, #24]
 800afc8:	bd10      	pop	{r4, pc}
 800afca:	bf00      	nop
 800afcc:	2000e5c4 	.word	0x2000e5c4

0800afd0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800afd0:	b082      	sub	sp, #8
 800afd2:	b530      	push	{r4, r5, lr}
 800afd4:	4929      	ldr	r1, [pc, #164]	@ (800b07c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800afd6:	ac03      	add	r4, sp, #12
 800afd8:	e884 000c 	stmia.w	r4, {r2, r3}
 800afdc:	680c      	ldr	r4, [r1, #0]
 800afde:	461d      	mov	r5, r3
 800afe0:	4602      	mov	r2, r0
 800afe2:	2c00      	cmp	r4, #0
 800afe4:	d043      	beq.n	800b06e <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 800afe6:	4620      	mov	r0, r4
 800afe8:	2100      	movs	r1, #0
 800afea:	6883      	ldr	r3, [r0, #8]
 800afec:	6840      	ldr	r0, [r0, #4]
 800afee:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800aff2:	429a      	cmp	r2, r3
 800aff4:	bf08      	it	eq
 800aff6:	3101      	addeq	r1, #1
 800aff8:	2800      	cmp	r0, #0
 800affa:	d1f6      	bne.n	800afea <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800affc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b000:	2b02      	cmp	r3, #2
 800b002:	d027      	beq.n	800b054 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 800b004:	d906      	bls.n	800b014 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b006:	2b03      	cmp	r3, #3
 800b008:	d004      	beq.n	800b014 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b00a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b00e:	2000      	movs	r0, #0
 800b010:	b002      	add	sp, #8
 800b012:	4770      	bx	lr
 800b014:	b1fd      	cbz	r5, 800b056 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b016:	428d      	cmp	r5, r1
 800b018:	d81d      	bhi.n	800b056 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b01a:	2c00      	cmp	r4, #0
 800b01c:	d0f5      	beq.n	800b00a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800b01e:	2000      	movs	r0, #0
 800b020:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800b024:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800b028:	e001      	b.n	800b02e <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800b02a:	6864      	ldr	r4, [r4, #4]
 800b02c:	b1dc      	cbz	r4, 800b066 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800b02e:	68a3      	ldr	r3, [r4, #8]
 800b030:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800b034:	428a      	cmp	r2, r1
 800b036:	d1f8      	bne.n	800b02a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b038:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800b03c:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800b040:	4561      	cmp	r1, ip
 800b042:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b046:	eb73 0e05 	sbcs.w	lr, r3, r5
 800b04a:	daee      	bge.n	800b02a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b04c:	468c      	mov	ip, r1
 800b04e:	461d      	mov	r5, r3
 800b050:	4620      	mov	r0, r4
 800b052:	e7ea      	b.n	800b02a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b054:	b92d      	cbnz	r5, 800b062 <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 800b056:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b05a:	4808      	ldr	r0, [pc, #32]	@ (800b07c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800b05c:	b002      	add	sp, #8
 800b05e:	f007 be29 	b.w	8012cb4 <get_memory>
 800b062:	428d      	cmp	r5, r1
 800b064:	d8f7      	bhi.n	800b056 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b066:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b06a:	b002      	add	sp, #8
 800b06c:	4770      	bx	lr
 800b06e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b072:	2b02      	cmp	r3, #2
 800b074:	d0ef      	beq.n	800b056 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b076:	d9ee      	bls.n	800b056 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b078:	4621      	mov	r1, r4
 800b07a:	e7c4      	b.n	800b006 <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 800b07c:	2000e410 	.word	0x2000e410

0800b080 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800b080:	4b11      	ldr	r3, [pc, #68]	@ (800b0c8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	b1eb      	cbz	r3, 800b0c2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800b086:	b530      	push	{r4, r5, lr}
 800b088:	4684      	mov	ip, r0
 800b08a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b08e:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800b092:	2000      	movs	r0, #0
 800b094:	e001      	b.n	800b09a <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	b193      	cbz	r3, 800b0c0 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800b09a:	689a      	ldr	r2, [r3, #8]
 800b09c:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800b0a0:	458c      	cmp	ip, r1
 800b0a2:	d1f8      	bne.n	800b096 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800b0a4:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800b0a8:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800b0ac:	42a1      	cmp	r1, r4
 800b0ae:	eb72 050e 	sbcs.w	r5, r2, lr
 800b0b2:	daf0      	bge.n	800b096 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	460c      	mov	r4, r1
 800b0ba:	4696      	mov	lr, r2
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1ec      	bne.n	800b09a <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800b0c0:	bd30      	pop	{r4, r5, pc}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	2000e410 	.word	0x2000e410
 800b0cc:	00000000 	.word	0x00000000

0800b0d0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800b0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d4:	4b3c      	ldr	r3, [pc, #240]	@ (800b1c8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b0d6:	ed2d 8b06 	vpush	{d8-d10}
 800b0da:	f8d3 8000 	ldr.w	r8, [r3]
 800b0de:	b08d      	sub	sp, #52	@ 0x34
 800b0e0:	f7ff fd74 	bl	800abcc <rmw_uros_epoch_nanos>
 800b0e4:	f1b8 0f00 	cmp.w	r8, #0
 800b0e8:	d05c      	beq.n	800b1a4 <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800b0ea:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b0ee:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800b0f2:	2b04      	cmp	r3, #4
 800b0f4:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 800b1b0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800b0f8:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 800b1b8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800b0fc:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 800b1c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800b100:	4683      	mov	fp, r0
 800b102:	ac04      	add	r4, sp, #16
 800b104:	468a      	mov	sl, r1
 800b106:	d03f      	beq.n	800b188 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800b108:	2b05      	cmp	r3, #5
 800b10a:	d044      	beq.n	800b196 <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 800b10c:	2b03      	cmp	r3, #3
 800b10e:	d03b      	beq.n	800b188 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800b110:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b114:	ed8d ab06 	vstr	d10, [sp, #24]
 800b118:	ed8d 8b08 	vstr	d8, [sp, #32]
 800b11c:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800b120:	ab08      	add	r3, sp, #32
 800b122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b124:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b128:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b12c:	f007 fbf8 	bl	8012920 <rmw_time_equal>
 800b130:	b118      	cbz	r0, 800b13a <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 800b132:	ed8d 9b04 	vstr	d9, [sp, #16]
 800b136:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b13a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b13e:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 800b142:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 800b146:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800b14a:	f007 fc3d 	bl	80129c8 <rmw_time_total_nsec>
 800b14e:	183f      	adds	r7, r7, r0
 800b150:	eb46 0601 	adc.w	r6, r6, r1
 800b154:	455f      	cmp	r7, fp
 800b156:	eb76 060a 	sbcs.w	r6, r6, sl
 800b15a:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800b15e:	db05      	blt.n	800b16c <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 800b160:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800b164:	4593      	cmp	fp, r2
 800b166:	eb7a 0303 	sbcs.w	r3, sl, r3
 800b16a:	da03      	bge.n	800b174 <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 800b16c:	4816      	ldr	r0, [pc, #88]	@ (800b1c8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b16e:	4641      	mov	r1, r8
 800b170:	f007 fdb0 	bl	8012cd4 <put_memory>
 800b174:	f1b9 0f00 	cmp.w	r9, #0
 800b178:	d014      	beq.n	800b1a4 <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800b17a:	46c8      	mov	r8, r9
 800b17c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b180:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800b184:	2b04      	cmp	r3, #4
 800b186:	d1bf      	bne.n	800b108 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 800b188:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800b18c:	3340      	adds	r3, #64	@ 0x40
 800b18e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b190:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b194:	e7c0      	b.n	800b118 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800b196:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800b19a:	3348      	adds	r3, #72	@ 0x48
 800b19c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b19e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b1a2:	e7b9      	b.n	800b118 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800b1a4:	b00d      	add	sp, #52	@ 0x34
 800b1a6:	ecbd 8b06 	vpop	{d8-d10}
 800b1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ae:	bf00      	nop
	...
 800b1b8:	00000001 	.word	0x00000001
 800b1bc:	00000000 	.word	0x00000000
 800b1c0:	0000001e 	.word	0x0000001e
 800b1c4:	00000000 	.word	0x00000000
 800b1c8:	2000e410 	.word	0x2000e410

0800b1cc <run_xrce_session>:
 800b1cc:	b500      	push	{lr}
 800b1ce:	f891 c002 	ldrb.w	ip, [r1, #2]
 800b1d2:	b087      	sub	sp, #28
 800b1d4:	f1bc 0f01 	cmp.w	ip, #1
 800b1d8:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b1dc:	d00f      	beq.n	800b1fe <run_xrce_session+0x32>
 800b1de:	4619      	mov	r1, r3
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	f10d 020e 	add.w	r2, sp, #14
 800b1e8:	f10d 0317 	add.w	r3, sp, #23
 800b1ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b1f0:	f001 ff8c 	bl	800d10c <uxr_run_session_until_all_status>
 800b1f4:	b100      	cbz	r0, 800b1f8 <run_xrce_session+0x2c>
 800b1f6:	2001      	movs	r0, #1
 800b1f8:	b007      	add	sp, #28
 800b1fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b202:	f001 fbc5 	bl	800c990 <uxr_flash_output_streams>
 800b206:	2001      	movs	r0, #1
 800b208:	e7f6      	b.n	800b1f8 <run_xrce_session+0x2c>
 800b20a:	bf00      	nop

0800b20c <convert_qos_profile>:
 800b20c:	780a      	ldrb	r2, [r1, #0]
 800b20e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b212:	f1a2 0202 	sub.w	r2, r2, #2
 800b216:	fab2 f282 	clz	r2, r2
 800b21a:	0952      	lsrs	r2, r2, #5
 800b21c:	7082      	strb	r2, [r0, #2]
 800b21e:	7a4a      	ldrb	r2, [r1, #9]
 800b220:	8889      	ldrh	r1, [r1, #4]
 800b222:	8081      	strh	r1, [r0, #4]
 800b224:	f1a2 0202 	sub.w	r2, r2, #2
 800b228:	f1ac 0c02 	sub.w	ip, ip, #2
 800b22c:	fab2 f282 	clz	r2, r2
 800b230:	fabc fc8c 	clz	ip, ip
 800b234:	0952      	lsrs	r2, r2, #5
 800b236:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800b23a:	0052      	lsls	r2, r2, #1
 800b23c:	f880 c001 	strb.w	ip, [r0, #1]
 800b240:	7002      	strb	r2, [r0, #0]
 800b242:	4770      	bx	lr

0800b244 <generate_type_name>:
 800b244:	b530      	push	{r4, r5, lr}
 800b246:	2300      	movs	r3, #0
 800b248:	700b      	strb	r3, [r1, #0]
 800b24a:	6803      	ldr	r3, [r0, #0]
 800b24c:	b087      	sub	sp, #28
 800b24e:	4614      	mov	r4, r2
 800b250:	b1d3      	cbz	r3, 800b288 <generate_type_name+0x44>
 800b252:	4a0f      	ldr	r2, [pc, #60]	@ (800b290 <generate_type_name+0x4c>)
 800b254:	4615      	mov	r5, r2
 800b256:	9203      	str	r2, [sp, #12]
 800b258:	9500      	str	r5, [sp, #0]
 800b25a:	6842      	ldr	r2, [r0, #4]
 800b25c:	480d      	ldr	r0, [pc, #52]	@ (800b294 <generate_type_name+0x50>)
 800b25e:	9001      	str	r0, [sp, #4]
 800b260:	4608      	mov	r0, r1
 800b262:	490d      	ldr	r1, [pc, #52]	@ (800b298 <generate_type_name+0x54>)
 800b264:	9204      	str	r2, [sp, #16]
 800b266:	9105      	str	r1, [sp, #20]
 800b268:	9102      	str	r1, [sp, #8]
 800b26a:	4a0c      	ldr	r2, [pc, #48]	@ (800b29c <generate_type_name+0x58>)
 800b26c:	4621      	mov	r1, r4
 800b26e:	f00c fc67 	bl	8017b40 <sniprintf>
 800b272:	2800      	cmp	r0, #0
 800b274:	db05      	blt.n	800b282 <generate_type_name+0x3e>
 800b276:	4284      	cmp	r4, r0
 800b278:	bfd4      	ite	le
 800b27a:	2000      	movle	r0, #0
 800b27c:	2001      	movgt	r0, #1
 800b27e:	b007      	add	sp, #28
 800b280:	bd30      	pop	{r4, r5, pc}
 800b282:	2000      	movs	r0, #0
 800b284:	b007      	add	sp, #28
 800b286:	bd30      	pop	{r4, r5, pc}
 800b288:	4b05      	ldr	r3, [pc, #20]	@ (800b2a0 <generate_type_name+0x5c>)
 800b28a:	4a01      	ldr	r2, [pc, #4]	@ (800b290 <generate_type_name+0x4c>)
 800b28c:	461d      	mov	r5, r3
 800b28e:	e7e2      	b.n	800b256 <generate_type_name+0x12>
 800b290:	08019048 	.word	0x08019048
 800b294:	08019060 	.word	0x08019060
 800b298:	0801905c 	.word	0x0801905c
 800b29c:	0801904c 	.word	0x0801904c
 800b2a0:	080195fc 	.word	0x080195fc

0800b2a4 <generate_topic_name>:
 800b2a4:	b510      	push	{r4, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	4614      	mov	r4, r2
 800b2aa:	9000      	str	r0, [sp, #0]
 800b2ac:	4b08      	ldr	r3, [pc, #32]	@ (800b2d0 <generate_topic_name+0x2c>)
 800b2ae:	4a09      	ldr	r2, [pc, #36]	@ (800b2d4 <generate_topic_name+0x30>)
 800b2b0:	4608      	mov	r0, r1
 800b2b2:	4621      	mov	r1, r4
 800b2b4:	f00c fc44 	bl	8017b40 <sniprintf>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	db05      	blt.n	800b2c8 <generate_topic_name+0x24>
 800b2bc:	4284      	cmp	r4, r0
 800b2be:	bfd4      	ite	le
 800b2c0:	2000      	movle	r0, #0
 800b2c2:	2001      	movgt	r0, #1
 800b2c4:	b002      	add	sp, #8
 800b2c6:	bd10      	pop	{r4, pc}
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	b002      	add	sp, #8
 800b2cc:	bd10      	pop	{r4, pc}
 800b2ce:	bf00      	nop
 800b2d0:	08019a9c 	.word	0x08019a9c
 800b2d4:	08019064 	.word	0x08019064

0800b2d8 <is_uxrce_rmw_identifier_valid>:
 800b2d8:	b510      	push	{r4, lr}
 800b2da:	4604      	mov	r4, r0
 800b2dc:	b140      	cbz	r0, 800b2f0 <is_uxrce_rmw_identifier_valid+0x18>
 800b2de:	f007 fd6f 	bl	8012dc0 <rmw_get_implementation_identifier>
 800b2e2:	4601      	mov	r1, r0
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f7f4 ff7b 	bl	80001e0 <strcmp>
 800b2ea:	fab0 f080 	clz	r0, r0
 800b2ee:	0940      	lsrs	r0, r0, #5
 800b2f0:	bd10      	pop	{r4, pc}
 800b2f2:	bf00      	nop

0800b2f4 <get_message_typesupport_handle>:
 800b2f4:	6883      	ldr	r3, [r0, #8]
 800b2f6:	4718      	bx	r3

0800b2f8 <get_message_typesupport_handle_function>:
 800b2f8:	b510      	push	{r4, lr}
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	6800      	ldr	r0, [r0, #0]
 800b2fe:	f7f4 ff6f 	bl	80001e0 <strcmp>
 800b302:	2800      	cmp	r0, #0
 800b304:	bf0c      	ite	eq
 800b306:	4620      	moveq	r0, r4
 800b308:	2000      	movne	r0, #0
 800b30a:	bd10      	pop	{r4, pc}

0800b30c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800b30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b310:	6805      	ldr	r5, [r0, #0]
 800b312:	4604      	mov	r4, r0
 800b314:	4628      	mov	r0, r5
 800b316:	460e      	mov	r6, r1
 800b318:	f7f4 ff62 	bl	80001e0 <strcmp>
 800b31c:	b308      	cbz	r0, 800b362 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800b31e:	4b12      	ldr	r3, [pc, #72]	@ (800b368 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 800b320:	4628      	mov	r0, r5
 800b322:	6819      	ldr	r1, [r3, #0]
 800b324:	f7f4 ff5c 	bl	80001e0 <strcmp>
 800b328:	4605      	mov	r5, r0
 800b32a:	b980      	cbnz	r0, 800b34e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 800b32c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800b330:	f8d8 4000 	ldr.w	r4, [r8]
 800b334:	b1ac      	cbz	r4, 800b362 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800b336:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800b33a:	3f04      	subs	r7, #4
 800b33c:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800b340:	4631      	mov	r1, r6
 800b342:	f7f4 ff4d 	bl	80001e0 <strcmp>
 800b346:	b128      	cbz	r0, 800b354 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 800b348:	3501      	adds	r5, #1
 800b34a:	42a5      	cmp	r5, r4
 800b34c:	d1f6      	bne.n	800b33c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 800b34e:	2000      	movs	r0, #0
 800b350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b354:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b358:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b35c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b360:	4718      	bx	r3
 800b362:	4620      	mov	r0, r4
 800b364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b368:	20000378 	.word	0x20000378

0800b36c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800b36c:	f008 be9e 	b.w	80140ac <std_msgs__msg__Header__init>

0800b370 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800b370:	f008 bebc 	b.w	80140ec <std_msgs__msg__Header__fini>

0800b374 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800b374:	b508      	push	{r3, lr}
 800b376:	f000 f9bb 	bl	800b6f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800b37a:	4b06      	ldr	r3, [pc, #24]	@ (800b394 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800b37c:	4906      	ldr	r1, [pc, #24]	@ (800b398 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	60c8      	str	r0, [r1, #12]
 800b382:	b10a      	cbz	r2, 800b388 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800b384:	4803      	ldr	r0, [pc, #12]	@ (800b394 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800b386:	bd08      	pop	{r3, pc}
 800b388:	4a04      	ldr	r2, [pc, #16]	@ (800b39c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800b38a:	4802      	ldr	r0, [pc, #8]	@ (800b394 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800b38c:	6812      	ldr	r2, [r2, #0]
 800b38e:	601a      	str	r2, [r3, #0]
 800b390:	bd08      	pop	{r3, pc}
 800b392:	bf00      	nop
 800b394:	20000380 	.word	0x20000380
 800b398:	20000398 	.word	0x20000398
 800b39c:	2000037c 	.word	0x2000037c

0800b3a0 <_Header__max_serialized_size>:
 800b3a0:	b500      	push	{lr}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	2100      	movs	r1, #0
 800b3a8:	f10d 0007 	add.w	r0, sp, #7
 800b3ac:	f88d 3007 	strb.w	r3, [sp, #7]
 800b3b0:	f000 f9fc 	bl	800b7ac <max_serialized_size_builtin_interfaces__msg__Time>
 800b3b4:	b003      	add	sp, #12
 800b3b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b3ba:	bf00      	nop

0800b3bc <get_serialized_size_std_msgs__msg__Header>:
 800b3bc:	b570      	push	{r4, r5, r6, lr}
 800b3be:	4605      	mov	r5, r0
 800b3c0:	b168      	cbz	r0, 800b3de <get_serialized_size_std_msgs__msg__Header+0x22>
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	f000 f9a2 	bl	800b70c <get_serialized_size_builtin_interfaces__msg__Time>
 800b3c8:	1826      	adds	r6, r4, r0
 800b3ca:	2104      	movs	r1, #4
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	f7fd ffe3 	bl	8009398 <ucdr_alignment>
 800b3d2:	68eb      	ldr	r3, [r5, #12]
 800b3d4:	f1c4 0405 	rsb	r4, r4, #5
 800b3d8:	441c      	add	r4, r3
 800b3da:	4404      	add	r4, r0
 800b3dc:	19a0      	adds	r0, r4, r6
 800b3de:	bd70      	pop	{r4, r5, r6, pc}

0800b3e0 <_Header__cdr_deserialize>:
 800b3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	b083      	sub	sp, #12
 800b3e6:	b1e1      	cbz	r1, 800b422 <_Header__cdr_deserialize+0x42>
 800b3e8:	4606      	mov	r6, r0
 800b3ea:	f000 f9f3 	bl	800b7d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800b3ee:	6843      	ldr	r3, [r0, #4]
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	4630      	mov	r0, r6
 800b3f6:	4798      	blx	r3
 800b3f8:	6927      	ldr	r7, [r4, #16]
 800b3fa:	68a1      	ldr	r1, [r4, #8]
 800b3fc:	ab01      	add	r3, sp, #4
 800b3fe:	463a      	mov	r2, r7
 800b400:	4630      	mov	r0, r6
 800b402:	f000 ff75 	bl	800c2f0 <ucdr_deserialize_sequence_char>
 800b406:	9b01      	ldr	r3, [sp, #4]
 800b408:	4605      	mov	r5, r0
 800b40a:	b920      	cbnz	r0, 800b416 <_Header__cdr_deserialize+0x36>
 800b40c:	429f      	cmp	r7, r3
 800b40e:	d30c      	bcc.n	800b42a <_Header__cdr_deserialize+0x4a>
 800b410:	4628      	mov	r0, r5
 800b412:	b003      	add	sp, #12
 800b414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b416:	b103      	cbz	r3, 800b41a <_Header__cdr_deserialize+0x3a>
 800b418:	3b01      	subs	r3, #1
 800b41a:	4628      	mov	r0, r5
 800b41c:	60e3      	str	r3, [r4, #12]
 800b41e:	b003      	add	sp, #12
 800b420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b422:	460d      	mov	r5, r1
 800b424:	4628      	mov	r0, r5
 800b426:	b003      	add	sp, #12
 800b428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b42a:	2101      	movs	r1, #1
 800b42c:	75b0      	strb	r0, [r6, #22]
 800b42e:	7571      	strb	r1, [r6, #21]
 800b430:	60e0      	str	r0, [r4, #12]
 800b432:	4630      	mov	r0, r6
 800b434:	f7fd ffc6 	bl	80093c4 <ucdr_align_to>
 800b438:	4630      	mov	r0, r6
 800b43a:	9901      	ldr	r1, [sp, #4]
 800b43c:	f7fd fff8 	bl	8009430 <ucdr_advance_buffer>
 800b440:	4628      	mov	r0, r5
 800b442:	b003      	add	sp, #12
 800b444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b446:	bf00      	nop

0800b448 <_Header__cdr_serialize>:
 800b448:	b1f8      	cbz	r0, 800b48a <_Header__cdr_serialize+0x42>
 800b44a:	b570      	push	{r4, r5, r6, lr}
 800b44c:	4604      	mov	r4, r0
 800b44e:	460d      	mov	r5, r1
 800b450:	f000 f9c0 	bl	800b7d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800b454:	6843      	ldr	r3, [r0, #4]
 800b456:	4629      	mov	r1, r5
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	4620      	mov	r0, r4
 800b45c:	4798      	blx	r3
 800b45e:	68a6      	ldr	r6, [r4, #8]
 800b460:	b156      	cbz	r6, 800b478 <_Header__cdr_serialize+0x30>
 800b462:	4630      	mov	r0, r6
 800b464:	f7f4 ff1c 	bl	80002a0 <strlen>
 800b468:	4631      	mov	r1, r6
 800b46a:	60e0      	str	r0, [r4, #12]
 800b46c:	1c42      	adds	r2, r0, #1
 800b46e:	4628      	mov	r0, r5
 800b470:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b474:	f000 bf2a 	b.w	800c2cc <ucdr_serialize_sequence_char>
 800b478:	4630      	mov	r0, r6
 800b47a:	60e0      	str	r0, [r4, #12]
 800b47c:	4632      	mov	r2, r6
 800b47e:	4631      	mov	r1, r6
 800b480:	4628      	mov	r0, r5
 800b482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b486:	f000 bf21 	b.w	800c2cc <ucdr_serialize_sequence_char>
 800b48a:	4770      	bx	lr

0800b48c <_Header__get_serialized_size>:
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	4604      	mov	r4, r0
 800b490:	b150      	cbz	r0, 800b4a8 <_Header__get_serialized_size+0x1c>
 800b492:	2100      	movs	r1, #0
 800b494:	f000 f93a 	bl	800b70c <get_serialized_size_builtin_interfaces__msg__Time>
 800b498:	2104      	movs	r1, #4
 800b49a:	4605      	mov	r5, r0
 800b49c:	f7fd ff7c 	bl	8009398 <ucdr_alignment>
 800b4a0:	68e4      	ldr	r4, [r4, #12]
 800b4a2:	3405      	adds	r4, #5
 800b4a4:	442c      	add	r4, r5
 800b4a6:	4420      	add	r0, r4
 800b4a8:	bd38      	pop	{r3, r4, r5, pc}
 800b4aa:	bf00      	nop

0800b4ac <max_serialized_size_std_msgs__msg__Header>:
 800b4ac:	b510      	push	{r4, lr}
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	7003      	strb	r3, [r0, #0]
 800b4b4:	f000 f97a 	bl	800b7ac <max_serialized_size_builtin_interfaces__msg__Time>
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	7023      	strb	r3, [r4, #0]
 800b4bc:	bd10      	pop	{r4, pc}
 800b4be:	bf00      	nop

0800b4c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800b4c0:	4800      	ldr	r0, [pc, #0]	@ (800b4c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800b4c2:	4770      	bx	lr
 800b4c4:	20000410 	.word	0x20000410

0800b4c8 <rosidl_typesupport_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage>:
 800b4c8:	4b04      	ldr	r3, [pc, #16]	@ (800b4dc <rosidl_typesupport_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage+0x14>)
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	b10a      	cbz	r2, 800b4d2 <rosidl_typesupport_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage+0xa>
 800b4ce:	4803      	ldr	r0, [pc, #12]	@ (800b4dc <rosidl_typesupport_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage+0x14>)
 800b4d0:	4770      	bx	lr
 800b4d2:	4a03      	ldr	r2, [pc, #12]	@ (800b4e0 <rosidl_typesupport_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage+0x18>)
 800b4d4:	4801      	ldr	r0, [pc, #4]	@ (800b4dc <rosidl_typesupport_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage+0x14>)
 800b4d6:	6812      	ldr	r2, [r2, #0]
 800b4d8:	601a      	str	r2, [r3, #0]
 800b4da:	4770      	bx	lr
 800b4dc:	20000444 	.word	0x20000444
 800b4e0:	20000378 	.word	0x20000378

0800b4e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage>:
 800b4e4:	4a02      	ldr	r2, [pc, #8]	@ (800b4f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage+0xc>)
 800b4e6:	4b03      	ldr	r3, [pc, #12]	@ (800b4f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage+0x10>)
 800b4e8:	6812      	ldr	r2, [r2, #0]
 800b4ea:	601a      	str	r2, [r3, #0]
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop
 800b4f0:	20000378 	.word	0x20000378
 800b4f4:	20000444 	.word	0x20000444

0800b4f8 <tf2_msgs__msg__TFMessage__rosidl_typesupport_introspection_c__size_function__TFMessage__transforms>:
 800b4f8:	6840      	ldr	r0, [r0, #4]
 800b4fa:	4770      	bx	lr

0800b4fc <tf2_msgs__msg__TFMessage__rosidl_typesupport_introspection_c__get_const_function__TFMessage__transforms>:
 800b4fc:	6803      	ldr	r3, [r0, #0]
 800b4fe:	2058      	movs	r0, #88	@ 0x58
 800b500:	fb00 3001 	mla	r0, r0, r1, r3
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop

0800b508 <tf2_msgs__msg__TFMessage__rosidl_typesupport_introspection_c__fetch_function__TFMessage__transforms>:
 800b508:	b508      	push	{r3, lr}
 800b50a:	6800      	ldr	r0, [r0, #0]
 800b50c:	4613      	mov	r3, r2
 800b50e:	2258      	movs	r2, #88	@ 0x58
 800b510:	fb02 0101 	mla	r1, r2, r1, r0
 800b514:	4618      	mov	r0, r3
 800b516:	f00c fd62 	bl	8017fde <memcpy>
 800b51a:	bd08      	pop	{r3, pc}

0800b51c <tf2_msgs__msg__TFMessage__rosidl_typesupport_introspection_c__assign_function__TFMessage__transforms>:
 800b51c:	b508      	push	{r3, lr}
 800b51e:	6800      	ldr	r0, [r0, #0]
 800b520:	468c      	mov	ip, r1
 800b522:	4611      	mov	r1, r2
 800b524:	2258      	movs	r2, #88	@ 0x58
 800b526:	fb02 000c 	mla	r0, r2, ip, r0
 800b52a:	f00c fd58 	bl	8017fde <memcpy>
 800b52e:	bd08      	pop	{r3, pc}

0800b530 <tf2_msgs__msg__TFMessage__rosidl_typesupport_introspection_c__TFMessage_init_function>:
 800b530:	f008 bea4 	b.w	801427c <tf2_msgs__msg__TFMessage__init>

0800b534 <tf2_msgs__msg__TFMessage__rosidl_typesupport_introspection_c__TFMessage_fini_function>:
 800b534:	f008 beb2 	b.w	801429c <tf2_msgs__msg__TFMessage__fini>

0800b538 <tf2_msgs__msg__TFMessage__rosidl_typesupport_introspection_c__resize_function__TFMessage__transforms>:
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	4604      	mov	r4, r0
 800b53c:	460d      	mov	r5, r1
 800b53e:	f000 fa0d 	bl	800b95c <geometry_msgs__msg__TransformStamped__Sequence__fini>
 800b542:	4629      	mov	r1, r5
 800b544:	4620      	mov	r0, r4
 800b546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b54a:	f000 b98f 	b.w	800b86c <geometry_msgs__msg__TransformStamped__Sequence__init>
 800b54e:	bf00      	nop

0800b550 <tf2_msgs__msg__TFMessage__rosidl_typesupport_introspection_c__get_function__TFMessage__transforms>:
 800b550:	6803      	ldr	r3, [r0, #0]
 800b552:	2058      	movs	r0, #88	@ 0x58
 800b554:	fb00 3001 	mla	r0, r0, r1, r3
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop

0800b55c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage>:
 800b55c:	b508      	push	{r3, lr}
 800b55e:	f000 fb0f 	bl	800bb80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TransformStamped>
 800b562:	4b06      	ldr	r3, [pc, #24]	@ (800b57c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage+0x20>)
 800b564:	4906      	ldr	r1, [pc, #24]	@ (800b580 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage+0x24>)
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	60c8      	str	r0, [r1, #12]
 800b56a:	b10a      	cbz	r2, 800b570 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage+0x14>
 800b56c:	4803      	ldr	r0, [pc, #12]	@ (800b57c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage+0x20>)
 800b56e:	bd08      	pop	{r3, pc}
 800b570:	4a04      	ldr	r2, [pc, #16]	@ (800b584 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage+0x28>)
 800b572:	4802      	ldr	r0, [pc, #8]	@ (800b57c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage+0x20>)
 800b574:	6812      	ldr	r2, [r2, #0]
 800b576:	601a      	str	r2, [r3, #0]
 800b578:	bd08      	pop	{r3, pc}
 800b57a:	bf00      	nop
 800b57c:	20000464 	.word	0x20000464
 800b580:	2000047c 	.word	0x2000047c
 800b584:	2000037c 	.word	0x2000037c

0800b588 <_TFMessage__max_serialized_size>:
 800b588:	2000      	movs	r0, #0
 800b58a:	4770      	bx	lr

0800b58c <_TFMessage__cdr_deserialize>:
 800b58c:	b319      	cbz	r1, 800b5d6 <_TFMessage__cdr_deserialize+0x4a>
 800b58e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b590:	460e      	mov	r6, r1
 800b592:	b083      	sub	sp, #12
 800b594:	a901      	add	r1, sp, #4
 800b596:	4607      	mov	r7, r0
 800b598:	f7fc ff80 	bl	800849c <ucdr_deserialize_uint32_t>
 800b59c:	9b01      	ldr	r3, [sp, #4]
 800b59e:	68b2      	ldr	r2, [r6, #8]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d315      	bcc.n	800b5d0 <_TFMessage__cdr_deserialize+0x44>
 800b5a4:	6073      	str	r3, [r6, #4]
 800b5a6:	b18b      	cbz	r3, 800b5cc <_TFMessage__cdr_deserialize+0x40>
 800b5a8:	2400      	movs	r4, #0
 800b5aa:	4625      	mov	r5, r4
 800b5ac:	e002      	b.n	800b5b4 <_TFMessage__cdr_deserialize+0x28>
 800b5ae:	9b01      	ldr	r3, [sp, #4]
 800b5b0:	42ab      	cmp	r3, r5
 800b5b2:	d90b      	bls.n	800b5cc <_TFMessage__cdr_deserialize+0x40>
 800b5b4:	f000 fc40 	bl	800be38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TransformStamped>
 800b5b8:	6831      	ldr	r1, [r6, #0]
 800b5ba:	6843      	ldr	r3, [r0, #4]
 800b5bc:	4421      	add	r1, r4
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	4638      	mov	r0, r7
 800b5c2:	4798      	blx	r3
 800b5c4:	3501      	adds	r5, #1
 800b5c6:	3458      	adds	r4, #88	@ 0x58
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	d1f0      	bne.n	800b5ae <_TFMessage__cdr_deserialize+0x22>
 800b5cc:	b003      	add	sp, #12
 800b5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	b003      	add	sp, #12
 800b5d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop

0800b5dc <_TFMessage__cdr_serialize>:
 800b5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5e0:	b1d8      	cbz	r0, 800b61a <_TFMessage__cdr_serialize+0x3e>
 800b5e2:	6847      	ldr	r7, [r0, #4]
 800b5e4:	460e      	mov	r6, r1
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	4608      	mov	r0, r1
 800b5ea:	4639      	mov	r1, r7
 800b5ec:	f7fc fe2c 	bl	8008248 <ucdr_serialize_uint32_t>
 800b5f0:	4680      	mov	r8, r0
 800b5f2:	b190      	cbz	r0, 800b61a <_TFMessage__cdr_serialize+0x3e>
 800b5f4:	b19f      	cbz	r7, 800b61e <_TFMessage__cdr_serialize+0x42>
 800b5f6:	2400      	movs	r4, #0
 800b5f8:	f04f 0958 	mov.w	r9, #88	@ 0x58
 800b5fc:	e002      	b.n	800b604 <_TFMessage__cdr_serialize+0x28>
 800b5fe:	3401      	adds	r4, #1
 800b600:	42a7      	cmp	r7, r4
 800b602:	d00c      	beq.n	800b61e <_TFMessage__cdr_serialize+0x42>
 800b604:	f000 fc18 	bl	800be38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TransformStamped>
 800b608:	682a      	ldr	r2, [r5, #0]
 800b60a:	6843      	ldr	r3, [r0, #4]
 800b60c:	4631      	mov	r1, r6
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	fb09 2004 	mla	r0, r9, r4, r2
 800b614:	4798      	blx	r3
 800b616:	2800      	cmp	r0, #0
 800b618:	d1f1      	bne.n	800b5fe <_TFMessage__cdr_serialize+0x22>
 800b61a:	f04f 0800 	mov.w	r8, #0
 800b61e:	4640      	mov	r0, r8
 800b620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b624 <get_serialized_size_tf2_msgs__msg__TFMessage>:
 800b624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b628:	4606      	mov	r6, r0
 800b62a:	b338      	cbz	r0, 800b67c <get_serialized_size_tf2_msgs__msg__TFMessage+0x58>
 800b62c:	4689      	mov	r9, r1
 800b62e:	4648      	mov	r0, r9
 800b630:	2104      	movs	r1, #4
 800b632:	6877      	ldr	r7, [r6, #4]
 800b634:	f7fd feb0 	bl	8009398 <ucdr_alignment>
 800b638:	f109 0504 	add.w	r5, r9, #4
 800b63c:	4405      	add	r5, r0
 800b63e:	b1df      	cbz	r7, 800b678 <get_serialized_size_tf2_msgs__msg__TFMessage+0x54>
 800b640:	f04f 0a00 	mov.w	sl, #0
 800b644:	f04f 0858 	mov.w	r8, #88	@ 0x58
 800b648:	f000 fbf6 	bl	800be38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TransformStamped>
 800b64c:	6832      	ldr	r2, [r6, #0]
 800b64e:	6843      	ldr	r3, [r0, #4]
 800b650:	4629      	mov	r1, r5
 800b652:	fb08 200a 	mla	r0, r8, sl, r2
 800b656:	695b      	ldr	r3, [r3, #20]
 800b658:	4798      	blx	r3
 800b65a:	2804      	cmp	r0, #4
 800b65c:	4601      	mov	r1, r0
 800b65e:	4604      	mov	r4, r0
 800b660:	bf28      	it	cs
 800b662:	2104      	movcs	r1, #4
 800b664:	4628      	mov	r0, r5
 800b666:	f7fd fe97 	bl	8009398 <ucdr_alignment>
 800b66a:	f10a 0a01 	add.w	sl, sl, #1
 800b66e:	442c      	add	r4, r5
 800b670:	4557      	cmp	r7, sl
 800b672:	eb00 0504 	add.w	r5, r0, r4
 800b676:	d1e7      	bne.n	800b648 <get_serialized_size_tf2_msgs__msg__TFMessage+0x24>
 800b678:	eba5 0009 	sub.w	r0, r5, r9
 800b67c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b680 <_TFMessage__get_serialized_size>:
 800b680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b684:	4607      	mov	r7, r0
 800b686:	b330      	cbz	r0, 800b6d6 <_TFMessage__get_serialized_size+0x56>
 800b688:	2104      	movs	r1, #4
 800b68a:	2000      	movs	r0, #0
 800b68c:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800b690:	f7fd fe82 	bl	8009398 <ucdr_alignment>
 800b694:	1d05      	adds	r5, r0, #4
 800b696:	f1b8 0f00 	cmp.w	r8, #0
 800b69a:	d019      	beq.n	800b6d0 <_TFMessage__get_serialized_size+0x50>
 800b69c:	2600      	movs	r6, #0
 800b69e:	f04f 0958 	mov.w	r9, #88	@ 0x58
 800b6a2:	f000 fbc9 	bl	800be38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TransformStamped>
 800b6a6:	683a      	ldr	r2, [r7, #0]
 800b6a8:	6843      	ldr	r3, [r0, #4]
 800b6aa:	4629      	mov	r1, r5
 800b6ac:	fb09 2006 	mla	r0, r9, r6, r2
 800b6b0:	695b      	ldr	r3, [r3, #20]
 800b6b2:	4798      	blx	r3
 800b6b4:	2804      	cmp	r0, #4
 800b6b6:	4601      	mov	r1, r0
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	bf28      	it	cs
 800b6bc:	2104      	movcs	r1, #4
 800b6be:	4628      	mov	r0, r5
 800b6c0:	f7fd fe6a 	bl	8009398 <ucdr_alignment>
 800b6c4:	3601      	adds	r6, #1
 800b6c6:	442c      	add	r4, r5
 800b6c8:	45b0      	cmp	r8, r6
 800b6ca:	eb00 0504 	add.w	r5, r0, r4
 800b6ce:	d1e8      	bne.n	800b6a2 <_TFMessage__get_serialized_size+0x22>
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6d6:	4605      	mov	r5, r0
 800b6d8:	4628      	mov	r0, r5
 800b6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6de:	bf00      	nop

0800b6e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage>:
 800b6e0:	4800      	ldr	r0, [pc, #0]	@ (800b6e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage+0x4>)
 800b6e2:	4770      	bx	lr
 800b6e4:	200004b8 	.word	0x200004b8

0800b6e8 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800b6e8:	f008 be0c 	b.w	8014304 <builtin_interfaces__msg__Time__init>

0800b6ec <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800b6ec:	f008 be0e 	b.w	801430c <builtin_interfaces__msg__Time__fini>

0800b6f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800b6f0:	4b04      	ldr	r3, [pc, #16]	@ (800b704 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	b10a      	cbz	r2, 800b6fa <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800b6f6:	4803      	ldr	r0, [pc, #12]	@ (800b704 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800b6f8:	4770      	bx	lr
 800b6fa:	4a03      	ldr	r2, [pc, #12]	@ (800b708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800b6fc:	4801      	ldr	r0, [pc, #4]	@ (800b704 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800b6fe:	6812      	ldr	r2, [r2, #0]
 800b700:	601a      	str	r2, [r3, #0]
 800b702:	4770      	bx	lr
 800b704:	200004ec 	.word	0x200004ec
 800b708:	2000037c 	.word	0x2000037c

0800b70c <get_serialized_size_builtin_interfaces__msg__Time>:
 800b70c:	b180      	cbz	r0, 800b730 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800b70e:	b538      	push	{r3, r4, r5, lr}
 800b710:	460d      	mov	r5, r1
 800b712:	4628      	mov	r0, r5
 800b714:	2104      	movs	r1, #4
 800b716:	f7fd fe3f 	bl	8009398 <ucdr_alignment>
 800b71a:	2104      	movs	r1, #4
 800b71c:	186c      	adds	r4, r5, r1
 800b71e:	4404      	add	r4, r0
 800b720:	4620      	mov	r0, r4
 800b722:	f7fd fe39 	bl	8009398 <ucdr_alignment>
 800b726:	f1c5 0504 	rsb	r5, r5, #4
 800b72a:	4405      	add	r5, r0
 800b72c:	1928      	adds	r0, r5, r4
 800b72e:	bd38      	pop	{r3, r4, r5, pc}
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop

0800b734 <_Time__cdr_deserialize>:
 800b734:	b538      	push	{r3, r4, r5, lr}
 800b736:	460c      	mov	r4, r1
 800b738:	b141      	cbz	r1, 800b74c <_Time__cdr_deserialize+0x18>
 800b73a:	4605      	mov	r5, r0
 800b73c:	f7fd fa30 	bl	8008ba0 <ucdr_deserialize_int32_t>
 800b740:	1d21      	adds	r1, r4, #4
 800b742:	4628      	mov	r0, r5
 800b744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b748:	f7fc bea8 	b.w	800849c <ucdr_deserialize_uint32_t>
 800b74c:	4608      	mov	r0, r1
 800b74e:	bd38      	pop	{r3, r4, r5, pc}

0800b750 <_Time__cdr_serialize>:
 800b750:	b160      	cbz	r0, 800b76c <_Time__cdr_serialize+0x1c>
 800b752:	b538      	push	{r3, r4, r5, lr}
 800b754:	460d      	mov	r5, r1
 800b756:	4604      	mov	r4, r0
 800b758:	6801      	ldr	r1, [r0, #0]
 800b75a:	4628      	mov	r0, r5
 800b75c:	f7fd f986 	bl	8008a6c <ucdr_serialize_int32_t>
 800b760:	6861      	ldr	r1, [r4, #4]
 800b762:	4628      	mov	r0, r5
 800b764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b768:	f7fc bd6e 	b.w	8008248 <ucdr_serialize_uint32_t>
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop

0800b770 <_Time__get_serialized_size>:
 800b770:	b160      	cbz	r0, 800b78c <_Time__get_serialized_size+0x1c>
 800b772:	b510      	push	{r4, lr}
 800b774:	2104      	movs	r1, #4
 800b776:	2000      	movs	r0, #0
 800b778:	f7fd fe0e 	bl	8009398 <ucdr_alignment>
 800b77c:	1d04      	adds	r4, r0, #4
 800b77e:	2104      	movs	r1, #4
 800b780:	4620      	mov	r0, r4
 800b782:	f7fd fe09 	bl	8009398 <ucdr_alignment>
 800b786:	3004      	adds	r0, #4
 800b788:	4420      	add	r0, r4
 800b78a:	bd10      	pop	{r4, pc}
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop

0800b790 <_Time__max_serialized_size>:
 800b790:	b510      	push	{r4, lr}
 800b792:	2104      	movs	r1, #4
 800b794:	2000      	movs	r0, #0
 800b796:	f7fd fdff 	bl	8009398 <ucdr_alignment>
 800b79a:	1d04      	adds	r4, r0, #4
 800b79c:	2104      	movs	r1, #4
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f7fd fdfa 	bl	8009398 <ucdr_alignment>
 800b7a4:	3004      	adds	r0, #4
 800b7a6:	4420      	add	r0, r4
 800b7a8:	bd10      	pop	{r4, pc}
 800b7aa:	bf00      	nop

0800b7ac <max_serialized_size_builtin_interfaces__msg__Time>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	7003      	strb	r3, [r0, #0]
 800b7b4:	2104      	movs	r1, #4
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f7fd fdee 	bl	8009398 <ucdr_alignment>
 800b7bc:	2104      	movs	r1, #4
 800b7be:	1863      	adds	r3, r4, r1
 800b7c0:	18c5      	adds	r5, r0, r3
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	f7fd fde8 	bl	8009398 <ucdr_alignment>
 800b7c8:	f1c4 0404 	rsb	r4, r4, #4
 800b7cc:	4420      	add	r0, r4
 800b7ce:	4428      	add	r0, r5
 800b7d0:	bd38      	pop	{r3, r4, r5, pc}
 800b7d2:	bf00      	nop

0800b7d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800b7d4:	4800      	ldr	r0, [pc, #0]	@ (800b7d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800b7d6:	4770      	bx	lr
 800b7d8:	2000057c 	.word	0x2000057c

0800b7dc <geometry_msgs__msg__TransformStamped__init>:
 800b7dc:	b398      	cbz	r0, 800b846 <geometry_msgs__msg__TransformStamped__init+0x6a>
 800b7de:	b570      	push	{r4, r5, r6, lr}
 800b7e0:	4604      	mov	r4, r0
 800b7e2:	f008 fc63 	bl	80140ac <std_msgs__msg__Header__init>
 800b7e6:	b160      	cbz	r0, 800b802 <geometry_msgs__msg__TransformStamped__init+0x26>
 800b7e8:	f104 0514 	add.w	r5, r4, #20
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	f008 fbb3 	bl	8013f58 <rosidl_runtime_c__String__init>
 800b7f2:	b1e8      	cbz	r0, 800b830 <geometry_msgs__msg__TransformStamped__init+0x54>
 800b7f4:	f104 0620 	add.w	r6, r4, #32
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	f008 ff33 	bl	8014664 <geometry_msgs__msg__Transform__init>
 800b7fe:	b168      	cbz	r0, 800b81c <geometry_msgs__msg__TransformStamped__init+0x40>
 800b800:	bd70      	pop	{r4, r5, r6, pc}
 800b802:	4620      	mov	r0, r4
 800b804:	f008 fc72 	bl	80140ec <std_msgs__msg__Header__fini>
 800b808:	f104 0014 	add.w	r0, r4, #20
 800b80c:	f008 fbbe 	bl	8013f8c <rosidl_runtime_c__String__fini>
 800b810:	f104 0020 	add.w	r0, r4, #32
 800b814:	f008 ff46 	bl	80146a4 <geometry_msgs__msg__Transform__fini>
 800b818:	2000      	movs	r0, #0
 800b81a:	bd70      	pop	{r4, r5, r6, pc}
 800b81c:	4620      	mov	r0, r4
 800b81e:	f008 fc65 	bl	80140ec <std_msgs__msg__Header__fini>
 800b822:	4628      	mov	r0, r5
 800b824:	f008 fbb2 	bl	8013f8c <rosidl_runtime_c__String__fini>
 800b828:	4630      	mov	r0, r6
 800b82a:	f008 ff3b 	bl	80146a4 <geometry_msgs__msg__Transform__fini>
 800b82e:	e7f3      	b.n	800b818 <geometry_msgs__msg__TransformStamped__init+0x3c>
 800b830:	4620      	mov	r0, r4
 800b832:	f008 fc5b 	bl	80140ec <std_msgs__msg__Header__fini>
 800b836:	4628      	mov	r0, r5
 800b838:	f008 fba8 	bl	8013f8c <rosidl_runtime_c__String__fini>
 800b83c:	f104 0020 	add.w	r0, r4, #32
 800b840:	f008 ff30 	bl	80146a4 <geometry_msgs__msg__Transform__fini>
 800b844:	e7e8      	b.n	800b818 <geometry_msgs__msg__TransformStamped__init+0x3c>
 800b846:	2000      	movs	r0, #0
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop

0800b84c <geometry_msgs__msg__TransformStamped__fini>:
 800b84c:	b168      	cbz	r0, 800b86a <geometry_msgs__msg__TransformStamped__fini+0x1e>
 800b84e:	b510      	push	{r4, lr}
 800b850:	4604      	mov	r4, r0
 800b852:	f008 fc4b 	bl	80140ec <std_msgs__msg__Header__fini>
 800b856:	f104 0014 	add.w	r0, r4, #20
 800b85a:	f008 fb97 	bl	8013f8c <rosidl_runtime_c__String__fini>
 800b85e:	f104 0020 	add.w	r0, r4, #32
 800b862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b866:	f008 bf1d 	b.w	80146a4 <geometry_msgs__msg__Transform__fini>
 800b86a:	4770      	bx	lr

0800b86c <geometry_msgs__msg__TransformStamped__Sequence__init>:
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d072      	beq.n	800b956 <geometry_msgs__msg__TransformStamped__Sequence__init+0xea>
 800b870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b874:	b087      	sub	sp, #28
 800b876:	460e      	mov	r6, r1
 800b878:	4607      	mov	r7, r0
 800b87a:	a801      	add	r0, sp, #4
 800b87c:	f7fe ff24 	bl	800a6c8 <rcutils_get_default_allocator>
 800b880:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b884:	2e00      	cmp	r6, #0
 800b886:	d049      	beq.n	800b91c <geometry_msgs__msg__TransformStamped__Sequence__init+0xb0>
 800b888:	9b04      	ldr	r3, [sp, #16]
 800b88a:	464a      	mov	r2, r9
 800b88c:	2158      	movs	r1, #88	@ 0x58
 800b88e:	4630      	mov	r0, r6
 800b890:	4798      	blx	r3
 800b892:	4680      	mov	r8, r0
 800b894:	2800      	cmp	r0, #0
 800b896:	d03f      	beq.n	800b918 <geometry_msgs__msg__TransformStamped__Sequence__init+0xac>
 800b898:	4605      	mov	r5, r0
 800b89a:	2400      	movs	r4, #0
 800b89c:	e012      	b.n	800b8c4 <geometry_msgs__msg__TransformStamped__Sequence__init+0x58>
 800b89e:	f105 0a14 	add.w	sl, r5, #20
 800b8a2:	4650      	mov	r0, sl
 800b8a4:	f008 fb58 	bl	8013f58 <rosidl_runtime_c__String__init>
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	d03f      	beq.n	800b92c <geometry_msgs__msg__TransformStamped__Sequence__init+0xc0>
 800b8ac:	f105 0b20 	add.w	fp, r5, #32
 800b8b0:	4658      	mov	r0, fp
 800b8b2:	f008 fed7 	bl	8014664 <geometry_msgs__msg__Transform__init>
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	d043      	beq.n	800b942 <geometry_msgs__msg__TransformStamped__Sequence__init+0xd6>
 800b8ba:	3401      	adds	r4, #1
 800b8bc:	42a6      	cmp	r6, r4
 800b8be:	f105 0558 	add.w	r5, r5, #88	@ 0x58
 800b8c2:	d02c      	beq.n	800b91e <geometry_msgs__msg__TransformStamped__Sequence__init+0xb2>
 800b8c4:	4628      	mov	r0, r5
 800b8c6:	f008 fbf1 	bl	80140ac <std_msgs__msg__Header__init>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d1e7      	bne.n	800b89e <geometry_msgs__msg__TransformStamped__Sequence__init+0x32>
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	f008 fc0c 	bl	80140ec <std_msgs__msg__Header__fini>
 800b8d4:	f105 0014 	add.w	r0, r5, #20
 800b8d8:	f008 fb58 	bl	8013f8c <rosidl_runtime_c__String__fini>
 800b8dc:	f105 0020 	add.w	r0, r5, #32
 800b8e0:	f008 fee0 	bl	80146a4 <geometry_msgs__msg__Transform__fini>
 800b8e4:	42a6      	cmp	r6, r4
 800b8e6:	d91a      	bls.n	800b91e <geometry_msgs__msg__TransformStamped__Sequence__init+0xb2>
 800b8e8:	b194      	cbz	r4, 800b910 <geometry_msgs__msg__TransformStamped__Sequence__init+0xa4>
 800b8ea:	2358      	movs	r3, #88	@ 0x58
 800b8ec:	fb03 8404 	mla	r4, r3, r4, r8
 800b8f0:	3c58      	subs	r4, #88	@ 0x58
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	f008 fbfa 	bl	80140ec <std_msgs__msg__Header__fini>
 800b8f8:	f104 0014 	add.w	r0, r4, #20
 800b8fc:	f008 fb46 	bl	8013f8c <rosidl_runtime_c__String__fini>
 800b900:	f104 0020 	add.w	r0, r4, #32
 800b904:	f008 fece 	bl	80146a4 <geometry_msgs__msg__Transform__fini>
 800b908:	4544      	cmp	r4, r8
 800b90a:	f1a4 0458 	sub.w	r4, r4, #88	@ 0x58
 800b90e:	d1f0      	bne.n	800b8f2 <geometry_msgs__msg__TransformStamped__Sequence__init+0x86>
 800b910:	9b02      	ldr	r3, [sp, #8]
 800b912:	4649      	mov	r1, r9
 800b914:	4640      	mov	r0, r8
 800b916:	4798      	blx	r3
 800b918:	2000      	movs	r0, #0
 800b91a:	e004      	b.n	800b926 <geometry_msgs__msg__TransformStamped__Sequence__init+0xba>
 800b91c:	46b0      	mov	r8, r6
 800b91e:	e9c7 8600 	strd	r8, r6, [r7]
 800b922:	60be      	str	r6, [r7, #8]
 800b924:	2001      	movs	r0, #1
 800b926:	b007      	add	sp, #28
 800b928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b92c:	4628      	mov	r0, r5
 800b92e:	f008 fbdd 	bl	80140ec <std_msgs__msg__Header__fini>
 800b932:	4650      	mov	r0, sl
 800b934:	f008 fb2a 	bl	8013f8c <rosidl_runtime_c__String__fini>
 800b938:	f105 0020 	add.w	r0, r5, #32
 800b93c:	f008 feb2 	bl	80146a4 <geometry_msgs__msg__Transform__fini>
 800b940:	e7d0      	b.n	800b8e4 <geometry_msgs__msg__TransformStamped__Sequence__init+0x78>
 800b942:	4628      	mov	r0, r5
 800b944:	f008 fbd2 	bl	80140ec <std_msgs__msg__Header__fini>
 800b948:	4650      	mov	r0, sl
 800b94a:	f008 fb1f 	bl	8013f8c <rosidl_runtime_c__String__fini>
 800b94e:	4658      	mov	r0, fp
 800b950:	f008 fea8 	bl	80146a4 <geometry_msgs__msg__Transform__fini>
 800b954:	e7c6      	b.n	800b8e4 <geometry_msgs__msg__TransformStamped__Sequence__init+0x78>
 800b956:	2000      	movs	r0, #0
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop

0800b95c <geometry_msgs__msg__TransformStamped__Sequence__fini>:
 800b95c:	b360      	cbz	r0, 800b9b8 <geometry_msgs__msg__TransformStamped__Sequence__fini+0x5c>
 800b95e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b960:	4606      	mov	r6, r0
 800b962:	b087      	sub	sp, #28
 800b964:	a801      	add	r0, sp, #4
 800b966:	f7fe feaf 	bl	800a6c8 <rcutils_get_default_allocator>
 800b96a:	6833      	ldr	r3, [r6, #0]
 800b96c:	b1f3      	cbz	r3, 800b9ac <geometry_msgs__msg__TransformStamped__Sequence__fini+0x50>
 800b96e:	68b2      	ldr	r2, [r6, #8]
 800b970:	b1a2      	cbz	r2, 800b99c <geometry_msgs__msg__TransformStamped__Sequence__fini+0x40>
 800b972:	2500      	movs	r5, #0
 800b974:	2758      	movs	r7, #88	@ 0x58
 800b976:	fb07 3405 	mla	r4, r7, r5, r3
 800b97a:	4620      	mov	r0, r4
 800b97c:	b1c4      	cbz	r4, 800b9b0 <geometry_msgs__msg__TransformStamped__Sequence__fini+0x54>
 800b97e:	f008 fbb5 	bl	80140ec <std_msgs__msg__Header__fini>
 800b982:	f104 0014 	add.w	r0, r4, #20
 800b986:	f008 fb01 	bl	8013f8c <rosidl_runtime_c__String__fini>
 800b98a:	f104 0020 	add.w	r0, r4, #32
 800b98e:	f008 fe89 	bl	80146a4 <geometry_msgs__msg__Transform__fini>
 800b992:	68b2      	ldr	r2, [r6, #8]
 800b994:	6833      	ldr	r3, [r6, #0]
 800b996:	3501      	adds	r5, #1
 800b998:	4295      	cmp	r5, r2
 800b99a:	d3ec      	bcc.n	800b976 <geometry_msgs__msg__TransformStamped__Sequence__fini+0x1a>
 800b99c:	4618      	mov	r0, r3
 800b99e:	9a02      	ldr	r2, [sp, #8]
 800b9a0:	9905      	ldr	r1, [sp, #20]
 800b9a2:	4790      	blx	r2
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	e9c6 3300 	strd	r3, r3, [r6]
 800b9aa:	60b3      	str	r3, [r6, #8]
 800b9ac:	b007      	add	sp, #28
 800b9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9b0:	3501      	adds	r5, #1
 800b9b2:	4295      	cmp	r5, r2
 800b9b4:	d3df      	bcc.n	800b976 <geometry_msgs__msg__TransformStamped__Sequence__fini+0x1a>
 800b9b6:	e7f1      	b.n	800b99c <geometry_msgs__msg__TransformStamped__Sequence__fini+0x40>
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop

0800b9bc <geometry_msgs__msg__Twist__get_type_hash>:
 800b9bc:	4800      	ldr	r0, [pc, #0]	@ (800b9c0 <geometry_msgs__msg__Twist__get_type_hash+0x4>)
 800b9be:	4770      	bx	lr
 800b9c0:	200005b0 	.word	0x200005b0

0800b9c4 <geometry_msgs__msg__Twist__get_type_description>:
 800b9c4:	b510      	push	{r4, lr}
 800b9c6:	4c08      	ldr	r4, [pc, #32]	@ (800b9e8 <geometry_msgs__msg__Twist__get_type_description+0x24>)
 800b9c8:	7820      	ldrb	r0, [r4, #0]
 800b9ca:	b108      	cbz	r0, 800b9d0 <geometry_msgs__msg__Twist__get_type_description+0xc>
 800b9cc:	4807      	ldr	r0, [pc, #28]	@ (800b9ec <geometry_msgs__msg__Twist__get_type_description+0x28>)
 800b9ce:	bd10      	pop	{r4, pc}
 800b9d0:	f000 f86c 	bl	800baac <geometry_msgs__msg__Vector3__get_type_description>
 800b9d4:	300c      	adds	r0, #12
 800b9d6:	c807      	ldmia	r0, {r0, r1, r2}
 800b9d8:	4b05      	ldr	r3, [pc, #20]	@ (800b9f0 <geometry_msgs__msg__Twist__get_type_description+0x2c>)
 800b9da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b9de:	2301      	movs	r3, #1
 800b9e0:	4802      	ldr	r0, [pc, #8]	@ (800b9ec <geometry_msgs__msg__Twist__get_type_description+0x28>)
 800b9e2:	7023      	strb	r3, [r4, #0]
 800b9e4:	bd10      	pop	{r4, pc}
 800b9e6:	bf00      	nop
 800b9e8:	20010b09 	.word	0x20010b09
 800b9ec:	08019b54 	.word	0x08019b54
 800b9f0:	20000658 	.word	0x20000658

0800b9f4 <geometry_msgs__msg__Twist__get_individual_type_description_source>:
 800b9f4:	4800      	ldr	r0, [pc, #0]	@ (800b9f8 <geometry_msgs__msg__Twist__get_individual_type_description_source+0x4>)
 800b9f6:	4770      	bx	lr
 800b9f8:	08019b30 	.word	0x08019b30

0800b9fc <geometry_msgs__msg__Twist__get_type_description_sources>:
 800b9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fe:	4e0f      	ldr	r6, [pc, #60]	@ (800ba3c <geometry_msgs__msg__Twist__get_type_description_sources+0x40>)
 800ba00:	7837      	ldrb	r7, [r6, #0]
 800ba02:	b10f      	cbz	r7, 800ba08 <geometry_msgs__msg__Twist__get_type_description_sources+0xc>
 800ba04:	480e      	ldr	r0, [pc, #56]	@ (800ba40 <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 800ba06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba08:	4d0e      	ldr	r5, [pc, #56]	@ (800ba44 <geometry_msgs__msg__Twist__get_type_description_sources+0x48>)
 800ba0a:	4c0f      	ldr	r4, [pc, #60]	@ (800ba48 <geometry_msgs__msg__Twist__get_type_description_sources+0x4c>)
 800ba0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba14:	682b      	ldr	r3, [r5, #0]
 800ba16:	f844 3b04 	str.w	r3, [r4], #4
 800ba1a:	4638      	mov	r0, r7
 800ba1c:	f000 f852 	bl	800bac4 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 800ba20:	2301      	movs	r3, #1
 800ba22:	4684      	mov	ip, r0
 800ba24:	7033      	strb	r3, [r6, #0]
 800ba26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ba2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ba30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba32:	f8dc 3000 	ldr.w	r3, [ip]
 800ba36:	4802      	ldr	r0, [pc, #8]	@ (800ba40 <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba3c:	20010b08 	.word	0x20010b08
 800ba40:	08019b24 	.word	0x08019b24
 800ba44:	08019b30 	.word	0x08019b30
 800ba48:	20010ac0 	.word	0x20010ac0

0800ba4c <geometry_msgs__msg__Twist__init>:
 800ba4c:	b1d8      	cbz	r0, 800ba86 <geometry_msgs__msg__Twist__init+0x3a>
 800ba4e:	b538      	push	{r3, r4, r5, lr}
 800ba50:	4604      	mov	r4, r0
 800ba52:	f000 f857 	bl	800bb04 <geometry_msgs__msg__Vector3__init>
 800ba56:	b130      	cbz	r0, 800ba66 <geometry_msgs__msg__Twist__init+0x1a>
 800ba58:	f104 0518 	add.w	r5, r4, #24
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	f000 f851 	bl	800bb04 <geometry_msgs__msg__Vector3__init>
 800ba62:	b148      	cbz	r0, 800ba78 <geometry_msgs__msg__Twist__init+0x2c>
 800ba64:	bd38      	pop	{r3, r4, r5, pc}
 800ba66:	4620      	mov	r0, r4
 800ba68:	f000 f850 	bl	800bb0c <geometry_msgs__msg__Vector3__fini>
 800ba6c:	f104 0018 	add.w	r0, r4, #24
 800ba70:	f000 f84c 	bl	800bb0c <geometry_msgs__msg__Vector3__fini>
 800ba74:	2000      	movs	r0, #0
 800ba76:	bd38      	pop	{r3, r4, r5, pc}
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f000 f847 	bl	800bb0c <geometry_msgs__msg__Vector3__fini>
 800ba7e:	4628      	mov	r0, r5
 800ba80:	f000 f844 	bl	800bb0c <geometry_msgs__msg__Vector3__fini>
 800ba84:	e7f6      	b.n	800ba74 <geometry_msgs__msg__Twist__init+0x28>
 800ba86:	2000      	movs	r0, #0
 800ba88:	4770      	bx	lr
 800ba8a:	bf00      	nop

0800ba8c <geometry_msgs__msg__Twist__fini>:
 800ba8c:	b148      	cbz	r0, 800baa2 <geometry_msgs__msg__Twist__fini+0x16>
 800ba8e:	b510      	push	{r4, lr}
 800ba90:	4604      	mov	r4, r0
 800ba92:	f000 f83b 	bl	800bb0c <geometry_msgs__msg__Vector3__fini>
 800ba96:	f104 0018 	add.w	r0, r4, #24
 800ba9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba9e:	f000 b835 	b.w	800bb0c <geometry_msgs__msg__Vector3__fini>
 800baa2:	4770      	bx	lr

0800baa4 <geometry_msgs__msg__Vector3__get_type_hash>:
 800baa4:	4800      	ldr	r0, [pc, #0]	@ (800baa8 <geometry_msgs__msg__Vector3__get_type_hash+0x4>)
 800baa6:	4770      	bx	lr
 800baa8:	2000073c 	.word	0x2000073c

0800baac <geometry_msgs__msg__Vector3__get_type_description>:
 800baac:	4b03      	ldr	r3, [pc, #12]	@ (800babc <geometry_msgs__msg__Vector3__get_type_description+0x10>)
 800baae:	781a      	ldrb	r2, [r3, #0]
 800bab0:	b90a      	cbnz	r2, 800bab6 <geometry_msgs__msg__Vector3__get_type_description+0xa>
 800bab2:	2201      	movs	r2, #1
 800bab4:	701a      	strb	r2, [r3, #0]
 800bab6:	4802      	ldr	r0, [pc, #8]	@ (800bac0 <geometry_msgs__msg__Vector3__get_type_description+0x14>)
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop
 800babc:	20010b31 	.word	0x20010b31
 800bac0:	08019ba8 	.word	0x08019ba8

0800bac4 <geometry_msgs__msg__Vector3__get_individual_type_description_source>:
 800bac4:	4800      	ldr	r0, [pc, #0]	@ (800bac8 <geometry_msgs__msg__Vector3__get_individual_type_description_source+0x4>)
 800bac6:	4770      	bx	lr
 800bac8:	08019b84 	.word	0x08019b84

0800bacc <geometry_msgs__msg__Vector3__get_type_description_sources>:
 800bacc:	4b09      	ldr	r3, [pc, #36]	@ (800baf4 <geometry_msgs__msg__Vector3__get_type_description_sources+0x28>)
 800bace:	781a      	ldrb	r2, [r3, #0]
 800bad0:	b96a      	cbnz	r2, 800baee <geometry_msgs__msg__Vector3__get_type_description_sources+0x22>
 800bad2:	b430      	push	{r4, r5}
 800bad4:	4d08      	ldr	r5, [pc, #32]	@ (800baf8 <geometry_msgs__msg__Vector3__get_type_description_sources+0x2c>)
 800bad6:	4c09      	ldr	r4, [pc, #36]	@ (800bafc <geometry_msgs__msg__Vector3__get_type_description_sources+0x30>)
 800bad8:	2201      	movs	r2, #1
 800bada:	701a      	strb	r2, [r3, #0]
 800badc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bae4:	682b      	ldr	r3, [r5, #0]
 800bae6:	4806      	ldr	r0, [pc, #24]	@ (800bb00 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	bc30      	pop	{r4, r5}
 800baec:	4770      	bx	lr
 800baee:	4804      	ldr	r0, [pc, #16]	@ (800bb00 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	20010b30 	.word	0x20010b30
 800baf8:	08019b84 	.word	0x08019b84
 800bafc:	20010b0c 	.word	0x20010b0c
 800bb00:	08019b78 	.word	0x08019b78

0800bb04 <geometry_msgs__msg__Vector3__init>:
 800bb04:	3800      	subs	r0, #0
 800bb06:	bf18      	it	ne
 800bb08:	2001      	movne	r0, #1
 800bb0a:	4770      	bx	lr

0800bb0c <geometry_msgs__msg__Vector3__fini>:
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop

0800bb10 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__size_function__PoseWithCovariance__covariance>:
 800bb10:	2024      	movs	r0, #36	@ 0x24
 800bb12:	4770      	bx	lr

0800bb14 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_const_function__PoseWithCovariance__covariance>:
 800bb14:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop

0800bb1c <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__fetch_function__PoseWithCovariance__covariance>:
 800bb1c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800bb20:	e9d0 0100 	ldrd	r0, r1, [r0]
 800bb24:	e9c2 0100 	strd	r0, r1, [r2]
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop

0800bb2c <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__assign_function__PoseWithCovariance__covariance>:
 800bb2c:	e9d2 2300 	ldrd	r2, r3, [r2]
 800bb30:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800bb34:	e9c0 2300 	strd	r2, r3, [r0]
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop

0800bb3c <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_init_function>:
 800bb3c:	f008 bcf0 	b.w	8014520 <geometry_msgs__msg__PoseWithCovariance__init>

0800bb40 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_fini_function>:
 800bb40:	f008 bcfc 	b.w	801453c <geometry_msgs__msg__PoseWithCovariance__fini>

0800bb44 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_function__PoseWithCovariance__covariance>:
 800bb44:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop

0800bb4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 800bb4c:	b508      	push	{r3, lr}
 800bb4e:	f008 fed3 	bl	80148f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800bb52:	4b06      	ldr	r3, [pc, #24]	@ (800bb6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 800bb54:	4906      	ldr	r1, [pc, #24]	@ (800bb70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x24>)
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	60c8      	str	r0, [r1, #12]
 800bb5a:	b10a      	cbz	r2, 800bb60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x14>
 800bb5c:	4803      	ldr	r0, [pc, #12]	@ (800bb6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 800bb5e:	bd08      	pop	{r3, pc}
 800bb60:	4a04      	ldr	r2, [pc, #16]	@ (800bb74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x28>)
 800bb62:	4802      	ldr	r0, [pc, #8]	@ (800bb6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 800bb64:	6812      	ldr	r2, [r2, #0]
 800bb66:	601a      	str	r2, [r3, #0]
 800bb68:	bd08      	pop	{r3, pc}
 800bb6a:	bf00      	nop
 800bb6c:	20000960 	.word	0x20000960
 800bb70:	20000978 	.word	0x20000978
 800bb74:	2000037c 	.word	0x2000037c

0800bb78 <geometry_msgs__msg__TransformStamped__rosidl_typesupport_introspection_c__TransformStamped_init_function>:
 800bb78:	f7ff be30 	b.w	800b7dc <geometry_msgs__msg__TransformStamped__init>

0800bb7c <geometry_msgs__msg__TransformStamped__rosidl_typesupport_introspection_c__TransformStamped_fini_function>:
 800bb7c:	f7ff be66 	b.w	800b84c <geometry_msgs__msg__TransformStamped__fini>

0800bb80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TransformStamped>:
 800bb80:	b510      	push	{r4, lr}
 800bb82:	f7ff fbf7 	bl	800b374 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800bb86:	4c08      	ldr	r4, [pc, #32]	@ (800bba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TransformStamped+0x28>)
 800bb88:	60e0      	str	r0, [r4, #12]
 800bb8a:	f008 fee3 	bl	8014954 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Transform>
 800bb8e:	4b07      	ldr	r3, [pc, #28]	@ (800bbac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TransformStamped+0x2c>)
 800bb90:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	b10a      	cbz	r2, 800bb9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TransformStamped+0x1c>
 800bb98:	4804      	ldr	r0, [pc, #16]	@ (800bbac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TransformStamped+0x2c>)
 800bb9a:	bd10      	pop	{r4, pc}
 800bb9c:	4a04      	ldr	r2, [pc, #16]	@ (800bbb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TransformStamped+0x30>)
 800bb9e:	4803      	ldr	r0, [pc, #12]	@ (800bbac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TransformStamped+0x2c>)
 800bba0:	6812      	ldr	r2, [r2, #0]
 800bba2:	601a      	str	r2, [r3, #0]
 800bba4:	bd10      	pop	{r4, pc}
 800bba6:	bf00      	nop
 800bba8:	20000a08 	.word	0x20000a08
 800bbac:	200009f0 	.word	0x200009f0
 800bbb0:	2000037c 	.word	0x2000037c

0800bbb4 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__size_function__TwistWithCovariance__covariance>:
 800bbb4:	2024      	movs	r0, #36	@ 0x24
 800bbb6:	4770      	bx	lr

0800bbb8 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_const_function__TwistWithCovariance__covariance>:
 800bbb8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop

0800bbc0 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__fetch_function__TwistWithCovariance__covariance>:
 800bbc0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800bbc4:	e9d0 0100 	ldrd	r0, r1, [r0]
 800bbc8:	e9c2 0100 	strd	r0, r1, [r2]
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop

0800bbd0 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__assign_function__TwistWithCovariance__covariance>:
 800bbd0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800bbd4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800bbd8:	e9c0 2300 	strd	r2, r3, [r0]
 800bbdc:	4770      	bx	lr
 800bbde:	bf00      	nop

0800bbe0 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_init_function>:
 800bbe0:	f008 be74 	b.w	80148cc <geometry_msgs__msg__TwistWithCovariance__init>

0800bbe4 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_fini_function>:
 800bbe4:	f008 be80 	b.w	80148e8 <geometry_msgs__msg__TwistWithCovariance__fini>

0800bbe8 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_function__TwistWithCovariance__covariance>:
 800bbe8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop

0800bbf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 800bbf0:	b508      	push	{r3, lr}
 800bbf2:	f7fb ffb5 	bl	8007b60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800bbf6:	4b06      	ldr	r3, [pc, #24]	@ (800bc10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 800bbf8:	4906      	ldr	r1, [pc, #24]	@ (800bc14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x24>)
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	60c8      	str	r0, [r1, #12]
 800bbfe:	b10a      	cbz	r2, 800bc04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x14>
 800bc00:	4803      	ldr	r0, [pc, #12]	@ (800bc10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 800bc02:	bd08      	pop	{r3, pc}
 800bc04:	4a04      	ldr	r2, [pc, #16]	@ (800bc18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x28>)
 800bc06:	4802      	ldr	r0, [pc, #8]	@ (800bc10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 800bc08:	6812      	ldr	r2, [r2, #0]
 800bc0a:	601a      	str	r2, [r3, #0]
 800bc0c:	bd08      	pop	{r3, pc}
 800bc0e:	bf00      	nop
 800bc10:	20000abc 	.word	0x20000abc
 800bc14:	20000ad4 	.word	0x20000ad4
 800bc18:	2000037c 	.word	0x2000037c

0800bc1c <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	b158      	cbz	r0, 800bc38 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance+0x1c>
 800bc20:	460d      	mov	r5, r1
 800bc22:	f008 feaf 	bl	8014984 <get_serialized_size_geometry_msgs__msg__Pose>
 800bc26:	182c      	adds	r4, r5, r0
 800bc28:	2108      	movs	r1, #8
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f7fd fbb4 	bl	8009398 <ucdr_alignment>
 800bc30:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 800bc34:	4405      	add	r5, r0
 800bc36:	1928      	adds	r0, r5, r4
 800bc38:	bd38      	pop	{r3, r4, r5, pc}
 800bc3a:	bf00      	nop

0800bc3c <_PoseWithCovariance__cdr_deserialize>:
 800bc3c:	b538      	push	{r3, r4, r5, lr}
 800bc3e:	460c      	mov	r4, r1
 800bc40:	b179      	cbz	r1, 800bc62 <_PoseWithCovariance__cdr_deserialize+0x26>
 800bc42:	4605      	mov	r5, r0
 800bc44:	f008 ff0a 	bl	8014a5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800bc48:	6843      	ldr	r3, [r0, #4]
 800bc4a:	4621      	mov	r1, r4
 800bc4c:	68db      	ldr	r3, [r3, #12]
 800bc4e:	4628      	mov	r0, r5
 800bc50:	4798      	blx	r3
 800bc52:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800bc56:	4628      	mov	r0, r5
 800bc58:	2224      	movs	r2, #36	@ 0x24
 800bc5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc5e:	f000 badf 	b.w	800c220 <ucdr_deserialize_array_double>
 800bc62:	4608      	mov	r0, r1
 800bc64:	bd38      	pop	{r3, r4, r5, pc}
 800bc66:	bf00      	nop

0800bc68 <_PoseWithCovariance__cdr_serialize>:
 800bc68:	b188      	cbz	r0, 800bc8e <_PoseWithCovariance__cdr_serialize+0x26>
 800bc6a:	b538      	push	{r3, r4, r5, lr}
 800bc6c:	460d      	mov	r5, r1
 800bc6e:	4604      	mov	r4, r0
 800bc70:	f008 fef4 	bl	8014a5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800bc74:	6843      	ldr	r3, [r0, #4]
 800bc76:	4629      	mov	r1, r5
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	4798      	blx	r3
 800bc7e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800bc82:	4628      	mov	r0, r5
 800bc84:	2224      	movs	r2, #36	@ 0x24
 800bc86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc8a:	f000 ba75 	b.w	800c178 <ucdr_serialize_array_double>
 800bc8e:	4770      	bx	lr

0800bc90 <_PoseWithCovariance__get_serialized_size>:
 800bc90:	b158      	cbz	r0, 800bcaa <_PoseWithCovariance__get_serialized_size+0x1a>
 800bc92:	b510      	push	{r4, lr}
 800bc94:	2100      	movs	r1, #0
 800bc96:	f008 fe75 	bl	8014984 <get_serialized_size_geometry_msgs__msg__Pose>
 800bc9a:	2108      	movs	r1, #8
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	f7fd fb7b 	bl	8009398 <ucdr_alignment>
 800bca2:	4420      	add	r0, r4
 800bca4:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800bca8:	bd10      	pop	{r4, pc}
 800bcaa:	4770      	bx	lr

0800bcac <_PoseWithCovariance__max_serialized_size>:
 800bcac:	b510      	push	{r4, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	f10d 0007 	add.w	r0, sp, #7
 800bcb8:	f88d 3007 	strb.w	r3, [sp, #7]
 800bcbc:	f008 fec0 	bl	8014a40 <max_serialized_size_geometry_msgs__msg__Pose>
 800bcc0:	2108      	movs	r1, #8
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	f7fd fb68 	bl	8009398 <ucdr_alignment>
 800bcc8:	4420      	add	r0, r4
 800bcca:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800bcce:	b002      	add	sp, #8
 800bcd0:	bd10      	pop	{r4, pc}
 800bcd2:	bf00      	nop

0800bcd4 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 800bcd4:	b538      	push	{r3, r4, r5, lr}
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	7003      	strb	r3, [r0, #0]
 800bcda:	460c      	mov	r4, r1
 800bcdc:	f008 feb0 	bl	8014a40 <max_serialized_size_geometry_msgs__msg__Pose>
 800bce0:	1825      	adds	r5, r4, r0
 800bce2:	2108      	movs	r1, #8
 800bce4:	4628      	mov	r0, r5
 800bce6:	f7fd fb57 	bl	8009398 <ucdr_alignment>
 800bcea:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 800bcee:	4420      	add	r0, r4
 800bcf0:	4428      	add	r0, r5
 800bcf2:	bd38      	pop	{r3, r4, r5, pc}

0800bcf4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 800bcf4:	4800      	ldr	r0, [pc, #0]	@ (800bcf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x4>)
 800bcf6:	4770      	bx	lr
 800bcf8:	20000b4c 	.word	0x20000b4c

0800bcfc <get_serialized_size_geometry_msgs__msg__TransformStamped>:
 800bcfc:	b570      	push	{r4, r5, r6, lr}
 800bcfe:	4604      	mov	r4, r0
 800bd00:	b198      	cbz	r0, 800bd2a <get_serialized_size_geometry_msgs__msg__TransformStamped+0x2e>
 800bd02:	460d      	mov	r5, r1
 800bd04:	f7ff fb5a 	bl	800b3bc <get_serialized_size_std_msgs__msg__Header>
 800bd08:	182e      	adds	r6, r5, r0
 800bd0a:	2104      	movs	r1, #4
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	f7fd fb43 	bl	8009398 <ucdr_alignment>
 800bd12:	69a3      	ldr	r3, [r4, #24]
 800bd14:	4602      	mov	r2, r0
 800bd16:	f104 0020 	add.w	r0, r4, #32
 800bd1a:	1d5c      	adds	r4, r3, #5
 800bd1c:	4414      	add	r4, r2
 800bd1e:	4434      	add	r4, r6
 800bd20:	4621      	mov	r1, r4
 800bd22:	f008 ff57 	bl	8014bd4 <get_serialized_size_geometry_msgs__msg__Transform>
 800bd26:	1b40      	subs	r0, r0, r5
 800bd28:	4420      	add	r0, r4
 800bd2a:	bd70      	pop	{r4, r5, r6, pc}

0800bd2c <_TransformStamped__cdr_deserialize>:
 800bd2c:	b570      	push	{r4, r5, r6, lr}
 800bd2e:	460c      	mov	r4, r1
 800bd30:	b082      	sub	sp, #8
 800bd32:	b309      	cbz	r1, 800bd78 <_TransformStamped__cdr_deserialize+0x4c>
 800bd34:	4605      	mov	r5, r0
 800bd36:	f7ff fbc3 	bl	800b4c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800bd3a:	6843      	ldr	r3, [r0, #4]
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	4628      	mov	r0, r5
 800bd42:	4798      	blx	r3
 800bd44:	69e6      	ldr	r6, [r4, #28]
 800bd46:	6961      	ldr	r1, [r4, #20]
 800bd48:	ab01      	add	r3, sp, #4
 800bd4a:	4632      	mov	r2, r6
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	f000 facf 	bl	800c2f0 <ucdr_deserialize_sequence_char>
 800bd52:	9b01      	ldr	r3, [sp, #4]
 800bd54:	b960      	cbnz	r0, 800bd70 <_TransformStamped__cdr_deserialize+0x44>
 800bd56:	429e      	cmp	r6, r3
 800bd58:	d311      	bcc.n	800bd7e <_TransformStamped__cdr_deserialize+0x52>
 800bd5a:	f008 ffa7 	bl	8014cac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Transform>
 800bd5e:	6843      	ldr	r3, [r0, #4]
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	f104 0120 	add.w	r1, r4, #32
 800bd66:	4628      	mov	r0, r5
 800bd68:	b002      	add	sp, #8
 800bd6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd6e:	4718      	bx	r3
 800bd70:	b103      	cbz	r3, 800bd74 <_TransformStamped__cdr_deserialize+0x48>
 800bd72:	3b01      	subs	r3, #1
 800bd74:	61a3      	str	r3, [r4, #24]
 800bd76:	e7f0      	b.n	800bd5a <_TransformStamped__cdr_deserialize+0x2e>
 800bd78:	4608      	mov	r0, r1
 800bd7a:	b002      	add	sp, #8
 800bd7c:	bd70      	pop	{r4, r5, r6, pc}
 800bd7e:	2101      	movs	r1, #1
 800bd80:	75a8      	strb	r0, [r5, #22]
 800bd82:	7569      	strb	r1, [r5, #21]
 800bd84:	61a0      	str	r0, [r4, #24]
 800bd86:	4628      	mov	r0, r5
 800bd88:	f7fd fb1c 	bl	80093c4 <ucdr_align_to>
 800bd8c:	9901      	ldr	r1, [sp, #4]
 800bd8e:	4628      	mov	r0, r5
 800bd90:	f7fd fb4e 	bl	8009430 <ucdr_advance_buffer>
 800bd94:	e7e1      	b.n	800bd5a <_TransformStamped__cdr_deserialize+0x2e>
 800bd96:	bf00      	nop

0800bd98 <_TransformStamped__cdr_serialize>:
 800bd98:	b308      	cbz	r0, 800bdde <_TransformStamped__cdr_serialize+0x46>
 800bd9a:	b570      	push	{r4, r5, r6, lr}
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	460e      	mov	r6, r1
 800bda0:	f7ff fb8e 	bl	800b4c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800bda4:	6843      	ldr	r3, [r0, #4]
 800bda6:	4631      	mov	r1, r6
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	4620      	mov	r0, r4
 800bdac:	4798      	blx	r3
 800bdae:	6965      	ldr	r5, [r4, #20]
 800bdb0:	b195      	cbz	r5, 800bdd8 <_TransformStamped__cdr_serialize+0x40>
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	f7f4 fa74 	bl	80002a0 <strlen>
 800bdb8:	1c42      	adds	r2, r0, #1
 800bdba:	4629      	mov	r1, r5
 800bdbc:	61a0      	str	r0, [r4, #24]
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	f000 fa84 	bl	800c2cc <ucdr_serialize_sequence_char>
 800bdc4:	f008 ff72 	bl	8014cac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Transform>
 800bdc8:	6843      	ldr	r3, [r0, #4]
 800bdca:	4631      	mov	r1, r6
 800bdcc:	f104 0020 	add.w	r0, r4, #32
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bdd6:	4718      	bx	r3
 800bdd8:	462a      	mov	r2, r5
 800bdda:	4628      	mov	r0, r5
 800bddc:	e7ed      	b.n	800bdba <_TransformStamped__cdr_serialize+0x22>
 800bdde:	4770      	bx	lr

0800bde0 <_TransformStamped__max_serialized_size>:
 800bde0:	b510      	push	{r4, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	2301      	movs	r3, #1
 800bde6:	2100      	movs	r1, #0
 800bde8:	f10d 0007 	add.w	r0, sp, #7
 800bdec:	f88d 3007 	strb.w	r3, [sp, #7]
 800bdf0:	f7ff fb5c 	bl	800b4ac <max_serialized_size_std_msgs__msg__Header>
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	4601      	mov	r1, r0
 800bdfa:	f10d 0007 	add.w	r0, sp, #7
 800bdfe:	f88d 3007 	strb.w	r3, [sp, #7]
 800be02:	f008 ff45 	bl	8014c90 <max_serialized_size_geometry_msgs__msg__Transform>
 800be06:	4420      	add	r0, r4
 800be08:	b002      	add	sp, #8
 800be0a:	bd10      	pop	{r4, pc}

0800be0c <_TransformStamped__get_serialized_size>:
 800be0c:	b538      	push	{r3, r4, r5, lr}
 800be0e:	4604      	mov	r4, r0
 800be10:	b188      	cbz	r0, 800be36 <_TransformStamped__get_serialized_size+0x2a>
 800be12:	2100      	movs	r1, #0
 800be14:	f7ff fad2 	bl	800b3bc <get_serialized_size_std_msgs__msg__Header>
 800be18:	2104      	movs	r1, #4
 800be1a:	4605      	mov	r5, r0
 800be1c:	f7fd fabc 	bl	8009398 <ucdr_alignment>
 800be20:	69a1      	ldr	r1, [r4, #24]
 800be22:	4603      	mov	r3, r0
 800be24:	f104 0020 	add.w	r0, r4, #32
 800be28:	1d4c      	adds	r4, r1, #5
 800be2a:	442c      	add	r4, r5
 800be2c:	441c      	add	r4, r3
 800be2e:	4621      	mov	r1, r4
 800be30:	f008 fed0 	bl	8014bd4 <get_serialized_size_geometry_msgs__msg__Transform>
 800be34:	4420      	add	r0, r4
 800be36:	bd38      	pop	{r3, r4, r5, pc}

0800be38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TransformStamped>:
 800be38:	4800      	ldr	r0, [pc, #0]	@ (800be3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TransformStamped+0x4>)
 800be3a:	4770      	bx	lr
 800be3c:	20000b80 	.word	0x20000b80

0800be40 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 800be40:	b538      	push	{r3, r4, r5, lr}
 800be42:	b158      	cbz	r0, 800be5c <get_serialized_size_geometry_msgs__msg__TwistWithCovariance+0x1c>
 800be44:	460d      	mov	r5, r1
 800be46:	f7fb feb5 	bl	8007bb4 <get_serialized_size_geometry_msgs__msg__Twist>
 800be4a:	182c      	adds	r4, r5, r0
 800be4c:	2108      	movs	r1, #8
 800be4e:	4620      	mov	r0, r4
 800be50:	f7fd faa2 	bl	8009398 <ucdr_alignment>
 800be54:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 800be58:	4405      	add	r5, r0
 800be5a:	1928      	adds	r0, r5, r4
 800be5c:	bd38      	pop	{r3, r4, r5, pc}
 800be5e:	bf00      	nop

0800be60 <_TwistWithCovariance__cdr_deserialize>:
 800be60:	b538      	push	{r3, r4, r5, lr}
 800be62:	460c      	mov	r4, r1
 800be64:	b179      	cbz	r1, 800be86 <_TwistWithCovariance__cdr_deserialize+0x26>
 800be66:	4605      	mov	r5, r0
 800be68:	f7fb ff10 	bl	8007c8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800be6c:	6843      	ldr	r3, [r0, #4]
 800be6e:	4621      	mov	r1, r4
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	4628      	mov	r0, r5
 800be74:	4798      	blx	r3
 800be76:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800be7a:	4628      	mov	r0, r5
 800be7c:	2224      	movs	r2, #36	@ 0x24
 800be7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be82:	f000 b9cd 	b.w	800c220 <ucdr_deserialize_array_double>
 800be86:	4608      	mov	r0, r1
 800be88:	bd38      	pop	{r3, r4, r5, pc}
 800be8a:	bf00      	nop

0800be8c <_TwistWithCovariance__cdr_serialize>:
 800be8c:	b188      	cbz	r0, 800beb2 <_TwistWithCovariance__cdr_serialize+0x26>
 800be8e:	b538      	push	{r3, r4, r5, lr}
 800be90:	460d      	mov	r5, r1
 800be92:	4604      	mov	r4, r0
 800be94:	f7fb fefa 	bl	8007c8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800be98:	6843      	ldr	r3, [r0, #4]
 800be9a:	4629      	mov	r1, r5
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	4620      	mov	r0, r4
 800bea0:	4798      	blx	r3
 800bea2:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800bea6:	4628      	mov	r0, r5
 800bea8:	2224      	movs	r2, #36	@ 0x24
 800beaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beae:	f000 b963 	b.w	800c178 <ucdr_serialize_array_double>
 800beb2:	4770      	bx	lr

0800beb4 <_TwistWithCovariance__get_serialized_size>:
 800beb4:	b158      	cbz	r0, 800bece <_TwistWithCovariance__get_serialized_size+0x1a>
 800beb6:	b510      	push	{r4, lr}
 800beb8:	2100      	movs	r1, #0
 800beba:	f7fb fe7b 	bl	8007bb4 <get_serialized_size_geometry_msgs__msg__Twist>
 800bebe:	2108      	movs	r1, #8
 800bec0:	4604      	mov	r4, r0
 800bec2:	f7fd fa69 	bl	8009398 <ucdr_alignment>
 800bec6:	4420      	add	r0, r4
 800bec8:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800becc:	bd10      	pop	{r4, pc}
 800bece:	4770      	bx	lr

0800bed0 <_TwistWithCovariance__max_serialized_size>:
 800bed0:	b510      	push	{r4, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	2301      	movs	r3, #1
 800bed6:	2100      	movs	r1, #0
 800bed8:	f10d 0007 	add.w	r0, sp, #7
 800bedc:	f88d 3007 	strb.w	r3, [sp, #7]
 800bee0:	f7fb fec6 	bl	8007c70 <max_serialized_size_geometry_msgs__msg__Twist>
 800bee4:	2108      	movs	r1, #8
 800bee6:	4604      	mov	r4, r0
 800bee8:	f7fd fa56 	bl	8009398 <ucdr_alignment>
 800beec:	4420      	add	r0, r4
 800beee:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800bef2:	b002      	add	sp, #8
 800bef4:	bd10      	pop	{r4, pc}
 800bef6:	bf00      	nop

0800bef8 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	2301      	movs	r3, #1
 800befc:	7003      	strb	r3, [r0, #0]
 800befe:	460c      	mov	r4, r1
 800bf00:	f7fb feb6 	bl	8007c70 <max_serialized_size_geometry_msgs__msg__Twist>
 800bf04:	1825      	adds	r5, r4, r0
 800bf06:	2108      	movs	r1, #8
 800bf08:	4628      	mov	r0, r5
 800bf0a:	f7fd fa45 	bl	8009398 <ucdr_alignment>
 800bf0e:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 800bf12:	4420      	add	r0, r4
 800bf14:	4428      	add	r0, r5
 800bf16:	bd38      	pop	{r3, r4, r5, pc}

0800bf18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 800bf18:	4800      	ldr	r0, [pc, #0]	@ (800bf1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x4>)
 800bf1a:	4770      	bx	lr
 800bf1c:	20000bb4 	.word	0x20000bb4

0800bf20 <ucdr_serialize_endian_array_char>:
 800bf20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf24:	4619      	mov	r1, r3
 800bf26:	461f      	mov	r7, r3
 800bf28:	4605      	mov	r5, r0
 800bf2a:	4690      	mov	r8, r2
 800bf2c:	f7fd f9dc 	bl	80092e8 <ucdr_check_buffer_available_for>
 800bf30:	b9e0      	cbnz	r0, 800bf6c <ucdr_serialize_endian_array_char+0x4c>
 800bf32:	463e      	mov	r6, r7
 800bf34:	e009      	b.n	800bf4a <ucdr_serialize_endian_array_char+0x2a>
 800bf36:	68a8      	ldr	r0, [r5, #8]
 800bf38:	f00c f851 	bl	8017fde <memcpy>
 800bf3c:	68ab      	ldr	r3, [r5, #8]
 800bf3e:	6928      	ldr	r0, [r5, #16]
 800bf40:	4423      	add	r3, r4
 800bf42:	4420      	add	r0, r4
 800bf44:	1b36      	subs	r6, r6, r4
 800bf46:	60ab      	str	r3, [r5, #8]
 800bf48:	6128      	str	r0, [r5, #16]
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	4631      	mov	r1, r6
 800bf4e:	4628      	mov	r0, r5
 800bf50:	f7fd fa52 	bl	80093f8 <ucdr_check_final_buffer_behavior_array>
 800bf54:	1bb9      	subs	r1, r7, r6
 800bf56:	4604      	mov	r4, r0
 800bf58:	4602      	mov	r2, r0
 800bf5a:	4441      	add	r1, r8
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d1ea      	bne.n	800bf36 <ucdr_serialize_endian_array_char+0x16>
 800bf60:	2301      	movs	r3, #1
 800bf62:	7da8      	ldrb	r0, [r5, #22]
 800bf64:	756b      	strb	r3, [r5, #21]
 800bf66:	4058      	eors	r0, r3
 800bf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf6c:	463a      	mov	r2, r7
 800bf6e:	68a8      	ldr	r0, [r5, #8]
 800bf70:	4641      	mov	r1, r8
 800bf72:	f00c f834 	bl	8017fde <memcpy>
 800bf76:	68aa      	ldr	r2, [r5, #8]
 800bf78:	692b      	ldr	r3, [r5, #16]
 800bf7a:	443a      	add	r2, r7
 800bf7c:	443b      	add	r3, r7
 800bf7e:	60aa      	str	r2, [r5, #8]
 800bf80:	612b      	str	r3, [r5, #16]
 800bf82:	e7ed      	b.n	800bf60 <ucdr_serialize_endian_array_char+0x40>

0800bf84 <ucdr_deserialize_endian_array_char>:
 800bf84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf88:	4619      	mov	r1, r3
 800bf8a:	461f      	mov	r7, r3
 800bf8c:	4605      	mov	r5, r0
 800bf8e:	4690      	mov	r8, r2
 800bf90:	f7fd f9aa 	bl	80092e8 <ucdr_check_buffer_available_for>
 800bf94:	b9e0      	cbnz	r0, 800bfd0 <ucdr_deserialize_endian_array_char+0x4c>
 800bf96:	463e      	mov	r6, r7
 800bf98:	e009      	b.n	800bfae <ucdr_deserialize_endian_array_char+0x2a>
 800bf9a:	68a9      	ldr	r1, [r5, #8]
 800bf9c:	f00c f81f 	bl	8017fde <memcpy>
 800bfa0:	68aa      	ldr	r2, [r5, #8]
 800bfa2:	692b      	ldr	r3, [r5, #16]
 800bfa4:	4422      	add	r2, r4
 800bfa6:	4423      	add	r3, r4
 800bfa8:	1b36      	subs	r6, r6, r4
 800bfaa:	60aa      	str	r2, [r5, #8]
 800bfac:	612b      	str	r3, [r5, #16]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	4631      	mov	r1, r6
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	f7fd fa20 	bl	80093f8 <ucdr_check_final_buffer_behavior_array>
 800bfb8:	4604      	mov	r4, r0
 800bfba:	1bb8      	subs	r0, r7, r6
 800bfbc:	4622      	mov	r2, r4
 800bfbe:	4440      	add	r0, r8
 800bfc0:	2c00      	cmp	r4, #0
 800bfc2:	d1ea      	bne.n	800bf9a <ucdr_deserialize_endian_array_char+0x16>
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	7da8      	ldrb	r0, [r5, #22]
 800bfc8:	756b      	strb	r3, [r5, #21]
 800bfca:	4058      	eors	r0, r3
 800bfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfd0:	463a      	mov	r2, r7
 800bfd2:	68a9      	ldr	r1, [r5, #8]
 800bfd4:	4640      	mov	r0, r8
 800bfd6:	f00c f802 	bl	8017fde <memcpy>
 800bfda:	68aa      	ldr	r2, [r5, #8]
 800bfdc:	692b      	ldr	r3, [r5, #16]
 800bfde:	443a      	add	r2, r7
 800bfe0:	443b      	add	r3, r7
 800bfe2:	60aa      	str	r2, [r5, #8]
 800bfe4:	612b      	str	r3, [r5, #16]
 800bfe6:	e7ed      	b.n	800bfc4 <ucdr_deserialize_endian_array_char+0x40>

0800bfe8 <ucdr_serialize_array_uint8_t>:
 800bfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfec:	4688      	mov	r8, r1
 800bfee:	4611      	mov	r1, r2
 800bff0:	4617      	mov	r7, r2
 800bff2:	4605      	mov	r5, r0
 800bff4:	f7fd f978 	bl	80092e8 <ucdr_check_buffer_available_for>
 800bff8:	b9e0      	cbnz	r0, 800c034 <ucdr_serialize_array_uint8_t+0x4c>
 800bffa:	463e      	mov	r6, r7
 800bffc:	e009      	b.n	800c012 <ucdr_serialize_array_uint8_t+0x2a>
 800bffe:	68a8      	ldr	r0, [r5, #8]
 800c000:	f00b ffed 	bl	8017fde <memcpy>
 800c004:	68aa      	ldr	r2, [r5, #8]
 800c006:	692b      	ldr	r3, [r5, #16]
 800c008:	4422      	add	r2, r4
 800c00a:	4423      	add	r3, r4
 800c00c:	1b36      	subs	r6, r6, r4
 800c00e:	60aa      	str	r2, [r5, #8]
 800c010:	612b      	str	r3, [r5, #16]
 800c012:	2201      	movs	r2, #1
 800c014:	4631      	mov	r1, r6
 800c016:	4628      	mov	r0, r5
 800c018:	f7fd f9ee 	bl	80093f8 <ucdr_check_final_buffer_behavior_array>
 800c01c:	1bb9      	subs	r1, r7, r6
 800c01e:	4604      	mov	r4, r0
 800c020:	4602      	mov	r2, r0
 800c022:	4441      	add	r1, r8
 800c024:	2800      	cmp	r0, #0
 800c026:	d1ea      	bne.n	800bffe <ucdr_serialize_array_uint8_t+0x16>
 800c028:	2301      	movs	r3, #1
 800c02a:	7da8      	ldrb	r0, [r5, #22]
 800c02c:	756b      	strb	r3, [r5, #21]
 800c02e:	4058      	eors	r0, r3
 800c030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c034:	463a      	mov	r2, r7
 800c036:	68a8      	ldr	r0, [r5, #8]
 800c038:	4641      	mov	r1, r8
 800c03a:	f00b ffd0 	bl	8017fde <memcpy>
 800c03e:	68aa      	ldr	r2, [r5, #8]
 800c040:	692b      	ldr	r3, [r5, #16]
 800c042:	443a      	add	r2, r7
 800c044:	443b      	add	r3, r7
 800c046:	60aa      	str	r2, [r5, #8]
 800c048:	612b      	str	r3, [r5, #16]
 800c04a:	e7ed      	b.n	800c028 <ucdr_serialize_array_uint8_t+0x40>

0800c04c <ucdr_serialize_endian_array_uint8_t>:
 800c04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c050:	4619      	mov	r1, r3
 800c052:	461f      	mov	r7, r3
 800c054:	4605      	mov	r5, r0
 800c056:	4690      	mov	r8, r2
 800c058:	f7fd f946 	bl	80092e8 <ucdr_check_buffer_available_for>
 800c05c:	b9e0      	cbnz	r0, 800c098 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800c05e:	463e      	mov	r6, r7
 800c060:	e009      	b.n	800c076 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800c062:	68a8      	ldr	r0, [r5, #8]
 800c064:	f00b ffbb 	bl	8017fde <memcpy>
 800c068:	68ab      	ldr	r3, [r5, #8]
 800c06a:	6928      	ldr	r0, [r5, #16]
 800c06c:	4423      	add	r3, r4
 800c06e:	4420      	add	r0, r4
 800c070:	1b36      	subs	r6, r6, r4
 800c072:	60ab      	str	r3, [r5, #8]
 800c074:	6128      	str	r0, [r5, #16]
 800c076:	2201      	movs	r2, #1
 800c078:	4631      	mov	r1, r6
 800c07a:	4628      	mov	r0, r5
 800c07c:	f7fd f9bc 	bl	80093f8 <ucdr_check_final_buffer_behavior_array>
 800c080:	1bb9      	subs	r1, r7, r6
 800c082:	4604      	mov	r4, r0
 800c084:	4602      	mov	r2, r0
 800c086:	4441      	add	r1, r8
 800c088:	2800      	cmp	r0, #0
 800c08a:	d1ea      	bne.n	800c062 <ucdr_serialize_endian_array_uint8_t+0x16>
 800c08c:	2301      	movs	r3, #1
 800c08e:	7da8      	ldrb	r0, [r5, #22]
 800c090:	756b      	strb	r3, [r5, #21]
 800c092:	4058      	eors	r0, r3
 800c094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c098:	463a      	mov	r2, r7
 800c09a:	68a8      	ldr	r0, [r5, #8]
 800c09c:	4641      	mov	r1, r8
 800c09e:	f00b ff9e 	bl	8017fde <memcpy>
 800c0a2:	68aa      	ldr	r2, [r5, #8]
 800c0a4:	692b      	ldr	r3, [r5, #16]
 800c0a6:	443a      	add	r2, r7
 800c0a8:	443b      	add	r3, r7
 800c0aa:	60aa      	str	r2, [r5, #8]
 800c0ac:	612b      	str	r3, [r5, #16]
 800c0ae:	e7ed      	b.n	800c08c <ucdr_serialize_endian_array_uint8_t+0x40>

0800c0b0 <ucdr_deserialize_array_uint8_t>:
 800c0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b4:	4688      	mov	r8, r1
 800c0b6:	4611      	mov	r1, r2
 800c0b8:	4617      	mov	r7, r2
 800c0ba:	4605      	mov	r5, r0
 800c0bc:	f7fd f914 	bl	80092e8 <ucdr_check_buffer_available_for>
 800c0c0:	b9e0      	cbnz	r0, 800c0fc <ucdr_deserialize_array_uint8_t+0x4c>
 800c0c2:	463e      	mov	r6, r7
 800c0c4:	e009      	b.n	800c0da <ucdr_deserialize_array_uint8_t+0x2a>
 800c0c6:	68a9      	ldr	r1, [r5, #8]
 800c0c8:	f00b ff89 	bl	8017fde <memcpy>
 800c0cc:	68aa      	ldr	r2, [r5, #8]
 800c0ce:	692b      	ldr	r3, [r5, #16]
 800c0d0:	4422      	add	r2, r4
 800c0d2:	4423      	add	r3, r4
 800c0d4:	1b36      	subs	r6, r6, r4
 800c0d6:	60aa      	str	r2, [r5, #8]
 800c0d8:	612b      	str	r3, [r5, #16]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	4631      	mov	r1, r6
 800c0de:	4628      	mov	r0, r5
 800c0e0:	f7fd f98a 	bl	80093f8 <ucdr_check_final_buffer_behavior_array>
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	1bb8      	subs	r0, r7, r6
 800c0e8:	4622      	mov	r2, r4
 800c0ea:	4440      	add	r0, r8
 800c0ec:	2c00      	cmp	r4, #0
 800c0ee:	d1ea      	bne.n	800c0c6 <ucdr_deserialize_array_uint8_t+0x16>
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	7da8      	ldrb	r0, [r5, #22]
 800c0f4:	756b      	strb	r3, [r5, #21]
 800c0f6:	4058      	eors	r0, r3
 800c0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0fc:	463a      	mov	r2, r7
 800c0fe:	68a9      	ldr	r1, [r5, #8]
 800c100:	4640      	mov	r0, r8
 800c102:	f00b ff6c 	bl	8017fde <memcpy>
 800c106:	68aa      	ldr	r2, [r5, #8]
 800c108:	692b      	ldr	r3, [r5, #16]
 800c10a:	443a      	add	r2, r7
 800c10c:	443b      	add	r3, r7
 800c10e:	60aa      	str	r2, [r5, #8]
 800c110:	612b      	str	r3, [r5, #16]
 800c112:	e7ed      	b.n	800c0f0 <ucdr_deserialize_array_uint8_t+0x40>

0800c114 <ucdr_deserialize_endian_array_uint8_t>:
 800c114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c118:	4619      	mov	r1, r3
 800c11a:	461f      	mov	r7, r3
 800c11c:	4605      	mov	r5, r0
 800c11e:	4690      	mov	r8, r2
 800c120:	f7fd f8e2 	bl	80092e8 <ucdr_check_buffer_available_for>
 800c124:	b9e0      	cbnz	r0, 800c160 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800c126:	463e      	mov	r6, r7
 800c128:	e009      	b.n	800c13e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800c12a:	68a9      	ldr	r1, [r5, #8]
 800c12c:	f00b ff57 	bl	8017fde <memcpy>
 800c130:	68aa      	ldr	r2, [r5, #8]
 800c132:	692b      	ldr	r3, [r5, #16]
 800c134:	4422      	add	r2, r4
 800c136:	4423      	add	r3, r4
 800c138:	1b36      	subs	r6, r6, r4
 800c13a:	60aa      	str	r2, [r5, #8]
 800c13c:	612b      	str	r3, [r5, #16]
 800c13e:	2201      	movs	r2, #1
 800c140:	4631      	mov	r1, r6
 800c142:	4628      	mov	r0, r5
 800c144:	f7fd f958 	bl	80093f8 <ucdr_check_final_buffer_behavior_array>
 800c148:	4604      	mov	r4, r0
 800c14a:	1bb8      	subs	r0, r7, r6
 800c14c:	4622      	mov	r2, r4
 800c14e:	4440      	add	r0, r8
 800c150:	2c00      	cmp	r4, #0
 800c152:	d1ea      	bne.n	800c12a <ucdr_deserialize_endian_array_uint8_t+0x16>
 800c154:	2301      	movs	r3, #1
 800c156:	7da8      	ldrb	r0, [r5, #22]
 800c158:	756b      	strb	r3, [r5, #21]
 800c15a:	4058      	eors	r0, r3
 800c15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c160:	463a      	mov	r2, r7
 800c162:	68a9      	ldr	r1, [r5, #8]
 800c164:	4640      	mov	r0, r8
 800c166:	f00b ff3a 	bl	8017fde <memcpy>
 800c16a:	68aa      	ldr	r2, [r5, #8]
 800c16c:	692b      	ldr	r3, [r5, #16]
 800c16e:	443a      	add	r2, r7
 800c170:	443b      	add	r3, r7
 800c172:	60aa      	str	r2, [r5, #8]
 800c174:	612b      	str	r3, [r5, #16]
 800c176:	e7ed      	b.n	800c154 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800c178 <ucdr_serialize_array_double>:
 800c178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c17c:	460e      	mov	r6, r1
 800c17e:	2108      	movs	r1, #8
 800c180:	4604      	mov	r4, r0
 800c182:	4617      	mov	r7, r2
 800c184:	f7fd f910 	bl	80093a8 <ucdr_buffer_alignment>
 800c188:	4601      	mov	r1, r0
 800c18a:	4620      	mov	r0, r4
 800c18c:	7d65      	ldrb	r5, [r4, #21]
 800c18e:	f7fd f94f 	bl	8009430 <ucdr_advance_buffer>
 800c192:	7d21      	ldrb	r1, [r4, #20]
 800c194:	7565      	strb	r5, [r4, #21]
 800c196:	2901      	cmp	r1, #1
 800c198:	d010      	beq.n	800c1bc <ucdr_serialize_array_double+0x44>
 800c19a:	b157      	cbz	r7, 800c1b2 <ucdr_serialize_array_double+0x3a>
 800c19c:	2500      	movs	r5, #0
 800c19e:	e000      	b.n	800c1a2 <ucdr_serialize_array_double+0x2a>
 800c1a0:	7d21      	ldrb	r1, [r4, #20]
 800c1a2:	ecb6 0b02 	vldmia	r6!, {d0}
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	3501      	adds	r5, #1
 800c1aa:	f7fc fe4f 	bl	8008e4c <ucdr_serialize_endian_double>
 800c1ae:	42af      	cmp	r7, r5
 800c1b0:	d1f6      	bne.n	800c1a0 <ucdr_serialize_array_double+0x28>
 800c1b2:	7da0      	ldrb	r0, [r4, #22]
 800c1b4:	f080 0001 	eor.w	r0, r0, #1
 800c1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1bc:	00ff      	lsls	r7, r7, #3
 800c1be:	4639      	mov	r1, r7
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f7fd f891 	bl	80092e8 <ucdr_check_buffer_available_for>
 800c1c6:	b9f8      	cbnz	r0, 800c208 <ucdr_serialize_array_double+0x90>
 800c1c8:	46b8      	mov	r8, r7
 800c1ca:	e00a      	b.n	800c1e2 <ucdr_serialize_array_double+0x6a>
 800c1cc:	68a0      	ldr	r0, [r4, #8]
 800c1ce:	f00b ff06 	bl	8017fde <memcpy>
 800c1d2:	68a2      	ldr	r2, [r4, #8]
 800c1d4:	6923      	ldr	r3, [r4, #16]
 800c1d6:	442a      	add	r2, r5
 800c1d8:	442b      	add	r3, r5
 800c1da:	eba8 0805 	sub.w	r8, r8, r5
 800c1de:	60a2      	str	r2, [r4, #8]
 800c1e0:	6123      	str	r3, [r4, #16]
 800c1e2:	2208      	movs	r2, #8
 800c1e4:	4641      	mov	r1, r8
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f7fd f906 	bl	80093f8 <ucdr_check_final_buffer_behavior_array>
 800c1ec:	eba7 0108 	sub.w	r1, r7, r8
 800c1f0:	4605      	mov	r5, r0
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	4431      	add	r1, r6
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	d1e8      	bne.n	800c1cc <ucdr_serialize_array_double+0x54>
 800c1fa:	7da0      	ldrb	r0, [r4, #22]
 800c1fc:	2308      	movs	r3, #8
 800c1fe:	7563      	strb	r3, [r4, #21]
 800c200:	f080 0001 	eor.w	r0, r0, #1
 800c204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c208:	463a      	mov	r2, r7
 800c20a:	68a0      	ldr	r0, [r4, #8]
 800c20c:	4631      	mov	r1, r6
 800c20e:	f00b fee6 	bl	8017fde <memcpy>
 800c212:	68a2      	ldr	r2, [r4, #8]
 800c214:	6923      	ldr	r3, [r4, #16]
 800c216:	443a      	add	r2, r7
 800c218:	443b      	add	r3, r7
 800c21a:	60a2      	str	r2, [r4, #8]
 800c21c:	6123      	str	r3, [r4, #16]
 800c21e:	e7ec      	b.n	800c1fa <ucdr_serialize_array_double+0x82>

0800c220 <ucdr_deserialize_array_double>:
 800c220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c224:	460e      	mov	r6, r1
 800c226:	2108      	movs	r1, #8
 800c228:	4604      	mov	r4, r0
 800c22a:	4617      	mov	r7, r2
 800c22c:	f7fd f8bc 	bl	80093a8 <ucdr_buffer_alignment>
 800c230:	4601      	mov	r1, r0
 800c232:	4620      	mov	r0, r4
 800c234:	7d65      	ldrb	r5, [r4, #21]
 800c236:	f7fd f8fb 	bl	8009430 <ucdr_advance_buffer>
 800c23a:	7d21      	ldrb	r1, [r4, #20]
 800c23c:	7565      	strb	r5, [r4, #21]
 800c23e:	2901      	cmp	r1, #1
 800c240:	d011      	beq.n	800c266 <ucdr_deserialize_array_double+0x46>
 800c242:	b15f      	cbz	r7, 800c25c <ucdr_deserialize_array_double+0x3c>
 800c244:	2500      	movs	r5, #0
 800c246:	e000      	b.n	800c24a <ucdr_deserialize_array_double+0x2a>
 800c248:	7d21      	ldrb	r1, [r4, #20]
 800c24a:	4632      	mov	r2, r6
 800c24c:	4620      	mov	r0, r4
 800c24e:	3501      	adds	r5, #1
 800c250:	f7fc ff82 	bl	8009158 <ucdr_deserialize_endian_double>
 800c254:	42af      	cmp	r7, r5
 800c256:	f106 0608 	add.w	r6, r6, #8
 800c25a:	d1f5      	bne.n	800c248 <ucdr_deserialize_array_double+0x28>
 800c25c:	7da0      	ldrb	r0, [r4, #22]
 800c25e:	f080 0001 	eor.w	r0, r0, #1
 800c262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c266:	00ff      	lsls	r7, r7, #3
 800c268:	4639      	mov	r1, r7
 800c26a:	4620      	mov	r0, r4
 800c26c:	f7fd f83c 	bl	80092e8 <ucdr_check_buffer_available_for>
 800c270:	b9f8      	cbnz	r0, 800c2b2 <ucdr_deserialize_array_double+0x92>
 800c272:	46b8      	mov	r8, r7
 800c274:	e00a      	b.n	800c28c <ucdr_deserialize_array_double+0x6c>
 800c276:	68a1      	ldr	r1, [r4, #8]
 800c278:	f00b feb1 	bl	8017fde <memcpy>
 800c27c:	68a2      	ldr	r2, [r4, #8]
 800c27e:	6923      	ldr	r3, [r4, #16]
 800c280:	442a      	add	r2, r5
 800c282:	442b      	add	r3, r5
 800c284:	eba8 0805 	sub.w	r8, r8, r5
 800c288:	60a2      	str	r2, [r4, #8]
 800c28a:	6123      	str	r3, [r4, #16]
 800c28c:	2208      	movs	r2, #8
 800c28e:	4641      	mov	r1, r8
 800c290:	4620      	mov	r0, r4
 800c292:	f7fd f8b1 	bl	80093f8 <ucdr_check_final_buffer_behavior_array>
 800c296:	4605      	mov	r5, r0
 800c298:	eba7 0008 	sub.w	r0, r7, r8
 800c29c:	462a      	mov	r2, r5
 800c29e:	4430      	add	r0, r6
 800c2a0:	2d00      	cmp	r5, #0
 800c2a2:	d1e8      	bne.n	800c276 <ucdr_deserialize_array_double+0x56>
 800c2a4:	7da0      	ldrb	r0, [r4, #22]
 800c2a6:	2308      	movs	r3, #8
 800c2a8:	7563      	strb	r3, [r4, #21]
 800c2aa:	f080 0001 	eor.w	r0, r0, #1
 800c2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b2:	463a      	mov	r2, r7
 800c2b4:	68a1      	ldr	r1, [r4, #8]
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f00b fe91 	bl	8017fde <memcpy>
 800c2bc:	68a2      	ldr	r2, [r4, #8]
 800c2be:	6923      	ldr	r3, [r4, #16]
 800c2c0:	443a      	add	r2, r7
 800c2c2:	443b      	add	r3, r7
 800c2c4:	60a2      	str	r2, [r4, #8]
 800c2c6:	6123      	str	r3, [r4, #16]
 800c2c8:	e7ec      	b.n	800c2a4 <ucdr_deserialize_array_double+0x84>
 800c2ca:	bf00      	nop

0800c2cc <ucdr_serialize_sequence_char>:
 800c2cc:	b570      	push	{r4, r5, r6, lr}
 800c2ce:	460e      	mov	r6, r1
 800c2d0:	4615      	mov	r5, r2
 800c2d2:	7d01      	ldrb	r1, [r0, #20]
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	f7fc f851 	bl	800837c <ucdr_serialize_endian_uint32_t>
 800c2da:	b90d      	cbnz	r5, 800c2e0 <ucdr_serialize_sequence_char+0x14>
 800c2dc:	2001      	movs	r0, #1
 800c2de:	bd70      	pop	{r4, r5, r6, pc}
 800c2e0:	7d21      	ldrb	r1, [r4, #20]
 800c2e2:	462b      	mov	r3, r5
 800c2e4:	4632      	mov	r2, r6
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c2ec:	f7ff be18 	b.w	800bf20 <ucdr_serialize_endian_array_char>

0800c2f0 <ucdr_deserialize_sequence_char>:
 800c2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2f4:	461d      	mov	r5, r3
 800c2f6:	4616      	mov	r6, r2
 800c2f8:	460f      	mov	r7, r1
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	7d01      	ldrb	r1, [r0, #20]
 800c2fe:	4604      	mov	r4, r0
 800c300:	f7fc f95a 	bl	80085b8 <ucdr_deserialize_endian_uint32_t>
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	429e      	cmp	r6, r3
 800c308:	d208      	bcs.n	800c31c <ucdr_deserialize_sequence_char+0x2c>
 800c30a:	2201      	movs	r2, #1
 800c30c:	75a2      	strb	r2, [r4, #22]
 800c30e:	7d21      	ldrb	r1, [r4, #20]
 800c310:	463a      	mov	r2, r7
 800c312:	4620      	mov	r0, r4
 800c314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c318:	f7ff be34 	b.w	800bf84 <ucdr_deserialize_endian_array_char>
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1f6      	bne.n	800c30e <ucdr_deserialize_sequence_char+0x1e>
 800c320:	2001      	movs	r0, #1
 800c322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c326:	bf00      	nop

0800c328 <ucdr_serialize_sequence_uint8_t>:
 800c328:	b570      	push	{r4, r5, r6, lr}
 800c32a:	460e      	mov	r6, r1
 800c32c:	4615      	mov	r5, r2
 800c32e:	7d01      	ldrb	r1, [r0, #20]
 800c330:	4604      	mov	r4, r0
 800c332:	f7fc f823 	bl	800837c <ucdr_serialize_endian_uint32_t>
 800c336:	b90d      	cbnz	r5, 800c33c <ucdr_serialize_sequence_uint8_t+0x14>
 800c338:	2001      	movs	r0, #1
 800c33a:	bd70      	pop	{r4, r5, r6, pc}
 800c33c:	7d21      	ldrb	r1, [r4, #20]
 800c33e:	462b      	mov	r3, r5
 800c340:	4632      	mov	r2, r6
 800c342:	4620      	mov	r0, r4
 800c344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c348:	f7ff be80 	b.w	800c04c <ucdr_serialize_endian_array_uint8_t>

0800c34c <ucdr_deserialize_sequence_uint8_t>:
 800c34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c350:	461d      	mov	r5, r3
 800c352:	4616      	mov	r6, r2
 800c354:	460f      	mov	r7, r1
 800c356:	461a      	mov	r2, r3
 800c358:	7d01      	ldrb	r1, [r0, #20]
 800c35a:	4604      	mov	r4, r0
 800c35c:	f7fc f92c 	bl	80085b8 <ucdr_deserialize_endian_uint32_t>
 800c360:	682b      	ldr	r3, [r5, #0]
 800c362:	429e      	cmp	r6, r3
 800c364:	d208      	bcs.n	800c378 <ucdr_deserialize_sequence_uint8_t+0x2c>
 800c366:	2201      	movs	r2, #1
 800c368:	75a2      	strb	r2, [r4, #22]
 800c36a:	7d21      	ldrb	r1, [r4, #20]
 800c36c:	463a      	mov	r2, r7
 800c36e:	4620      	mov	r0, r4
 800c370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c374:	f7ff bece 	b.w	800c114 <ucdr_deserialize_endian_array_uint8_t>
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1f6      	bne.n	800c36a <ucdr_deserialize_sequence_uint8_t+0x1e>
 800c37c:	2001      	movs	r0, #1
 800c37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c382:	bf00      	nop

0800c384 <uxr_buffer_delete_entity>:
 800c384:	b510      	push	{r4, lr}
 800c386:	2300      	movs	r3, #0
 800c388:	b08e      	sub	sp, #56	@ 0x38
 800c38a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c38e:	2303      	movs	r3, #3
 800c390:	9300      	str	r3, [sp, #0]
 800c392:	2204      	movs	r2, #4
 800c394:	ab06      	add	r3, sp, #24
 800c396:	4604      	mov	r4, r0
 800c398:	f001 f93c 	bl	800d614 <uxr_prepare_stream_to_write_submessage>
 800c39c:	b918      	cbnz	r0, 800c3a6 <uxr_buffer_delete_entity+0x22>
 800c39e:	4604      	mov	r4, r0
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	b00e      	add	sp, #56	@ 0x38
 800c3a4:	bd10      	pop	{r4, pc}
 800c3a6:	9902      	ldr	r1, [sp, #8]
 800c3a8:	aa05      	add	r2, sp, #20
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f001 fa6c 	bl	800d888 <uxr_init_base_object_request>
 800c3b0:	a905      	add	r1, sp, #20
 800c3b2:	4604      	mov	r4, r0
 800c3b4:	a806      	add	r0, sp, #24
 800c3b6:	f002 fc79 	bl	800ecac <uxr_serialize_DELETE_Payload>
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	b00e      	add	sp, #56	@ 0x38
 800c3be:	bd10      	pop	{r4, pc}

0800c3c0 <uxr_common_create_entity>:
 800c3c0:	b510      	push	{r4, lr}
 800c3c2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c3c6:	b08c      	sub	sp, #48	@ 0x30
 800c3c8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c3cc:	f1bc 0f01 	cmp.w	ip, #1
 800c3d0:	bf08      	it	eq
 800c3d2:	f003 0201 	andeq.w	r2, r3, #1
 800c3d6:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800c3da:	bf18      	it	ne
 800c3dc:	2200      	movne	r2, #0
 800c3de:	330e      	adds	r3, #14
 800c3e0:	441a      	add	r2, r3
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e9cd 3100 	strd	r3, r1, [sp]
 800c3e8:	b292      	uxth	r2, r2
 800c3ea:	9903      	ldr	r1, [sp, #12]
 800c3ec:	ab04      	add	r3, sp, #16
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	f001 f910 	bl	800d614 <uxr_prepare_stream_to_write_submessage>
 800c3f4:	b918      	cbnz	r0, 800c3fe <uxr_common_create_entity+0x3e>
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	b00c      	add	sp, #48	@ 0x30
 800c3fc:	bd10      	pop	{r4, pc}
 800c3fe:	9902      	ldr	r1, [sp, #8]
 800c400:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c402:	4620      	mov	r0, r4
 800c404:	f001 fa40 	bl	800d888 <uxr_init_base_object_request>
 800c408:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c40a:	4604      	mov	r4, r0
 800c40c:	a804      	add	r0, sp, #16
 800c40e:	f002 fbab 	bl	800eb68 <uxr_serialize_CREATE_Payload>
 800c412:	4620      	mov	r0, r4
 800c414:	b00c      	add	sp, #48	@ 0x30
 800c416:	bd10      	pop	{r4, pc}

0800c418 <uxr_buffer_create_participant_bin>:
 800c418:	b570      	push	{r4, r5, r6, lr}
 800c41a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800c41e:	ac11      	add	r4, sp, #68	@ 0x44
 800c420:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800c424:	2303      	movs	r3, #3
 800c426:	7223      	strb	r3, [r4, #8]
 800c428:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800c42a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800c42e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c432:	2201      	movs	r2, #1
 800c434:	2100      	movs	r1, #0
 800c436:	4605      	mov	r5, r0
 800c438:	7122      	strb	r2, [r4, #4]
 800c43a:	f88d 1014 	strb.w	r1, [sp, #20]
 800c43e:	b1cb      	cbz	r3, 800c474 <uxr_buffer_create_participant_bin+0x5c>
 800c440:	f88d 201c 	strb.w	r2, [sp, #28]
 800c444:	9308      	str	r3, [sp, #32]
 800c446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c44a:	a915      	add	r1, sp, #84	@ 0x54
 800c44c:	a809      	add	r0, sp, #36	@ 0x24
 800c44e:	f7fc ff9f 	bl	8009390 <ucdr_init_buffer>
 800c452:	a905      	add	r1, sp, #20
 800c454:	a809      	add	r0, sp, #36	@ 0x24
 800c456:	f001 ff8f 	bl	800e378 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800c45a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c45c:	9600      	str	r6, [sp, #0]
 800c45e:	9401      	str	r4, [sp, #4]
 800c460:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c464:	60e3      	str	r3, [r4, #12]
 800c466:	4628      	mov	r0, r5
 800c468:	b29b      	uxth	r3, r3
 800c46a:	f7ff ffa9 	bl	800c3c0 <uxr_common_create_entity>
 800c46e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800c472:	bd70      	pop	{r4, r5, r6, pc}
 800c474:	f88d 301c 	strb.w	r3, [sp, #28]
 800c478:	e7e5      	b.n	800c446 <uxr_buffer_create_participant_bin+0x2e>
 800c47a:	bf00      	nop

0800c47c <uxr_buffer_create_topic_bin>:
 800c47c:	b570      	push	{r4, r5, r6, lr}
 800c47e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800c482:	4605      	mov	r5, r0
 800c484:	9105      	str	r1, [sp, #20]
 800c486:	4618      	mov	r0, r3
 800c488:	a997      	add	r1, sp, #604	@ 0x25c
 800c48a:	2302      	movs	r3, #2
 800c48c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800c490:	9204      	str	r2, [sp, #16]
 800c492:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800c496:	f000 f96f 	bl	800c778 <uxr_object_id_to_raw>
 800c49a:	2303      	movs	r3, #3
 800c49c:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c4a0:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800c4a2:	9306      	str	r3, [sp, #24]
 800c4a4:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800c4a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800c4ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	a917      	add	r1, sp, #92	@ 0x5c
 800c4b6:	a80b      	add	r0, sp, #44	@ 0x2c
 800c4b8:	f88d 301c 	strb.w	r3, [sp, #28]
 800c4bc:	f7fc ff68 	bl	8009390 <ucdr_init_buffer>
 800c4c0:	a906      	add	r1, sp, #24
 800c4c2:	a80b      	add	r0, sp, #44	@ 0x2c
 800c4c4:	f001 ff7a 	bl	800e3bc <uxr_serialize_OBJK_Topic_Binary>
 800c4c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4ca:	9316      	str	r3, [sp, #88]	@ 0x58
 800c4cc:	ac13      	add	r4, sp, #76	@ 0x4c
 800c4ce:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c4d2:	9600      	str	r6, [sp, #0]
 800c4d4:	9401      	str	r4, [sp, #4]
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	4628      	mov	r0, r5
 800c4da:	f7ff ff71 	bl	800c3c0 <uxr_common_create_entity>
 800c4de:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800c4e2:	bd70      	pop	{r4, r5, r6, pc}

0800c4e4 <uxr_buffer_create_publisher_bin>:
 800c4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4e6:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800c4ea:	4605      	mov	r5, r0
 800c4ec:	9105      	str	r1, [sp, #20]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	2603      	movs	r6, #3
 800c4f2:	a992      	add	r1, sp, #584	@ 0x248
 800c4f4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800c4f8:	9204      	str	r2, [sp, #16]
 800c4fa:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800c4fe:	f000 f93b 	bl	800c778 <uxr_object_id_to_raw>
 800c502:	2300      	movs	r3, #0
 800c504:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c508:	a912      	add	r1, sp, #72	@ 0x48
 800c50a:	a806      	add	r0, sp, #24
 800c50c:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c510:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c514:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800c518:	f7fc ff3a 	bl	8009390 <ucdr_init_buffer>
 800c51c:	a993      	add	r1, sp, #588	@ 0x24c
 800c51e:	a806      	add	r0, sp, #24
 800c520:	f002 f802 	bl	800e528 <uxr_serialize_OBJK_Publisher_Binary>
 800c524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c526:	9311      	str	r3, [sp, #68]	@ 0x44
 800c528:	ac0e      	add	r4, sp, #56	@ 0x38
 800c52a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c52e:	9700      	str	r7, [sp, #0]
 800c530:	9401      	str	r4, [sp, #4]
 800c532:	b29b      	uxth	r3, r3
 800c534:	4628      	mov	r0, r5
 800c536:	f7ff ff43 	bl	800c3c0 <uxr_common_create_entity>
 800c53a:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800c53e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c540 <uxr_buffer_create_subscriber_bin>:
 800c540:	b570      	push	{r4, r5, r6, lr}
 800c542:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800c546:	4605      	mov	r5, r0
 800c548:	9105      	str	r1, [sp, #20]
 800c54a:	4618      	mov	r0, r3
 800c54c:	a992      	add	r1, sp, #584	@ 0x248
 800c54e:	2304      	movs	r3, #4
 800c550:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800c554:	9204      	str	r2, [sp, #16]
 800c556:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800c55a:	f000 f90d 	bl	800c778 <uxr_object_id_to_raw>
 800c55e:	2203      	movs	r2, #3
 800c560:	2300      	movs	r3, #0
 800c562:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
 800c566:	a912      	add	r1, sp, #72	@ 0x48
 800c568:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c56c:	a806      	add	r0, sp, #24
 800c56e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c572:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c576:	f7fc ff0b 	bl	8009390 <ucdr_init_buffer>
 800c57a:	a993      	add	r1, sp, #588	@ 0x24c
 800c57c:	a806      	add	r0, sp, #24
 800c57e:	f002 f885 	bl	800e68c <uxr_serialize_OBJK_Subscriber_Binary>
 800c582:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c584:	9311      	str	r3, [sp, #68]	@ 0x44
 800c586:	ac0e      	add	r4, sp, #56	@ 0x38
 800c588:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c58c:	9600      	str	r6, [sp, #0]
 800c58e:	9401      	str	r4, [sp, #4]
 800c590:	b29b      	uxth	r3, r3
 800c592:	4628      	mov	r0, r5
 800c594:	f7ff ff14 	bl	800c3c0 <uxr_common_create_entity>
 800c598:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800c59c:	bd70      	pop	{r4, r5, r6, pc}
 800c59e:	bf00      	nop

0800c5a0 <uxr_buffer_create_datawriter_bin>:
 800c5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5a2:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800c5a6:	ac1d      	add	r4, sp, #116	@ 0x74
 800c5a8:	9105      	str	r1, [sp, #20]
 800c5aa:	4605      	mov	r5, r0
 800c5ac:	a9a1      	add	r1, sp, #644	@ 0x284
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	2305      	movs	r3, #5
 800c5b2:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 800c5b6:	9204      	str	r2, [sp, #16]
 800c5b8:	7123      	strb	r3, [r4, #4]
 800c5ba:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 800c5be:	f000 f8db 	bl	800c778 <uxr_object_id_to_raw>
 800c5c2:	2303      	movs	r3, #3
 800c5c4:	a90e      	add	r1, sp, #56	@ 0x38
 800c5c6:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800c5c8:	7223      	strb	r3, [r4, #8]
 800c5ca:	f000 f8d5 	bl	800c778 <uxr_object_id_to_raw>
 800c5ce:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 800c5d2:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	3f00      	subs	r7, #0
 800c5da:	fab3 f383 	clz	r3, r3
 800c5de:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 800c5e2:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800c5e6:	bf18      	it	ne
 800c5e8:	2701      	movne	r7, #1
 800c5ea:	095b      	lsrs	r3, r3, #5
 800c5ec:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800c5f0:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800c5f4:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800c5fe:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c602:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800c606:	b919      	cbnz	r1, 800c610 <uxr_buffer_create_datawriter_bin+0x70>
 800c608:	f043 0302 	orr.w	r3, r3, #2
 800c60c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c610:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 800c614:	2a01      	cmp	r2, #1
 800c616:	d022      	beq.n	800c65e <uxr_buffer_create_datawriter_bin+0xbe>
 800c618:	2a03      	cmp	r2, #3
 800c61a:	d01b      	beq.n	800c654 <uxr_buffer_create_datawriter_bin+0xb4>
 800c61c:	b91a      	cbnz	r2, 800c626 <uxr_buffer_create_datawriter_bin+0x86>
 800c61e:	f043 0308 	orr.w	r3, r3, #8
 800c622:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c626:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c62a:	a921      	add	r1, sp, #132	@ 0x84
 800c62c:	a806      	add	r0, sp, #24
 800c62e:	f7fc feaf 	bl	8009390 <ucdr_init_buffer>
 800c632:	a90e      	add	r1, sp, #56	@ 0x38
 800c634:	a806      	add	r0, sp, #24
 800c636:	f002 f8cb 	bl	800e7d0 <uxr_serialize_OBJK_DataWriter_Binary>
 800c63a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c63c:	9600      	str	r6, [sp, #0]
 800c63e:	9401      	str	r4, [sp, #4]
 800c640:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c644:	60e3      	str	r3, [r4, #12]
 800c646:	4628      	mov	r0, r5
 800c648:	b29b      	uxth	r3, r3
 800c64a:	f7ff feb9 	bl	800c3c0 <uxr_common_create_entity>
 800c64e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800c652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c654:	f043 0320 	orr.w	r3, r3, #32
 800c658:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c65c:	e7e3      	b.n	800c626 <uxr_buffer_create_datawriter_bin+0x86>
 800c65e:	f043 0310 	orr.w	r3, r3, #16
 800c662:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c666:	e7de      	b.n	800c626 <uxr_buffer_create_datawriter_bin+0x86>

0800c668 <uxr_buffer_create_datareader_bin>:
 800c668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c66a:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 800c66e:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c670:	9105      	str	r1, [sp, #20]
 800c672:	4605      	mov	r5, r0
 800c674:	a9a3      	add	r1, sp, #652	@ 0x28c
 800c676:	4618      	mov	r0, r3
 800c678:	2306      	movs	r3, #6
 800c67a:	f8bd 72b0 	ldrh.w	r7, [sp, #688]	@ 0x2b0
 800c67e:	9204      	str	r2, [sp, #16]
 800c680:	7123      	strb	r3, [r4, #4]
 800c682:	f89d 62b4 	ldrb.w	r6, [sp, #692]	@ 0x2b4
 800c686:	f000 f877 	bl	800c778 <uxr_object_id_to_raw>
 800c68a:	2303      	movs	r3, #3
 800c68c:	a90e      	add	r1, sp, #56	@ 0x38
 800c68e:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800c690:	7223      	strb	r3, [r4, #8]
 800c692:	f000 f871 	bl	800c778 <uxr_object_id_to_raw>
 800c696:	f89d 32ad 	ldrb.w	r3, [sp, #685]	@ 0x2ad
 800c69a:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800c69e:	2200      	movs	r2, #0
 800c6a0:	3f00      	subs	r7, #0
 800c6a2:	fab3 f383 	clz	r3, r3
 800c6a6:	f89d 12ae 	ldrb.w	r1, [sp, #686]	@ 0x2ae
 800c6aa:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 800c6ae:	bf18      	it	ne
 800c6b0:	2701      	movne	r7, #1
 800c6b2:	095b      	lsrs	r3, r3, #5
 800c6b4:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800c6b8:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800c6bc:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800c6c0:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800c6ca:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c6ce:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800c6d2:	b919      	cbnz	r1, 800c6dc <uxr_buffer_create_datareader_bin+0x74>
 800c6d4:	f043 0302 	orr.w	r3, r3, #2
 800c6d8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c6dc:	f89d 22ac 	ldrb.w	r2, [sp, #684]	@ 0x2ac
 800c6e0:	2a01      	cmp	r2, #1
 800c6e2:	d022      	beq.n	800c72a <uxr_buffer_create_datareader_bin+0xc2>
 800c6e4:	2a03      	cmp	r2, #3
 800c6e6:	d01b      	beq.n	800c720 <uxr_buffer_create_datareader_bin+0xb8>
 800c6e8:	b91a      	cbnz	r2, 800c6f2 <uxr_buffer_create_datareader_bin+0x8a>
 800c6ea:	f043 0308 	orr.w	r3, r3, #8
 800c6ee:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c6f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c6f6:	a923      	add	r1, sp, #140	@ 0x8c
 800c6f8:	a806      	add	r0, sp, #24
 800c6fa:	f7fc fe49 	bl	8009390 <ucdr_init_buffer>
 800c6fe:	a90e      	add	r1, sp, #56	@ 0x38
 800c700:	a806      	add	r0, sp, #24
 800c702:	f002 f829 	bl	800e758 <uxr_serialize_OBJK_DataReader_Binary>
 800c706:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c708:	9600      	str	r6, [sp, #0]
 800c70a:	9401      	str	r4, [sp, #4]
 800c70c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c710:	60e3      	str	r3, [r4, #12]
 800c712:	4628      	mov	r0, r5
 800c714:	b29b      	uxth	r3, r3
 800c716:	f7ff fe53 	bl	800c3c0 <uxr_common_create_entity>
 800c71a:	f50d 7d25 	add.w	sp, sp, #660	@ 0x294
 800c71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c720:	f043 0320 	orr.w	r3, r3, #32
 800c724:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c728:	e7e3      	b.n	800c6f2 <uxr_buffer_create_datareader_bin+0x8a>
 800c72a:	f043 0310 	orr.w	r3, r3, #16
 800c72e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c732:	e7de      	b.n	800c6f2 <uxr_buffer_create_datareader_bin+0x8a>

0800c734 <uxr_object_id>:
 800c734:	b082      	sub	sp, #8
 800c736:	2300      	movs	r3, #0
 800c738:	f88d 1006 	strb.w	r1, [sp, #6]
 800c73c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c740:	f360 030f 	bfi	r3, r0, #0, #16
 800c744:	f362 431f 	bfi	r3, r2, #16, #16
 800c748:	4618      	mov	r0, r3
 800c74a:	b002      	add	sp, #8
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop

0800c750 <uxr_object_id_from_raw>:
 800c750:	7843      	ldrb	r3, [r0, #1]
 800c752:	7801      	ldrb	r1, [r0, #0]
 800c754:	b082      	sub	sp, #8
 800c756:	f003 020f 	and.w	r2, r3, #15
 800c75a:	f88d 2006 	strb.w	r2, [sp, #6]
 800c75e:	091b      	lsrs	r3, r3, #4
 800c760:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c764:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800c768:	2000      	movs	r0, #0
 800c76a:	f363 000f 	bfi	r0, r3, #0, #16
 800c76e:	f362 401f 	bfi	r0, r2, #16, #16
 800c772:	b002      	add	sp, #8
 800c774:	4770      	bx	lr
 800c776:	bf00      	nop

0800c778 <uxr_object_id_to_raw>:
 800c778:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800c77c:	b082      	sub	sp, #8
 800c77e:	f3c0 120b 	ubfx	r2, r0, #4, #12
 800c782:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800c786:	700a      	strb	r2, [r1, #0]
 800c788:	704b      	strb	r3, [r1, #1]
 800c78a:	b002      	add	sp, #8
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop

0800c790 <on_get_fragmentation_info>:
 800c790:	b500      	push	{lr}
 800c792:	b08b      	sub	sp, #44	@ 0x2c
 800c794:	4601      	mov	r1, r0
 800c796:	2204      	movs	r2, #4
 800c798:	a802      	add	r0, sp, #8
 800c79a:	f7fc fdf9 	bl	8009390 <ucdr_init_buffer>
 800c79e:	f10d 0305 	add.w	r3, sp, #5
 800c7a2:	f10d 0206 	add.w	r2, sp, #6
 800c7a6:	a901      	add	r1, sp, #4
 800c7a8:	a802      	add	r0, sp, #8
 800c7aa:	f001 f9d1 	bl	800db50 <uxr_read_submessage_header>
 800c7ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c7b2:	2b0d      	cmp	r3, #13
 800c7b4:	d003      	beq.n	800c7be <on_get_fragmentation_info+0x2e>
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	b00b      	add	sp, #44	@ 0x2c
 800c7ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800c7be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c7c2:	f013 0f02 	tst.w	r3, #2
 800c7c6:	bf0c      	ite	eq
 800c7c8:	2001      	moveq	r0, #1
 800c7ca:	2002      	movne	r0, #2
 800c7cc:	b00b      	add	sp, #44	@ 0x2c
 800c7ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800c7d2:	bf00      	nop

0800c7d4 <read_submessage_get_info>:
 800c7d4:	b570      	push	{r4, r5, r6, lr}
 800c7d6:	2500      	movs	r5, #0
 800c7d8:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800c7dc:	4604      	mov	r4, r0
 800c7de:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800c7e2:	460e      	mov	r6, r1
 800c7e4:	a810      	add	r0, sp, #64	@ 0x40
 800c7e6:	4629      	mov	r1, r5
 800c7e8:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800c7ec:	f00b fb1c 	bl	8017e28 <memset>
 800c7f0:	a903      	add	r1, sp, #12
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	f002 fa46 	bl	800ec84 <uxr_deserialize_GET_INFO_Payload>
 800c7f8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c7fc:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c800:	4620      	mov	r0, r4
 800c802:	f001 f839 	bl	800d878 <uxr_session_header_offset>
 800c806:	462b      	mov	r3, r5
 800c808:	9000      	str	r0, [sp, #0]
 800c80a:	220c      	movs	r2, #12
 800c80c:	a905      	add	r1, sp, #20
 800c80e:	a808      	add	r0, sp, #32
 800c810:	f7fc fdac 	bl	800936c <ucdr_init_buffer_origin_offset>
 800c814:	a910      	add	r1, sp, #64	@ 0x40
 800c816:	a808      	add	r0, sp, #32
 800c818:	f002 faa6 	bl	800ed68 <uxr_serialize_INFO_Payload>
 800c81c:	9b08      	ldr	r3, [sp, #32]
 800c81e:	462a      	mov	r2, r5
 800c820:	4629      	mov	r1, r5
 800c822:	4620      	mov	r0, r4
 800c824:	f000 ffd4 	bl	800d7d0 <uxr_stamp_session_header>
 800c828:	a808      	add	r0, sp, #32
 800c82a:	f7fc fddd 	bl	80093e8 <ucdr_buffer_length>
 800c82e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c830:	4602      	mov	r2, r0
 800c832:	a905      	add	r1, sp, #20
 800c834:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c838:	47a0      	blx	r4
 800c83a:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800c83e:	bd70      	pop	{r4, r5, r6, pc}

0800c840 <write_submessage_acknack.isra.0>:
 800c840:	b570      	push	{r4, r5, r6, lr}
 800c842:	b092      	sub	sp, #72	@ 0x48
 800c844:	4605      	mov	r5, r0
 800c846:	460e      	mov	r6, r1
 800c848:	4614      	mov	r4, r2
 800c84a:	f001 f815 	bl	800d878 <uxr_session_header_offset>
 800c84e:	a905      	add	r1, sp, #20
 800c850:	9000      	str	r0, [sp, #0]
 800c852:	2300      	movs	r3, #0
 800c854:	a80a      	add	r0, sp, #40	@ 0x28
 800c856:	2211      	movs	r2, #17
 800c858:	f7fc fd88 	bl	800936c <ucdr_init_buffer_origin_offset>
 800c85c:	2318      	movs	r3, #24
 800c85e:	fb03 5404 	mla	r4, r3, r4, r5
 800c862:	2205      	movs	r2, #5
 800c864:	2300      	movs	r3, #0
 800c866:	3450      	adds	r4, #80	@ 0x50
 800c868:	210a      	movs	r1, #10
 800c86a:	a80a      	add	r0, sp, #40	@ 0x28
 800c86c:	f001 f956 	bl	800db1c <uxr_buffer_submessage_header>
 800c870:	a903      	add	r1, sp, #12
 800c872:	4620      	mov	r0, r4
 800c874:	f008 fc8c 	bl	8015190 <uxr_compute_acknack>
 800c878:	ba40      	rev16	r0, r0
 800c87a:	f8ad 000e 	strh.w	r0, [sp, #14]
 800c87e:	a903      	add	r1, sp, #12
 800c880:	a80a      	add	r0, sp, #40	@ 0x28
 800c882:	f88d 6010 	strb.w	r6, [sp, #16]
 800c886:	f002 fadf 	bl	800ee48 <uxr_serialize_ACKNACK_Payload>
 800c88a:	2200      	movs	r2, #0
 800c88c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c88e:	4611      	mov	r1, r2
 800c890:	4628      	mov	r0, r5
 800c892:	f000 ff9d 	bl	800d7d0 <uxr_stamp_session_header>
 800c896:	a80a      	add	r0, sp, #40	@ 0x28
 800c898:	f7fc fda6 	bl	80093e8 <ucdr_buffer_length>
 800c89c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800c89e:	4602      	mov	r2, r0
 800c8a0:	a905      	add	r1, sp, #20
 800c8a2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c8a6:	47a0      	blx	r4
 800c8a8:	b012      	add	sp, #72	@ 0x48
 800c8aa:	bd70      	pop	{r4, r5, r6, pc}
 800c8ac:	0000      	movs	r0, r0
	...

0800c8b0 <uxr_init_session>:
 800c8b0:	b510      	push	{r4, lr}
 800c8b2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800c8e8 <uxr_init_session+0x38>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800c8bc:	4604      	mov	r4, r0
 800c8be:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800c8c2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800c8c6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800c8ca:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800c8ce:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800c8d2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800c8d6:	2181      	movs	r1, #129	@ 0x81
 800c8d8:	f000 fede 	bl	800d698 <uxr_init_session_info>
 800c8dc:	f104 0008 	add.w	r0, r4, #8
 800c8e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8e4:	f001 b836 	b.w	800d954 <uxr_init_stream_storage>
	...

0800c8f0 <uxr_set_status_callback>:
 800c8f0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800c8f4:	4770      	bx	lr
 800c8f6:	bf00      	nop

0800c8f8 <uxr_set_topic_callback>:
 800c8f8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop

0800c900 <uxr_set_request_callback>:
 800c900:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop

0800c908 <uxr_set_reply_callback>:
 800c908:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800c90c:	4770      	bx	lr
 800c90e:	bf00      	nop

0800c910 <uxr_create_output_best_effort_stream>:
 800c910:	b570      	push	{r4, r5, r6, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	4604      	mov	r4, r0
 800c916:	460d      	mov	r5, r1
 800c918:	4616      	mov	r6, r2
 800c91a:	f000 ffad 	bl	800d878 <uxr_session_header_offset>
 800c91e:	4632      	mov	r2, r6
 800c920:	4603      	mov	r3, r0
 800c922:	4629      	mov	r1, r5
 800c924:	f104 0008 	add.w	r0, r4, #8
 800c928:	b002      	add	sp, #8
 800c92a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c92e:	f001 b85b 	b.w	800d9e8 <uxr_add_output_best_effort_buffer>
 800c932:	bf00      	nop

0800c934 <uxr_create_output_reliable_stream>:
 800c934:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c936:	b085      	sub	sp, #20
 800c938:	4604      	mov	r4, r0
 800c93a:	460d      	mov	r5, r1
 800c93c:	4616      	mov	r6, r2
 800c93e:	461f      	mov	r7, r3
 800c940:	f000 ff9a 	bl	800d878 <uxr_session_header_offset>
 800c944:	463b      	mov	r3, r7
 800c946:	9000      	str	r0, [sp, #0]
 800c948:	4632      	mov	r2, r6
 800c94a:	4629      	mov	r1, r5
 800c94c:	f104 0008 	add.w	r0, r4, #8
 800c950:	f001 f85e 	bl	800da10 <uxr_add_output_reliable_buffer>
 800c954:	b005      	add	sp, #20
 800c956:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c958 <uxr_create_input_best_effort_stream>:
 800c958:	b082      	sub	sp, #8
 800c95a:	3008      	adds	r0, #8
 800c95c:	b002      	add	sp, #8
 800c95e:	f001 b871 	b.w	800da44 <uxr_add_input_best_effort_buffer>
 800c962:	bf00      	nop

0800c964 <uxr_create_input_reliable_stream>:
 800c964:	b510      	push	{r4, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	4c03      	ldr	r4, [pc, #12]	@ (800c978 <uxr_create_input_reliable_stream+0x14>)
 800c96a:	9400      	str	r4, [sp, #0]
 800c96c:	3008      	adds	r0, #8
 800c96e:	f001 f87f 	bl	800da70 <uxr_add_input_reliable_buffer>
 800c972:	b004      	add	sp, #16
 800c974:	bd10      	pop	{r4, pc}
 800c976:	bf00      	nop
 800c978:	0800c791 	.word	0x0800c791

0800c97c <uxr_epoch_nanos>:
 800c97c:	b510      	push	{r4, lr}
 800c97e:	4604      	mov	r4, r0
 800c980:	f001 f92c 	bl	800dbdc <uxr_nanos>
 800c984:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800c988:	1ac0      	subs	r0, r0, r3
 800c98a:	eb61 0102 	sbc.w	r1, r1, r2
 800c98e:	bd10      	pop	{r4, pc}

0800c990 <uxr_flash_output_streams>:
 800c990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c994:	7e03      	ldrb	r3, [r0, #24]
 800c996:	b084      	sub	sp, #16
 800c998:	4604      	mov	r4, r0
 800c99a:	b373      	cbz	r3, 800c9fa <uxr_flash_output_streams+0x6a>
 800c99c:	2500      	movs	r5, #0
 800c99e:	f100 0908 	add.w	r9, r0, #8
 800c9a2:	f10d 0802 	add.w	r8, sp, #2
 800c9a6:	4628      	mov	r0, r5
 800c9a8:	af03      	add	r7, sp, #12
 800c9aa:	ae02      	add	r6, sp, #8
 800c9ac:	e006      	b.n	800c9bc <uxr_flash_output_streams+0x2c>
 800c9ae:	7e23      	ldrb	r3, [r4, #24]
 800c9b0:	3501      	adds	r5, #1
 800c9b2:	b2e8      	uxtb	r0, r5
 800c9b4:	4283      	cmp	r3, r0
 800c9b6:	f109 0910 	add.w	r9, r9, #16
 800c9ba:	d91e      	bls.n	800c9fa <uxr_flash_output_streams+0x6a>
 800c9bc:	2201      	movs	r2, #1
 800c9be:	4611      	mov	r1, r2
 800c9c0:	f000 ff90 	bl	800d8e4 <uxr_stream_id>
 800c9c4:	4643      	mov	r3, r8
 800c9c6:	4684      	mov	ip, r0
 800c9c8:	463a      	mov	r2, r7
 800c9ca:	4631      	mov	r1, r6
 800c9cc:	4648      	mov	r0, r9
 800c9ce:	f8cd c004 	str.w	ip, [sp, #4]
 800c9d2:	f008 fc61 	bl	8015298 <uxr_prepare_best_effort_buffer_to_send>
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	d0e9      	beq.n	800c9ae <uxr_flash_output_streams+0x1e>
 800c9da:	9b02      	ldr	r3, [sp, #8]
 800c9dc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c9e0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	f000 fef3 	bl	800d7d0 <uxr_stamp_session_header>
 800c9ea:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c9ec:	9a03      	ldr	r2, [sp, #12]
 800c9ee:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800c9f2:	9902      	ldr	r1, [sp, #8]
 800c9f4:	6818      	ldr	r0, [r3, #0]
 800c9f6:	47d0      	blx	sl
 800c9f8:	e7d9      	b.n	800c9ae <uxr_flash_output_streams+0x1e>
 800c9fa:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800c9fe:	b37b      	cbz	r3, 800ca60 <uxr_flash_output_streams+0xd0>
 800ca00:	f04f 0900 	mov.w	r9, #0
 800ca04:	f104 0520 	add.w	r5, r4, #32
 800ca08:	f10d 0802 	add.w	r8, sp, #2
 800ca0c:	af03      	add	r7, sp, #12
 800ca0e:	ae02      	add	r6, sp, #8
 800ca10:	4648      	mov	r0, r9
 800ca12:	2201      	movs	r2, #1
 800ca14:	2102      	movs	r1, #2
 800ca16:	f000 ff65 	bl	800d8e4 <uxr_stream_id>
 800ca1a:	9001      	str	r0, [sp, #4]
 800ca1c:	e00e      	b.n	800ca3c <uxr_flash_output_streams+0xac>
 800ca1e:	9b02      	ldr	r3, [sp, #8]
 800ca20:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ca24:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ca28:	4620      	mov	r0, r4
 800ca2a:	f000 fed1 	bl	800d7d0 <uxr_stamp_session_header>
 800ca2e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ca30:	9a03      	ldr	r2, [sp, #12]
 800ca32:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ca36:	9902      	ldr	r1, [sp, #8]
 800ca38:	6818      	ldr	r0, [r3, #0]
 800ca3a:	47d0      	blx	sl
 800ca3c:	4643      	mov	r3, r8
 800ca3e:	463a      	mov	r2, r7
 800ca40:	4631      	mov	r1, r6
 800ca42:	4628      	mov	r0, r5
 800ca44:	f008 fe3c 	bl	80156c0 <uxr_prepare_next_reliable_buffer_to_send>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d1e8      	bne.n	800ca1e <uxr_flash_output_streams+0x8e>
 800ca4c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ca50:	f109 0901 	add.w	r9, r9, #1
 800ca54:	fa5f f089 	uxtb.w	r0, r9
 800ca58:	4283      	cmp	r3, r0
 800ca5a:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 800ca5e:	d8d8      	bhi.n	800ca12 <uxr_flash_output_streams+0x82>
 800ca60:	b004      	add	sp, #16
 800ca62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca66:	bf00      	nop

0800ca68 <read_submessage_info>:
 800ca68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca6c:	460d      	mov	r5, r1
 800ca6e:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ca72:	4669      	mov	r1, sp
 800ca74:	4607      	mov	r7, r0
 800ca76:	4628      	mov	r0, r5
 800ca78:	f002 f814 	bl	800eaa4 <uxr_deserialize_BaseObjectReply>
 800ca7c:	a902      	add	r1, sp, #8
 800ca7e:	4604      	mov	r4, r0
 800ca80:	4628      	mov	r0, r5
 800ca82:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800ca86:	f7fb f9ab 	bl	8007de0 <ucdr_deserialize_bool>
 800ca8a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ca8e:	4004      	ands	r4, r0
 800ca90:	b2e4      	uxtb	r4, r4
 800ca92:	b95b      	cbnz	r3, 800caac <read_submessage_info+0x44>
 800ca94:	a987      	add	r1, sp, #540	@ 0x21c
 800ca96:	4628      	mov	r0, r5
 800ca98:	f7fb f9a2 	bl	8007de0 <ucdr_deserialize_bool>
 800ca9c:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800caa0:	4606      	mov	r6, r0
 800caa2:	b94b      	cbnz	r3, 800cab8 <read_submessage_info+0x50>
 800caa4:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800caa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caac:	a903      	add	r1, sp, #12
 800caae:	4628      	mov	r0, r5
 800cab0:	f001 feba 	bl	800e828 <uxr_deserialize_ObjectVariant>
 800cab4:	4004      	ands	r4, r0
 800cab6:	e7ed      	b.n	800ca94 <read_submessage_info+0x2c>
 800cab8:	a988      	add	r1, sp, #544	@ 0x220
 800caba:	4628      	mov	r0, r5
 800cabc:	f7fb f9be 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800cac0:	4234      	tst	r4, r6
 800cac2:	d0ef      	beq.n	800caa4 <read_submessage_info+0x3c>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	d0ed      	beq.n	800caa4 <read_submessage_info+0x3c>
 800cac8:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800cacc:	2b0d      	cmp	r3, #13
 800cace:	d1e9      	bne.n	800caa4 <read_submessage_info+0x3c>
 800cad0:	a98a      	add	r1, sp, #552	@ 0x228
 800cad2:	4628      	mov	r0, r5
 800cad4:	f7fb ff4e 	bl	8008974 <ucdr_deserialize_int16_t>
 800cad8:	b140      	cbz	r0, 800caec <read_submessage_info+0x84>
 800cada:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800cade:	2b00      	cmp	r3, #0
 800cae0:	dd07      	ble.n	800caf2 <read_submessage_info+0x8a>
 800cae2:	f1b8 0f00 	cmp.w	r8, #0
 800cae6:	bf0c      	ite	eq
 800cae8:	2002      	moveq	r0, #2
 800caea:	2001      	movne	r0, #1
 800caec:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800caf0:	e7d8      	b.n	800caa4 <read_submessage_info+0x3c>
 800caf2:	2000      	movs	r0, #0
 800caf4:	e7fa      	b.n	800caec <read_submessage_info+0x84>
 800caf6:	bf00      	nop

0800caf8 <read_submessage_list>:
 800caf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cafc:	b097      	sub	sp, #92	@ 0x5c
 800cafe:	4604      	mov	r4, r0
 800cb00:	460d      	mov	r5, r1
 800cb02:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb04:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800cb08:	aa0c      	add	r2, sp, #48	@ 0x30
 800cb0a:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800cb0e:	4628      	mov	r0, r5
 800cb10:	f001 f81e 	bl	800db50 <uxr_read_submessage_header>
 800cb14:	2800      	cmp	r0, #0
 800cb16:	f000 812c 	beq.w	800cd72 <read_submessage_list+0x27a>
 800cb1a:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 800cb1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb20:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 800cb24:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 800cb28:	3902      	subs	r1, #2
 800cb2a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cb2e:	290d      	cmp	r1, #13
 800cb30:	d8e8      	bhi.n	800cb04 <read_submessage_list+0xc>
 800cb32:	a201      	add	r2, pc, #4	@ (adr r2, 800cb38 <read_submessage_list+0x40>)
 800cb34:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800cb38:	0800cd69 	.word	0x0800cd69
 800cb3c:	0800cb05 	.word	0x0800cb05
 800cb40:	0800cd59 	.word	0x0800cd59
 800cb44:	0800ccfb 	.word	0x0800ccfb
 800cb48:	0800ccf1 	.word	0x0800ccf1
 800cb4c:	0800cb05 	.word	0x0800cb05
 800cb50:	0800cb05 	.word	0x0800cb05
 800cb54:	0800cc75 	.word	0x0800cc75
 800cb58:	0800cc0d 	.word	0x0800cc0d
 800cb5c:	0800cbcd 	.word	0x0800cbcd
 800cb60:	0800cb05 	.word	0x0800cb05
 800cb64:	0800cb05 	.word	0x0800cb05
 800cb68:	0800cb05 	.word	0x0800cb05
 800cb6c:	0800cb71 	.word	0x0800cb71
 800cb70:	a910      	add	r1, sp, #64	@ 0x40
 800cb72:	4628      	mov	r0, r5
 800cb74:	f002 f9c6 	bl	800ef04 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800cb78:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 800cb7c:	2e00      	cmp	r6, #0
 800cb7e:	f000 8100 	beq.w	800cd82 <read_submessage_list+0x28a>
 800cb82:	f001 f82b 	bl	800dbdc <uxr_nanos>
 800cb86:	f04f 0800 	mov.w	r8, #0
 800cb8a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	460b      	mov	r3, r1
 800cb90:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800cb92:	4990      	ldr	r1, [pc, #576]	@ (800cdd4 <read_submessage_list+0x2dc>)
 800cb94:	46c4      	mov	ip, r8
 800cb96:	fbc0 7c01 	smlal	r7, ip, r0, r1
 800cb9a:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800cb9e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800cba0:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800cba2:	46c6      	mov	lr, r8
 800cba4:	fbc0 7e01 	smlal	r7, lr, r0, r1
 800cba8:	46bc      	mov	ip, r7
 800cbaa:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800cbae:	fbc0 7801 	smlal	r7, r8, r0, r1
 800cbb2:	e9cd ce02 	strd	ip, lr, [sp, #8]
 800cbb6:	e9cd 7800 	strd	r7, r8, [sp]
 800cbba:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800cbbe:	9106      	str	r1, [sp, #24]
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	47b0      	blx	r6
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800cbca:	e79b      	b.n	800cb04 <read_submessage_list+0xc>
 800cbcc:	a910      	add	r1, sp, #64	@ 0x40
 800cbce:	4628      	mov	r0, r5
 800cbd0:	f002 f978 	bl	800eec4 <uxr_deserialize_HEARTBEAT_Payload>
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800cbda:	f000 fe9f 	bl	800d91c <uxr_stream_id_from_raw>
 800cbde:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800cbe2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800cbe4:	4631      	mov	r1, r6
 800cbe6:	f104 0008 	add.w	r0, r4, #8
 800cbea:	f000 ff77 	bl	800dadc <uxr_get_input_reliable_stream>
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	d088      	beq.n	800cb04 <read_submessage_list+0xc>
 800cbf2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800cbf6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800cbfa:	f008 fabd 	bl	8015178 <uxr_process_heartbeat>
 800cbfe:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800cc02:	4632      	mov	r2, r6
 800cc04:	4620      	mov	r0, r4
 800cc06:	f7ff fe1b 	bl	800c840 <write_submessage_acknack.isra.0>
 800cc0a:	e77b      	b.n	800cb04 <read_submessage_list+0xc>
 800cc0c:	a910      	add	r1, sp, #64	@ 0x40
 800cc0e:	4628      	mov	r0, r5
 800cc10:	f002 f930 	bl	800ee74 <uxr_deserialize_ACKNACK_Payload>
 800cc14:	2100      	movs	r1, #0
 800cc16:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800cc1a:	f000 fe7f 	bl	800d91c <uxr_stream_id_from_raw>
 800cc1e:	900d      	str	r0, [sp, #52]	@ 0x34
 800cc20:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800cc24:	f104 0008 	add.w	r0, r4, #8
 800cc28:	f000 ff44 	bl	800dab4 <uxr_get_output_reliable_stream>
 800cc2c:	4606      	mov	r6, r0
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	f43f af68 	beq.w	800cb04 <read_submessage_list+0xc>
 800cc34:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 800cc38:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800cc3c:	ba49      	rev16	r1, r1
 800cc3e:	b289      	uxth	r1, r1
 800cc40:	f008 fde8 	bl	8015814 <uxr_process_acknack>
 800cc44:	4630      	mov	r0, r6
 800cc46:	f008 fda9 	bl	801579c <uxr_begin_output_nack_buffer_it>
 800cc4a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800cc4e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800cc52:	e005      	b.n	800cc60 <read_submessage_list+0x168>
 800cc54:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cc56:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cc58:	685f      	ldr	r7, [r3, #4]
 800cc5a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cc5c:	6818      	ldr	r0, [r3, #0]
 800cc5e:	47b8      	blx	r7
 800cc60:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800cc64:	aa0f      	add	r2, sp, #60	@ 0x3c
 800cc66:	4641      	mov	r1, r8
 800cc68:	4630      	mov	r0, r6
 800cc6a:	f008 fd99 	bl	80157a0 <uxr_next_reliable_nack_buffer_to_send>
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	d1f0      	bne.n	800cc54 <read_submessage_list+0x15c>
 800cc72:	e747      	b.n	800cb04 <read_submessage_list+0xc>
 800cc74:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800cc78:	4641      	mov	r1, r8
 800cc7a:	900d      	str	r0, [sp, #52]	@ 0x34
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	f001 fe73 	bl	800e968 <uxr_deserialize_BaseObjectRequest>
 800cc82:	3e04      	subs	r6, #4
 800cc84:	4640      	mov	r0, r8
 800cc86:	a90f      	add	r1, sp, #60	@ 0x3c
 800cc88:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800cc8c:	f000 fe1a 	bl	800d8c4 <uxr_parse_base_object_request>
 800cc90:	fa1f f886 	uxth.w	r8, r6
 800cc94:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800cc98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cc9a:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 800cc9e:	9110      	str	r1, [sp, #64]	@ 0x40
 800cca0:	f007 070e 	and.w	r7, r7, #14
 800cca4:	b136      	cbz	r6, 800ccb4 <read_submessage_list+0x1bc>
 800cca6:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ccaa:	9300      	str	r3, [sp, #0]
 800ccac:	464a      	mov	r2, r9
 800ccae:	2300      	movs	r3, #0
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	47b0      	blx	r6
 800ccb4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800ccb6:	b16b      	cbz	r3, 800ccd4 <read_submessage_list+0x1dc>
 800ccb8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800ccba:	2100      	movs	r1, #0
 800ccbc:	3802      	subs	r0, #2
 800ccbe:	e002      	b.n	800ccc6 <read_submessage_list+0x1ce>
 800ccc0:	3101      	adds	r1, #1
 800ccc2:	428b      	cmp	r3, r1
 800ccc4:	d006      	beq.n	800ccd4 <read_submessage_list+0x1dc>
 800ccc6:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800ccca:	454e      	cmp	r6, r9
 800cccc:	d1f8      	bne.n	800ccc0 <read_submessage_list+0x1c8>
 800ccce:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	545a      	strb	r2, [r3, r1]
 800ccd4:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800ccd8:	9102      	str	r1, [sp, #8]
 800ccda:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ccdc:	9101      	str	r1, [sp, #4]
 800ccde:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800cce0:	9100      	str	r1, [sp, #0]
 800cce2:	463b      	mov	r3, r7
 800cce4:	4642      	mov	r2, r8
 800cce6:	4629      	mov	r1, r5
 800cce8:	4620      	mov	r0, r4
 800ccea:	f008 fe4b 	bl	8015984 <read_submessage_format>
 800ccee:	e709      	b.n	800cb04 <read_submessage_list+0xc>
 800ccf0:	4629      	mov	r1, r5
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	f7ff feb8 	bl	800ca68 <read_submessage_info>
 800ccf8:	e704      	b.n	800cb04 <read_submessage_list+0xc>
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d03c      	beq.n	800cd78 <read_submessage_list+0x280>
 800ccfe:	a910      	add	r1, sp, #64	@ 0x40
 800cd00:	4628      	mov	r0, r5
 800cd02:	f002 f813 	bl	800ed2c <uxr_deserialize_STATUS_Payload>
 800cd06:	a90e      	add	r1, sp, #56	@ 0x38
 800cd08:	a810      	add	r0, sp, #64	@ 0x40
 800cd0a:	aa0d      	add	r2, sp, #52	@ 0x34
 800cd0c:	f000 fdda 	bl	800d8c4 <uxr_parse_base_object_request>
 800cd10:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800cd14:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cd16:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 800cd1a:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800cd1e:	910f      	str	r1, [sp, #60]	@ 0x3c
 800cd20:	b136      	cbz	r6, 800cd30 <read_submessage_list+0x238>
 800cd22:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800cd26:	9300      	str	r3, [sp, #0]
 800cd28:	463a      	mov	r2, r7
 800cd2a:	4643      	mov	r3, r8
 800cd2c:	4620      	mov	r0, r4
 800cd2e:	47b0      	blx	r6
 800cd30:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800cd32:	2a00      	cmp	r2, #0
 800cd34:	f43f aee6 	beq.w	800cb04 <read_submessage_list+0xc>
 800cd38:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	3802      	subs	r0, #2
 800cd3e:	e003      	b.n	800cd48 <read_submessage_list+0x250>
 800cd40:	3101      	adds	r1, #1
 800cd42:	4291      	cmp	r1, r2
 800cd44:	f43f aede 	beq.w	800cb04 <read_submessage_list+0xc>
 800cd48:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800cd4c:	42be      	cmp	r6, r7
 800cd4e:	d1f7      	bne.n	800cd40 <read_submessage_list+0x248>
 800cd50:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800cd52:	f803 8001 	strb.w	r8, [r3, r1]
 800cd56:	e6d5      	b.n	800cb04 <read_submessage_list+0xc>
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	f47f aed3 	bne.w	800cb04 <read_submessage_list+0xc>
 800cd5e:	4629      	mov	r1, r5
 800cd60:	4620      	mov	r0, r4
 800cd62:	f000 fcf7 	bl	800d754 <uxr_read_create_session_status>
 800cd66:	e6cd      	b.n	800cb04 <read_submessage_list+0xc>
 800cd68:	4629      	mov	r1, r5
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	f7ff fd32 	bl	800c7d4 <read_submessage_get_info>
 800cd70:	e6c8      	b.n	800cb04 <read_submessage_list+0xc>
 800cd72:	b017      	add	sp, #92	@ 0x5c
 800cd74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd78:	4629      	mov	r1, r5
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f000 fcf8 	bl	800d770 <uxr_read_delete_session_status>
 800cd80:	e6c0      	b.n	800cb04 <read_submessage_list+0xc>
 800cd82:	f000 ff2b 	bl	800dbdc <uxr_nanos>
 800cd86:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 800cd8a:	f8df c048 	ldr.w	ip, [pc, #72]	@ 800cdd4 <read_submessage_list+0x2dc>
 800cd8e:	4633      	mov	r3, r6
 800cd90:	fbc7 230c 	smlal	r2, r3, r7, ip
 800cd94:	1810      	adds	r0, r2, r0
 800cd96:	eb43 0301 	adc.w	r3, r3, r1
 800cd9a:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 800cd9e:	46b6      	mov	lr, r6
 800cda0:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 800cda4:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 800cda8:	fbc1 760c 	smlal	r7, r6, r1, ip
 800cdac:	19d2      	adds	r2, r2, r7
 800cdae:	eb4e 0106 	adc.w	r1, lr, r6
 800cdb2:	1a80      	subs	r0, r0, r2
 800cdb4:	eb63 0301 	sbc.w	r3, r3, r1
 800cdb8:	0fda      	lsrs	r2, r3, #31
 800cdba:	1812      	adds	r2, r2, r0
 800cdbc:	f143 0300 	adc.w	r3, r3, #0
 800cdc0:	0852      	lsrs	r2, r2, #1
 800cdc2:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800cdc6:	105b      	asrs	r3, r3, #1
 800cdc8:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800cdcc:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800cdd0:	e6f8      	b.n	800cbc4 <read_submessage_list+0xcc>
 800cdd2:	bf00      	nop
 800cdd4:	3b9aca00 	.word	0x3b9aca00

0800cdd8 <listen_message_reliably>:
 800cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cddc:	f1b1 0b00 	subs.w	fp, r1, #0
 800cde0:	b09f      	sub	sp, #124	@ 0x7c
 800cde2:	4606      	mov	r6, r0
 800cde4:	bfb8      	it	lt
 800cde6:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 800cdea:	f000 fedd 	bl	800dba8 <uxr_millis>
 800cdee:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800cdf2:	9003      	str	r0, [sp, #12]
 800cdf4:	9104      	str	r1, [sp, #16]
 800cdf6:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800cdfa:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	f000 80a4 	beq.w	800cf4c <listen_message_reliably+0x174>
 800ce04:	2500      	movs	r5, #0
 800ce06:	e9cd b806 	strd	fp, r8, [sp, #24]
 800ce0a:	f106 0420 	add.w	r4, r6, #32
 800ce0e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ce12:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 800ce16:	4628      	mov	r0, r5
 800ce18:	e011      	b.n	800ce3e <listen_message_reliably+0x66>
 800ce1a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800ce1e:	42ba      	cmp	r2, r7
 800ce20:	eb73 0109 	sbcs.w	r1, r3, r9
 800ce24:	bfb8      	it	lt
 800ce26:	4699      	movlt	r9, r3
 800ce28:	f105 0501 	add.w	r5, r5, #1
 800ce2c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800ce30:	b2e8      	uxtb	r0, r5
 800ce32:	bfb8      	it	lt
 800ce34:	4617      	movlt	r7, r2
 800ce36:	4283      	cmp	r3, r0
 800ce38:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 800ce3c:	d94a      	bls.n	800ced4 <listen_message_reliably+0xfc>
 800ce3e:	2201      	movs	r2, #1
 800ce40:	2102      	movs	r1, #2
 800ce42:	f000 fd4f 	bl	800d8e4 <uxr_stream_id>
 800ce46:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800ce4a:	4601      	mov	r1, r0
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ce50:	f008 fc74 	bl	801573c <uxr_update_output_stream_heartbeat_timestamp>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	d0e0      	beq.n	800ce1a <listen_message_reliably+0x42>
 800ce58:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800ce5c:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 800ce60:	9305      	str	r3, [sp, #20]
 800ce62:	4630      	mov	r0, r6
 800ce64:	f000 fd08 	bl	800d878 <uxr_session_header_offset>
 800ce68:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 800ce6c:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800ce70:	9000      	str	r0, [sp, #0]
 800ce72:	a90e      	add	r1, sp, #56	@ 0x38
 800ce74:	4640      	mov	r0, r8
 800ce76:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	2211      	movs	r2, #17
 800ce7e:	f7fc fa75 	bl	800936c <ucdr_init_buffer_origin_offset>
 800ce82:	2300      	movs	r3, #0
 800ce84:	2205      	movs	r2, #5
 800ce86:	210b      	movs	r1, #11
 800ce88:	4640      	mov	r0, r8
 800ce8a:	f000 fe47 	bl	800db1c <uxr_buffer_submessage_header>
 800ce8e:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 800ce92:	2101      	movs	r1, #1
 800ce94:	f008 fe4a 	bl	8015b2c <uxr_seq_num_add>
 800ce98:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 800ce9c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800cea0:	4602      	mov	r2, r0
 800cea2:	9b05      	ldr	r3, [sp, #20]
 800cea4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800cea8:	a90c      	add	r1, sp, #48	@ 0x30
 800ceaa:	4640      	mov	r0, r8
 800ceac:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800ceb0:	f001 fff4 	bl	800ee9c <uxr_serialize_HEARTBEAT_Payload>
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ceb8:	4611      	mov	r1, r2
 800ceba:	4630      	mov	r0, r6
 800cebc:	f000 fc88 	bl	800d7d0 <uxr_stamp_session_header>
 800cec0:	4640      	mov	r0, r8
 800cec2:	f7fc fa91 	bl	80093e8 <ucdr_buffer_length>
 800cec6:	4602      	mov	r2, r0
 800cec8:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 800ceca:	a90e      	add	r1, sp, #56	@ 0x38
 800cecc:	e9d0 0300 	ldrd	r0, r3, [r0]
 800ced0:	4798      	blx	r3
 800ced2:	e7a2      	b.n	800ce1a <listen_message_reliably+0x42>
 800ced4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ced8:	4599      	cmp	r9, r3
 800ceda:	bf08      	it	eq
 800cedc:	f1b7 3fff 	cmpeq.w	r7, #4294967295	@ 0xffffffff
 800cee0:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 800cee4:	d032      	beq.n	800cf4c <listen_message_reliably+0x174>
 800cee6:	9b03      	ldr	r3, [sp, #12]
 800cee8:	1aff      	subs	r7, r7, r3
 800ceea:	2f00      	cmp	r7, #0
 800ceec:	bf08      	it	eq
 800ceee:	2701      	moveq	r7, #1
 800cef0:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800cef2:	455f      	cmp	r7, fp
 800cef4:	bfa8      	it	ge
 800cef6:	465f      	movge	r7, fp
 800cef8:	689c      	ldr	r4, [r3, #8]
 800cefa:	6818      	ldr	r0, [r3, #0]
 800cefc:	4642      	mov	r2, r8
 800cefe:	463b      	mov	r3, r7
 800cf00:	4651      	mov	r1, sl
 800cf02:	47a0      	blx	r4
 800cf04:	ebab 0b07 	sub.w	fp, fp, r7
 800cf08:	b958      	cbnz	r0, 800cf22 <listen_message_reliably+0x14a>
 800cf0a:	f1bb 0f00 	cmp.w	fp, #0
 800cf0e:	dd44      	ble.n	800cf9a <listen_message_reliably+0x1c2>
 800cf10:	f000 fe4a 	bl	800dba8 <uxr_millis>
 800cf14:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d03c      	beq.n	800cf96 <listen_message_reliably+0x1be>
 800cf1c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800cf20:	e770      	b.n	800ce04 <listen_message_reliably+0x2c>
 800cf22:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800cf26:	4604      	mov	r4, r0
 800cf28:	a80e      	add	r0, sp, #56	@ 0x38
 800cf2a:	f7fc fa31 	bl	8009390 <ucdr_init_buffer>
 800cf2e:	2500      	movs	r5, #0
 800cf30:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 800cf34:	aa08      	add	r2, sp, #32
 800cf36:	a90e      	add	r1, sp, #56	@ 0x38
 800cf38:	4630      	mov	r0, r6
 800cf3a:	f88d 5020 	strb.w	r5, [sp, #32]
 800cf3e:	f000 fc5d 	bl	800d7fc <uxr_read_session_header>
 800cf42:	b928      	cbnz	r0, 800cf50 <listen_message_reliably+0x178>
 800cf44:	4620      	mov	r0, r4
 800cf46:	b01f      	add	sp, #124	@ 0x7c
 800cf48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf4c:	465f      	mov	r7, fp
 800cf4e:	e7cc      	b.n	800ceea <listen_message_reliably+0x112>
 800cf50:	4629      	mov	r1, r5
 800cf52:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800cf56:	f000 fce1 	bl	800d91c <uxr_stream_id_from_raw>
 800cf5a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800cf5e:	2f01      	cmp	r7, #1
 800cf60:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 800cf64:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 800cf68:	fa5f f880 	uxtb.w	r8, r0
 800cf6c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800cf70:	d050      	beq.n	800d014 <listen_message_reliably+0x23c>
 800cf72:	2f02      	cmp	r7, #2
 800cf74:	d016      	beq.n	800cfa4 <listen_message_reliably+0x1cc>
 800cf76:	2f00      	cmp	r7, #0
 800cf78:	d1e4      	bne.n	800cf44 <listen_message_reliably+0x16c>
 800cf7a:	4639      	mov	r1, r7
 800cf7c:	4638      	mov	r0, r7
 800cf7e:	f000 fccd 	bl	800d91c <uxr_stream_id_from_raw>
 800cf82:	a90e      	add	r1, sp, #56	@ 0x38
 800cf84:	4602      	mov	r2, r0
 800cf86:	4630      	mov	r0, r6
 800cf88:	920c      	str	r2, [sp, #48]	@ 0x30
 800cf8a:	f7ff fdb5 	bl	800caf8 <read_submessage_list>
 800cf8e:	4620      	mov	r0, r4
 800cf90:	b01f      	add	sp, #124	@ 0x7c
 800cf92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf96:	465f      	mov	r7, fp
 800cf98:	e7aa      	b.n	800cef0 <listen_message_reliably+0x118>
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	b01f      	add	sp, #124	@ 0x7c
 800cfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	f106 0008 	add.w	r0, r6, #8
 800cfaa:	f000 fd97 	bl	800dadc <uxr_get_input_reliable_stream>
 800cfae:	4681      	mov	r9, r0
 800cfb0:	b338      	cbz	r0, 800d002 <listen_message_reliably+0x22a>
 800cfb2:	a80e      	add	r0, sp, #56	@ 0x38
 800cfb4:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 800cfb8:	f7fc fa1a 	bl	80093f0 <ucdr_buffer_remaining>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 800cfc2:	9000      	str	r0, [sp, #0]
 800cfc4:	465a      	mov	r2, fp
 800cfc6:	4651      	mov	r1, sl
 800cfc8:	4648      	mov	r0, r9
 800cfca:	f007 ffe3 	bl	8014f94 <uxr_receive_reliable_message>
 800cfce:	b1c0      	cbz	r0, 800d002 <listen_message_reliably+0x22a>
 800cfd0:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800cfd4:	b393      	cbz	r3, 800d03c <listen_message_reliably+0x264>
 800cfd6:	af16      	add	r7, sp, #88	@ 0x58
 800cfd8:	f04f 0a02 	mov.w	sl, #2
 800cfdc:	e00a      	b.n	800cff4 <listen_message_reliably+0x21c>
 800cfde:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 800cfe2:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 800cfe6:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 800cfea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cfec:	4639      	mov	r1, r7
 800cfee:	4630      	mov	r0, r6
 800cff0:	f7ff fd82 	bl	800caf8 <read_submessage_list>
 800cff4:	2204      	movs	r2, #4
 800cff6:	4639      	mov	r1, r7
 800cff8:	4648      	mov	r0, r9
 800cffa:	f008 f845 	bl	8015088 <uxr_next_input_reliable_buffer_available>
 800cffe:	2800      	cmp	r0, #0
 800d000:	d1ed      	bne.n	800cfde <listen_message_reliably+0x206>
 800d002:	4630      	mov	r0, r6
 800d004:	462a      	mov	r2, r5
 800d006:	4641      	mov	r1, r8
 800d008:	f7ff fc1a 	bl	800c840 <write_submessage_acknack.isra.0>
 800d00c:	4620      	mov	r0, r4
 800d00e:	b01f      	add	sp, #124	@ 0x7c
 800d010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d014:	4629      	mov	r1, r5
 800d016:	f106 0008 	add.w	r0, r6, #8
 800d01a:	f000 fd55 	bl	800dac8 <uxr_get_input_best_effort_stream>
 800d01e:	2800      	cmp	r0, #0
 800d020:	d090      	beq.n	800cf44 <listen_message_reliably+0x16c>
 800d022:	4651      	mov	r1, sl
 800d024:	f007 ff26 	bl	8014e74 <uxr_receive_best_effort_message>
 800d028:	2800      	cmp	r0, #0
 800d02a:	d08b      	beq.n	800cf44 <listen_message_reliably+0x16c>
 800d02c:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800d030:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d032:	a90e      	add	r1, sp, #56	@ 0x38
 800d034:	4630      	mov	r0, r6
 800d036:	f7ff fd5f 	bl	800caf8 <read_submessage_list>
 800d03a:	e783      	b.n	800cf44 <listen_message_reliably+0x16c>
 800d03c:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800d040:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d042:	a90e      	add	r1, sp, #56	@ 0x38
 800d044:	4630      	mov	r0, r6
 800d046:	f7ff fd57 	bl	800caf8 <read_submessage_list>
 800d04a:	e7c4      	b.n	800cfd6 <listen_message_reliably+0x1fe>

0800d04c <uxr_run_session_timeout>:
 800d04c:	b570      	push	{r4, r5, r6, lr}
 800d04e:	4604      	mov	r4, r0
 800d050:	460d      	mov	r5, r1
 800d052:	f000 fda9 	bl	800dba8 <uxr_millis>
 800d056:	4606      	mov	r6, r0
 800d058:	4620      	mov	r0, r4
 800d05a:	f7ff fc99 	bl	800c990 <uxr_flash_output_streams>
 800d05e:	4629      	mov	r1, r5
 800d060:	4620      	mov	r0, r4
 800d062:	f7ff feb9 	bl	800cdd8 <listen_message_reliably>
 800d066:	f000 fd9f 	bl	800dba8 <uxr_millis>
 800d06a:	1b81      	subs	r1, r0, r6
 800d06c:	1a69      	subs	r1, r5, r1
 800d06e:	2900      	cmp	r1, #0
 800d070:	dcf6      	bgt.n	800d060 <uxr_run_session_timeout+0x14>
 800d072:	f104 0008 	add.w	r0, r4, #8
 800d076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d07a:	f000 bd39 	b.w	800daf0 <uxr_output_streams_confirmed>
 800d07e:	bf00      	nop

0800d080 <uxr_run_session_until_data>:
 800d080:	b570      	push	{r4, r5, r6, lr}
 800d082:	4604      	mov	r4, r0
 800d084:	460d      	mov	r5, r1
 800d086:	f000 fd8f 	bl	800dba8 <uxr_millis>
 800d08a:	4606      	mov	r6, r0
 800d08c:	4620      	mov	r0, r4
 800d08e:	f7ff fc7f 	bl	800c990 <uxr_flash_output_streams>
 800d092:	2300      	movs	r3, #0
 800d094:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800d098:	4629      	mov	r1, r5
 800d09a:	e005      	b.n	800d0a8 <uxr_run_session_until_data+0x28>
 800d09c:	f000 fd84 	bl	800dba8 <uxr_millis>
 800d0a0:	1b81      	subs	r1, r0, r6
 800d0a2:	1a69      	subs	r1, r5, r1
 800d0a4:	2900      	cmp	r1, #0
 800d0a6:	dd07      	ble.n	800d0b8 <uxr_run_session_until_data+0x38>
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f7ff fe95 	bl	800cdd8 <listen_message_reliably>
 800d0ae:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	d0f2      	beq.n	800d09c <uxr_run_session_until_data+0x1c>
 800d0b6:	bd70      	pop	{r4, r5, r6, pc}
 800d0b8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d0bc:	bd70      	pop	{r4, r5, r6, pc}
 800d0be:	bf00      	nop

0800d0c0 <uxr_run_session_until_confirm_delivery>:
 800d0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c4:	4606      	mov	r6, r0
 800d0c6:	460d      	mov	r5, r1
 800d0c8:	f000 fd6e 	bl	800dba8 <uxr_millis>
 800d0cc:	4607      	mov	r7, r0
 800d0ce:	4630      	mov	r0, r6
 800d0d0:	f7ff fc5e 	bl	800c990 <uxr_flash_output_streams>
 800d0d4:	2d00      	cmp	r5, #0
 800d0d6:	db16      	blt.n	800d106 <uxr_run_session_until_confirm_delivery+0x46>
 800d0d8:	462c      	mov	r4, r5
 800d0da:	f106 0808 	add.w	r8, r6, #8
 800d0de:	e008      	b.n	800d0f2 <uxr_run_session_until_confirm_delivery+0x32>
 800d0e0:	4621      	mov	r1, r4
 800d0e2:	4630      	mov	r0, r6
 800d0e4:	f7ff fe78 	bl	800cdd8 <listen_message_reliably>
 800d0e8:	f000 fd5e 	bl	800dba8 <uxr_millis>
 800d0ec:	1bc1      	subs	r1, r0, r7
 800d0ee:	1a6c      	subs	r4, r5, r1
 800d0f0:	d404      	bmi.n	800d0fc <uxr_run_session_until_confirm_delivery+0x3c>
 800d0f2:	4640      	mov	r0, r8
 800d0f4:	f000 fcfc 	bl	800daf0 <uxr_output_streams_confirmed>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	d0f1      	beq.n	800d0e0 <uxr_run_session_until_confirm_delivery+0x20>
 800d0fc:	4640      	mov	r0, r8
 800d0fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d102:	f000 bcf5 	b.w	800daf0 <uxr_output_streams_confirmed>
 800d106:	f106 0808 	add.w	r8, r6, #8
 800d10a:	e7f7      	b.n	800d0fc <uxr_run_session_until_confirm_delivery+0x3c>

0800d10c <uxr_run_session_until_all_status>:
 800d10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d110:	9c08      	ldr	r4, [sp, #32]
 800d112:	4605      	mov	r5, r0
 800d114:	460f      	mov	r7, r1
 800d116:	4690      	mov	r8, r2
 800d118:	461e      	mov	r6, r3
 800d11a:	f7ff fc39 	bl	800c990 <uxr_flash_output_streams>
 800d11e:	b124      	cbz	r4, 800d12a <uxr_run_session_until_all_status+0x1e>
 800d120:	4622      	mov	r2, r4
 800d122:	21ff      	movs	r1, #255	@ 0xff
 800d124:	4630      	mov	r0, r6
 800d126:	f00a fe7f 	bl	8017e28 <memset>
 800d12a:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 800d12e:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800d130:	f000 fd3a 	bl	800dba8 <uxr_millis>
 800d134:	4639      	mov	r1, r7
 800d136:	4681      	mov	r9, r0
 800d138:	4628      	mov	r0, r5
 800d13a:	f7ff fe4d 	bl	800cdd8 <listen_message_reliably>
 800d13e:	f000 fd33 	bl	800dba8 <uxr_millis>
 800d142:	eba0 0109 	sub.w	r1, r0, r9
 800d146:	1a79      	subs	r1, r7, r1
 800d148:	b36c      	cbz	r4, 800d1a6 <uxr_run_session_until_all_status+0x9a>
 800d14a:	1e70      	subs	r0, r6, #1
 800d14c:	46c6      	mov	lr, r8
 800d14e:	1902      	adds	r2, r0, r4
 800d150:	4684      	mov	ip, r0
 800d152:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800d156:	2bff      	cmp	r3, #255	@ 0xff
 800d158:	d007      	beq.n	800d16a <uxr_run_session_until_all_status+0x5e>
 800d15a:	4594      	cmp	ip, r2
 800d15c:	d00f      	beq.n	800d17e <uxr_run_session_until_all_status+0x72>
 800d15e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800d162:	2bff      	cmp	r3, #255	@ 0xff
 800d164:	f10e 0e02 	add.w	lr, lr, #2
 800d168:	d1f7      	bne.n	800d15a <uxr_run_session_until_all_status+0x4e>
 800d16a:	4594      	cmp	ip, r2
 800d16c:	f8be 3000 	ldrh.w	r3, [lr]
 800d170:	d014      	beq.n	800d19c <uxr_run_session_until_all_status+0x90>
 800d172:	f10e 0e02 	add.w	lr, lr, #2
 800d176:	2b00      	cmp	r3, #0
 800d178:	d0eb      	beq.n	800d152 <uxr_run_session_until_all_status+0x46>
 800d17a:	2900      	cmp	r1, #0
 800d17c:	dcdc      	bgt.n	800d138 <uxr_run_session_until_all_status+0x2c>
 800d17e:	2300      	movs	r3, #0
 800d180:	67eb      	str	r3, [r5, #124]	@ 0x7c
 800d182:	e001      	b.n	800d188 <uxr_run_session_until_all_status+0x7c>
 800d184:	2b01      	cmp	r3, #1
 800d186:	d812      	bhi.n	800d1ae <uxr_run_session_until_all_status+0xa2>
 800d188:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800d18c:	4290      	cmp	r0, r2
 800d18e:	d1f9      	bne.n	800d184 <uxr_run_session_until_all_status+0x78>
 800d190:	2b01      	cmp	r3, #1
 800d192:	bf8c      	ite	hi
 800d194:	2000      	movhi	r0, #0
 800d196:	2001      	movls	r0, #1
 800d198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d19c:	2900      	cmp	r1, #0
 800d19e:	ddee      	ble.n	800d17e <uxr_run_session_until_all_status+0x72>
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1c9      	bne.n	800d138 <uxr_run_session_until_all_status+0x2c>
 800d1a4:	e7eb      	b.n	800d17e <uxr_run_session_until_all_status+0x72>
 800d1a6:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800d1a8:	2001      	movs	r0, #1
 800d1aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1b4:	0000      	movs	r0, r0
	...

0800d1b8 <uxr_sync_session>:
 800d1b8:	b570      	push	{r4, r5, r6, lr}
 800d1ba:	b092      	sub	sp, #72	@ 0x48
 800d1bc:	4604      	mov	r4, r0
 800d1be:	460d      	mov	r5, r1
 800d1c0:	f000 fb5a 	bl	800d878 <uxr_session_header_offset>
 800d1c4:	2214      	movs	r2, #20
 800d1c6:	eb0d 0102 	add.w	r1, sp, r2
 800d1ca:	9000      	str	r0, [sp, #0]
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	a80a      	add	r0, sp, #40	@ 0x28
 800d1d0:	f7fc f8cc 	bl	800936c <ucdr_init_buffer_origin_offset>
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	2208      	movs	r2, #8
 800d1d8:	210e      	movs	r1, #14
 800d1da:	a80a      	add	r0, sp, #40	@ 0x28
 800d1dc:	f000 fc9e 	bl	800db1c <uxr_buffer_submessage_header>
 800d1e0:	f000 fcfc 	bl	800dbdc <uxr_nanos>
 800d1e4:	a318      	add	r3, pc, #96	@ (adr r3, 800d248 <uxr_sync_session+0x90>)
 800d1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ea:	f7f3 fc2f 	bl	8000a4c <__aeabi_ldivmod>
 800d1ee:	a903      	add	r1, sp, #12
 800d1f0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 800d1f4:	a80a      	add	r0, sp, #40	@ 0x28
 800d1f6:	f001 fe77 	bl	800eee8 <uxr_serialize_TIMESTAMP_Payload>
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	4611      	mov	r1, r2
 800d1fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d200:	4620      	mov	r0, r4
 800d202:	f000 fae5 	bl	800d7d0 <uxr_stamp_session_header>
 800d206:	a80a      	add	r0, sp, #40	@ 0x28
 800d208:	f7fc f8ee 	bl	80093e8 <ucdr_buffer_length>
 800d20c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d20e:	4602      	mov	r2, r0
 800d210:	a905      	add	r1, sp, #20
 800d212:	e9d3 0600 	ldrd	r0, r6, [r3]
 800d216:	47b0      	blx	r6
 800d218:	f000 fcc6 	bl	800dba8 <uxr_millis>
 800d21c:	2300      	movs	r3, #0
 800d21e:	4606      	mov	r6, r0
 800d220:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800d224:	4629      	mov	r1, r5
 800d226:	e000      	b.n	800d22a <uxr_sync_session+0x72>
 800d228:	b950      	cbnz	r0, 800d240 <uxr_sync_session+0x88>
 800d22a:	4620      	mov	r0, r4
 800d22c:	f7ff fdd4 	bl	800cdd8 <listen_message_reliably>
 800d230:	f000 fcba 	bl	800dba8 <uxr_millis>
 800d234:	1b81      	subs	r1, r0, r6
 800d236:	1a69      	subs	r1, r5, r1
 800d238:	2900      	cmp	r1, #0
 800d23a:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 800d23e:	dcf3      	bgt.n	800d228 <uxr_sync_session+0x70>
 800d240:	b012      	add	sp, #72	@ 0x48
 800d242:	bd70      	pop	{r4, r5, r6, pc}
 800d244:	f3af 8000 	nop.w
 800d248:	3b9aca00 	.word	0x3b9aca00
 800d24c:	00000000 	.word	0x00000000

0800d250 <wait_session_status>:
 800d250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d254:	4604      	mov	r4, r0
 800d256:	20ff      	movs	r0, #255	@ 0xff
 800d258:	b09f      	sub	sp, #124	@ 0x7c
 800d25a:	7160      	strb	r0, [r4, #5]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f000 80bb 	beq.w	800d3d8 <wait_session_status+0x188>
 800d262:	4692      	mov	sl, r2
 800d264:	469b      	mov	fp, r3
 800d266:	f04f 0800 	mov.w	r8, #0
 800d26a:	9105      	str	r1, [sp, #20]
 800d26c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d26e:	9905      	ldr	r1, [sp, #20]
 800d270:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d274:	4652      	mov	r2, sl
 800d276:	47a8      	blx	r5
 800d278:	f000 fc96 	bl	800dba8 <uxr_millis>
 800d27c:	2700      	movs	r7, #0
 800d27e:	4605      	mov	r5, r0
 800d280:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d284:	e009      	b.n	800d29a <wait_session_status+0x4a>
 800d286:	f000 fc8f 	bl	800dba8 <uxr_millis>
 800d28a:	1b43      	subs	r3, r0, r5
 800d28c:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800d290:	2b00      	cmp	r3, #0
 800d292:	7962      	ldrb	r2, [r4, #5]
 800d294:	dd3d      	ble.n	800d312 <wait_session_status+0xc2>
 800d296:	2aff      	cmp	r2, #255	@ 0xff
 800d298:	d13b      	bne.n	800d312 <wait_session_status+0xc2>
 800d29a:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d29c:	a90a      	add	r1, sp, #40	@ 0x28
 800d29e:	6896      	ldr	r6, [r2, #8]
 800d2a0:	6810      	ldr	r0, [r2, #0]
 800d2a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d2a4:	47b0      	blx	r6
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	d0ed      	beq.n	800d286 <wait_session_status+0x36>
 800d2aa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 800d2ae:	a80e      	add	r0, sp, #56	@ 0x38
 800d2b0:	f7fc f86e 	bl	8009390 <ucdr_init_buffer>
 800d2b4:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 800d2b8:	aa09      	add	r2, sp, #36	@ 0x24
 800d2ba:	a90e      	add	r1, sp, #56	@ 0x38
 800d2bc:	4620      	mov	r0, r4
 800d2be:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 800d2c2:	f000 fa9b 	bl	800d7fc <uxr_read_session_header>
 800d2c6:	2800      	cmp	r0, #0
 800d2c8:	d0dd      	beq.n	800d286 <wait_session_status+0x36>
 800d2ca:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	f000 fb24 	bl	800d91c <uxr_stream_id_from_raw>
 800d2d4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800d2d8:	9304      	str	r3, [sp, #16]
 800d2da:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800d2de:	b2c3      	uxtb	r3, r0
 800d2e0:	f1b9 0f01 	cmp.w	r9, #1
 800d2e4:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 800d2e8:	9303      	str	r3, [sp, #12]
 800d2ea:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d2ee:	d05d      	beq.n	800d3ac <wait_session_status+0x15c>
 800d2f0:	f1b9 0f02 	cmp.w	r9, #2
 800d2f4:	d01a      	beq.n	800d32c <wait_session_status+0xdc>
 800d2f6:	f1b9 0f00 	cmp.w	r9, #0
 800d2fa:	d1c4      	bne.n	800d286 <wait_session_status+0x36>
 800d2fc:	4649      	mov	r1, r9
 800d2fe:	4648      	mov	r0, r9
 800d300:	f000 fb0c 	bl	800d91c <uxr_stream_id_from_raw>
 800d304:	a90e      	add	r1, sp, #56	@ 0x38
 800d306:	4602      	mov	r2, r0
 800d308:	900d      	str	r0, [sp, #52]	@ 0x34
 800d30a:	4620      	mov	r0, r4
 800d30c:	f7ff fbf4 	bl	800caf8 <read_submessage_list>
 800d310:	e7b9      	b.n	800d286 <wait_session_status+0x36>
 800d312:	f108 0801 	add.w	r8, r8, #1
 800d316:	45c3      	cmp	fp, r8
 800d318:	d001      	beq.n	800d31e <wait_session_status+0xce>
 800d31a:	2aff      	cmp	r2, #255	@ 0xff
 800d31c:	d0a6      	beq.n	800d26c <wait_session_status+0x1c>
 800d31e:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 800d322:	bf18      	it	ne
 800d324:	2001      	movne	r0, #1
 800d326:	b01f      	add	sp, #124	@ 0x7c
 800d328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d32c:	4631      	mov	r1, r6
 800d32e:	f104 0008 	add.w	r0, r4, #8
 800d332:	f000 fbd3 	bl	800dadc <uxr_get_input_reliable_stream>
 800d336:	9006      	str	r0, [sp, #24]
 800d338:	2800      	cmp	r0, #0
 800d33a:	d031      	beq.n	800d3a0 <wait_session_status+0x150>
 800d33c:	aa0e      	add	r2, sp, #56	@ 0x38
 800d33e:	4610      	mov	r0, r2
 800d340:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800d342:	9207      	str	r2, [sp, #28]
 800d344:	f7fc f854 	bl	80093f0 <ucdr_buffer_remaining>
 800d348:	4603      	mov	r3, r0
 800d34a:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 800d34e:	9000      	str	r0, [sp, #0]
 800d350:	9a07      	ldr	r2, [sp, #28]
 800d352:	9904      	ldr	r1, [sp, #16]
 800d354:	9806      	ldr	r0, [sp, #24]
 800d356:	f007 fe1d 	bl	8014f94 <uxr_receive_reliable_message>
 800d35a:	b308      	cbz	r0, 800d3a0 <wait_session_status+0x150>
 800d35c:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800d360:	2b00      	cmp	r3, #0
 800d362:	d041      	beq.n	800d3e8 <wait_session_status+0x198>
 800d364:	f8cd 8010 	str.w	r8, [sp, #16]
 800d368:	9507      	str	r5, [sp, #28]
 800d36a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d36e:	9d06      	ldr	r5, [sp, #24]
 800d370:	f04f 0902 	mov.w	r9, #2
 800d374:	e00a      	b.n	800d38c <wait_session_status+0x13c>
 800d376:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 800d37a:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 800d37e:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800d382:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d384:	a916      	add	r1, sp, #88	@ 0x58
 800d386:	4620      	mov	r0, r4
 800d388:	f7ff fbb6 	bl	800caf8 <read_submessage_list>
 800d38c:	2204      	movs	r2, #4
 800d38e:	a916      	add	r1, sp, #88	@ 0x58
 800d390:	4628      	mov	r0, r5
 800d392:	f007 fe79 	bl	8015088 <uxr_next_input_reliable_buffer_available>
 800d396:	2800      	cmp	r0, #0
 800d398:	d1ed      	bne.n	800d376 <wait_session_status+0x126>
 800d39a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d39e:	9d07      	ldr	r5, [sp, #28]
 800d3a0:	9903      	ldr	r1, [sp, #12]
 800d3a2:	4632      	mov	r2, r6
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	f7ff fa4b 	bl	800c840 <write_submessage_acknack.isra.0>
 800d3aa:	e76c      	b.n	800d286 <wait_session_status+0x36>
 800d3ac:	4631      	mov	r1, r6
 800d3ae:	f104 0008 	add.w	r0, r4, #8
 800d3b2:	f000 fb89 	bl	800dac8 <uxr_get_input_best_effort_stream>
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	f43f af65 	beq.w	800d286 <wait_session_status+0x36>
 800d3bc:	9904      	ldr	r1, [sp, #16]
 800d3be:	f007 fd59 	bl	8014e74 <uxr_receive_best_effort_message>
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	f43f af5f 	beq.w	800d286 <wait_session_status+0x36>
 800d3c8:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800d3cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d3ce:	a90e      	add	r1, sp, #56	@ 0x38
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	f7ff fb91 	bl	800caf8 <read_submessage_list>
 800d3d6:	e756      	b.n	800d286 <wait_session_status+0x36>
 800d3d8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d3da:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d3de:	47a0      	blx	r4
 800d3e0:	2001      	movs	r0, #1
 800d3e2:	b01f      	add	sp, #124	@ 0x7c
 800d3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3e8:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800d3ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d3ee:	a90e      	add	r1, sp, #56	@ 0x38
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	f7ff fb81 	bl	800caf8 <read_submessage_list>
 800d3f6:	e7b5      	b.n	800d364 <wait_session_status+0x114>

0800d3f8 <uxr_delete_session_retries>:
 800d3f8:	b530      	push	{r4, r5, lr}
 800d3fa:	b08f      	sub	sp, #60	@ 0x3c
 800d3fc:	4604      	mov	r4, r0
 800d3fe:	460d      	mov	r5, r1
 800d400:	f000 fa3a 	bl	800d878 <uxr_session_header_offset>
 800d404:	2300      	movs	r3, #0
 800d406:	2210      	movs	r2, #16
 800d408:	9000      	str	r0, [sp, #0]
 800d40a:	a902      	add	r1, sp, #8
 800d40c:	a806      	add	r0, sp, #24
 800d40e:	f7fb ffad 	bl	800936c <ucdr_init_buffer_origin_offset>
 800d412:	a906      	add	r1, sp, #24
 800d414:	4620      	mov	r0, r4
 800d416:	f000 f981 	bl	800d71c <uxr_buffer_delete_session>
 800d41a:	2200      	movs	r2, #0
 800d41c:	4611      	mov	r1, r2
 800d41e:	9b06      	ldr	r3, [sp, #24]
 800d420:	4620      	mov	r0, r4
 800d422:	f000 f9d5 	bl	800d7d0 <uxr_stamp_session_header>
 800d426:	a806      	add	r0, sp, #24
 800d428:	f7fb ffde 	bl	80093e8 <ucdr_buffer_length>
 800d42c:	462b      	mov	r3, r5
 800d42e:	4602      	mov	r2, r0
 800d430:	a902      	add	r1, sp, #8
 800d432:	4620      	mov	r0, r4
 800d434:	f7ff ff0c 	bl	800d250 <wait_session_status>
 800d438:	b118      	cbz	r0, 800d442 <uxr_delete_session_retries+0x4a>
 800d43a:	7960      	ldrb	r0, [r4, #5]
 800d43c:	fab0 f080 	clz	r0, r0
 800d440:	0940      	lsrs	r0, r0, #5
 800d442:	b00f      	add	sp, #60	@ 0x3c
 800d444:	bd30      	pop	{r4, r5, pc}
 800d446:	bf00      	nop

0800d448 <uxr_create_session>:
 800d448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d44c:	f100 0308 	add.w	r3, r0, #8
 800d450:	b0ab      	sub	sp, #172	@ 0xac
 800d452:	4604      	mov	r4, r0
 800d454:	4618      	mov	r0, r3
 800d456:	9303      	str	r3, [sp, #12]
 800d458:	f000 fa86 	bl	800d968 <uxr_reset_stream_storage>
 800d45c:	4620      	mov	r0, r4
 800d45e:	f000 fa0b 	bl	800d878 <uxr_session_header_offset>
 800d462:	2300      	movs	r3, #0
 800d464:	9000      	str	r0, [sp, #0]
 800d466:	221c      	movs	r2, #28
 800d468:	a90b      	add	r1, sp, #44	@ 0x2c
 800d46a:	a812      	add	r0, sp, #72	@ 0x48
 800d46c:	f7fb ff7e 	bl	800936c <ucdr_init_buffer_origin_offset>
 800d470:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d472:	8a1a      	ldrh	r2, [r3, #16]
 800d474:	3a04      	subs	r2, #4
 800d476:	b292      	uxth	r2, r2
 800d478:	a912      	add	r1, sp, #72	@ 0x48
 800d47a:	4620      	mov	r0, r4
 800d47c:	f000 f924 	bl	800d6c8 <uxr_buffer_create_session>
 800d480:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d482:	4620      	mov	r0, r4
 800d484:	f000 f990 	bl	800d7a8 <uxr_stamp_create_session_header>
 800d488:	a812      	add	r0, sp, #72	@ 0x48
 800d48a:	f7fb ffad 	bl	80093e8 <ucdr_buffer_length>
 800d48e:	23ff      	movs	r3, #255	@ 0xff
 800d490:	4683      	mov	fp, r0
 800d492:	7163      	strb	r3, [r4, #5]
 800d494:	f04f 080a 	mov.w	r8, #10
 800d498:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d49a:	465a      	mov	r2, fp
 800d49c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d4a0:	a90b      	add	r1, sp, #44	@ 0x2c
 800d4a2:	47a8      	blx	r5
 800d4a4:	f000 fb80 	bl	800dba8 <uxr_millis>
 800d4a8:	2700      	movs	r7, #0
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d4b0:	e009      	b.n	800d4c6 <uxr_create_session+0x7e>
 800d4b2:	f000 fb79 	bl	800dba8 <uxr_millis>
 800d4b6:	1b43      	subs	r3, r0, r5
 800d4b8:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	7962      	ldrb	r2, [r4, #5]
 800d4c0:	dd3d      	ble.n	800d53e <uxr_create_session+0xf6>
 800d4c2:	2aff      	cmp	r2, #255	@ 0xff
 800d4c4:	d13b      	bne.n	800d53e <uxr_create_session+0xf6>
 800d4c6:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d4c8:	a907      	add	r1, sp, #28
 800d4ca:	6896      	ldr	r6, [r2, #8]
 800d4cc:	6810      	ldr	r0, [r2, #0]
 800d4ce:	aa08      	add	r2, sp, #32
 800d4d0:	47b0      	blx	r6
 800d4d2:	2800      	cmp	r0, #0
 800d4d4:	d0ed      	beq.n	800d4b2 <uxr_create_session+0x6a>
 800d4d6:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d4da:	a81a      	add	r0, sp, #104	@ 0x68
 800d4dc:	f7fb ff58 	bl	8009390 <ucdr_init_buffer>
 800d4e0:	f10d 031a 	add.w	r3, sp, #26
 800d4e4:	aa06      	add	r2, sp, #24
 800d4e6:	a91a      	add	r1, sp, #104	@ 0x68
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	f88d 7018 	strb.w	r7, [sp, #24]
 800d4ee:	f000 f985 	bl	800d7fc <uxr_read_session_header>
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	d0dd      	beq.n	800d4b2 <uxr_create_session+0x6a>
 800d4f6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d4fa:	2100      	movs	r1, #0
 800d4fc:	f000 fa0e 	bl	800d91c <uxr_stream_id_from_raw>
 800d500:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800d504:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800d508:	9302      	str	r3, [sp, #8]
 800d50a:	f1b9 0f01 	cmp.w	r9, #1
 800d50e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d512:	fa5f fa80 	uxtb.w	sl, r0
 800d516:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d51a:	d056      	beq.n	800d5ca <uxr_create_session+0x182>
 800d51c:	f1b9 0f02 	cmp.w	r9, #2
 800d520:	d018      	beq.n	800d554 <uxr_create_session+0x10c>
 800d522:	f1b9 0f00 	cmp.w	r9, #0
 800d526:	d1c4      	bne.n	800d4b2 <uxr_create_session+0x6a>
 800d528:	4649      	mov	r1, r9
 800d52a:	4648      	mov	r0, r9
 800d52c:	f000 f9f6 	bl	800d91c <uxr_stream_id_from_raw>
 800d530:	a91a      	add	r1, sp, #104	@ 0x68
 800d532:	4602      	mov	r2, r0
 800d534:	900a      	str	r0, [sp, #40]	@ 0x28
 800d536:	4620      	mov	r0, r4
 800d538:	f7ff fade 	bl	800caf8 <read_submessage_list>
 800d53c:	e7b9      	b.n	800d4b2 <uxr_create_session+0x6a>
 800d53e:	f1b8 0801 	subs.w	r8, r8, #1
 800d542:	d001      	beq.n	800d548 <uxr_create_session+0x100>
 800d544:	2aff      	cmp	r2, #255	@ 0xff
 800d546:	d0a7      	beq.n	800d498 <uxr_create_session+0x50>
 800d548:	2a00      	cmp	r2, #0
 800d54a:	d05b      	beq.n	800d604 <uxr_create_session+0x1bc>
 800d54c:	2000      	movs	r0, #0
 800d54e:	b02b      	add	sp, #172	@ 0xac
 800d550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d554:	9803      	ldr	r0, [sp, #12]
 800d556:	4631      	mov	r1, r6
 800d558:	f000 fac0 	bl	800dadc <uxr_get_input_reliable_stream>
 800d55c:	9004      	str	r0, [sp, #16]
 800d55e:	b370      	cbz	r0, 800d5be <uxr_create_session+0x176>
 800d560:	aa1a      	add	r2, sp, #104	@ 0x68
 800d562:	4610      	mov	r0, r2
 800d564:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d566:	9205      	str	r2, [sp, #20]
 800d568:	f7fb ff42 	bl	80093f0 <ucdr_buffer_remaining>
 800d56c:	4603      	mov	r3, r0
 800d56e:	f10d 0019 	add.w	r0, sp, #25
 800d572:	9000      	str	r0, [sp, #0]
 800d574:	9a05      	ldr	r2, [sp, #20]
 800d576:	9902      	ldr	r1, [sp, #8]
 800d578:	9804      	ldr	r0, [sp, #16]
 800d57a:	f007 fd0b 	bl	8014f94 <uxr_receive_reliable_message>
 800d57e:	b1f0      	cbz	r0, 800d5be <uxr_create_session+0x176>
 800d580:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d035      	beq.n	800d5f4 <uxr_create_session+0x1ac>
 800d588:	f8cd b008 	str.w	fp, [sp, #8]
 800d58c:	f04f 0902 	mov.w	r9, #2
 800d590:	f8dd b010 	ldr.w	fp, [sp, #16]
 800d594:	e00a      	b.n	800d5ac <uxr_create_session+0x164>
 800d596:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800d59a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800d59e:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800d5a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d5a4:	a922      	add	r1, sp, #136	@ 0x88
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	f7ff faa6 	bl	800caf8 <read_submessage_list>
 800d5ac:	2204      	movs	r2, #4
 800d5ae:	a922      	add	r1, sp, #136	@ 0x88
 800d5b0:	4658      	mov	r0, fp
 800d5b2:	f007 fd69 	bl	8015088 <uxr_next_input_reliable_buffer_available>
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	d1ed      	bne.n	800d596 <uxr_create_session+0x14e>
 800d5ba:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d5be:	4632      	mov	r2, r6
 800d5c0:	4651      	mov	r1, sl
 800d5c2:	4620      	mov	r0, r4
 800d5c4:	f7ff f93c 	bl	800c840 <write_submessage_acknack.isra.0>
 800d5c8:	e773      	b.n	800d4b2 <uxr_create_session+0x6a>
 800d5ca:	9803      	ldr	r0, [sp, #12]
 800d5cc:	4631      	mov	r1, r6
 800d5ce:	f000 fa7b 	bl	800dac8 <uxr_get_input_best_effort_stream>
 800d5d2:	2800      	cmp	r0, #0
 800d5d4:	f43f af6d 	beq.w	800d4b2 <uxr_create_session+0x6a>
 800d5d8:	9902      	ldr	r1, [sp, #8]
 800d5da:	f007 fc4b 	bl	8014e74 <uxr_receive_best_effort_message>
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	f43f af67 	beq.w	800d4b2 <uxr_create_session+0x6a>
 800d5e4:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800d5e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d5ea:	a91a      	add	r1, sp, #104	@ 0x68
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f7ff fa83 	bl	800caf8 <read_submessage_list>
 800d5f2:	e75e      	b.n	800d4b2 <uxr_create_session+0x6a>
 800d5f4:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800d5f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d5fa:	a91a      	add	r1, sp, #104	@ 0x68
 800d5fc:	4620      	mov	r0, r4
 800d5fe:	f7ff fa7b 	bl	800caf8 <read_submessage_list>
 800d602:	e7c1      	b.n	800d588 <uxr_create_session+0x140>
 800d604:	9803      	ldr	r0, [sp, #12]
 800d606:	f000 f9af 	bl	800d968 <uxr_reset_stream_storage>
 800d60a:	2001      	movs	r0, #1
 800d60c:	b02b      	add	sp, #172	@ 0xac
 800d60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d612:	bf00      	nop

0800d614 <uxr_prepare_stream_to_write_submessage>:
 800d614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d618:	b082      	sub	sp, #8
 800d61a:	4606      	mov	r6, r0
 800d61c:	4610      	mov	r0, r2
 800d61e:	4614      	mov	r4, r2
 800d620:	9101      	str	r1, [sp, #4]
 800d622:	461f      	mov	r7, r3
 800d624:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800d628:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800d62c:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800d630:	f000 fab4 	bl	800db9c <uxr_submessage_padding>
 800d634:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d638:	1d21      	adds	r1, r4, #4
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	eb01 0a00 	add.w	sl, r1, r0
 800d640:	d012      	beq.n	800d668 <uxr_prepare_stream_to_write_submessage+0x54>
 800d642:	2b02      	cmp	r3, #2
 800d644:	d003      	beq.n	800d64e <uxr_prepare_stream_to_write_submessage+0x3a>
 800d646:	2000      	movs	r0, #0
 800d648:	b002      	add	sp, #8
 800d64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d64e:	4629      	mov	r1, r5
 800d650:	f106 0008 	add.w	r0, r6, #8
 800d654:	f000 fa2e 	bl	800dab4 <uxr_get_output_reliable_stream>
 800d658:	2800      	cmp	r0, #0
 800d65a:	d0f4      	beq.n	800d646 <uxr_prepare_stream_to_write_submessage+0x32>
 800d65c:	4651      	mov	r1, sl
 800d65e:	463a      	mov	r2, r7
 800d660:	f007 fec8 	bl	80153f4 <uxr_prepare_reliable_buffer_to_write>
 800d664:	b968      	cbnz	r0, 800d682 <uxr_prepare_stream_to_write_submessage+0x6e>
 800d666:	e7ee      	b.n	800d646 <uxr_prepare_stream_to_write_submessage+0x32>
 800d668:	4629      	mov	r1, r5
 800d66a:	f106 0008 	add.w	r0, r6, #8
 800d66e:	f000 fa19 	bl	800daa4 <uxr_get_output_best_effort_stream>
 800d672:	2800      	cmp	r0, #0
 800d674:	d0e7      	beq.n	800d646 <uxr_prepare_stream_to_write_submessage+0x32>
 800d676:	4651      	mov	r1, sl
 800d678:	463a      	mov	r2, r7
 800d67a:	f007 fded 	bl	8015258 <uxr_prepare_best_effort_buffer_to_write>
 800d67e:	2800      	cmp	r0, #0
 800d680:	d0e1      	beq.n	800d646 <uxr_prepare_stream_to_write_submessage+0x32>
 800d682:	464b      	mov	r3, r9
 800d684:	b2a2      	uxth	r2, r4
 800d686:	4641      	mov	r1, r8
 800d688:	4638      	mov	r0, r7
 800d68a:	f000 fa47 	bl	800db1c <uxr_buffer_submessage_header>
 800d68e:	2001      	movs	r0, #1
 800d690:	b002      	add	sp, #8
 800d692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d696:	bf00      	nop

0800d698 <uxr_init_session_info>:
 800d698:	2300      	movs	r3, #0
 800d69a:	f361 0307 	bfi	r3, r1, #0, #8
 800d69e:	0e11      	lsrs	r1, r2, #24
 800d6a0:	f361 230f 	bfi	r3, r1, #8, #8
 800d6a4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800d6a8:	f361 4317 	bfi	r3, r1, #16, #8
 800d6ac:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d6b0:	f361 631f 	bfi	r3, r1, #24, #8
 800d6b4:	f04f 0c09 	mov.w	ip, #9
 800d6b8:	21ff      	movs	r1, #255	@ 0xff
 800d6ba:	6003      	str	r3, [r0, #0]
 800d6bc:	7102      	strb	r2, [r0, #4]
 800d6be:	f8a0 c006 	strh.w	ip, [r0, #6]
 800d6c2:	7141      	strb	r1, [r0, #5]
 800d6c4:	4770      	bx	lr
 800d6c6:	bf00      	nop

0800d6c8 <uxr_buffer_create_session>:
 800d6c8:	b530      	push	{r4, r5, lr}
 800d6ca:	4d13      	ldr	r5, [pc, #76]	@ (800d718 <uxr_buffer_create_session+0x50>)
 800d6cc:	b089      	sub	sp, #36	@ 0x24
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	9307      	str	r3, [sp, #28]
 800d6d2:	f8ad 201c 	strh.w	r2, [sp, #28]
 800d6d6:	682a      	ldr	r2, [r5, #0]
 800d6d8:	9200      	str	r2, [sp, #0]
 800d6da:	460c      	mov	r4, r1
 800d6dc:	2201      	movs	r2, #1
 800d6de:	88a9      	ldrh	r1, [r5, #4]
 800d6e0:	9301      	str	r3, [sp, #4]
 800d6e2:	80c2      	strh	r2, [r0, #6]
 800d6e4:	f8ad 1006 	strh.w	r1, [sp, #6]
 800d6e8:	f8d0 1001 	ldr.w	r1, [r0, #1]
 800d6ec:	7800      	ldrb	r0, [r0, #0]
 800d6ee:	9303      	str	r3, [sp, #12]
 800d6f0:	f88d 2004 	strb.w	r2, [sp, #4]
 800d6f4:	9102      	str	r1, [sp, #8]
 800d6f6:	2210      	movs	r2, #16
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	f88d 000c 	strb.w	r0, [sp, #12]
 800d6fe:	4620      	mov	r0, r4
 800d700:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800d704:	9306      	str	r3, [sp, #24]
 800d706:	f000 fa09 	bl	800db1c <uxr_buffer_submessage_header>
 800d70a:	4669      	mov	r1, sp
 800d70c:	4620      	mov	r0, r4
 800d70e:	f001 fa29 	bl	800eb64 <uxr_serialize_CREATE_CLIENT_Payload>
 800d712:	b009      	add	sp, #36	@ 0x24
 800d714:	bd30      	pop	{r4, r5, pc}
 800d716:	bf00      	nop
 800d718:	08018d70 	.word	0x08018d70

0800d71c <uxr_buffer_delete_session>:
 800d71c:	b510      	push	{r4, lr}
 800d71e:	4a0c      	ldr	r2, [pc, #48]	@ (800d750 <uxr_buffer_delete_session+0x34>)
 800d720:	b082      	sub	sp, #8
 800d722:	460c      	mov	r4, r1
 800d724:	2302      	movs	r3, #2
 800d726:	8911      	ldrh	r1, [r2, #8]
 800d728:	80c3      	strh	r3, [r0, #6]
 800d72a:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 800d72e:	2300      	movs	r3, #0
 800d730:	2204      	movs	r2, #4
 800d732:	f8ad 1006 	strh.w	r1, [sp, #6]
 800d736:	4620      	mov	r0, r4
 800d738:	2103      	movs	r1, #3
 800d73a:	f8ad c004 	strh.w	ip, [sp, #4]
 800d73e:	f000 f9ed 	bl	800db1c <uxr_buffer_submessage_header>
 800d742:	a901      	add	r1, sp, #4
 800d744:	4620      	mov	r0, r4
 800d746:	f001 fab1 	bl	800ecac <uxr_serialize_DELETE_Payload>
 800d74a:	b002      	add	sp, #8
 800d74c:	bd10      	pop	{r4, pc}
 800d74e:	bf00      	nop
 800d750:	08018d70 	.word	0x08018d70

0800d754 <uxr_read_create_session_status>:
 800d754:	b510      	push	{r4, lr}
 800d756:	460b      	mov	r3, r1
 800d758:	b088      	sub	sp, #32
 800d75a:	4604      	mov	r4, r0
 800d75c:	a901      	add	r1, sp, #4
 800d75e:	4618      	mov	r0, r3
 800d760:	f001 fab4 	bl	800eccc <uxr_deserialize_STATUS_AGENT_Payload>
 800d764:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d768:	7163      	strb	r3, [r4, #5]
 800d76a:	b008      	add	sp, #32
 800d76c:	bd10      	pop	{r4, pc}
 800d76e:	bf00      	nop

0800d770 <uxr_read_delete_session_status>:
 800d770:	b510      	push	{r4, lr}
 800d772:	460b      	mov	r3, r1
 800d774:	b082      	sub	sp, #8
 800d776:	4604      	mov	r4, r0
 800d778:	4669      	mov	r1, sp
 800d77a:	4618      	mov	r0, r3
 800d77c:	f001 fad6 	bl	800ed2c <uxr_deserialize_STATUS_Payload>
 800d780:	88e3      	ldrh	r3, [r4, #6]
 800d782:	2b02      	cmp	r3, #2
 800d784:	d001      	beq.n	800d78a <uxr_read_delete_session_status+0x1a>
 800d786:	b002      	add	sp, #8
 800d788:	bd10      	pop	{r4, pc}
 800d78a:	f10d 0002 	add.w	r0, sp, #2
 800d78e:	f7fe ffdf 	bl	800c750 <uxr_object_id_from_raw>
 800d792:	f8bd 3000 	ldrh.w	r3, [sp]
 800d796:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d79a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d79e:	bf08      	it	eq
 800d7a0:	7162      	strbeq	r2, [r4, #5]
 800d7a2:	b002      	add	sp, #8
 800d7a4:	bd10      	pop	{r4, pc}
 800d7a6:	bf00      	nop

0800d7a8 <uxr_stamp_create_session_header>:
 800d7a8:	b510      	push	{r4, lr}
 800d7aa:	2208      	movs	r2, #8
 800d7ac:	b08a      	sub	sp, #40	@ 0x28
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	eb0d 0002 	add.w	r0, sp, r2
 800d7b4:	f7fb fdec 	bl	8009390 <ucdr_init_buffer>
 800d7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7bc:	9400      	str	r4, [sp, #0]
 800d7be:	2300      	movs	r3, #0
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	a802      	add	r0, sp, #8
 800d7c4:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800d7c8:	f000 fba6 	bl	800df18 <uxr_serialize_message_header>
 800d7cc:	b00a      	add	sp, #40	@ 0x28
 800d7ce:	bd10      	pop	{r4, pc}

0800d7d0 <uxr_stamp_session_header>:
 800d7d0:	b570      	push	{r4, r5, r6, lr}
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	b08a      	sub	sp, #40	@ 0x28
 800d7d6:	4616      	mov	r6, r2
 800d7d8:	2208      	movs	r2, #8
 800d7da:	eb0d 0002 	add.w	r0, sp, r2
 800d7de:	460d      	mov	r5, r1
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	f7fb fdd5 	bl	8009390 <ucdr_init_buffer>
 800d7e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ea:	9400      	str	r4, [sp, #0]
 800d7ec:	4633      	mov	r3, r6
 800d7ee:	462a      	mov	r2, r5
 800d7f0:	a802      	add	r0, sp, #8
 800d7f2:	f000 fb91 	bl	800df18 <uxr_serialize_message_header>
 800d7f6:	b00a      	add	sp, #40	@ 0x28
 800d7f8:	bd70      	pop	{r4, r5, r6, pc}
 800d7fa:	bf00      	nop

0800d7fc <uxr_read_session_header>:
 800d7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7fe:	4607      	mov	r7, r0
 800d800:	b085      	sub	sp, #20
 800d802:	4608      	mov	r0, r1
 800d804:	460c      	mov	r4, r1
 800d806:	4615      	mov	r5, r2
 800d808:	461e      	mov	r6, r3
 800d80a:	f7fb fdf1 	bl	80093f0 <ucdr_buffer_remaining>
 800d80e:	2808      	cmp	r0, #8
 800d810:	d802      	bhi.n	800d818 <uxr_read_session_header+0x1c>
 800d812:	2000      	movs	r0, #0
 800d814:	b005      	add	sp, #20
 800d816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d818:	ab03      	add	r3, sp, #12
 800d81a:	9300      	str	r3, [sp, #0]
 800d81c:	462a      	mov	r2, r5
 800d81e:	4633      	mov	r3, r6
 800d820:	f10d 010b 	add.w	r1, sp, #11
 800d824:	4620      	mov	r0, r4
 800d826:	f000 fb95 	bl	800df54 <uxr_deserialize_message_header>
 800d82a:	783a      	ldrb	r2, [r7, #0]
 800d82c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d830:	4293      	cmp	r3, r2
 800d832:	d1ee      	bne.n	800d812 <uxr_read_session_header+0x16>
 800d834:	061b      	lsls	r3, r3, #24
 800d836:	d41c      	bmi.n	800d872 <uxr_read_session_header+0x76>
 800d838:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800d83c:	787b      	ldrb	r3, [r7, #1]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d003      	beq.n	800d84a <uxr_read_session_header+0x4e>
 800d842:	2001      	movs	r0, #1
 800d844:	f080 0001 	eor.w	r0, r0, #1
 800d848:	e7e4      	b.n	800d814 <uxr_read_session_header+0x18>
 800d84a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800d84e:	78bb      	ldrb	r3, [r7, #2]
 800d850:	429a      	cmp	r2, r3
 800d852:	f107 0102 	add.w	r1, r7, #2
 800d856:	d1f4      	bne.n	800d842 <uxr_read_session_header+0x46>
 800d858:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800d85c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d860:	429a      	cmp	r2, r3
 800d862:	d1ee      	bne.n	800d842 <uxr_read_session_header+0x46>
 800d864:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800d868:	784b      	ldrb	r3, [r1, #1]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d1e9      	bne.n	800d842 <uxr_read_session_header+0x46>
 800d86e:	2000      	movs	r0, #0
 800d870:	e7e8      	b.n	800d844 <uxr_read_session_header+0x48>
 800d872:	2001      	movs	r0, #1
 800d874:	e7ce      	b.n	800d814 <uxr_read_session_header+0x18>
 800d876:	bf00      	nop

0800d878 <uxr_session_header_offset>:
 800d878:	f990 3000 	ldrsb.w	r3, [r0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	bfb4      	ite	lt
 800d880:	2004      	movlt	r0, #4
 800d882:	2008      	movge	r0, #8
 800d884:	4770      	bx	lr
 800d886:	bf00      	nop

0800d888 <uxr_init_base_object_request>:
 800d888:	b510      	push	{r4, lr}
 800d88a:	88c3      	ldrh	r3, [r0, #6]
 800d88c:	b082      	sub	sp, #8
 800d88e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800d892:	9101      	str	r1, [sp, #4]
 800d894:	f1a3 010a 	sub.w	r1, r3, #10
 800d898:	b289      	uxth	r1, r1
 800d89a:	42a1      	cmp	r1, r4
 800d89c:	d80e      	bhi.n	800d8bc <uxr_init_base_object_request+0x34>
 800d89e:	3301      	adds	r3, #1
 800d8a0:	b29c      	uxth	r4, r3
 800d8a2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	80c4      	strh	r4, [r0, #6]
 800d8aa:	9801      	ldr	r0, [sp, #4]
 800d8ac:	7011      	strb	r1, [r2, #0]
 800d8ae:	7053      	strb	r3, [r2, #1]
 800d8b0:	1c91      	adds	r1, r2, #2
 800d8b2:	f7fe ff61 	bl	800c778 <uxr_object_id_to_raw>
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	b002      	add	sp, #8
 800d8ba:	bd10      	pop	{r4, pc}
 800d8bc:	230a      	movs	r3, #10
 800d8be:	2100      	movs	r1, #0
 800d8c0:	461c      	mov	r4, r3
 800d8c2:	e7f1      	b.n	800d8a8 <uxr_init_base_object_request+0x20>

0800d8c4 <uxr_parse_base_object_request>:
 800d8c4:	b570      	push	{r4, r5, r6, lr}
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	3002      	adds	r0, #2
 800d8ca:	460d      	mov	r5, r1
 800d8cc:	4616      	mov	r6, r2
 800d8ce:	f7fe ff3f 	bl	800c750 <uxr_object_id_from_raw>
 800d8d2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800d8d6:	8028      	strh	r0, [r5, #0]
 800d8d8:	806b      	strh	r3, [r5, #2]
 800d8da:	8823      	ldrh	r3, [r4, #0]
 800d8dc:	ba5b      	rev16	r3, r3
 800d8de:	8033      	strh	r3, [r6, #0]
 800d8e0:	bd70      	pop	{r4, r5, r6, pc}
 800d8e2:	bf00      	nop

0800d8e4 <uxr_stream_id>:
 800d8e4:	2901      	cmp	r1, #1
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	d011      	beq.n	800d910 <uxr_stream_id+0x2c>
 800d8ec:	2902      	cmp	r1, #2
 800d8ee:	f04f 0c00 	mov.w	ip, #0
 800d8f2:	d00a      	beq.n	800d90a <uxr_stream_id+0x26>
 800d8f4:	2000      	movs	r0, #0
 800d8f6:	f36c 0007 	bfi	r0, ip, #0, #8
 800d8fa:	f363 200f 	bfi	r0, r3, #8, #8
 800d8fe:	f361 4017 	bfi	r0, r1, #16, #8
 800d902:	f362 601f 	bfi	r0, r2, #24, #8
 800d906:	b002      	add	sp, #8
 800d908:	4770      	bx	lr
 800d90a:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800d90e:	e7f1      	b.n	800d8f4 <uxr_stream_id+0x10>
 800d910:	f100 0c01 	add.w	ip, r0, #1
 800d914:	fa5f fc8c 	uxtb.w	ip, ip
 800d918:	e7ec      	b.n	800d8f4 <uxr_stream_id+0x10>
 800d91a:	bf00      	nop

0800d91c <uxr_stream_id_from_raw>:
 800d91c:	b082      	sub	sp, #8
 800d91e:	4603      	mov	r3, r0
 800d920:	b130      	cbz	r0, 800d930 <uxr_stream_id_from_raw+0x14>
 800d922:	0602      	lsls	r2, r0, #24
 800d924:	d411      	bmi.n	800d94a <uxr_stream_id_from_raw+0x2e>
 800d926:	1e42      	subs	r2, r0, #1
 800d928:	b2d2      	uxtb	r2, r2
 800d92a:	f04f 0c01 	mov.w	ip, #1
 800d92e:	e001      	b.n	800d934 <uxr_stream_id_from_raw+0x18>
 800d930:	4684      	mov	ip, r0
 800d932:	4602      	mov	r2, r0
 800d934:	2000      	movs	r0, #0
 800d936:	f363 0007 	bfi	r0, r3, #0, #8
 800d93a:	f362 200f 	bfi	r0, r2, #8, #8
 800d93e:	f36c 4017 	bfi	r0, ip, #16, #8
 800d942:	f361 601f 	bfi	r0, r1, #24, #8
 800d946:	b002      	add	sp, #8
 800d948:	4770      	bx	lr
 800d94a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800d94e:	f04f 0c02 	mov.w	ip, #2
 800d952:	e7ef      	b.n	800d934 <uxr_stream_id_from_raw+0x18>

0800d954 <uxr_init_stream_storage>:
 800d954:	2300      	movs	r3, #0
 800d956:	7403      	strb	r3, [r0, #16]
 800d958:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800d95c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800d960:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800d964:	4770      	bx	lr
 800d966:	bf00      	nop

0800d968 <uxr_reset_stream_storage>:
 800d968:	b570      	push	{r4, r5, r6, lr}
 800d96a:	7c03      	ldrb	r3, [r0, #16]
 800d96c:	4604      	mov	r4, r0
 800d96e:	b153      	cbz	r3, 800d986 <uxr_reset_stream_storage+0x1e>
 800d970:	4606      	mov	r6, r0
 800d972:	2500      	movs	r5, #0
 800d974:	4630      	mov	r0, r6
 800d976:	f007 fc69 	bl	801524c <uxr_reset_output_best_effort_stream>
 800d97a:	7c23      	ldrb	r3, [r4, #16]
 800d97c:	3501      	adds	r5, #1
 800d97e:	42ab      	cmp	r3, r5
 800d980:	f106 0610 	add.w	r6, r6, #16
 800d984:	d8f6      	bhi.n	800d974 <uxr_reset_stream_storage+0xc>
 800d986:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d98a:	b163      	cbz	r3, 800d9a6 <uxr_reset_stream_storage+0x3e>
 800d98c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d990:	2500      	movs	r5, #0
 800d992:	4630      	mov	r0, r6
 800d994:	f007 fa6a 	bl	8014e6c <uxr_reset_input_best_effort_stream>
 800d998:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d99c:	3501      	adds	r5, #1
 800d99e:	42ab      	cmp	r3, r5
 800d9a0:	f106 0602 	add.w	r6, r6, #2
 800d9a4:	d8f5      	bhi.n	800d992 <uxr_reset_stream_storage+0x2a>
 800d9a6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800d9aa:	b163      	cbz	r3, 800d9c6 <uxr_reset_stream_storage+0x5e>
 800d9ac:	f104 0618 	add.w	r6, r4, #24
 800d9b0:	2500      	movs	r5, #0
 800d9b2:	4630      	mov	r0, r6
 800d9b4:	f007 fcf4 	bl	80153a0 <uxr_reset_output_reliable_stream>
 800d9b8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800d9bc:	3501      	adds	r5, #1
 800d9be:	42ab      	cmp	r3, r5
 800d9c0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800d9c4:	d8f5      	bhi.n	800d9b2 <uxr_reset_stream_storage+0x4a>
 800d9c6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800d9ca:	b163      	cbz	r3, 800d9e6 <uxr_reset_stream_storage+0x7e>
 800d9cc:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800d9d0:	2500      	movs	r5, #0
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	f007 faba 	bl	8014f4c <uxr_reset_input_reliable_stream>
 800d9d8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800d9dc:	3501      	adds	r5, #1
 800d9de:	42ab      	cmp	r3, r5
 800d9e0:	f106 0618 	add.w	r6, r6, #24
 800d9e4:	d8f5      	bhi.n	800d9d2 <uxr_reset_stream_storage+0x6a>
 800d9e6:	bd70      	pop	{r4, r5, r6, pc}

0800d9e8 <uxr_add_output_best_effort_buffer>:
 800d9e8:	b510      	push	{r4, lr}
 800d9ea:	7c04      	ldrb	r4, [r0, #16]
 800d9ec:	f104 0c01 	add.w	ip, r4, #1
 800d9f0:	b082      	sub	sp, #8
 800d9f2:	f880 c010 	strb.w	ip, [r0, #16]
 800d9f6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800d9fa:	f007 fc1d 	bl	8015238 <uxr_init_output_best_effort_stream>
 800d9fe:	2201      	movs	r2, #1
 800da00:	4611      	mov	r1, r2
 800da02:	4620      	mov	r0, r4
 800da04:	b002      	add	sp, #8
 800da06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da0a:	f7ff bf6b 	b.w	800d8e4 <uxr_stream_id>
 800da0e:	bf00      	nop

0800da10 <uxr_add_output_reliable_buffer>:
 800da10:	b510      	push	{r4, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	4684      	mov	ip, r0
 800da16:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800da1a:	9000      	str	r0, [sp, #0]
 800da1c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800da20:	2028      	movs	r0, #40	@ 0x28
 800da22:	fb00 c004 	mla	r0, r0, r4, ip
 800da26:	f104 0e01 	add.w	lr, r4, #1
 800da2a:	3018      	adds	r0, #24
 800da2c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800da30:	f007 fc7e 	bl	8015330 <uxr_init_output_reliable_stream>
 800da34:	2201      	movs	r2, #1
 800da36:	2102      	movs	r1, #2
 800da38:	4620      	mov	r0, r4
 800da3a:	b004      	add	sp, #16
 800da3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da40:	f7ff bf50 	b.w	800d8e4 <uxr_stream_id>

0800da44 <uxr_add_input_best_effort_buffer>:
 800da44:	b510      	push	{r4, lr}
 800da46:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800da4a:	1c62      	adds	r2, r4, #1
 800da4c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800da50:	b082      	sub	sp, #8
 800da52:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 800da56:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800da5a:	f007 fa03 	bl	8014e64 <uxr_init_input_best_effort_stream>
 800da5e:	2200      	movs	r2, #0
 800da60:	2101      	movs	r1, #1
 800da62:	4620      	mov	r0, r4
 800da64:	b002      	add	sp, #8
 800da66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da6a:	f7ff bf3b 	b.w	800d8e4 <uxr_stream_id>
 800da6e:	bf00      	nop

0800da70 <uxr_add_input_reliable_buffer>:
 800da70:	b510      	push	{r4, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	4684      	mov	ip, r0
 800da76:	9806      	ldr	r0, [sp, #24]
 800da78:	9000      	str	r0, [sp, #0]
 800da7a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800da7e:	2018      	movs	r0, #24
 800da80:	fb00 c004 	mla	r0, r0, r4, ip
 800da84:	f104 0e01 	add.w	lr, r4, #1
 800da88:	3048      	adds	r0, #72	@ 0x48
 800da8a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800da8e:	f007 fa31 	bl	8014ef4 <uxr_init_input_reliable_stream>
 800da92:	2200      	movs	r2, #0
 800da94:	2102      	movs	r1, #2
 800da96:	4620      	mov	r0, r4
 800da98:	b004      	add	sp, #16
 800da9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da9e:	f7ff bf21 	b.w	800d8e4 <uxr_stream_id>
 800daa2:	bf00      	nop

0800daa4 <uxr_get_output_best_effort_stream>:
 800daa4:	7c03      	ldrb	r3, [r0, #16]
 800daa6:	428b      	cmp	r3, r1
 800daa8:	bf8c      	ite	hi
 800daaa:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800daae:	2000      	movls	r0, #0
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop

0800dab4 <uxr_get_output_reliable_stream>:
 800dab4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800dab8:	428b      	cmp	r3, r1
 800daba:	bf83      	ittte	hi
 800dabc:	2328      	movhi	r3, #40	@ 0x28
 800dabe:	fb03 0001 	mlahi	r0, r3, r1, r0
 800dac2:	3018      	addhi	r0, #24
 800dac4:	2000      	movls	r0, #0
 800dac6:	4770      	bx	lr

0800dac8 <uxr_get_input_best_effort_stream>:
 800dac8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800dacc:	428b      	cmp	r3, r1
 800dace:	bf86      	itte	hi
 800dad0:	3121      	addhi	r1, #33	@ 0x21
 800dad2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800dad6:	2000      	movls	r0, #0
 800dad8:	4770      	bx	lr
 800dada:	bf00      	nop

0800dadc <uxr_get_input_reliable_stream>:
 800dadc:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800dae0:	428b      	cmp	r3, r1
 800dae2:	bf83      	ittte	hi
 800dae4:	2318      	movhi	r3, #24
 800dae6:	fb03 0001 	mlahi	r0, r3, r1, r0
 800daea:	3048      	addhi	r0, #72	@ 0x48
 800daec:	2000      	movls	r0, #0
 800daee:	4770      	bx	lr

0800daf0 <uxr_output_streams_confirmed>:
 800daf0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800daf4:	b183      	cbz	r3, 800db18 <uxr_output_streams_confirmed+0x28>
 800daf6:	b570      	push	{r4, r5, r6, lr}
 800daf8:	4606      	mov	r6, r0
 800dafa:	f100 0518 	add.w	r5, r0, #24
 800dafe:	2400      	movs	r4, #0
 800db00:	e001      	b.n	800db06 <uxr_output_streams_confirmed+0x16>
 800db02:	3528      	adds	r5, #40	@ 0x28
 800db04:	b138      	cbz	r0, 800db16 <uxr_output_streams_confirmed+0x26>
 800db06:	4628      	mov	r0, r5
 800db08:	f007 feb2 	bl	8015870 <uxr_is_output_up_to_date>
 800db0c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800db10:	3401      	adds	r4, #1
 800db12:	42a3      	cmp	r3, r4
 800db14:	d8f5      	bhi.n	800db02 <uxr_output_streams_confirmed+0x12>
 800db16:	bd70      	pop	{r4, r5, r6, pc}
 800db18:	2001      	movs	r0, #1
 800db1a:	4770      	bx	lr

0800db1c <uxr_buffer_submessage_header>:
 800db1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db1e:	4604      	mov	r4, r0
 800db20:	460e      	mov	r6, r1
 800db22:	2104      	movs	r1, #4
 800db24:	4615      	mov	r5, r2
 800db26:	461f      	mov	r7, r3
 800db28:	f7fb fc4c 	bl	80093c4 <ucdr_align_to>
 800db2c:	2301      	movs	r3, #1
 800db2e:	7523      	strb	r3, [r4, #20]
 800db30:	f047 0201 	orr.w	r2, r7, #1
 800db34:	462b      	mov	r3, r5
 800db36:	4631      	mov	r1, r6
 800db38:	4620      	mov	r0, r4
 800db3a:	f000 fa2b 	bl	800df94 <uxr_serialize_submessage_header>
 800db3e:	4620      	mov	r0, r4
 800db40:	f7fb fc56 	bl	80093f0 <ucdr_buffer_remaining>
 800db44:	42a8      	cmp	r0, r5
 800db46:	bf34      	ite	cc
 800db48:	2000      	movcc	r0, #0
 800db4a:	2001      	movcs	r0, #1
 800db4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db4e:	bf00      	nop

0800db50 <uxr_read_submessage_header>:
 800db50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db54:	4604      	mov	r4, r0
 800db56:	460d      	mov	r5, r1
 800db58:	2104      	movs	r1, #4
 800db5a:	4616      	mov	r6, r2
 800db5c:	4698      	mov	r8, r3
 800db5e:	f7fb fc31 	bl	80093c4 <ucdr_align_to>
 800db62:	4620      	mov	r0, r4
 800db64:	f7fb fc44 	bl	80093f0 <ucdr_buffer_remaining>
 800db68:	2803      	cmp	r0, #3
 800db6a:	bf8c      	ite	hi
 800db6c:	2701      	movhi	r7, #1
 800db6e:	2700      	movls	r7, #0
 800db70:	d802      	bhi.n	800db78 <uxr_read_submessage_header+0x28>
 800db72:	4638      	mov	r0, r7
 800db74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db78:	4633      	mov	r3, r6
 800db7a:	4642      	mov	r2, r8
 800db7c:	4620      	mov	r0, r4
 800db7e:	4629      	mov	r1, r5
 800db80:	f000 fa1a 	bl	800dfb8 <uxr_deserialize_submessage_header>
 800db84:	f898 3000 	ldrb.w	r3, [r8]
 800db88:	f003 0201 	and.w	r2, r3, #1
 800db8c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800db90:	f888 3000 	strb.w	r3, [r8]
 800db94:	7522      	strb	r2, [r4, #20]
 800db96:	4638      	mov	r0, r7
 800db98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800db9c <uxr_submessage_padding>:
 800db9c:	f010 0003 	ands.w	r0, r0, #3
 800dba0:	bf18      	it	ne
 800dba2:	f1c0 0004 	rsbne	r0, r0, #4
 800dba6:	4770      	bx	lr

0800dba8 <uxr_millis>:
 800dba8:	b510      	push	{r4, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	4669      	mov	r1, sp
 800dbae:	2001      	movs	r0, #1
 800dbb0:	f7f4 f866 	bl	8001c80 <clock_gettime>
 800dbb4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800dbb8:	4b06      	ldr	r3, [pc, #24]	@ (800dbd4 <uxr_millis+0x2c>)
 800dbba:	fba0 0103 	umull	r0, r1, r0, r3
 800dbbe:	1900      	adds	r0, r0, r4
 800dbc0:	fb03 1102 	mla	r1, r3, r2, r1
 800dbc4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800dbc8:	4a03      	ldr	r2, [pc, #12]	@ (800dbd8 <uxr_millis+0x30>)
 800dbca:	2300      	movs	r3, #0
 800dbcc:	f7f2 ff3e 	bl	8000a4c <__aeabi_ldivmod>
 800dbd0:	b004      	add	sp, #16
 800dbd2:	bd10      	pop	{r4, pc}
 800dbd4:	3b9aca00 	.word	0x3b9aca00
 800dbd8:	000f4240 	.word	0x000f4240

0800dbdc <uxr_nanos>:
 800dbdc:	b510      	push	{r4, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	4669      	mov	r1, sp
 800dbe2:	2001      	movs	r0, #1
 800dbe4:	f7f4 f84c 	bl	8001c80 <clock_gettime>
 800dbe8:	4a06      	ldr	r2, [pc, #24]	@ (800dc04 <uxr_nanos+0x28>)
 800dbea:	9800      	ldr	r0, [sp, #0]
 800dbec:	9902      	ldr	r1, [sp, #8]
 800dbee:	9c01      	ldr	r4, [sp, #4]
 800dbf0:	fba0 0302 	umull	r0, r3, r0, r2
 800dbf4:	1840      	adds	r0, r0, r1
 800dbf6:	fb02 3304 	mla	r3, r2, r4, r3
 800dbfa:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800dbfe:	b004      	add	sp, #16
 800dc00:	bd10      	pop	{r4, pc}
 800dc02:	bf00      	nop
 800dc04:	3b9aca00 	.word	0x3b9aca00

0800dc08 <on_full_output_buffer_fragmented>:
 800dc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc0c:	460c      	mov	r4, r1
 800dc0e:	b08a      	sub	sp, #40	@ 0x28
 800dc10:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800dc14:	4606      	mov	r6, r0
 800dc16:	f104 0008 	add.w	r0, r4, #8
 800dc1a:	f7ff ff4b 	bl	800dab4 <uxr_get_output_reliable_stream>
 800dc1e:	4605      	mov	r5, r0
 800dc20:	f007 fe30 	bl	8015884 <get_available_free_slots>
 800dc24:	b968      	cbnz	r0, 800dc42 <on_full_output_buffer_fragmented+0x3a>
 800dc26:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	4798      	blx	r3
 800dc2e:	b918      	cbnz	r0, 800dc38 <on_full_output_buffer_fragmented+0x30>
 800dc30:	2001      	movs	r0, #1
 800dc32:	b00a      	add	sp, #40	@ 0x28
 800dc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc38:	4628      	mov	r0, r5
 800dc3a:	f007 fe23 	bl	8015884 <get_available_free_slots>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	d0f6      	beq.n	800dc30 <on_full_output_buffer_fragmented+0x28>
 800dc42:	892a      	ldrh	r2, [r5, #8]
 800dc44:	686b      	ldr	r3, [r5, #4]
 800dc46:	fbb3 f8f2 	udiv	r8, r3, r2
 800dc4a:	89eb      	ldrh	r3, [r5, #14]
 800dc4c:	7b29      	ldrb	r1, [r5, #12]
 800dc4e:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc52:	fb02 3310 	mls	r3, r2, r0, r3
 800dc56:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	fb08 f303 	mul.w	r3, r8, r3
 800dc60:	31fc      	adds	r1, #252	@ 0xfc
 800dc62:	f1a8 0804 	sub.w	r8, r8, #4
 800dc66:	4441      	add	r1, r8
 800dc68:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800dc6c:	b28f      	uxth	r7, r1
 800dc6e:	6829      	ldr	r1, [r5, #0]
 800dc70:	3304      	adds	r3, #4
 800dc72:	1bd2      	subs	r2, r2, r7
 800dc74:	4419      	add	r1, r3
 800dc76:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 800dc7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc7e:	9300      	str	r3, [sp, #0]
 800dc80:	4642      	mov	r2, r8
 800dc82:	2300      	movs	r3, #0
 800dc84:	a802      	add	r0, sp, #8
 800dc86:	f7fb fb71 	bl	800936c <ucdr_init_buffer_origin_offset>
 800dc8a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800dc8e:	f102 0308 	add.w	r3, r2, #8
 800dc92:	4543      	cmp	r3, r8
 800dc94:	d928      	bls.n	800dce8 <on_full_output_buffer_fragmented+0xe0>
 800dc96:	463a      	mov	r2, r7
 800dc98:	2300      	movs	r3, #0
 800dc9a:	210d      	movs	r1, #13
 800dc9c:	a802      	add	r0, sp, #8
 800dc9e:	f7ff ff3d 	bl	800db1c <uxr_buffer_submessage_header>
 800dca2:	8929      	ldrh	r1, [r5, #8]
 800dca4:	89eb      	ldrh	r3, [r5, #14]
 800dca6:	fbb3 f2f1 	udiv	r2, r3, r1
 800dcaa:	fb01 3312 	mls	r3, r1, r2, r3
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	686a      	ldr	r2, [r5, #4]
 800dcb2:	fbb2 f2f1 	udiv	r2, r2, r1
 800dcb6:	fb02 f303 	mul.w	r3, r2, r3
 800dcba:	682a      	ldr	r2, [r5, #0]
 800dcbc:	f842 8003 	str.w	r8, [r2, r3]
 800dcc0:	89e8      	ldrh	r0, [r5, #14]
 800dcc2:	2101      	movs	r1, #1
 800dcc4:	f007 ff32 	bl	8015b2c <uxr_seq_num_add>
 800dcc8:	9904      	ldr	r1, [sp, #16]
 800dcca:	9a03      	ldr	r2, [sp, #12]
 800dccc:	81e8      	strh	r0, [r5, #14]
 800dcce:	1a52      	subs	r2, r2, r1
 800dcd0:	4630      	mov	r0, r6
 800dcd2:	f7fb fb5d 	bl	8009390 <ucdr_init_buffer>
 800dcd6:	4630      	mov	r0, r6
 800dcd8:	4910      	ldr	r1, [pc, #64]	@ (800dd1c <on_full_output_buffer_fragmented+0x114>)
 800dcda:	4622      	mov	r2, r4
 800dcdc:	f7fb fb2c 	bl	8009338 <ucdr_set_on_full_buffer_callback>
 800dce0:	2000      	movs	r0, #0
 800dce2:	b00a      	add	sp, #40	@ 0x28
 800dce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dce8:	b292      	uxth	r2, r2
 800dcea:	2302      	movs	r3, #2
 800dcec:	210d      	movs	r1, #13
 800dcee:	a802      	add	r0, sp, #8
 800dcf0:	f7ff ff14 	bl	800db1c <uxr_buffer_submessage_header>
 800dcf4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800dcf8:	8928      	ldrh	r0, [r5, #8]
 800dcfa:	f103 0208 	add.w	r2, r3, #8
 800dcfe:	89eb      	ldrh	r3, [r5, #14]
 800dd00:	fbb3 f1f0 	udiv	r1, r3, r0
 800dd04:	fb00 3311 	mls	r3, r0, r1, r3
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	6869      	ldr	r1, [r5, #4]
 800dd0c:	fbb1 f1f0 	udiv	r1, r1, r0
 800dd10:	fb01 f303 	mul.w	r3, r1, r3
 800dd14:	6829      	ldr	r1, [r5, #0]
 800dd16:	50ca      	str	r2, [r1, r3]
 800dd18:	e7d2      	b.n	800dcc0 <on_full_output_buffer_fragmented+0xb8>
 800dd1a:	bf00      	nop
 800dd1c:	0800dc09 	.word	0x0800dc09

0800dd20 <uxr_prepare_output_stream>:
 800dd20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd22:	b087      	sub	sp, #28
 800dd24:	2707      	movs	r7, #7
 800dd26:	9202      	str	r2, [sp, #8]
 800dd28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dd2a:	2500      	movs	r5, #0
 800dd2c:	3204      	adds	r2, #4
 800dd2e:	e9cd 7500 	strd	r7, r5, [sp]
 800dd32:	461c      	mov	r4, r3
 800dd34:	4606      	mov	r6, r0
 800dd36:	f7ff fc6d 	bl	800d614 <uxr_prepare_stream_to_write_submessage>
 800dd3a:	f080 0201 	eor.w	r2, r0, #1
 800dd3e:	b2d2      	uxtb	r2, r2
 800dd40:	75a2      	strb	r2, [r4, #22]
 800dd42:	b112      	cbz	r2, 800dd4a <uxr_prepare_output_stream+0x2a>
 800dd44:	4628      	mov	r0, r5
 800dd46:	b007      	add	sp, #28
 800dd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd4a:	aa05      	add	r2, sp, #20
 800dd4c:	9902      	ldr	r1, [sp, #8]
 800dd4e:	4630      	mov	r0, r6
 800dd50:	f7ff fd9a 	bl	800d888 <uxr_init_base_object_request>
 800dd54:	a905      	add	r1, sp, #20
 800dd56:	4605      	mov	r5, r0
 800dd58:	4620      	mov	r0, r4
 800dd5a:	f001 f865 	bl	800ee28 <uxr_serialize_WRITE_DATA_Payload_Data>
 800dd5e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800dd62:	69a6      	ldr	r6, [r4, #24]
 800dd64:	69e7      	ldr	r7, [r4, #28]
 800dd66:	1a52      	subs	r2, r2, r1
 800dd68:	4620      	mov	r0, r4
 800dd6a:	f7fb fb11 	bl	8009390 <ucdr_init_buffer>
 800dd6e:	4620      	mov	r0, r4
 800dd70:	463a      	mov	r2, r7
 800dd72:	4631      	mov	r1, r6
 800dd74:	f7fb fae0 	bl	8009338 <ucdr_set_on_full_buffer_callback>
 800dd78:	4628      	mov	r0, r5
 800dd7a:	b007      	add	sp, #28
 800dd7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd7e:	bf00      	nop

0800dd80 <uxr_prepare_output_stream_fragmented>:
 800dd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd84:	b093      	sub	sp, #76	@ 0x4c
 800dd86:	4605      	mov	r5, r0
 800dd88:	9107      	str	r1, [sp, #28]
 800dd8a:	3008      	adds	r0, #8
 800dd8c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800dd90:	9303      	str	r3, [sp, #12]
 800dd92:	9206      	str	r2, [sp, #24]
 800dd94:	f7ff fe8e 	bl	800dab4 <uxr_get_output_reliable_stream>
 800dd98:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	f000 8095 	beq.w	800decc <uxr_prepare_output_stream_fragmented+0x14c>
 800dda2:	4604      	mov	r4, r0
 800dda4:	2800      	cmp	r0, #0
 800dda6:	f000 8091 	beq.w	800decc <uxr_prepare_output_stream_fragmented+0x14c>
 800ddaa:	f007 fd6b 	bl	8015884 <get_available_free_slots>
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	f000 8087 	beq.w	800dec2 <uxr_prepare_output_stream_fragmented+0x142>
 800ddb4:	8922      	ldrh	r2, [r4, #8]
 800ddb6:	89e7      	ldrh	r7, [r4, #14]
 800ddb8:	fbb7 f3f2 	udiv	r3, r7, r2
 800ddbc:	fb02 7313 	mls	r3, r2, r3, r7
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	6861      	ldr	r1, [r4, #4]
 800ddc4:	fbb1 f1f2 	udiv	r1, r1, r2
 800ddc8:	6822      	ldr	r2, [r4, #0]
 800ddca:	9105      	str	r1, [sp, #20]
 800ddcc:	fb01 f303 	mul.w	r3, r1, r3
 800ddd0:	3304      	adds	r3, #4
 800ddd2:	eb02 0903 	add.w	r9, r2, r3
 800ddd6:	7b23      	ldrb	r3, [r4, #12]
 800ddd8:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800dddc:	4543      	cmp	r3, r8
 800ddde:	f1a1 0b04 	sub.w	fp, r1, #4
 800dde2:	d37f      	bcc.n	800dee4 <uxr_prepare_output_stream_fragmented+0x164>
 800dde4:	f1ab 0a04 	sub.w	sl, fp, #4
 800dde8:	ebaa 0a03 	sub.w	sl, sl, r3
 800ddec:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ddee:	f8cd 8000 	str.w	r8, [sp]
 800ddf2:	fa1f f38a 	uxth.w	r3, sl
 800ddf6:	9304      	str	r3, [sp, #16]
 800ddf8:	465a      	mov	r2, fp
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	4649      	mov	r1, r9
 800ddfe:	a80a      	add	r0, sp, #40	@ 0x28
 800de00:	f7fb fab4 	bl	800936c <ucdr_init_buffer_origin_offset>
 800de04:	f106 0a08 	add.w	sl, r6, #8
 800de08:	45da      	cmp	sl, fp
 800de0a:	bf2c      	ite	cs
 800de0c:	2300      	movcs	r3, #0
 800de0e:	2301      	movcc	r3, #1
 800de10:	9a04      	ldr	r2, [sp, #16]
 800de12:	005b      	lsls	r3, r3, #1
 800de14:	210d      	movs	r1, #13
 800de16:	a80a      	add	r0, sp, #40	@ 0x28
 800de18:	f7ff fe80 	bl	800db1c <uxr_buffer_submessage_header>
 800de1c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800de20:	fbb7 f2fc 	udiv	r2, r7, ip
 800de24:	fb0c 7212 	mls	r2, ip, r2, r7
 800de28:	b292      	uxth	r2, r2
 800de2a:	6863      	ldr	r3, [r4, #4]
 800de2c:	fbb3 f3fc 	udiv	r3, r3, ip
 800de30:	fb02 f303 	mul.w	r3, r2, r3
 800de34:	6822      	ldr	r2, [r4, #0]
 800de36:	2101      	movs	r1, #1
 800de38:	f842 b003 	str.w	fp, [r2, r3]
 800de3c:	4638      	mov	r0, r7
 800de3e:	f007 fe75 	bl	8015b2c <uxr_seq_num_add>
 800de42:	9b05      	ldr	r3, [sp, #20]
 800de44:	9e03      	ldr	r6, [sp, #12]
 800de46:	f1a3 0208 	sub.w	r2, r3, #8
 800de4a:	f108 0104 	add.w	r1, r8, #4
 800de4e:	4607      	mov	r7, r0
 800de50:	eba2 0208 	sub.w	r2, r2, r8
 800de54:	4449      	add	r1, r9
 800de56:	4630      	mov	r0, r6
 800de58:	f7fb fa9a 	bl	8009390 <ucdr_init_buffer>
 800de5c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800de5e:	81e7      	strh	r7, [r4, #14]
 800de60:	1d1a      	adds	r2, r3, #4
 800de62:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800de66:	bf28      	it	cs
 800de68:	2200      	movcs	r2, #0
 800de6a:	2300      	movs	r3, #0
 800de6c:	b292      	uxth	r2, r2
 800de6e:	2107      	movs	r1, #7
 800de70:	4630      	mov	r0, r6
 800de72:	f7ff fe53 	bl	800db1c <uxr_buffer_submessage_header>
 800de76:	9906      	ldr	r1, [sp, #24]
 800de78:	aa09      	add	r2, sp, #36	@ 0x24
 800de7a:	4628      	mov	r0, r5
 800de7c:	f7ff fd04 	bl	800d888 <uxr_init_base_object_request>
 800de80:	4604      	mov	r4, r0
 800de82:	b320      	cbz	r0, 800dece <uxr_prepare_output_stream_fragmented+0x14e>
 800de84:	9e03      	ldr	r6, [sp, #12]
 800de86:	a909      	add	r1, sp, #36	@ 0x24
 800de88:	4630      	mov	r0, r6
 800de8a:	f000 ffcd 	bl	800ee28 <uxr_serialize_WRITE_DATA_Payload_Data>
 800de8e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800de92:	4630      	mov	r0, r6
 800de94:	1a52      	subs	r2, r2, r1
 800de96:	f7fb fa7b 	bl	8009390 <ucdr_init_buffer>
 800de9a:	9b07      	ldr	r3, [sp, #28]
 800de9c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800dea0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dea2:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800dea6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800dea8:	491a      	ldr	r1, [pc, #104]	@ (800df14 <uxr_prepare_output_stream_fragmented+0x194>)
 800deaa:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800deae:	4630      	mov	r0, r6
 800deb0:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800deb4:	462a      	mov	r2, r5
 800deb6:	f7fb fa3f 	bl	8009338 <ucdr_set_on_full_buffer_callback>
 800deba:	4620      	mov	r0, r4
 800debc:	b013      	add	sp, #76	@ 0x4c
 800debe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dec2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800dec4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dec6:	4628      	mov	r0, r5
 800dec8:	4798      	blx	r3
 800deca:	b920      	cbnz	r0, 800ded6 <uxr_prepare_output_stream_fragmented+0x156>
 800decc:	2400      	movs	r4, #0
 800dece:	4620      	mov	r0, r4
 800ded0:	b013      	add	sp, #76	@ 0x4c
 800ded2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded6:	4620      	mov	r0, r4
 800ded8:	f007 fcd4 	bl	8015884 <get_available_free_slots>
 800dedc:	2800      	cmp	r0, #0
 800dede:	f47f af69 	bne.w	800ddb4 <uxr_prepare_output_stream_fragmented+0x34>
 800dee2:	e7f3      	b.n	800decc <uxr_prepare_output_stream_fragmented+0x14c>
 800dee4:	4638      	mov	r0, r7
 800dee6:	2101      	movs	r1, #1
 800dee8:	f007 fe20 	bl	8015b2c <uxr_seq_num_add>
 800deec:	8921      	ldrh	r1, [r4, #8]
 800deee:	fbb0 f2f1 	udiv	r2, r0, r1
 800def2:	fb01 0212 	mls	r2, r1, r2, r0
 800def6:	b292      	uxth	r2, r2
 800def8:	6863      	ldr	r3, [r4, #4]
 800defa:	fbb3 f3f1 	udiv	r3, r3, r1
 800defe:	fb02 f303 	mul.w	r3, r2, r3
 800df02:	6822      	ldr	r2, [r4, #0]
 800df04:	3304      	adds	r3, #4
 800df06:	eb02 0903 	add.w	r9, r2, r3
 800df0a:	4607      	mov	r7, r0
 800df0c:	7b23      	ldrb	r3, [r4, #12]
 800df0e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800df12:	e767      	b.n	800dde4 <uxr_prepare_output_stream_fragmented+0x64>
 800df14:	0800dc09 	.word	0x0800dc09

0800df18 <uxr_serialize_message_header>:
 800df18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df1c:	4617      	mov	r7, r2
 800df1e:	4604      	mov	r4, r0
 800df20:	461e      	mov	r6, r3
 800df22:	460d      	mov	r5, r1
 800df24:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800df28:	f7f9 ff72 	bl	8007e10 <ucdr_serialize_uint8_t>
 800df2c:	4639      	mov	r1, r7
 800df2e:	4620      	mov	r0, r4
 800df30:	f7f9 ff6e 	bl	8007e10 <ucdr_serialize_uint8_t>
 800df34:	4632      	mov	r2, r6
 800df36:	2101      	movs	r1, #1
 800df38:	4620      	mov	r0, r4
 800df3a:	f7fa f81f 	bl	8007f7c <ucdr_serialize_endian_uint16_t>
 800df3e:	062b      	lsls	r3, r5, #24
 800df40:	d501      	bpl.n	800df46 <uxr_serialize_message_header+0x2e>
 800df42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df46:	4641      	mov	r1, r8
 800df48:	4620      	mov	r0, r4
 800df4a:	2204      	movs	r2, #4
 800df4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df50:	f7fe b84a 	b.w	800bfe8 <ucdr_serialize_array_uint8_t>

0800df54 <uxr_deserialize_message_header>:
 800df54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df58:	4617      	mov	r7, r2
 800df5a:	4604      	mov	r4, r0
 800df5c:	461e      	mov	r6, r3
 800df5e:	460d      	mov	r5, r1
 800df60:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800df64:	f7f9 ff6a 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800df68:	4639      	mov	r1, r7
 800df6a:	4620      	mov	r0, r4
 800df6c:	f7f9 ff66 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800df70:	4632      	mov	r2, r6
 800df72:	2101      	movs	r1, #1
 800df74:	4620      	mov	r0, r4
 800df76:	f7fa f8f7 	bl	8008168 <ucdr_deserialize_endian_uint16_t>
 800df7a:	f995 3000 	ldrsb.w	r3, [r5]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	da01      	bge.n	800df86 <uxr_deserialize_message_header+0x32>
 800df82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df86:	4641      	mov	r1, r8
 800df88:	4620      	mov	r0, r4
 800df8a:	2204      	movs	r2, #4
 800df8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df90:	f7fe b88e 	b.w	800c0b0 <ucdr_deserialize_array_uint8_t>

0800df94 <uxr_serialize_submessage_header>:
 800df94:	b570      	push	{r4, r5, r6, lr}
 800df96:	4616      	mov	r6, r2
 800df98:	4604      	mov	r4, r0
 800df9a:	461d      	mov	r5, r3
 800df9c:	f7f9 ff38 	bl	8007e10 <ucdr_serialize_uint8_t>
 800dfa0:	4631      	mov	r1, r6
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f7f9 ff34 	bl	8007e10 <ucdr_serialize_uint8_t>
 800dfa8:	462a      	mov	r2, r5
 800dfaa:	4620      	mov	r0, r4
 800dfac:	2101      	movs	r1, #1
 800dfae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfb2:	f7f9 bfe3 	b.w	8007f7c <ucdr_serialize_endian_uint16_t>
 800dfb6:	bf00      	nop

0800dfb8 <uxr_deserialize_submessage_header>:
 800dfb8:	b570      	push	{r4, r5, r6, lr}
 800dfba:	4616      	mov	r6, r2
 800dfbc:	4604      	mov	r4, r0
 800dfbe:	461d      	mov	r5, r3
 800dfc0:	f7f9 ff3c 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800dfc4:	4631      	mov	r1, r6
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	f7f9 ff38 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800dfcc:	462a      	mov	r2, r5
 800dfce:	4620      	mov	r0, r4
 800dfd0:	2101      	movs	r1, #1
 800dfd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfd6:	f7fa b8c7 	b.w	8008168 <ucdr_deserialize_endian_uint16_t>
 800dfda:	bf00      	nop

0800dfdc <uxr_serialize_CLIENT_Representation>:
 800dfdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfe0:	2204      	movs	r2, #4
 800dfe2:	460e      	mov	r6, r1
 800dfe4:	4605      	mov	r5, r0
 800dfe6:	f7fd ffff 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800dfea:	2202      	movs	r2, #2
 800dfec:	1d31      	adds	r1, r6, #4
 800dfee:	4604      	mov	r4, r0
 800dff0:	4628      	mov	r0, r5
 800dff2:	f7fd fff9 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800dff6:	2202      	movs	r2, #2
 800dff8:	4004      	ands	r4, r0
 800dffa:	1db1      	adds	r1, r6, #6
 800dffc:	4628      	mov	r0, r5
 800dffe:	f7fd fff3 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800e002:	b2e4      	uxtb	r4, r4
 800e004:	2204      	movs	r2, #4
 800e006:	4004      	ands	r4, r0
 800e008:	f106 0108 	add.w	r1, r6, #8
 800e00c:	4628      	mov	r0, r5
 800e00e:	f7fd ffeb 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800e012:	7b31      	ldrb	r1, [r6, #12]
 800e014:	ea00 0804 	and.w	r8, r0, r4
 800e018:	4628      	mov	r0, r5
 800e01a:	f7f9 fef9 	bl	8007e10 <ucdr_serialize_uint8_t>
 800e01e:	7b71      	ldrb	r1, [r6, #13]
 800e020:	ea08 0800 	and.w	r8, r8, r0
 800e024:	4628      	mov	r0, r5
 800e026:	f7f9 fec5 	bl	8007db4 <ucdr_serialize_bool>
 800e02a:	7b73      	ldrb	r3, [r6, #13]
 800e02c:	ea08 0800 	and.w	r8, r8, r0
 800e030:	b93b      	cbnz	r3, 800e042 <uxr_serialize_CLIENT_Representation+0x66>
 800e032:	8bb1      	ldrh	r1, [r6, #28]
 800e034:	4628      	mov	r0, r5
 800e036:	f7f9 ff17 	bl	8007e68 <ucdr_serialize_uint16_t>
 800e03a:	ea08 0000 	and.w	r0, r8, r0
 800e03e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e042:	6931      	ldr	r1, [r6, #16]
 800e044:	4628      	mov	r0, r5
 800e046:	f7fa f8ff 	bl	8008248 <ucdr_serialize_uint32_t>
 800e04a:	6933      	ldr	r3, [r6, #16]
 800e04c:	b1e3      	cbz	r3, 800e088 <uxr_serialize_CLIENT_Representation+0xac>
 800e04e:	b1c0      	cbz	r0, 800e082 <uxr_serialize_CLIENT_Representation+0xa6>
 800e050:	4637      	mov	r7, r6
 800e052:	f04f 0900 	mov.w	r9, #0
 800e056:	e001      	b.n	800e05c <uxr_serialize_CLIENT_Representation+0x80>
 800e058:	3708      	adds	r7, #8
 800e05a:	b194      	cbz	r4, 800e082 <uxr_serialize_CLIENT_Representation+0xa6>
 800e05c:	6979      	ldr	r1, [r7, #20]
 800e05e:	4628      	mov	r0, r5
 800e060:	f006 fe28 	bl	8014cb4 <ucdr_serialize_string>
 800e064:	69b9      	ldr	r1, [r7, #24]
 800e066:	4604      	mov	r4, r0
 800e068:	4628      	mov	r0, r5
 800e06a:	f006 fe23 	bl	8014cb4 <ucdr_serialize_string>
 800e06e:	6933      	ldr	r3, [r6, #16]
 800e070:	f109 0901 	add.w	r9, r9, #1
 800e074:	4004      	ands	r4, r0
 800e076:	4599      	cmp	r9, r3
 800e078:	b2e4      	uxtb	r4, r4
 800e07a:	d3ed      	bcc.n	800e058 <uxr_serialize_CLIENT_Representation+0x7c>
 800e07c:	ea08 0804 	and.w	r8, r8, r4
 800e080:	e7d7      	b.n	800e032 <uxr_serialize_CLIENT_Representation+0x56>
 800e082:	f04f 0800 	mov.w	r8, #0
 800e086:	e7d4      	b.n	800e032 <uxr_serialize_CLIENT_Representation+0x56>
 800e088:	ea08 0800 	and.w	r8, r8, r0
 800e08c:	e7d1      	b.n	800e032 <uxr_serialize_CLIENT_Representation+0x56>
 800e08e:	bf00      	nop

0800e090 <uxr_deserialize_CLIENT_Representation>:
 800e090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e094:	2204      	movs	r2, #4
 800e096:	460c      	mov	r4, r1
 800e098:	4605      	mov	r5, r0
 800e09a:	f7fe f809 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800e09e:	2202      	movs	r2, #2
 800e0a0:	1d21      	adds	r1, r4, #4
 800e0a2:	4606      	mov	r6, r0
 800e0a4:	4628      	mov	r0, r5
 800e0a6:	f7fe f803 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800e0aa:	2202      	movs	r2, #2
 800e0ac:	4006      	ands	r6, r0
 800e0ae:	1da1      	adds	r1, r4, #6
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	f7fd fffd 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800e0b6:	b2f6      	uxtb	r6, r6
 800e0b8:	2204      	movs	r2, #4
 800e0ba:	4006      	ands	r6, r0
 800e0bc:	f104 0108 	add.w	r1, r4, #8
 800e0c0:	4628      	mov	r0, r5
 800e0c2:	f7fd fff5 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800e0c6:	f104 010c 	add.w	r1, r4, #12
 800e0ca:	ea00 0706 	and.w	r7, r0, r6
 800e0ce:	4628      	mov	r0, r5
 800e0d0:	f7f9 feb4 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800e0d4:	f104 010d 	add.w	r1, r4, #13
 800e0d8:	4007      	ands	r7, r0
 800e0da:	4628      	mov	r0, r5
 800e0dc:	f7f9 fe80 	bl	8007de0 <ucdr_deserialize_bool>
 800e0e0:	7b63      	ldrb	r3, [r4, #13]
 800e0e2:	4007      	ands	r7, r0
 800e0e4:	b93b      	cbnz	r3, 800e0f6 <uxr_deserialize_CLIENT_Representation+0x66>
 800e0e6:	f104 011c 	add.w	r1, r4, #28
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	f7f9 ffc0 	bl	8008070 <ucdr_deserialize_uint16_t>
 800e0f0:	4038      	ands	r0, r7
 800e0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0f6:	f104 0110 	add.w	r1, r4, #16
 800e0fa:	4628      	mov	r0, r5
 800e0fc:	f7fa f9ce 	bl	800849c <ucdr_deserialize_uint32_t>
 800e100:	6923      	ldr	r3, [r4, #16]
 800e102:	2b01      	cmp	r3, #1
 800e104:	d903      	bls.n	800e10e <uxr_deserialize_CLIENT_Representation+0x7e>
 800e106:	2301      	movs	r3, #1
 800e108:	75ab      	strb	r3, [r5, #22]
 800e10a:	2700      	movs	r7, #0
 800e10c:	e7eb      	b.n	800e0e6 <uxr_deserialize_CLIENT_Representation+0x56>
 800e10e:	b30b      	cbz	r3, 800e154 <uxr_deserialize_CLIENT_Representation+0xc4>
 800e110:	2800      	cmp	r0, #0
 800e112:	d0fa      	beq.n	800e10a <uxr_deserialize_CLIENT_Representation+0x7a>
 800e114:	46a0      	mov	r8, r4
 800e116:	f04f 0900 	mov.w	r9, #0
 800e11a:	e003      	b.n	800e124 <uxr_deserialize_CLIENT_Representation+0x94>
 800e11c:	f108 0808 	add.w	r8, r8, #8
 800e120:	2e00      	cmp	r6, #0
 800e122:	d0f2      	beq.n	800e10a <uxr_deserialize_CLIENT_Representation+0x7a>
 800e124:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e128:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e12c:	4628      	mov	r0, r5
 800e12e:	f006 fdcf 	bl	8014cd0 <ucdr_deserialize_string>
 800e132:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800e136:	4606      	mov	r6, r0
 800e138:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e13c:	4628      	mov	r0, r5
 800e13e:	f006 fdc7 	bl	8014cd0 <ucdr_deserialize_string>
 800e142:	6923      	ldr	r3, [r4, #16]
 800e144:	f109 0901 	add.w	r9, r9, #1
 800e148:	4006      	ands	r6, r0
 800e14a:	4599      	cmp	r9, r3
 800e14c:	b2f6      	uxtb	r6, r6
 800e14e:	d3e5      	bcc.n	800e11c <uxr_deserialize_CLIENT_Representation+0x8c>
 800e150:	4037      	ands	r7, r6
 800e152:	e7c8      	b.n	800e0e6 <uxr_deserialize_CLIENT_Representation+0x56>
 800e154:	4007      	ands	r7, r0
 800e156:	e7c6      	b.n	800e0e6 <uxr_deserialize_CLIENT_Representation+0x56>

0800e158 <uxr_serialize_AGENT_Representation>:
 800e158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e15c:	2204      	movs	r2, #4
 800e15e:	460f      	mov	r7, r1
 800e160:	4605      	mov	r5, r0
 800e162:	f7fd ff41 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800e166:	2202      	movs	r2, #2
 800e168:	4604      	mov	r4, r0
 800e16a:	1d39      	adds	r1, r7, #4
 800e16c:	4628      	mov	r0, r5
 800e16e:	f7fd ff3b 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800e172:	4020      	ands	r0, r4
 800e174:	2202      	movs	r2, #2
 800e176:	b2c4      	uxtb	r4, r0
 800e178:	1db9      	adds	r1, r7, #6
 800e17a:	4628      	mov	r0, r5
 800e17c:	f7fd ff34 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800e180:	7a39      	ldrb	r1, [r7, #8]
 800e182:	4004      	ands	r4, r0
 800e184:	4628      	mov	r0, r5
 800e186:	f7f9 fe15 	bl	8007db4 <ucdr_serialize_bool>
 800e18a:	7a3b      	ldrb	r3, [r7, #8]
 800e18c:	ea00 0804 	and.w	r8, r0, r4
 800e190:	b913      	cbnz	r3, 800e198 <uxr_serialize_AGENT_Representation+0x40>
 800e192:	4640      	mov	r0, r8
 800e194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e198:	68f9      	ldr	r1, [r7, #12]
 800e19a:	4628      	mov	r0, r5
 800e19c:	f7fa f854 	bl	8008248 <ucdr_serialize_uint32_t>
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	b303      	cbz	r3, 800e1e6 <uxr_serialize_AGENT_Representation+0x8e>
 800e1a4:	b1d0      	cbz	r0, 800e1dc <uxr_serialize_AGENT_Representation+0x84>
 800e1a6:	463e      	mov	r6, r7
 800e1a8:	f04f 0900 	mov.w	r9, #0
 800e1ac:	e001      	b.n	800e1b2 <uxr_serialize_AGENT_Representation+0x5a>
 800e1ae:	3608      	adds	r6, #8
 800e1b0:	b1a4      	cbz	r4, 800e1dc <uxr_serialize_AGENT_Representation+0x84>
 800e1b2:	6931      	ldr	r1, [r6, #16]
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	f006 fd7d 	bl	8014cb4 <ucdr_serialize_string>
 800e1ba:	6971      	ldr	r1, [r6, #20]
 800e1bc:	4604      	mov	r4, r0
 800e1be:	4628      	mov	r0, r5
 800e1c0:	f006 fd78 	bl	8014cb4 <ucdr_serialize_string>
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	f109 0901 	add.w	r9, r9, #1
 800e1ca:	4004      	ands	r4, r0
 800e1cc:	4599      	cmp	r9, r3
 800e1ce:	b2e4      	uxtb	r4, r4
 800e1d0:	d3ed      	bcc.n	800e1ae <uxr_serialize_AGENT_Representation+0x56>
 800e1d2:	ea08 0804 	and.w	r8, r8, r4
 800e1d6:	4640      	mov	r0, r8
 800e1d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1dc:	f04f 0800 	mov.w	r8, #0
 800e1e0:	4640      	mov	r0, r8
 800e1e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1e6:	ea08 0800 	and.w	r8, r8, r0
 800e1ea:	e7d2      	b.n	800e192 <uxr_serialize_AGENT_Representation+0x3a>

0800e1ec <uxr_serialize_DATAWRITER_Representation>:
 800e1ec:	b570      	push	{r4, r5, r6, lr}
 800e1ee:	460d      	mov	r5, r1
 800e1f0:	7809      	ldrb	r1, [r1, #0]
 800e1f2:	4606      	mov	r6, r0
 800e1f4:	f7f9 fe0c 	bl	8007e10 <ucdr_serialize_uint8_t>
 800e1f8:	4604      	mov	r4, r0
 800e1fa:	b130      	cbz	r0, 800e20a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e1fc:	782b      	ldrb	r3, [r5, #0]
 800e1fe:	2b02      	cmp	r3, #2
 800e200:	d00c      	beq.n	800e21c <uxr_serialize_DATAWRITER_Representation+0x30>
 800e202:	2b03      	cmp	r3, #3
 800e204:	d010      	beq.n	800e228 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800e206:	2b01      	cmp	r3, #1
 800e208:	d008      	beq.n	800e21c <uxr_serialize_DATAWRITER_Representation+0x30>
 800e20a:	2202      	movs	r2, #2
 800e20c:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800e210:	4630      	mov	r0, r6
 800e212:	f7fd fee9 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800e216:	4020      	ands	r0, r4
 800e218:	b2c0      	uxtb	r0, r0
 800e21a:	bd70      	pop	{r4, r5, r6, pc}
 800e21c:	6869      	ldr	r1, [r5, #4]
 800e21e:	4630      	mov	r0, r6
 800e220:	f006 fd48 	bl	8014cb4 <ucdr_serialize_string>
 800e224:	4604      	mov	r4, r0
 800e226:	e7f0      	b.n	800e20a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e228:	4629      	mov	r1, r5
 800e22a:	4630      	mov	r0, r6
 800e22c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800e230:	3104      	adds	r1, #4
 800e232:	f7fe f879 	bl	800c328 <ucdr_serialize_sequence_uint8_t>
 800e236:	4604      	mov	r4, r0
 800e238:	e7e7      	b.n	800e20a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e23a:	bf00      	nop

0800e23c <uxr_serialize_ObjectVariant.part.0>:
 800e23c:	b570      	push	{r4, r5, r6, lr}
 800e23e:	780b      	ldrb	r3, [r1, #0]
 800e240:	3b01      	subs	r3, #1
 800e242:	460c      	mov	r4, r1
 800e244:	4605      	mov	r5, r0
 800e246:	2b0d      	cmp	r3, #13
 800e248:	d816      	bhi.n	800e278 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800e24a:	e8df f003 	tbb	[pc, r3]
 800e24e:	0733      	.short	0x0733
 800e250:	07071717 	.word	0x07071717
 800e254:	0c150707 	.word	0x0c150707
 800e258:	4c510c0c 	.word	0x4c510c0c
 800e25c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e260:	3104      	adds	r1, #4
 800e262:	f7ff bfc3 	b.w	800e1ec <uxr_serialize_DATAWRITER_Representation>
 800e266:	7909      	ldrb	r1, [r1, #4]
 800e268:	f7f9 fdd2 	bl	8007e10 <ucdr_serialize_uint8_t>
 800e26c:	b300      	cbz	r0, 800e2b0 <uxr_serialize_ObjectVariant.part.0+0x74>
 800e26e:	7923      	ldrb	r3, [r4, #4]
 800e270:	2b01      	cmp	r3, #1
 800e272:	d042      	beq.n	800e2fa <uxr_serialize_ObjectVariant.part.0+0xbe>
 800e274:	2b02      	cmp	r3, #2
 800e276:	d040      	beq.n	800e2fa <uxr_serialize_ObjectVariant.part.0+0xbe>
 800e278:	2001      	movs	r0, #1
 800e27a:	bd70      	pop	{r4, r5, r6, pc}
 800e27c:	7909      	ldrb	r1, [r1, #4]
 800e27e:	f7f9 fdc7 	bl	8007e10 <ucdr_serialize_uint8_t>
 800e282:	4606      	mov	r6, r0
 800e284:	b158      	cbz	r0, 800e29e <uxr_serialize_ObjectVariant.part.0+0x62>
 800e286:	7923      	ldrb	r3, [r4, #4]
 800e288:	2b02      	cmp	r3, #2
 800e28a:	d03c      	beq.n	800e306 <uxr_serialize_ObjectVariant.part.0+0xca>
 800e28c:	2b03      	cmp	r3, #3
 800e28e:	d106      	bne.n	800e29e <uxr_serialize_ObjectVariant.part.0+0x62>
 800e290:	68a2      	ldr	r2, [r4, #8]
 800e292:	f104 010c 	add.w	r1, r4, #12
 800e296:	4628      	mov	r0, r5
 800e298:	f7fe f846 	bl	800c328 <ucdr_serialize_sequence_uint8_t>
 800e29c:	4606      	mov	r6, r0
 800e29e:	2202      	movs	r2, #2
 800e2a0:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800e2a4:	4628      	mov	r0, r5
 800e2a6:	f7fd fe9f 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800e2aa:	4030      	ands	r0, r6
 800e2ac:	b2c0      	uxtb	r0, r0
 800e2ae:	bd70      	pop	{r4, r5, r6, pc}
 800e2b0:	2000      	movs	r0, #0
 800e2b2:	bd70      	pop	{r4, r5, r6, pc}
 800e2b4:	7909      	ldrb	r1, [r1, #4]
 800e2b6:	f7f9 fdab 	bl	8007e10 <ucdr_serialize_uint8_t>
 800e2ba:	4606      	mov	r6, r0
 800e2bc:	b158      	cbz	r0, 800e2d6 <uxr_serialize_ObjectVariant.part.0+0x9a>
 800e2be:	7923      	ldrb	r3, [r4, #4]
 800e2c0:	2b02      	cmp	r3, #2
 800e2c2:	d003      	beq.n	800e2cc <uxr_serialize_ObjectVariant.part.0+0x90>
 800e2c4:	2b03      	cmp	r3, #3
 800e2c6:	d024      	beq.n	800e312 <uxr_serialize_ObjectVariant.part.0+0xd6>
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d104      	bne.n	800e2d6 <uxr_serialize_ObjectVariant.part.0+0x9a>
 800e2cc:	68a1      	ldr	r1, [r4, #8]
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	f006 fcf0 	bl	8014cb4 <ucdr_serialize_string>
 800e2d4:	4606      	mov	r6, r0
 800e2d6:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800e2da:	4628      	mov	r0, r5
 800e2dc:	f7fa fac0 	bl	8008860 <ucdr_serialize_int16_t>
 800e2e0:	4030      	ands	r0, r6
 800e2e2:	b2c0      	uxtb	r0, r0
 800e2e4:	bd70      	pop	{r4, r5, r6, pc}
 800e2e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e2ea:	3104      	adds	r1, #4
 800e2ec:	f7ff be76 	b.w	800dfdc <uxr_serialize_CLIENT_Representation>
 800e2f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e2f4:	3104      	adds	r1, #4
 800e2f6:	f7ff bf2f 	b.w	800e158 <uxr_serialize_AGENT_Representation>
 800e2fa:	68a1      	ldr	r1, [r4, #8]
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e302:	f006 bcd7 	b.w	8014cb4 <ucdr_serialize_string>
 800e306:	68a1      	ldr	r1, [r4, #8]
 800e308:	4628      	mov	r0, r5
 800e30a:	f006 fcd3 	bl	8014cb4 <ucdr_serialize_string>
 800e30e:	4606      	mov	r6, r0
 800e310:	e7c5      	b.n	800e29e <uxr_serialize_ObjectVariant.part.0+0x62>
 800e312:	68a2      	ldr	r2, [r4, #8]
 800e314:	f104 010c 	add.w	r1, r4, #12
 800e318:	4628      	mov	r0, r5
 800e31a:	f7fe f805 	bl	800c328 <ucdr_serialize_sequence_uint8_t>
 800e31e:	4606      	mov	r6, r0
 800e320:	e7d9      	b.n	800e2d6 <uxr_serialize_ObjectVariant.part.0+0x9a>
 800e322:	bf00      	nop

0800e324 <uxr_deserialize_DATAWRITER_Representation>:
 800e324:	b570      	push	{r4, r5, r6, lr}
 800e326:	4606      	mov	r6, r0
 800e328:	460d      	mov	r5, r1
 800e32a:	f7f9 fd87 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800e32e:	4604      	mov	r4, r0
 800e330:	b130      	cbz	r0, 800e340 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e332:	782b      	ldrb	r3, [r5, #0]
 800e334:	2b02      	cmp	r3, #2
 800e336:	d00c      	beq.n	800e352 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e338:	2b03      	cmp	r3, #3
 800e33a:	d012      	beq.n	800e362 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d008      	beq.n	800e352 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e340:	2202      	movs	r2, #2
 800e342:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800e346:	4630      	mov	r0, r6
 800e348:	f7fd feb2 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800e34c:	4020      	ands	r0, r4
 800e34e:	b2c0      	uxtb	r0, r0
 800e350:	bd70      	pop	{r4, r5, r6, pc}
 800e352:	6869      	ldr	r1, [r5, #4]
 800e354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e358:	4630      	mov	r0, r6
 800e35a:	f006 fcb9 	bl	8014cd0 <ucdr_deserialize_string>
 800e35e:	4604      	mov	r4, r0
 800e360:	e7ee      	b.n	800e340 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e362:	1d2b      	adds	r3, r5, #4
 800e364:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e368:	f105 0108 	add.w	r1, r5, #8
 800e36c:	4630      	mov	r0, r6
 800e36e:	f7fd ffed 	bl	800c34c <ucdr_deserialize_sequence_uint8_t>
 800e372:	4604      	mov	r4, r0
 800e374:	e7e4      	b.n	800e340 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e376:	bf00      	nop

0800e378 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800e378:	b570      	push	{r4, r5, r6, lr}
 800e37a:	460d      	mov	r5, r1
 800e37c:	7809      	ldrb	r1, [r1, #0]
 800e37e:	4606      	mov	r6, r0
 800e380:	f7f9 fd18 	bl	8007db4 <ucdr_serialize_bool>
 800e384:	782b      	ldrb	r3, [r5, #0]
 800e386:	4604      	mov	r4, r0
 800e388:	b94b      	cbnz	r3, 800e39e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800e38a:	7a29      	ldrb	r1, [r5, #8]
 800e38c:	4630      	mov	r0, r6
 800e38e:	f7f9 fd11 	bl	8007db4 <ucdr_serialize_bool>
 800e392:	7a2b      	ldrb	r3, [r5, #8]
 800e394:	4004      	ands	r4, r0
 800e396:	b2e4      	uxtb	r4, r4
 800e398:	b943      	cbnz	r3, 800e3ac <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800e39a:	4620      	mov	r0, r4
 800e39c:	bd70      	pop	{r4, r5, r6, pc}
 800e39e:	6869      	ldr	r1, [r5, #4]
 800e3a0:	4630      	mov	r0, r6
 800e3a2:	f006 fc87 	bl	8014cb4 <ucdr_serialize_string>
 800e3a6:	4004      	ands	r4, r0
 800e3a8:	b2e4      	uxtb	r4, r4
 800e3aa:	e7ee      	b.n	800e38a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800e3ac:	68e9      	ldr	r1, [r5, #12]
 800e3ae:	4630      	mov	r0, r6
 800e3b0:	f006 fc80 	bl	8014cb4 <ucdr_serialize_string>
 800e3b4:	4004      	ands	r4, r0
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	bd70      	pop	{r4, r5, r6, pc}
 800e3ba:	bf00      	nop

0800e3bc <uxr_serialize_OBJK_Topic_Binary>:
 800e3bc:	b570      	push	{r4, r5, r6, lr}
 800e3be:	460d      	mov	r5, r1
 800e3c0:	6809      	ldr	r1, [r1, #0]
 800e3c2:	4606      	mov	r6, r0
 800e3c4:	f006 fc76 	bl	8014cb4 <ucdr_serialize_string>
 800e3c8:	7929      	ldrb	r1, [r5, #4]
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	f7f9 fcf1 	bl	8007db4 <ucdr_serialize_bool>
 800e3d2:	792b      	ldrb	r3, [r5, #4]
 800e3d4:	4004      	ands	r4, r0
 800e3d6:	b2e4      	uxtb	r4, r4
 800e3d8:	b943      	cbnz	r3, 800e3ec <uxr_serialize_OBJK_Topic_Binary+0x30>
 800e3da:	7b29      	ldrb	r1, [r5, #12]
 800e3dc:	4630      	mov	r0, r6
 800e3de:	f7f9 fce9 	bl	8007db4 <ucdr_serialize_bool>
 800e3e2:	7b2b      	ldrb	r3, [r5, #12]
 800e3e4:	4004      	ands	r4, r0
 800e3e6:	b93b      	cbnz	r3, 800e3f8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	bd70      	pop	{r4, r5, r6, pc}
 800e3ec:	68a9      	ldr	r1, [r5, #8]
 800e3ee:	4630      	mov	r0, r6
 800e3f0:	f006 fc60 	bl	8014cb4 <ucdr_serialize_string>
 800e3f4:	4004      	ands	r4, r0
 800e3f6:	e7f0      	b.n	800e3da <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800e3f8:	6929      	ldr	r1, [r5, #16]
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	f006 fc5a 	bl	8014cb4 <ucdr_serialize_string>
 800e400:	4004      	ands	r4, r0
 800e402:	b2e4      	uxtb	r4, r4
 800e404:	4620      	mov	r0, r4
 800e406:	bd70      	pop	{r4, r5, r6, pc}

0800e408 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800e408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e40c:	460c      	mov	r4, r1
 800e40e:	7809      	ldrb	r1, [r1, #0]
 800e410:	4606      	mov	r6, r0
 800e412:	f7f9 fccf 	bl	8007db4 <ucdr_serialize_bool>
 800e416:	7823      	ldrb	r3, [r4, #0]
 800e418:	4605      	mov	r5, r0
 800e41a:	b96b      	cbnz	r3, 800e438 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800e41c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800e420:	4630      	mov	r0, r6
 800e422:	f7f9 fcc7 	bl	8007db4 <ucdr_serialize_bool>
 800e426:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e42a:	4005      	ands	r5, r0
 800e42c:	b2ed      	uxtb	r5, r5
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d16a      	bne.n	800e508 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 800e432:	4628      	mov	r0, r5
 800e434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e438:	6861      	ldr	r1, [r4, #4]
 800e43a:	4630      	mov	r0, r6
 800e43c:	f7f9 ff04 	bl	8008248 <ucdr_serialize_uint32_t>
 800e440:	6863      	ldr	r3, [r4, #4]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d06c      	beq.n	800e520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 800e446:	2800      	cmp	r0, #0
 800e448:	d068      	beq.n	800e51c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800e44a:	68a1      	ldr	r1, [r4, #8]
 800e44c:	4630      	mov	r0, r6
 800e44e:	f006 fc31 	bl	8014cb4 <ucdr_serialize_string>
 800e452:	6862      	ldr	r2, [r4, #4]
 800e454:	2a01      	cmp	r2, #1
 800e456:	d953      	bls.n	800e500 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e458:	2800      	cmp	r0, #0
 800e45a:	d05f      	beq.n	800e51c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800e45c:	68e1      	ldr	r1, [r4, #12]
 800e45e:	4630      	mov	r0, r6
 800e460:	f006 fc28 	bl	8014cb4 <ucdr_serialize_string>
 800e464:	6862      	ldr	r2, [r4, #4]
 800e466:	2a02      	cmp	r2, #2
 800e468:	d94a      	bls.n	800e500 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e46a:	2800      	cmp	r0, #0
 800e46c:	d056      	beq.n	800e51c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800e46e:	6921      	ldr	r1, [r4, #16]
 800e470:	4630      	mov	r0, r6
 800e472:	f006 fc1f 	bl	8014cb4 <ucdr_serialize_string>
 800e476:	6862      	ldr	r2, [r4, #4]
 800e478:	2a03      	cmp	r2, #3
 800e47a:	d941      	bls.n	800e500 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e47c:	2800      	cmp	r0, #0
 800e47e:	d04d      	beq.n	800e51c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800e480:	6961      	ldr	r1, [r4, #20]
 800e482:	4630      	mov	r0, r6
 800e484:	f006 fc16 	bl	8014cb4 <ucdr_serialize_string>
 800e488:	6862      	ldr	r2, [r4, #4]
 800e48a:	2a04      	cmp	r2, #4
 800e48c:	d938      	bls.n	800e500 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e48e:	2800      	cmp	r0, #0
 800e490:	d044      	beq.n	800e51c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800e492:	69a1      	ldr	r1, [r4, #24]
 800e494:	4630      	mov	r0, r6
 800e496:	f006 fc0d 	bl	8014cb4 <ucdr_serialize_string>
 800e49a:	6862      	ldr	r2, [r4, #4]
 800e49c:	2a05      	cmp	r2, #5
 800e49e:	d92f      	bls.n	800e500 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	d03b      	beq.n	800e51c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800e4a4:	69e1      	ldr	r1, [r4, #28]
 800e4a6:	4630      	mov	r0, r6
 800e4a8:	f006 fc04 	bl	8014cb4 <ucdr_serialize_string>
 800e4ac:	6862      	ldr	r2, [r4, #4]
 800e4ae:	2a06      	cmp	r2, #6
 800e4b0:	d926      	bls.n	800e500 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e4b2:	b398      	cbz	r0, 800e51c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800e4b4:	6a21      	ldr	r1, [r4, #32]
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	f006 fbfc 	bl	8014cb4 <ucdr_serialize_string>
 800e4bc:	6862      	ldr	r2, [r4, #4]
 800e4be:	2a07      	cmp	r2, #7
 800e4c0:	d91e      	bls.n	800e500 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e4c2:	b358      	cbz	r0, 800e51c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800e4c4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e4c6:	4630      	mov	r0, r6
 800e4c8:	f006 fbf4 	bl	8014cb4 <ucdr_serialize_string>
 800e4cc:	6862      	ldr	r2, [r4, #4]
 800e4ce:	2a08      	cmp	r2, #8
 800e4d0:	d916      	bls.n	800e500 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e4d2:	b318      	cbz	r0, 800e51c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800e4d4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800e4d6:	4630      	mov	r0, r6
 800e4d8:	f006 fbec 	bl	8014cb4 <ucdr_serialize_string>
 800e4dc:	6862      	ldr	r2, [r4, #4]
 800e4de:	2a09      	cmp	r2, #9
 800e4e0:	d90e      	bls.n	800e500 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e4e2:	b1d8      	cbz	r0, 800e51c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800e4e4:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 800e4e8:	2709      	movs	r7, #9
 800e4ea:	e000      	b.n	800e4ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800e4ec:	b1b0      	cbz	r0, 800e51c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800e4ee:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800e4f2:	4630      	mov	r0, r6
 800e4f4:	f006 fbde 	bl	8014cb4 <ucdr_serialize_string>
 800e4f8:	6862      	ldr	r2, [r4, #4]
 800e4fa:	3701      	adds	r7, #1
 800e4fc:	4297      	cmp	r7, r2
 800e4fe:	d3f5      	bcc.n	800e4ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800e500:	ea05 0300 	and.w	r3, r5, r0
 800e504:	b2dd      	uxtb	r5, r3
 800e506:	e789      	b.n	800e41c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800e508:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e50a:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800e50e:	4630      	mov	r0, r6
 800e510:	f7fd ff0a 	bl	800c328 <ucdr_serialize_sequence_uint8_t>
 800e514:	4005      	ands	r5, r0
 800e516:	4628      	mov	r0, r5
 800e518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e51c:	2500      	movs	r5, #0
 800e51e:	e77d      	b.n	800e41c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800e520:	4028      	ands	r0, r5
 800e522:	b2c5      	uxtb	r5, r0
 800e524:	e77a      	b.n	800e41c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800e526:	bf00      	nop

0800e528 <uxr_serialize_OBJK_Publisher_Binary>:
 800e528:	b570      	push	{r4, r5, r6, lr}
 800e52a:	460d      	mov	r5, r1
 800e52c:	7809      	ldrb	r1, [r1, #0]
 800e52e:	4606      	mov	r6, r0
 800e530:	f7f9 fc40 	bl	8007db4 <ucdr_serialize_bool>
 800e534:	782b      	ldrb	r3, [r5, #0]
 800e536:	4604      	mov	r4, r0
 800e538:	b94b      	cbnz	r3, 800e54e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800e53a:	7a29      	ldrb	r1, [r5, #8]
 800e53c:	4630      	mov	r0, r6
 800e53e:	f7f9 fc39 	bl	8007db4 <ucdr_serialize_bool>
 800e542:	7a2b      	ldrb	r3, [r5, #8]
 800e544:	4004      	ands	r4, r0
 800e546:	b2e4      	uxtb	r4, r4
 800e548:	b943      	cbnz	r3, 800e55c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800e54a:	4620      	mov	r0, r4
 800e54c:	bd70      	pop	{r4, r5, r6, pc}
 800e54e:	6869      	ldr	r1, [r5, #4]
 800e550:	4630      	mov	r0, r6
 800e552:	f006 fbaf 	bl	8014cb4 <ucdr_serialize_string>
 800e556:	4004      	ands	r4, r0
 800e558:	b2e4      	uxtb	r4, r4
 800e55a:	e7ee      	b.n	800e53a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800e55c:	f105 010c 	add.w	r1, r5, #12
 800e560:	4630      	mov	r0, r6
 800e562:	f7ff ff51 	bl	800e408 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800e566:	4004      	ands	r4, r0
 800e568:	4620      	mov	r0, r4
 800e56a:	bd70      	pop	{r4, r5, r6, pc}

0800e56c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800e56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e570:	460c      	mov	r4, r1
 800e572:	7809      	ldrb	r1, [r1, #0]
 800e574:	4606      	mov	r6, r0
 800e576:	f7f9 fc1d 	bl	8007db4 <ucdr_serialize_bool>
 800e57a:	7823      	ldrb	r3, [r4, #0]
 800e57c:	4605      	mov	r5, r0
 800e57e:	b96b      	cbnz	r3, 800e59c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800e580:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800e584:	4630      	mov	r0, r6
 800e586:	f7f9 fc15 	bl	8007db4 <ucdr_serialize_bool>
 800e58a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e58e:	4005      	ands	r5, r0
 800e590:	b2ed      	uxtb	r5, r5
 800e592:	2b00      	cmp	r3, #0
 800e594:	d16a      	bne.n	800e66c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x100>
 800e596:	4628      	mov	r0, r5
 800e598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e59c:	6861      	ldr	r1, [r4, #4]
 800e59e:	4630      	mov	r0, r6
 800e5a0:	f7f9 fe52 	bl	8008248 <ucdr_serialize_uint32_t>
 800e5a4:	6863      	ldr	r3, [r4, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d06c      	beq.n	800e684 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x118>
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	d068      	beq.n	800e680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800e5ae:	68a1      	ldr	r1, [r4, #8]
 800e5b0:	4630      	mov	r0, r6
 800e5b2:	f006 fb7f 	bl	8014cb4 <ucdr_serialize_string>
 800e5b6:	6862      	ldr	r2, [r4, #4]
 800e5b8:	2a01      	cmp	r2, #1
 800e5ba:	d953      	bls.n	800e664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	d05f      	beq.n	800e680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800e5c0:	68e1      	ldr	r1, [r4, #12]
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	f006 fb76 	bl	8014cb4 <ucdr_serialize_string>
 800e5c8:	6862      	ldr	r2, [r4, #4]
 800e5ca:	2a02      	cmp	r2, #2
 800e5cc:	d94a      	bls.n	800e664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	d056      	beq.n	800e680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800e5d2:	6921      	ldr	r1, [r4, #16]
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	f006 fb6d 	bl	8014cb4 <ucdr_serialize_string>
 800e5da:	6862      	ldr	r2, [r4, #4]
 800e5dc:	2a03      	cmp	r2, #3
 800e5de:	d941      	bls.n	800e664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	d04d      	beq.n	800e680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800e5e4:	6961      	ldr	r1, [r4, #20]
 800e5e6:	4630      	mov	r0, r6
 800e5e8:	f006 fb64 	bl	8014cb4 <ucdr_serialize_string>
 800e5ec:	6862      	ldr	r2, [r4, #4]
 800e5ee:	2a04      	cmp	r2, #4
 800e5f0:	d938      	bls.n	800e664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	d044      	beq.n	800e680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800e5f6:	69a1      	ldr	r1, [r4, #24]
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	f006 fb5b 	bl	8014cb4 <ucdr_serialize_string>
 800e5fe:	6862      	ldr	r2, [r4, #4]
 800e600:	2a05      	cmp	r2, #5
 800e602:	d92f      	bls.n	800e664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e604:	2800      	cmp	r0, #0
 800e606:	d03b      	beq.n	800e680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800e608:	69e1      	ldr	r1, [r4, #28]
 800e60a:	4630      	mov	r0, r6
 800e60c:	f006 fb52 	bl	8014cb4 <ucdr_serialize_string>
 800e610:	6862      	ldr	r2, [r4, #4]
 800e612:	2a06      	cmp	r2, #6
 800e614:	d926      	bls.n	800e664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e616:	b398      	cbz	r0, 800e680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800e618:	6a21      	ldr	r1, [r4, #32]
 800e61a:	4630      	mov	r0, r6
 800e61c:	f006 fb4a 	bl	8014cb4 <ucdr_serialize_string>
 800e620:	6862      	ldr	r2, [r4, #4]
 800e622:	2a07      	cmp	r2, #7
 800e624:	d91e      	bls.n	800e664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e626:	b358      	cbz	r0, 800e680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800e628:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e62a:	4630      	mov	r0, r6
 800e62c:	f006 fb42 	bl	8014cb4 <ucdr_serialize_string>
 800e630:	6862      	ldr	r2, [r4, #4]
 800e632:	2a08      	cmp	r2, #8
 800e634:	d916      	bls.n	800e664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e636:	b318      	cbz	r0, 800e680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800e638:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800e63a:	4630      	mov	r0, r6
 800e63c:	f006 fb3a 	bl	8014cb4 <ucdr_serialize_string>
 800e640:	6862      	ldr	r2, [r4, #4]
 800e642:	2a09      	cmp	r2, #9
 800e644:	d90e      	bls.n	800e664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e646:	b1d8      	cbz	r0, 800e680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800e648:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 800e64c:	2709      	movs	r7, #9
 800e64e:	e000      	b.n	800e652 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800e650:	b1b0      	cbz	r0, 800e680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800e652:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800e656:	4630      	mov	r0, r6
 800e658:	f006 fb2c 	bl	8014cb4 <ucdr_serialize_string>
 800e65c:	6862      	ldr	r2, [r4, #4]
 800e65e:	3701      	adds	r7, #1
 800e660:	4297      	cmp	r7, r2
 800e662:	d3f5      	bcc.n	800e650 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800e664:	ea05 0300 	and.w	r3, r5, r0
 800e668:	b2dd      	uxtb	r5, r3
 800e66a:	e789      	b.n	800e580 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800e66c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e66e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800e672:	4630      	mov	r0, r6
 800e674:	f7fd fe58 	bl	800c328 <ucdr_serialize_sequence_uint8_t>
 800e678:	4005      	ands	r5, r0
 800e67a:	4628      	mov	r0, r5
 800e67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e680:	2500      	movs	r5, #0
 800e682:	e77d      	b.n	800e580 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800e684:	4028      	ands	r0, r5
 800e686:	b2c5      	uxtb	r5, r0
 800e688:	e77a      	b.n	800e580 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800e68a:	bf00      	nop

0800e68c <uxr_serialize_OBJK_Subscriber_Binary>:
 800e68c:	b570      	push	{r4, r5, r6, lr}
 800e68e:	460d      	mov	r5, r1
 800e690:	7809      	ldrb	r1, [r1, #0]
 800e692:	4606      	mov	r6, r0
 800e694:	f7f9 fb8e 	bl	8007db4 <ucdr_serialize_bool>
 800e698:	782b      	ldrb	r3, [r5, #0]
 800e69a:	4604      	mov	r4, r0
 800e69c:	b94b      	cbnz	r3, 800e6b2 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800e69e:	7a29      	ldrb	r1, [r5, #8]
 800e6a0:	4630      	mov	r0, r6
 800e6a2:	f7f9 fb87 	bl	8007db4 <ucdr_serialize_bool>
 800e6a6:	7a2b      	ldrb	r3, [r5, #8]
 800e6a8:	4004      	ands	r4, r0
 800e6aa:	b2e4      	uxtb	r4, r4
 800e6ac:	b943      	cbnz	r3, 800e6c0 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800e6ae:	4620      	mov	r0, r4
 800e6b0:	bd70      	pop	{r4, r5, r6, pc}
 800e6b2:	6869      	ldr	r1, [r5, #4]
 800e6b4:	4630      	mov	r0, r6
 800e6b6:	f006 fafd 	bl	8014cb4 <ucdr_serialize_string>
 800e6ba:	4004      	ands	r4, r0
 800e6bc:	b2e4      	uxtb	r4, r4
 800e6be:	e7ee      	b.n	800e69e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800e6c0:	f105 010c 	add.w	r1, r5, #12
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	f7ff ff51 	bl	800e56c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800e6ca:	4004      	ands	r4, r0
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	bd70      	pop	{r4, r5, r6, pc}

0800e6d0 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800e6d0:	b570      	push	{r4, r5, r6, lr}
 800e6d2:	460d      	mov	r5, r1
 800e6d4:	8809      	ldrh	r1, [r1, #0]
 800e6d6:	4606      	mov	r6, r0
 800e6d8:	f7f9 fbc6 	bl	8007e68 <ucdr_serialize_uint16_t>
 800e6dc:	78a9      	ldrb	r1, [r5, #2]
 800e6de:	4604      	mov	r4, r0
 800e6e0:	4630      	mov	r0, r6
 800e6e2:	f7f9 fb67 	bl	8007db4 <ucdr_serialize_bool>
 800e6e6:	78ab      	ldrb	r3, [r5, #2]
 800e6e8:	4004      	ands	r4, r0
 800e6ea:	b2e4      	uxtb	r4, r4
 800e6ec:	b9b3      	cbnz	r3, 800e71c <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 800e6ee:	79a9      	ldrb	r1, [r5, #6]
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	f7f9 fb5f 	bl	8007db4 <ucdr_serialize_bool>
 800e6f6:	79ab      	ldrb	r3, [r5, #6]
 800e6f8:	4004      	ands	r4, r0
 800e6fa:	bb33      	cbnz	r3, 800e74a <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 800e6fc:	7b29      	ldrb	r1, [r5, #12]
 800e6fe:	4630      	mov	r0, r6
 800e700:	f7f9 fb58 	bl	8007db4 <ucdr_serialize_bool>
 800e704:	7b2b      	ldrb	r3, [r5, #12]
 800e706:	4004      	ands	r4, r0
 800e708:	b9c3      	cbnz	r3, 800e73c <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 800e70a:	7d29      	ldrb	r1, [r5, #20]
 800e70c:	4630      	mov	r0, r6
 800e70e:	f7f9 fb51 	bl	8007db4 <ucdr_serialize_bool>
 800e712:	7d2b      	ldrb	r3, [r5, #20]
 800e714:	4004      	ands	r4, r0
 800e716:	b93b      	cbnz	r3, 800e728 <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 800e718:	4620      	mov	r0, r4
 800e71a:	bd70      	pop	{r4, r5, r6, pc}
 800e71c:	88a9      	ldrh	r1, [r5, #4]
 800e71e:	4630      	mov	r0, r6
 800e720:	f7f9 fba2 	bl	8007e68 <ucdr_serialize_uint16_t>
 800e724:	4004      	ands	r4, r0
 800e726:	e7e2      	b.n	800e6ee <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 800e728:	69aa      	ldr	r2, [r5, #24]
 800e72a:	f105 011c 	add.w	r1, r5, #28
 800e72e:	4630      	mov	r0, r6
 800e730:	f7fd fdfa 	bl	800c328 <ucdr_serialize_sequence_uint8_t>
 800e734:	4004      	ands	r4, r0
 800e736:	b2e4      	uxtb	r4, r4
 800e738:	4620      	mov	r0, r4
 800e73a:	bd70      	pop	{r4, r5, r6, pc}
 800e73c:	6929      	ldr	r1, [r5, #16]
 800e73e:	4630      	mov	r0, r6
 800e740:	f7f9 fd82 	bl	8008248 <ucdr_serialize_uint32_t>
 800e744:	4004      	ands	r4, r0
 800e746:	b2e4      	uxtb	r4, r4
 800e748:	e7df      	b.n	800e70a <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 800e74a:	68a9      	ldr	r1, [r5, #8]
 800e74c:	4630      	mov	r0, r6
 800e74e:	f7f9 fd7b 	bl	8008248 <ucdr_serialize_uint32_t>
 800e752:	4004      	ands	r4, r0
 800e754:	b2e4      	uxtb	r4, r4
 800e756:	e7d1      	b.n	800e6fc <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

0800e758 <uxr_serialize_OBJK_DataReader_Binary>:
 800e758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75a:	2202      	movs	r2, #2
 800e75c:	460c      	mov	r4, r1
 800e75e:	4606      	mov	r6, r0
 800e760:	f7fd fc42 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800e764:	78a1      	ldrb	r1, [r4, #2]
 800e766:	4605      	mov	r5, r0
 800e768:	4630      	mov	r0, r6
 800e76a:	f7f9 fb23 	bl	8007db4 <ucdr_serialize_bool>
 800e76e:	78a3      	ldrb	r3, [r4, #2]
 800e770:	4005      	ands	r5, r0
 800e772:	b2ed      	uxtb	r5, r5
 800e774:	b90b      	cbnz	r3, 800e77a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800e776:	4628      	mov	r0, r5
 800e778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e77a:	f104 0108 	add.w	r1, r4, #8
 800e77e:	4630      	mov	r0, r6
 800e780:	f7ff ffa6 	bl	800e6d0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800e784:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e788:	4607      	mov	r7, r0
 800e78a:	4630      	mov	r0, r6
 800e78c:	f7f9 fb12 	bl	8007db4 <ucdr_serialize_bool>
 800e790:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e794:	4007      	ands	r7, r0
 800e796:	b2ff      	uxtb	r7, r7
 800e798:	b95b      	cbnz	r3, 800e7b2 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800e79a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800e79e:	4630      	mov	r0, r6
 800e7a0:	f7f9 fb08 	bl	8007db4 <ucdr_serialize_bool>
 800e7a4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800e7a8:	4007      	ands	r7, r0
 800e7aa:	b94b      	cbnz	r3, 800e7c0 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800e7ac:	403d      	ands	r5, r7
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7b2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	f7f9 ff8a 	bl	80086d0 <ucdr_serialize_uint64_t>
 800e7bc:	4007      	ands	r7, r0
 800e7be:	e7ec      	b.n	800e79a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800e7c0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800e7c2:	4630      	mov	r0, r6
 800e7c4:	f006 fa76 	bl	8014cb4 <ucdr_serialize_string>
 800e7c8:	4007      	ands	r7, r0
 800e7ca:	b2ff      	uxtb	r7, r7
 800e7cc:	e7ee      	b.n	800e7ac <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800e7ce:	bf00      	nop

0800e7d0 <uxr_serialize_OBJK_DataWriter_Binary>:
 800e7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d2:	2202      	movs	r2, #2
 800e7d4:	460d      	mov	r5, r1
 800e7d6:	4606      	mov	r6, r0
 800e7d8:	f7fd fc06 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800e7dc:	78a9      	ldrb	r1, [r5, #2]
 800e7de:	4604      	mov	r4, r0
 800e7e0:	4630      	mov	r0, r6
 800e7e2:	f7f9 fae7 	bl	8007db4 <ucdr_serialize_bool>
 800e7e6:	78ab      	ldrb	r3, [r5, #2]
 800e7e8:	4004      	ands	r4, r0
 800e7ea:	b2e4      	uxtb	r4, r4
 800e7ec:	b90b      	cbnz	r3, 800e7f2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7f2:	f105 0108 	add.w	r1, r5, #8
 800e7f6:	4630      	mov	r0, r6
 800e7f8:	f7ff ff6a 	bl	800e6d0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800e7fc:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800e800:	4607      	mov	r7, r0
 800e802:	4630      	mov	r0, r6
 800e804:	f7f9 fad6 	bl	8007db4 <ucdr_serialize_bool>
 800e808:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800e80c:	4007      	ands	r7, r0
 800e80e:	b2ff      	uxtb	r7, r7
 800e810:	b913      	cbnz	r3, 800e818 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800e812:	403c      	ands	r4, r7
 800e814:	4620      	mov	r0, r4
 800e816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e818:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800e81c:	4630      	mov	r0, r6
 800e81e:	f7f9 ff57 	bl	80086d0 <ucdr_serialize_uint64_t>
 800e822:	4007      	ands	r7, r0
 800e824:	e7f5      	b.n	800e812 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800e826:	bf00      	nop

0800e828 <uxr_deserialize_ObjectVariant>:
 800e828:	b570      	push	{r4, r5, r6, lr}
 800e82a:	4605      	mov	r5, r0
 800e82c:	460e      	mov	r6, r1
 800e82e:	f7f9 fb05 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800e832:	b168      	cbz	r0, 800e850 <uxr_deserialize_ObjectVariant+0x28>
 800e834:	7833      	ldrb	r3, [r6, #0]
 800e836:	3b01      	subs	r3, #1
 800e838:	4604      	mov	r4, r0
 800e83a:	2b0d      	cmp	r3, #13
 800e83c:	d809      	bhi.n	800e852 <uxr_deserialize_ObjectVariant+0x2a>
 800e83e:	e8df f003 	tbb	[pc, r3]
 800e842:	0a64      	.short	0x0a64
 800e844:	0a0a2323 	.word	0x0a0a2323
 800e848:	10080a0a 	.word	0x10080a0a
 800e84c:	5e411010 	.word	0x5e411010
 800e850:	2400      	movs	r4, #0
 800e852:	4620      	mov	r0, r4
 800e854:	bd70      	pop	{r4, r5, r6, pc}
 800e856:	1d31      	adds	r1, r6, #4
 800e858:	4628      	mov	r0, r5
 800e85a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e85e:	f7ff bd61 	b.w	800e324 <uxr_deserialize_DATAWRITER_Representation>
 800e862:	1d31      	adds	r1, r6, #4
 800e864:	4628      	mov	r0, r5
 800e866:	f7f9 fae9 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800e86a:	2800      	cmp	r0, #0
 800e86c:	d0f0      	beq.n	800e850 <uxr_deserialize_ObjectVariant+0x28>
 800e86e:	7933      	ldrb	r3, [r6, #4]
 800e870:	2b01      	cmp	r3, #1
 800e872:	d001      	beq.n	800e878 <uxr_deserialize_ObjectVariant+0x50>
 800e874:	2b02      	cmp	r3, #2
 800e876:	d1ec      	bne.n	800e852 <uxr_deserialize_ObjectVariant+0x2a>
 800e878:	68b1      	ldr	r1, [r6, #8]
 800e87a:	4628      	mov	r0, r5
 800e87c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e884:	f006 ba24 	b.w	8014cd0 <ucdr_deserialize_string>
 800e888:	1d31      	adds	r1, r6, #4
 800e88a:	4628      	mov	r0, r5
 800e88c:	f7f9 fad6 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800e890:	4604      	mov	r4, r0
 800e892:	b170      	cbz	r0, 800e8b2 <uxr_deserialize_ObjectVariant+0x8a>
 800e894:	7933      	ldrb	r3, [r6, #4]
 800e896:	2b02      	cmp	r3, #2
 800e898:	d053      	beq.n	800e942 <uxr_deserialize_ObjectVariant+0x11a>
 800e89a:	2b03      	cmp	r3, #3
 800e89c:	d109      	bne.n	800e8b2 <uxr_deserialize_ObjectVariant+0x8a>
 800e89e:	f106 0308 	add.w	r3, r6, #8
 800e8a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e8a6:	f106 010c 	add.w	r1, r6, #12
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	f7fd fd4e 	bl	800c34c <ucdr_deserialize_sequence_uint8_t>
 800e8b0:	4604      	mov	r4, r0
 800e8b2:	2202      	movs	r2, #2
 800e8b4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	f7fd fbf9 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800e8be:	4004      	ands	r4, r0
 800e8c0:	b2e4      	uxtb	r4, r4
 800e8c2:	e7c6      	b.n	800e852 <uxr_deserialize_ObjectVariant+0x2a>
 800e8c4:	2204      	movs	r2, #4
 800e8c6:	18b1      	adds	r1, r6, r2
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	f7fd fbf1 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800e8ce:	2202      	movs	r2, #2
 800e8d0:	f106 0108 	add.w	r1, r6, #8
 800e8d4:	4604      	mov	r4, r0
 800e8d6:	4628      	mov	r0, r5
 800e8d8:	f7fd fbea 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800e8dc:	2202      	movs	r2, #2
 800e8de:	4004      	ands	r4, r0
 800e8e0:	f106 010a 	add.w	r1, r6, #10
 800e8e4:	4628      	mov	r0, r5
 800e8e6:	f7fd fbe3 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800e8ea:	b2e4      	uxtb	r4, r4
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	f106 010c 	add.w	r1, r6, #12
 800e8f2:	4628      	mov	r0, r5
 800e8f4:	401c      	ands	r4, r3
 800e8f6:	f7f9 fa73 	bl	8007de0 <ucdr_deserialize_bool>
 800e8fa:	4004      	ands	r4, r0
 800e8fc:	e7a9      	b.n	800e852 <uxr_deserialize_ObjectVariant+0x2a>
 800e8fe:	1d31      	adds	r1, r6, #4
 800e900:	4628      	mov	r0, r5
 800e902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e906:	f7ff bbc3 	b.w	800e090 <uxr_deserialize_CLIENT_Representation>
 800e90a:	1d31      	adds	r1, r6, #4
 800e90c:	4628      	mov	r0, r5
 800e90e:	f7f9 fa95 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800e912:	4604      	mov	r4, r0
 800e914:	b168      	cbz	r0, 800e932 <uxr_deserialize_ObjectVariant+0x10a>
 800e916:	7933      	ldrb	r3, [r6, #4]
 800e918:	2b02      	cmp	r3, #2
 800e91a:	d003      	beq.n	800e924 <uxr_deserialize_ObjectVariant+0xfc>
 800e91c:	2b03      	cmp	r3, #3
 800e91e:	d018      	beq.n	800e952 <uxr_deserialize_ObjectVariant+0x12a>
 800e920:	2b01      	cmp	r3, #1
 800e922:	d106      	bne.n	800e932 <uxr_deserialize_ObjectVariant+0x10a>
 800e924:	68b1      	ldr	r1, [r6, #8]
 800e926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e92a:	4628      	mov	r0, r5
 800e92c:	f006 f9d0 	bl	8014cd0 <ucdr_deserialize_string>
 800e930:	4604      	mov	r4, r0
 800e932:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800e936:	4628      	mov	r0, r5
 800e938:	f7fa f81c 	bl	8008974 <ucdr_deserialize_int16_t>
 800e93c:	4004      	ands	r4, r0
 800e93e:	b2e4      	uxtb	r4, r4
 800e940:	e787      	b.n	800e852 <uxr_deserialize_ObjectVariant+0x2a>
 800e942:	68b1      	ldr	r1, [r6, #8]
 800e944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e948:	4628      	mov	r0, r5
 800e94a:	f006 f9c1 	bl	8014cd0 <ucdr_deserialize_string>
 800e94e:	4604      	mov	r4, r0
 800e950:	e7af      	b.n	800e8b2 <uxr_deserialize_ObjectVariant+0x8a>
 800e952:	f106 0308 	add.w	r3, r6, #8
 800e956:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e95a:	f106 010c 	add.w	r1, r6, #12
 800e95e:	4628      	mov	r0, r5
 800e960:	f7fd fcf4 	bl	800c34c <ucdr_deserialize_sequence_uint8_t>
 800e964:	4604      	mov	r4, r0
 800e966:	e7e4      	b.n	800e932 <uxr_deserialize_ObjectVariant+0x10a>

0800e968 <uxr_deserialize_BaseObjectRequest>:
 800e968:	b570      	push	{r4, r5, r6, lr}
 800e96a:	2202      	movs	r2, #2
 800e96c:	4605      	mov	r5, r0
 800e96e:	460e      	mov	r6, r1
 800e970:	f7fd fb9e 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800e974:	2202      	movs	r2, #2
 800e976:	4604      	mov	r4, r0
 800e978:	18b1      	adds	r1, r6, r2
 800e97a:	4628      	mov	r0, r5
 800e97c:	f7fd fb98 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800e980:	4020      	ands	r0, r4
 800e982:	b2c0      	uxtb	r0, r0
 800e984:	bd70      	pop	{r4, r5, r6, pc}
 800e986:	bf00      	nop

0800e988 <uxr_serialize_ActivityInfoVariant>:
 800e988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e98c:	460d      	mov	r5, r1
 800e98e:	7809      	ldrb	r1, [r1, #0]
 800e990:	4606      	mov	r6, r0
 800e992:	f7f9 fa3d 	bl	8007e10 <ucdr_serialize_uint8_t>
 800e996:	b130      	cbz	r0, 800e9a6 <uxr_serialize_ActivityInfoVariant+0x1e>
 800e998:	782b      	ldrb	r3, [r5, #0]
 800e99a:	2b06      	cmp	r3, #6
 800e99c:	d014      	beq.n	800e9c8 <uxr_serialize_ActivityInfoVariant+0x40>
 800e99e:	2b0d      	cmp	r3, #13
 800e9a0:	d019      	beq.n	800e9d6 <uxr_serialize_ActivityInfoVariant+0x4e>
 800e9a2:	2b05      	cmp	r3, #5
 800e9a4:	d001      	beq.n	800e9aa <uxr_serialize_ActivityInfoVariant+0x22>
 800e9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9aa:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800e9ae:	4630      	mov	r0, r6
 800e9b0:	f7f9 ff56 	bl	8008860 <ucdr_serialize_int16_t>
 800e9b4:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800e9b8:	4604      	mov	r4, r0
 800e9ba:	4630      	mov	r0, r6
 800e9bc:	f7f9 fe88 	bl	80086d0 <ucdr_serialize_uint64_t>
 800e9c0:	4020      	ands	r0, r4
 800e9c2:	b2c0      	uxtb	r0, r0
 800e9c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9c8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800e9cc:	4630      	mov	r0, r6
 800e9ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9d2:	f7f9 bf45 	b.w	8008860 <ucdr_serialize_int16_t>
 800e9d6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800e9da:	4630      	mov	r0, r6
 800e9dc:	f7f9 ff40 	bl	8008860 <ucdr_serialize_int16_t>
 800e9e0:	68e9      	ldr	r1, [r5, #12]
 800e9e2:	4681      	mov	r9, r0
 800e9e4:	4630      	mov	r0, r6
 800e9e6:	f7f9 fc2f 	bl	8008248 <ucdr_serialize_uint32_t>
 800e9ea:	68eb      	ldr	r3, [r5, #12]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d051      	beq.n	800ea94 <uxr_serialize_ActivityInfoVariant+0x10c>
 800e9f0:	b1e8      	cbz	r0, 800ea2e <uxr_serialize_ActivityInfoVariant+0xa6>
 800e9f2:	f105 0714 	add.w	r7, r5, #20
 800e9f6:	f04f 0800 	mov.w	r8, #0
 800e9fa:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 800e9fe:	4630      	mov	r0, r6
 800ea00:	f7f9 fa06 	bl	8007e10 <ucdr_serialize_uint8_t>
 800ea04:	b198      	cbz	r0, 800ea2e <uxr_serialize_ActivityInfoVariant+0xa6>
 800ea06:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 800ea0a:	2b03      	cmp	r3, #3
 800ea0c:	d839      	bhi.n	800ea82 <uxr_serialize_ActivityInfoVariant+0xfa>
 800ea0e:	e8df f003 	tbb	[pc, r3]
 800ea12:	1e2b      	.short	0x1e2b
 800ea14:	0211      	.short	0x0211
 800ea16:	6839      	ldr	r1, [r7, #0]
 800ea18:	4630      	mov	r0, r6
 800ea1a:	f006 f94b 	bl	8014cb4 <ucdr_serialize_string>
 800ea1e:	68eb      	ldr	r3, [r5, #12]
 800ea20:	f108 0801 	add.w	r8, r8, #1
 800ea24:	4598      	cmp	r8, r3
 800ea26:	d231      	bcs.n	800ea8c <uxr_serialize_ActivityInfoVariant+0x104>
 800ea28:	3718      	adds	r7, #24
 800ea2a:	2800      	cmp	r0, #0
 800ea2c:	d1e5      	bne.n	800e9fa <uxr_serialize_ActivityInfoVariant+0x72>
 800ea2e:	2000      	movs	r0, #0
 800ea30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea34:	2210      	movs	r2, #16
 800ea36:	4639      	mov	r1, r7
 800ea38:	4630      	mov	r0, r6
 800ea3a:	f7fd fad5 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800ea3e:	6939      	ldr	r1, [r7, #16]
 800ea40:	4604      	mov	r4, r0
 800ea42:	4630      	mov	r0, r6
 800ea44:	f7f9 fc00 	bl	8008248 <ucdr_serialize_uint32_t>
 800ea48:	4020      	ands	r0, r4
 800ea4a:	b2c0      	uxtb	r0, r0
 800ea4c:	e7e7      	b.n	800ea1e <uxr_serialize_ActivityInfoVariant+0x96>
 800ea4e:	2204      	movs	r2, #4
 800ea50:	4639      	mov	r1, r7
 800ea52:	4630      	mov	r0, r6
 800ea54:	f7fd fac8 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800ea58:	88b9      	ldrh	r1, [r7, #4]
 800ea5a:	4604      	mov	r4, r0
 800ea5c:	4630      	mov	r0, r6
 800ea5e:	f7f9 fa03 	bl	8007e68 <ucdr_serialize_uint16_t>
 800ea62:	4020      	ands	r0, r4
 800ea64:	b2c0      	uxtb	r0, r0
 800ea66:	e7da      	b.n	800ea1e <uxr_serialize_ActivityInfoVariant+0x96>
 800ea68:	2202      	movs	r2, #2
 800ea6a:	4639      	mov	r1, r7
 800ea6c:	4630      	mov	r0, r6
 800ea6e:	f7fd fabb 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800ea72:	78b9      	ldrb	r1, [r7, #2]
 800ea74:	4604      	mov	r4, r0
 800ea76:	4630      	mov	r0, r6
 800ea78:	f7f9 f9ca 	bl	8007e10 <ucdr_serialize_uint8_t>
 800ea7c:	4020      	ands	r0, r4
 800ea7e:	b2c0      	uxtb	r0, r0
 800ea80:	e7cd      	b.n	800ea1e <uxr_serialize_ActivityInfoVariant+0x96>
 800ea82:	68eb      	ldr	r3, [r5, #12]
 800ea84:	f108 0801 	add.w	r8, r8, #1
 800ea88:	4598      	cmp	r8, r3
 800ea8a:	d308      	bcc.n	800ea9e <uxr_serialize_ActivityInfoVariant+0x116>
 800ea8c:	ea09 0000 	and.w	r0, r9, r0
 800ea90:	b2c0      	uxtb	r0, r0
 800ea92:	e788      	b.n	800e9a6 <uxr_serialize_ActivityInfoVariant+0x1e>
 800ea94:	ea09 0900 	and.w	r9, r9, r0
 800ea98:	fa5f f089 	uxtb.w	r0, r9
 800ea9c:	e783      	b.n	800e9a6 <uxr_serialize_ActivityInfoVariant+0x1e>
 800ea9e:	3718      	adds	r7, #24
 800eaa0:	e7ab      	b.n	800e9fa <uxr_serialize_ActivityInfoVariant+0x72>
 800eaa2:	bf00      	nop

0800eaa4 <uxr_deserialize_BaseObjectReply>:
 800eaa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaa8:	2202      	movs	r2, #2
 800eaaa:	4606      	mov	r6, r0
 800eaac:	460f      	mov	r7, r1
 800eaae:	f7fd faff 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800eab2:	2202      	movs	r2, #2
 800eab4:	18b9      	adds	r1, r7, r2
 800eab6:	4605      	mov	r5, r0
 800eab8:	4630      	mov	r0, r6
 800eaba:	f7fd faf9 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800eabe:	1d39      	adds	r1, r7, #4
 800eac0:	4680      	mov	r8, r0
 800eac2:	4630      	mov	r0, r6
 800eac4:	f7f9 f9ba 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800eac8:	1d79      	adds	r1, r7, #5
 800eaca:	4604      	mov	r4, r0
 800eacc:	4630      	mov	r0, r6
 800eace:	f7f9 f9b5 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800ead2:	ea05 0508 	and.w	r5, r5, r8
 800ead6:	402c      	ands	r4, r5
 800ead8:	4020      	ands	r0, r4
 800eada:	b2c0      	uxtb	r0, r0
 800eadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eae0 <uxr_serialize_ReadSpecification>:
 800eae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae4:	460d      	mov	r5, r1
 800eae6:	7809      	ldrb	r1, [r1, #0]
 800eae8:	4606      	mov	r6, r0
 800eaea:	f7f9 f991 	bl	8007e10 <ucdr_serialize_uint8_t>
 800eaee:	7869      	ldrb	r1, [r5, #1]
 800eaf0:	4604      	mov	r4, r0
 800eaf2:	4630      	mov	r0, r6
 800eaf4:	f7f9 f98c 	bl	8007e10 <ucdr_serialize_uint8_t>
 800eaf8:	78a9      	ldrb	r1, [r5, #2]
 800eafa:	4004      	ands	r4, r0
 800eafc:	4630      	mov	r0, r6
 800eafe:	f7f9 f959 	bl	8007db4 <ucdr_serialize_bool>
 800eb02:	78ab      	ldrb	r3, [r5, #2]
 800eb04:	b2e4      	uxtb	r4, r4
 800eb06:	4004      	ands	r4, r0
 800eb08:	b94b      	cbnz	r3, 800eb1e <uxr_serialize_ReadSpecification+0x3e>
 800eb0a:	7a29      	ldrb	r1, [r5, #8]
 800eb0c:	4630      	mov	r0, r6
 800eb0e:	f7f9 f951 	bl	8007db4 <ucdr_serialize_bool>
 800eb12:	7a2b      	ldrb	r3, [r5, #8]
 800eb14:	4004      	ands	r4, r0
 800eb16:	b943      	cbnz	r3, 800eb2a <uxr_serialize_ReadSpecification+0x4a>
 800eb18:	4620      	mov	r0, r4
 800eb1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb1e:	6869      	ldr	r1, [r5, #4]
 800eb20:	4630      	mov	r0, r6
 800eb22:	f006 f8c7 	bl	8014cb4 <ucdr_serialize_string>
 800eb26:	4004      	ands	r4, r0
 800eb28:	e7ef      	b.n	800eb0a <uxr_serialize_ReadSpecification+0x2a>
 800eb2a:	8969      	ldrh	r1, [r5, #10]
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	f7f9 f99b 	bl	8007e68 <ucdr_serialize_uint16_t>
 800eb32:	89a9      	ldrh	r1, [r5, #12]
 800eb34:	4607      	mov	r7, r0
 800eb36:	4630      	mov	r0, r6
 800eb38:	f7f9 f996 	bl	8007e68 <ucdr_serialize_uint16_t>
 800eb3c:	89e9      	ldrh	r1, [r5, #14]
 800eb3e:	4007      	ands	r7, r0
 800eb40:	4630      	mov	r0, r6
 800eb42:	f7f9 f991 	bl	8007e68 <ucdr_serialize_uint16_t>
 800eb46:	8a29      	ldrh	r1, [r5, #16]
 800eb48:	4680      	mov	r8, r0
 800eb4a:	4630      	mov	r0, r6
 800eb4c:	f7f9 f98c 	bl	8007e68 <ucdr_serialize_uint16_t>
 800eb50:	b2ff      	uxtb	r7, r7
 800eb52:	ea04 0507 	and.w	r5, r4, r7
 800eb56:	ea05 0508 	and.w	r5, r5, r8
 800eb5a:	ea00 0405 	and.w	r4, r0, r5
 800eb5e:	4620      	mov	r0, r4
 800eb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eb64 <uxr_serialize_CREATE_CLIENT_Payload>:
 800eb64:	f7ff ba3a 	b.w	800dfdc <uxr_serialize_CLIENT_Representation>

0800eb68 <uxr_serialize_CREATE_Payload>:
 800eb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb6a:	2202      	movs	r2, #2
 800eb6c:	4606      	mov	r6, r0
 800eb6e:	460d      	mov	r5, r1
 800eb70:	f7fd fa3a 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800eb74:	2202      	movs	r2, #2
 800eb76:	18a9      	adds	r1, r5, r2
 800eb78:	4604      	mov	r4, r0
 800eb7a:	4630      	mov	r0, r6
 800eb7c:	f7fd fa34 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800eb80:	7929      	ldrb	r1, [r5, #4]
 800eb82:	4607      	mov	r7, r0
 800eb84:	4630      	mov	r0, r6
 800eb86:	f7f9 f943 	bl	8007e10 <ucdr_serialize_uint8_t>
 800eb8a:	b170      	cbz	r0, 800ebaa <uxr_serialize_CREATE_Payload+0x42>
 800eb8c:	792b      	ldrb	r3, [r5, #4]
 800eb8e:	403c      	ands	r4, r7
 800eb90:	3b01      	subs	r3, #1
 800eb92:	b2e4      	uxtb	r4, r4
 800eb94:	2b0d      	cmp	r3, #13
 800eb96:	d809      	bhi.n	800ebac <uxr_serialize_CREATE_Payload+0x44>
 800eb98:	e8df f003 	tbb	[pc, r3]
 800eb9c:	23230a3e 	.word	0x23230a3e
 800eba0:	0a0a0a0a 	.word	0x0a0a0a0a
 800eba4:	12121208 	.word	0x12121208
 800eba8:	5f58      	.short	0x5f58
 800ebaa:	2400      	movs	r4, #0
 800ebac:	4620      	mov	r0, r4
 800ebae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebb0:	f105 0108 	add.w	r1, r5, #8
 800ebb4:	4630      	mov	r0, r6
 800ebb6:	f7ff fb19 	bl	800e1ec <uxr_serialize_DATAWRITER_Representation>
 800ebba:	4004      	ands	r4, r0
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebc0:	7a29      	ldrb	r1, [r5, #8]
 800ebc2:	4630      	mov	r0, r6
 800ebc4:	f7f9 f924 	bl	8007e10 <ucdr_serialize_uint8_t>
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	d0ee      	beq.n	800ebaa <uxr_serialize_CREATE_Payload+0x42>
 800ebcc:	7a2b      	ldrb	r3, [r5, #8]
 800ebce:	2b01      	cmp	r3, #1
 800ebd0:	d001      	beq.n	800ebd6 <uxr_serialize_CREATE_Payload+0x6e>
 800ebd2:	2b02      	cmp	r3, #2
 800ebd4:	d1ea      	bne.n	800ebac <uxr_serialize_CREATE_Payload+0x44>
 800ebd6:	68e9      	ldr	r1, [r5, #12]
 800ebd8:	4630      	mov	r0, r6
 800ebda:	f006 f86b 	bl	8014cb4 <ucdr_serialize_string>
 800ebde:	4004      	ands	r4, r0
 800ebe0:	e7e4      	b.n	800ebac <uxr_serialize_CREATE_Payload+0x44>
 800ebe2:	7a29      	ldrb	r1, [r5, #8]
 800ebe4:	4630      	mov	r0, r6
 800ebe6:	f7f9 f913 	bl	8007e10 <ucdr_serialize_uint8_t>
 800ebea:	4607      	mov	r7, r0
 800ebec:	b158      	cbz	r0, 800ec06 <uxr_serialize_CREATE_Payload+0x9e>
 800ebee:	7a2b      	ldrb	r3, [r5, #8]
 800ebf0:	2b02      	cmp	r3, #2
 800ebf2:	d039      	beq.n	800ec68 <uxr_serialize_CREATE_Payload+0x100>
 800ebf4:	2b03      	cmp	r3, #3
 800ebf6:	d106      	bne.n	800ec06 <uxr_serialize_CREATE_Payload+0x9e>
 800ebf8:	68ea      	ldr	r2, [r5, #12]
 800ebfa:	f105 0110 	add.w	r1, r5, #16
 800ebfe:	4630      	mov	r0, r6
 800ec00:	f7fd fb92 	bl	800c328 <ucdr_serialize_sequence_uint8_t>
 800ec04:	4607      	mov	r7, r0
 800ec06:	2202      	movs	r2, #2
 800ec08:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 800ec0c:	4630      	mov	r0, r6
 800ec0e:	f7fd f9eb 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800ec12:	4038      	ands	r0, r7
 800ec14:	4004      	ands	r4, r0
 800ec16:	e7c9      	b.n	800ebac <uxr_serialize_CREATE_Payload+0x44>
 800ec18:	7a29      	ldrb	r1, [r5, #8]
 800ec1a:	4630      	mov	r0, r6
 800ec1c:	f7f9 f8f8 	bl	8007e10 <ucdr_serialize_uint8_t>
 800ec20:	4607      	mov	r7, r0
 800ec22:	b158      	cbz	r0, 800ec3c <uxr_serialize_CREATE_Payload+0xd4>
 800ec24:	7a2b      	ldrb	r3, [r5, #8]
 800ec26:	2b02      	cmp	r3, #2
 800ec28:	d003      	beq.n	800ec32 <uxr_serialize_CREATE_Payload+0xca>
 800ec2a:	2b03      	cmp	r3, #3
 800ec2c:	d022      	beq.n	800ec74 <uxr_serialize_CREATE_Payload+0x10c>
 800ec2e:	2b01      	cmp	r3, #1
 800ec30:	d104      	bne.n	800ec3c <uxr_serialize_CREATE_Payload+0xd4>
 800ec32:	68e9      	ldr	r1, [r5, #12]
 800ec34:	4630      	mov	r0, r6
 800ec36:	f006 f83d 	bl	8014cb4 <ucdr_serialize_string>
 800ec3a:	4607      	mov	r7, r0
 800ec3c:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 800ec40:	4630      	mov	r0, r6
 800ec42:	f7f9 fe0d 	bl	8008860 <ucdr_serialize_int16_t>
 800ec46:	4038      	ands	r0, r7
 800ec48:	4004      	ands	r4, r0
 800ec4a:	e7af      	b.n	800ebac <uxr_serialize_CREATE_Payload+0x44>
 800ec4c:	f105 0108 	add.w	r1, r5, #8
 800ec50:	4630      	mov	r0, r6
 800ec52:	f7ff fa81 	bl	800e158 <uxr_serialize_AGENT_Representation>
 800ec56:	4004      	ands	r4, r0
 800ec58:	e7a8      	b.n	800ebac <uxr_serialize_CREATE_Payload+0x44>
 800ec5a:	f105 0108 	add.w	r1, r5, #8
 800ec5e:	4630      	mov	r0, r6
 800ec60:	f7ff f9bc 	bl	800dfdc <uxr_serialize_CLIENT_Representation>
 800ec64:	4004      	ands	r4, r0
 800ec66:	e7a1      	b.n	800ebac <uxr_serialize_CREATE_Payload+0x44>
 800ec68:	68e9      	ldr	r1, [r5, #12]
 800ec6a:	4630      	mov	r0, r6
 800ec6c:	f006 f822 	bl	8014cb4 <ucdr_serialize_string>
 800ec70:	4607      	mov	r7, r0
 800ec72:	e7c8      	b.n	800ec06 <uxr_serialize_CREATE_Payload+0x9e>
 800ec74:	68ea      	ldr	r2, [r5, #12]
 800ec76:	f105 0110 	add.w	r1, r5, #16
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	f7fd fb54 	bl	800c328 <ucdr_serialize_sequence_uint8_t>
 800ec80:	4607      	mov	r7, r0
 800ec82:	e7db      	b.n	800ec3c <uxr_serialize_CREATE_Payload+0xd4>

0800ec84 <uxr_deserialize_GET_INFO_Payload>:
 800ec84:	b570      	push	{r4, r5, r6, lr}
 800ec86:	2202      	movs	r2, #2
 800ec88:	4605      	mov	r5, r0
 800ec8a:	460e      	mov	r6, r1
 800ec8c:	f7fd fa10 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800ec90:	2202      	movs	r2, #2
 800ec92:	18b1      	adds	r1, r6, r2
 800ec94:	4604      	mov	r4, r0
 800ec96:	4628      	mov	r0, r5
 800ec98:	f7fd fa0a 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800ec9c:	1d31      	adds	r1, r6, #4
 800ec9e:	4004      	ands	r4, r0
 800eca0:	4628      	mov	r0, r5
 800eca2:	f7f9 fbfb 	bl	800849c <ucdr_deserialize_uint32_t>
 800eca6:	b2e4      	uxtb	r4, r4
 800eca8:	4020      	ands	r0, r4
 800ecaa:	bd70      	pop	{r4, r5, r6, pc}

0800ecac <uxr_serialize_DELETE_Payload>:
 800ecac:	b570      	push	{r4, r5, r6, lr}
 800ecae:	2202      	movs	r2, #2
 800ecb0:	4605      	mov	r5, r0
 800ecb2:	460e      	mov	r6, r1
 800ecb4:	f7fd f998 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800ecb8:	2202      	movs	r2, #2
 800ecba:	4604      	mov	r4, r0
 800ecbc:	18b1      	adds	r1, r6, r2
 800ecbe:	4628      	mov	r0, r5
 800ecc0:	f7fd f992 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800ecc4:	4020      	ands	r0, r4
 800ecc6:	b2c0      	uxtb	r0, r0
 800ecc8:	bd70      	pop	{r4, r5, r6, pc}
 800ecca:	bf00      	nop

0800eccc <uxr_deserialize_STATUS_AGENT_Payload>:
 800eccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecd0:	4605      	mov	r5, r0
 800ecd2:	460e      	mov	r6, r1
 800ecd4:	f7f9 f8b2 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800ecd8:	1c71      	adds	r1, r6, #1
 800ecda:	4604      	mov	r4, r0
 800ecdc:	4628      	mov	r0, r5
 800ecde:	f7f9 f8ad 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800ece2:	2204      	movs	r2, #4
 800ece4:	18b1      	adds	r1, r6, r2
 800ece6:	4681      	mov	r9, r0
 800ece8:	4628      	mov	r0, r5
 800ecea:	f7fd f9e1 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800ecee:	f106 0108 	add.w	r1, r6, #8
 800ecf2:	4680      	mov	r8, r0
 800ecf4:	2202      	movs	r2, #2
 800ecf6:	4628      	mov	r0, r5
 800ecf8:	f7fd f9da 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800ecfc:	2202      	movs	r2, #2
 800ecfe:	f106 010a 	add.w	r1, r6, #10
 800ed02:	4607      	mov	r7, r0
 800ed04:	4628      	mov	r0, r5
 800ed06:	f7fd f9d3 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800ed0a:	ea04 0409 	and.w	r4, r4, r9
 800ed0e:	4603      	mov	r3, r0
 800ed10:	f106 010c 	add.w	r1, r6, #12
 800ed14:	4628      	mov	r0, r5
 800ed16:	b2e4      	uxtb	r4, r4
 800ed18:	461d      	mov	r5, r3
 800ed1a:	ea04 0408 	and.w	r4, r4, r8
 800ed1e:	f7f9 f85f 	bl	8007de0 <ucdr_deserialize_bool>
 800ed22:	4027      	ands	r7, r4
 800ed24:	403d      	ands	r5, r7
 800ed26:	4028      	ands	r0, r5
 800ed28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ed2c <uxr_deserialize_STATUS_Payload>:
 800ed2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed30:	2202      	movs	r2, #2
 800ed32:	4606      	mov	r6, r0
 800ed34:	460f      	mov	r7, r1
 800ed36:	f7fd f9bb 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800ed3a:	2202      	movs	r2, #2
 800ed3c:	18b9      	adds	r1, r7, r2
 800ed3e:	4605      	mov	r5, r0
 800ed40:	4630      	mov	r0, r6
 800ed42:	f7fd f9b5 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800ed46:	1d39      	adds	r1, r7, #4
 800ed48:	4680      	mov	r8, r0
 800ed4a:	4630      	mov	r0, r6
 800ed4c:	f7f9 f876 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800ed50:	1d79      	adds	r1, r7, #5
 800ed52:	4604      	mov	r4, r0
 800ed54:	4630      	mov	r0, r6
 800ed56:	f7f9 f871 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800ed5a:	ea05 0508 	and.w	r5, r5, r8
 800ed5e:	402c      	ands	r4, r5
 800ed60:	4020      	ands	r0, r4
 800ed62:	b2c0      	uxtb	r0, r0
 800ed64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ed68 <uxr_serialize_INFO_Payload>:
 800ed68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed6c:	2202      	movs	r2, #2
 800ed6e:	460c      	mov	r4, r1
 800ed70:	4605      	mov	r5, r0
 800ed72:	f7fd f939 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800ed76:	2202      	movs	r2, #2
 800ed78:	18a1      	adds	r1, r4, r2
 800ed7a:	4680      	mov	r8, r0
 800ed7c:	4628      	mov	r0, r5
 800ed7e:	f7fd f933 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800ed82:	7921      	ldrb	r1, [r4, #4]
 800ed84:	4607      	mov	r7, r0
 800ed86:	4628      	mov	r0, r5
 800ed88:	f7f9 f842 	bl	8007e10 <ucdr_serialize_uint8_t>
 800ed8c:	7961      	ldrb	r1, [r4, #5]
 800ed8e:	4606      	mov	r6, r0
 800ed90:	4628      	mov	r0, r5
 800ed92:	f7f9 f83d 	bl	8007e10 <ucdr_serialize_uint8_t>
 800ed96:	ea08 0807 	and.w	r8, r8, r7
 800ed9a:	ea06 0608 	and.w	r6, r6, r8
 800ed9e:	ea00 0706 	and.w	r7, r0, r6
 800eda2:	7a21      	ldrb	r1, [r4, #8]
 800eda4:	4628      	mov	r0, r5
 800eda6:	f7f9 f805 	bl	8007db4 <ucdr_serialize_bool>
 800edaa:	7a23      	ldrb	r3, [r4, #8]
 800edac:	b2ff      	uxtb	r7, r7
 800edae:	4606      	mov	r6, r0
 800edb0:	b96b      	cbnz	r3, 800edce <uxr_serialize_INFO_Payload+0x66>
 800edb2:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800edb6:	4628      	mov	r0, r5
 800edb8:	f7f8 fffc 	bl	8007db4 <ucdr_serialize_bool>
 800edbc:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800edc0:	4030      	ands	r0, r6
 800edc2:	b2c6      	uxtb	r6, r0
 800edc4:	b983      	cbnz	r3, 800ede8 <uxr_serialize_INFO_Payload+0x80>
 800edc6:	ea06 0007 	and.w	r0, r6, r7
 800edca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edce:	7b21      	ldrb	r1, [r4, #12]
 800edd0:	4628      	mov	r0, r5
 800edd2:	f7f9 f81d 	bl	8007e10 <ucdr_serialize_uint8_t>
 800edd6:	b188      	cbz	r0, 800edfc <uxr_serialize_INFO_Payload+0x94>
 800edd8:	f104 010c 	add.w	r1, r4, #12
 800eddc:	4628      	mov	r0, r5
 800edde:	f7ff fa2d 	bl	800e23c <uxr_serialize_ObjectVariant.part.0>
 800ede2:	4030      	ands	r0, r6
 800ede4:	b2c6      	uxtb	r6, r0
 800ede6:	e7e4      	b.n	800edb2 <uxr_serialize_INFO_Payload+0x4a>
 800ede8:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800edec:	4628      	mov	r0, r5
 800edee:	f7ff fdcb 	bl	800e988 <uxr_serialize_ActivityInfoVariant>
 800edf2:	4006      	ands	r6, r0
 800edf4:	ea06 0007 	and.w	r0, r6, r7
 800edf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edfc:	4606      	mov	r6, r0
 800edfe:	e7d8      	b.n	800edb2 <uxr_serialize_INFO_Payload+0x4a>

0800ee00 <uxr_serialize_READ_DATA_Payload>:
 800ee00:	b570      	push	{r4, r5, r6, lr}
 800ee02:	2202      	movs	r2, #2
 800ee04:	4605      	mov	r5, r0
 800ee06:	460e      	mov	r6, r1
 800ee08:	f7fd f8ee 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800ee0c:	2202      	movs	r2, #2
 800ee0e:	18b1      	adds	r1, r6, r2
 800ee10:	4604      	mov	r4, r0
 800ee12:	4628      	mov	r0, r5
 800ee14:	f7fd f8e8 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800ee18:	1d31      	adds	r1, r6, #4
 800ee1a:	4004      	ands	r4, r0
 800ee1c:	4628      	mov	r0, r5
 800ee1e:	f7ff fe5f 	bl	800eae0 <uxr_serialize_ReadSpecification>
 800ee22:	b2e4      	uxtb	r4, r4
 800ee24:	4020      	ands	r0, r4
 800ee26:	bd70      	pop	{r4, r5, r6, pc}

0800ee28 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800ee28:	b570      	push	{r4, r5, r6, lr}
 800ee2a:	2202      	movs	r2, #2
 800ee2c:	4605      	mov	r5, r0
 800ee2e:	460e      	mov	r6, r1
 800ee30:	f7fd f8da 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800ee34:	2202      	movs	r2, #2
 800ee36:	4604      	mov	r4, r0
 800ee38:	18b1      	adds	r1, r6, r2
 800ee3a:	4628      	mov	r0, r5
 800ee3c:	f7fd f8d4 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800ee40:	4020      	ands	r0, r4
 800ee42:	b2c0      	uxtb	r0, r0
 800ee44:	bd70      	pop	{r4, r5, r6, pc}
 800ee46:	bf00      	nop

0800ee48 <uxr_serialize_ACKNACK_Payload>:
 800ee48:	b570      	push	{r4, r5, r6, lr}
 800ee4a:	460c      	mov	r4, r1
 800ee4c:	460e      	mov	r6, r1
 800ee4e:	f834 1b02 	ldrh.w	r1, [r4], #2
 800ee52:	4605      	mov	r5, r0
 800ee54:	f7f9 f808 	bl	8007e68 <ucdr_serialize_uint16_t>
 800ee58:	2202      	movs	r2, #2
 800ee5a:	4621      	mov	r1, r4
 800ee5c:	4604      	mov	r4, r0
 800ee5e:	4628      	mov	r0, r5
 800ee60:	f7fd f8c2 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800ee64:	7931      	ldrb	r1, [r6, #4]
 800ee66:	4004      	ands	r4, r0
 800ee68:	4628      	mov	r0, r5
 800ee6a:	f7f8 ffd1 	bl	8007e10 <ucdr_serialize_uint8_t>
 800ee6e:	b2e4      	uxtb	r4, r4
 800ee70:	4020      	ands	r0, r4
 800ee72:	bd70      	pop	{r4, r5, r6, pc}

0800ee74 <uxr_deserialize_ACKNACK_Payload>:
 800ee74:	b570      	push	{r4, r5, r6, lr}
 800ee76:	4605      	mov	r5, r0
 800ee78:	460e      	mov	r6, r1
 800ee7a:	f7f9 f8f9 	bl	8008070 <ucdr_deserialize_uint16_t>
 800ee7e:	2202      	movs	r2, #2
 800ee80:	18b1      	adds	r1, r6, r2
 800ee82:	4604      	mov	r4, r0
 800ee84:	4628      	mov	r0, r5
 800ee86:	f7fd f913 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800ee8a:	1d31      	adds	r1, r6, #4
 800ee8c:	4004      	ands	r4, r0
 800ee8e:	4628      	mov	r0, r5
 800ee90:	f7f8 ffd4 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800ee94:	b2e4      	uxtb	r4, r4
 800ee96:	4020      	ands	r0, r4
 800ee98:	bd70      	pop	{r4, r5, r6, pc}
 800ee9a:	bf00      	nop

0800ee9c <uxr_serialize_HEARTBEAT_Payload>:
 800ee9c:	b570      	push	{r4, r5, r6, lr}
 800ee9e:	460d      	mov	r5, r1
 800eea0:	8809      	ldrh	r1, [r1, #0]
 800eea2:	4606      	mov	r6, r0
 800eea4:	f7f8 ffe0 	bl	8007e68 <ucdr_serialize_uint16_t>
 800eea8:	8869      	ldrh	r1, [r5, #2]
 800eeaa:	4604      	mov	r4, r0
 800eeac:	4630      	mov	r0, r6
 800eeae:	f7f8 ffdb 	bl	8007e68 <ucdr_serialize_uint16_t>
 800eeb2:	7929      	ldrb	r1, [r5, #4]
 800eeb4:	4004      	ands	r4, r0
 800eeb6:	4630      	mov	r0, r6
 800eeb8:	f7f8 ffaa 	bl	8007e10 <ucdr_serialize_uint8_t>
 800eebc:	b2e4      	uxtb	r4, r4
 800eebe:	4020      	ands	r0, r4
 800eec0:	bd70      	pop	{r4, r5, r6, pc}
 800eec2:	bf00      	nop

0800eec4 <uxr_deserialize_HEARTBEAT_Payload>:
 800eec4:	b570      	push	{r4, r5, r6, lr}
 800eec6:	4605      	mov	r5, r0
 800eec8:	460e      	mov	r6, r1
 800eeca:	f7f9 f8d1 	bl	8008070 <ucdr_deserialize_uint16_t>
 800eece:	1cb1      	adds	r1, r6, #2
 800eed0:	4604      	mov	r4, r0
 800eed2:	4628      	mov	r0, r5
 800eed4:	f7f9 f8cc 	bl	8008070 <ucdr_deserialize_uint16_t>
 800eed8:	1d31      	adds	r1, r6, #4
 800eeda:	4004      	ands	r4, r0
 800eedc:	4628      	mov	r0, r5
 800eede:	f7f8 ffad 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800eee2:	b2e4      	uxtb	r4, r4
 800eee4:	4020      	ands	r0, r4
 800eee6:	bd70      	pop	{r4, r5, r6, pc}

0800eee8 <uxr_serialize_TIMESTAMP_Payload>:
 800eee8:	b570      	push	{r4, r5, r6, lr}
 800eeea:	460d      	mov	r5, r1
 800eeec:	6809      	ldr	r1, [r1, #0]
 800eeee:	4606      	mov	r6, r0
 800eef0:	f7f9 fdbc 	bl	8008a6c <ucdr_serialize_int32_t>
 800eef4:	6869      	ldr	r1, [r5, #4]
 800eef6:	4604      	mov	r4, r0
 800eef8:	4630      	mov	r0, r6
 800eefa:	f7f9 f9a5 	bl	8008248 <ucdr_serialize_uint32_t>
 800eefe:	4020      	ands	r0, r4
 800ef00:	b2c0      	uxtb	r0, r0
 800ef02:	bd70      	pop	{r4, r5, r6, pc}

0800ef04 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800ef04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef08:	4605      	mov	r5, r0
 800ef0a:	460e      	mov	r6, r1
 800ef0c:	f7f9 fe48 	bl	8008ba0 <ucdr_deserialize_int32_t>
 800ef10:	1d31      	adds	r1, r6, #4
 800ef12:	4607      	mov	r7, r0
 800ef14:	4628      	mov	r0, r5
 800ef16:	f7f9 fac1 	bl	800849c <ucdr_deserialize_uint32_t>
 800ef1a:	f106 0108 	add.w	r1, r6, #8
 800ef1e:	4680      	mov	r8, r0
 800ef20:	4628      	mov	r0, r5
 800ef22:	f7f9 fe3d 	bl	8008ba0 <ucdr_deserialize_int32_t>
 800ef26:	f106 010c 	add.w	r1, r6, #12
 800ef2a:	4604      	mov	r4, r0
 800ef2c:	4628      	mov	r0, r5
 800ef2e:	f7f9 fab5 	bl	800849c <ucdr_deserialize_uint32_t>
 800ef32:	ea07 0708 	and.w	r7, r7, r8
 800ef36:	403c      	ands	r4, r7
 800ef38:	f106 0110 	add.w	r1, r6, #16
 800ef3c:	4004      	ands	r4, r0
 800ef3e:	4628      	mov	r0, r5
 800ef40:	f7f9 fe2e 	bl	8008ba0 <ucdr_deserialize_int32_t>
 800ef44:	f106 0114 	add.w	r1, r6, #20
 800ef48:	4607      	mov	r7, r0
 800ef4a:	4628      	mov	r0, r5
 800ef4c:	f7f9 faa6 	bl	800849c <ucdr_deserialize_uint32_t>
 800ef50:	b2e4      	uxtb	r4, r4
 800ef52:	403c      	ands	r4, r7
 800ef54:	4020      	ands	r0, r4
 800ef56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef5a:	bf00      	nop

0800ef5c <uxr_serialize_SampleIdentity>:
 800ef5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef60:	220c      	movs	r2, #12
 800ef62:	4604      	mov	r4, r0
 800ef64:	460d      	mov	r5, r1
 800ef66:	f7fd f83f 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800ef6a:	2203      	movs	r2, #3
 800ef6c:	f105 010c 	add.w	r1, r5, #12
 800ef70:	4680      	mov	r8, r0
 800ef72:	4620      	mov	r0, r4
 800ef74:	f7fd f838 	bl	800bfe8 <ucdr_serialize_array_uint8_t>
 800ef78:	7be9      	ldrb	r1, [r5, #15]
 800ef7a:	4681      	mov	r9, r0
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	f7f8 ff47 	bl	8007e10 <ucdr_serialize_uint8_t>
 800ef82:	6929      	ldr	r1, [r5, #16]
 800ef84:	4607      	mov	r7, r0
 800ef86:	4620      	mov	r0, r4
 800ef88:	f7f9 fd70 	bl	8008a6c <ucdr_serialize_int32_t>
 800ef8c:	6969      	ldr	r1, [r5, #20]
 800ef8e:	4606      	mov	r6, r0
 800ef90:	4620      	mov	r0, r4
 800ef92:	f7f9 f959 	bl	8008248 <ucdr_serialize_uint32_t>
 800ef96:	ea08 0809 	and.w	r8, r8, r9
 800ef9a:	ea07 0708 	and.w	r7, r7, r8
 800ef9e:	403e      	ands	r6, r7
 800efa0:	4030      	ands	r0, r6
 800efa2:	b2c0      	uxtb	r0, r0
 800efa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800efa8 <uxr_deserialize_SampleIdentity>:
 800efa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efac:	220c      	movs	r2, #12
 800efae:	4604      	mov	r4, r0
 800efb0:	460d      	mov	r5, r1
 800efb2:	f7fd f87d 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800efb6:	2203      	movs	r2, #3
 800efb8:	f105 010c 	add.w	r1, r5, #12
 800efbc:	4680      	mov	r8, r0
 800efbe:	4620      	mov	r0, r4
 800efc0:	f7fd f876 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 800efc4:	f105 010f 	add.w	r1, r5, #15
 800efc8:	4681      	mov	r9, r0
 800efca:	4620      	mov	r0, r4
 800efcc:	f7f8 ff36 	bl	8007e3c <ucdr_deserialize_uint8_t>
 800efd0:	f105 0110 	add.w	r1, r5, #16
 800efd4:	4607      	mov	r7, r0
 800efd6:	4620      	mov	r0, r4
 800efd8:	f7f9 fde2 	bl	8008ba0 <ucdr_deserialize_int32_t>
 800efdc:	f105 0114 	add.w	r1, r5, #20
 800efe0:	4606      	mov	r6, r0
 800efe2:	4620      	mov	r0, r4
 800efe4:	f7f9 fa5a 	bl	800849c <ucdr_deserialize_uint32_t>
 800efe8:	ea08 0809 	and.w	r8, r8, r9
 800efec:	ea07 0708 	and.w	r7, r7, r8
 800eff0:	403e      	ands	r6, r7
 800eff2:	4030      	ands	r0, r6
 800eff4:	b2c0      	uxtb	r0, r0
 800eff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800effa:	bf00      	nop

0800effc <nav_msgs__msg__Odometry__get_type_hash>:
 800effc:	4800      	ldr	r0, [pc, #0]	@ (800f000 <nav_msgs__msg__Odometry__get_type_hash+0x4>)
 800effe:	4770      	bx	lr
 800f000:	20000be8 	.word	0x20000be8

0800f004 <nav_msgs__msg__Odometry__get_type_description>:
 800f004:	b570      	push	{r4, r5, r6, lr}
 800f006:	4e2c      	ldr	r6, [pc, #176]	@ (800f0b8 <nav_msgs__msg__Odometry__get_type_description+0xb4>)
 800f008:	7835      	ldrb	r5, [r6, #0]
 800f00a:	b10d      	cbz	r5, 800f010 <nav_msgs__msg__Odometry__get_type_description+0xc>
 800f00c:	482b      	ldr	r0, [pc, #172]	@ (800f0bc <nav_msgs__msg__Odometry__get_type_description+0xb8>)
 800f00e:	bd70      	pop	{r4, r5, r6, pc}
 800f010:	4628      	mov	r0, r5
 800f012:	f005 f94b 	bl	80142ac <builtin_interfaces__msg__Time__get_type_description>
 800f016:	300c      	adds	r0, #12
 800f018:	c807      	ldmia	r0, {r0, r1, r2}
 800f01a:	4c29      	ldr	r4, [pc, #164]	@ (800f0c0 <nav_msgs__msg__Odometry__get_type_description+0xbc>)
 800f01c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f020:	4628      	mov	r0, r5
 800f022:	f005 f979 	bl	8014318 <geometry_msgs__msg__Point__get_type_description>
 800f026:	300c      	adds	r0, #12
 800f028:	c807      	ldmia	r0, {r0, r1, r2}
 800f02a:	f104 0318 	add.w	r3, r4, #24
 800f02e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f032:	4628      	mov	r0, r5
 800f034:	f005 f9a0 	bl	8014378 <geometry_msgs__msg__Pose__get_type_description>
 800f038:	300c      	adds	r0, #12
 800f03a:	c807      	ldmia	r0, {r0, r1, r2}
 800f03c:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800f040:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f044:	4628      	mov	r0, r5
 800f046:	f005 f9f7 	bl	8014438 <geometry_msgs__msg__PoseWithCovariance__get_type_description>
 800f04a:	300c      	adds	r0, #12
 800f04c:	c807      	ldmia	r0, {r0, r1, r2}
 800f04e:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 800f052:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f056:	4628      	mov	r0, r5
 800f058:	f005 fa78 	bl	801454c <geometry_msgs__msg__Quaternion__get_type_description>
 800f05c:	300c      	adds	r0, #12
 800f05e:	c807      	ldmia	r0, {r0, r1, r2}
 800f060:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 800f064:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f068:	4628      	mov	r0, r5
 800f06a:	f7fc fcab 	bl	800b9c4 <geometry_msgs__msg__Twist__get_type_description>
 800f06e:	300c      	adds	r0, #12
 800f070:	c807      	ldmia	r0, {r0, r1, r2}
 800f072:	f104 0378 	add.w	r3, r4, #120	@ 0x78
 800f076:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f07a:	4628      	mov	r0, r5
 800f07c:	f005 fbca 	bl	8014814 <geometry_msgs__msg__TwistWithCovariance__get_type_description>
 800f080:	300c      	adds	r0, #12
 800f082:	c807      	ldmia	r0, {r0, r1, r2}
 800f084:	f104 0390 	add.w	r3, r4, #144	@ 0x90
 800f088:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f08c:	4628      	mov	r0, r5
 800f08e:	f7fc fd0d 	bl	800baac <geometry_msgs__msg__Vector3__get_type_description>
 800f092:	300c      	adds	r0, #12
 800f094:	c807      	ldmia	r0, {r0, r1, r2}
 800f096:	f104 03a8 	add.w	r3, r4, #168	@ 0xa8
 800f09a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f09e:	4628      	mov	r0, r5
 800f0a0:	f004 ffc0 	bl	8014024 <std_msgs__msg__Header__get_type_description>
 800f0a4:	300c      	adds	r0, #12
 800f0a6:	c807      	ldmia	r0, {r0, r1, r2}
 800f0a8:	34c0      	adds	r4, #192	@ 0xc0
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f0b0:	7033      	strb	r3, [r6, #0]
 800f0b2:	4802      	ldr	r0, [pc, #8]	@ (800f0bc <nav_msgs__msg__Odometry__get_type_description+0xb8>)
 800f0b4:	bd70      	pop	{r4, r5, r6, pc}
 800f0b6:	bf00      	nop
 800f0b8:	20010c9d 	.word	0x20010c9d
 800f0bc:	08019c5c 	.word	0x08019c5c
 800f0c0:	20000ea4 	.word	0x20000ea4

0800f0c4 <nav_msgs__msg__Odometry__get_type_description_sources>:
 800f0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0c6:	4d4c      	ldr	r5, [pc, #304]	@ (800f1f8 <nav_msgs__msg__Odometry__get_type_description_sources+0x134>)
 800f0c8:	782e      	ldrb	r6, [r5, #0]
 800f0ca:	b10e      	cbz	r6, 800f0d0 <nav_msgs__msg__Odometry__get_type_description_sources+0xc>
 800f0cc:	484b      	ldr	r0, [pc, #300]	@ (800f1fc <nav_msgs__msg__Odometry__get_type_description_sources+0x138>)
 800f0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0d0:	4f4b      	ldr	r7, [pc, #300]	@ (800f200 <nav_msgs__msg__Odometry__get_type_description_sources+0x13c>)
 800f0d2:	4c4c      	ldr	r4, [pc, #304]	@ (800f204 <nav_msgs__msg__Odometry__get_type_description_sources+0x140>)
 800f0d4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f0d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f0da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	4627      	mov	r7, r4
 800f0e0:	4630      	mov	r0, r6
 800f0e2:	f847 3b04 	str.w	r3, [r7], #4
 800f0e6:	f005 f8ed 	bl	80142c4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800f0ea:	4684      	mov	ip, r0
 800f0ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f0f0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f0f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f0f6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f0f8:	4630      	mov	r0, r6
 800f0fa:	f8dc 3000 	ldr.w	r3, [ip]
 800f0fe:	603b      	str	r3, [r7, #0]
 800f100:	f005 f916 	bl	8014330 <geometry_msgs__msg__Point__get_individual_type_description_source>
 800f104:	4684      	mov	ip, r0
 800f106:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f10a:	f104 0728 	add.w	r7, r4, #40	@ 0x28
 800f10e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f110:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f114:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f116:	4630      	mov	r0, r6
 800f118:	f8dc 3000 	ldr.w	r3, [ip]
 800f11c:	603b      	str	r3, [r7, #0]
 800f11e:	f005 f94b 	bl	80143b8 <geometry_msgs__msg__Pose__get_individual_type_description_source>
 800f122:	4684      	mov	ip, r0
 800f124:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f128:	f104 074c 	add.w	r7, r4, #76	@ 0x4c
 800f12c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f12e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f132:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f134:	4630      	mov	r0, r6
 800f136:	f8dc 3000 	ldr.w	r3, [ip]
 800f13a:	603b      	str	r3, [r7, #0]
 800f13c:	f005 f9a6 	bl	801448c <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source>
 800f140:	4684      	mov	ip, r0
 800f142:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f146:	f104 0770 	add.w	r7, r4, #112	@ 0x70
 800f14a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f14c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f150:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f152:	4630      	mov	r0, r6
 800f154:	f8dc 3000 	ldr.w	r3, [ip]
 800f158:	603b      	str	r3, [r7, #0]
 800f15a:	f005 fa03 	bl	8014564 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 800f15e:	4684      	mov	ip, r0
 800f160:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f164:	f104 0794 	add.w	r7, r4, #148	@ 0x94
 800f168:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f16a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f16e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f170:	4630      	mov	r0, r6
 800f172:	f8dc 3000 	ldr.w	r3, [ip]
 800f176:	603b      	str	r3, [r7, #0]
 800f178:	f7fc fc3c 	bl	800b9f4 <geometry_msgs__msg__Twist__get_individual_type_description_source>
 800f17c:	4684      	mov	ip, r0
 800f17e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f182:	f104 07b8 	add.w	r7, r4, #184	@ 0xb8
 800f186:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f188:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f18c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f18e:	4630      	mov	r0, r6
 800f190:	f8dc 3000 	ldr.w	r3, [ip]
 800f194:	603b      	str	r3, [r7, #0]
 800f196:	f005 fb5d 	bl	8014854 <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source>
 800f19a:	4684      	mov	ip, r0
 800f19c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f1a0:	f104 07dc 	add.w	r7, r4, #220	@ 0xdc
 800f1a4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f1a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f1aa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f1ac:	4630      	mov	r0, r6
 800f1ae:	f8dc 3000 	ldr.w	r3, [ip]
 800f1b2:	603b      	str	r3, [r7, #0]
 800f1b4:	f7fc fc86 	bl	800bac4 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 800f1b8:	4684      	mov	ip, r0
 800f1ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f1be:	f504 7780 	add.w	r7, r4, #256	@ 0x100
 800f1c2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f1c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f1c8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f1ca:	4630      	mov	r0, r6
 800f1cc:	f8dc 3000 	ldr.w	r3, [ip]
 800f1d0:	603b      	str	r3, [r7, #0]
 800f1d2:	f004 ff3f 	bl	8014054 <std_msgs__msg__Header__get_individual_type_description_source>
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	4684      	mov	ip, r0
 800f1da:	702b      	strb	r3, [r5, #0]
 800f1dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f1e0:	f504 7492 	add.w	r4, r4, #292	@ 0x124
 800f1e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f1e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f1ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f1ec:	f8dc 3000 	ldr.w	r3, [ip]
 800f1f0:	4802      	ldr	r0, [pc, #8]	@ (800f1fc <nav_msgs__msg__Odometry__get_type_description_sources+0x138>)
 800f1f2:	6023      	str	r3, [r4, #0]
 800f1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	20010c9c 	.word	0x20010c9c
 800f1fc:	08019c2c 	.word	0x08019c2c
 800f200:	08019c38 	.word	0x08019c38
 800f204:	20010b34 	.word	0x20010b34

0800f208 <nav_msgs__msg__Odometry__init>:
 800f208:	b3d8      	cbz	r0, 800f282 <nav_msgs__msg__Odometry__init+0x7a>
 800f20a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f20c:	4604      	mov	r4, r0
 800f20e:	f004 ff4d 	bl	80140ac <std_msgs__msg__Header__init>
 800f212:	b190      	cbz	r0, 800f23a <nav_msgs__msg__Odometry__init+0x32>
 800f214:	f104 0514 	add.w	r5, r4, #20
 800f218:	4628      	mov	r0, r5
 800f21a:	f004 fe9d 	bl	8013f58 <rosidl_runtime_c__String__init>
 800f21e:	b358      	cbz	r0, 800f278 <nav_msgs__msg__Odometry__init+0x70>
 800f220:	f104 0620 	add.w	r6, r4, #32
 800f224:	4630      	mov	r0, r6
 800f226:	f005 f97b 	bl	8014520 <geometry_msgs__msg__PoseWithCovariance__init>
 800f22a:	b1b8      	cbz	r0, 800f25c <nav_msgs__msg__Odometry__init+0x54>
 800f22c:	f504 77bc 	add.w	r7, r4, #376	@ 0x178
 800f230:	4638      	mov	r0, r7
 800f232:	f005 fb4b 	bl	80148cc <geometry_msgs__msg__TwistWithCovariance__init>
 800f236:	b330      	cbz	r0, 800f286 <nav_msgs__msg__Odometry__init+0x7e>
 800f238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f23a:	4620      	mov	r0, r4
 800f23c:	f004 ff56 	bl	80140ec <std_msgs__msg__Header__fini>
 800f240:	f104 0014 	add.w	r0, r4, #20
 800f244:	f004 fea2 	bl	8013f8c <rosidl_runtime_c__String__fini>
 800f248:	f104 0020 	add.w	r0, r4, #32
 800f24c:	f005 f976 	bl	801453c <geometry_msgs__msg__PoseWithCovariance__fini>
 800f250:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800f254:	f005 fb48 	bl	80148e8 <geometry_msgs__msg__TwistWithCovariance__fini>
 800f258:	2000      	movs	r0, #0
 800f25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f25c:	4620      	mov	r0, r4
 800f25e:	f004 ff45 	bl	80140ec <std_msgs__msg__Header__fini>
 800f262:	4628      	mov	r0, r5
 800f264:	f004 fe92 	bl	8013f8c <rosidl_runtime_c__String__fini>
 800f268:	4630      	mov	r0, r6
 800f26a:	f005 f967 	bl	801453c <geometry_msgs__msg__PoseWithCovariance__fini>
 800f26e:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800f272:	f005 fb39 	bl	80148e8 <geometry_msgs__msg__TwistWithCovariance__fini>
 800f276:	e7ef      	b.n	800f258 <nav_msgs__msg__Odometry__init+0x50>
 800f278:	4620      	mov	r0, r4
 800f27a:	f004 ff37 	bl	80140ec <std_msgs__msg__Header__fini>
 800f27e:	4628      	mov	r0, r5
 800f280:	e7e0      	b.n	800f244 <nav_msgs__msg__Odometry__init+0x3c>
 800f282:	2000      	movs	r0, #0
 800f284:	4770      	bx	lr
 800f286:	4620      	mov	r0, r4
 800f288:	f004 ff30 	bl	80140ec <std_msgs__msg__Header__fini>
 800f28c:	4628      	mov	r0, r5
 800f28e:	f004 fe7d 	bl	8013f8c <rosidl_runtime_c__String__fini>
 800f292:	4630      	mov	r0, r6
 800f294:	f005 f952 	bl	801453c <geometry_msgs__msg__PoseWithCovariance__fini>
 800f298:	4638      	mov	r0, r7
 800f29a:	f005 fb25 	bl	80148e8 <geometry_msgs__msg__TwistWithCovariance__fini>
 800f29e:	e7db      	b.n	800f258 <nav_msgs__msg__Odometry__init+0x50>

0800f2a0 <nav_msgs__msg__Odometry__fini>:
 800f2a0:	b188      	cbz	r0, 800f2c6 <nav_msgs__msg__Odometry__fini+0x26>
 800f2a2:	b510      	push	{r4, lr}
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	f004 ff21 	bl	80140ec <std_msgs__msg__Header__fini>
 800f2aa:	f104 0014 	add.w	r0, r4, #20
 800f2ae:	f004 fe6d 	bl	8013f8c <rosidl_runtime_c__String__fini>
 800f2b2:	f104 0020 	add.w	r0, r4, #32
 800f2b6:	f005 f941 	bl	801453c <geometry_msgs__msg__PoseWithCovariance__fini>
 800f2ba:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800f2be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2c2:	f005 bb11 	b.w	80148e8 <geometry_msgs__msg__TwistWithCovariance__fini>
 800f2c6:	4770      	bx	lr

0800f2c8 <rcl_client_get_rmw_handle>:
 800f2c8:	b118      	cbz	r0, 800f2d2 <rcl_client_get_rmw_handle+0xa>
 800f2ca:	6800      	ldr	r0, [r0, #0]
 800f2cc:	b108      	cbz	r0, 800f2d2 <rcl_client_get_rmw_handle+0xa>
 800f2ce:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f2d2:	4770      	bx	lr

0800f2d4 <rcl_send_request>:
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	d048      	beq.n	800f36a <rcl_send_request+0x96>
 800f2d8:	b570      	push	{r4, r5, r6, lr}
 800f2da:	4604      	mov	r4, r0
 800f2dc:	6800      	ldr	r0, [r0, #0]
 800f2de:	b08a      	sub	sp, #40	@ 0x28
 800f2e0:	b1c0      	cbz	r0, 800f314 <rcl_send_request+0x40>
 800f2e2:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800f2e6:	b1ab      	cbz	r3, 800f314 <rcl_send_request+0x40>
 800f2e8:	460e      	mov	r6, r1
 800f2ea:	b1b9      	cbz	r1, 800f31c <rcl_send_request+0x48>
 800f2ec:	4615      	mov	r5, r2
 800f2ee:	b1aa      	cbz	r2, 800f31c <rcl_send_request+0x48>
 800f2f0:	2105      	movs	r1, #5
 800f2f2:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800f2f6:	f002 ff87 	bl	8012208 <__atomic_load_8>
 800f2fa:	6823      	ldr	r3, [r4, #0]
 800f2fc:	e9c5 0100 	strd	r0, r1, [r5]
 800f300:	462a      	mov	r2, r5
 800f302:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f306:	4631      	mov	r1, r6
 800f308:	f004 f940 	bl	801358c <rmw_send_request>
 800f30c:	b148      	cbz	r0, 800f322 <rcl_send_request+0x4e>
 800f30e:	2001      	movs	r0, #1
 800f310:	b00a      	add	sp, #40	@ 0x28
 800f312:	bd70      	pop	{r4, r5, r6, pc}
 800f314:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800f318:	b00a      	add	sp, #40	@ 0x28
 800f31a:	bd70      	pop	{r4, r5, r6, pc}
 800f31c:	200b      	movs	r0, #11
 800f31e:	b00a      	add	sp, #40	@ 0x28
 800f320:	bd70      	pop	{r4, r5, r6, pc}
 800f322:	6820      	ldr	r0, [r4, #0]
 800f324:	2305      	movs	r3, #5
 800f326:	9300      	str	r3, [sp, #0]
 800f328:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f32c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800f330:	f002 ffd6 	bl	80122e0 <__atomic_exchange_8>
 800f334:	6823      	ldr	r3, [r4, #0]
 800f336:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800f33a:	b1a2      	cbz	r2, 800f366 <rcl_send_request+0x92>
 800f33c:	a905      	add	r1, sp, #20
 800f33e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f342:	f003 fd1f 	bl	8012d84 <rmw_get_gid_for_client>
 800f346:	4601      	mov	r1, r0
 800f348:	b990      	cbnz	r0, 800f370 <rcl_send_request+0x9c>
 800f34a:	6822      	ldr	r2, [r4, #0]
 800f34c:	ab06      	add	r3, sp, #24
 800f34e:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 800f352:	9302      	str	r3, [sp, #8]
 800f354:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f358:	4632      	mov	r2, r6
 800f35a:	e9cd 4500 	strd	r4, r5, [sp]
 800f35e:	f000 fe13 	bl	800ff88 <rcl_send_service_event_message>
 800f362:	2800      	cmp	r0, #0
 800f364:	d1d4      	bne.n	800f310 <rcl_send_request+0x3c>
 800f366:	2000      	movs	r0, #0
 800f368:	e7d2      	b.n	800f310 <rcl_send_request+0x3c>
 800f36a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800f36e:	4770      	bx	lr
 800f370:	f000 f878 	bl	800f464 <rcl_convert_rmw_ret_to_rcl_ret>
 800f374:	e7cc      	b.n	800f310 <rcl_send_request+0x3c>
 800f376:	bf00      	nop

0800f378 <rcl_take_response>:
 800f378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f37a:	468e      	mov	lr, r1
 800f37c:	460c      	mov	r4, r1
 800f37e:	4617      	mov	r7, r2
 800f380:	4605      	mov	r5, r0
 800f382:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f386:	b095      	sub	sp, #84	@ 0x54
 800f388:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 800f38c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f390:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f394:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f398:	2d00      	cmp	r5, #0
 800f39a:	d044      	beq.n	800f426 <rcl_take_response+0xae>
 800f39c:	682b      	ldr	r3, [r5, #0]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d041      	beq.n	800f426 <rcl_take_response+0xae>
 800f3a2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	d03d      	beq.n	800f426 <rcl_take_response+0xae>
 800f3aa:	2f00      	cmp	r7, #0
 800f3ac:	d03e      	beq.n	800f42c <rcl_take_response+0xb4>
 800f3ae:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 800f448 <rcl_take_response+0xd0>
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	f88d 3013 	strb.w	r3, [sp, #19]
 800f3b8:	463a      	mov	r2, r7
 800f3ba:	f10d 0313 	add.w	r3, sp, #19
 800f3be:	a90a      	add	r1, sp, #40	@ 0x28
 800f3c0:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f3c4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f3c8:	f004 f9e0 	bl	801378c <rmw_take_response>
 800f3cc:	4606      	mov	r6, r0
 800f3ce:	bb78      	cbnz	r0, 800f430 <rcl_take_response+0xb8>
 800f3d0:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800f3d4:	b373      	cbz	r3, 800f434 <rcl_take_response+0xbc>
 800f3d6:	682b      	ldr	r3, [r5, #0]
 800f3d8:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800f3dc:	b1aa      	cbz	r2, 800f40a <rcl_take_response+0x92>
 800f3de:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f3e2:	a905      	add	r1, sp, #20
 800f3e4:	f003 fcce 	bl	8012d84 <rmw_get_gid_for_client>
 800f3e8:	bb38      	cbnz	r0, 800f43a <rcl_take_response+0xc2>
 800f3ea:	682b      	ldr	r3, [r5, #0]
 800f3ec:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 800f3f0:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 800f3f4:	ab06      	add	r3, sp, #24
 800f3f6:	ed8d 7b00 	vstr	d7, [sp]
 800f3fa:	463a      	mov	r2, r7
 800f3fc:	9302      	str	r3, [sp, #8]
 800f3fe:	2103      	movs	r1, #3
 800f400:	f000 fdc2 	bl	800ff88 <rcl_send_service_event_message>
 800f404:	2800      	cmp	r0, #0
 800f406:	bf18      	it	ne
 800f408:	4606      	movne	r6, r0
 800f40a:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 800f40e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f412:	46a4      	mov	ip, r4
 800f414:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f418:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f41c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f420:	4630      	mov	r0, r6
 800f422:	b015      	add	sp, #84	@ 0x54
 800f424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f426:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800f42a:	e7ee      	b.n	800f40a <rcl_take_response+0x92>
 800f42c:	260b      	movs	r6, #11
 800f42e:	e7ec      	b.n	800f40a <rcl_take_response+0x92>
 800f430:	2601      	movs	r6, #1
 800f432:	e7ea      	b.n	800f40a <rcl_take_response+0x92>
 800f434:	f240 16f5 	movw	r6, #501	@ 0x1f5
 800f438:	e7e7      	b.n	800f40a <rcl_take_response+0x92>
 800f43a:	f000 f813 	bl	800f464 <rcl_convert_rmw_ret_to_rcl_ret>
 800f43e:	4606      	mov	r6, r0
 800f440:	e7e3      	b.n	800f40a <rcl_take_response+0x92>
 800f442:	bf00      	nop
 800f444:	f3af 8000 	nop.w
	...

0800f450 <rcl_client_is_valid>:
 800f450:	b130      	cbz	r0, 800f460 <rcl_client_is_valid+0x10>
 800f452:	6800      	ldr	r0, [r0, #0]
 800f454:	b120      	cbz	r0, 800f460 <rcl_client_is_valid+0x10>
 800f456:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f45a:	3800      	subs	r0, #0
 800f45c:	bf18      	it	ne
 800f45e:	2001      	movne	r0, #1
 800f460:	4770      	bx	lr
 800f462:	bf00      	nop

0800f464 <rcl_convert_rmw_ret_to_rcl_ret>:
 800f464:	280b      	cmp	r0, #11
 800f466:	dc0d      	bgt.n	800f484 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800f468:	2800      	cmp	r0, #0
 800f46a:	db09      	blt.n	800f480 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f46c:	280b      	cmp	r0, #11
 800f46e:	d807      	bhi.n	800f480 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f470:	e8df f000 	tbb	[pc, r0]
 800f474:	07060607 	.word	0x07060607
 800f478:	06060606 	.word	0x06060606
 800f47c:	07070606 	.word	0x07070606
 800f480:	2001      	movs	r0, #1
 800f482:	4770      	bx	lr
 800f484:	28cb      	cmp	r0, #203	@ 0xcb
 800f486:	bf14      	ite	ne
 800f488:	2001      	movne	r0, #1
 800f48a:	20cb      	moveq	r0, #203	@ 0xcb
 800f48c:	4770      	bx	lr
 800f48e:	bf00      	nop

0800f490 <rcl_get_zero_initialized_context>:
 800f490:	2200      	movs	r2, #0
 800f492:	e9c0 2200 	strd	r2, r2, [r0]
 800f496:	4770      	bx	lr

0800f498 <rcl_context_is_valid>:
 800f498:	b118      	cbz	r0, 800f4a2 <rcl_context_is_valid+0xa>
 800f49a:	6840      	ldr	r0, [r0, #4]
 800f49c:	3800      	subs	r0, #0
 800f49e:	bf18      	it	ne
 800f4a0:	2001      	movne	r0, #1
 800f4a2:	4770      	bx	lr

0800f4a4 <__cleanup_context>:
 800f4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4a8:	4606      	mov	r6, r0
 800f4aa:	6800      	ldr	r0, [r0, #0]
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	6073      	str	r3, [r6, #4]
 800f4b0:	2800      	cmp	r0, #0
 800f4b2:	d042      	beq.n	800f53a <__cleanup_context+0x96>
 800f4b4:	6943      	ldr	r3, [r0, #20]
 800f4b6:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800f4ba:	6907      	ldr	r7, [r0, #16]
 800f4bc:	b39b      	cbz	r3, 800f526 <__cleanup_context+0x82>
 800f4be:	3014      	adds	r0, #20
 800f4c0:	f000 f9b2 	bl	800f828 <rcl_init_options_fini>
 800f4c4:	4680      	mov	r8, r0
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	d144      	bne.n	800f554 <__cleanup_context+0xb0>
 800f4ca:	6830      	ldr	r0, [r6, #0]
 800f4cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f4ce:	b123      	cbz	r3, 800f4da <__cleanup_context+0x36>
 800f4d0:	3028      	adds	r0, #40	@ 0x28
 800f4d2:	f003 fe9f 	bl	8013214 <rmw_context_fini>
 800f4d6:	bbb8      	cbnz	r0, 800f548 <__cleanup_context+0xa4>
 800f4d8:	6830      	ldr	r0, [r6, #0]
 800f4da:	6a03      	ldr	r3, [r0, #32]
 800f4dc:	b1db      	cbz	r3, 800f516 <__cleanup_context+0x72>
 800f4de:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800f4e2:	2a01      	cmp	r2, #1
 800f4e4:	f17c 0100 	sbcs.w	r1, ip, #0
 800f4e8:	db11      	blt.n	800f50e <__cleanup_context+0x6a>
 800f4ea:	2400      	movs	r4, #0
 800f4ec:	4625      	mov	r5, r4
 800f4ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f4f2:	4639      	mov	r1, r7
 800f4f4:	b1c8      	cbz	r0, 800f52a <__cleanup_context+0x86>
 800f4f6:	47c8      	blx	r9
 800f4f8:	6833      	ldr	r3, [r6, #0]
 800f4fa:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800f4fe:	3401      	adds	r4, #1
 800f500:	f145 0500 	adc.w	r5, r5, #0
 800f504:	4294      	cmp	r4, r2
 800f506:	eb75 010c 	sbcs.w	r1, r5, ip
 800f50a:	6a1b      	ldr	r3, [r3, #32]
 800f50c:	dbef      	blt.n	800f4ee <__cleanup_context+0x4a>
 800f50e:	4618      	mov	r0, r3
 800f510:	4639      	mov	r1, r7
 800f512:	47c8      	blx	r9
 800f514:	6830      	ldr	r0, [r6, #0]
 800f516:	4639      	mov	r1, r7
 800f518:	47c8      	blx	r9
 800f51a:	2300      	movs	r3, #0
 800f51c:	e9c6 3300 	strd	r3, r3, [r6]
 800f520:	4640      	mov	r0, r8
 800f522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f526:	4698      	mov	r8, r3
 800f528:	e7d0      	b.n	800f4cc <__cleanup_context+0x28>
 800f52a:	3401      	adds	r4, #1
 800f52c:	f145 0500 	adc.w	r5, r5, #0
 800f530:	4294      	cmp	r4, r2
 800f532:	eb75 010c 	sbcs.w	r1, r5, ip
 800f536:	dbda      	blt.n	800f4ee <__cleanup_context+0x4a>
 800f538:	e7e9      	b.n	800f50e <__cleanup_context+0x6a>
 800f53a:	4680      	mov	r8, r0
 800f53c:	2300      	movs	r3, #0
 800f53e:	e9c6 3300 	strd	r3, r3, [r6]
 800f542:	4640      	mov	r0, r8
 800f544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f548:	f1b8 0f00 	cmp.w	r8, #0
 800f54c:	d005      	beq.n	800f55a <__cleanup_context+0xb6>
 800f54e:	f7fb f913 	bl	800a778 <rcutils_reset_error>
 800f552:	e7c1      	b.n	800f4d8 <__cleanup_context+0x34>
 800f554:	f7fb f910 	bl	800a778 <rcutils_reset_error>
 800f558:	e7b7      	b.n	800f4ca <__cleanup_context+0x26>
 800f55a:	f7ff ff83 	bl	800f464 <rcl_convert_rmw_ret_to_rcl_ret>
 800f55e:	4680      	mov	r8, r0
 800f560:	e7f5      	b.n	800f54e <__cleanup_context+0xaa>
 800f562:	bf00      	nop

0800f564 <rcl_init>:
 800f564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f568:	1e04      	subs	r4, r0, #0
 800f56a:	b0a5      	sub	sp, #148	@ 0x94
 800f56c:	460d      	mov	r5, r1
 800f56e:	4617      	mov	r7, r2
 800f570:	461e      	mov	r6, r3
 800f572:	dd13      	ble.n	800f59c <rcl_init+0x38>
 800f574:	b161      	cbz	r1, 800f590 <rcl_init+0x2c>
 800f576:	f1a1 0e04 	sub.w	lr, r1, #4
 800f57a:	f04f 0c00 	mov.w	ip, #0
 800f57e:	e001      	b.n	800f584 <rcl_init+0x20>
 800f580:	4564      	cmp	r4, ip
 800f582:	d00d      	beq.n	800f5a0 <rcl_init+0x3c>
 800f584:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 800f588:	f10c 0c01 	add.w	ip, ip, #1
 800f58c:	2800      	cmp	r0, #0
 800f58e:	d1f7      	bne.n	800f580 <rcl_init+0x1c>
 800f590:	f04f 080b 	mov.w	r8, #11
 800f594:	4640      	mov	r0, r8
 800f596:	b025      	add	sp, #148	@ 0x94
 800f598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f59c:	2900      	cmp	r1, #0
 800f59e:	d1f7      	bne.n	800f590 <rcl_init+0x2c>
 800f5a0:	2f00      	cmp	r7, #0
 800f5a2:	d0f5      	beq.n	800f590 <rcl_init+0x2c>
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d0f2      	beq.n	800f590 <rcl_init+0x2c>
 800f5aa:	469c      	mov	ip, r3
 800f5ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f5b0:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 800f5b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f5b8:	f8dc 3000 	ldr.w	r3, [ip]
 800f5bc:	f8ce 3000 	str.w	r3, [lr]
 800f5c0:	a81f      	add	r0, sp, #124	@ 0x7c
 800f5c2:	f7fb f8ad 	bl	800a720 <rcutils_allocator_is_valid>
 800f5c6:	2800      	cmp	r0, #0
 800f5c8:	d0e2      	beq.n	800f590 <rcl_init+0x2c>
 800f5ca:	2e00      	cmp	r6, #0
 800f5cc:	d0e0      	beq.n	800f590 <rcl_init+0x2c>
 800f5ce:	6833      	ldr	r3, [r6, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d173      	bne.n	800f6bc <rcl_init+0x158>
 800f5d4:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 800f5d8:	2198      	movs	r1, #152	@ 0x98
 800f5da:	2001      	movs	r0, #1
 800f5dc:	4798      	blx	r3
 800f5de:	4680      	mov	r8, r0
 800f5e0:	6030      	str	r0, [r6, #0]
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	f000 80ac 	beq.w	800f740 <rcl_init+0x1dc>
 800f5e8:	a802      	add	r0, sp, #8
 800f5ea:	f003 f965 	bl	80128b8 <rmw_get_zero_initialized_context>
 800f5ee:	a902      	add	r1, sp, #8
 800f5f0:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 800f5f4:	2270      	movs	r2, #112	@ 0x70
 800f5f6:	f008 fcf2 	bl	8017fde <memcpy>
 800f5fa:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 800f5fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f602:	f8d6 8000 	ldr.w	r8, [r6]
 800f606:	46c4      	mov	ip, r8
 800f608:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f60c:	f8de 3000 	ldr.w	r3, [lr]
 800f610:	f8cc 3000 	str.w	r3, [ip]
 800f614:	f108 0114 	add.w	r1, r8, #20
 800f618:	4638      	mov	r0, r7
 800f61a:	f000 f92f 	bl	800f87c <rcl_init_options_copy>
 800f61e:	4680      	mov	r8, r0
 800f620:	2800      	cmp	r0, #0
 800f622:	d147      	bne.n	800f6b4 <rcl_init+0x150>
 800f624:	f8d6 9000 	ldr.w	r9, [r6]
 800f628:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 800f62c:	f8c9 0020 	str.w	r0, [r9, #32]
 800f630:	f8c9 4018 	str.w	r4, [r9, #24]
 800f634:	f8c9 a01c 	str.w	sl, [r9, #28]
 800f638:	2c00      	cmp	r4, #0
 800f63a:	d047      	beq.n	800f6cc <rcl_init+0x168>
 800f63c:	2d00      	cmp	r5, #0
 800f63e:	d045      	beq.n	800f6cc <rcl_init+0x168>
 800f640:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 800f644:	2104      	movs	r1, #4
 800f646:	4620      	mov	r0, r4
 800f648:	4798      	blx	r3
 800f64a:	f8c9 0020 	str.w	r0, [r9, #32]
 800f64e:	f8d6 9000 	ldr.w	r9, [r6]
 800f652:	f8d9 b020 	ldr.w	fp, [r9, #32]
 800f656:	f1bb 0f00 	cmp.w	fp, #0
 800f65a:	d029      	beq.n	800f6b0 <rcl_init+0x14c>
 800f65c:	2c01      	cmp	r4, #1
 800f65e:	f17a 0300 	sbcs.w	r3, sl, #0
 800f662:	db33      	blt.n	800f6cc <rcl_init+0x168>
 800f664:	f04f 0800 	mov.w	r8, #0
 800f668:	3d04      	subs	r5, #4
 800f66a:	46c1      	mov	r9, r8
 800f66c:	e00d      	b.n	800f68a <rcl_init+0x126>
 800f66e:	6829      	ldr	r1, [r5, #0]
 800f670:	f008 fcb5 	bl	8017fde <memcpy>
 800f674:	f118 0801 	adds.w	r8, r8, #1
 800f678:	f149 0900 	adc.w	r9, r9, #0
 800f67c:	45ca      	cmp	sl, r9
 800f67e:	bf08      	it	eq
 800f680:	4544      	cmpeq	r4, r8
 800f682:	d021      	beq.n	800f6c8 <rcl_init+0x164>
 800f684:	6833      	ldr	r3, [r6, #0]
 800f686:	f8d3 b020 	ldr.w	fp, [r3, #32]
 800f68a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f68e:	f7f0 fe07 	bl	80002a0 <strlen>
 800f692:	1c42      	adds	r2, r0, #1
 800f694:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f696:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 800f698:	9201      	str	r2, [sp, #4]
 800f69a:	4610      	mov	r0, r2
 800f69c:	4798      	blx	r3
 800f69e:	6833      	ldr	r3, [r6, #0]
 800f6a0:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 800f6a4:	6a1b      	ldr	r3, [r3, #32]
 800f6a6:	9a01      	ldr	r2, [sp, #4]
 800f6a8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	d1de      	bne.n	800f66e <rcl_init+0x10a>
 800f6b0:	f04f 080a 	mov.w	r8, #10
 800f6b4:	4630      	mov	r0, r6
 800f6b6:	f7ff fef5 	bl	800f4a4 <__cleanup_context>
 800f6ba:	e76b      	b.n	800f594 <rcl_init+0x30>
 800f6bc:	f04f 0864 	mov.w	r8, #100	@ 0x64
 800f6c0:	4640      	mov	r0, r8
 800f6c2:	b025      	add	sp, #148	@ 0x94
 800f6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6c8:	f8d6 9000 	ldr.w	r9, [r6]
 800f6cc:	4a26      	ldr	r2, [pc, #152]	@ (800f768 <rcl_init+0x204>)
 800f6ce:	6813      	ldr	r3, [r2, #0]
 800f6d0:	3301      	adds	r3, #1
 800f6d2:	d030      	beq.n	800f736 <rcl_init+0x1d2>
 800f6d4:	461d      	mov	r5, r3
 800f6d6:	2000      	movs	r0, #0
 800f6d8:	4619      	mov	r1, r3
 800f6da:	f8d9 4014 	ldr.w	r4, [r9, #20]
 800f6de:	6073      	str	r3, [r6, #4]
 800f6e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f6e2:	6011      	str	r1, [r2, #0]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	e9c4 5006 	strd	r5, r0, [r4, #24]
 800f6ea:	d033      	beq.n	800f754 <rcl_init+0x1f0>
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f6f2:	f104 0530 	add.w	r5, r4, #48	@ 0x30
 800f6f6:	b333      	cbz	r3, 800f746 <rcl_init+0x1e2>
 800f6f8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800f6fa:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 800f6fe:	b953      	cbnz	r3, 800f716 <rcl_init+0x1b2>
 800f700:	2801      	cmp	r0, #1
 800f702:	d008      	beq.n	800f716 <rcl_init+0x1b2>
 800f704:	a91f      	add	r1, sp, #124	@ 0x7c
 800f706:	4628      	mov	r0, r5
 800f708:	f006 fee0 	bl	80164cc <rcl_get_discovery_static_peers>
 800f70c:	4680      	mov	r8, r0
 800f70e:	2800      	cmp	r0, #0
 800f710:	d1d0      	bne.n	800f6b4 <rcl_init+0x150>
 800f712:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 800f716:	f006 fecf 	bl	80164b8 <rcl_automatic_discovery_range_to_string>
 800f71a:	6831      	ldr	r1, [r6, #0]
 800f71c:	6948      	ldr	r0, [r1, #20]
 800f71e:	3128      	adds	r1, #40	@ 0x28
 800f720:	3018      	adds	r0, #24
 800f722:	f003 fc43 	bl	8012fac <rmw_init>
 800f726:	4680      	mov	r8, r0
 800f728:	2800      	cmp	r0, #0
 800f72a:	f43f af33 	beq.w	800f594 <rcl_init+0x30>
 800f72e:	f7ff fe99 	bl	800f464 <rcl_convert_rmw_ret_to_rcl_ret>
 800f732:	4680      	mov	r8, r0
 800f734:	e7be      	b.n	800f6b4 <rcl_init+0x150>
 800f736:	2101      	movs	r1, #1
 800f738:	4618      	mov	r0, r3
 800f73a:	460d      	mov	r5, r1
 800f73c:	460b      	mov	r3, r1
 800f73e:	e7cc      	b.n	800f6da <rcl_init+0x176>
 800f740:	f04f 080a 	mov.w	r8, #10
 800f744:	e726      	b.n	800f594 <rcl_init+0x30>
 800f746:	4628      	mov	r0, r5
 800f748:	f006 fe74 	bl	8016434 <rcl_get_automatic_discovery_range>
 800f74c:	4680      	mov	r8, r0
 800f74e:	2800      	cmp	r0, #0
 800f750:	d0d2      	beq.n	800f6f8 <rcl_init+0x194>
 800f752:	e7af      	b.n	800f6b4 <rcl_init+0x150>
 800f754:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f758:	f006 ff22 	bl	80165a0 <rcl_get_default_domain_id>
 800f75c:	4680      	mov	r8, r0
 800f75e:	2800      	cmp	r0, #0
 800f760:	d1a8      	bne.n	800f6b4 <rcl_init+0x150>
 800f762:	6833      	ldr	r3, [r6, #0]
 800f764:	695c      	ldr	r4, [r3, #20]
 800f766:	e7c1      	b.n	800f6ec <rcl_init+0x188>
 800f768:	20010ca0 	.word	0x20010ca0

0800f76c <rcl_get_zero_initialized_init_options>:
 800f76c:	2000      	movs	r0, #0
 800f76e:	4770      	bx	lr

0800f770 <rcl_init_options_init>:
 800f770:	b084      	sub	sp, #16
 800f772:	b570      	push	{r4, r5, r6, lr}
 800f774:	b09e      	sub	sp, #120	@ 0x78
 800f776:	ad23      	add	r5, sp, #140	@ 0x8c
 800f778:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800f77c:	2800      	cmp	r0, #0
 800f77e:	d046      	beq.n	800f80e <rcl_init_options_init+0x9e>
 800f780:	6803      	ldr	r3, [r0, #0]
 800f782:	4604      	mov	r4, r0
 800f784:	b133      	cbz	r3, 800f794 <rcl_init_options_init+0x24>
 800f786:	2564      	movs	r5, #100	@ 0x64
 800f788:	4628      	mov	r0, r5
 800f78a:	b01e      	add	sp, #120	@ 0x78
 800f78c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f790:	b004      	add	sp, #16
 800f792:	4770      	bx	lr
 800f794:	4628      	mov	r0, r5
 800f796:	f7fa ffc3 	bl	800a720 <rcutils_allocator_is_valid>
 800f79a:	2800      	cmp	r0, #0
 800f79c:	d037      	beq.n	800f80e <rcl_init_options_init+0x9e>
 800f79e:	46ae      	mov	lr, r5
 800f7a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f7a4:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800f7a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f7ac:	f8de 3000 	ldr.w	r3, [lr]
 800f7b0:	f8cc 3000 	str.w	r3, [ip]
 800f7b4:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800f7b6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f7b8:	2070      	movs	r0, #112	@ 0x70
 800f7ba:	4798      	blx	r3
 800f7bc:	4606      	mov	r6, r0
 800f7be:	6020      	str	r0, [r4, #0]
 800f7c0:	b338      	cbz	r0, 800f812 <rcl_init_options_init+0xa2>
 800f7c2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800f7c6:	4686      	mov	lr, r0
 800f7c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f7cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f7d0:	f8dc 3000 	ldr.w	r3, [ip]
 800f7d4:	f8ce 3000 	str.w	r3, [lr]
 800f7d8:	a802      	add	r0, sp, #8
 800f7da:	f003 f877 	bl	80128cc <rmw_get_zero_initialized_init_options>
 800f7de:	2258      	movs	r2, #88	@ 0x58
 800f7e0:	a902      	add	r1, sp, #8
 800f7e2:	f106 0018 	add.w	r0, r6, #24
 800f7e6:	f008 fbfa 	bl	8017fde <memcpy>
 800f7ea:	ab26      	add	r3, sp, #152	@ 0x98
 800f7ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f7f0:	6826      	ldr	r6, [r4, #0]
 800f7f2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f7f6:	f106 0018 	add.w	r0, r6, #24
 800f7fa:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800f7fe:	f003 fae5 	bl	8012dcc <rmw_init_options_init>
 800f802:	4605      	mov	r5, r0
 800f804:	b938      	cbnz	r0, 800f816 <rcl_init_options_init+0xa6>
 800f806:	6823      	ldr	r3, [r4, #0]
 800f808:	f883 0030 	strb.w	r0, [r3, #48]	@ 0x30
 800f80c:	e7bc      	b.n	800f788 <rcl_init_options_init+0x18>
 800f80e:	250b      	movs	r5, #11
 800f810:	e7ba      	b.n	800f788 <rcl_init_options_init+0x18>
 800f812:	250a      	movs	r5, #10
 800f814:	e7b8      	b.n	800f788 <rcl_init_options_init+0x18>
 800f816:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f818:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800f81a:	6820      	ldr	r0, [r4, #0]
 800f81c:	4798      	blx	r3
 800f81e:	4628      	mov	r0, r5
 800f820:	f7ff fe20 	bl	800f464 <rcl_convert_rmw_ret_to_rcl_ret>
 800f824:	4605      	mov	r5, r0
 800f826:	e7af      	b.n	800f788 <rcl_init_options_init+0x18>

0800f828 <rcl_init_options_fini>:
 800f828:	b530      	push	{r4, r5, lr}
 800f82a:	b087      	sub	sp, #28
 800f82c:	b1f0      	cbz	r0, 800f86c <rcl_init_options_fini+0x44>
 800f82e:	6803      	ldr	r3, [r0, #0]
 800f830:	4604      	mov	r4, r0
 800f832:	b1db      	cbz	r3, 800f86c <rcl_init_options_fini+0x44>
 800f834:	469c      	mov	ip, r3
 800f836:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f83a:	f10d 0e04 	add.w	lr, sp, #4
 800f83e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f842:	f8dc 3000 	ldr.w	r3, [ip]
 800f846:	f8ce 3000 	str.w	r3, [lr]
 800f84a:	a801      	add	r0, sp, #4
 800f84c:	f7fa ff68 	bl	800a720 <rcutils_allocator_is_valid>
 800f850:	b160      	cbz	r0, 800f86c <rcl_init_options_fini+0x44>
 800f852:	6820      	ldr	r0, [r4, #0]
 800f854:	3018      	adds	r0, #24
 800f856:	f003 fb6b 	bl	8012f30 <rmw_init_options_fini>
 800f85a:	4605      	mov	r5, r0
 800f85c:	b950      	cbnz	r0, 800f874 <rcl_init_options_fini+0x4c>
 800f85e:	6820      	ldr	r0, [r4, #0]
 800f860:	9b02      	ldr	r3, [sp, #8]
 800f862:	9905      	ldr	r1, [sp, #20]
 800f864:	4798      	blx	r3
 800f866:	4628      	mov	r0, r5
 800f868:	b007      	add	sp, #28
 800f86a:	bd30      	pop	{r4, r5, pc}
 800f86c:	250b      	movs	r5, #11
 800f86e:	4628      	mov	r0, r5
 800f870:	b007      	add	sp, #28
 800f872:	bd30      	pop	{r4, r5, pc}
 800f874:	f7ff fdf6 	bl	800f464 <rcl_convert_rmw_ret_to_rcl_ret>
 800f878:	4605      	mov	r5, r0
 800f87a:	e7f8      	b.n	800f86e <rcl_init_options_fini+0x46>

0800f87c <rcl_init_options_copy>:
 800f87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f87e:	b09d      	sub	sp, #116	@ 0x74
 800f880:	2800      	cmp	r0, #0
 800f882:	d04a      	beq.n	800f91a <rcl_init_options_copy+0x9e>
 800f884:	4604      	mov	r4, r0
 800f886:	6800      	ldr	r0, [r0, #0]
 800f888:	2800      	cmp	r0, #0
 800f88a:	d046      	beq.n	800f91a <rcl_init_options_copy+0x9e>
 800f88c:	460d      	mov	r5, r1
 800f88e:	f7fa ff47 	bl	800a720 <rcutils_allocator_is_valid>
 800f892:	2800      	cmp	r0, #0
 800f894:	d041      	beq.n	800f91a <rcl_init_options_copy+0x9e>
 800f896:	2d00      	cmp	r5, #0
 800f898:	d03f      	beq.n	800f91a <rcl_init_options_copy+0x9e>
 800f89a:	682b      	ldr	r3, [r5, #0]
 800f89c:	b11b      	cbz	r3, 800f8a6 <rcl_init_options_copy+0x2a>
 800f89e:	2464      	movs	r4, #100	@ 0x64
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	b01d      	add	sp, #116	@ 0x74
 800f8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8a6:	6826      	ldr	r6, [r4, #0]
 800f8a8:	46b6      	mov	lr, r6
 800f8aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f8ae:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800f8b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8b6:	f8de 3000 	ldr.w	r3, [lr]
 800f8ba:	6837      	ldr	r7, [r6, #0]
 800f8bc:	f8cc 3000 	str.w	r3, [ip]
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	2070      	movs	r0, #112	@ 0x70
 800f8c4:	47b8      	blx	r7
 800f8c6:	4606      	mov	r6, r0
 800f8c8:	6028      	str	r0, [r5, #0]
 800f8ca:	b350      	cbz	r0, 800f922 <rcl_init_options_copy+0xa6>
 800f8cc:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800f8d0:	4686      	mov	lr, r0
 800f8d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f8d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f8da:	f8dc 3000 	ldr.w	r3, [ip]
 800f8de:	f8ce 3000 	str.w	r3, [lr]
 800f8e2:	4668      	mov	r0, sp
 800f8e4:	f002 fff2 	bl	80128cc <rmw_get_zero_initialized_init_options>
 800f8e8:	2258      	movs	r2, #88	@ 0x58
 800f8ea:	4669      	mov	r1, sp
 800f8ec:	f106 0018 	add.w	r0, r6, #24
 800f8f0:	f008 fb75 	bl	8017fde <memcpy>
 800f8f4:	6820      	ldr	r0, [r4, #0]
 800f8f6:	6829      	ldr	r1, [r5, #0]
 800f8f8:	3018      	adds	r0, #24
 800f8fa:	3118      	adds	r1, #24
 800f8fc:	f003 fac8 	bl	8012e90 <rmw_init_options_copy>
 800f900:	4604      	mov	r4, r0
 800f902:	2800      	cmp	r0, #0
 800f904:	d0cc      	beq.n	800f8a0 <rcl_init_options_copy+0x24>
 800f906:	f7fa ff1f 	bl	800a748 <rcutils_get_error_string>
 800f90a:	f7fa ff35 	bl	800a778 <rcutils_reset_error>
 800f90e:	4628      	mov	r0, r5
 800f910:	f7ff ff8a 	bl	800f828 <rcl_init_options_fini>
 800f914:	b138      	cbz	r0, 800f926 <rcl_init_options_copy+0xaa>
 800f916:	4604      	mov	r4, r0
 800f918:	e7c2      	b.n	800f8a0 <rcl_init_options_copy+0x24>
 800f91a:	240b      	movs	r4, #11
 800f91c:	4620      	mov	r0, r4
 800f91e:	b01d      	add	sp, #116	@ 0x74
 800f920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f922:	240a      	movs	r4, #10
 800f924:	e7bc      	b.n	800f8a0 <rcl_init_options_copy+0x24>
 800f926:	4620      	mov	r0, r4
 800f928:	b01d      	add	sp, #116	@ 0x74
 800f92a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f92e:	f7ff bd99 	b.w	800f464 <rcl_convert_rmw_ret_to_rcl_ret>
 800f932:	bf00      	nop

0800f934 <rcl_get_zero_initialized_node>:
 800f934:	4a03      	ldr	r2, [pc, #12]	@ (800f944 <rcl_get_zero_initialized_node+0x10>)
 800f936:	4603      	mov	r3, r0
 800f938:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f93c:	e883 0003 	stmia.w	r3, {r0, r1}
 800f940:	4618      	mov	r0, r3
 800f942:	4770      	bx	lr
 800f944:	08019c80 	.word	0x08019c80

0800f948 <rcl_node_init>:
 800f948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f94c:	b0ab      	sub	sp, #172	@ 0xac
 800f94e:	4604      	mov	r4, r0
 800f950:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 800f952:	a825      	add	r0, sp, #148	@ 0x94
 800f954:	4689      	mov	r9, r1
 800f956:	4690      	mov	r8, r2
 800f958:	461f      	mov	r7, r3
 800f95a:	f007 f893 	bl	8016a84 <rcl_guard_condition_get_default_options>
 800f95e:	2d00      	cmp	r5, #0
 800f960:	f000 80d8 	beq.w	800fb14 <rcl_node_init+0x1cc>
 800f964:	4628      	mov	r0, r5
 800f966:	f7fa fedb 	bl	800a720 <rcutils_allocator_is_valid>
 800f96a:	2800      	cmp	r0, #0
 800f96c:	f000 80d2 	beq.w	800fb14 <rcl_node_init+0x1cc>
 800f970:	f1b9 0f00 	cmp.w	r9, #0
 800f974:	f000 80ce 	beq.w	800fb14 <rcl_node_init+0x1cc>
 800f978:	f1b8 0f00 	cmp.w	r8, #0
 800f97c:	f000 80ca 	beq.w	800fb14 <rcl_node_init+0x1cc>
 800f980:	2c00      	cmp	r4, #0
 800f982:	f000 80c7 	beq.w	800fb14 <rcl_node_init+0x1cc>
 800f986:	6866      	ldr	r6, [r4, #4]
 800f988:	2e00      	cmp	r6, #0
 800f98a:	f040 80ca 	bne.w	800fb22 <rcl_node_init+0x1da>
 800f98e:	2f00      	cmp	r7, #0
 800f990:	f000 80c0 	beq.w	800fb14 <rcl_node_init+0x1cc>
 800f994:	4638      	mov	r0, r7
 800f996:	f7ff fd7f 	bl	800f498 <rcl_context_is_valid>
 800f99a:	2800      	cmp	r0, #0
 800f99c:	f000 80bf 	beq.w	800fb1e <rcl_node_init+0x1d6>
 800f9a0:	4632      	mov	r2, r6
 800f9a2:	a924      	add	r1, sp, #144	@ 0x90
 800f9a4:	4648      	mov	r0, r9
 800f9a6:	9624      	str	r6, [sp, #144]	@ 0x90
 800f9a8:	f003 f92c 	bl	8012c04 <rmw_validate_node_name>
 800f9ac:	4606      	mov	r6, r0
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	f040 80b1 	bne.w	800fb16 <rcl_node_init+0x1ce>
 800f9b4:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	f040 8104 	bne.w	800fbc4 <rcl_node_init+0x27c>
 800f9bc:	f898 3000 	ldrb.w	r3, [r8]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	f000 80f0 	beq.w	800fba6 <rcl_node_init+0x25e>
 800f9c6:	2b2f      	cmp	r3, #47	@ 0x2f
 800f9c8:	f000 80b0 	beq.w	800fb2c <rcl_node_init+0x1e4>
 800f9cc:	4b85      	ldr	r3, [pc, #532]	@ (800fbe4 <rcl_node_init+0x29c>)
 800f9ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9d2:	9302      	str	r3, [sp, #8]
 800f9d4:	692b      	ldr	r3, [r5, #16]
 800f9d6:	9300      	str	r3, [sp, #0]
 800f9d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f9dc:	9301      	str	r3, [sp, #4]
 800f9de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f9e2:	f002 fccf 	bl	8012384 <rcutils_format_string_limit>
 800f9e6:	4680      	mov	r8, r0
 800f9e8:	f1b8 0f00 	cmp.w	r8, #0
 800f9ec:	f000 80e8 	beq.w	800fbc0 <rcl_node_init+0x278>
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	a924      	add	r1, sp, #144	@ 0x90
 800f9f4:	4640      	mov	r0, r8
 800f9f6:	9224      	str	r2, [sp, #144]	@ 0x90
 800f9f8:	f003 f8e6 	bl	8012bc8 <rmw_validate_namespace>
 800f9fc:	4606      	mov	r6, r0
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	f040 80a4 	bne.w	800fb4c <rcl_node_init+0x204>
 800fa04:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800fa06:	2800      	cmp	r0, #0
 800fa08:	f040 809d 	bne.w	800fb46 <rcl_node_init+0x1fe>
 800fa0c:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 800fa10:	2178      	movs	r1, #120	@ 0x78
 800fa12:	2001      	movs	r0, #1
 800fa14:	4798      	blx	r3
 800fa16:	4606      	mov	r6, r0
 800fa18:	6060      	str	r0, [r4, #4]
 800fa1a:	2800      	cmp	r0, #0
 800fa1c:	f000 80d6 	beq.w	800fbcc <rcl_node_init+0x284>
 800fa20:	a80a      	add	r0, sp, #40	@ 0x28
 800fa22:	f000 f92f 	bl	800fc84 <rcl_node_get_default_options>
 800fa26:	a90a      	add	r1, sp, #40	@ 0x28
 800fa28:	4630      	mov	r0, r6
 800fa2a:	2268      	movs	r2, #104	@ 0x68
 800fa2c:	f008 fad7 	bl	8017fde <memcpy>
 800fa30:	6861      	ldr	r1, [r4, #4]
 800fa32:	6027      	str	r7, [r4, #0]
 800fa34:	4628      	mov	r0, r5
 800fa36:	f000 f933 	bl	800fca0 <rcl_node_options_copy>
 800fa3a:	4606      	mov	r6, r0
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	f040 8085 	bne.w	800fb4c <rcl_node_init+0x204>
 800fa42:	4640      	mov	r0, r8
 800fa44:	f7f0 fc2c 	bl	80002a0 <strlen>
 800fa48:	eb08 0300 	add.w	r3, r8, r0
 800fa4c:	6866      	ldr	r6, [r4, #4]
 800fa4e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fa52:	e9cd 8903 	strd	r8, r9, [sp, #12]
 800fa56:	2b2f      	cmp	r3, #47	@ 0x2f
 800fa58:	bf0c      	ite	eq
 800fa5a:	4b63      	ldreq	r3, [pc, #396]	@ (800fbe8 <rcl_node_init+0x2a0>)
 800fa5c:	4b63      	ldrne	r3, [pc, #396]	@ (800fbec <rcl_node_init+0x2a4>)
 800fa5e:	9302      	str	r3, [sp, #8]
 800fa60:	692b      	ldr	r3, [r5, #16]
 800fa62:	9300      	str	r3, [sp, #0]
 800fa64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fa68:	9301      	str	r3, [sp, #4]
 800fa6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fa6e:	f002 fc89 	bl	8012384 <rcutils_format_string_limit>
 800fa72:	6863      	ldr	r3, [r4, #4]
 800fa74:	6770      	str	r0, [r6, #116]	@ 0x74
 800fa76:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800fa78:	2a00      	cmp	r2, #0
 800fa7a:	f000 80a9 	beq.w	800fbd0 <rcl_node_init+0x288>
 800fa7e:	6822      	ldr	r2, [r4, #0]
 800fa80:	9307      	str	r3, [sp, #28]
 800fa82:	6810      	ldr	r0, [r2, #0]
 800fa84:	4649      	mov	r1, r9
 800fa86:	3028      	adds	r0, #40	@ 0x28
 800fa88:	4642      	mov	r2, r8
 800fa8a:	f003 fce7 	bl	801345c <rmw_create_node>
 800fa8e:	9b07      	ldr	r3, [sp, #28]
 800fa90:	6698      	str	r0, [r3, #104]	@ 0x68
 800fa92:	6863      	ldr	r3, [r4, #4]
 800fa94:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800fa96:	2800      	cmp	r0, #0
 800fa98:	f000 809d 	beq.w	800fbd6 <rcl_node_init+0x28e>
 800fa9c:	f003 fd70 	bl	8013580 <rmw_node_get_graph_guard_condition>
 800faa0:	4681      	mov	r9, r0
 800faa2:	2800      	cmp	r0, #0
 800faa4:	f000 809c 	beq.w	800fbe0 <rcl_node_init+0x298>
 800faa8:	682b      	ldr	r3, [r5, #0]
 800faaa:	6929      	ldr	r1, [r5, #16]
 800faac:	6866      	ldr	r6, [r4, #4]
 800faae:	2008      	movs	r0, #8
 800fab0:	4798      	blx	r3
 800fab2:	6863      	ldr	r3, [r4, #4]
 800fab4:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800fab6:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 800faba:	f1ba 0f00 	cmp.w	sl, #0
 800fabe:	f000 808d 	beq.w	800fbdc <rcl_node_init+0x294>
 800fac2:	f10d 0b20 	add.w	fp, sp, #32
 800fac6:	4658      	mov	r0, fp
 800fac8:	f006 ff04 	bl	80168d4 <rcl_get_zero_initialized_guard_condition>
 800facc:	e89b 0003 	ldmia.w	fp, {r0, r1}
 800fad0:	6863      	ldr	r3, [r4, #4]
 800fad2:	46ac      	mov	ip, r5
 800fad4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800fad8:	e88a 0003 	stmia.w	sl, {r0, r1}
 800fadc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fae0:	ae25      	add	r6, sp, #148	@ 0x94
 800fae2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fae4:	f8dc 3000 	ldr.w	r3, [ip]
 800fae8:	6033      	str	r3, [r6, #0]
 800faea:	ab2a      	add	r3, sp, #168	@ 0xa8
 800faec:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800faf0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800faf4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800faf6:	463a      	mov	r2, r7
 800faf8:	4649      	mov	r1, r9
 800fafa:	4670      	mov	r0, lr
 800fafc:	f006 ff40 	bl	8016980 <rcl_guard_condition_init_from_rmw>
 800fb00:	4606      	mov	r6, r0
 800fb02:	bb18      	cbnz	r0, 800fb4c <rcl_node_init+0x204>
 800fb04:	686b      	ldr	r3, [r5, #4]
 800fb06:	6929      	ldr	r1, [r5, #16]
 800fb08:	4798      	blx	r3
 800fb0a:	686b      	ldr	r3, [r5, #4]
 800fb0c:	6929      	ldr	r1, [r5, #16]
 800fb0e:	4640      	mov	r0, r8
 800fb10:	4798      	blx	r3
 800fb12:	e000      	b.n	800fb16 <rcl_node_init+0x1ce>
 800fb14:	260b      	movs	r6, #11
 800fb16:	4630      	mov	r0, r6
 800fb18:	b02b      	add	sp, #172	@ 0xac
 800fb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb1e:	2665      	movs	r6, #101	@ 0x65
 800fb20:	e7f9      	b.n	800fb16 <rcl_node_init+0x1ce>
 800fb22:	2664      	movs	r6, #100	@ 0x64
 800fb24:	4630      	mov	r0, r6
 800fb26:	b02b      	add	sp, #172	@ 0xac
 800fb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb2c:	f105 030c 	add.w	r3, r5, #12
 800fb30:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fb34:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fb38:	4640      	mov	r0, r8
 800fb3a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800fb3e:	f002 fd3f 	bl	80125c0 <rcutils_strdup>
 800fb42:	4680      	mov	r8, r0
 800fb44:	e750      	b.n	800f9e8 <rcl_node_init+0xa0>
 800fb46:	f003 f851 	bl	8012bec <rmw_namespace_validation_result_string>
 800fb4a:	26ca      	movs	r6, #202	@ 0xca
 800fb4c:	6863      	ldr	r3, [r4, #4]
 800fb4e:	b1f3      	cbz	r3, 800fb8e <rcl_node_init+0x246>
 800fb50:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fb52:	b138      	cbz	r0, 800fb64 <rcl_node_init+0x21c>
 800fb54:	f006 ff74 	bl	8016a40 <rcl_guard_condition_fini>
 800fb58:	6863      	ldr	r3, [r4, #4]
 800fb5a:	6929      	ldr	r1, [r5, #16]
 800fb5c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fb5e:	686b      	ldr	r3, [r5, #4]
 800fb60:	4798      	blx	r3
 800fb62:	6863      	ldr	r3, [r4, #4]
 800fb64:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800fb66:	b110      	cbz	r0, 800fb6e <rcl_node_init+0x226>
 800fb68:	f003 fc8e 	bl	8013488 <rmw_destroy_node>
 800fb6c:	6863      	ldr	r3, [r4, #4]
 800fb6e:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800fb70:	6929      	ldr	r1, [r5, #16]
 800fb72:	686b      	ldr	r3, [r5, #4]
 800fb74:	4798      	blx	r3
 800fb76:	6863      	ldr	r3, [r4, #4]
 800fb78:	6929      	ldr	r1, [r5, #16]
 800fb7a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800fb7c:	686b      	ldr	r3, [r5, #4]
 800fb7e:	4798      	blx	r3
 800fb80:	6860      	ldr	r0, [r4, #4]
 800fb82:	f000 f8ab 	bl	800fcdc <rcl_node_options_fini>
 800fb86:	686b      	ldr	r3, [r5, #4]
 800fb88:	6929      	ldr	r1, [r5, #16]
 800fb8a:	6860      	ldr	r0, [r4, #4]
 800fb8c:	4798      	blx	r3
 800fb8e:	686b      	ldr	r3, [r5, #4]
 800fb90:	6929      	ldr	r1, [r5, #16]
 800fb92:	2000      	movs	r0, #0
 800fb94:	4798      	blx	r3
 800fb96:	686b      	ldr	r3, [r5, #4]
 800fb98:	6929      	ldr	r1, [r5, #16]
 800fb9a:	4640      	mov	r0, r8
 800fb9c:	4798      	blx	r3
 800fb9e:	2300      	movs	r3, #0
 800fba0:	e9c4 3300 	strd	r3, r3, [r4]
 800fba4:	e7b7      	b.n	800fb16 <rcl_node_init+0x1ce>
 800fba6:	f105 030c 	add.w	r3, r5, #12
 800fbaa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fbae:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fbb2:	480f      	ldr	r0, [pc, #60]	@ (800fbf0 <rcl_node_init+0x2a8>)
 800fbb4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800fbb8:	f002 fd02 	bl	80125c0 <rcutils_strdup>
 800fbbc:	4680      	mov	r8, r0
 800fbbe:	e713      	b.n	800f9e8 <rcl_node_init+0xa0>
 800fbc0:	260a      	movs	r6, #10
 800fbc2:	e7a8      	b.n	800fb16 <rcl_node_init+0x1ce>
 800fbc4:	f003 f86a 	bl	8012c9c <rmw_node_name_validation_result_string>
 800fbc8:	26c9      	movs	r6, #201	@ 0xc9
 800fbca:	e7a4      	b.n	800fb16 <rcl_node_init+0x1ce>
 800fbcc:	260a      	movs	r6, #10
 800fbce:	e7de      	b.n	800fb8e <rcl_node_init+0x246>
 800fbd0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fbd2:	260a      	movs	r6, #10
 800fbd4:	e7bd      	b.n	800fb52 <rcl_node_init+0x20a>
 800fbd6:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fbd8:	2601      	movs	r6, #1
 800fbda:	e7ba      	b.n	800fb52 <rcl_node_init+0x20a>
 800fbdc:	260a      	movs	r6, #10
 800fbde:	e7c1      	b.n	800fb64 <rcl_node_init+0x21c>
 800fbe0:	2601      	movs	r6, #1
 800fbe2:	e7b3      	b.n	800fb4c <rcl_node_init+0x204>
 800fbe4:	08019254 	.word	0x08019254
 800fbe8:	08019064 	.word	0x08019064
 800fbec:	08019258 	.word	0x08019258
 800fbf0:	08019250 	.word	0x08019250

0800fbf4 <rcl_node_is_valid>:
 800fbf4:	b130      	cbz	r0, 800fc04 <rcl_node_is_valid+0x10>
 800fbf6:	6843      	ldr	r3, [r0, #4]
 800fbf8:	b123      	cbz	r3, 800fc04 <rcl_node_is_valid+0x10>
 800fbfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fbfc:	b113      	cbz	r3, 800fc04 <rcl_node_is_valid+0x10>
 800fbfe:	6800      	ldr	r0, [r0, #0]
 800fc00:	f7ff bc4a 	b.w	800f498 <rcl_context_is_valid>
 800fc04:	2000      	movs	r0, #0
 800fc06:	4770      	bx	lr

0800fc08 <rcl_node_get_name>:
 800fc08:	b120      	cbz	r0, 800fc14 <rcl_node_get_name+0xc>
 800fc0a:	6840      	ldr	r0, [r0, #4]
 800fc0c:	b110      	cbz	r0, 800fc14 <rcl_node_get_name+0xc>
 800fc0e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fc10:	b100      	cbz	r0, 800fc14 <rcl_node_get_name+0xc>
 800fc12:	6880      	ldr	r0, [r0, #8]
 800fc14:	4770      	bx	lr
 800fc16:	bf00      	nop

0800fc18 <rcl_node_get_namespace>:
 800fc18:	b120      	cbz	r0, 800fc24 <rcl_node_get_namespace+0xc>
 800fc1a:	6840      	ldr	r0, [r0, #4]
 800fc1c:	b110      	cbz	r0, 800fc24 <rcl_node_get_namespace+0xc>
 800fc1e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fc20:	b100      	cbz	r0, 800fc24 <rcl_node_get_namespace+0xc>
 800fc22:	68c0      	ldr	r0, [r0, #12]
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop

0800fc28 <rcl_node_get_options>:
 800fc28:	b128      	cbz	r0, 800fc36 <rcl_node_get_options+0xe>
 800fc2a:	6840      	ldr	r0, [r0, #4]
 800fc2c:	b118      	cbz	r0, 800fc36 <rcl_node_get_options+0xe>
 800fc2e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	bf08      	it	eq
 800fc34:	2000      	moveq	r0, #0
 800fc36:	4770      	bx	lr

0800fc38 <rcl_node_get_rmw_handle>:
 800fc38:	b110      	cbz	r0, 800fc40 <rcl_node_get_rmw_handle+0x8>
 800fc3a:	6840      	ldr	r0, [r0, #4]
 800fc3c:	b100      	cbz	r0, 800fc40 <rcl_node_get_rmw_handle+0x8>
 800fc3e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fc40:	4770      	bx	lr
 800fc42:	bf00      	nop

0800fc44 <rcl_get_disable_loaned_message>:
 800fc44:	b510      	push	{r4, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	2300      	movs	r3, #0
 800fc4a:	9301      	str	r3, [sp, #4]
 800fc4c:	b1a0      	cbz	r0, 800fc78 <rcl_get_disable_loaned_message+0x34>
 800fc4e:	4604      	mov	r4, r0
 800fc50:	a901      	add	r1, sp, #4
 800fc52:	480b      	ldr	r0, [pc, #44]	@ (800fc80 <rcl_get_disable_loaned_message+0x3c>)
 800fc54:	f002 fb7e 	bl	8012354 <rcutils_get_env>
 800fc58:	b110      	cbz	r0, 800fc60 <rcl_get_disable_loaned_message+0x1c>
 800fc5a:	2001      	movs	r0, #1
 800fc5c:	b002      	add	sp, #8
 800fc5e:	bd10      	pop	{r4, pc}
 800fc60:	9a01      	ldr	r2, [sp, #4]
 800fc62:	7813      	ldrb	r3, [r2, #0]
 800fc64:	3b31      	subs	r3, #49	@ 0x31
 800fc66:	bf08      	it	eq
 800fc68:	7853      	ldrbeq	r3, [r2, #1]
 800fc6a:	fab3 f383 	clz	r3, r3
 800fc6e:	095b      	lsrs	r3, r3, #5
 800fc70:	2000      	movs	r0, #0
 800fc72:	7023      	strb	r3, [r4, #0]
 800fc74:	b002      	add	sp, #8
 800fc76:	bd10      	pop	{r4, pc}
 800fc78:	200b      	movs	r0, #11
 800fc7a:	b002      	add	sp, #8
 800fc7c:	bd10      	pop	{r4, pc}
 800fc7e:	bf00      	nop
 800fc80:	08019260 	.word	0x08019260

0800fc84 <rcl_node_get_default_options>:
 800fc84:	b510      	push	{r4, lr}
 800fc86:	2253      	movs	r2, #83	@ 0x53
 800fc88:	4604      	mov	r4, r0
 800fc8a:	2100      	movs	r1, #0
 800fc8c:	3015      	adds	r0, #21
 800fc8e:	f008 f8cb 	bl	8017e28 <memset>
 800fc92:	4620      	mov	r0, r4
 800fc94:	f7fa fd18 	bl	800a6c8 <rcutils_get_default_allocator>
 800fc98:	2301      	movs	r3, #1
 800fc9a:	7523      	strb	r3, [r4, #20]
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	bd10      	pop	{r4, pc}

0800fca0 <rcl_node_options_copy>:
 800fca0:	b1d0      	cbz	r0, 800fcd8 <rcl_node_options_copy+0x38>
 800fca2:	b570      	push	{r4, r5, r6, lr}
 800fca4:	460c      	mov	r4, r1
 800fca6:	b1a9      	cbz	r1, 800fcd4 <rcl_node_options_copy+0x34>
 800fca8:	4288      	cmp	r0, r1
 800fcaa:	4684      	mov	ip, r0
 800fcac:	d012      	beq.n	800fcd4 <rcl_node_options_copy+0x34>
 800fcae:	4605      	mov	r5, r0
 800fcb0:	8a86      	ldrh	r6, [r0, #20]
 800fcb2:	468e      	mov	lr, r1
 800fcb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fcb6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fcba:	682b      	ldr	r3, [r5, #0]
 800fcbc:	f8ce 3000 	str.w	r3, [lr]
 800fcc0:	f10c 0118 	add.w	r1, ip, #24
 800fcc4:	2250      	movs	r2, #80	@ 0x50
 800fcc6:	82a6      	strh	r6, [r4, #20]
 800fcc8:	f104 0018 	add.w	r0, r4, #24
 800fccc:	f008 f987 	bl	8017fde <memcpy>
 800fcd0:	2000      	movs	r0, #0
 800fcd2:	bd70      	pop	{r4, r5, r6, pc}
 800fcd4:	200b      	movs	r0, #11
 800fcd6:	bd70      	pop	{r4, r5, r6, pc}
 800fcd8:	200b      	movs	r0, #11
 800fcda:	4770      	bx	lr

0800fcdc <rcl_node_options_fini>:
 800fcdc:	b1c0      	cbz	r0, 800fd10 <rcl_node_options_fini+0x34>
 800fcde:	b500      	push	{lr}
 800fce0:	4684      	mov	ip, r0
 800fce2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fce6:	b087      	sub	sp, #28
 800fce8:	f10d 0e04 	add.w	lr, sp, #4
 800fcec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fcf0:	f8dc 3000 	ldr.w	r3, [ip]
 800fcf4:	f8ce 3000 	str.w	r3, [lr]
 800fcf8:	a801      	add	r0, sp, #4
 800fcfa:	f7fa fd11 	bl	800a720 <rcutils_allocator_is_valid>
 800fcfe:	b118      	cbz	r0, 800fd08 <rcl_node_options_fini+0x2c>
 800fd00:	2000      	movs	r0, #0
 800fd02:	b007      	add	sp, #28
 800fd04:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd08:	200b      	movs	r0, #11
 800fd0a:	b007      	add	sp, #28
 800fd0c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd10:	200b      	movs	r0, #11
 800fd12:	4770      	bx	lr

0800fd14 <rcl_node_resolve_name>:
 800fd14:	b082      	sub	sp, #8
 800fd16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd1a:	b091      	sub	sp, #68	@ 0x44
 800fd1c:	ac1a      	add	r4, sp, #104	@ 0x68
 800fd1e:	e884 000c 	stmia.w	r4, {r2, r3}
 800fd22:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800fd26:	2800      	cmp	r0, #0
 800fd28:	d03a      	beq.n	800fda0 <rcl_node_resolve_name+0x8c>
 800fd2a:	460c      	mov	r4, r1
 800fd2c:	4605      	mov	r5, r0
 800fd2e:	f7ff ff7b 	bl	800fc28 <rcl_node_get_options>
 800fd32:	b370      	cbz	r0, 800fd92 <rcl_node_resolve_name+0x7e>
 800fd34:	4628      	mov	r0, r5
 800fd36:	f7ff ff67 	bl	800fc08 <rcl_node_get_name>
 800fd3a:	4681      	mov	r9, r0
 800fd3c:	4628      	mov	r0, r5
 800fd3e:	f7ff ff6b 	bl	800fc18 <rcl_node_get_namespace>
 800fd42:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800fd46:	4607      	mov	r7, r0
 800fd48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fd4c:	ad0b      	add	r5, sp, #44	@ 0x2c
 800fd4e:	46ac      	mov	ip, r5
 800fd50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd54:	f8de 3000 	ldr.w	r3, [lr]
 800fd58:	f8cc 3000 	str.w	r3, [ip]
 800fd5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fd5e:	b1fb      	cbz	r3, 800fda0 <rcl_node_resolve_name+0x8c>
 800fd60:	468a      	mov	sl, r1
 800fd62:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800fd66:	f002 fc8b 	bl	8012680 <rcutils_get_zero_initialized_string_map>
 800fd6a:	ab10      	add	r3, sp, #64	@ 0x40
 800fd6c:	9008      	str	r0, [sp, #32]
 800fd6e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800fd72:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fd76:	2100      	movs	r1, #0
 800fd78:	e895 000c 	ldmia.w	r5, {r2, r3}
 800fd7c:	a808      	add	r0, sp, #32
 800fd7e:	f002 fcd9 	bl	8012734 <rcutils_string_map_init>
 800fd82:	4606      	mov	r6, r0
 800fd84:	b170      	cbz	r0, 800fda4 <rcl_node_resolve_name+0x90>
 800fd86:	f7fa fcdf 	bl	800a748 <rcutils_get_error_string>
 800fd8a:	f7fa fcf5 	bl	800a778 <rcutils_reset_error>
 800fd8e:	2e0a      	cmp	r6, #10
 800fd90:	d000      	beq.n	800fd94 <rcl_node_resolve_name+0x80>
 800fd92:	2601      	movs	r6, #1
 800fd94:	4630      	mov	r0, r6
 800fd96:	b011      	add	sp, #68	@ 0x44
 800fd98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd9c:	b002      	add	sp, #8
 800fd9e:	4770      	bx	lr
 800fda0:	260b      	movs	r6, #11
 800fda2:	e7f7      	b.n	800fd94 <rcl_node_resolve_name+0x80>
 800fda4:	9009      	str	r0, [sp, #36]	@ 0x24
 800fda6:	9007      	str	r0, [sp, #28]
 800fda8:	a808      	add	r0, sp, #32
 800fdaa:	f006 fd8d 	bl	80168c8 <rcl_get_default_topic_name_substitutions>
 800fdae:	4606      	mov	r6, r0
 800fdb0:	b1b0      	cbz	r0, 800fde0 <rcl_node_resolve_name+0xcc>
 800fdb2:	280a      	cmp	r0, #10
 800fdb4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800fdb8:	d000      	beq.n	800fdbc <rcl_node_resolve_name+0xa8>
 800fdba:	2601      	movs	r6, #1
 800fdbc:	a808      	add	r0, sp, #32
 800fdbe:	f002 fcf7 	bl	80127b0 <rcutils_string_map_fini>
 800fdc2:	2800      	cmp	r0, #0
 800fdc4:	d132      	bne.n	800fe2c <rcl_node_resolve_name+0x118>
 800fdc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fdc8:	4659      	mov	r1, fp
 800fdca:	47d0      	blx	sl
 800fdcc:	4659      	mov	r1, fp
 800fdce:	4648      	mov	r0, r9
 800fdd0:	47d0      	blx	sl
 800fdd2:	f1b8 0f00 	cmp.w	r8, #0
 800fdd6:	d0dd      	beq.n	800fd94 <rcl_node_resolve_name+0x80>
 800fdd8:	2e67      	cmp	r6, #103	@ 0x67
 800fdda:	bf08      	it	eq
 800fddc:	2668      	moveq	r6, #104	@ 0x68
 800fdde:	e7d9      	b.n	800fd94 <rcl_node_resolve_name+0x80>
 800fde0:	ab09      	add	r3, sp, #36	@ 0x24
 800fde2:	9305      	str	r3, [sp, #20]
 800fde4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fde6:	46ec      	mov	ip, sp
 800fde8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fdec:	682b      	ldr	r3, [r5, #0]
 800fdee:	f8cc 3000 	str.w	r3, [ip]
 800fdf2:	463a      	mov	r2, r7
 800fdf4:	4649      	mov	r1, r9
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	ab08      	add	r3, sp, #32
 800fdfa:	f006 fbff 	bl	80165fc <rcl_expand_topic_name>
 800fdfe:	4606      	mov	r6, r0
 800fe00:	b9c8      	cbnz	r0, 800fe36 <rcl_node_resolve_name+0x122>
 800fe02:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 800fe06:	9009      	str	r0, [sp, #36]	@ 0x24
 800fe08:	4602      	mov	r2, r0
 800fe0a:	a90a      	add	r1, sp, #40	@ 0x28
 800fe0c:	4648      	mov	r0, r9
 800fe0e:	f002 fe23 	bl	8012a58 <rmw_validate_full_topic_name>
 800fe12:	b998      	cbnz	r0, 800fe3c <rcl_node_resolve_name+0x128>
 800fe14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fe16:	bb14      	cbnz	r4, 800fe5e <rcl_node_resolve_name+0x14a>
 800fe18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fe1a:	a808      	add	r0, sp, #32
 800fe1c:	f8c3 9000 	str.w	r9, [r3]
 800fe20:	f002 fcc6 	bl	80127b0 <rcutils_string_map_fini>
 800fe24:	4606      	mov	r6, r0
 800fe26:	b978      	cbnz	r0, 800fe48 <rcl_node_resolve_name+0x134>
 800fe28:	4681      	mov	r9, r0
 800fe2a:	e7cc      	b.n	800fdc6 <rcl_node_resolve_name+0xb2>
 800fe2c:	f7fa fc8c 	bl	800a748 <rcutils_get_error_string>
 800fe30:	f7fa fca2 	bl	800a778 <rcutils_reset_error>
 800fe34:	e7c7      	b.n	800fdc6 <rcl_node_resolve_name+0xb2>
 800fe36:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800fe3a:	e7bf      	b.n	800fdbc <rcl_node_resolve_name+0xa8>
 800fe3c:	f7fa fc84 	bl	800a748 <rcutils_get_error_string>
 800fe40:	2601      	movs	r6, #1
 800fe42:	f7fa fc99 	bl	800a778 <rcutils_reset_error>
 800fe46:	e7b9      	b.n	800fdbc <rcl_node_resolve_name+0xa8>
 800fe48:	f7fa fc7e 	bl	800a748 <rcutils_get_error_string>
 800fe4c:	f7fa fc94 	bl	800a778 <rcutils_reset_error>
 800fe50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fe52:	4659      	mov	r1, fp
 800fe54:	47d0      	blx	sl
 800fe56:	4659      	mov	r1, fp
 800fe58:	4620      	mov	r0, r4
 800fe5a:	47d0      	blx	sl
 800fe5c:	e799      	b.n	800fd92 <rcl_node_resolve_name+0x7e>
 800fe5e:	2667      	movs	r6, #103	@ 0x67
 800fe60:	e7ac      	b.n	800fdbc <rcl_node_resolve_name+0xa8>
 800fe62:	bf00      	nop

0800fe64 <rcl_service_get_rmw_handle>:
 800fe64:	b118      	cbz	r0, 800fe6e <rcl_service_get_rmw_handle+0xa>
 800fe66:	6800      	ldr	r0, [r0, #0]
 800fe68:	b108      	cbz	r0, 800fe6e <rcl_service_get_rmw_handle+0xa>
 800fe6a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800fe6e:	4770      	bx	lr

0800fe70 <rcl_take_request>:
 800fe70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe72:	468e      	mov	lr, r1
 800fe74:	460c      	mov	r4, r1
 800fe76:	4617      	mov	r7, r2
 800fe78:	4605      	mov	r5, r0
 800fe7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fe7e:	b091      	sub	sp, #68	@ 0x44
 800fe80:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 800fe84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe88:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fe8c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fe90:	b30d      	cbz	r5, 800fed6 <rcl_take_request+0x66>
 800fe92:	682b      	ldr	r3, [r5, #0]
 800fe94:	b1fb      	cbz	r3, 800fed6 <rcl_take_request+0x66>
 800fe96:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800fe9a:	b1e0      	cbz	r0, 800fed6 <rcl_take_request+0x66>
 800fe9c:	b397      	cbz	r7, 800ff04 <rcl_take_request+0x94>
 800fe9e:	2300      	movs	r3, #0
 800fea0:	f88d 3017 	strb.w	r3, [sp, #23]
 800fea4:	463a      	mov	r2, r7
 800fea6:	f10d 0317 	add.w	r3, sp, #23
 800feaa:	a906      	add	r1, sp, #24
 800feac:	f003 fbb6 	bl	801361c <rmw_take_request>
 800feb0:	4606      	mov	r6, r0
 800feb2:	b198      	cbz	r0, 800fedc <rcl_take_request+0x6c>
 800feb4:	280a      	cmp	r0, #10
 800feb6:	bf18      	it	ne
 800feb8:	2601      	movne	r6, #1
 800feba:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 800febe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fec2:	46a6      	mov	lr, r4
 800fec4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fec8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800fecc:	e88e 0003 	stmia.w	lr, {r0, r1}
 800fed0:	4630      	mov	r0, r6
 800fed2:	b011      	add	sp, #68	@ 0x44
 800fed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fed6:	f44f 7616 	mov.w	r6, #600	@ 0x258
 800feda:	e7ee      	b.n	800feba <rcl_take_request+0x4a>
 800fedc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800fee0:	b193      	cbz	r3, 800ff08 <rcl_take_request+0x98>
 800fee2:	682b      	ldr	r3, [r5, #0]
 800fee4:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 800fee8:	2800      	cmp	r0, #0
 800feea:	d0e6      	beq.n	800feba <rcl_take_request+0x4a>
 800feec:	463a      	mov	r2, r7
 800feee:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 800fef2:	ab0a      	add	r3, sp, #40	@ 0x28
 800fef4:	e9cd 6700 	strd	r6, r7, [sp]
 800fef8:	9302      	str	r3, [sp, #8]
 800fefa:	2101      	movs	r1, #1
 800fefc:	f000 f844 	bl	800ff88 <rcl_send_service_event_message>
 800ff00:	4606      	mov	r6, r0
 800ff02:	e7da      	b.n	800feba <rcl_take_request+0x4a>
 800ff04:	260b      	movs	r6, #11
 800ff06:	e7d8      	b.n	800feba <rcl_take_request+0x4a>
 800ff08:	f240 2659 	movw	r6, #601	@ 0x259
 800ff0c:	e7d5      	b.n	800feba <rcl_take_request+0x4a>
 800ff0e:	bf00      	nop

0800ff10 <rcl_send_response>:
 800ff10:	b350      	cbz	r0, 800ff68 <rcl_send_response+0x58>
 800ff12:	b570      	push	{r4, r5, r6, lr}
 800ff14:	6803      	ldr	r3, [r0, #0]
 800ff16:	b084      	sub	sp, #16
 800ff18:	4604      	mov	r4, r0
 800ff1a:	b1cb      	cbz	r3, 800ff50 <rcl_send_response+0x40>
 800ff1c:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800ff20:	b1b0      	cbz	r0, 800ff50 <rcl_send_response+0x40>
 800ff22:	460e      	mov	r6, r1
 800ff24:	b1e9      	cbz	r1, 800ff62 <rcl_send_response+0x52>
 800ff26:	4615      	mov	r5, r2
 800ff28:	b1da      	cbz	r2, 800ff62 <rcl_send_response+0x52>
 800ff2a:	f003 fbd5 	bl	80136d8 <rmw_send_response>
 800ff2e:	b998      	cbnz	r0, 800ff58 <rcl_send_response+0x48>
 800ff30:	6823      	ldr	r3, [r4, #0]
 800ff32:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800ff36:	b16b      	cbz	r3, 800ff54 <rcl_send_response+0x44>
 800ff38:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 800ff3c:	462a      	mov	r2, r5
 800ff3e:	e9cd 0100 	strd	r0, r1, [sp]
 800ff42:	9602      	str	r6, [sp, #8]
 800ff44:	2102      	movs	r1, #2
 800ff46:	4618      	mov	r0, r3
 800ff48:	f000 f81e 	bl	800ff88 <rcl_send_service_event_message>
 800ff4c:	b004      	add	sp, #16
 800ff4e:	bd70      	pop	{r4, r5, r6, pc}
 800ff50:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800ff54:	b004      	add	sp, #16
 800ff56:	bd70      	pop	{r4, r5, r6, pc}
 800ff58:	2802      	cmp	r0, #2
 800ff5a:	bf18      	it	ne
 800ff5c:	2001      	movne	r0, #1
 800ff5e:	b004      	add	sp, #16
 800ff60:	bd70      	pop	{r4, r5, r6, pc}
 800ff62:	200b      	movs	r0, #11
 800ff64:	b004      	add	sp, #16
 800ff66:	bd70      	pop	{r4, r5, r6, pc}
 800ff68:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800ff6c:	4770      	bx	lr
 800ff6e:	bf00      	nop

0800ff70 <rcl_service_is_valid>:
 800ff70:	b130      	cbz	r0, 800ff80 <rcl_service_is_valid+0x10>
 800ff72:	6800      	ldr	r0, [r0, #0]
 800ff74:	b120      	cbz	r0, 800ff80 <rcl_service_is_valid+0x10>
 800ff76:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800ff7a:	3800      	subs	r0, #0
 800ff7c:	bf18      	it	ne
 800ff7e:	2001      	movne	r0, #1
 800ff80:	4770      	bx	lr
 800ff82:	bf00      	nop
 800ff84:	0000      	movs	r0, r0
	...

0800ff88 <rcl_send_service_event_message>:
 800ff88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff8a:	b093      	sub	sp, #76	@ 0x4c
 800ff8c:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800ff8e:	b17a      	cbz	r2, 800ffb0 <rcl_send_service_event_message+0x28>
 800ff90:	b176      	cbz	r6, 800ffb0 <rcl_send_service_event_message+0x28>
 800ff92:	4604      	mov	r4, r0
 800ff94:	b150      	cbz	r0, 800ffac <rcl_send_service_event_message+0x24>
 800ff96:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 800ff9a:	b13b      	cbz	r3, 800ffac <rcl_send_service_event_message+0x24>
 800ff9c:	68c0      	ldr	r0, [r0, #12]
 800ff9e:	460f      	mov	r7, r1
 800ffa0:	4615      	mov	r5, r2
 800ffa2:	f000 f9bb 	bl	801031c <rcl_clock_valid>
 800ffa6:	b108      	cbz	r0, 800ffac <rcl_send_service_event_message+0x24>
 800ffa8:	7a23      	ldrb	r3, [r4, #8]
 800ffaa:	b92b      	cbnz	r3, 800ffb8 <rcl_send_service_event_message+0x30>
 800ffac:	2501      	movs	r5, #1
 800ffae:	e000      	b.n	800ffb2 <rcl_send_service_event_message+0x2a>
 800ffb0:	250b      	movs	r5, #11
 800ffb2:	4628      	mov	r0, r5
 800ffb4:	b013      	add	sp, #76	@ 0x4c
 800ffb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffb8:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 800ffbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ffc0:	f10d 0c0c 	add.w	ip, sp, #12
 800ffc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ffc8:	f8de 3000 	ldr.w	r3, [lr]
 800ffcc:	f8cc 3000 	str.w	r3, [ip]
 800ffd0:	a803      	add	r0, sp, #12
 800ffd2:	f7fa fba5 	bl	800a720 <rcutils_allocator_is_valid>
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	d0ea      	beq.n	800ffb0 <rcl_send_service_event_message+0x28>
 800ffda:	6820      	ldr	r0, [r4, #0]
 800ffdc:	f7f9 fc32 	bl	8009844 <rcl_publisher_is_valid>
 800ffe0:	2800      	cmp	r0, #0
 800ffe2:	d045      	beq.n	8010070 <rcl_send_service_event_message+0xe8>
 800ffe4:	4669      	mov	r1, sp
 800ffe6:	68e0      	ldr	r0, [r4, #12]
 800ffe8:	f000 fa10 	bl	801040c <rcl_clock_get_now>
 800ffec:	4601      	mov	r1, r0
 800ffee:	2800      	cmp	r0, #0
 800fff0:	d13b      	bne.n	801006a <rcl_send_service_event_message+0xe2>
 800fff2:	2220      	movs	r2, #32
 800fff4:	eb0d 0002 	add.w	r0, sp, r2
 800fff8:	f007 ff16 	bl	8017e28 <memset>
 800fffc:	a324      	add	r3, pc, #144	@ (adr r3, 8010090 <rcl_send_service_event_message+0x108>)
 800fffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010002:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010006:	f88d 7020 	strb.w	r7, [sp, #32]
 801000a:	f7f0 fd1f 	bl	8000a4c <__aeabi_ldivmod>
 801000e:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 8010012:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 8010016:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801001a:	7a23      	ldrb	r3, [r4, #8]
 801001c:	6830      	ldr	r0, [r6, #0]
 801001e:	6871      	ldr	r1, [r6, #4]
 8010020:	68b2      	ldr	r2, [r6, #8]
 8010022:	2b01      	cmp	r3, #1
 8010024:	68f3      	ldr	r3, [r6, #12]
 8010026:	bf08      	it	eq
 8010028:	2500      	moveq	r5, #0
 801002a:	ae0b      	add	r6, sp, #44	@ 0x2c
 801002c:	2f01      	cmp	r7, #1
 801002e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010030:	d821      	bhi.n	8010076 <rcl_send_service_event_message+0xee>
 8010032:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010036:	462a      	mov	r2, r5
 8010038:	a808      	add	r0, sp, #32
 801003a:	699d      	ldr	r5, [r3, #24]
 801003c:	a903      	add	r1, sp, #12
 801003e:	2300      	movs	r3, #0
 8010040:	47a8      	blx	r5
 8010042:	4606      	mov	r6, r0
 8010044:	2e00      	cmp	r6, #0
 8010046:	d0b1      	beq.n	800ffac <rcl_send_service_event_message+0x24>
 8010048:	4631      	mov	r1, r6
 801004a:	6820      	ldr	r0, [r4, #0]
 801004c:	2200      	movs	r2, #0
 801004e:	f7f9 fbd3 	bl	80097f8 <rcl_publish>
 8010052:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010056:	4605      	mov	r5, r0
 8010058:	69db      	ldr	r3, [r3, #28]
 801005a:	a903      	add	r1, sp, #12
 801005c:	4630      	mov	r0, r6
 801005e:	4798      	blx	r3
 8010060:	2d00      	cmp	r5, #0
 8010062:	d0a6      	beq.n	800ffb2 <rcl_send_service_event_message+0x2a>
 8010064:	f7fa fb88 	bl	800a778 <rcutils_reset_error>
 8010068:	e7a3      	b.n	800ffb2 <rcl_send_service_event_message+0x2a>
 801006a:	f7fa fb85 	bl	800a778 <rcutils_reset_error>
 801006e:	e79d      	b.n	800ffac <rcl_send_service_event_message+0x24>
 8010070:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8010074:	e79d      	b.n	800ffb2 <rcl_send_service_event_message+0x2a>
 8010076:	1eb9      	subs	r1, r7, #2
 8010078:	2901      	cmp	r1, #1
 801007a:	d8f6      	bhi.n	801006a <rcl_send_service_event_message+0xe2>
 801007c:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8010080:	462b      	mov	r3, r5
 8010082:	a808      	add	r0, sp, #32
 8010084:	6995      	ldr	r5, [r2, #24]
 8010086:	a903      	add	r1, sp, #12
 8010088:	2200      	movs	r2, #0
 801008a:	47a8      	blx	r5
 801008c:	4606      	mov	r6, r0
 801008e:	e7d9      	b.n	8010044 <rcl_send_service_event_message+0xbc>
 8010090:	3b9aca00 	.word	0x3b9aca00
 8010094:	00000000 	.word	0x00000000

08010098 <rcl_get_zero_initialized_subscription>:
 8010098:	4b01      	ldr	r3, [pc, #4]	@ (80100a0 <rcl_get_zero_initialized_subscription+0x8>)
 801009a:	6818      	ldr	r0, [r3, #0]
 801009c:	4770      	bx	lr
 801009e:	bf00      	nop
 80100a0:	08019c88 	.word	0x08019c88

080100a4 <rcl_subscription_init>:
 80100a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100a8:	b089      	sub	sp, #36	@ 0x24
 80100aa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80100ac:	b1d6      	cbz	r6, 80100e4 <rcl_subscription_init+0x40>
 80100ae:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 80100b2:	4604      	mov	r4, r0
 80100b4:	4648      	mov	r0, r9
 80100b6:	460d      	mov	r5, r1
 80100b8:	4690      	mov	r8, r2
 80100ba:	461f      	mov	r7, r3
 80100bc:	f7fa fb30 	bl	800a720 <rcutils_allocator_is_valid>
 80100c0:	b180      	cbz	r0, 80100e4 <rcl_subscription_init+0x40>
 80100c2:	b17c      	cbz	r4, 80100e4 <rcl_subscription_init+0x40>
 80100c4:	4628      	mov	r0, r5
 80100c6:	f7ff fd95 	bl	800fbf4 <rcl_node_is_valid>
 80100ca:	2800      	cmp	r0, #0
 80100cc:	d054      	beq.n	8010178 <rcl_subscription_init+0xd4>
 80100ce:	f1b8 0f00 	cmp.w	r8, #0
 80100d2:	d007      	beq.n	80100e4 <rcl_subscription_init+0x40>
 80100d4:	b137      	cbz	r7, 80100e4 <rcl_subscription_init+0x40>
 80100d6:	6823      	ldr	r3, [r4, #0]
 80100d8:	b14b      	cbz	r3, 80100ee <rcl_subscription_init+0x4a>
 80100da:	2764      	movs	r7, #100	@ 0x64
 80100dc:	4638      	mov	r0, r7
 80100de:	b009      	add	sp, #36	@ 0x24
 80100e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100e4:	270b      	movs	r7, #11
 80100e6:	4638      	mov	r0, r7
 80100e8:	b009      	add	sp, #36	@ 0x24
 80100ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100ee:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80100f2:	aa07      	add	r2, sp, #28
 80100f4:	9205      	str	r2, [sp, #20]
 80100f6:	9307      	str	r3, [sp, #28]
 80100f8:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 80100fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010100:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010104:	4639      	mov	r1, r7
 8010106:	e899 000c 	ldmia.w	r9, {r2, r3}
 801010a:	4628      	mov	r0, r5
 801010c:	f7ff fe02 	bl	800fd14 <rcl_node_resolve_name>
 8010110:	4607      	mov	r7, r0
 8010112:	2800      	cmp	r0, #0
 8010114:	d15f      	bne.n	80101d6 <rcl_subscription_init+0x132>
 8010116:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 801011a:	21d0      	movs	r1, #208	@ 0xd0
 801011c:	2001      	movs	r0, #1
 801011e:	4798      	blx	r3
 8010120:	6020      	str	r0, [r4, #0]
 8010122:	2800      	cmp	r0, #0
 8010124:	d05d      	beq.n	80101e2 <rcl_subscription_init+0x13e>
 8010126:	2278      	movs	r2, #120	@ 0x78
 8010128:	4631      	mov	r1, r6
 801012a:	f007 ff58 	bl	8017fde <memcpy>
 801012e:	4628      	mov	r0, r5
 8010130:	f7ff fd82 	bl	800fc38 <rcl_node_get_rmw_handle>
 8010134:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8010138:	9300      	str	r3, [sp, #0]
 801013a:	9a07      	ldr	r2, [sp, #28]
 801013c:	6827      	ldr	r7, [r4, #0]
 801013e:	4641      	mov	r1, r8
 8010140:	4633      	mov	r3, r6
 8010142:	f003 fbb1 	bl	80138a8 <rmw_create_subscription>
 8010146:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 801014a:	6827      	ldr	r7, [r4, #0]
 801014c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8010150:	b338      	cbz	r0, 80101a2 <rcl_subscription_init+0xfe>
 8010152:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8010156:	f003 fc87 	bl	8013a68 <rmw_subscription_get_actual_qos>
 801015a:	4607      	mov	r7, r0
 801015c:	b988      	cbnz	r0, 8010182 <rcl_subscription_init+0xde>
 801015e:	6823      	ldr	r3, [r4, #0]
 8010160:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 8010164:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
 8010168:	9807      	ldr	r0, [sp, #28]
 801016a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 801016c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801016e:	4798      	blx	r3
 8010170:	4638      	mov	r0, r7
 8010172:	b009      	add	sp, #36	@ 0x24
 8010174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010178:	27c8      	movs	r7, #200	@ 0xc8
 801017a:	4638      	mov	r0, r7
 801017c:	b009      	add	sp, #36	@ 0x24
 801017e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010182:	6827      	ldr	r7, [r4, #0]
 8010184:	b32f      	cbz	r7, 80101d2 <rcl_subscription_init+0x12e>
 8010186:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801018a:	b153      	cbz	r3, 80101a2 <rcl_subscription_init+0xfe>
 801018c:	4628      	mov	r0, r5
 801018e:	f7ff fd53 	bl	800fc38 <rcl_node_get_rmw_handle>
 8010192:	6823      	ldr	r3, [r4, #0]
 8010194:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8010198:	f003 fc74 	bl	8013a84 <rmw_destroy_subscription>
 801019c:	6827      	ldr	r7, [r4, #0]
 801019e:	4638      	mov	r0, r7
 80101a0:	b197      	cbz	r7, 80101c8 <rcl_subscription_init+0x124>
 80101a2:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 80101a6:	4628      	mov	r0, r5
 80101a8:	f7fa faba 	bl	800a720 <rcutils_allocator_is_valid>
 80101ac:	b1e8      	cbz	r0, 80101ea <rcl_subscription_init+0x146>
 80101ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80101b0:	b1d8      	cbz	r0, 80101ea <rcl_subscription_init+0x146>
 80101b2:	4629      	mov	r1, r5
 80101b4:	f002 fb94 	bl	80128e0 <rmw_subscription_content_filter_options_fini>
 80101b8:	4605      	mov	r5, r0
 80101ba:	b9a0      	cbnz	r0, 80101e6 <rcl_subscription_init+0x142>
 80101bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80101be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101c0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80101c2:	4798      	blx	r3
 80101c4:	6820      	ldr	r0, [r4, #0]
 80101c6:	66fd      	str	r5, [r7, #108]	@ 0x6c
 80101c8:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80101ca:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80101cc:	4798      	blx	r3
 80101ce:	2300      	movs	r3, #0
 80101d0:	6023      	str	r3, [r4, #0]
 80101d2:	2701      	movs	r7, #1
 80101d4:	e7c8      	b.n	8010168 <rcl_subscription_init+0xc4>
 80101d6:	2867      	cmp	r0, #103	@ 0x67
 80101d8:	d0c6      	beq.n	8010168 <rcl_subscription_init+0xc4>
 80101da:	2869      	cmp	r0, #105	@ 0x69
 80101dc:	d007      	beq.n	80101ee <rcl_subscription_init+0x14a>
 80101de:	280a      	cmp	r0, #10
 80101e0:	d1f7      	bne.n	80101d2 <rcl_subscription_init+0x12e>
 80101e2:	270a      	movs	r7, #10
 80101e4:	e7c0      	b.n	8010168 <rcl_subscription_init+0xc4>
 80101e6:	f7ff f93d 	bl	800f464 <rcl_convert_rmw_ret_to_rcl_ret>
 80101ea:	6820      	ldr	r0, [r4, #0]
 80101ec:	e7ec      	b.n	80101c8 <rcl_subscription_init+0x124>
 80101ee:	2767      	movs	r7, #103	@ 0x67
 80101f0:	e7ba      	b.n	8010168 <rcl_subscription_init+0xc4>
 80101f2:	bf00      	nop

080101f4 <rcl_subscription_get_default_options>:
 80101f4:	b510      	push	{r4, lr}
 80101f6:	4907      	ldr	r1, [pc, #28]	@ (8010214 <rcl_subscription_get_default_options+0x20>)
 80101f8:	4604      	mov	r4, r0
 80101fa:	2250      	movs	r2, #80	@ 0x50
 80101fc:	f007 feef 	bl	8017fde <memcpy>
 8010200:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010204:	f7fa fa60 	bl	800a6c8 <rcutils_get_default_allocator>
 8010208:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 801020c:	f002 fb82 	bl	8012914 <rmw_get_default_subscription_options>
 8010210:	4620      	mov	r0, r4
 8010212:	bd10      	pop	{r4, pc}
 8010214:	08019c90 	.word	0x08019c90

08010218 <rcl_take>:
 8010218:	2800      	cmp	r0, #0
 801021a:	d04b      	beq.n	80102b4 <rcl_take+0x9c>
 801021c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010220:	4615      	mov	r5, r2
 8010222:	6802      	ldr	r2, [r0, #0]
 8010224:	b0a0      	sub	sp, #128	@ 0x80
 8010226:	4604      	mov	r4, r0
 8010228:	2a00      	cmp	r2, #0
 801022a:	d03b      	beq.n	80102a4 <rcl_take+0x8c>
 801022c:	461f      	mov	r7, r3
 801022e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 8010232:	2b00      	cmp	r3, #0
 8010234:	d036      	beq.n	80102a4 <rcl_take+0x8c>
 8010236:	460e      	mov	r6, r1
 8010238:	2900      	cmp	r1, #0
 801023a:	d039      	beq.n	80102b0 <rcl_take+0x98>
 801023c:	2d00      	cmp	r5, #0
 801023e:	d03d      	beq.n	80102bc <rcl_take+0xa4>
 8010240:	a802      	add	r0, sp, #8
 8010242:	f002 fbf3 	bl	8012a2c <rmw_get_zero_initialized_message_info>
 8010246:	6823      	ldr	r3, [r4, #0]
 8010248:	f10d 0c08 	add.w	ip, sp, #8
 801024c:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 8010250:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010254:	46ae      	mov	lr, r5
 8010256:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801025a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801025e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010262:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010266:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801026a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801026e:	462b      	mov	r3, r5
 8010270:	e88e 0003 	stmia.w	lr, {r0, r1}
 8010274:	f04f 0800 	mov.w	r8, #0
 8010278:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 801027c:	4631      	mov	r1, r6
 801027e:	4620      	mov	r0, r4
 8010280:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 8010284:	9700      	str	r7, [sp, #0]
 8010286:	f003 fc5d 	bl	8013b44 <rmw_take_with_info>
 801028a:	4603      	mov	r3, r0
 801028c:	b9c0      	cbnz	r0, 80102c0 <rcl_take+0xa8>
 801028e:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 8010292:	f240 1291 	movw	r2, #401	@ 0x191
 8010296:	2900      	cmp	r1, #0
 8010298:	bf08      	it	eq
 801029a:	4613      	moveq	r3, r2
 801029c:	4618      	mov	r0, r3
 801029e:	b020      	add	sp, #128	@ 0x80
 80102a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102a4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80102a8:	4618      	mov	r0, r3
 80102aa:	b020      	add	sp, #128	@ 0x80
 80102ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102b0:	230b      	movs	r3, #11
 80102b2:	e7f3      	b.n	801029c <rcl_take+0x84>
 80102b4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80102b8:	4618      	mov	r0, r3
 80102ba:	4770      	bx	lr
 80102bc:	ad12      	add	r5, sp, #72	@ 0x48
 80102be:	e7bf      	b.n	8010240 <rcl_take+0x28>
 80102c0:	f7ff f8d0 	bl	800f464 <rcl_convert_rmw_ret_to_rcl_ret>
 80102c4:	4603      	mov	r3, r0
 80102c6:	e7e9      	b.n	801029c <rcl_take+0x84>

080102c8 <rcl_subscription_get_rmw_handle>:
 80102c8:	b118      	cbz	r0, 80102d2 <rcl_subscription_get_rmw_handle+0xa>
 80102ca:	6800      	ldr	r0, [r0, #0]
 80102cc:	b108      	cbz	r0, 80102d2 <rcl_subscription_get_rmw_handle+0xa>
 80102ce:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 80102d2:	4770      	bx	lr

080102d4 <rcl_subscription_is_valid>:
 80102d4:	b130      	cbz	r0, 80102e4 <rcl_subscription_is_valid+0x10>
 80102d6:	6800      	ldr	r0, [r0, #0]
 80102d8:	b120      	cbz	r0, 80102e4 <rcl_subscription_is_valid+0x10>
 80102da:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 80102de:	3800      	subs	r0, #0
 80102e0:	bf18      	it	ne
 80102e2:	2001      	movne	r0, #1
 80102e4:	4770      	bx	lr
 80102e6:	bf00      	nop

080102e8 <rcl_get_system_time>:
 80102e8:	4608      	mov	r0, r1
 80102ea:	f7fa ba61 	b.w	800a7b0 <rcutils_system_time_now>
 80102ee:	bf00      	nop

080102f0 <rcl_get_steady_time>:
 80102f0:	4608      	mov	r0, r1
 80102f2:	f7fa ba87 	b.w	800a804 <rcutils_steady_time_now>
 80102f6:	bf00      	nop

080102f8 <rcl_get_ros_time>:
 80102f8:	7a03      	ldrb	r3, [r0, #8]
 80102fa:	b510      	push	{r4, lr}
 80102fc:	460c      	mov	r4, r1
 80102fe:	b143      	cbz	r3, 8010312 <rcl_get_ros_time+0x1a>
 8010300:	2105      	movs	r1, #5
 8010302:	f001 ff81 	bl	8012208 <__atomic_load_8>
 8010306:	4602      	mov	r2, r0
 8010308:	460b      	mov	r3, r1
 801030a:	e9c4 2300 	strd	r2, r3, [r4]
 801030e:	2000      	movs	r0, #0
 8010310:	bd10      	pop	{r4, pc}
 8010312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010316:	4608      	mov	r0, r1
 8010318:	f7fa ba4a 	b.w	800a7b0 <rcutils_system_time_now>

0801031c <rcl_clock_valid>:
 801031c:	b138      	cbz	r0, 801032e <rcl_clock_valid+0x12>
 801031e:	7803      	ldrb	r3, [r0, #0]
 8010320:	b123      	cbz	r3, 801032c <rcl_clock_valid+0x10>
 8010322:	68c0      	ldr	r0, [r0, #12]
 8010324:	3800      	subs	r0, #0
 8010326:	bf18      	it	ne
 8010328:	2001      	movne	r0, #1
 801032a:	4770      	bx	lr
 801032c:	4618      	mov	r0, r3
 801032e:	4770      	bx	lr

08010330 <rcl_clock_init>:
 8010330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010332:	4605      	mov	r5, r0
 8010334:	4610      	mov	r0, r2
 8010336:	4614      	mov	r4, r2
 8010338:	460e      	mov	r6, r1
 801033a:	f7fa f9f1 	bl	800a720 <rcutils_allocator_is_valid>
 801033e:	b128      	cbz	r0, 801034c <rcl_clock_init+0x1c>
 8010340:	2d03      	cmp	r5, #3
 8010342:	d803      	bhi.n	801034c <rcl_clock_init+0x1c>
 8010344:	e8df f005 	tbb	[pc, r5]
 8010348:	044c291a 	.word	0x044c291a
 801034c:	200b      	movs	r0, #11
 801034e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010350:	2e00      	cmp	r6, #0
 8010352:	d0fb      	beq.n	801034c <rcl_clock_init+0x1c>
 8010354:	2c00      	cmp	r4, #0
 8010356:	d0f9      	beq.n	801034c <rcl_clock_init+0x1c>
 8010358:	2300      	movs	r3, #0
 801035a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801035e:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 8010404 <rcl_clock_init+0xd4>
 8010362:	6133      	str	r3, [r6, #16]
 8010364:	f106 0514 	add.w	r5, r6, #20
 8010368:	2703      	movs	r7, #3
 801036a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801036c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801036e:	6823      	ldr	r3, [r4, #0]
 8010370:	602b      	str	r3, [r5, #0]
 8010372:	f8c6 c00c 	str.w	ip, [r6, #12]
 8010376:	7037      	strb	r7, [r6, #0]
 8010378:	2000      	movs	r0, #0
 801037a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801037c:	2e00      	cmp	r6, #0
 801037e:	d0e5      	beq.n	801034c <rcl_clock_init+0x1c>
 8010380:	2300      	movs	r3, #0
 8010382:	7033      	strb	r3, [r6, #0]
 8010384:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010388:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801038c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801038e:	f106 0514 	add.w	r5, r6, #20
 8010392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010394:	6823      	ldr	r3, [r4, #0]
 8010396:	602b      	str	r3, [r5, #0]
 8010398:	e7ee      	b.n	8010378 <rcl_clock_init+0x48>
 801039a:	2e00      	cmp	r6, #0
 801039c:	d0d6      	beq.n	801034c <rcl_clock_init+0x1c>
 801039e:	2c00      	cmp	r4, #0
 80103a0:	d0d4      	beq.n	801034c <rcl_clock_init+0x1c>
 80103a2:	2700      	movs	r7, #0
 80103a4:	7037      	strb	r7, [r6, #0]
 80103a6:	46a4      	mov	ip, r4
 80103a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80103ac:	f106 0514 	add.w	r5, r6, #20
 80103b0:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80103b4:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80103b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80103ba:	f8dc 3000 	ldr.w	r3, [ip]
 80103be:	602b      	str	r3, [r5, #0]
 80103c0:	6921      	ldr	r1, [r4, #16]
 80103c2:	6823      	ldr	r3, [r4, #0]
 80103c4:	2010      	movs	r0, #16
 80103c6:	4798      	blx	r3
 80103c8:	6130      	str	r0, [r6, #16]
 80103ca:	b1b8      	cbz	r0, 80103fc <rcl_clock_init+0xcc>
 80103cc:	2200      	movs	r2, #0
 80103ce:	2300      	movs	r3, #0
 80103d0:	e9c0 2300 	strd	r2, r3, [r0]
 80103d4:	4a0a      	ldr	r2, [pc, #40]	@ (8010400 <rcl_clock_init+0xd0>)
 80103d6:	7207      	strb	r7, [r0, #8]
 80103d8:	2301      	movs	r3, #1
 80103da:	60f2      	str	r2, [r6, #12]
 80103dc:	7033      	strb	r3, [r6, #0]
 80103de:	e7cb      	b.n	8010378 <rcl_clock_init+0x48>
 80103e0:	2e00      	cmp	r6, #0
 80103e2:	d0b3      	beq.n	801034c <rcl_clock_init+0x1c>
 80103e4:	2c00      	cmp	r4, #0
 80103e6:	d0b1      	beq.n	801034c <rcl_clock_init+0x1c>
 80103e8:	2300      	movs	r3, #0
 80103ea:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80103ee:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8010408 <rcl_clock_init+0xd8>
 80103f2:	6133      	str	r3, [r6, #16]
 80103f4:	f106 0514 	add.w	r5, r6, #20
 80103f8:	2702      	movs	r7, #2
 80103fa:	e7b6      	b.n	801036a <rcl_clock_init+0x3a>
 80103fc:	200a      	movs	r0, #10
 80103fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010400:	080102f9 	.word	0x080102f9
 8010404:	080102f1 	.word	0x080102f1
 8010408:	080102e9 	.word	0x080102e9

0801040c <rcl_clock_get_now>:
 801040c:	b140      	cbz	r0, 8010420 <rcl_clock_get_now+0x14>
 801040e:	b139      	cbz	r1, 8010420 <rcl_clock_get_now+0x14>
 8010410:	7803      	ldrb	r3, [r0, #0]
 8010412:	b11b      	cbz	r3, 801041c <rcl_clock_get_now+0x10>
 8010414:	68c3      	ldr	r3, [r0, #12]
 8010416:	b10b      	cbz	r3, 801041c <rcl_clock_get_now+0x10>
 8010418:	6900      	ldr	r0, [r0, #16]
 801041a:	4718      	bx	r3
 801041c:	2001      	movs	r0, #1
 801041e:	4770      	bx	lr
 8010420:	200b      	movs	r0, #11
 8010422:	4770      	bx	lr

08010424 <rcl_is_enabled_ros_time_override>:
 8010424:	b158      	cbz	r0, 801043e <rcl_is_enabled_ros_time_override+0x1a>
 8010426:	b151      	cbz	r1, 801043e <rcl_is_enabled_ros_time_override+0x1a>
 8010428:	7803      	ldrb	r3, [r0, #0]
 801042a:	2b01      	cmp	r3, #1
 801042c:	d105      	bne.n	801043a <rcl_is_enabled_ros_time_override+0x16>
 801042e:	6902      	ldr	r2, [r0, #16]
 8010430:	b11a      	cbz	r2, 801043a <rcl_is_enabled_ros_time_override+0x16>
 8010432:	7a13      	ldrb	r3, [r2, #8]
 8010434:	700b      	strb	r3, [r1, #0]
 8010436:	2000      	movs	r0, #0
 8010438:	4770      	bx	lr
 801043a:	2001      	movs	r0, #1
 801043c:	4770      	bx	lr
 801043e:	200b      	movs	r0, #11
 8010440:	4770      	bx	lr
 8010442:	bf00      	nop

08010444 <rcl_clock_add_jump_callback>:
 8010444:	b082      	sub	sp, #8
 8010446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801044a:	a906      	add	r1, sp, #24
 801044c:	e881 000c 	stmia.w	r1, {r2, r3}
 8010450:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	@ 0x30
 8010454:	b320      	cbz	r0, 80104a0 <rcl_clock_add_jump_callback+0x5c>
 8010456:	4605      	mov	r5, r0
 8010458:	3014      	adds	r0, #20
 801045a:	f7fa f961 	bl	800a720 <rcutils_allocator_is_valid>
 801045e:	b1f8      	cbz	r0, 80104a0 <rcl_clock_add_jump_callback+0x5c>
 8010460:	b1f7      	cbz	r7, 80104a0 <rcl_clock_add_jump_callback+0x5c>
 8010462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010464:	2b00      	cmp	r3, #0
 8010466:	db1b      	blt.n	80104a0 <rcl_clock_add_jump_callback+0x5c>
 8010468:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801046c:	2a01      	cmp	r2, #1
 801046e:	f173 0300 	sbcs.w	r3, r3, #0
 8010472:	da15      	bge.n	80104a0 <rcl_clock_add_jump_callback+0x5c>
 8010474:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
 8010478:	2c00      	cmp	r4, #0
 801047a:	d042      	beq.n	8010502 <rcl_clock_add_jump_callback+0xbe>
 801047c:	4603      	mov	r3, r0
 801047e:	2200      	movs	r2, #0
 8010480:	e003      	b.n	801048a <rcl_clock_add_jump_callback+0x46>
 8010482:	4294      	cmp	r4, r2
 8010484:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8010488:	d011      	beq.n	80104ae <rcl_clock_add_jump_callback+0x6a>
 801048a:	6819      	ldr	r1, [r3, #0]
 801048c:	42b9      	cmp	r1, r7
 801048e:	f102 0201 	add.w	r2, r2, #1
 8010492:	d1f6      	bne.n	8010482 <rcl_clock_add_jump_callback+0x3e>
 8010494:	6a19      	ldr	r1, [r3, #32]
 8010496:	42b1      	cmp	r1, r6
 8010498:	d1f3      	bne.n	8010482 <rcl_clock_add_jump_callback+0x3e>
 801049a:	f04f 0e01 	mov.w	lr, #1
 801049e:	e001      	b.n	80104a4 <rcl_clock_add_jump_callback+0x60>
 80104a0:	f04f 0e0b 	mov.w	lr, #11
 80104a4:	4670      	mov	r0, lr
 80104a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104aa:	b002      	add	sp, #8
 80104ac:	4770      	bx	lr
 80104ae:	3401      	adds	r4, #1
 80104b0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80104b4:	00e1      	lsls	r1, r4, #3
 80104b6:	69eb      	ldr	r3, [r5, #28]
 80104b8:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80104ba:	4798      	blx	r3
 80104bc:	b1f0      	cbz	r0, 80104fc <rcl_clock_add_jump_callback+0xb8>
 80104be:	68ab      	ldr	r3, [r5, #8]
 80104c0:	6068      	str	r0, [r5, #4]
 80104c2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80104c6:	f10d 0c18 	add.w	ip, sp, #24
 80104ca:	f840 7032 	str.w	r7, [r0, r2, lsl #3]
 80104ce:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
 80104d2:	f103 0801 	add.w	r8, r3, #1
 80104d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80104da:	f104 0708 	add.w	r7, r4, #8
 80104de:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80104e0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80104e4:	f04f 0e00 	mov.w	lr, #0
 80104e8:	e887 0003 	stmia.w	r7, {r0, r1}
 80104ec:	6226      	str	r6, [r4, #32]
 80104ee:	4670      	mov	r0, lr
 80104f0:	f8c5 8008 	str.w	r8, [r5, #8]
 80104f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104f8:	b002      	add	sp, #8
 80104fa:	4770      	bx	lr
 80104fc:	f04f 0e0a 	mov.w	lr, #10
 8010500:	e7d0      	b.n	80104a4 <rcl_clock_add_jump_callback+0x60>
 8010502:	2128      	movs	r1, #40	@ 0x28
 8010504:	e7d7      	b.n	80104b6 <rcl_clock_add_jump_callback+0x72>
 8010506:	bf00      	nop

08010508 <rcl_clock_remove_jump_callback>:
 8010508:	2800      	cmp	r0, #0
 801050a:	d05a      	beq.n	80105c2 <rcl_clock_remove_jump_callback+0xba>
 801050c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010510:	4605      	mov	r5, r0
 8010512:	3014      	adds	r0, #20
 8010514:	460f      	mov	r7, r1
 8010516:	4692      	mov	sl, r2
 8010518:	f7fa f902 	bl	800a720 <rcutils_allocator_is_valid>
 801051c:	2800      	cmp	r0, #0
 801051e:	d03f      	beq.n	80105a0 <rcl_clock_remove_jump_callback+0x98>
 8010520:	2f00      	cmp	r7, #0
 8010522:	d03d      	beq.n	80105a0 <rcl_clock_remove_jump_callback+0x98>
 8010524:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8010528:	f1b8 0f00 	cmp.w	r8, #0
 801052c:	d00c      	beq.n	8010548 <rcl_clock_remove_jump_callback+0x40>
 801052e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8010532:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8010536:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 801053a:	464c      	mov	r4, r9
 801053c:	6823      	ldr	r3, [r4, #0]
 801053e:	42bb      	cmp	r3, r7
 8010540:	d005      	beq.n	801054e <rcl_clock_remove_jump_callback+0x46>
 8010542:	3428      	adds	r4, #40	@ 0x28
 8010544:	42b4      	cmp	r4, r6
 8010546:	d1f9      	bne.n	801053c <rcl_clock_remove_jump_callback+0x34>
 8010548:	2001      	movs	r0, #1
 801054a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801054e:	6a23      	ldr	r3, [r4, #32]
 8010550:	3428      	adds	r4, #40	@ 0x28
 8010552:	42b4      	cmp	r4, r6
 8010554:	d02c      	beq.n	80105b0 <rcl_clock_remove_jump_callback+0xa8>
 8010556:	4553      	cmp	r3, sl
 8010558:	d1f0      	bne.n	801053c <rcl_clock_remove_jump_callback+0x34>
 801055a:	46a6      	mov	lr, r4
 801055c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010560:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8010564:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010568:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801056c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010570:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010574:	3428      	adds	r4, #40	@ 0x28
 8010576:	42a6      	cmp	r6, r4
 8010578:	e88c 0003 	stmia.w	ip, {r0, r1}
 801057c:	d1ed      	bne.n	801055a <rcl_clock_remove_jump_callback+0x52>
 801057e:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8010582:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8010584:	60ac      	str	r4, [r5, #8]
 8010586:	b174      	cbz	r4, 80105a6 <rcl_clock_remove_jump_callback+0x9e>
 8010588:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801058c:	00e1      	lsls	r1, r4, #3
 801058e:	69eb      	ldr	r3, [r5, #28]
 8010590:	4648      	mov	r0, r9
 8010592:	4798      	blx	r3
 8010594:	4604      	mov	r4, r0
 8010596:	b1b0      	cbz	r0, 80105c6 <rcl_clock_remove_jump_callback+0xbe>
 8010598:	606c      	str	r4, [r5, #4]
 801059a:	2000      	movs	r0, #0
 801059c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105a0:	200b      	movs	r0, #11
 80105a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105a6:	69ab      	ldr	r3, [r5, #24]
 80105a8:	4611      	mov	r1, r2
 80105aa:	4648      	mov	r0, r9
 80105ac:	4798      	blx	r3
 80105ae:	e7f3      	b.n	8010598 <rcl_clock_remove_jump_callback+0x90>
 80105b0:	4553      	cmp	r3, sl
 80105b2:	d1c9      	bne.n	8010548 <rcl_clock_remove_jump_callback+0x40>
 80105b4:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 80105b8:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80105ba:	60ac      	str	r4, [r5, #8]
 80105bc:	2c00      	cmp	r4, #0
 80105be:	d1e3      	bne.n	8010588 <rcl_clock_remove_jump_callback+0x80>
 80105c0:	e7f1      	b.n	80105a6 <rcl_clock_remove_jump_callback+0x9e>
 80105c2:	200b      	movs	r0, #11
 80105c4:	4770      	bx	lr
 80105c6:	200a      	movs	r0, #10
 80105c8:	e7eb      	b.n	80105a2 <rcl_clock_remove_jump_callback+0x9a>
 80105ca:	bf00      	nop

080105cc <_rcl_timer_time_jump>:
 80105cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105d0:	4681      	mov	r9, r0
 80105d2:	b087      	sub	sp, #28
 80105d4:	4614      	mov	r4, r2
 80105d6:	b131      	cbz	r1, 80105e6 <_rcl_timer_time_jump+0x1a>
 80105d8:	7803      	ldrb	r3, [r0, #0]
 80105da:	3b02      	subs	r3, #2
 80105dc:	2b01      	cmp	r3, #1
 80105de:	d93e      	bls.n	801065e <_rcl_timer_time_jump+0x92>
 80105e0:	b007      	add	sp, #28
 80105e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105e6:	6810      	ldr	r0, [r2, #0]
 80105e8:	a904      	add	r1, sp, #16
 80105ea:	f7ff ff0f 	bl	801040c <rcl_clock_get_now>
 80105ee:	2800      	cmp	r0, #0
 80105f0:	d1f6      	bne.n	80105e0 <_rcl_timer_time_jump+0x14>
 80105f2:	f104 0a20 	add.w	sl, r4, #32
 80105f6:	2105      	movs	r1, #5
 80105f8:	4650      	mov	r0, sl
 80105fa:	f001 fe05 	bl	8012208 <__atomic_load_8>
 80105fe:	f104 0b28 	add.w	fp, r4, #40	@ 0x28
 8010602:	4680      	mov	r8, r0
 8010604:	460e      	mov	r6, r1
 8010606:	4658      	mov	r0, fp
 8010608:	2105      	movs	r1, #5
 801060a:	f001 fdfd 	bl	8012208 <__atomic_load_8>
 801060e:	4607      	mov	r7, r0
 8010610:	460d      	mov	r5, r1
 8010612:	f104 0018 	add.w	r0, r4, #24
 8010616:	2105      	movs	r1, #5
 8010618:	f001 fdf6 	bl	8012208 <__atomic_load_8>
 801061c:	f899 3000 	ldrb.w	r3, [r9]
 8010620:	9003      	str	r0, [sp, #12]
 8010622:	3b02      	subs	r3, #2
 8010624:	2b01      	cmp	r3, #1
 8010626:	4689      	mov	r9, r1
 8010628:	d935      	bls.n	8010696 <_rcl_timer_time_jump+0xca>
 801062a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801062e:	42ba      	cmp	r2, r7
 8010630:	eb73 0505 	sbcs.w	r5, r3, r5
 8010634:	da57      	bge.n	80106e6 <_rcl_timer_time_jump+0x11a>
 8010636:	4542      	cmp	r2, r8
 8010638:	eb73 0606 	sbcs.w	r6, r3, r6
 801063c:	dad0      	bge.n	80105e0 <_rcl_timer_time_jump+0x14>
 801063e:	1882      	adds	r2, r0, r2
 8010640:	f04f 0405 	mov.w	r4, #5
 8010644:	eb43 0309 	adc.w	r3, r3, r9
 8010648:	4658      	mov	r0, fp
 801064a:	9400      	str	r4, [sp, #0]
 801064c:	f001 fe12 	bl	8012274 <__atomic_store_8>
 8010650:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010654:	9400      	str	r4, [sp, #0]
 8010656:	4650      	mov	r0, sl
 8010658:	f001 fe0c 	bl	8012274 <__atomic_store_8>
 801065c:	e7c0      	b.n	80105e0 <_rcl_timer_time_jump+0x14>
 801065e:	6810      	ldr	r0, [r2, #0]
 8010660:	a904      	add	r1, sp, #16
 8010662:	f7ff fed3 	bl	801040c <rcl_clock_get_now>
 8010666:	2800      	cmp	r0, #0
 8010668:	d1ba      	bne.n	80105e0 <_rcl_timer_time_jump+0x14>
 801066a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801066e:	4313      	orrs	r3, r2
 8010670:	d0b6      	beq.n	80105e0 <_rcl_timer_time_jump+0x14>
 8010672:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010676:	2105      	movs	r1, #5
 8010678:	f001 fdc6 	bl	8012208 <__atomic_load_8>
 801067c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010680:	1a82      	subs	r2, r0, r2
 8010682:	f04f 0005 	mov.w	r0, #5
 8010686:	9000      	str	r0, [sp, #0]
 8010688:	eb61 0303 	sbc.w	r3, r1, r3
 801068c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8010690:	f001 fdf0 	bl	8012274 <__atomic_store_8>
 8010694:	e7a4      	b.n	80105e0 <_rcl_timer_time_jump+0x14>
 8010696:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801069a:	4313      	orrs	r3, r2
 801069c:	d0a0      	beq.n	80105e0 <_rcl_timer_time_jump+0x14>
 801069e:	2605      	movs	r6, #5
 80106a0:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80106a4:	2300      	movs	r3, #0
 80106a6:	9600      	str	r6, [sp, #0]
 80106a8:	2200      	movs	r2, #0
 80106aa:	f001 fe19 	bl	80122e0 <__atomic_exchange_8>
 80106ae:	ea51 0300 	orrs.w	r3, r1, r0
 80106b2:	4604      	mov	r4, r0
 80106b4:	460d      	mov	r5, r1
 80106b6:	d093      	beq.n	80105e0 <_rcl_timer_time_jump+0x14>
 80106b8:	9a04      	ldr	r2, [sp, #16]
 80106ba:	9b05      	ldr	r3, [sp, #20]
 80106bc:	9600      	str	r6, [sp, #0]
 80106be:	1b12      	subs	r2, r2, r4
 80106c0:	eb63 0301 	sbc.w	r3, r3, r1
 80106c4:	9903      	ldr	r1, [sp, #12]
 80106c6:	1852      	adds	r2, r2, r1
 80106c8:	eb43 0309 	adc.w	r3, r3, r9
 80106cc:	4658      	mov	r0, fp
 80106ce:	f001 fdd1 	bl	8012274 <__atomic_store_8>
 80106d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80106d6:	1b12      	subs	r2, r2, r4
 80106d8:	9600      	str	r6, [sp, #0]
 80106da:	eb63 0305 	sbc.w	r3, r3, r5
 80106de:	4650      	mov	r0, sl
 80106e0:	f001 fdc8 	bl	8012274 <__atomic_store_8>
 80106e4:	e77c      	b.n	80105e0 <_rcl_timer_time_jump+0x14>
 80106e6:	f104 0008 	add.w	r0, r4, #8
 80106ea:	f006 f9d1 	bl	8016a90 <rcl_trigger_guard_condition>
 80106ee:	e777      	b.n	80105e0 <_rcl_timer_time_jump+0x14>

080106f0 <rcl_get_zero_initialized_timer>:
 80106f0:	4b01      	ldr	r3, [pc, #4]	@ (80106f8 <rcl_get_zero_initialized_timer+0x8>)
 80106f2:	6818      	ldr	r0, [r3, #0]
 80106f4:	4770      	bx	lr
 80106f6:	bf00      	nop
 80106f8:	08019ce0 	.word	0x08019ce0
 80106fc:	00000000 	.word	0x00000000

08010700 <rcl_timer_init2>:
 8010700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010704:	b0ae      	sub	sp, #184	@ 0xb8
 8010706:	4604      	mov	r4, r0
 8010708:	a839      	add	r0, sp, #228	@ 0xe4
 801070a:	f89d 80f8 	ldrb.w	r8, [sp, #248]	@ 0xf8
 801070e:	460d      	mov	r5, r1
 8010710:	4691      	mov	r9, r2
 8010712:	f7fa f805 	bl	800a720 <rcutils_allocator_is_valid>
 8010716:	2800      	cmp	r0, #0
 8010718:	f000 8097 	beq.w	801084a <rcl_timer_init2+0x14a>
 801071c:	2c00      	cmp	r4, #0
 801071e:	f000 8094 	beq.w	801084a <rcl_timer_init2+0x14a>
 8010722:	2d00      	cmp	r5, #0
 8010724:	f000 8091 	beq.w	801084a <rcl_timer_init2+0x14a>
 8010728:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 801072a:	2b00      	cmp	r3, #0
 801072c:	f2c0 808d 	blt.w	801084a <rcl_timer_init2+0x14a>
 8010730:	6823      	ldr	r3, [r4, #0]
 8010732:	b123      	cbz	r3, 801073e <rcl_timer_init2+0x3e>
 8010734:	2664      	movs	r6, #100	@ 0x64
 8010736:	4630      	mov	r0, r6
 8010738:	b02e      	add	sp, #184	@ 0xb8
 801073a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801073e:	a908      	add	r1, sp, #32
 8010740:	4628      	mov	r0, r5
 8010742:	f7ff fe63 	bl	801040c <rcl_clock_get_now>
 8010746:	4606      	mov	r6, r0
 8010748:	2800      	cmp	r0, #0
 801074a:	d1f4      	bne.n	8010736 <rcl_timer_init2+0x36>
 801074c:	ae06      	add	r6, sp, #24
 801074e:	4630      	mov	r0, r6
 8010750:	e9cd 5916 	strd	r5, r9, [sp, #88]	@ 0x58
 8010754:	f006 f8be 	bl	80168d4 <rcl_get_zero_initialized_guard_condition>
 8010758:	e896 0003 	ldmia.w	r6, {r0, r1}
 801075c:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 8010760:	ae0b      	add	r6, sp, #44	@ 0x2c
 8010762:	e88a 0003 	stmia.w	sl, {r0, r1}
 8010766:	4630      	mov	r0, r6
 8010768:	f006 f98c 	bl	8016a84 <rcl_guard_condition_get_default_options>
 801076c:	ab0d      	add	r3, sp, #52	@ 0x34
 801076e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010772:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010776:	4649      	mov	r1, r9
 8010778:	e896 000c 	ldmia.w	r6, {r2, r3}
 801077c:	4650      	mov	r0, sl
 801077e:	f006 f8b3 	bl	80168e8 <rcl_guard_condition_init>
 8010782:	4606      	mov	r6, r0
 8010784:	2800      	cmp	r0, #0
 8010786:	d1d6      	bne.n	8010736 <rcl_timer_init2+0x36>
 8010788:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 801078a:	931a      	str	r3, [sp, #104]	@ 0x68
 801078c:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 8010790:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8010794:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010798:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
 801079a:	902a      	str	r0, [sp, #168]	@ 0xa8
 801079c:	e9cd 002b 	strd	r0, r0, [sp, #172]	@ 0xac
 80107a0:	ed9f 7b35 	vldr	d7, [pc, #212]	@ 8010878 <rcl_timer_init2+0x178>
 80107a4:	19d0      	adds	r0, r2, r7
 80107a6:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 80107a8:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 80107ac:	eb43 0107 	adc.w	r1, r3, r7
 80107b0:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 80107b4:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 80107b8:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 80107bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80107c0:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
 80107c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80107c8:	f8dc 3000 	ldr.w	r3, [ip]
 80107cc:	f8ce 3000 	str.w	r3, [lr]
 80107d0:	f088 0801 	eor.w	r8, r8, #1
 80107d4:	f88d 8090 	strb.w	r8, [sp, #144]	@ 0x90
 80107d8:	4619      	mov	r1, r3
 80107da:	2060      	movs	r0, #96	@ 0x60
 80107dc:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80107de:	4798      	blx	r3
 80107e0:	4680      	mov	r8, r0
 80107e2:	6020      	str	r0, [r4, #0]
 80107e4:	2800      	cmp	r0, #0
 80107e6:	d035      	beq.n	8010854 <rcl_timer_init2+0x154>
 80107e8:	a916      	add	r1, sp, #88	@ 0x58
 80107ea:	2260      	movs	r2, #96	@ 0x60
 80107ec:	f007 fbf7 	bl	8017fde <memcpy>
 80107f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d19e      	bne.n	8010736 <rcl_timer_init2+0x36>
 80107f8:	2001      	movs	r0, #1
 80107fa:	2100      	movs	r1, #0
 80107fc:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8010800:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010804:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8010808:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801080c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8010810:	4b1b      	ldr	r3, [pc, #108]	@ (8010880 <rcl_timer_init2+0x180>)
 8010812:	9304      	str	r3, [sp, #16]
 8010814:	f8cd 8014 	str.w	r8, [sp, #20]
 8010818:	ab12      	add	r3, sp, #72	@ 0x48
 801081a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801081c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010820:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8010824:	4628      	mov	r0, r5
 8010826:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801082a:	f7ff fe0b 	bl	8010444 <rcl_clock_add_jump_callback>
 801082e:	4605      	mov	r5, r0
 8010830:	2800      	cmp	r0, #0
 8010832:	d080      	beq.n	8010736 <rcl_timer_init2+0x36>
 8010834:	4650      	mov	r0, sl
 8010836:	f006 f903 	bl	8016a40 <rcl_guard_condition_fini>
 801083a:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 801083c:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801083e:	6820      	ldr	r0, [r4, #0]
 8010840:	4798      	blx	r3
 8010842:	2300      	movs	r3, #0
 8010844:	6023      	str	r3, [r4, #0]
 8010846:	462e      	mov	r6, r5
 8010848:	e775      	b.n	8010736 <rcl_timer_init2+0x36>
 801084a:	260b      	movs	r6, #11
 801084c:	4630      	mov	r0, r6
 801084e:	b02e      	add	sp, #184	@ 0xb8
 8010850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010854:	4650      	mov	r0, sl
 8010856:	f006 f8f3 	bl	8016a40 <rcl_guard_condition_fini>
 801085a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801085c:	781b      	ldrb	r3, [r3, #0]
 801085e:	2b01      	cmp	r3, #1
 8010860:	d001      	beq.n	8010866 <rcl_timer_init2+0x166>
 8010862:	260a      	movs	r6, #10
 8010864:	e767      	b.n	8010736 <rcl_timer_init2+0x36>
 8010866:	4906      	ldr	r1, [pc, #24]	@ (8010880 <rcl_timer_init2+0x180>)
 8010868:	4622      	mov	r2, r4
 801086a:	4628      	mov	r0, r5
 801086c:	f7ff fe4c 	bl	8010508 <rcl_clock_remove_jump_callback>
 8010870:	e7f7      	b.n	8010862 <rcl_timer_init2+0x162>
 8010872:	bf00      	nop
 8010874:	f3af 8000 	nop.w
	...
 8010880:	080105cd 	.word	0x080105cd

08010884 <rcl_timer_clock>:
 8010884:	b130      	cbz	r0, 8010894 <rcl_timer_clock+0x10>
 8010886:	b129      	cbz	r1, 8010894 <rcl_timer_clock+0x10>
 8010888:	6803      	ldr	r3, [r0, #0]
 801088a:	b12b      	cbz	r3, 8010898 <rcl_timer_clock+0x14>
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	600b      	str	r3, [r1, #0]
 8010890:	2000      	movs	r0, #0
 8010892:	4770      	bx	lr
 8010894:	200b      	movs	r0, #11
 8010896:	4770      	bx	lr
 8010898:	f44f 7048 	mov.w	r0, #800	@ 0x320
 801089c:	4770      	bx	lr
 801089e:	bf00      	nop

080108a0 <rcl_timer_call>:
 80108a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108a4:	b087      	sub	sp, #28
 80108a6:	2800      	cmp	r0, #0
 80108a8:	d067      	beq.n	801097a <rcl_timer_call+0xda>
 80108aa:	6803      	ldr	r3, [r0, #0]
 80108ac:	4604      	mov	r4, r0
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d068      	beq.n	8010984 <rcl_timer_call+0xe4>
 80108b2:	f3bf 8f5b 	dmb	ish
 80108b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80108ba:	f3bf 8f5b 	dmb	ish
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d150      	bne.n	8010964 <rcl_timer_call+0xc4>
 80108c2:	6803      	ldr	r3, [r0, #0]
 80108c4:	a904      	add	r1, sp, #16
 80108c6:	6818      	ldr	r0, [r3, #0]
 80108c8:	f7ff fda0 	bl	801040c <rcl_clock_get_now>
 80108cc:	4605      	mov	r5, r0
 80108ce:	2800      	cmp	r0, #0
 80108d0:	d144      	bne.n	801095c <rcl_timer_call+0xbc>
 80108d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	db4a      	blt.n	8010970 <rcl_timer_call+0xd0>
 80108da:	6820      	ldr	r0, [r4, #0]
 80108dc:	f04f 0a05 	mov.w	sl, #5
 80108e0:	f8cd a000 	str.w	sl, [sp]
 80108e4:	3020      	adds	r0, #32
 80108e6:	f001 fcfb 	bl	80122e0 <__atomic_exchange_8>
 80108ea:	6823      	ldr	r3, [r4, #0]
 80108ec:	f3bf 8f5b 	dmb	ish
 80108f0:	4680      	mov	r8, r0
 80108f2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80108f6:	f3bf 8f5b 	dmb	ish
 80108fa:	6820      	ldr	r0, [r4, #0]
 80108fc:	4689      	mov	r9, r1
 80108fe:	3028      	adds	r0, #40	@ 0x28
 8010900:	4651      	mov	r1, sl
 8010902:	f001 fc81 	bl	8012208 <__atomic_load_8>
 8010906:	4606      	mov	r6, r0
 8010908:	6820      	ldr	r0, [r4, #0]
 801090a:	460f      	mov	r7, r1
 801090c:	3018      	adds	r0, #24
 801090e:	4651      	mov	r1, sl
 8010910:	f001 fc7a 	bl	8012208 <__atomic_load_8>
 8010914:	1836      	adds	r6, r6, r0
 8010916:	eb41 0707 	adc.w	r7, r1, r7
 801091a:	4602      	mov	r2, r0
 801091c:	460b      	mov	r3, r1
 801091e:	4682      	mov	sl, r0
 8010920:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010924:	42b0      	cmp	r0, r6
 8010926:	eb71 0c07 	sbcs.w	ip, r1, r7
 801092a:	db04      	blt.n	8010936 <rcl_timer_call+0x96>
 801092c:	ea53 0c02 	orrs.w	ip, r3, r2
 8010930:	d12b      	bne.n	801098a <rcl_timer_call+0xea>
 8010932:	4606      	mov	r6, r0
 8010934:	460f      	mov	r7, r1
 8010936:	6820      	ldr	r0, [r4, #0]
 8010938:	2105      	movs	r1, #5
 801093a:	4632      	mov	r2, r6
 801093c:	463b      	mov	r3, r7
 801093e:	3028      	adds	r0, #40	@ 0x28
 8010940:	9100      	str	r1, [sp, #0]
 8010942:	f001 fc97 	bl	8012274 <__atomic_store_8>
 8010946:	f1bb 0f00 	cmp.w	fp, #0
 801094a:	d007      	beq.n	801095c <rcl_timer_call+0xbc>
 801094c:	9a04      	ldr	r2, [sp, #16]
 801094e:	9b05      	ldr	r3, [sp, #20]
 8010950:	ebb2 0208 	subs.w	r2, r2, r8
 8010954:	4620      	mov	r0, r4
 8010956:	eb63 0309 	sbc.w	r3, r3, r9
 801095a:	47d8      	blx	fp
 801095c:	4628      	mov	r0, r5
 801095e:	b007      	add	sp, #28
 8010960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010964:	f240 3521 	movw	r5, #801	@ 0x321
 8010968:	4628      	mov	r0, r5
 801096a:	b007      	add	sp, #28
 801096c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010970:	2501      	movs	r5, #1
 8010972:	4628      	mov	r0, r5
 8010974:	b007      	add	sp, #28
 8010976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801097a:	250b      	movs	r5, #11
 801097c:	4628      	mov	r0, r5
 801097e:	b007      	add	sp, #28
 8010980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010984:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8010988:	e7e8      	b.n	801095c <rcl_timer_call+0xbc>
 801098a:	1b80      	subs	r0, r0, r6
 801098c:	eb61 0107 	sbc.w	r1, r1, r7
 8010990:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010994:	f7f0 f85a 	bl	8000a4c <__aeabi_ldivmod>
 8010998:	9b02      	ldr	r3, [sp, #8]
 801099a:	3001      	adds	r0, #1
 801099c:	f141 0100 	adc.w	r1, r1, #0
 80109a0:	fb00 f303 	mul.w	r3, r0, r3
 80109a4:	fb01 330a 	mla	r3, r1, sl, r3
 80109a8:	fba0 0a0a 	umull	r0, sl, r0, sl
 80109ac:	1830      	adds	r0, r6, r0
 80109ae:	4453      	add	r3, sl
 80109b0:	eb43 0707 	adc.w	r7, r3, r7
 80109b4:	4606      	mov	r6, r0
 80109b6:	e7be      	b.n	8010936 <rcl_timer_call+0x96>

080109b8 <rcl_timer_is_ready>:
 80109b8:	b398      	cbz	r0, 8010a22 <rcl_timer_is_ready+0x6a>
 80109ba:	b530      	push	{r4, r5, lr}
 80109bc:	6803      	ldr	r3, [r0, #0]
 80109be:	b083      	sub	sp, #12
 80109c0:	4604      	mov	r4, r0
 80109c2:	b383      	cbz	r3, 8010a26 <rcl_timer_is_ready+0x6e>
 80109c4:	460d      	mov	r5, r1
 80109c6:	b349      	cbz	r1, 8010a1c <rcl_timer_is_ready+0x64>
 80109c8:	f3bf 8f5b 	dmb	ish
 80109cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80109d0:	f3bf 8f5b 	dmb	ish
 80109d4:	b9fb      	cbnz	r3, 8010a16 <rcl_timer_is_ready+0x5e>
 80109d6:	6803      	ldr	r3, [r0, #0]
 80109d8:	4669      	mov	r1, sp
 80109da:	6818      	ldr	r0, [r3, #0]
 80109dc:	f7ff fd16 	bl	801040c <rcl_clock_get_now>
 80109e0:	b128      	cbz	r0, 80109ee <rcl_timer_is_ready+0x36>
 80109e2:	f240 3321 	movw	r3, #801	@ 0x321
 80109e6:	4298      	cmp	r0, r3
 80109e8:	d015      	beq.n	8010a16 <rcl_timer_is_ready+0x5e>
 80109ea:	b003      	add	sp, #12
 80109ec:	bd30      	pop	{r4, r5, pc}
 80109ee:	6820      	ldr	r0, [r4, #0]
 80109f0:	2105      	movs	r1, #5
 80109f2:	3028      	adds	r0, #40	@ 0x28
 80109f4:	f001 fc08 	bl	8012208 <__atomic_load_8>
 80109f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80109fc:	1ac0      	subs	r0, r0, r3
 80109fe:	eb61 0102 	sbc.w	r1, r1, r2
 8010a02:	2801      	cmp	r0, #1
 8010a04:	f171 0100 	sbcs.w	r1, r1, #0
 8010a08:	bfb4      	ite	lt
 8010a0a:	2301      	movlt	r3, #1
 8010a0c:	2300      	movge	r3, #0
 8010a0e:	702b      	strb	r3, [r5, #0]
 8010a10:	2000      	movs	r0, #0
 8010a12:	b003      	add	sp, #12
 8010a14:	bd30      	pop	{r4, r5, pc}
 8010a16:	2300      	movs	r3, #0
 8010a18:	702b      	strb	r3, [r5, #0]
 8010a1a:	e7f9      	b.n	8010a10 <rcl_timer_is_ready+0x58>
 8010a1c:	200b      	movs	r0, #11
 8010a1e:	b003      	add	sp, #12
 8010a20:	bd30      	pop	{r4, r5, pc}
 8010a22:	200b      	movs	r0, #11
 8010a24:	4770      	bx	lr
 8010a26:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8010a2a:	e7de      	b.n	80109ea <rcl_timer_is_ready+0x32>

08010a2c <rcl_timer_get_next_call_time>:
 8010a2c:	b1d8      	cbz	r0, 8010a66 <rcl_timer_get_next_call_time+0x3a>
 8010a2e:	b538      	push	{r3, r4, r5, lr}
 8010a30:	6803      	ldr	r3, [r0, #0]
 8010a32:	b1d3      	cbz	r3, 8010a6a <rcl_timer_get_next_call_time+0x3e>
 8010a34:	460c      	mov	r4, r1
 8010a36:	b1a1      	cbz	r1, 8010a62 <rcl_timer_get_next_call_time+0x36>
 8010a38:	f3bf 8f5b 	dmb	ish
 8010a3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010a40:	f3bf 8f5b 	dmb	ish
 8010a44:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8010a48:	b943      	cbnz	r3, 8010a5c <rcl_timer_get_next_call_time+0x30>
 8010a4a:	6800      	ldr	r0, [r0, #0]
 8010a4c:	2105      	movs	r1, #5
 8010a4e:	3028      	adds	r0, #40	@ 0x28
 8010a50:	f001 fbda 	bl	8012208 <__atomic_load_8>
 8010a54:	e9c4 0100 	strd	r0, r1, [r4]
 8010a58:	4628      	mov	r0, r5
 8010a5a:	bd38      	pop	{r3, r4, r5, pc}
 8010a5c:	f240 3021 	movw	r0, #801	@ 0x321
 8010a60:	bd38      	pop	{r3, r4, r5, pc}
 8010a62:	200b      	movs	r0, #11
 8010a64:	bd38      	pop	{r3, r4, r5, pc}
 8010a66:	200b      	movs	r0, #11
 8010a68:	4770      	bx	lr
 8010a6a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8010a6e:	bd38      	pop	{r3, r4, r5, pc}

08010a70 <rcl_timer_get_guard_condition>:
 8010a70:	b130      	cbz	r0, 8010a80 <rcl_timer_get_guard_condition+0x10>
 8010a72:	6800      	ldr	r0, [r0, #0]
 8010a74:	b120      	cbz	r0, 8010a80 <rcl_timer_get_guard_condition+0x10>
 8010a76:	68c3      	ldr	r3, [r0, #12]
 8010a78:	b10b      	cbz	r3, 8010a7e <rcl_timer_get_guard_condition+0xe>
 8010a7a:	3008      	adds	r0, #8
 8010a7c:	4770      	bx	lr
 8010a7e:	4618      	mov	r0, r3
 8010a80:	4770      	bx	lr
 8010a82:	bf00      	nop

08010a84 <rcl_get_zero_initialized_wait_set>:
 8010a84:	b510      	push	{r4, lr}
 8010a86:	4c08      	ldr	r4, [pc, #32]	@ (8010aa8 <rcl_get_zero_initialized_wait_set+0x24>)
 8010a88:	4686      	mov	lr, r0
 8010a8a:	4684      	mov	ip, r0
 8010a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a9e:	6823      	ldr	r3, [r4, #0]
 8010aa0:	f8cc 3000 	str.w	r3, [ip]
 8010aa4:	4670      	mov	r0, lr
 8010aa6:	bd10      	pop	{r4, pc}
 8010aa8:	08019ce4 	.word	0x08019ce4

08010aac <rcl_wait_set_is_valid>:
 8010aac:	b118      	cbz	r0, 8010ab6 <rcl_wait_set_is_valid+0xa>
 8010aae:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8010ab0:	3800      	subs	r0, #0
 8010ab2:	bf18      	it	ne
 8010ab4:	2001      	movne	r0, #1
 8010ab6:	4770      	bx	lr

08010ab8 <rcl_wait_set_fini>:
 8010ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010abc:	2800      	cmp	r0, #0
 8010abe:	f000 80ab 	beq.w	8010c18 <rcl_wait_set_fini+0x160>
 8010ac2:	4605      	mov	r5, r0
 8010ac4:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8010ac6:	2800      	cmp	r0, #0
 8010ac8:	f000 809c 	beq.w	8010c04 <rcl_wait_set_fini+0x14c>
 8010acc:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8010ace:	f003 fa2f 	bl	8013f30 <rmw_destroy_wait_set>
 8010ad2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010ad4:	4680      	mov	r8, r0
 8010ad6:	2800      	cmp	r0, #0
 8010ad8:	f040 808e 	bne.w	8010bf8 <rcl_wait_set_fini+0x140>
 8010adc:	2c00      	cmp	r4, #0
 8010ade:	f000 80a0 	beq.w	8010c22 <rcl_wait_set_fini+0x16a>
 8010ae2:	6828      	ldr	r0, [r5, #0]
 8010ae4:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8010ae6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010aea:	2600      	movs	r6, #0
 8010aec:	606e      	str	r6, [r5, #4]
 8010aee:	6026      	str	r6, [r4, #0]
 8010af0:	b118      	cbz	r0, 8010afa <rcl_wait_set_fini+0x42>
 8010af2:	4649      	mov	r1, r9
 8010af4:	47b8      	blx	r7
 8010af6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010af8:	602e      	str	r6, [r5, #0]
 8010afa:	68a0      	ldr	r0, [r4, #8]
 8010afc:	b128      	cbz	r0, 8010b0a <rcl_wait_set_fini+0x52>
 8010afe:	4649      	mov	r1, r9
 8010b00:	47b8      	blx	r7
 8010b02:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010b04:	2300      	movs	r3, #0
 8010b06:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8010b0a:	68a8      	ldr	r0, [r5, #8]
 8010b0c:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8010b0e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8010b10:	f04f 0900 	mov.w	r9, #0
 8010b14:	f8c5 900c 	str.w	r9, [r5, #12]
 8010b18:	f8c4 900c 	str.w	r9, [r4, #12]
 8010b1c:	b130      	cbz	r0, 8010b2c <rcl_wait_set_fini+0x74>
 8010b1e:	4639      	mov	r1, r7
 8010b20:	47b0      	blx	r6
 8010b22:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010b24:	f8c5 9008 	str.w	r9, [r5, #8]
 8010b28:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8010b2a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8010b2c:	6960      	ldr	r0, [r4, #20]
 8010b2e:	f04f 0900 	mov.w	r9, #0
 8010b32:	f8c4 9010 	str.w	r9, [r4, #16]
 8010b36:	b130      	cbz	r0, 8010b46 <rcl_wait_set_fini+0x8e>
 8010b38:	4639      	mov	r1, r7
 8010b3a:	47b0      	blx	r6
 8010b3c:	f8c4 9014 	str.w	r9, [r4, #20]
 8010b40:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010b42:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8010b44:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8010b46:	6928      	ldr	r0, [r5, #16]
 8010b48:	f04f 0900 	mov.w	r9, #0
 8010b4c:	f8c5 9014 	str.w	r9, [r5, #20]
 8010b50:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
 8010b54:	b130      	cbz	r0, 8010b64 <rcl_wait_set_fini+0xac>
 8010b56:	4639      	mov	r1, r7
 8010b58:	47b0      	blx	r6
 8010b5a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010b5c:	f8c5 9010 	str.w	r9, [r5, #16]
 8010b60:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8010b62:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8010b64:	69a8      	ldr	r0, [r5, #24]
 8010b66:	f04f 0900 	mov.w	r9, #0
 8010b6a:	f8c5 901c 	str.w	r9, [r5, #28]
 8010b6e:	f8c4 9018 	str.w	r9, [r4, #24]
 8010b72:	b120      	cbz	r0, 8010b7e <rcl_wait_set_fini+0xc6>
 8010b74:	4639      	mov	r1, r7
 8010b76:	47b0      	blx	r6
 8010b78:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010b7a:	f8c5 9018 	str.w	r9, [r5, #24]
 8010b7e:	6a20      	ldr	r0, [r4, #32]
 8010b80:	b128      	cbz	r0, 8010b8e <rcl_wait_set_fini+0xd6>
 8010b82:	4639      	mov	r1, r7
 8010b84:	47b0      	blx	r6
 8010b86:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010b88:	2300      	movs	r3, #0
 8010b8a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8010b8e:	6a28      	ldr	r0, [r5, #32]
 8010b90:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8010b92:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010b96:	2600      	movs	r6, #0
 8010b98:	626e      	str	r6, [r5, #36]	@ 0x24
 8010b9a:	6266      	str	r6, [r4, #36]	@ 0x24
 8010b9c:	b118      	cbz	r0, 8010ba6 <rcl_wait_set_fini+0xee>
 8010b9e:	4649      	mov	r1, r9
 8010ba0:	47b8      	blx	r7
 8010ba2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010ba4:	622e      	str	r6, [r5, #32]
 8010ba6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8010ba8:	b128      	cbz	r0, 8010bb6 <rcl_wait_set_fini+0xfe>
 8010baa:	4649      	mov	r1, r9
 8010bac:	47b8      	blx	r7
 8010bae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8010bb6:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8010bb8:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8010bba:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010bbe:	2600      	movs	r6, #0
 8010bc0:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8010bc2:	6326      	str	r6, [r4, #48]	@ 0x30
 8010bc4:	b118      	cbz	r0, 8010bce <rcl_wait_set_fini+0x116>
 8010bc6:	4649      	mov	r1, r9
 8010bc8:	47b8      	blx	r7
 8010bca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010bcc:	62ae      	str	r6, [r5, #40]	@ 0x28
 8010bce:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8010bd0:	b1e0      	cbz	r0, 8010c0c <rcl_wait_set_fini+0x154>
 8010bd2:	4649      	mov	r1, r9
 8010bd4:	47b8      	blx	r7
 8010bd6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010bd8:	2300      	movs	r3, #0
 8010bda:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8010bde:	4598      	cmp	r8, r3
 8010be0:	bf18      	it	ne
 8010be2:	f44f 7861 	movne.w	r8, #900	@ 0x384
 8010be6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8010be8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8010bea:	4620      	mov	r0, r4
 8010bec:	4798      	blx	r3
 8010bee:	2300      	movs	r3, #0
 8010bf0:	632b      	str	r3, [r5, #48]	@ 0x30
 8010bf2:	4640      	mov	r0, r8
 8010bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bf8:	f44f 7861 	mov.w	r8, #900	@ 0x384
 8010bfc:	2c00      	cmp	r4, #0
 8010bfe:	f47f af70 	bne.w	8010ae2 <rcl_wait_set_fini+0x2a>
 8010c02:	e7f6      	b.n	8010bf2 <rcl_wait_set_fini+0x13a>
 8010c04:	4680      	mov	r8, r0
 8010c06:	4640      	mov	r0, r8
 8010c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c0c:	f1b8 0f00 	cmp.w	r8, #0
 8010c10:	bf18      	it	ne
 8010c12:	f44f 7861 	movne.w	r8, #900	@ 0x384
 8010c16:	e7e6      	b.n	8010be6 <rcl_wait_set_fini+0x12e>
 8010c18:	f04f 080b 	mov.w	r8, #11
 8010c1c:	4640      	mov	r0, r8
 8010c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c22:	f44f 7861 	mov.w	r8, #900	@ 0x384
 8010c26:	e7e4      	b.n	8010bf2 <rcl_wait_set_fini+0x13a>

08010c28 <rcl_wait_set_add_subscription>:
 8010c28:	b318      	cbz	r0, 8010c72 <rcl_wait_set_add_subscription+0x4a>
 8010c2a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010c2c:	b570      	push	{r4, r5, r6, lr}
 8010c2e:	4604      	mov	r4, r0
 8010c30:	b30b      	cbz	r3, 8010c76 <rcl_wait_set_add_subscription+0x4e>
 8010c32:	b319      	cbz	r1, 8010c7c <rcl_wait_set_add_subscription+0x54>
 8010c34:	681d      	ldr	r5, [r3, #0]
 8010c36:	6840      	ldr	r0, [r0, #4]
 8010c38:	4285      	cmp	r5, r0
 8010c3a:	d217      	bcs.n	8010c6c <rcl_wait_set_add_subscription+0x44>
 8010c3c:	6820      	ldr	r0, [r4, #0]
 8010c3e:	1c6e      	adds	r6, r5, #1
 8010c40:	601e      	str	r6, [r3, #0]
 8010c42:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010c46:	b102      	cbz	r2, 8010c4a <rcl_wait_set_add_subscription+0x22>
 8010c48:	6015      	str	r5, [r2, #0]
 8010c4a:	4608      	mov	r0, r1
 8010c4c:	f7ff fb3c 	bl	80102c8 <rcl_subscription_get_rmw_handle>
 8010c50:	b150      	cbz	r0, 8010c68 <rcl_wait_set_add_subscription+0x40>
 8010c52:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010c54:	6842      	ldr	r2, [r0, #4]
 8010c56:	689b      	ldr	r3, [r3, #8]
 8010c58:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010c5c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010c5e:	6853      	ldr	r3, [r2, #4]
 8010c60:	3301      	adds	r3, #1
 8010c62:	2000      	movs	r0, #0
 8010c64:	6053      	str	r3, [r2, #4]
 8010c66:	bd70      	pop	{r4, r5, r6, pc}
 8010c68:	2001      	movs	r0, #1
 8010c6a:	bd70      	pop	{r4, r5, r6, pc}
 8010c6c:	f240 3086 	movw	r0, #902	@ 0x386
 8010c70:	bd70      	pop	{r4, r5, r6, pc}
 8010c72:	200b      	movs	r0, #11
 8010c74:	4770      	bx	lr
 8010c76:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010c7a:	bd70      	pop	{r4, r5, r6, pc}
 8010c7c:	200b      	movs	r0, #11
 8010c7e:	bd70      	pop	{r4, r5, r6, pc}

08010c80 <rcl_wait_set_clear>:
 8010c80:	2800      	cmp	r0, #0
 8010c82:	d074      	beq.n	8010d6e <rcl_wait_set_clear+0xee>
 8010c84:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010c86:	b510      	push	{r4, lr}
 8010c88:	4604      	mov	r4, r0
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d071      	beq.n	8010d72 <rcl_wait_set_clear+0xf2>
 8010c8e:	6800      	ldr	r0, [r0, #0]
 8010c90:	b138      	cbz	r0, 8010ca2 <rcl_wait_set_clear+0x22>
 8010c92:	6862      	ldr	r2, [r4, #4]
 8010c94:	2100      	movs	r1, #0
 8010c96:	0092      	lsls	r2, r2, #2
 8010c98:	f007 f8c6 	bl	8017e28 <memset>
 8010c9c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	601a      	str	r2, [r3, #0]
 8010ca2:	68a0      	ldr	r0, [r4, #8]
 8010ca4:	b138      	cbz	r0, 8010cb6 <rcl_wait_set_clear+0x36>
 8010ca6:	68e2      	ldr	r2, [r4, #12]
 8010ca8:	2100      	movs	r1, #0
 8010caa:	0092      	lsls	r2, r2, #2
 8010cac:	f007 f8bc 	bl	8017e28 <memset>
 8010cb0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	60da      	str	r2, [r3, #12]
 8010cb6:	69a0      	ldr	r0, [r4, #24]
 8010cb8:	b138      	cbz	r0, 8010cca <rcl_wait_set_clear+0x4a>
 8010cba:	69e2      	ldr	r2, [r4, #28]
 8010cbc:	2100      	movs	r1, #0
 8010cbe:	0092      	lsls	r2, r2, #2
 8010cc0:	f007 f8b2 	bl	8017e28 <memset>
 8010cc4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	619a      	str	r2, [r3, #24]
 8010cca:	6a20      	ldr	r0, [r4, #32]
 8010ccc:	b138      	cbz	r0, 8010cde <rcl_wait_set_clear+0x5e>
 8010cce:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8010cd0:	2100      	movs	r1, #0
 8010cd2:	0092      	lsls	r2, r2, #2
 8010cd4:	f007 f8a8 	bl	8017e28 <memset>
 8010cd8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010cda:	2200      	movs	r2, #0
 8010cdc:	625a      	str	r2, [r3, #36]	@ 0x24
 8010cde:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8010ce0:	b138      	cbz	r0, 8010cf2 <rcl_wait_set_clear+0x72>
 8010ce2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010ce4:	2100      	movs	r1, #0
 8010ce6:	0092      	lsls	r2, r2, #2
 8010ce8:	f007 f89e 	bl	8017e28 <memset>
 8010cec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010cee:	2200      	movs	r2, #0
 8010cf0:	631a      	str	r2, [r3, #48]	@ 0x30
 8010cf2:	6920      	ldr	r0, [r4, #16]
 8010cf4:	b138      	cbz	r0, 8010d06 <rcl_wait_set_clear+0x86>
 8010cf6:	6962      	ldr	r2, [r4, #20]
 8010cf8:	2100      	movs	r1, #0
 8010cfa:	0092      	lsls	r2, r2, #2
 8010cfc:	f007 f894 	bl	8017e28 <memset>
 8010d00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d02:	2200      	movs	r2, #0
 8010d04:	641a      	str	r2, [r3, #64]	@ 0x40
 8010d06:	6898      	ldr	r0, [r3, #8]
 8010d08:	b138      	cbz	r0, 8010d1a <rcl_wait_set_clear+0x9a>
 8010d0a:	685a      	ldr	r2, [r3, #4]
 8010d0c:	2100      	movs	r1, #0
 8010d0e:	0092      	lsls	r2, r2, #2
 8010d10:	f007 f88a 	bl	8017e28 <memset>
 8010d14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d16:	2200      	movs	r2, #0
 8010d18:	605a      	str	r2, [r3, #4]
 8010d1a:	6958      	ldr	r0, [r3, #20]
 8010d1c:	b138      	cbz	r0, 8010d2e <rcl_wait_set_clear+0xae>
 8010d1e:	691a      	ldr	r2, [r3, #16]
 8010d20:	2100      	movs	r1, #0
 8010d22:	0092      	lsls	r2, r2, #2
 8010d24:	f007 f880 	bl	8017e28 <memset>
 8010d28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	611a      	str	r2, [r3, #16]
 8010d2e:	6a18      	ldr	r0, [r3, #32]
 8010d30:	b138      	cbz	r0, 8010d42 <rcl_wait_set_clear+0xc2>
 8010d32:	69da      	ldr	r2, [r3, #28]
 8010d34:	2100      	movs	r1, #0
 8010d36:	0092      	lsls	r2, r2, #2
 8010d38:	f007 f876 	bl	8017e28 <memset>
 8010d3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d3e:	2200      	movs	r2, #0
 8010d40:	61da      	str	r2, [r3, #28]
 8010d42:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8010d44:	b138      	cbz	r0, 8010d56 <rcl_wait_set_clear+0xd6>
 8010d46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010d48:	2100      	movs	r1, #0
 8010d4a:	0092      	lsls	r2, r2, #2
 8010d4c:	f007 f86c 	bl	8017e28 <memset>
 8010d50:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d52:	2200      	movs	r2, #0
 8010d54:	629a      	str	r2, [r3, #40]	@ 0x28
 8010d56:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8010d58:	b138      	cbz	r0, 8010d6a <rcl_wait_set_clear+0xea>
 8010d5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010d5c:	2100      	movs	r1, #0
 8010d5e:	0092      	lsls	r2, r2, #2
 8010d60:	f007 f862 	bl	8017e28 <memset>
 8010d64:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d66:	2200      	movs	r2, #0
 8010d68:	635a      	str	r2, [r3, #52]	@ 0x34
 8010d6a:	2000      	movs	r0, #0
 8010d6c:	bd10      	pop	{r4, pc}
 8010d6e:	200b      	movs	r0, #11
 8010d70:	4770      	bx	lr
 8010d72:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010d76:	bd10      	pop	{r4, pc}

08010d78 <rcl_wait_set_resize>:
 8010d78:	2800      	cmp	r0, #0
 8010d7a:	f000 81a1 	beq.w	80110c0 <rcl_wait_set_resize+0x348>
 8010d7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d82:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 8010d86:	b083      	sub	sp, #12
 8010d88:	4604      	mov	r4, r0
 8010d8a:	f1ba 0f00 	cmp.w	sl, #0
 8010d8e:	f000 8199 	beq.w	80110c4 <rcl_wait_set_resize+0x34c>
 8010d92:	f04f 0800 	mov.w	r8, #0
 8010d96:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8010d9a:	461e      	mov	r6, r3
 8010d9c:	460f      	mov	r7, r1
 8010d9e:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 8010da2:	4615      	mov	r5, r2
 8010da4:	f8c0 8004 	str.w	r8, [r0, #4]
 8010da8:	6800      	ldr	r0, [r0, #0]
 8010daa:	f8ca 8000 	str.w	r8, [sl]
 8010dae:	2900      	cmp	r1, #0
 8010db0:	f000 80cf 	beq.w	8010f52 <rcl_wait_set_resize+0x1da>
 8010db4:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8010db8:	464a      	mov	r2, r9
 8010dba:	4651      	mov	r1, sl
 8010dbc:	9301      	str	r3, [sp, #4]
 8010dbe:	4798      	blx	r3
 8010dc0:	9b01      	ldr	r3, [sp, #4]
 8010dc2:	6020      	str	r0, [r4, #0]
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	f000 8109 	beq.w	8010fdc <rcl_wait_set_resize+0x264>
 8010dca:	4652      	mov	r2, sl
 8010dcc:	4641      	mov	r1, r8
 8010dce:	9301      	str	r3, [sp, #4]
 8010dd0:	f007 f82a 	bl	8017e28 <memset>
 8010dd4:	6067      	str	r7, [r4, #4]
 8010dd6:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8010dd8:	9b01      	ldr	r3, [sp, #4]
 8010dda:	68b8      	ldr	r0, [r7, #8]
 8010ddc:	f8c7 8004 	str.w	r8, [r7, #4]
 8010de0:	464a      	mov	r2, r9
 8010de2:	4651      	mov	r1, sl
 8010de4:	4798      	blx	r3
 8010de6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010de8:	60b8      	str	r0, [r7, #8]
 8010dea:	689f      	ldr	r7, [r3, #8]
 8010dec:	2f00      	cmp	r7, #0
 8010dee:	f000 80f0 	beq.w	8010fd2 <rcl_wait_set_resize+0x25a>
 8010df2:	4652      	mov	r2, sl
 8010df4:	4641      	mov	r1, r8
 8010df6:	4638      	mov	r0, r7
 8010df8:	f007 f816 	bl	8017e28 <memset>
 8010dfc:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010e00:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8010e04:	68a0      	ldr	r0, [r4, #8]
 8010e06:	2700      	movs	r7, #0
 8010e08:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 8010e0c:	60e7      	str	r7, [r4, #12]
 8010e0e:	f8ca 700c 	str.w	r7, [sl, #12]
 8010e12:	2d00      	cmp	r5, #0
 8010e14:	f040 80b0 	bne.w	8010f78 <rcl_wait_set_resize+0x200>
 8010e18:	b130      	cbz	r0, 8010e28 <rcl_wait_set_resize+0xb0>
 8010e1a:	4641      	mov	r1, r8
 8010e1c:	4790      	blx	r2
 8010e1e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010e22:	60a5      	str	r5, [r4, #8]
 8010e24:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8010e28:	f8da 0014 	ldr.w	r0, [sl, #20]
 8010e2c:	2700      	movs	r7, #0
 8010e2e:	19ad      	adds	r5, r5, r6
 8010e30:	f8ca 7010 	str.w	r7, [sl, #16]
 8010e34:	f040 80b8 	bne.w	8010fa8 <rcl_wait_set_resize+0x230>
 8010e38:	b148      	cbz	r0, 8010e4e <rcl_wait_set_resize+0xd6>
 8010e3a:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 8010e3e:	4641      	mov	r1, r8
 8010e40:	4798      	blx	r3
 8010e42:	f8ca 5014 	str.w	r5, [sl, #20]
 8010e46:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010e4a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8010e4e:	6920      	ldr	r0, [r4, #16]
 8010e50:	2500      	movs	r5, #0
 8010e52:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8010e56:	6165      	str	r5, [r4, #20]
 8010e58:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 8010e5c:	2e00      	cmp	r6, #0
 8010e5e:	f040 80c1 	bne.w	8010fe4 <rcl_wait_set_resize+0x26c>
 8010e62:	b140      	cbz	r0, 8010e76 <rcl_wait_set_resize+0xfe>
 8010e64:	4641      	mov	r1, r8
 8010e66:	47c8      	blx	r9
 8010e68:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010e6c:	6126      	str	r6, [r4, #16]
 8010e6e:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8010e72:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8010e76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010e78:	69a0      	ldr	r0, [r4, #24]
 8010e7a:	2500      	movs	r5, #0
 8010e7c:	61e5      	str	r5, [r4, #28]
 8010e7e:	f8ca 5018 	str.w	r5, [sl, #24]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	f040 80c2 	bne.w	801100c <rcl_wait_set_resize+0x294>
 8010e88:	b128      	cbz	r0, 8010e96 <rcl_wait_set_resize+0x11e>
 8010e8a:	4641      	mov	r1, r8
 8010e8c:	47c8      	blx	r9
 8010e8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010e90:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010e94:	61a3      	str	r3, [r4, #24]
 8010e96:	f8da 0020 	ldr.w	r0, [sl, #32]
 8010e9a:	b130      	cbz	r0, 8010eaa <rcl_wait_set_resize+0x132>
 8010e9c:	4641      	mov	r1, r8
 8010e9e:	47c8      	blx	r9
 8010ea0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8010eaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010eac:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8010eb0:	6a20      	ldr	r0, [r4, #32]
 8010eb2:	2500      	movs	r5, #0
 8010eb4:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8010eb8:	6265      	str	r5, [r4, #36]	@ 0x24
 8010eba:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	f000 80c8 	beq.w	8011054 <rcl_wait_set_resize+0x2dc>
 8010ec4:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8010ec8:	4632      	mov	r2, r6
 8010eca:	4649      	mov	r1, r9
 8010ecc:	47c0      	blx	r8
 8010ece:	6220      	str	r0, [r4, #32]
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	f000 8083 	beq.w	8010fdc <rcl_wait_set_resize+0x264>
 8010ed6:	464a      	mov	r2, r9
 8010ed8:	4629      	mov	r1, r5
 8010eda:	f006 ffa5 	bl	8017e28 <memset>
 8010ede:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010ee2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ee4:	6263      	str	r3, [r4, #36]	@ 0x24
 8010ee6:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8010eea:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 8010eee:	4632      	mov	r2, r6
 8010ef0:	4649      	mov	r1, r9
 8010ef2:	47c0      	blx	r8
 8010ef4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010ef6:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 8010efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	f000 80fb 	beq.w	80110f8 <rcl_wait_set_resize+0x380>
 8010f02:	464a      	mov	r2, r9
 8010f04:	4629      	mov	r1, r5
 8010f06:	4618      	mov	r0, r3
 8010f08:	f006 ff8e 	bl	8017e28 <memset>
 8010f0c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010f10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f12:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8010f16:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8010f18:	2500      	movs	r5, #0
 8010f1a:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8010f1e:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8010f20:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	f040 80a9 	bne.w	801107c <rcl_wait_set_resize+0x304>
 8010f2a:	b128      	cbz	r0, 8010f38 <rcl_wait_set_resize+0x1c0>
 8010f2c:	4631      	mov	r1, r6
 8010f2e:	47b8      	blx	r7
 8010f30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f32:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010f36:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010f38:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8010f3c:	b128      	cbz	r0, 8010f4a <rcl_wait_set_resize+0x1d2>
 8010f3e:	4631      	mov	r1, r6
 8010f40:	47b8      	blx	r7
 8010f42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010f44:	2200      	movs	r2, #0
 8010f46:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 8010f4a:	2000      	movs	r0, #0
 8010f4c:	b003      	add	sp, #12
 8010f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f52:	b120      	cbz	r0, 8010f5e <rcl_wait_set_resize+0x1e6>
 8010f54:	4649      	mov	r1, r9
 8010f56:	47d8      	blx	fp
 8010f58:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010f5c:	6027      	str	r7, [r4, #0]
 8010f5e:	f8da 0008 	ldr.w	r0, [sl, #8]
 8010f62:	2800      	cmp	r0, #0
 8010f64:	f43f af4c 	beq.w	8010e00 <rcl_wait_set_resize+0x88>
 8010f68:	4649      	mov	r1, r9
 8010f6a:	47d8      	blx	fp
 8010f6c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010f70:	2300      	movs	r3, #0
 8010f72:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8010f76:	e743      	b.n	8010e00 <rcl_wait_set_resize+0x88>
 8010f78:	4642      	mov	r2, r8
 8010f7a:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8010f7e:	4641      	mov	r1, r8
 8010f80:	4798      	blx	r3
 8010f82:	60a0      	str	r0, [r4, #8]
 8010f84:	b350      	cbz	r0, 8010fdc <rcl_wait_set_resize+0x264>
 8010f86:	4642      	mov	r2, r8
 8010f88:	4639      	mov	r1, r7
 8010f8a:	f006 ff4d 	bl	8017e28 <memset>
 8010f8e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010f92:	60e5      	str	r5, [r4, #12]
 8010f94:	2700      	movs	r7, #0
 8010f96:	19ad      	adds	r5, r5, r6
 8010f98:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8010f9c:	f8da 0014 	ldr.w	r0, [sl, #20]
 8010fa0:	f8ca 7010 	str.w	r7, [sl, #16]
 8010fa4:	f43f af48 	beq.w	8010e38 <rcl_wait_set_resize+0xc0>
 8010fa8:	00ad      	lsls	r5, r5, #2
 8010faa:	4642      	mov	r2, r8
 8010fac:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8010fb0:	4629      	mov	r1, r5
 8010fb2:	4798      	blx	r3
 8010fb4:	4680      	mov	r8, r0
 8010fb6:	f8ca 0014 	str.w	r0, [sl, #20]
 8010fba:	2800      	cmp	r0, #0
 8010fbc:	f000 8085 	beq.w	80110ca <rcl_wait_set_resize+0x352>
 8010fc0:	462a      	mov	r2, r5
 8010fc2:	4639      	mov	r1, r7
 8010fc4:	f006 ff30 	bl	8017e28 <memset>
 8010fc8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010fcc:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8010fd0:	e73d      	b.n	8010e4e <rcl_wait_set_resize+0xd6>
 8010fd2:	6820      	ldr	r0, [r4, #0]
 8010fd4:	4649      	mov	r1, r9
 8010fd6:	47d8      	blx	fp
 8010fd8:	e9c4 7700 	strd	r7, r7, [r4]
 8010fdc:	200a      	movs	r0, #10
 8010fde:	b003      	add	sp, #12
 8010fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fe4:	4642      	mov	r2, r8
 8010fe6:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8010fea:	4641      	mov	r1, r8
 8010fec:	47b8      	blx	r7
 8010fee:	6120      	str	r0, [r4, #16]
 8010ff0:	2800      	cmp	r0, #0
 8010ff2:	d0f3      	beq.n	8010fdc <rcl_wait_set_resize+0x264>
 8010ff4:	4642      	mov	r2, r8
 8010ff6:	4629      	mov	r1, r5
 8010ff8:	f006 ff16 	bl	8017e28 <memset>
 8010ffc:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011000:	6166      	str	r6, [r4, #20]
 8011002:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8011006:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801100a:	e734      	b.n	8010e76 <rcl_wait_set_resize+0xfe>
 801100c:	009e      	lsls	r6, r3, #2
 801100e:	4642      	mov	r2, r8
 8011010:	4631      	mov	r1, r6
 8011012:	47b8      	blx	r7
 8011014:	61a0      	str	r0, [r4, #24]
 8011016:	2800      	cmp	r0, #0
 8011018:	d0e0      	beq.n	8010fdc <rcl_wait_set_resize+0x264>
 801101a:	4632      	mov	r2, r6
 801101c:	4629      	mov	r1, r5
 801101e:	f006 ff03 	bl	8017e28 <memset>
 8011022:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011026:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011028:	61e3      	str	r3, [r4, #28]
 801102a:	f8da 0020 	ldr.w	r0, [sl, #32]
 801102e:	f8ca 501c 	str.w	r5, [sl, #28]
 8011032:	4642      	mov	r2, r8
 8011034:	4631      	mov	r1, r6
 8011036:	47b8      	blx	r7
 8011038:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801103a:	f8ca 0020 	str.w	r0, [sl, #32]
 801103e:	6a1f      	ldr	r7, [r3, #32]
 8011040:	2f00      	cmp	r7, #0
 8011042:	d053      	beq.n	80110ec <rcl_wait_set_resize+0x374>
 8011044:	4632      	mov	r2, r6
 8011046:	4629      	mov	r1, r5
 8011048:	4638      	mov	r0, r7
 801104a:	f006 feed 	bl	8017e28 <memset>
 801104e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011052:	e72a      	b.n	8010eaa <rcl_wait_set_resize+0x132>
 8011054:	b128      	cbz	r0, 8011062 <rcl_wait_set_resize+0x2ea>
 8011056:	4631      	mov	r1, r6
 8011058:	47b8      	blx	r7
 801105a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801105c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011060:	6223      	str	r3, [r4, #32]
 8011062:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8011066:	2800      	cmp	r0, #0
 8011068:	f43f af52 	beq.w	8010f10 <rcl_wait_set_resize+0x198>
 801106c:	4631      	mov	r1, r6
 801106e:	47b8      	blx	r7
 8011070:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011074:	2300      	movs	r3, #0
 8011076:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 801107a:	e749      	b.n	8010f10 <rcl_wait_set_resize+0x198>
 801107c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8011080:	4632      	mov	r2, r6
 8011082:	4649      	mov	r1, r9
 8011084:	47c0      	blx	r8
 8011086:	62a0      	str	r0, [r4, #40]	@ 0x28
 8011088:	2800      	cmp	r0, #0
 801108a:	d0a7      	beq.n	8010fdc <rcl_wait_set_resize+0x264>
 801108c:	464a      	mov	r2, r9
 801108e:	4629      	mov	r1, r5
 8011090:	f006 feca 	bl	8017e28 <memset>
 8011094:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801109a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801109c:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80110a0:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 80110a4:	4632      	mov	r2, r6
 80110a6:	4649      	mov	r1, r9
 80110a8:	47c0      	blx	r8
 80110aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80110ac:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80110b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110b2:	b34b      	cbz	r3, 8011108 <rcl_wait_set_resize+0x390>
 80110b4:	464a      	mov	r2, r9
 80110b6:	4629      	mov	r1, r5
 80110b8:	4618      	mov	r0, r3
 80110ba:	f006 feb5 	bl	8017e28 <memset>
 80110be:	e744      	b.n	8010f4a <rcl_wait_set_resize+0x1d2>
 80110c0:	200b      	movs	r0, #11
 80110c2:	4770      	bx	lr
 80110c4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80110c8:	e789      	b.n	8010fde <rcl_wait_set_resize+0x266>
 80110ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80110cc:	68a0      	ldr	r0, [r4, #8]
 80110ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80110d0:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80110d2:	4790      	blx	r2
 80110d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80110d6:	6920      	ldr	r0, [r4, #16]
 80110d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80110da:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80110dc:	f8c4 800c 	str.w	r8, [r4, #12]
 80110e0:	f8c4 8008 	str.w	r8, [r4, #8]
 80110e4:	4790      	blx	r2
 80110e6:	e9c4 8804 	strd	r8, r8, [r4, #16]
 80110ea:	e777      	b.n	8010fdc <rcl_wait_set_resize+0x264>
 80110ec:	69a0      	ldr	r0, [r4, #24]
 80110ee:	4641      	mov	r1, r8
 80110f0:	47c8      	blx	r9
 80110f2:	e9c4 7706 	strd	r7, r7, [r4, #24]
 80110f6:	e771      	b.n	8010fdc <rcl_wait_set_resize+0x264>
 80110f8:	6a20      	ldr	r0, [r4, #32]
 80110fa:	9301      	str	r3, [sp, #4]
 80110fc:	4631      	mov	r1, r6
 80110fe:	47b8      	blx	r7
 8011100:	9b01      	ldr	r3, [sp, #4]
 8011102:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8011106:	e769      	b.n	8010fdc <rcl_wait_set_resize+0x264>
 8011108:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801110a:	9301      	str	r3, [sp, #4]
 801110c:	4631      	mov	r1, r6
 801110e:	47b8      	blx	r7
 8011110:	9b01      	ldr	r3, [sp, #4]
 8011112:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8011116:	e761      	b.n	8010fdc <rcl_wait_set_resize+0x264>

08011118 <rcl_wait_set_init>:
 8011118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801111c:	b084      	sub	sp, #16
 801111e:	4604      	mov	r4, r0
 8011120:	a810      	add	r0, sp, #64	@ 0x40
 8011122:	460d      	mov	r5, r1
 8011124:	4690      	mov	r8, r2
 8011126:	461f      	mov	r7, r3
 8011128:	f7f9 fafa 	bl	800a720 <rcutils_allocator_is_valid>
 801112c:	2800      	cmp	r0, #0
 801112e:	d068      	beq.n	8011202 <rcl_wait_set_init+0xea>
 8011130:	2c00      	cmp	r4, #0
 8011132:	d066      	beq.n	8011202 <rcl_wait_set_init+0xea>
 8011134:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8011136:	b126      	cbz	r6, 8011142 <rcl_wait_set_init+0x2a>
 8011138:	2564      	movs	r5, #100	@ 0x64
 801113a:	4628      	mov	r0, r5
 801113c:	b004      	add	sp, #16
 801113e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011142:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011144:	2b00      	cmp	r3, #0
 8011146:	d05c      	beq.n	8011202 <rcl_wait_set_init+0xea>
 8011148:	4618      	mov	r0, r3
 801114a:	f7fe f9a5 	bl	800f498 <rcl_context_is_valid>
 801114e:	2800      	cmp	r0, #0
 8011150:	d05c      	beq.n	801120c <rcl_wait_set_init+0xf4>
 8011152:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011154:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8011156:	205c      	movs	r0, #92	@ 0x5c
 8011158:	4798      	blx	r3
 801115a:	6320      	str	r0, [r4, #48]	@ 0x30
 801115c:	2800      	cmp	r0, #0
 801115e:	d059      	beq.n	8011214 <rcl_wait_set_init+0xfc>
 8011160:	4631      	mov	r1, r6
 8011162:	225c      	movs	r2, #92	@ 0x5c
 8011164:	f006 fe60 	bl	8017e28 <memset>
 8011168:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 801116c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801116e:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 8011172:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8011176:	eb03 0e02 	add.w	lr, r3, r2
 801117a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801117c:	449e      	add	lr, r3
 801117e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011180:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8011184:	f8d3 a000 	ldr.w	sl, [r3]
 8011188:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801118c:	e9c9 6601 	strd	r6, r6, [r9, #4]
 8011190:	e9c9 6604 	strd	r6, r6, [r9, #16]
 8011194:	e9c9 6607 	strd	r6, r6, [r9, #28]
 8011198:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 801119c:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 80111a0:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 80111a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80111a6:	44c6      	add	lr, r8
 80111a8:	f8dc 3000 	ldr.w	r3, [ip]
 80111ac:	6033      	str	r3, [r6, #0]
 80111ae:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 80111b2:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80111b6:	f002 feb1 	bl	8013f1c <rmw_create_wait_set>
 80111ba:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 80111be:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80111c0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80111c2:	b32b      	cbz	r3, 8011210 <rcl_wait_set_init+0xf8>
 80111c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80111c6:	9302      	str	r3, [sp, #8]
 80111c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80111ca:	9301      	str	r3, [sp, #4]
 80111cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80111ce:	9300      	str	r3, [sp, #0]
 80111d0:	4629      	mov	r1, r5
 80111d2:	463b      	mov	r3, r7
 80111d4:	4642      	mov	r2, r8
 80111d6:	4620      	mov	r0, r4
 80111d8:	f7ff fdce 	bl	8010d78 <rcl_wait_set_resize>
 80111dc:	4605      	mov	r5, r0
 80111de:	2800      	cmp	r0, #0
 80111e0:	d0ab      	beq.n	801113a <rcl_wait_set_init+0x22>
 80111e2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80111e4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80111e6:	b133      	cbz	r3, 80111f6 <rcl_wait_set_init+0xde>
 80111e8:	4618      	mov	r0, r3
 80111ea:	f002 fea1 	bl	8013f30 <rmw_destroy_wait_set>
 80111ee:	b198      	cbz	r0, 8011218 <rcl_wait_set_init+0x100>
 80111f0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80111f2:	f44f 7561 	mov.w	r5, #900	@ 0x384
 80111f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80111f8:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80111fa:	4798      	blx	r3
 80111fc:	2300      	movs	r3, #0
 80111fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8011200:	e79b      	b.n	801113a <rcl_wait_set_init+0x22>
 8011202:	250b      	movs	r5, #11
 8011204:	4628      	mov	r0, r5
 8011206:	b004      	add	sp, #16
 8011208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801120c:	2565      	movs	r5, #101	@ 0x65
 801120e:	e794      	b.n	801113a <rcl_wait_set_init+0x22>
 8011210:	250a      	movs	r5, #10
 8011212:	e7f0      	b.n	80111f6 <rcl_wait_set_init+0xde>
 8011214:	250a      	movs	r5, #10
 8011216:	e790      	b.n	801113a <rcl_wait_set_init+0x22>
 8011218:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801121a:	e7ec      	b.n	80111f6 <rcl_wait_set_init+0xde>

0801121c <rcl_wait_set_add_guard_condition>:
 801121c:	b318      	cbz	r0, 8011266 <rcl_wait_set_add_guard_condition+0x4a>
 801121e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011220:	b570      	push	{r4, r5, r6, lr}
 8011222:	4604      	mov	r4, r0
 8011224:	b30b      	cbz	r3, 801126a <rcl_wait_set_add_guard_condition+0x4e>
 8011226:	b319      	cbz	r1, 8011270 <rcl_wait_set_add_guard_condition+0x54>
 8011228:	68dd      	ldr	r5, [r3, #12]
 801122a:	68c0      	ldr	r0, [r0, #12]
 801122c:	4285      	cmp	r5, r0
 801122e:	d217      	bcs.n	8011260 <rcl_wait_set_add_guard_condition+0x44>
 8011230:	68a0      	ldr	r0, [r4, #8]
 8011232:	1c6e      	adds	r6, r5, #1
 8011234:	60de      	str	r6, [r3, #12]
 8011236:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801123a:	b102      	cbz	r2, 801123e <rcl_wait_set_add_guard_condition+0x22>
 801123c:	6015      	str	r5, [r2, #0]
 801123e:	4608      	mov	r0, r1
 8011240:	f005 fc36 	bl	8016ab0 <rcl_guard_condition_get_rmw_handle>
 8011244:	b150      	cbz	r0, 801125c <rcl_wait_set_add_guard_condition+0x40>
 8011246:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011248:	6842      	ldr	r2, [r0, #4]
 801124a:	695b      	ldr	r3, [r3, #20]
 801124c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011250:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011252:	6913      	ldr	r3, [r2, #16]
 8011254:	3301      	adds	r3, #1
 8011256:	2000      	movs	r0, #0
 8011258:	6113      	str	r3, [r2, #16]
 801125a:	bd70      	pop	{r4, r5, r6, pc}
 801125c:	2001      	movs	r0, #1
 801125e:	bd70      	pop	{r4, r5, r6, pc}
 8011260:	f240 3086 	movw	r0, #902	@ 0x386
 8011264:	bd70      	pop	{r4, r5, r6, pc}
 8011266:	200b      	movs	r0, #11
 8011268:	4770      	bx	lr
 801126a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801126e:	bd70      	pop	{r4, r5, r6, pc}
 8011270:	200b      	movs	r0, #11
 8011272:	bd70      	pop	{r4, r5, r6, pc}

08011274 <rcl_wait_set_add_timer>:
 8011274:	b328      	cbz	r0, 80112c2 <rcl_wait_set_add_timer+0x4e>
 8011276:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011278:	b570      	push	{r4, r5, r6, lr}
 801127a:	4604      	mov	r4, r0
 801127c:	b31b      	cbz	r3, 80112c6 <rcl_wait_set_add_timer+0x52>
 801127e:	b329      	cbz	r1, 80112cc <rcl_wait_set_add_timer+0x58>
 8011280:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8011282:	6965      	ldr	r5, [r4, #20]
 8011284:	42a8      	cmp	r0, r5
 8011286:	d219      	bcs.n	80112bc <rcl_wait_set_add_timer+0x48>
 8011288:	6925      	ldr	r5, [r4, #16]
 801128a:	1c46      	adds	r6, r0, #1
 801128c:	641e      	str	r6, [r3, #64]	@ 0x40
 801128e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8011292:	b102      	cbz	r2, 8011296 <rcl_wait_set_add_timer+0x22>
 8011294:	6010      	str	r0, [r2, #0]
 8011296:	4608      	mov	r0, r1
 8011298:	f7ff fbea 	bl	8010a70 <rcl_timer_get_guard_condition>
 801129c:	b160      	cbz	r0, 80112b8 <rcl_wait_set_add_timer+0x44>
 801129e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80112a0:	68e3      	ldr	r3, [r4, #12]
 80112a2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80112a4:	3b01      	subs	r3, #1
 80112a6:	441d      	add	r5, r3
 80112a8:	f005 fc02 	bl	8016ab0 <rcl_guard_condition_get_rmw_handle>
 80112ac:	b180      	cbz	r0, 80112d0 <rcl_wait_set_add_timer+0x5c>
 80112ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80112b0:	6842      	ldr	r2, [r0, #4]
 80112b2:	695b      	ldr	r3, [r3, #20]
 80112b4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80112b8:	2000      	movs	r0, #0
 80112ba:	bd70      	pop	{r4, r5, r6, pc}
 80112bc:	f240 3086 	movw	r0, #902	@ 0x386
 80112c0:	bd70      	pop	{r4, r5, r6, pc}
 80112c2:	200b      	movs	r0, #11
 80112c4:	4770      	bx	lr
 80112c6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80112ca:	bd70      	pop	{r4, r5, r6, pc}
 80112cc:	200b      	movs	r0, #11
 80112ce:	bd70      	pop	{r4, r5, r6, pc}
 80112d0:	2001      	movs	r0, #1
 80112d2:	bd70      	pop	{r4, r5, r6, pc}

080112d4 <rcl_wait_set_add_client>:
 80112d4:	b318      	cbz	r0, 801131e <rcl_wait_set_add_client+0x4a>
 80112d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80112d8:	b570      	push	{r4, r5, r6, lr}
 80112da:	4604      	mov	r4, r0
 80112dc:	b30b      	cbz	r3, 8011322 <rcl_wait_set_add_client+0x4e>
 80112de:	b319      	cbz	r1, 8011328 <rcl_wait_set_add_client+0x54>
 80112e0:	699d      	ldr	r5, [r3, #24]
 80112e2:	69c0      	ldr	r0, [r0, #28]
 80112e4:	4285      	cmp	r5, r0
 80112e6:	d217      	bcs.n	8011318 <rcl_wait_set_add_client+0x44>
 80112e8:	69a0      	ldr	r0, [r4, #24]
 80112ea:	1c6e      	adds	r6, r5, #1
 80112ec:	619e      	str	r6, [r3, #24]
 80112ee:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80112f2:	b102      	cbz	r2, 80112f6 <rcl_wait_set_add_client+0x22>
 80112f4:	6015      	str	r5, [r2, #0]
 80112f6:	4608      	mov	r0, r1
 80112f8:	f7fd ffe6 	bl	800f2c8 <rcl_client_get_rmw_handle>
 80112fc:	b150      	cbz	r0, 8011314 <rcl_wait_set_add_client+0x40>
 80112fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011300:	6842      	ldr	r2, [r0, #4]
 8011302:	6a1b      	ldr	r3, [r3, #32]
 8011304:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011308:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801130a:	69d3      	ldr	r3, [r2, #28]
 801130c:	3301      	adds	r3, #1
 801130e:	2000      	movs	r0, #0
 8011310:	61d3      	str	r3, [r2, #28]
 8011312:	bd70      	pop	{r4, r5, r6, pc}
 8011314:	2001      	movs	r0, #1
 8011316:	bd70      	pop	{r4, r5, r6, pc}
 8011318:	f240 3086 	movw	r0, #902	@ 0x386
 801131c:	bd70      	pop	{r4, r5, r6, pc}
 801131e:	200b      	movs	r0, #11
 8011320:	4770      	bx	lr
 8011322:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011326:	bd70      	pop	{r4, r5, r6, pc}
 8011328:	200b      	movs	r0, #11
 801132a:	bd70      	pop	{r4, r5, r6, pc}

0801132c <rcl_wait_set_add_service>:
 801132c:	b318      	cbz	r0, 8011376 <rcl_wait_set_add_service+0x4a>
 801132e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011330:	b570      	push	{r4, r5, r6, lr}
 8011332:	4604      	mov	r4, r0
 8011334:	b30b      	cbz	r3, 801137a <rcl_wait_set_add_service+0x4e>
 8011336:	b319      	cbz	r1, 8011380 <rcl_wait_set_add_service+0x54>
 8011338:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801133a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801133c:	4285      	cmp	r5, r0
 801133e:	d217      	bcs.n	8011370 <rcl_wait_set_add_service+0x44>
 8011340:	6a20      	ldr	r0, [r4, #32]
 8011342:	1c6e      	adds	r6, r5, #1
 8011344:	625e      	str	r6, [r3, #36]	@ 0x24
 8011346:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801134a:	b102      	cbz	r2, 801134e <rcl_wait_set_add_service+0x22>
 801134c:	6015      	str	r5, [r2, #0]
 801134e:	4608      	mov	r0, r1
 8011350:	f7fe fd88 	bl	800fe64 <rcl_service_get_rmw_handle>
 8011354:	b150      	cbz	r0, 801136c <rcl_wait_set_add_service+0x40>
 8011356:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011358:	6842      	ldr	r2, [r0, #4]
 801135a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801135c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011360:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011362:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8011364:	3301      	adds	r3, #1
 8011366:	2000      	movs	r0, #0
 8011368:	6293      	str	r3, [r2, #40]	@ 0x28
 801136a:	bd70      	pop	{r4, r5, r6, pc}
 801136c:	2001      	movs	r0, #1
 801136e:	bd70      	pop	{r4, r5, r6, pc}
 8011370:	f240 3086 	movw	r0, #902	@ 0x386
 8011374:	bd70      	pop	{r4, r5, r6, pc}
 8011376:	200b      	movs	r0, #11
 8011378:	4770      	bx	lr
 801137a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801137e:	bd70      	pop	{r4, r5, r6, pc}
 8011380:	200b      	movs	r0, #11
 8011382:	bd70      	pop	{r4, r5, r6, pc}
 8011384:	0000      	movs	r0, r0
	...

08011388 <rcl_wait>:
 8011388:	2800      	cmp	r0, #0
 801138a:	f000 81d4 	beq.w	8011736 <rcl_wait+0x3ae>
 801138e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011392:	ed2d 8b02 	vpush	{d8}
 8011396:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8011398:	b099      	sub	sp, #100	@ 0x64
 801139a:	4604      	mov	r4, r0
 801139c:	2d00      	cmp	r5, #0
 801139e:	f000 8178 	beq.w	8011692 <rcl_wait+0x30a>
 80113a2:	461f      	mov	r7, r3
 80113a4:	6843      	ldr	r3, [r0, #4]
 80113a6:	4690      	mov	r8, r2
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	f000 809b 	beq.w	80114e4 <rcl_wait+0x15c>
 80113ae:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 80113b0:	2e00      	cmp	r6, #0
 80113b2:	f000 80b2 	beq.w	801151a <rcl_wait+0x192>
 80113b6:	2100      	movs	r1, #0
 80113b8:	468c      	mov	ip, r1
 80113ba:	460a      	mov	r2, r1
 80113bc:	46a6      	mov	lr, r4
 80113be:	f8de 3010 	ldr.w	r3, [lr, #16]
 80113c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80113c6:	b173      	cbz	r3, 80113e6 <rcl_wait+0x5e>
 80113c8:	f8de 300c 	ldr.w	r3, [lr, #12]
 80113cc:	6968      	ldr	r0, [r5, #20]
 80113ce:	440b      	add	r3, r1
 80113d0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80113d4:	b13c      	cbz	r4, 80113e6 <rcl_wait+0x5e>
 80113d6:	692b      	ldr	r3, [r5, #16]
 80113d8:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80113dc:	3301      	adds	r3, #1
 80113de:	612b      	str	r3, [r5, #16]
 80113e0:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 80113e4:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 80113e6:	3101      	adds	r1, #1
 80113e8:	f14c 0c00 	adc.w	ip, ip, #0
 80113ec:	42b1      	cmp	r1, r6
 80113ee:	f17c 0300 	sbcs.w	r3, ip, #0
 80113f2:	d3e4      	bcc.n	80113be <rcl_wait+0x36>
 80113f4:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 80116a0 <rcl_wait+0x318>
 80113f8:	ea58 0307 	orrs.w	r3, r8, r7
 80113fc:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 8011400:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 8011404:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 8011408:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 801140c:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8011410:	4674      	mov	r4, lr
 8011412:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8011416:	f000 8094 	beq.w	8011542 <rcl_wait+0x1ba>
 801141a:	2e00      	cmp	r6, #0
 801141c:	f000 8145 	beq.w	80116aa <rcl_wait+0x322>
 8011420:	2500      	movs	r5, #0
 8011422:	46bb      	mov	fp, r7
 8011424:	e02c      	b.n	8011480 <rcl_wait+0xf8>
 8011426:	6923      	ldr	r3, [r4, #16]
 8011428:	f853 0009 	ldr.w	r0, [r3, r9]
 801142c:	a908      	add	r1, sp, #32
 801142e:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011432:	f7ff fafb 	bl	8010a2c <rcl_timer_get_next_call_time>
 8011436:	f240 3321 	movw	r3, #801	@ 0x321
 801143a:	4298      	cmp	r0, r3
 801143c:	f000 80bb 	beq.w	80115b6 <rcl_wait+0x22e>
 8011440:	2800      	cmp	r0, #0
 8011442:	d165      	bne.n	8011510 <rcl_wait+0x188>
 8011444:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 8011448:	7830      	ldrb	r0, [r6, #0]
 801144a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801144c:	ab18      	add	r3, sp, #96	@ 0x60
 801144e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8011452:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8011456:	9205      	str	r2, [sp, #20]
 8011458:	f853 2c20 	ldr.w	r2, [r3, #-32]
 801145c:	4297      	cmp	r7, r2
 801145e:	9a05      	ldr	r2, [sp, #20]
 8011460:	eb71 0202 	sbcs.w	r2, r1, r2
 8011464:	da06      	bge.n	8011474 <rcl_wait+0xec>
 8011466:	e943 7108 	strd	r7, r1, [r3, #-32]
 801146a:	ab18      	add	r3, sp, #96	@ 0x60
 801146c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011470:	f840 6c30 	str.w	r6, [r0, #-48]
 8011474:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011476:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 8011478:	3501      	adds	r5, #1
 801147a:	42b5      	cmp	r5, r6
 801147c:	f080 8114 	bcs.w	80116a8 <rcl_wait+0x320>
 8011480:	6923      	ldr	r3, [r4, #16]
 8011482:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011486:	ea4f 0985 	mov.w	r9, r5, lsl #2
 801148a:	2800      	cmp	r0, #0
 801148c:	d0f4      	beq.n	8011478 <rcl_wait+0xf0>
 801148e:	a907      	add	r1, sp, #28
 8011490:	f7ff f9f8 	bl	8010884 <rcl_timer_clock>
 8011494:	4603      	mov	r3, r0
 8011496:	2800      	cmp	r0, #0
 8011498:	f040 8141 	bne.w	801171e <rcl_wait+0x396>
 801149c:	9807      	ldr	r0, [sp, #28]
 801149e:	7802      	ldrb	r2, [r0, #0]
 80114a0:	2a01      	cmp	r2, #1
 80114a2:	d1c0      	bne.n	8011426 <rcl_wait+0x9e>
 80114a4:	f10d 011b 	add.w	r1, sp, #27
 80114a8:	f88d 301b 	strb.w	r3, [sp, #27]
 80114ac:	f7fe ffba 	bl	8010424 <rcl_is_enabled_ros_time_override>
 80114b0:	4602      	mov	r2, r0
 80114b2:	2800      	cmp	r0, #0
 80114b4:	f040 8133 	bne.w	801171e <rcl_wait+0x396>
 80114b8:	6923      	ldr	r3, [r4, #16]
 80114ba:	f89d 101b 	ldrb.w	r1, [sp, #27]
 80114be:	f853 0009 	ldr.w	r0, [r3, r9]
 80114c2:	2900      	cmp	r1, #0
 80114c4:	d0b0      	beq.n	8011428 <rcl_wait+0xa0>
 80114c6:	ae08      	add	r6, sp, #32
 80114c8:	4631      	mov	r1, r6
 80114ca:	f88d 2020 	strb.w	r2, [sp, #32]
 80114ce:	f7ff fa73 	bl	80109b8 <rcl_timer_is_ready>
 80114d2:	2800      	cmp	r0, #0
 80114d4:	f040 8123 	bne.w	801171e <rcl_wait+0x396>
 80114d8:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d0c9      	beq.n	8011474 <rcl_wait+0xec>
 80114e0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80114e2:	e02f      	b.n	8011544 <rcl_wait+0x1bc>
 80114e4:	68c3      	ldr	r3, [r0, #12]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	f47f af61 	bne.w	80113ae <rcl_wait+0x26>
 80114ec:	6943      	ldr	r3, [r0, #20]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	f47f af5d 	bne.w	80113ae <rcl_wait+0x26>
 80114f4:	69c3      	ldr	r3, [r0, #28]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	f47f af59 	bne.w	80113ae <rcl_wait+0x26>
 80114fc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80114fe:	2b00      	cmp	r3, #0
 8011500:	f47f af55 	bne.w	80113ae <rcl_wait+0x26>
 8011504:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011506:	2b00      	cmp	r3, #0
 8011508:	f47f af51 	bne.w	80113ae <rcl_wait+0x26>
 801150c:	f240 3085 	movw	r0, #901	@ 0x385
 8011510:	b019      	add	sp, #100	@ 0x64
 8011512:	ecbd 8b02 	vpop	{d8}
 8011516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801151a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801151e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011522:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8011526:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 801152a:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 801152e:	ea58 0307 	orrs.w	r3, r8, r7
 8011532:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 8011536:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 801153a:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 801153e:	f040 80b4 	bne.w	80116aa <rcl_wait+0x322>
 8011542:	ae08      	add	r6, sp, #32
 8011544:	2200      	movs	r2, #0
 8011546:	2300      	movs	r3, #0
 8011548:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801154c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011550:	9602      	str	r6, [sp, #8]
 8011552:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8011554:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8011558:	e9cd 3200 	strd	r3, r2, [sp]
 801155c:	f105 0110 	add.w	r1, r5, #16
 8011560:	f105 031c 	add.w	r3, r5, #28
 8011564:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 8011568:	1d28      	adds	r0, r5, #4
 801156a:	f002 fb55 	bl	8013c18 <rmw_wait>
 801156e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011570:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011572:	4680      	mov	r8, r0
 8011574:	b332      	cbz	r2, 80115c4 <rcl_wait+0x23c>
 8011576:	2500      	movs	r5, #0
 8011578:	462f      	mov	r7, r5
 801157a:	462e      	mov	r6, r5
 801157c:	e007      	b.n	801158e <rcl_wait+0x206>
 801157e:	6922      	ldr	r2, [r4, #16]
 8011580:	f842 3009 	str.w	r3, [r2, r9]
 8011584:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011586:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011588:	3501      	adds	r5, #1
 801158a:	4295      	cmp	r5, r2
 801158c:	d21b      	bcs.n	80115c6 <rcl_wait+0x23e>
 801158e:	6920      	ldr	r0, [r4, #16]
 8011590:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8011594:	a907      	add	r1, sp, #28
 8011596:	ea4f 0985 	mov.w	r9, r5, lsl #2
 801159a:	2800      	cmp	r0, #0
 801159c:	d0f4      	beq.n	8011588 <rcl_wait+0x200>
 801159e:	f88d 601c 	strb.w	r6, [sp, #28]
 80115a2:	f7ff fa09 	bl	80109b8 <rcl_timer_is_ready>
 80115a6:	2800      	cmp	r0, #0
 80115a8:	d1b2      	bne.n	8011510 <rcl_wait+0x188>
 80115aa:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d0e5      	beq.n	801157e <rcl_wait+0x1f6>
 80115b2:	461f      	mov	r7, r3
 80115b4:	e7e6      	b.n	8011584 <rcl_wait+0x1fc>
 80115b6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80115b8:	6923      	ldr	r3, [r4, #16]
 80115ba:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 80115bc:	2200      	movs	r2, #0
 80115be:	f843 2009 	str.w	r2, [r3, r9]
 80115c2:	e759      	b.n	8011478 <rcl_wait+0xf0>
 80115c4:	4617      	mov	r7, r2
 80115c6:	f038 0002 	bics.w	r0, r8, #2
 80115ca:	f040 80a8 	bne.w	801171e <rcl_wait+0x396>
 80115ce:	6866      	ldr	r6, [r4, #4]
 80115d0:	4602      	mov	r2, r0
 80115d2:	b91e      	cbnz	r6, 80115dc <rcl_wait+0x254>
 80115d4:	e00d      	b.n	80115f2 <rcl_wait+0x26a>
 80115d6:	3201      	adds	r2, #1
 80115d8:	4296      	cmp	r6, r2
 80115da:	d00a      	beq.n	80115f2 <rcl_wait+0x26a>
 80115dc:	6899      	ldr	r1, [r3, #8]
 80115de:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80115e2:	2900      	cmp	r1, #0
 80115e4:	d1f7      	bne.n	80115d6 <rcl_wait+0x24e>
 80115e6:	6825      	ldr	r5, [r4, #0]
 80115e8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80115ec:	3201      	adds	r2, #1
 80115ee:	4296      	cmp	r6, r2
 80115f0:	d1f4      	bne.n	80115dc <rcl_wait+0x254>
 80115f2:	68e6      	ldr	r6, [r4, #12]
 80115f4:	2200      	movs	r2, #0
 80115f6:	b91e      	cbnz	r6, 8011600 <rcl_wait+0x278>
 80115f8:	e00d      	b.n	8011616 <rcl_wait+0x28e>
 80115fa:	3201      	adds	r2, #1
 80115fc:	42b2      	cmp	r2, r6
 80115fe:	d00a      	beq.n	8011616 <rcl_wait+0x28e>
 8011600:	6959      	ldr	r1, [r3, #20]
 8011602:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011606:	2900      	cmp	r1, #0
 8011608:	d1f7      	bne.n	80115fa <rcl_wait+0x272>
 801160a:	68a5      	ldr	r5, [r4, #8]
 801160c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8011610:	3201      	adds	r2, #1
 8011612:	42b2      	cmp	r2, r6
 8011614:	d1f4      	bne.n	8011600 <rcl_wait+0x278>
 8011616:	69e6      	ldr	r6, [r4, #28]
 8011618:	2200      	movs	r2, #0
 801161a:	b91e      	cbnz	r6, 8011624 <rcl_wait+0x29c>
 801161c:	e00d      	b.n	801163a <rcl_wait+0x2b2>
 801161e:	3201      	adds	r2, #1
 8011620:	4296      	cmp	r6, r2
 8011622:	d00a      	beq.n	801163a <rcl_wait+0x2b2>
 8011624:	6a19      	ldr	r1, [r3, #32]
 8011626:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801162a:	2900      	cmp	r1, #0
 801162c:	d1f7      	bne.n	801161e <rcl_wait+0x296>
 801162e:	69a5      	ldr	r5, [r4, #24]
 8011630:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8011634:	3201      	adds	r2, #1
 8011636:	4296      	cmp	r6, r2
 8011638:	d1f4      	bne.n	8011624 <rcl_wait+0x29c>
 801163a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 801163c:	2200      	movs	r2, #0
 801163e:	b91e      	cbnz	r6, 8011648 <rcl_wait+0x2c0>
 8011640:	e00d      	b.n	801165e <rcl_wait+0x2d6>
 8011642:	3201      	adds	r2, #1
 8011644:	42b2      	cmp	r2, r6
 8011646:	d00a      	beq.n	801165e <rcl_wait+0x2d6>
 8011648:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801164a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801164e:	2900      	cmp	r1, #0
 8011650:	d1f7      	bne.n	8011642 <rcl_wait+0x2ba>
 8011652:	6a25      	ldr	r5, [r4, #32]
 8011654:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8011658:	3201      	adds	r2, #1
 801165a:	42b2      	cmp	r2, r6
 801165c:	d1f4      	bne.n	8011648 <rcl_wait+0x2c0>
 801165e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011660:	2200      	movs	r2, #0
 8011662:	b91e      	cbnz	r6, 801166c <rcl_wait+0x2e4>
 8011664:	e00d      	b.n	8011682 <rcl_wait+0x2fa>
 8011666:	3201      	adds	r2, #1
 8011668:	42b2      	cmp	r2, r6
 801166a:	d00a      	beq.n	8011682 <rcl_wait+0x2fa>
 801166c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801166e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011672:	2900      	cmp	r1, #0
 8011674:	d1f7      	bne.n	8011666 <rcl_wait+0x2de>
 8011676:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8011678:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801167c:	3201      	adds	r2, #1
 801167e:	42b2      	cmp	r2, r6
 8011680:	d1f4      	bne.n	801166c <rcl_wait+0x2e4>
 8011682:	f1b8 0f02 	cmp.w	r8, #2
 8011686:	f47f af43 	bne.w	8011510 <rcl_wait+0x188>
 801168a:	f087 0701 	eor.w	r7, r7, #1
 801168e:	0078      	lsls	r0, r7, #1
 8011690:	e73e      	b.n	8011510 <rcl_wait+0x188>
 8011692:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011696:	b019      	add	sp, #100	@ 0x64
 8011698:	ecbd 8b02 	vpop	{d8}
 801169c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116a0:	ffffffff 	.word	0xffffffff
 80116a4:	7fffffff 	.word	0x7fffffff
 80116a8:	465f      	mov	r7, fp
 80116aa:	f1b8 0f01 	cmp.w	r8, #1
 80116ae:	f177 0300 	sbcs.w	r3, r7, #0
 80116b2:	db3a      	blt.n	801172a <rcl_wait+0x3a2>
 80116b4:	2601      	movs	r6, #1
 80116b6:	ad10      	add	r5, sp, #64	@ 0x40
 80116b8:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 80116bc:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80116c0:	a908      	add	r1, sp, #32
 80116c2:	b1a0      	cbz	r0, 80116ee <rcl_wait+0x366>
 80116c4:	f7fe fea2 	bl	801040c <rcl_clock_get_now>
 80116c8:	2800      	cmp	r0, #0
 80116ca:	f47f af21 	bne.w	8011510 <rcl_wait+0x188>
 80116ce:	9a08      	ldr	r2, [sp, #32]
 80116d0:	68ab      	ldr	r3, [r5, #8]
 80116d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80116d4:	1a9b      	subs	r3, r3, r2
 80116d6:	68ea      	ldr	r2, [r5, #12]
 80116d8:	eb62 0201 	sbc.w	r2, r2, r1
 80116dc:	4598      	cmp	r8, r3
 80116de:	eb77 0102 	sbcs.w	r1, r7, r2
 80116e2:	bfba      	itte	lt
 80116e4:	4643      	movlt	r3, r8
 80116e6:	463a      	movlt	r2, r7
 80116e8:	2601      	movge	r6, #1
 80116ea:	4698      	mov	r8, r3
 80116ec:	4617      	mov	r7, r2
 80116ee:	3508      	adds	r5, #8
 80116f0:	45a9      	cmp	r9, r5
 80116f2:	d1e3      	bne.n	80116bc <rcl_wait+0x334>
 80116f4:	2f00      	cmp	r7, #0
 80116f6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80116f8:	bfab      	itete	ge
 80116fa:	4640      	movge	r0, r8
 80116fc:	2000      	movlt	r0, #0
 80116fe:	4639      	movge	r1, r7
 8011700:	2100      	movlt	r1, #0
 8011702:	2e00      	cmp	r6, #0
 8011704:	f43f af24 	beq.w	8011550 <rcl_wait+0x1c8>
 8011708:	a30d      	add	r3, pc, #52	@ (adr r3, 8011740 <rcl_wait+0x3b8>)
 801170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801170e:	f7ef f99d 	bl	8000a4c <__aeabi_ldivmod>
 8011712:	ae08      	add	r6, sp, #32
 8011714:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011718:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801171c:	e718      	b.n	8011550 <rcl_wait+0x1c8>
 801171e:	2001      	movs	r0, #1
 8011720:	b019      	add	sp, #100	@ 0x64
 8011722:	ecbd 8b02 	vpop	{d8}
 8011726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801172a:	2600      	movs	r6, #0
 801172c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011730:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011734:	e7bf      	b.n	80116b6 <rcl_wait+0x32e>
 8011736:	200b      	movs	r0, #11
 8011738:	4770      	bx	lr
 801173a:	bf00      	nop
 801173c:	f3af 8000 	nop.w
 8011740:	3b9aca00 	.word	0x3b9aca00
 8011744:	00000000 	.word	0x00000000

08011748 <rcl_action_take_goal_response>:
 8011748:	b3b0      	cbz	r0, 80117b8 <rcl_action_take_goal_response+0x70>
 801174a:	b570      	push	{r4, r5, r6, lr}
 801174c:	4604      	mov	r4, r0
 801174e:	6800      	ldr	r0, [r0, #0]
 8011750:	b368      	cbz	r0, 80117ae <rcl_action_take_goal_response+0x66>
 8011752:	460d      	mov	r5, r1
 8011754:	4616      	mov	r6, r2
 8011756:	f7fd fe7b 	bl	800f450 <rcl_client_is_valid>
 801175a:	b330      	cbz	r0, 80117aa <rcl_action_take_goal_response+0x62>
 801175c:	6820      	ldr	r0, [r4, #0]
 801175e:	3004      	adds	r0, #4
 8011760:	f7fd fe76 	bl	800f450 <rcl_client_is_valid>
 8011764:	b308      	cbz	r0, 80117aa <rcl_action_take_goal_response+0x62>
 8011766:	6820      	ldr	r0, [r4, #0]
 8011768:	3008      	adds	r0, #8
 801176a:	f7fd fe71 	bl	800f450 <rcl_client_is_valid>
 801176e:	b1e0      	cbz	r0, 80117aa <rcl_action_take_goal_response+0x62>
 8011770:	6820      	ldr	r0, [r4, #0]
 8011772:	300c      	adds	r0, #12
 8011774:	f7fe fdae 	bl	80102d4 <rcl_subscription_is_valid>
 8011778:	b1b8      	cbz	r0, 80117aa <rcl_action_take_goal_response+0x62>
 801177a:	6820      	ldr	r0, [r4, #0]
 801177c:	3010      	adds	r0, #16
 801177e:	f7fe fda9 	bl	80102d4 <rcl_subscription_is_valid>
 8011782:	b190      	cbz	r0, 80117aa <rcl_action_take_goal_response+0x62>
 8011784:	b1b5      	cbz	r5, 80117b4 <rcl_action_take_goal_response+0x6c>
 8011786:	b1ae      	cbz	r6, 80117b4 <rcl_action_take_goal_response+0x6c>
 8011788:	6820      	ldr	r0, [r4, #0]
 801178a:	4632      	mov	r2, r6
 801178c:	4629      	mov	r1, r5
 801178e:	f7fd fdf3 	bl	800f378 <rcl_take_response>
 8011792:	b148      	cbz	r0, 80117a8 <rcl_action_take_goal_response+0x60>
 8011794:	280a      	cmp	r0, #10
 8011796:	d007      	beq.n	80117a8 <rcl_action_take_goal_response+0x60>
 8011798:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801179c:	f241 0307 	movw	r3, #4103	@ 0x1007
 80117a0:	4290      	cmp	r0, r2
 80117a2:	bf0c      	ite	eq
 80117a4:	4618      	moveq	r0, r3
 80117a6:	2001      	movne	r0, #1
 80117a8:	bd70      	pop	{r4, r5, r6, pc}
 80117aa:	f7f8 ffe5 	bl	800a778 <rcutils_reset_error>
 80117ae:	f241 0006 	movw	r0, #4102	@ 0x1006
 80117b2:	bd70      	pop	{r4, r5, r6, pc}
 80117b4:	200b      	movs	r0, #11
 80117b6:	bd70      	pop	{r4, r5, r6, pc}
 80117b8:	f241 0006 	movw	r0, #4102	@ 0x1006
 80117bc:	4770      	bx	lr
 80117be:	bf00      	nop

080117c0 <rcl_action_send_result_request>:
 80117c0:	b378      	cbz	r0, 8011822 <rcl_action_send_result_request+0x62>
 80117c2:	b570      	push	{r4, r5, r6, lr}
 80117c4:	4604      	mov	r4, r0
 80117c6:	6800      	ldr	r0, [r0, #0]
 80117c8:	b330      	cbz	r0, 8011818 <rcl_action_send_result_request+0x58>
 80117ca:	460d      	mov	r5, r1
 80117cc:	4616      	mov	r6, r2
 80117ce:	f7fd fe3f 	bl	800f450 <rcl_client_is_valid>
 80117d2:	b1f8      	cbz	r0, 8011814 <rcl_action_send_result_request+0x54>
 80117d4:	6820      	ldr	r0, [r4, #0]
 80117d6:	3004      	adds	r0, #4
 80117d8:	f7fd fe3a 	bl	800f450 <rcl_client_is_valid>
 80117dc:	b1d0      	cbz	r0, 8011814 <rcl_action_send_result_request+0x54>
 80117de:	6820      	ldr	r0, [r4, #0]
 80117e0:	3008      	adds	r0, #8
 80117e2:	f7fd fe35 	bl	800f450 <rcl_client_is_valid>
 80117e6:	b1a8      	cbz	r0, 8011814 <rcl_action_send_result_request+0x54>
 80117e8:	6820      	ldr	r0, [r4, #0]
 80117ea:	300c      	adds	r0, #12
 80117ec:	f7fe fd72 	bl	80102d4 <rcl_subscription_is_valid>
 80117f0:	b180      	cbz	r0, 8011814 <rcl_action_send_result_request+0x54>
 80117f2:	6820      	ldr	r0, [r4, #0]
 80117f4:	3010      	adds	r0, #16
 80117f6:	f7fe fd6d 	bl	80102d4 <rcl_subscription_is_valid>
 80117fa:	b158      	cbz	r0, 8011814 <rcl_action_send_result_request+0x54>
 80117fc:	b17d      	cbz	r5, 801181e <rcl_action_send_result_request+0x5e>
 80117fe:	b176      	cbz	r6, 801181e <rcl_action_send_result_request+0x5e>
 8011800:	6820      	ldr	r0, [r4, #0]
 8011802:	4632      	mov	r2, r6
 8011804:	4629      	mov	r1, r5
 8011806:	3008      	adds	r0, #8
 8011808:	f7fd fd64 	bl	800f2d4 <rcl_send_request>
 801180c:	3800      	subs	r0, #0
 801180e:	bf18      	it	ne
 8011810:	2001      	movne	r0, #1
 8011812:	bd70      	pop	{r4, r5, r6, pc}
 8011814:	f7f8 ffb0 	bl	800a778 <rcutils_reset_error>
 8011818:	f241 0006 	movw	r0, #4102	@ 0x1006
 801181c:	bd70      	pop	{r4, r5, r6, pc}
 801181e:	200b      	movs	r0, #11
 8011820:	bd70      	pop	{r4, r5, r6, pc}
 8011822:	f241 0006 	movw	r0, #4102	@ 0x1006
 8011826:	4770      	bx	lr

08011828 <rcl_action_take_result_response>:
 8011828:	2800      	cmp	r0, #0
 801182a:	d037      	beq.n	801189c <rcl_action_take_result_response+0x74>
 801182c:	b570      	push	{r4, r5, r6, lr}
 801182e:	4604      	mov	r4, r0
 8011830:	6800      	ldr	r0, [r0, #0]
 8011832:	b370      	cbz	r0, 8011892 <rcl_action_take_result_response+0x6a>
 8011834:	460d      	mov	r5, r1
 8011836:	4616      	mov	r6, r2
 8011838:	f7fd fe0a 	bl	800f450 <rcl_client_is_valid>
 801183c:	b338      	cbz	r0, 801188e <rcl_action_take_result_response+0x66>
 801183e:	6820      	ldr	r0, [r4, #0]
 8011840:	3004      	adds	r0, #4
 8011842:	f7fd fe05 	bl	800f450 <rcl_client_is_valid>
 8011846:	b310      	cbz	r0, 801188e <rcl_action_take_result_response+0x66>
 8011848:	6820      	ldr	r0, [r4, #0]
 801184a:	3008      	adds	r0, #8
 801184c:	f7fd fe00 	bl	800f450 <rcl_client_is_valid>
 8011850:	b1e8      	cbz	r0, 801188e <rcl_action_take_result_response+0x66>
 8011852:	6820      	ldr	r0, [r4, #0]
 8011854:	300c      	adds	r0, #12
 8011856:	f7fe fd3d 	bl	80102d4 <rcl_subscription_is_valid>
 801185a:	b1c0      	cbz	r0, 801188e <rcl_action_take_result_response+0x66>
 801185c:	6820      	ldr	r0, [r4, #0]
 801185e:	3010      	adds	r0, #16
 8011860:	f7fe fd38 	bl	80102d4 <rcl_subscription_is_valid>
 8011864:	b198      	cbz	r0, 801188e <rcl_action_take_result_response+0x66>
 8011866:	b1bd      	cbz	r5, 8011898 <rcl_action_take_result_response+0x70>
 8011868:	b1b6      	cbz	r6, 8011898 <rcl_action_take_result_response+0x70>
 801186a:	6820      	ldr	r0, [r4, #0]
 801186c:	4632      	mov	r2, r6
 801186e:	4629      	mov	r1, r5
 8011870:	3008      	adds	r0, #8
 8011872:	f7fd fd81 	bl	800f378 <rcl_take_response>
 8011876:	b148      	cbz	r0, 801188c <rcl_action_take_result_response+0x64>
 8011878:	280a      	cmp	r0, #10
 801187a:	d007      	beq.n	801188c <rcl_action_take_result_response+0x64>
 801187c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011880:	f241 0307 	movw	r3, #4103	@ 0x1007
 8011884:	4290      	cmp	r0, r2
 8011886:	bf0c      	ite	eq
 8011888:	4618      	moveq	r0, r3
 801188a:	2001      	movne	r0, #1
 801188c:	bd70      	pop	{r4, r5, r6, pc}
 801188e:	f7f8 ff73 	bl	800a778 <rcutils_reset_error>
 8011892:	f241 0006 	movw	r0, #4102	@ 0x1006
 8011896:	bd70      	pop	{r4, r5, r6, pc}
 8011898:	200b      	movs	r0, #11
 801189a:	bd70      	pop	{r4, r5, r6, pc}
 801189c:	f241 0006 	movw	r0, #4102	@ 0x1006
 80118a0:	4770      	bx	lr
 80118a2:	bf00      	nop

080118a4 <rcl_action_take_cancel_response>:
 80118a4:	2800      	cmp	r0, #0
 80118a6:	d037      	beq.n	8011918 <rcl_action_take_cancel_response+0x74>
 80118a8:	b570      	push	{r4, r5, r6, lr}
 80118aa:	4604      	mov	r4, r0
 80118ac:	6800      	ldr	r0, [r0, #0]
 80118ae:	b370      	cbz	r0, 801190e <rcl_action_take_cancel_response+0x6a>
 80118b0:	460d      	mov	r5, r1
 80118b2:	4616      	mov	r6, r2
 80118b4:	f7fd fdcc 	bl	800f450 <rcl_client_is_valid>
 80118b8:	b338      	cbz	r0, 801190a <rcl_action_take_cancel_response+0x66>
 80118ba:	6820      	ldr	r0, [r4, #0]
 80118bc:	3004      	adds	r0, #4
 80118be:	f7fd fdc7 	bl	800f450 <rcl_client_is_valid>
 80118c2:	b310      	cbz	r0, 801190a <rcl_action_take_cancel_response+0x66>
 80118c4:	6820      	ldr	r0, [r4, #0]
 80118c6:	3008      	adds	r0, #8
 80118c8:	f7fd fdc2 	bl	800f450 <rcl_client_is_valid>
 80118cc:	b1e8      	cbz	r0, 801190a <rcl_action_take_cancel_response+0x66>
 80118ce:	6820      	ldr	r0, [r4, #0]
 80118d0:	300c      	adds	r0, #12
 80118d2:	f7fe fcff 	bl	80102d4 <rcl_subscription_is_valid>
 80118d6:	b1c0      	cbz	r0, 801190a <rcl_action_take_cancel_response+0x66>
 80118d8:	6820      	ldr	r0, [r4, #0]
 80118da:	3010      	adds	r0, #16
 80118dc:	f7fe fcfa 	bl	80102d4 <rcl_subscription_is_valid>
 80118e0:	b198      	cbz	r0, 801190a <rcl_action_take_cancel_response+0x66>
 80118e2:	b1bd      	cbz	r5, 8011914 <rcl_action_take_cancel_response+0x70>
 80118e4:	b1b6      	cbz	r6, 8011914 <rcl_action_take_cancel_response+0x70>
 80118e6:	6820      	ldr	r0, [r4, #0]
 80118e8:	4632      	mov	r2, r6
 80118ea:	4629      	mov	r1, r5
 80118ec:	3004      	adds	r0, #4
 80118ee:	f7fd fd43 	bl	800f378 <rcl_take_response>
 80118f2:	b148      	cbz	r0, 8011908 <rcl_action_take_cancel_response+0x64>
 80118f4:	280a      	cmp	r0, #10
 80118f6:	d007      	beq.n	8011908 <rcl_action_take_cancel_response+0x64>
 80118f8:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80118fc:	f241 0307 	movw	r3, #4103	@ 0x1007
 8011900:	4290      	cmp	r0, r2
 8011902:	bf0c      	ite	eq
 8011904:	4618      	moveq	r0, r3
 8011906:	2001      	movne	r0, #1
 8011908:	bd70      	pop	{r4, r5, r6, pc}
 801190a:	f7f8 ff35 	bl	800a778 <rcutils_reset_error>
 801190e:	f241 0006 	movw	r0, #4102	@ 0x1006
 8011912:	bd70      	pop	{r4, r5, r6, pc}
 8011914:	200b      	movs	r0, #11
 8011916:	bd70      	pop	{r4, r5, r6, pc}
 8011918:	f241 0006 	movw	r0, #4102	@ 0x1006
 801191c:	4770      	bx	lr
 801191e:	bf00      	nop

08011920 <rcl_action_take_feedback>:
 8011920:	2800      	cmp	r0, #0
 8011922:	d037      	beq.n	8011994 <rcl_action_take_feedback+0x74>
 8011924:	b530      	push	{r4, r5, lr}
 8011926:	4604      	mov	r4, r0
 8011928:	6800      	ldr	r0, [r0, #0]
 801192a:	b08f      	sub	sp, #60	@ 0x3c
 801192c:	b358      	cbz	r0, 8011986 <rcl_action_take_feedback+0x66>
 801192e:	460d      	mov	r5, r1
 8011930:	f7fd fd8e 	bl	800f450 <rcl_client_is_valid>
 8011934:	b328      	cbz	r0, 8011982 <rcl_action_take_feedback+0x62>
 8011936:	6820      	ldr	r0, [r4, #0]
 8011938:	3004      	adds	r0, #4
 801193a:	f7fd fd89 	bl	800f450 <rcl_client_is_valid>
 801193e:	b300      	cbz	r0, 8011982 <rcl_action_take_feedback+0x62>
 8011940:	6820      	ldr	r0, [r4, #0]
 8011942:	3008      	adds	r0, #8
 8011944:	f7fd fd84 	bl	800f450 <rcl_client_is_valid>
 8011948:	b1d8      	cbz	r0, 8011982 <rcl_action_take_feedback+0x62>
 801194a:	6820      	ldr	r0, [r4, #0]
 801194c:	300c      	adds	r0, #12
 801194e:	f7fe fcc1 	bl	80102d4 <rcl_subscription_is_valid>
 8011952:	b1b0      	cbz	r0, 8011982 <rcl_action_take_feedback+0x62>
 8011954:	6820      	ldr	r0, [r4, #0]
 8011956:	3010      	adds	r0, #16
 8011958:	f7fe fcbc 	bl	80102d4 <rcl_subscription_is_valid>
 801195c:	b188      	cbz	r0, 8011982 <rcl_action_take_feedback+0x62>
 801195e:	b1b5      	cbz	r5, 801198e <rcl_action_take_feedback+0x6e>
 8011960:	6820      	ldr	r0, [r4, #0]
 8011962:	2300      	movs	r3, #0
 8011964:	466a      	mov	r2, sp
 8011966:	4629      	mov	r1, r5
 8011968:	300c      	adds	r0, #12
 801196a:	f7fe fc55 	bl	8010218 <rcl_take>
 801196e:	b160      	cbz	r0, 801198a <rcl_action_take_feedback+0x6a>
 8011970:	f240 1391 	movw	r3, #401	@ 0x191
 8011974:	4298      	cmp	r0, r3
 8011976:	d010      	beq.n	801199a <rcl_action_take_feedback+0x7a>
 8011978:	280a      	cmp	r0, #10
 801197a:	bf18      	it	ne
 801197c:	2001      	movne	r0, #1
 801197e:	b00f      	add	sp, #60	@ 0x3c
 8011980:	bd30      	pop	{r4, r5, pc}
 8011982:	f7f8 fef9 	bl	800a778 <rcutils_reset_error>
 8011986:	f241 0006 	movw	r0, #4102	@ 0x1006
 801198a:	b00f      	add	sp, #60	@ 0x3c
 801198c:	bd30      	pop	{r4, r5, pc}
 801198e:	200b      	movs	r0, #11
 8011990:	b00f      	add	sp, #60	@ 0x3c
 8011992:	bd30      	pop	{r4, r5, pc}
 8011994:	f241 0006 	movw	r0, #4102	@ 0x1006
 8011998:	4770      	bx	lr
 801199a:	f241 0007 	movw	r0, #4103	@ 0x1007
 801199e:	e7f4      	b.n	801198a <rcl_action_take_feedback+0x6a>

080119a0 <rcl_action_wait_set_add_action_client>:
 80119a0:	2800      	cmp	r0, #0
 80119a2:	d045      	beq.n	8011a30 <rcl_action_wait_set_add_action_client+0x90>
 80119a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119a6:	460c      	mov	r4, r1
 80119a8:	2900      	cmp	r1, #0
 80119aa:	d03e      	beq.n	8011a2a <rcl_action_wait_set_add_action_client+0x8a>
 80119ac:	4605      	mov	r5, r0
 80119ae:	6808      	ldr	r0, [r1, #0]
 80119b0:	2800      	cmp	r0, #0
 80119b2:	d03a      	beq.n	8011a2a <rcl_action_wait_set_add_action_client+0x8a>
 80119b4:	4617      	mov	r7, r2
 80119b6:	461e      	mov	r6, r3
 80119b8:	f7fd fd4a 	bl	800f450 <rcl_client_is_valid>
 80119bc:	b398      	cbz	r0, 8011a26 <rcl_action_wait_set_add_action_client+0x86>
 80119be:	6820      	ldr	r0, [r4, #0]
 80119c0:	3004      	adds	r0, #4
 80119c2:	f7fd fd45 	bl	800f450 <rcl_client_is_valid>
 80119c6:	b370      	cbz	r0, 8011a26 <rcl_action_wait_set_add_action_client+0x86>
 80119c8:	6820      	ldr	r0, [r4, #0]
 80119ca:	3008      	adds	r0, #8
 80119cc:	f7fd fd40 	bl	800f450 <rcl_client_is_valid>
 80119d0:	b348      	cbz	r0, 8011a26 <rcl_action_wait_set_add_action_client+0x86>
 80119d2:	6820      	ldr	r0, [r4, #0]
 80119d4:	300c      	adds	r0, #12
 80119d6:	f7fe fc7d 	bl	80102d4 <rcl_subscription_is_valid>
 80119da:	b320      	cbz	r0, 8011a26 <rcl_action_wait_set_add_action_client+0x86>
 80119dc:	6820      	ldr	r0, [r4, #0]
 80119de:	3010      	adds	r0, #16
 80119e0:	f7fe fc78 	bl	80102d4 <rcl_subscription_is_valid>
 80119e4:	b1f8      	cbz	r0, 8011a26 <rcl_action_wait_set_add_action_client+0x86>
 80119e6:	6821      	ldr	r1, [r4, #0]
 80119e8:	4628      	mov	r0, r5
 80119ea:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80119ee:	f7ff fc71 	bl	80112d4 <rcl_wait_set_add_client>
 80119f2:	b9b8      	cbnz	r0, 8011a24 <rcl_action_wait_set_add_action_client+0x84>
 80119f4:	6821      	ldr	r1, [r4, #0]
 80119f6:	4628      	mov	r0, r5
 80119f8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80119fc:	3104      	adds	r1, #4
 80119fe:	f7ff fc69 	bl	80112d4 <rcl_wait_set_add_client>
 8011a02:	b978      	cbnz	r0, 8011a24 <rcl_action_wait_set_add_action_client+0x84>
 8011a04:	6821      	ldr	r1, [r4, #0]
 8011a06:	4628      	mov	r0, r5
 8011a08:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8011a0c:	3108      	adds	r1, #8
 8011a0e:	f7ff fc61 	bl	80112d4 <rcl_wait_set_add_client>
 8011a12:	b938      	cbnz	r0, 8011a24 <rcl_action_wait_set_add_action_client+0x84>
 8011a14:	6821      	ldr	r1, [r4, #0]
 8011a16:	4628      	mov	r0, r5
 8011a18:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8011a1c:	310c      	adds	r1, #12
 8011a1e:	f7ff f903 	bl	8010c28 <rcl_wait_set_add_subscription>
 8011a22:	b140      	cbz	r0, 8011a36 <rcl_action_wait_set_add_action_client+0x96>
 8011a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a26:	f7f8 fea7 	bl	800a778 <rcutils_reset_error>
 8011a2a:	f241 0006 	movw	r0, #4102	@ 0x1006
 8011a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a30:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011a34:	4770      	bx	lr
 8011a36:	6821      	ldr	r1, [r4, #0]
 8011a38:	4628      	mov	r0, r5
 8011a3a:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8011a3e:	3110      	adds	r1, #16
 8011a40:	f7ff f8f2 	bl	8010c28 <rcl_wait_set_add_subscription>
 8011a44:	2800      	cmp	r0, #0
 8011a46:	d1ed      	bne.n	8011a24 <rcl_action_wait_set_add_action_client+0x84>
 8011a48:	b11f      	cbz	r7, 8011a52 <rcl_action_wait_set_add_action_client+0xb2>
 8011a4a:	6823      	ldr	r3, [r4, #0]
 8011a4c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8011a50:	603b      	str	r3, [r7, #0]
 8011a52:	2e00      	cmp	r6, #0
 8011a54:	d0e6      	beq.n	8011a24 <rcl_action_wait_set_add_action_client+0x84>
 8011a56:	6823      	ldr	r3, [r4, #0]
 8011a58:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8011a5c:	6033      	str	r3, [r6, #0]
 8011a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011a60 <rcl_action_client_wait_set_get_entities_ready>:
 8011a60:	2800      	cmp	r0, #0
 8011a62:	f000 8089 	beq.w	8011b78 <rcl_action_client_wait_set_get_entities_ready+0x118>
 8011a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a6a:	460c      	mov	r4, r1
 8011a6c:	2900      	cmp	r1, #0
 8011a6e:	d079      	beq.n	8011b64 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8011a70:	4605      	mov	r5, r0
 8011a72:	6808      	ldr	r0, [r1, #0]
 8011a74:	2800      	cmp	r0, #0
 8011a76:	d075      	beq.n	8011b64 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8011a78:	4616      	mov	r6, r2
 8011a7a:	461f      	mov	r7, r3
 8011a7c:	f7fd fce8 	bl	800f450 <rcl_client_is_valid>
 8011a80:	2800      	cmp	r0, #0
 8011a82:	d06d      	beq.n	8011b60 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011a84:	6820      	ldr	r0, [r4, #0]
 8011a86:	3004      	adds	r0, #4
 8011a88:	f7fd fce2 	bl	800f450 <rcl_client_is_valid>
 8011a8c:	2800      	cmp	r0, #0
 8011a8e:	d067      	beq.n	8011b60 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011a90:	6820      	ldr	r0, [r4, #0]
 8011a92:	3008      	adds	r0, #8
 8011a94:	f7fd fcdc 	bl	800f450 <rcl_client_is_valid>
 8011a98:	2800      	cmp	r0, #0
 8011a9a:	d061      	beq.n	8011b60 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011a9c:	6820      	ldr	r0, [r4, #0]
 8011a9e:	300c      	adds	r0, #12
 8011aa0:	f7fe fc18 	bl	80102d4 <rcl_subscription_is_valid>
 8011aa4:	2800      	cmp	r0, #0
 8011aa6:	d05b      	beq.n	8011b60 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011aa8:	6820      	ldr	r0, [r4, #0]
 8011aaa:	3010      	adds	r0, #16
 8011aac:	f7fe fc12 	bl	80102d4 <rcl_subscription_is_valid>
 8011ab0:	2800      	cmp	r0, #0
 8011ab2:	d055      	beq.n	8011b60 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011ab4:	2e00      	cmp	r6, #0
 8011ab6:	d05c      	beq.n	8011b72 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8011ab8:	2f00      	cmp	r7, #0
 8011aba:	d05a      	beq.n	8011b72 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8011abc:	9b06      	ldr	r3, [sp, #24]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d057      	beq.n	8011b72 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8011ac2:	9b07      	ldr	r3, [sp, #28]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d054      	beq.n	8011b72 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8011ac8:	9b08      	ldr	r3, [sp, #32]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d051      	beq.n	8011b72 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8011ace:	6823      	ldr	r3, [r4, #0]
 8011ad0:	686a      	ldr	r2, [r5, #4]
 8011ad2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8011ad6:	428a      	cmp	r2, r1
 8011ad8:	d948      	bls.n	8011b6c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8011ada:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8011ade:	4282      	cmp	r2, r0
 8011ae0:	d944      	bls.n	8011b6c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8011ae2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8011ae6:	69ea      	ldr	r2, [r5, #28]
 8011ae8:	42a2      	cmp	r2, r4
 8011aea:	d93f      	bls.n	8011b6c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8011aec:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8011af0:	4562      	cmp	r2, ip
 8011af2:	d93b      	bls.n	8011b6c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8011af4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8011af8:	4572      	cmp	r2, lr
 8011afa:	d937      	bls.n	8011b6c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8011afc:	69aa      	ldr	r2, [r5, #24]
 8011afe:	682d      	ldr	r5, [r5, #0]
 8011b00:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8011b04:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8011b08:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8011b0c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8011b10:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8011b14:	f103 0c0c 	add.w	ip, r3, #12
 8011b18:	eba5 050c 	sub.w	r5, r5, ip
 8011b1c:	fab5 f585 	clz	r5, r5
 8011b20:	096d      	lsrs	r5, r5, #5
 8011b22:	7035      	strb	r5, [r6, #0]
 8011b24:	f103 0510 	add.w	r5, r3, #16
 8011b28:	1b64      	subs	r4, r4, r5
 8011b2a:	fab4 f484 	clz	r4, r4
 8011b2e:	0964      	lsrs	r4, r4, #5
 8011b30:	703c      	strb	r4, [r7, #0]
 8011b32:	eba3 0008 	sub.w	r0, r3, r8
 8011b36:	1d1c      	adds	r4, r3, #4
 8011b38:	3308      	adds	r3, #8
 8011b3a:	1ad3      	subs	r3, r2, r3
 8011b3c:	fab0 f080 	clz	r0, r0
 8011b40:	9a06      	ldr	r2, [sp, #24]
 8011b42:	0940      	lsrs	r0, r0, #5
 8011b44:	1b09      	subs	r1, r1, r4
 8011b46:	7010      	strb	r0, [r2, #0]
 8011b48:	fab1 f181 	clz	r1, r1
 8011b4c:	9a07      	ldr	r2, [sp, #28]
 8011b4e:	0949      	lsrs	r1, r1, #5
 8011b50:	7011      	strb	r1, [r2, #0]
 8011b52:	fab3 f383 	clz	r3, r3
 8011b56:	9a08      	ldr	r2, [sp, #32]
 8011b58:	095b      	lsrs	r3, r3, #5
 8011b5a:	2000      	movs	r0, #0
 8011b5c:	7013      	strb	r3, [r2, #0]
 8011b5e:	e003      	b.n	8011b68 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011b60:	f7f8 fe0a 	bl	800a778 <rcutils_reset_error>
 8011b64:	f241 0006 	movw	r0, #4102	@ 0x1006
 8011b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b6c:	2001      	movs	r0, #1
 8011b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b72:	200b      	movs	r0, #11
 8011b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b78:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011b7c:	4770      	bx	lr
 8011b7e:	bf00      	nop

08011b80 <rcl_action_take_goal_request>:
 8011b80:	b3b0      	cbz	r0, 8011bf0 <rcl_action_take_goal_request+0x70>
 8011b82:	b570      	push	{r4, r5, r6, lr}
 8011b84:	4604      	mov	r4, r0
 8011b86:	6800      	ldr	r0, [r0, #0]
 8011b88:	b368      	cbz	r0, 8011be6 <rcl_action_take_goal_request+0x66>
 8011b8a:	460d      	mov	r5, r1
 8011b8c:	4616      	mov	r6, r2
 8011b8e:	f7fe f9ef 	bl	800ff70 <rcl_service_is_valid>
 8011b92:	b330      	cbz	r0, 8011be2 <rcl_action_take_goal_request+0x62>
 8011b94:	6820      	ldr	r0, [r4, #0]
 8011b96:	3004      	adds	r0, #4
 8011b98:	f7fe f9ea 	bl	800ff70 <rcl_service_is_valid>
 8011b9c:	b308      	cbz	r0, 8011be2 <rcl_action_take_goal_request+0x62>
 8011b9e:	6820      	ldr	r0, [r4, #0]
 8011ba0:	3008      	adds	r0, #8
 8011ba2:	f7fe f9e5 	bl	800ff70 <rcl_service_is_valid>
 8011ba6:	b1e0      	cbz	r0, 8011be2 <rcl_action_take_goal_request+0x62>
 8011ba8:	6820      	ldr	r0, [r4, #0]
 8011baa:	300c      	adds	r0, #12
 8011bac:	f7f7 fe4a 	bl	8009844 <rcl_publisher_is_valid>
 8011bb0:	b1b8      	cbz	r0, 8011be2 <rcl_action_take_goal_request+0x62>
 8011bb2:	6820      	ldr	r0, [r4, #0]
 8011bb4:	3010      	adds	r0, #16
 8011bb6:	f7f7 fe45 	bl	8009844 <rcl_publisher_is_valid>
 8011bba:	b190      	cbz	r0, 8011be2 <rcl_action_take_goal_request+0x62>
 8011bbc:	b1b5      	cbz	r5, 8011bec <rcl_action_take_goal_request+0x6c>
 8011bbe:	b1ae      	cbz	r6, 8011bec <rcl_action_take_goal_request+0x6c>
 8011bc0:	6820      	ldr	r0, [r4, #0]
 8011bc2:	4632      	mov	r2, r6
 8011bc4:	4629      	mov	r1, r5
 8011bc6:	f7fe f953 	bl	800fe70 <rcl_take_request>
 8011bca:	b148      	cbz	r0, 8011be0 <rcl_action_take_goal_request+0x60>
 8011bcc:	280a      	cmp	r0, #10
 8011bce:	d007      	beq.n	8011be0 <rcl_action_take_goal_request+0x60>
 8011bd0:	f240 2259 	movw	r2, #601	@ 0x259
 8011bd4:	f241 0369 	movw	r3, #4201	@ 0x1069
 8011bd8:	4290      	cmp	r0, r2
 8011bda:	bf0c      	ite	eq
 8011bdc:	4618      	moveq	r0, r3
 8011bde:	2001      	movne	r0, #1
 8011be0:	bd70      	pop	{r4, r5, r6, pc}
 8011be2:	f7f8 fdc9 	bl	800a778 <rcutils_reset_error>
 8011be6:	f241 0068 	movw	r0, #4200	@ 0x1068
 8011bea:	bd70      	pop	{r4, r5, r6, pc}
 8011bec:	200b      	movs	r0, #11
 8011bee:	bd70      	pop	{r4, r5, r6, pc}
 8011bf0:	f241 0068 	movw	r0, #4200	@ 0x1068
 8011bf4:	4770      	bx	lr
 8011bf6:	bf00      	nop

08011bf8 <rcl_action_send_goal_response>:
 8011bf8:	b378      	cbz	r0, 8011c5a <rcl_action_send_goal_response+0x62>
 8011bfa:	b570      	push	{r4, r5, r6, lr}
 8011bfc:	4604      	mov	r4, r0
 8011bfe:	6800      	ldr	r0, [r0, #0]
 8011c00:	b330      	cbz	r0, 8011c50 <rcl_action_send_goal_response+0x58>
 8011c02:	460d      	mov	r5, r1
 8011c04:	4616      	mov	r6, r2
 8011c06:	f7fe f9b3 	bl	800ff70 <rcl_service_is_valid>
 8011c0a:	b1f8      	cbz	r0, 8011c4c <rcl_action_send_goal_response+0x54>
 8011c0c:	6820      	ldr	r0, [r4, #0]
 8011c0e:	3004      	adds	r0, #4
 8011c10:	f7fe f9ae 	bl	800ff70 <rcl_service_is_valid>
 8011c14:	b1d0      	cbz	r0, 8011c4c <rcl_action_send_goal_response+0x54>
 8011c16:	6820      	ldr	r0, [r4, #0]
 8011c18:	3008      	adds	r0, #8
 8011c1a:	f7fe f9a9 	bl	800ff70 <rcl_service_is_valid>
 8011c1e:	b1a8      	cbz	r0, 8011c4c <rcl_action_send_goal_response+0x54>
 8011c20:	6820      	ldr	r0, [r4, #0]
 8011c22:	300c      	adds	r0, #12
 8011c24:	f7f7 fe0e 	bl	8009844 <rcl_publisher_is_valid>
 8011c28:	b180      	cbz	r0, 8011c4c <rcl_action_send_goal_response+0x54>
 8011c2a:	6820      	ldr	r0, [r4, #0]
 8011c2c:	3010      	adds	r0, #16
 8011c2e:	f7f7 fe09 	bl	8009844 <rcl_publisher_is_valid>
 8011c32:	b158      	cbz	r0, 8011c4c <rcl_action_send_goal_response+0x54>
 8011c34:	b17d      	cbz	r5, 8011c56 <rcl_action_send_goal_response+0x5e>
 8011c36:	b176      	cbz	r6, 8011c56 <rcl_action_send_goal_response+0x5e>
 8011c38:	6820      	ldr	r0, [r4, #0]
 8011c3a:	4632      	mov	r2, r6
 8011c3c:	4629      	mov	r1, r5
 8011c3e:	f7fe f967 	bl	800ff10 <rcl_send_response>
 8011c42:	b110      	cbz	r0, 8011c4a <rcl_action_send_goal_response+0x52>
 8011c44:	2802      	cmp	r0, #2
 8011c46:	bf18      	it	ne
 8011c48:	2001      	movne	r0, #1
 8011c4a:	bd70      	pop	{r4, r5, r6, pc}
 8011c4c:	f7f8 fd94 	bl	800a778 <rcutils_reset_error>
 8011c50:	f241 0068 	movw	r0, #4200	@ 0x1068
 8011c54:	bd70      	pop	{r4, r5, r6, pc}
 8011c56:	200b      	movs	r0, #11
 8011c58:	bd70      	pop	{r4, r5, r6, pc}
 8011c5a:	f241 0068 	movw	r0, #4200	@ 0x1068
 8011c5e:	4770      	bx	lr

08011c60 <rcl_action_take_result_request>:
 8011c60:	2800      	cmp	r0, #0
 8011c62:	d037      	beq.n	8011cd4 <rcl_action_take_result_request+0x74>
 8011c64:	b570      	push	{r4, r5, r6, lr}
 8011c66:	4604      	mov	r4, r0
 8011c68:	6800      	ldr	r0, [r0, #0]
 8011c6a:	b370      	cbz	r0, 8011cca <rcl_action_take_result_request+0x6a>
 8011c6c:	460d      	mov	r5, r1
 8011c6e:	4616      	mov	r6, r2
 8011c70:	f7fe f97e 	bl	800ff70 <rcl_service_is_valid>
 8011c74:	b338      	cbz	r0, 8011cc6 <rcl_action_take_result_request+0x66>
 8011c76:	6820      	ldr	r0, [r4, #0]
 8011c78:	3004      	adds	r0, #4
 8011c7a:	f7fe f979 	bl	800ff70 <rcl_service_is_valid>
 8011c7e:	b310      	cbz	r0, 8011cc6 <rcl_action_take_result_request+0x66>
 8011c80:	6820      	ldr	r0, [r4, #0]
 8011c82:	3008      	adds	r0, #8
 8011c84:	f7fe f974 	bl	800ff70 <rcl_service_is_valid>
 8011c88:	b1e8      	cbz	r0, 8011cc6 <rcl_action_take_result_request+0x66>
 8011c8a:	6820      	ldr	r0, [r4, #0]
 8011c8c:	300c      	adds	r0, #12
 8011c8e:	f7f7 fdd9 	bl	8009844 <rcl_publisher_is_valid>
 8011c92:	b1c0      	cbz	r0, 8011cc6 <rcl_action_take_result_request+0x66>
 8011c94:	6820      	ldr	r0, [r4, #0]
 8011c96:	3010      	adds	r0, #16
 8011c98:	f7f7 fdd4 	bl	8009844 <rcl_publisher_is_valid>
 8011c9c:	b198      	cbz	r0, 8011cc6 <rcl_action_take_result_request+0x66>
 8011c9e:	b1bd      	cbz	r5, 8011cd0 <rcl_action_take_result_request+0x70>
 8011ca0:	b1b6      	cbz	r6, 8011cd0 <rcl_action_take_result_request+0x70>
 8011ca2:	6820      	ldr	r0, [r4, #0]
 8011ca4:	4632      	mov	r2, r6
 8011ca6:	4629      	mov	r1, r5
 8011ca8:	3008      	adds	r0, #8
 8011caa:	f7fe f8e1 	bl	800fe70 <rcl_take_request>
 8011cae:	b148      	cbz	r0, 8011cc4 <rcl_action_take_result_request+0x64>
 8011cb0:	280a      	cmp	r0, #10
 8011cb2:	d007      	beq.n	8011cc4 <rcl_action_take_result_request+0x64>
 8011cb4:	f240 2259 	movw	r2, #601	@ 0x259
 8011cb8:	f241 0369 	movw	r3, #4201	@ 0x1069
 8011cbc:	4290      	cmp	r0, r2
 8011cbe:	bf0c      	ite	eq
 8011cc0:	4618      	moveq	r0, r3
 8011cc2:	2001      	movne	r0, #1
 8011cc4:	bd70      	pop	{r4, r5, r6, pc}
 8011cc6:	f7f8 fd57 	bl	800a778 <rcutils_reset_error>
 8011cca:	f241 0068 	movw	r0, #4200	@ 0x1068
 8011cce:	bd70      	pop	{r4, r5, r6, pc}
 8011cd0:	200b      	movs	r0, #11
 8011cd2:	bd70      	pop	{r4, r5, r6, pc}
 8011cd4:	f241 0068 	movw	r0, #4200	@ 0x1068
 8011cd8:	4770      	bx	lr
 8011cda:	bf00      	nop

08011cdc <rcl_action_take_cancel_request>:
 8011cdc:	2800      	cmp	r0, #0
 8011cde:	d037      	beq.n	8011d50 <rcl_action_take_cancel_request+0x74>
 8011ce0:	b570      	push	{r4, r5, r6, lr}
 8011ce2:	4604      	mov	r4, r0
 8011ce4:	6800      	ldr	r0, [r0, #0]
 8011ce6:	b370      	cbz	r0, 8011d46 <rcl_action_take_cancel_request+0x6a>
 8011ce8:	460d      	mov	r5, r1
 8011cea:	4616      	mov	r6, r2
 8011cec:	f7fe f940 	bl	800ff70 <rcl_service_is_valid>
 8011cf0:	b338      	cbz	r0, 8011d42 <rcl_action_take_cancel_request+0x66>
 8011cf2:	6820      	ldr	r0, [r4, #0]
 8011cf4:	3004      	adds	r0, #4
 8011cf6:	f7fe f93b 	bl	800ff70 <rcl_service_is_valid>
 8011cfa:	b310      	cbz	r0, 8011d42 <rcl_action_take_cancel_request+0x66>
 8011cfc:	6820      	ldr	r0, [r4, #0]
 8011cfe:	3008      	adds	r0, #8
 8011d00:	f7fe f936 	bl	800ff70 <rcl_service_is_valid>
 8011d04:	b1e8      	cbz	r0, 8011d42 <rcl_action_take_cancel_request+0x66>
 8011d06:	6820      	ldr	r0, [r4, #0]
 8011d08:	300c      	adds	r0, #12
 8011d0a:	f7f7 fd9b 	bl	8009844 <rcl_publisher_is_valid>
 8011d0e:	b1c0      	cbz	r0, 8011d42 <rcl_action_take_cancel_request+0x66>
 8011d10:	6820      	ldr	r0, [r4, #0]
 8011d12:	3010      	adds	r0, #16
 8011d14:	f7f7 fd96 	bl	8009844 <rcl_publisher_is_valid>
 8011d18:	b198      	cbz	r0, 8011d42 <rcl_action_take_cancel_request+0x66>
 8011d1a:	b1bd      	cbz	r5, 8011d4c <rcl_action_take_cancel_request+0x70>
 8011d1c:	b1b6      	cbz	r6, 8011d4c <rcl_action_take_cancel_request+0x70>
 8011d1e:	6820      	ldr	r0, [r4, #0]
 8011d20:	4632      	mov	r2, r6
 8011d22:	4629      	mov	r1, r5
 8011d24:	3004      	adds	r0, #4
 8011d26:	f7fe f8a3 	bl	800fe70 <rcl_take_request>
 8011d2a:	b148      	cbz	r0, 8011d40 <rcl_action_take_cancel_request+0x64>
 8011d2c:	280a      	cmp	r0, #10
 8011d2e:	d007      	beq.n	8011d40 <rcl_action_take_cancel_request+0x64>
 8011d30:	f240 2259 	movw	r2, #601	@ 0x259
 8011d34:	f241 0369 	movw	r3, #4201	@ 0x1069
 8011d38:	4290      	cmp	r0, r2
 8011d3a:	bf0c      	ite	eq
 8011d3c:	4618      	moveq	r0, r3
 8011d3e:	2001      	movne	r0, #1
 8011d40:	bd70      	pop	{r4, r5, r6, pc}
 8011d42:	f7f8 fd19 	bl	800a778 <rcutils_reset_error>
 8011d46:	f241 0068 	movw	r0, #4200	@ 0x1068
 8011d4a:	bd70      	pop	{r4, r5, r6, pc}
 8011d4c:	200b      	movs	r0, #11
 8011d4e:	bd70      	pop	{r4, r5, r6, pc}
 8011d50:	f241 0068 	movw	r0, #4200	@ 0x1068
 8011d54:	4770      	bx	lr
 8011d56:	bf00      	nop

08011d58 <rcl_action_send_cancel_response>:
 8011d58:	b380      	cbz	r0, 8011dbc <rcl_action_send_cancel_response+0x64>
 8011d5a:	b570      	push	{r4, r5, r6, lr}
 8011d5c:	4604      	mov	r4, r0
 8011d5e:	6800      	ldr	r0, [r0, #0]
 8011d60:	b338      	cbz	r0, 8011db2 <rcl_action_send_cancel_response+0x5a>
 8011d62:	460d      	mov	r5, r1
 8011d64:	4616      	mov	r6, r2
 8011d66:	f7fe f903 	bl	800ff70 <rcl_service_is_valid>
 8011d6a:	b300      	cbz	r0, 8011dae <rcl_action_send_cancel_response+0x56>
 8011d6c:	6820      	ldr	r0, [r4, #0]
 8011d6e:	3004      	adds	r0, #4
 8011d70:	f7fe f8fe 	bl	800ff70 <rcl_service_is_valid>
 8011d74:	b1d8      	cbz	r0, 8011dae <rcl_action_send_cancel_response+0x56>
 8011d76:	6820      	ldr	r0, [r4, #0]
 8011d78:	3008      	adds	r0, #8
 8011d7a:	f7fe f8f9 	bl	800ff70 <rcl_service_is_valid>
 8011d7e:	b1b0      	cbz	r0, 8011dae <rcl_action_send_cancel_response+0x56>
 8011d80:	6820      	ldr	r0, [r4, #0]
 8011d82:	300c      	adds	r0, #12
 8011d84:	f7f7 fd5e 	bl	8009844 <rcl_publisher_is_valid>
 8011d88:	b188      	cbz	r0, 8011dae <rcl_action_send_cancel_response+0x56>
 8011d8a:	6820      	ldr	r0, [r4, #0]
 8011d8c:	3010      	adds	r0, #16
 8011d8e:	f7f7 fd59 	bl	8009844 <rcl_publisher_is_valid>
 8011d92:	b160      	cbz	r0, 8011dae <rcl_action_send_cancel_response+0x56>
 8011d94:	b185      	cbz	r5, 8011db8 <rcl_action_send_cancel_response+0x60>
 8011d96:	b17e      	cbz	r6, 8011db8 <rcl_action_send_cancel_response+0x60>
 8011d98:	6820      	ldr	r0, [r4, #0]
 8011d9a:	4632      	mov	r2, r6
 8011d9c:	4629      	mov	r1, r5
 8011d9e:	3004      	adds	r0, #4
 8011da0:	f7fe f8b6 	bl	800ff10 <rcl_send_response>
 8011da4:	b110      	cbz	r0, 8011dac <rcl_action_send_cancel_response+0x54>
 8011da6:	2802      	cmp	r0, #2
 8011da8:	bf18      	it	ne
 8011daa:	2001      	movne	r0, #1
 8011dac:	bd70      	pop	{r4, r5, r6, pc}
 8011dae:	f7f8 fce3 	bl	800a778 <rcutils_reset_error>
 8011db2:	f241 0068 	movw	r0, #4200	@ 0x1068
 8011db6:	bd70      	pop	{r4, r5, r6, pc}
 8011db8:	200b      	movs	r0, #11
 8011dba:	bd70      	pop	{r4, r5, r6, pc}
 8011dbc:	f241 0068 	movw	r0, #4200	@ 0x1068
 8011dc0:	4770      	bx	lr
 8011dc2:	bf00      	nop

08011dc4 <rcl_action_wait_set_add_action_server>:
 8011dc4:	2800      	cmp	r0, #0
 8011dc6:	d04a      	beq.n	8011e5e <rcl_action_wait_set_add_action_server+0x9a>
 8011dc8:	b570      	push	{r4, r5, r6, lr}
 8011dca:	460c      	mov	r4, r1
 8011dcc:	2900      	cmp	r1, #0
 8011dce:	d043      	beq.n	8011e58 <rcl_action_wait_set_add_action_server+0x94>
 8011dd0:	4605      	mov	r5, r0
 8011dd2:	6808      	ldr	r0, [r1, #0]
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	d03f      	beq.n	8011e58 <rcl_action_wait_set_add_action_server+0x94>
 8011dd8:	4616      	mov	r6, r2
 8011dda:	f7fe f8c9 	bl	800ff70 <rcl_service_is_valid>
 8011dde:	2800      	cmp	r0, #0
 8011de0:	d038      	beq.n	8011e54 <rcl_action_wait_set_add_action_server+0x90>
 8011de2:	6820      	ldr	r0, [r4, #0]
 8011de4:	3004      	adds	r0, #4
 8011de6:	f7fe f8c3 	bl	800ff70 <rcl_service_is_valid>
 8011dea:	b398      	cbz	r0, 8011e54 <rcl_action_wait_set_add_action_server+0x90>
 8011dec:	6820      	ldr	r0, [r4, #0]
 8011dee:	3008      	adds	r0, #8
 8011df0:	f7fe f8be 	bl	800ff70 <rcl_service_is_valid>
 8011df4:	b370      	cbz	r0, 8011e54 <rcl_action_wait_set_add_action_server+0x90>
 8011df6:	6820      	ldr	r0, [r4, #0]
 8011df8:	300c      	adds	r0, #12
 8011dfa:	f7f7 fd3d 	bl	8009878 <rcl_publisher_is_valid_except_context>
 8011dfe:	b348      	cbz	r0, 8011e54 <rcl_action_wait_set_add_action_server+0x90>
 8011e00:	6820      	ldr	r0, [r4, #0]
 8011e02:	3010      	adds	r0, #16
 8011e04:	f7f7 fd38 	bl	8009878 <rcl_publisher_is_valid_except_context>
 8011e08:	b320      	cbz	r0, 8011e54 <rcl_action_wait_set_add_action_server+0x90>
 8011e0a:	6821      	ldr	r1, [r4, #0]
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8011e12:	f7ff fa8b 	bl	801132c <rcl_wait_set_add_service>
 8011e16:	b9e0      	cbnz	r0, 8011e52 <rcl_action_wait_set_add_action_server+0x8e>
 8011e18:	6821      	ldr	r1, [r4, #0]
 8011e1a:	4628      	mov	r0, r5
 8011e1c:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8011e20:	3104      	adds	r1, #4
 8011e22:	f7ff fa83 	bl	801132c <rcl_wait_set_add_service>
 8011e26:	b9a0      	cbnz	r0, 8011e52 <rcl_action_wait_set_add_action_server+0x8e>
 8011e28:	6821      	ldr	r1, [r4, #0]
 8011e2a:	4628      	mov	r0, r5
 8011e2c:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8011e30:	3108      	adds	r1, #8
 8011e32:	f7ff fa7b 	bl	801132c <rcl_wait_set_add_service>
 8011e36:	b960      	cbnz	r0, 8011e52 <rcl_action_wait_set_add_action_server+0x8e>
 8011e38:	6821      	ldr	r1, [r4, #0]
 8011e3a:	4628      	mov	r0, r5
 8011e3c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8011e40:	3114      	adds	r1, #20
 8011e42:	f7ff fa17 	bl	8011274 <rcl_wait_set_add_timer>
 8011e46:	b920      	cbnz	r0, 8011e52 <rcl_action_wait_set_add_action_server+0x8e>
 8011e48:	b11e      	cbz	r6, 8011e52 <rcl_action_wait_set_add_action_server+0x8e>
 8011e4a:	6823      	ldr	r3, [r4, #0]
 8011e4c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8011e50:	6033      	str	r3, [r6, #0]
 8011e52:	bd70      	pop	{r4, r5, r6, pc}
 8011e54:	f7f8 fc90 	bl	800a778 <rcutils_reset_error>
 8011e58:	f241 0068 	movw	r0, #4200	@ 0x1068
 8011e5c:	bd70      	pop	{r4, r5, r6, pc}
 8011e5e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011e62:	4770      	bx	lr

08011e64 <rcl_action_server_wait_set_get_entities_ready>:
 8011e64:	2800      	cmp	r0, #0
 8011e66:	d060      	beq.n	8011f2a <rcl_action_server_wait_set_get_entities_ready+0xc6>
 8011e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e6a:	460c      	mov	r4, r1
 8011e6c:	2900      	cmp	r1, #0
 8011e6e:	d057      	beq.n	8011f20 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 8011e70:	4605      	mov	r5, r0
 8011e72:	6808      	ldr	r0, [r1, #0]
 8011e74:	2800      	cmp	r0, #0
 8011e76:	d053      	beq.n	8011f20 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 8011e78:	4616      	mov	r6, r2
 8011e7a:	461f      	mov	r7, r3
 8011e7c:	f7fe f878 	bl	800ff70 <rcl_service_is_valid>
 8011e80:	2800      	cmp	r0, #0
 8011e82:	d04b      	beq.n	8011f1c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8011e84:	6820      	ldr	r0, [r4, #0]
 8011e86:	3004      	adds	r0, #4
 8011e88:	f7fe f872 	bl	800ff70 <rcl_service_is_valid>
 8011e8c:	2800      	cmp	r0, #0
 8011e8e:	d045      	beq.n	8011f1c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8011e90:	6820      	ldr	r0, [r4, #0]
 8011e92:	3008      	adds	r0, #8
 8011e94:	f7fe f86c 	bl	800ff70 <rcl_service_is_valid>
 8011e98:	2800      	cmp	r0, #0
 8011e9a:	d03f      	beq.n	8011f1c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8011e9c:	6820      	ldr	r0, [r4, #0]
 8011e9e:	300c      	adds	r0, #12
 8011ea0:	f7f7 fcea 	bl	8009878 <rcl_publisher_is_valid_except_context>
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	d039      	beq.n	8011f1c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8011ea8:	6820      	ldr	r0, [r4, #0]
 8011eaa:	3010      	adds	r0, #16
 8011eac:	f7f7 fce4 	bl	8009878 <rcl_publisher_is_valid_except_context>
 8011eb0:	b3a0      	cbz	r0, 8011f1c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8011eb2:	b3c6      	cbz	r6, 8011f26 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8011eb4:	b3bf      	cbz	r7, 8011f26 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8011eb6:	9b06      	ldr	r3, [sp, #24]
 8011eb8:	b3ab      	cbz	r3, 8011f26 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8011eba:	9b07      	ldr	r3, [sp, #28]
 8011ebc:	b39b      	cbz	r3, 8011f26 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8011ebe:	6823      	ldr	r3, [r4, #0]
 8011ec0:	692a      	ldr	r2, [r5, #16]
 8011ec2:	6a2c      	ldr	r4, [r5, #32]
 8011ec4:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
 8011ec8:	f8d3 51e8 	ldr.w	r5, [r3, #488]	@ 0x1e8
 8011ecc:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 8011ed0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8011ed4:	f8d3 11e4 	ldr.w	r1, [r3, #484]	@ 0x1e4
 8011ed8:	f8d3 51dc 	ldr.w	r5, [r3, #476]	@ 0x1dc
 8011edc:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8011ee0:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8011ee4:	1ae4      	subs	r4, r4, r3
 8011ee6:	fab4 f484 	clz	r4, r4
 8011eea:	0964      	lsrs	r4, r4, #5
 8011eec:	7034      	strb	r4, [r6, #0]
 8011eee:	1d1c      	adds	r4, r3, #4
 8011ef0:	1b00      	subs	r0, r0, r4
 8011ef2:	fab0 f080 	clz	r0, r0
 8011ef6:	0940      	lsrs	r0, r0, #5
 8011ef8:	7038      	strb	r0, [r7, #0]
 8011efa:	f103 0008 	add.w	r0, r3, #8
 8011efe:	1a09      	subs	r1, r1, r0
 8011f00:	3314      	adds	r3, #20
 8011f02:	1ad3      	subs	r3, r2, r3
 8011f04:	fab1 f181 	clz	r1, r1
 8011f08:	9a06      	ldr	r2, [sp, #24]
 8011f0a:	0949      	lsrs	r1, r1, #5
 8011f0c:	7011      	strb	r1, [r2, #0]
 8011f0e:	fab3 f383 	clz	r3, r3
 8011f12:	9a07      	ldr	r2, [sp, #28]
 8011f14:	095b      	lsrs	r3, r3, #5
 8011f16:	2000      	movs	r0, #0
 8011f18:	7013      	strb	r3, [r2, #0]
 8011f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f1c:	f7f8 fc2c 	bl	800a778 <rcutils_reset_error>
 8011f20:	f241 0068 	movw	r0, #4200	@ 0x1068
 8011f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f26:	200b      	movs	r0, #11
 8011f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f2a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011f2e:	4770      	bx	lr

08011f30 <_execute_event_handler>:
 8011f30:	2002      	movs	r0, #2
 8011f32:	4770      	bx	lr

08011f34 <_cancel_goal_event_handler>:
 8011f34:	2003      	movs	r0, #3
 8011f36:	4770      	bx	lr

08011f38 <_succeed_event_handler>:
 8011f38:	2004      	movs	r0, #4
 8011f3a:	4770      	bx	lr

08011f3c <_abort_event_handler>:
 8011f3c:	2006      	movs	r0, #6
 8011f3e:	4770      	bx	lr

08011f40 <_canceled_event_handler>:
 8011f40:	2005      	movs	r0, #5
 8011f42:	4770      	bx	lr

08011f44 <rcl_action_transition_goal_state>:
 8011f44:	fa5f fc80 	uxtb.w	ip, r0
 8011f48:	f1bc 0f06 	cmp.w	ip, #6
 8011f4c:	d80c      	bhi.n	8011f68 <rcl_action_transition_goal_state+0x24>
 8011f4e:	2904      	cmp	r1, #4
 8011f50:	d80a      	bhi.n	8011f68 <rcl_action_transition_goal_state+0x24>
 8011f52:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8011f56:	b410      	push	{r4}
 8011f58:	440b      	add	r3, r1
 8011f5a:	4c06      	ldr	r4, [pc, #24]	@ (8011f74 <rcl_action_transition_goal_state+0x30>)
 8011f5c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011f60:	b123      	cbz	r3, 8011f6c <rcl_action_transition_goal_state+0x28>
 8011f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f66:	4718      	bx	r3
 8011f68:	2000      	movs	r0, #0
 8011f6a:	4770      	bx	lr
 8011f6c:	2000      	movs	r0, #0
 8011f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f72:	4770      	bx	lr
 8011f74:	08019d18 	.word	0x08019d18

08011f78 <rcl_action_get_zero_initialized_cancel_response>:
 8011f78:	b510      	push	{r4, lr}
 8011f7a:	4c07      	ldr	r4, [pc, #28]	@ (8011f98 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8011f7c:	4686      	mov	lr, r0
 8011f7e:	4684      	mov	ip, r0
 8011f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011f82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011f88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f8c:	6823      	ldr	r3, [r4, #0]
 8011f8e:	f8cc 3000 	str.w	r3, [ip]
 8011f92:	4670      	mov	r0, lr
 8011f94:	bd10      	pop	{r4, pc}
 8011f96:	bf00      	nop
 8011f98:	08019da4 	.word	0x08019da4

08011f9c <rclc_action_send_result_request>:
 8011f9c:	b1d0      	cbz	r0, 8011fd4 <rclc_action_send_result_request+0x38>
 8011f9e:	b500      	push	{lr}
 8011fa0:	4684      	mov	ip, r0
 8011fa2:	b087      	sub	sp, #28
 8011fa4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8011fa8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8011fac:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8011fb0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8011fb4:	f10d 0e08 	add.w	lr, sp, #8
 8011fb8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011fbc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011fc0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8011fc4:	a902      	add	r1, sp, #8
 8011fc6:	3010      	adds	r0, #16
 8011fc8:	f7ff fbfa 	bl	80117c0 <rcl_action_send_result_request>
 8011fcc:	b920      	cbnz	r0, 8011fd8 <rclc_action_send_result_request+0x3c>
 8011fce:	b007      	add	sp, #28
 8011fd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8011fd4:	200b      	movs	r0, #11
 8011fd6:	4770      	bx	lr
 8011fd8:	9001      	str	r0, [sp, #4]
 8011fda:	f7f8 fbcd 	bl	800a778 <rcutils_reset_error>
 8011fde:	9801      	ldr	r0, [sp, #4]
 8011fe0:	b007      	add	sp, #28
 8011fe2:	f85d fb04 	ldr.w	pc, [sp], #4
 8011fe6:	bf00      	nop

08011fe8 <rclc_action_take_goal_handle>:
 8011fe8:	4603      	mov	r3, r0
 8011fea:	b158      	cbz	r0, 8012004 <rclc_action_take_goal_handle+0x1c>
 8011fec:	6880      	ldr	r0, [r0, #8]
 8011fee:	b148      	cbz	r0, 8012004 <rclc_action_take_goal_handle+0x1c>
 8011ff0:	6801      	ldr	r1, [r0, #0]
 8011ff2:	6099      	str	r1, [r3, #8]
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	7202      	strb	r2, [r0, #8]
 8011ff8:	68d9      	ldr	r1, [r3, #12]
 8011ffa:	6001      	str	r1, [r0, #0]
 8011ffc:	6202      	str	r2, [r0, #32]
 8011ffe:	8482      	strh	r2, [r0, #36]	@ 0x24
 8012000:	60d8      	str	r0, [r3, #12]
 8012002:	4770      	bx	lr
 8012004:	4770      	bx	lr
 8012006:	bf00      	nop

08012008 <rclc_action_remove_used_goal_handle>:
 8012008:	b180      	cbz	r0, 801202c <rclc_action_remove_used_goal_handle+0x24>
 801200a:	b179      	cbz	r1, 801202c <rclc_action_remove_used_goal_handle+0x24>
 801200c:	68c3      	ldr	r3, [r0, #12]
 801200e:	4299      	cmp	r1, r3
 8012010:	d00d      	beq.n	801202e <rclc_action_remove_used_goal_handle+0x26>
 8012012:	b12b      	cbz	r3, 8012020 <rclc_action_remove_used_goal_handle+0x18>
 8012014:	681a      	ldr	r2, [r3, #0]
 8012016:	4291      	cmp	r1, r2
 8012018:	d003      	beq.n	8012022 <rclc_action_remove_used_goal_handle+0x1a>
 801201a:	4613      	mov	r3, r2
 801201c:	2b00      	cmp	r3, #0
 801201e:	d1f9      	bne.n	8012014 <rclc_action_remove_used_goal_handle+0xc>
 8012020:	4770      	bx	lr
 8012022:	680a      	ldr	r2, [r1, #0]
 8012024:	601a      	str	r2, [r3, #0]
 8012026:	6883      	ldr	r3, [r0, #8]
 8012028:	600b      	str	r3, [r1, #0]
 801202a:	6081      	str	r1, [r0, #8]
 801202c:	4770      	bx	lr
 801202e:	680b      	ldr	r3, [r1, #0]
 8012030:	60c3      	str	r3, [r0, #12]
 8012032:	e7f8      	b.n	8012026 <rclc_action_remove_used_goal_handle+0x1e>

08012034 <rclc_action_find_goal_handle_by_uuid>:
 8012034:	b538      	push	{r3, r4, r5, lr}
 8012036:	b180      	cbz	r0, 801205a <rclc_action_find_goal_handle_by_uuid+0x26>
 8012038:	460d      	mov	r5, r1
 801203a:	b181      	cbz	r1, 801205e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801203c:	68c4      	ldr	r4, [r0, #12]
 801203e:	b914      	cbnz	r4, 8012046 <rclc_action_find_goal_handle_by_uuid+0x12>
 8012040:	e009      	b.n	8012056 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012042:	6824      	ldr	r4, [r4, #0]
 8012044:	b13c      	cbz	r4, 8012056 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012046:	2210      	movs	r2, #16
 8012048:	4629      	mov	r1, r5
 801204a:	f104 0009 	add.w	r0, r4, #9
 801204e:	f005 fec1 	bl	8017dd4 <memcmp>
 8012052:	2800      	cmp	r0, #0
 8012054:	d1f5      	bne.n	8012042 <rclc_action_find_goal_handle_by_uuid+0xe>
 8012056:	4620      	mov	r0, r4
 8012058:	bd38      	pop	{r3, r4, r5, pc}
 801205a:	4604      	mov	r4, r0
 801205c:	e7fb      	b.n	8012056 <rclc_action_find_goal_handle_by_uuid+0x22>
 801205e:	460c      	mov	r4, r1
 8012060:	e7f9      	b.n	8012056 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012062:	bf00      	nop

08012064 <rclc_action_find_first_handle_by_status>:
 8012064:	b140      	cbz	r0, 8012078 <rclc_action_find_first_handle_by_status+0x14>
 8012066:	68c0      	ldr	r0, [r0, #12]
 8012068:	b910      	cbnz	r0, 8012070 <rclc_action_find_first_handle_by_status+0xc>
 801206a:	e005      	b.n	8012078 <rclc_action_find_first_handle_by_status+0x14>
 801206c:	6800      	ldr	r0, [r0, #0]
 801206e:	b118      	cbz	r0, 8012078 <rclc_action_find_first_handle_by_status+0x14>
 8012070:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012074:	428b      	cmp	r3, r1
 8012076:	d1f9      	bne.n	801206c <rclc_action_find_first_handle_by_status+0x8>
 8012078:	4770      	bx	lr
 801207a:	bf00      	nop

0801207c <rclc_action_find_first_terminated_handle>:
 801207c:	b140      	cbz	r0, 8012090 <rclc_action_find_first_terminated_handle+0x14>
 801207e:	68c0      	ldr	r0, [r0, #12]
 8012080:	b910      	cbnz	r0, 8012088 <rclc_action_find_first_terminated_handle+0xc>
 8012082:	e005      	b.n	8012090 <rclc_action_find_first_terminated_handle+0x14>
 8012084:	6800      	ldr	r0, [r0, #0]
 8012086:	b118      	cbz	r0, 8012090 <rclc_action_find_first_terminated_handle+0x14>
 8012088:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801208c:	2b03      	cmp	r3, #3
 801208e:	ddf9      	ble.n	8012084 <rclc_action_find_first_terminated_handle+0x8>
 8012090:	4770      	bx	lr
 8012092:	bf00      	nop

08012094 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8012094:	b170      	cbz	r0, 80120b4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012096:	68c0      	ldr	r0, [r0, #12]
 8012098:	b160      	cbz	r0, 80120b4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801209a:	b410      	push	{r4}
 801209c:	e001      	b.n	80120a2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801209e:	6800      	ldr	r0, [r0, #0]
 80120a0:	b128      	cbz	r0, 80120ae <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80120a2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80120a6:	4299      	cmp	r1, r3
 80120a8:	bf08      	it	eq
 80120aa:	4294      	cmpeq	r4, r2
 80120ac:	d1f7      	bne.n	801209e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80120ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120b2:	4770      	bx	lr
 80120b4:	4770      	bx	lr
 80120b6:	bf00      	nop

080120b8 <rclc_action_find_handle_by_result_request_sequence_number>:
 80120b8:	b170      	cbz	r0, 80120d8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80120ba:	68c0      	ldr	r0, [r0, #12]
 80120bc:	b160      	cbz	r0, 80120d8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80120be:	b410      	push	{r4}
 80120c0:	e001      	b.n	80120c6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80120c2:	6800      	ldr	r0, [r0, #0]
 80120c4:	b128      	cbz	r0, 80120d2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80120c6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80120ca:	4299      	cmp	r1, r3
 80120cc:	bf08      	it	eq
 80120ce:	4294      	cmpeq	r4, r2
 80120d0:	d1f7      	bne.n	80120c2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80120d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120d6:	4770      	bx	lr
 80120d8:	4770      	bx	lr
 80120da:	bf00      	nop

080120dc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80120dc:	b170      	cbz	r0, 80120fc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80120de:	68c0      	ldr	r0, [r0, #12]
 80120e0:	b160      	cbz	r0, 80120fc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80120e2:	b410      	push	{r4}
 80120e4:	e001      	b.n	80120ea <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80120e6:	6800      	ldr	r0, [r0, #0]
 80120e8:	b128      	cbz	r0, 80120f6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80120ea:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80120ee:	4299      	cmp	r1, r3
 80120f0:	bf08      	it	eq
 80120f2:	4294      	cmpeq	r4, r2
 80120f4:	d1f7      	bne.n	80120e6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80120f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120fa:	4770      	bx	lr
 80120fc:	4770      	bx	lr
 80120fe:	bf00      	nop

08012100 <rclc_action_find_first_handle_with_goal_response>:
 8012100:	b140      	cbz	r0, 8012114 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012102:	68c0      	ldr	r0, [r0, #12]
 8012104:	b910      	cbnz	r0, 801210c <rclc_action_find_first_handle_with_goal_response+0xc>
 8012106:	e005      	b.n	8012114 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012108:	6800      	ldr	r0, [r0, #0]
 801210a:	b118      	cbz	r0, 8012114 <rclc_action_find_first_handle_with_goal_response+0x14>
 801210c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d0f9      	beq.n	8012108 <rclc_action_find_first_handle_with_goal_response+0x8>
 8012114:	4770      	bx	lr
 8012116:	bf00      	nop

08012118 <rclc_action_find_first_handle_with_result_response>:
 8012118:	b140      	cbz	r0, 801212c <rclc_action_find_first_handle_with_result_response+0x14>
 801211a:	68c0      	ldr	r0, [r0, #12]
 801211c:	b910      	cbnz	r0, 8012124 <rclc_action_find_first_handle_with_result_response+0xc>
 801211e:	e005      	b.n	801212c <rclc_action_find_first_handle_with_result_response+0x14>
 8012120:	6800      	ldr	r0, [r0, #0]
 8012122:	b118      	cbz	r0, 801212c <rclc_action_find_first_handle_with_result_response+0x14>
 8012124:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8012128:	2b00      	cmp	r3, #0
 801212a:	d0f9      	beq.n	8012120 <rclc_action_find_first_handle_with_result_response+0x8>
 801212c:	4770      	bx	lr
 801212e:	bf00      	nop

08012130 <rclc_action_server_response_goal_request>:
 8012130:	b198      	cbz	r0, 801215a <rclc_action_server_response_goal_request+0x2a>
 8012132:	b510      	push	{r4, lr}
 8012134:	6844      	ldr	r4, [r0, #4]
 8012136:	b086      	sub	sp, #24
 8012138:	2200      	movs	r2, #0
 801213a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801213e:	460b      	mov	r3, r1
 8012140:	9205      	str	r2, [sp, #20]
 8012142:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8012146:	aa03      	add	r2, sp, #12
 8012148:	f104 0010 	add.w	r0, r4, #16
 801214c:	f88d 300c 	strb.w	r3, [sp, #12]
 8012150:	f7ff fd52 	bl	8011bf8 <rcl_action_send_goal_response>
 8012154:	b918      	cbnz	r0, 801215e <rclc_action_server_response_goal_request+0x2e>
 8012156:	b006      	add	sp, #24
 8012158:	bd10      	pop	{r4, pc}
 801215a:	200b      	movs	r0, #11
 801215c:	4770      	bx	lr
 801215e:	9001      	str	r0, [sp, #4]
 8012160:	f7f8 fb0a 	bl	800a778 <rcutils_reset_error>
 8012164:	9801      	ldr	r0, [sp, #4]
 8012166:	b006      	add	sp, #24
 8012168:	bd10      	pop	{r4, pc}
 801216a:	bf00      	nop
 801216c:	0000      	movs	r0, r0
	...

08012170 <rclc_action_server_goal_cancel_accept>:
 8012170:	b310      	cbz	r0, 80121b8 <rclc_action_server_goal_cancel_accept+0x48>
 8012172:	b510      	push	{r4, lr}
 8012174:	b090      	sub	sp, #64	@ 0x40
 8012176:	4604      	mov	r4, r0
 8012178:	a806      	add	r0, sp, #24
 801217a:	f7ff fefd 	bl	8011f78 <rcl_action_get_zero_initialized_cancel_response>
 801217e:	2300      	movs	r3, #0
 8012180:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8012184:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8012188:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801218c:	f88d 3018 	strb.w	r3, [sp, #24]
 8012190:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8012194:	f8cd d01c 	str.w	sp, [sp, #28]
 8012198:	46ec      	mov	ip, sp
 801219a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801219e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80121c0 <rclc_action_server_goal_cancel_accept+0x50>
 80121a2:	6860      	ldr	r0, [r4, #4]
 80121a4:	aa06      	add	r2, sp, #24
 80121a6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80121aa:	3010      	adds	r0, #16
 80121ac:	ed8d 7b08 	vstr	d7, [sp, #32]
 80121b0:	f7ff fdd2 	bl	8011d58 <rcl_action_send_cancel_response>
 80121b4:	b010      	add	sp, #64	@ 0x40
 80121b6:	bd10      	pop	{r4, pc}
 80121b8:	200b      	movs	r0, #11
 80121ba:	4770      	bx	lr
 80121bc:	f3af 8000 	nop.w
 80121c0:	00000001 	.word	0x00000001
 80121c4:	00000001 	.word	0x00000001

080121c8 <rclc_action_server_goal_cancel_reject>:
 80121c8:	b082      	sub	sp, #8
 80121ca:	b530      	push	{r4, r5, lr}
 80121cc:	b08b      	sub	sp, #44	@ 0x2c
 80121ce:	ac0e      	add	r4, sp, #56	@ 0x38
 80121d0:	e884 000c 	stmia.w	r4, {r2, r3}
 80121d4:	b188      	cbz	r0, 80121fa <rclc_action_server_goal_cancel_reject+0x32>
 80121d6:	4604      	mov	r4, r0
 80121d8:	a801      	add	r0, sp, #4
 80121da:	460d      	mov	r5, r1
 80121dc:	f7ff fecc 	bl	8011f78 <rcl_action_get_zero_initialized_cancel_response>
 80121e0:	aa01      	add	r2, sp, #4
 80121e2:	a90e      	add	r1, sp, #56	@ 0x38
 80121e4:	f104 0010 	add.w	r0, r4, #16
 80121e8:	f88d 5004 	strb.w	r5, [sp, #4]
 80121ec:	f7ff fdb4 	bl	8011d58 <rcl_action_send_cancel_response>
 80121f0:	b00b      	add	sp, #44	@ 0x2c
 80121f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121f6:	b002      	add	sp, #8
 80121f8:	4770      	bx	lr
 80121fa:	200b      	movs	r0, #11
 80121fc:	b00b      	add	sp, #44	@ 0x2c
 80121fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012202:	b002      	add	sp, #8
 8012204:	4770      	bx	lr
 8012206:	bf00      	nop

08012208 <__atomic_load_8>:
 8012208:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801220c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012210:	4a15      	ldr	r2, [pc, #84]	@ (8012268 <__atomic_load_8+0x60>)
 8012212:	4b16      	ldr	r3, [pc, #88]	@ (801226c <__atomic_load_8+0x64>)
 8012214:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012218:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801221c:	fb02 f101 	mul.w	r1, r2, r1
 8012220:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012224:	fba3 2301 	umull	r2, r3, r3, r1
 8012228:	091b      	lsrs	r3, r3, #4
 801222a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801222e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8012232:	b4f0      	push	{r4, r5, r6, r7}
 8012234:	4d0e      	ldr	r5, [pc, #56]	@ (8012270 <__atomic_load_8+0x68>)
 8012236:	1ac9      	subs	r1, r1, r3
 8012238:	194a      	adds	r2, r1, r5
 801223a:	f04f 0c01 	mov.w	ip, #1
 801223e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8012242:	e8c2 cf44 	strexb	r4, ip, [r2]
 8012246:	2c00      	cmp	r4, #0
 8012248:	d1f9      	bne.n	801223e <__atomic_load_8+0x36>
 801224a:	f3bf 8f5b 	dmb	ish
 801224e:	b2dc      	uxtb	r4, r3
 8012250:	2c00      	cmp	r4, #0
 8012252:	d1f4      	bne.n	801223e <__atomic_load_8+0x36>
 8012254:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012258:	f3bf 8f5b 	dmb	ish
 801225c:	546b      	strb	r3, [r5, r1]
 801225e:	4630      	mov	r0, r6
 8012260:	4639      	mov	r1, r7
 8012262:	bcf0      	pop	{r4, r5, r6, r7}
 8012264:	4770      	bx	lr
 8012266:	bf00      	nop
 8012268:	27d4eb2d 	.word	0x27d4eb2d
 801226c:	b21642c9 	.word	0xb21642c9
 8012270:	20010ca4 	.word	0x20010ca4

08012274 <__atomic_store_8>:
 8012274:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012278:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801227c:	b570      	push	{r4, r5, r6, lr}
 801227e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012282:	4c14      	ldr	r4, [pc, #80]	@ (80122d4 <__atomic_store_8+0x60>)
 8012284:	4e14      	ldr	r6, [pc, #80]	@ (80122d8 <__atomic_store_8+0x64>)
 8012286:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801228a:	fb04 f101 	mul.w	r1, r4, r1
 801228e:	4c13      	ldr	r4, [pc, #76]	@ (80122dc <__atomic_store_8+0x68>)
 8012290:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012294:	fba4 5401 	umull	r5, r4, r4, r1
 8012298:	0924      	lsrs	r4, r4, #4
 801229a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801229e:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 80122a2:	eba1 0e04 	sub.w	lr, r1, r4
 80122a6:	f04f 0501 	mov.w	r5, #1
 80122aa:	eb0e 0c06 	add.w	ip, lr, r6
 80122ae:	e8dc 1f4f 	ldrexb	r1, [ip]
 80122b2:	e8cc 5f44 	strexb	r4, r5, [ip]
 80122b6:	2c00      	cmp	r4, #0
 80122b8:	d1f9      	bne.n	80122ae <__atomic_store_8+0x3a>
 80122ba:	f3bf 8f5b 	dmb	ish
 80122be:	b2cc      	uxtb	r4, r1
 80122c0:	2c00      	cmp	r4, #0
 80122c2:	d1f4      	bne.n	80122ae <__atomic_store_8+0x3a>
 80122c4:	e9c0 2300 	strd	r2, r3, [r0]
 80122c8:	f3bf 8f5b 	dmb	ish
 80122cc:	f806 100e 	strb.w	r1, [r6, lr]
 80122d0:	bd70      	pop	{r4, r5, r6, pc}
 80122d2:	bf00      	nop
 80122d4:	27d4eb2d 	.word	0x27d4eb2d
 80122d8:	20010ca4 	.word	0x20010ca4
 80122dc:	b21642c9 	.word	0xb21642c9

080122e0 <__atomic_exchange_8>:
 80122e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122e2:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 80122e6:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 80122ea:	4917      	ldr	r1, [pc, #92]	@ (8012348 <__atomic_exchange_8+0x68>)
 80122ec:	4f17      	ldr	r7, [pc, #92]	@ (801234c <__atomic_exchange_8+0x6c>)
 80122ee:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80122f2:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 80122f6:	fb01 fe0e 	mul.w	lr, r1, lr
 80122fa:	4915      	ldr	r1, [pc, #84]	@ (8012350 <__atomic_exchange_8+0x70>)
 80122fc:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8012300:	4606      	mov	r6, r0
 8012302:	fba1 010e 	umull	r0, r1, r1, lr
 8012306:	0909      	lsrs	r1, r1, #4
 8012308:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801230c:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8012310:	ebae 0e01 	sub.w	lr, lr, r1
 8012314:	f04f 0501 	mov.w	r5, #1
 8012318:	eb0e 0107 	add.w	r1, lr, r7
 801231c:	e8d1 cf4f 	ldrexb	ip, [r1]
 8012320:	e8c1 5f40 	strexb	r0, r5, [r1]
 8012324:	2800      	cmp	r0, #0
 8012326:	d1f9      	bne.n	801231c <__atomic_exchange_8+0x3c>
 8012328:	f3bf 8f5b 	dmb	ish
 801232c:	fa5f f48c 	uxtb.w	r4, ip
 8012330:	2c00      	cmp	r4, #0
 8012332:	d1f3      	bne.n	801231c <__atomic_exchange_8+0x3c>
 8012334:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012338:	e9c6 2300 	strd	r2, r3, [r6]
 801233c:	f3bf 8f5b 	dmb	ish
 8012340:	f807 c00e 	strb.w	ip, [r7, lr]
 8012344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012346:	bf00      	nop
 8012348:	27d4eb2d 	.word	0x27d4eb2d
 801234c:	20010ca4 	.word	0x20010ca4
 8012350:	b21642c9 	.word	0xb21642c9

08012354 <rcutils_get_env>:
 8012354:	b150      	cbz	r0, 801236c <rcutils_get_env+0x18>
 8012356:	b510      	push	{r4, lr}
 8012358:	460c      	mov	r4, r1
 801235a:	b909      	cbnz	r1, 8012360 <rcutils_get_env+0xc>
 801235c:	4806      	ldr	r0, [pc, #24]	@ (8012378 <rcutils_get_env+0x24>)
 801235e:	bd10      	pop	{r4, pc}
 8012360:	f005 f842 	bl	80173e8 <getenv>
 8012364:	b120      	cbz	r0, 8012370 <rcutils_get_env+0x1c>
 8012366:	6020      	str	r0, [r4, #0]
 8012368:	2000      	movs	r0, #0
 801236a:	bd10      	pop	{r4, pc}
 801236c:	4803      	ldr	r0, [pc, #12]	@ (801237c <rcutils_get_env+0x28>)
 801236e:	4770      	bx	lr
 8012370:	4b03      	ldr	r3, [pc, #12]	@ (8012380 <rcutils_get_env+0x2c>)
 8012372:	6023      	str	r3, [r4, #0]
 8012374:	e7f8      	b.n	8012368 <rcutils_get_env+0x14>
 8012376:	bf00      	nop
 8012378:	08019298 	.word	0x08019298
 801237c:	0801927c 	.word	0x0801927c
 8012380:	080195fc 	.word	0x080195fc

08012384 <rcutils_format_string_limit>:
 8012384:	b40f      	push	{r0, r1, r2, r3}
 8012386:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012388:	b083      	sub	sp, #12
 801238a:	ac08      	add	r4, sp, #32
 801238c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801238e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012392:	b376      	cbz	r6, 80123f2 <rcutils_format_string_limit+0x6e>
 8012394:	4620      	mov	r0, r4
 8012396:	f7f8 f9c3 	bl	800a720 <rcutils_allocator_is_valid>
 801239a:	b350      	cbz	r0, 80123f2 <rcutils_format_string_limit+0x6e>
 801239c:	2100      	movs	r1, #0
 801239e:	ab0f      	add	r3, sp, #60	@ 0x3c
 80123a0:	4632      	mov	r2, r6
 80123a2:	4608      	mov	r0, r1
 80123a4:	e9cd 3300 	strd	r3, r3, [sp]
 80123a8:	f000 f8f8 	bl	801259c <rcutils_vsnprintf>
 80123ac:	1c43      	adds	r3, r0, #1
 80123ae:	4605      	mov	r5, r0
 80123b0:	d01f      	beq.n	80123f2 <rcutils_format_string_limit+0x6e>
 80123b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80123b4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80123b6:	1c47      	adds	r7, r0, #1
 80123b8:	429f      	cmp	r7, r3
 80123ba:	bf84      	itt	hi
 80123bc:	461f      	movhi	r7, r3
 80123be:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 80123c2:	4638      	mov	r0, r7
 80123c4:	9b08      	ldr	r3, [sp, #32]
 80123c6:	4798      	blx	r3
 80123c8:	4604      	mov	r4, r0
 80123ca:	b190      	cbz	r0, 80123f2 <rcutils_format_string_limit+0x6e>
 80123cc:	9b01      	ldr	r3, [sp, #4]
 80123ce:	4632      	mov	r2, r6
 80123d0:	4639      	mov	r1, r7
 80123d2:	f000 f8e3 	bl	801259c <rcutils_vsnprintf>
 80123d6:	2800      	cmp	r0, #0
 80123d8:	db07      	blt.n	80123ea <rcutils_format_string_limit+0x66>
 80123da:	2300      	movs	r3, #0
 80123dc:	5563      	strb	r3, [r4, r5]
 80123de:	4620      	mov	r0, r4
 80123e0:	b003      	add	sp, #12
 80123e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80123e6:	b004      	add	sp, #16
 80123e8:	4770      	bx	lr
 80123ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123ec:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80123ee:	4620      	mov	r0, r4
 80123f0:	4798      	blx	r3
 80123f2:	2400      	movs	r4, #0
 80123f4:	e7f3      	b.n	80123de <rcutils_format_string_limit+0x5a>
 80123f6:	bf00      	nop

080123f8 <rcutils_repl_str>:
 80123f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123fc:	4699      	mov	r9, r3
 80123fe:	b089      	sub	sp, #36	@ 0x24
 8012400:	4603      	mov	r3, r0
 8012402:	4648      	mov	r0, r9
 8012404:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8012408:	4698      	mov	r8, r3
 801240a:	9300      	str	r3, [sp, #0]
 801240c:	460c      	mov	r4, r1
 801240e:	f7f8 f987 	bl	800a720 <rcutils_allocator_is_valid>
 8012412:	2800      	cmp	r0, #0
 8012414:	f000 80a3 	beq.w	801255e <rcutils_repl_str+0x166>
 8012418:	4620      	mov	r0, r4
 801241a:	f7ed ff41 	bl	80002a0 <strlen>
 801241e:	f04f 0a00 	mov.w	sl, #0
 8012422:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8012426:	9001      	str	r0, [sp, #4]
 8012428:	4657      	mov	r7, sl
 801242a:	4655      	mov	r5, sl
 801242c:	2610      	movs	r6, #16
 801242e:	e01e      	b.n	801246e <rcutils_repl_str+0x76>
 8012430:	3501      	adds	r5, #1
 8012432:	45aa      	cmp	sl, r5
 8012434:	d212      	bcs.n	801245c <rcutils_repl_str+0x64>
 8012436:	44b2      	add	sl, r6
 8012438:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801243c:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8012440:	4798      	blx	r3
 8012442:	2800      	cmp	r0, #0
 8012444:	f000 8088 	beq.w	8012558 <rcutils_repl_str+0x160>
 8012448:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801244c:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 8012450:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8012454:	4607      	mov	r7, r0
 8012456:	bf28      	it	cs
 8012458:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 801245c:	9a00      	ldr	r2, [sp, #0]
 801245e:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8012462:	1aa2      	subs	r2, r4, r2
 8012464:	f843 2c04 	str.w	r2, [r3, #-4]
 8012468:	9b01      	ldr	r3, [sp, #4]
 801246a:	eb04 0803 	add.w	r8, r4, r3
 801246e:	9902      	ldr	r1, [sp, #8]
 8012470:	4640      	mov	r0, r8
 8012472:	f005 fd13 	bl	8017e9c <strstr>
 8012476:	4604      	mov	r4, r0
 8012478:	465a      	mov	r2, fp
 801247a:	4638      	mov	r0, r7
 801247c:	2c00      	cmp	r4, #0
 801247e:	d1d7      	bne.n	8012430 <rcutils_repl_str+0x38>
 8012480:	4640      	mov	r0, r8
 8012482:	f7ed ff0d 	bl	80002a0 <strlen>
 8012486:	9b00      	ldr	r3, [sp, #0]
 8012488:	eba8 0803 	sub.w	r8, r8, r3
 801248c:	eb08 0300 	add.w	r3, r8, r0
 8012490:	9304      	str	r3, [sp, #16]
 8012492:	f8d9 8000 	ldr.w	r8, [r9]
 8012496:	2d00      	cmp	r5, #0
 8012498:	d03f      	beq.n	801251a <rcutils_repl_str+0x122>
 801249a:	9803      	ldr	r0, [sp, #12]
 801249c:	f7ed ff00 	bl	80002a0 <strlen>
 80124a0:	4606      	mov	r6, r0
 80124a2:	9801      	ldr	r0, [sp, #4]
 80124a4:	9a04      	ldr	r2, [sp, #16]
 80124a6:	1a33      	subs	r3, r6, r0
 80124a8:	fb05 2a03 	mla	sl, r5, r3, r2
 80124ac:	4659      	mov	r1, fp
 80124ae:	f10a 0001 	add.w	r0, sl, #1
 80124b2:	47c0      	blx	r8
 80124b4:	4683      	mov	fp, r0
 80124b6:	2800      	cmp	r0, #0
 80124b8:	d04e      	beq.n	8012558 <rcutils_repl_str+0x160>
 80124ba:	683a      	ldr	r2, [r7, #0]
 80124bc:	9900      	ldr	r1, [sp, #0]
 80124be:	f005 fd8e 	bl	8017fde <memcpy>
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	9706      	str	r7, [sp, #24]
 80124c6:	1e6a      	subs	r2, r5, #1
 80124c8:	445b      	add	r3, fp
 80124ca:	46a8      	mov	r8, r5
 80124cc:	9202      	str	r2, [sp, #8]
 80124ce:	4625      	mov	r5, r4
 80124d0:	f8cd 901c 	str.w	r9, [sp, #28]
 80124d4:	461c      	mov	r4, r3
 80124d6:	9903      	ldr	r1, [sp, #12]
 80124d8:	4632      	mov	r2, r6
 80124da:	4620      	mov	r0, r4
 80124dc:	f005 fd7f 	bl	8017fde <memcpy>
 80124e0:	9b01      	ldr	r3, [sp, #4]
 80124e2:	f857 2b04 	ldr.w	r2, [r7], #4
 80124e6:	eb02 0c03 	add.w	ip, r2, r3
 80124ea:	9b00      	ldr	r3, [sp, #0]
 80124ec:	eb03 010c 	add.w	r1, r3, ip
 80124f0:	9b02      	ldr	r3, [sp, #8]
 80124f2:	4434      	add	r4, r6
 80124f4:	429d      	cmp	r5, r3
 80124f6:	4620      	mov	r0, r4
 80124f8:	d022      	beq.n	8012540 <rcutils_repl_str+0x148>
 80124fa:	683a      	ldr	r2, [r7, #0]
 80124fc:	eba2 090c 	sub.w	r9, r2, ip
 8012500:	464a      	mov	r2, r9
 8012502:	3501      	adds	r5, #1
 8012504:	f005 fd6b 	bl	8017fde <memcpy>
 8012508:	45a8      	cmp	r8, r5
 801250a:	444c      	add	r4, r9
 801250c:	d1e3      	bne.n	80124d6 <rcutils_repl_str+0xde>
 801250e:	2300      	movs	r3, #0
 8012510:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 8012514:	f80b 300a 	strb.w	r3, [fp, sl]
 8012518:	e008      	b.n	801252c <rcutils_repl_str+0x134>
 801251a:	4618      	mov	r0, r3
 801251c:	4659      	mov	r1, fp
 801251e:	3001      	adds	r0, #1
 8012520:	47c0      	blx	r8
 8012522:	4683      	mov	fp, r0
 8012524:	b110      	cbz	r0, 801252c <rcutils_repl_str+0x134>
 8012526:	9900      	ldr	r1, [sp, #0]
 8012528:	f005 fd51 	bl	8017fce <strcpy>
 801252c:	4638      	mov	r0, r7
 801252e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012532:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012536:	4798      	blx	r3
 8012538:	4658      	mov	r0, fp
 801253a:	b009      	add	sp, #36	@ 0x24
 801253c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012540:	9b04      	ldr	r3, [sp, #16]
 8012542:	eba3 020c 	sub.w	r2, r3, ip
 8012546:	9205      	str	r2, [sp, #20]
 8012548:	3501      	adds	r5, #1
 801254a:	f005 fd48 	bl	8017fde <memcpy>
 801254e:	9a05      	ldr	r2, [sp, #20]
 8012550:	45a8      	cmp	r8, r5
 8012552:	4414      	add	r4, r2
 8012554:	d1bf      	bne.n	80124d6 <rcutils_repl_str+0xde>
 8012556:	e7da      	b.n	801250e <rcutils_repl_str+0x116>
 8012558:	f04f 0b00 	mov.w	fp, #0
 801255c:	e7e6      	b.n	801252c <rcutils_repl_str+0x134>
 801255e:	4683      	mov	fp, r0
 8012560:	4658      	mov	r0, fp
 8012562:	b009      	add	sp, #36	@ 0x24
 8012564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012568 <rcutils_snprintf>:
 8012568:	b40c      	push	{r2, r3}
 801256a:	b530      	push	{r4, r5, lr}
 801256c:	b083      	sub	sp, #12
 801256e:	ab06      	add	r3, sp, #24
 8012570:	f853 2b04 	ldr.w	r2, [r3], #4
 8012574:	9301      	str	r3, [sp, #4]
 8012576:	b152      	cbz	r2, 801258e <rcutils_snprintf+0x26>
 8012578:	b138      	cbz	r0, 801258a <rcutils_snprintf+0x22>
 801257a:	b141      	cbz	r1, 801258e <rcutils_snprintf+0x26>
 801257c:	f005 fb88 	bl	8017c90 <vsniprintf>
 8012580:	b003      	add	sp, #12
 8012582:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012586:	b002      	add	sp, #8
 8012588:	4770      	bx	lr
 801258a:	2900      	cmp	r1, #0
 801258c:	d0f6      	beq.n	801257c <rcutils_snprintf+0x14>
 801258e:	f005 fcf1 	bl	8017f74 <__errno>
 8012592:	2316      	movs	r3, #22
 8012594:	6003      	str	r3, [r0, #0]
 8012596:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801259a:	e7f1      	b.n	8012580 <rcutils_snprintf+0x18>

0801259c <rcutils_vsnprintf>:
 801259c:	b570      	push	{r4, r5, r6, lr}
 801259e:	b13a      	cbz	r2, 80125b0 <rcutils_vsnprintf+0x14>
 80125a0:	b120      	cbz	r0, 80125ac <rcutils_vsnprintf+0x10>
 80125a2:	b129      	cbz	r1, 80125b0 <rcutils_vsnprintf+0x14>
 80125a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125a8:	f005 bb72 	b.w	8017c90 <vsniprintf>
 80125ac:	2900      	cmp	r1, #0
 80125ae:	d0f9      	beq.n	80125a4 <rcutils_vsnprintf+0x8>
 80125b0:	f005 fce0 	bl	8017f74 <__errno>
 80125b4:	2316      	movs	r3, #22
 80125b6:	6003      	str	r3, [r0, #0]
 80125b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80125bc:	bd70      	pop	{r4, r5, r6, pc}
 80125be:	bf00      	nop

080125c0 <rcutils_strdup>:
 80125c0:	b084      	sub	sp, #16
 80125c2:	b570      	push	{r4, r5, r6, lr}
 80125c4:	b086      	sub	sp, #24
 80125c6:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 80125ca:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 80125ce:	4604      	mov	r4, r0
 80125d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80125d4:	f10d 0e04 	add.w	lr, sp, #4
 80125d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80125dc:	f8dc 3000 	ldr.w	r3, [ip]
 80125e0:	f8ce 3000 	str.w	r3, [lr]
 80125e4:	b304      	cbz	r4, 8012628 <rcutils_strdup+0x68>
 80125e6:	a801      	add	r0, sp, #4
 80125e8:	f7f8 f89a 	bl	800a720 <rcutils_allocator_is_valid>
 80125ec:	b1e0      	cbz	r0, 8012628 <rcutils_strdup+0x68>
 80125ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80125f2:	2100      	movs	r1, #0
 80125f4:	4620      	mov	r0, r4
 80125f6:	f7ed fe03 	bl	8000200 <memchr>
 80125fa:	b190      	cbz	r0, 8012622 <rcutils_strdup+0x62>
 80125fc:	1b06      	subs	r6, r0, r4
 80125fe:	1c70      	adds	r0, r6, #1
 8012600:	9b01      	ldr	r3, [sp, #4]
 8012602:	9905      	ldr	r1, [sp, #20]
 8012604:	4798      	blx	r3
 8012606:	4605      	mov	r5, r0
 8012608:	b128      	cbz	r0, 8012616 <rcutils_strdup+0x56>
 801260a:	4632      	mov	r2, r6
 801260c:	4621      	mov	r1, r4
 801260e:	f005 fce6 	bl	8017fde <memcpy>
 8012612:	2300      	movs	r3, #0
 8012614:	55ab      	strb	r3, [r5, r6]
 8012616:	4628      	mov	r0, r5
 8012618:	b006      	add	sp, #24
 801261a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801261e:	b004      	add	sp, #16
 8012620:	4770      	bx	lr
 8012622:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8012626:	e7eb      	b.n	8012600 <rcutils_strdup+0x40>
 8012628:	2500      	movs	r5, #0
 801262a:	e7f4      	b.n	8012616 <rcutils_strdup+0x56>

0801262c <rcutils_strndup>:
 801262c:	b082      	sub	sp, #8
 801262e:	b570      	push	{r4, r5, r6, lr}
 8012630:	ac04      	add	r4, sp, #16
 8012632:	e884 000c 	stmia.w	r4, {r2, r3}
 8012636:	b1e8      	cbz	r0, 8012674 <rcutils_strndup+0x48>
 8012638:	4605      	mov	r5, r0
 801263a:	a804      	add	r0, sp, #16
 801263c:	460c      	mov	r4, r1
 801263e:	f7f8 f86f 	bl	800a720 <rcutils_allocator_is_valid>
 8012642:	b1b8      	cbz	r0, 8012674 <rcutils_strndup+0x48>
 8012644:	4622      	mov	r2, r4
 8012646:	2100      	movs	r1, #0
 8012648:	4628      	mov	r0, r5
 801264a:	f7ed fdd9 	bl	8000200 <memchr>
 801264e:	b100      	cbz	r0, 8012652 <rcutils_strndup+0x26>
 8012650:	1b44      	subs	r4, r0, r5
 8012652:	9b04      	ldr	r3, [sp, #16]
 8012654:	9908      	ldr	r1, [sp, #32]
 8012656:	1c60      	adds	r0, r4, #1
 8012658:	4798      	blx	r3
 801265a:	4606      	mov	r6, r0
 801265c:	b128      	cbz	r0, 801266a <rcutils_strndup+0x3e>
 801265e:	4622      	mov	r2, r4
 8012660:	4629      	mov	r1, r5
 8012662:	f005 fcbc 	bl	8017fde <memcpy>
 8012666:	2300      	movs	r3, #0
 8012668:	5533      	strb	r3, [r6, r4]
 801266a:	4630      	mov	r0, r6
 801266c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012670:	b002      	add	sp, #8
 8012672:	4770      	bx	lr
 8012674:	2600      	movs	r6, #0
 8012676:	4630      	mov	r0, r6
 8012678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801267c:	b002      	add	sp, #8
 801267e:	4770      	bx	lr

08012680 <rcutils_get_zero_initialized_string_map>:
 8012680:	4b01      	ldr	r3, [pc, #4]	@ (8012688 <rcutils_get_zero_initialized_string_map+0x8>)
 8012682:	6818      	ldr	r0, [r3, #0]
 8012684:	4770      	bx	lr
 8012686:	bf00      	nop
 8012688:	08019dc8 	.word	0x08019dc8

0801268c <rcutils_string_map_reserve>:
 801268c:	2800      	cmp	r0, #0
 801268e:	d04e      	beq.n	801272e <rcutils_string_map_reserve+0xa2>
 8012690:	b530      	push	{r4, r5, lr}
 8012692:	6803      	ldr	r3, [r0, #0]
 8012694:	b087      	sub	sp, #28
 8012696:	4604      	mov	r4, r0
 8012698:	2b00      	cmp	r3, #0
 801269a:	d043      	beq.n	8012724 <rcutils_string_map_reserve+0x98>
 801269c:	f103 0c0c 	add.w	ip, r3, #12
 80126a0:	460d      	mov	r5, r1
 80126a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80126a6:	f10d 0e04 	add.w	lr, sp, #4
 80126aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80126ae:	f8dc 3000 	ldr.w	r3, [ip]
 80126b2:	f8ce 3000 	str.w	r3, [lr]
 80126b6:	a801      	add	r0, sp, #4
 80126b8:	f7f8 f832 	bl	800a720 <rcutils_allocator_is_valid>
 80126bc:	b308      	cbz	r0, 8012702 <rcutils_string_map_reserve+0x76>
 80126be:	6823      	ldr	r3, [r4, #0]
 80126c0:	6899      	ldr	r1, [r3, #8]
 80126c2:	42a9      	cmp	r1, r5
 80126c4:	d829      	bhi.n	801271a <rcutils_string_map_reserve+0x8e>
 80126c6:	685a      	ldr	r2, [r3, #4]
 80126c8:	42aa      	cmp	r2, r5
 80126ca:	d024      	beq.n	8012716 <rcutils_string_map_reserve+0x8a>
 80126cc:	b1e5      	cbz	r5, 8012708 <rcutils_string_map_reserve+0x7c>
 80126ce:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 80126d2:	d22a      	bcs.n	801272a <rcutils_string_map_reserve+0x9e>
 80126d4:	6818      	ldr	r0, [r3, #0]
 80126d6:	9a05      	ldr	r2, [sp, #20]
 80126d8:	9b03      	ldr	r3, [sp, #12]
 80126da:	00e9      	lsls	r1, r5, #3
 80126dc:	4798      	blx	r3
 80126de:	b320      	cbz	r0, 801272a <rcutils_string_map_reserve+0x9e>
 80126e0:	6824      	ldr	r4, [r4, #0]
 80126e2:	6861      	ldr	r1, [r4, #4]
 80126e4:	6020      	str	r0, [r4, #0]
 80126e6:	42a9      	cmp	r1, r5
 80126e8:	d214      	bcs.n	8012714 <rcutils_string_map_reserve+0x88>
 80126ea:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 80126ee:	1a69      	subs	r1, r5, r1
 80126f0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80126f4:	2200      	movs	r2, #0
 80126f6:	e9c3 2200 	strd	r2, r2, [r3]
 80126fa:	3308      	adds	r3, #8
 80126fc:	428b      	cmp	r3, r1
 80126fe:	d1fa      	bne.n	80126f6 <rcutils_string_map_reserve+0x6a>
 8012700:	e008      	b.n	8012714 <rcutils_string_map_reserve+0x88>
 8012702:	200b      	movs	r0, #11
 8012704:	b007      	add	sp, #28
 8012706:	bd30      	pop	{r4, r5, pc}
 8012708:	9a02      	ldr	r2, [sp, #8]
 801270a:	9905      	ldr	r1, [sp, #20]
 801270c:	6818      	ldr	r0, [r3, #0]
 801270e:	4790      	blx	r2
 8012710:	6824      	ldr	r4, [r4, #0]
 8012712:	6025      	str	r5, [r4, #0]
 8012714:	6065      	str	r5, [r4, #4]
 8012716:	2000      	movs	r0, #0
 8012718:	e7f4      	b.n	8012704 <rcutils_string_map_reserve+0x78>
 801271a:	4620      	mov	r0, r4
 801271c:	f7ff ffb6 	bl	801268c <rcutils_string_map_reserve>
 8012720:	b007      	add	sp, #28
 8012722:	bd30      	pop	{r4, r5, pc}
 8012724:	201f      	movs	r0, #31
 8012726:	b007      	add	sp, #28
 8012728:	bd30      	pop	{r4, r5, pc}
 801272a:	200a      	movs	r0, #10
 801272c:	e7ea      	b.n	8012704 <rcutils_string_map_reserve+0x78>
 801272e:	200b      	movs	r0, #11
 8012730:	4770      	bx	lr
 8012732:	bf00      	nop

08012734 <rcutils_string_map_init>:
 8012734:	b082      	sub	sp, #8
 8012736:	b570      	push	{r4, r5, r6, lr}
 8012738:	ac04      	add	r4, sp, #16
 801273a:	e884 000c 	stmia.w	r4, {r2, r3}
 801273e:	b378      	cbz	r0, 80127a0 <rcutils_string_map_init+0x6c>
 8012740:	6806      	ldr	r6, [r0, #0]
 8012742:	4604      	mov	r4, r0
 8012744:	b12e      	cbz	r6, 8012752 <rcutils_string_map_init+0x1e>
 8012746:	251e      	movs	r5, #30
 8012748:	4628      	mov	r0, r5
 801274a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801274e:	b002      	add	sp, #8
 8012750:	4770      	bx	lr
 8012752:	a804      	add	r0, sp, #16
 8012754:	460d      	mov	r5, r1
 8012756:	f7f7 ffe3 	bl	800a720 <rcutils_allocator_is_valid>
 801275a:	b308      	cbz	r0, 80127a0 <rcutils_string_map_init+0x6c>
 801275c:	9b04      	ldr	r3, [sp, #16]
 801275e:	9908      	ldr	r1, [sp, #32]
 8012760:	2020      	movs	r0, #32
 8012762:	4798      	blx	r3
 8012764:	6020      	str	r0, [r4, #0]
 8012766:	b308      	cbz	r0, 80127ac <rcutils_string_map_init+0x78>
 8012768:	f10d 0e10 	add.w	lr, sp, #16
 801276c:	e9c0 6600 	strd	r6, r6, [r0]
 8012770:	6086      	str	r6, [r0, #8]
 8012772:	f100 0c0c 	add.w	ip, r0, #12
 8012776:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801277a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801277e:	f8de 3000 	ldr.w	r3, [lr]
 8012782:	f8cc 3000 	str.w	r3, [ip]
 8012786:	4629      	mov	r1, r5
 8012788:	4620      	mov	r0, r4
 801278a:	f7ff ff7f 	bl	801268c <rcutils_string_map_reserve>
 801278e:	4605      	mov	r5, r0
 8012790:	2800      	cmp	r0, #0
 8012792:	d0d9      	beq.n	8012748 <rcutils_string_map_init+0x14>
 8012794:	9b05      	ldr	r3, [sp, #20]
 8012796:	9908      	ldr	r1, [sp, #32]
 8012798:	6820      	ldr	r0, [r4, #0]
 801279a:	4798      	blx	r3
 801279c:	6026      	str	r6, [r4, #0]
 801279e:	e7d3      	b.n	8012748 <rcutils_string_map_init+0x14>
 80127a0:	250b      	movs	r5, #11
 80127a2:	4628      	mov	r0, r5
 80127a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80127a8:	b002      	add	sp, #8
 80127aa:	4770      	bx	lr
 80127ac:	250a      	movs	r5, #10
 80127ae:	e7cb      	b.n	8012748 <rcutils_string_map_init+0x14>

080127b0 <rcutils_string_map_fini>:
 80127b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127b4:	b086      	sub	sp, #24
 80127b6:	2800      	cmp	r0, #0
 80127b8:	d04f      	beq.n	801285a <rcutils_string_map_fini+0xaa>
 80127ba:	6805      	ldr	r5, [r0, #0]
 80127bc:	4606      	mov	r6, r0
 80127be:	2d00      	cmp	r5, #0
 80127c0:	d046      	beq.n	8012850 <rcutils_string_map_fini+0xa0>
 80127c2:	686b      	ldr	r3, [r5, #4]
 80127c4:	b353      	cbz	r3, 801281c <rcutils_string_map_fini+0x6c>
 80127c6:	2400      	movs	r4, #0
 80127c8:	682a      	ldr	r2, [r5, #0]
 80127ca:	4627      	mov	r7, r4
 80127cc:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 80127d0:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80127d4:	b1f8      	cbz	r0, 8012816 <rcutils_string_map_fini+0x66>
 80127d6:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 80127da:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80127de:	4651      	mov	r1, sl
 80127e0:	47c8      	blx	r9
 80127e2:	682b      	ldr	r3, [r5, #0]
 80127e4:	eb03 0208 	add.w	r2, r3, r8
 80127e8:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 80127ec:	6850      	ldr	r0, [r2, #4]
 80127ee:	4651      	mov	r1, sl
 80127f0:	47c8      	blx	r9
 80127f2:	682a      	ldr	r2, [r5, #0]
 80127f4:	68ab      	ldr	r3, [r5, #8]
 80127f6:	4442      	add	r2, r8
 80127f8:	3b01      	subs	r3, #1
 80127fa:	6057      	str	r7, [r2, #4]
 80127fc:	60ab      	str	r3, [r5, #8]
 80127fe:	6835      	ldr	r5, [r6, #0]
 8012800:	686b      	ldr	r3, [r5, #4]
 8012802:	3401      	adds	r4, #1
 8012804:	429c      	cmp	r4, r3
 8012806:	d209      	bcs.n	801281c <rcutils_string_map_fini+0x6c>
 8012808:	682a      	ldr	r2, [r5, #0]
 801280a:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 801280e:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8012812:	2800      	cmp	r0, #0
 8012814:	d1df      	bne.n	80127d6 <rcutils_string_map_fini+0x26>
 8012816:	3401      	adds	r4, #1
 8012818:	42a3      	cmp	r3, r4
 801281a:	d8d7      	bhi.n	80127cc <rcutils_string_map_fini+0x1c>
 801281c:	2100      	movs	r1, #0
 801281e:	4630      	mov	r0, r6
 8012820:	f7ff ff34 	bl	801268c <rcutils_string_map_reserve>
 8012824:	4604      	mov	r4, r0
 8012826:	b118      	cbz	r0, 8012830 <rcutils_string_map_fini+0x80>
 8012828:	4620      	mov	r0, r4
 801282a:	b006      	add	sp, #24
 801282c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012830:	6835      	ldr	r5, [r6, #0]
 8012832:	350c      	adds	r5, #12
 8012834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012836:	af01      	add	r7, sp, #4
 8012838:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801283a:	682b      	ldr	r3, [r5, #0]
 801283c:	603b      	str	r3, [r7, #0]
 801283e:	a801      	add	r0, sp, #4
 8012840:	f7f7 ff6e 	bl	800a720 <rcutils_allocator_is_valid>
 8012844:	b148      	cbz	r0, 801285a <rcutils_string_map_fini+0xaa>
 8012846:	9b02      	ldr	r3, [sp, #8]
 8012848:	9905      	ldr	r1, [sp, #20]
 801284a:	6830      	ldr	r0, [r6, #0]
 801284c:	4798      	blx	r3
 801284e:	6034      	str	r4, [r6, #0]
 8012850:	2400      	movs	r4, #0
 8012852:	4620      	mov	r0, r4
 8012854:	b006      	add	sp, #24
 8012856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801285a:	240b      	movs	r4, #11
 801285c:	4620      	mov	r0, r4
 801285e:	b006      	add	sp, #24
 8012860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012864 <rcutils_string_map_getn>:
 8012864:	b338      	cbz	r0, 80128b6 <rcutils_string_map_getn+0x52>
 8012866:	6800      	ldr	r0, [r0, #0]
 8012868:	b328      	cbz	r0, 80128b6 <rcutils_string_map_getn+0x52>
 801286a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801286e:	460e      	mov	r6, r1
 8012870:	b1c1      	cbz	r1, 80128a4 <rcutils_string_map_getn+0x40>
 8012872:	e9d0 9800 	ldrd	r9, r8, [r0]
 8012876:	f1b8 0f00 	cmp.w	r8, #0
 801287a:	d013      	beq.n	80128a4 <rcutils_string_map_getn+0x40>
 801287c:	4617      	mov	r7, r2
 801287e:	2400      	movs	r4, #0
 8012880:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 8012884:	4628      	mov	r0, r5
 8012886:	b155      	cbz	r5, 801289e <rcutils_string_map_getn+0x3a>
 8012888:	f7ed fd0a 	bl	80002a0 <strlen>
 801288c:	42b8      	cmp	r0, r7
 801288e:	4602      	mov	r2, r0
 8012890:	4629      	mov	r1, r5
 8012892:	bf38      	it	cc
 8012894:	463a      	movcc	r2, r7
 8012896:	4630      	mov	r0, r6
 8012898:	f005 fadb 	bl	8017e52 <strncmp>
 801289c:	b128      	cbz	r0, 80128aa <rcutils_string_map_getn+0x46>
 801289e:	3401      	adds	r4, #1
 80128a0:	45a0      	cmp	r8, r4
 80128a2:	d1ed      	bne.n	8012880 <rcutils_string_map_getn+0x1c>
 80128a4:	2000      	movs	r0, #0
 80128a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128aa:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 80128ae:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80128b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128b6:	4770      	bx	lr

080128b8 <rmw_get_zero_initialized_context>:
 80128b8:	b510      	push	{r4, lr}
 80128ba:	4903      	ldr	r1, [pc, #12]	@ (80128c8 <rmw_get_zero_initialized_context+0x10>)
 80128bc:	4604      	mov	r4, r0
 80128be:	2270      	movs	r2, #112	@ 0x70
 80128c0:	f005 fb8d 	bl	8017fde <memcpy>
 80128c4:	4620      	mov	r0, r4
 80128c6:	bd10      	pop	{r4, pc}
 80128c8:	08019dd0 	.word	0x08019dd0

080128cc <rmw_get_zero_initialized_init_options>:
 80128cc:	b510      	push	{r4, lr}
 80128ce:	4903      	ldr	r1, [pc, #12]	@ (80128dc <rmw_get_zero_initialized_init_options+0x10>)
 80128d0:	4604      	mov	r4, r0
 80128d2:	2258      	movs	r2, #88	@ 0x58
 80128d4:	f005 fb83 	bl	8017fde <memcpy>
 80128d8:	4620      	mov	r0, r4
 80128da:	bd10      	pop	{r4, pc}
 80128dc:	08019e40 	.word	0x08019e40

080128e0 <rmw_subscription_content_filter_options_fini>:
 80128e0:	b1b0      	cbz	r0, 8012910 <rmw_subscription_content_filter_options_fini+0x30>
 80128e2:	b538      	push	{r3, r4, r5, lr}
 80128e4:	4604      	mov	r4, r0
 80128e6:	4608      	mov	r0, r1
 80128e8:	460d      	mov	r5, r1
 80128ea:	f7f7 ff19 	bl	800a720 <rcutils_allocator_is_valid>
 80128ee:	b168      	cbz	r0, 801290c <rmw_subscription_content_filter_options_fini+0x2c>
 80128f0:	6820      	ldr	r0, [r4, #0]
 80128f2:	b120      	cbz	r0, 80128fe <rmw_subscription_content_filter_options_fini+0x1e>
 80128f4:	686b      	ldr	r3, [r5, #4]
 80128f6:	6929      	ldr	r1, [r5, #16]
 80128f8:	4798      	blx	r3
 80128fa:	2300      	movs	r3, #0
 80128fc:	6023      	str	r3, [r4, #0]
 80128fe:	1d20      	adds	r0, r4, #4
 8012900:	f004 fab0 	bl	8016e64 <rcutils_string_array_fini>
 8012904:	3800      	subs	r0, #0
 8012906:	bf18      	it	ne
 8012908:	2001      	movne	r0, #1
 801290a:	bd38      	pop	{r3, r4, r5, pc}
 801290c:	200b      	movs	r0, #11
 801290e:	bd38      	pop	{r3, r4, r5, pc}
 8012910:	200b      	movs	r0, #11
 8012912:	4770      	bx	lr

08012914 <rmw_get_default_subscription_options>:
 8012914:	2200      	movs	r2, #0
 8012916:	e9c0 2200 	strd	r2, r2, [r0]
 801291a:	6082      	str	r2, [r0, #8]
 801291c:	4770      	bx	lr
 801291e:	bf00      	nop

08012920 <rmw_time_equal>:
 8012920:	b570      	push	{r4, r5, r6, lr}
 8012922:	b084      	sub	sp, #16
 8012924:	ac04      	add	r4, sp, #16
 8012926:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801292a:	4925      	ldr	r1, [pc, #148]	@ (80129c0 <rmw_time_equal+0xa0>)
 801292c:	9c01      	ldr	r4, [sp, #4]
 801292e:	2202      	movs	r2, #2
 8012930:	4281      	cmp	r1, r0
 8012932:	41a2      	sbcs	r2, r4
 8012934:	d333      	bcc.n	801299e <rmw_time_equal+0x7e>
 8012936:	4603      	mov	r3, r0
 8012938:	4822      	ldr	r0, [pc, #136]	@ (80129c4 <rmw_time_equal+0xa4>)
 801293a:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 801293e:	fba3 3200 	umull	r3, r2, r3, r0
 8012942:	fb00 2204 	mla	r2, r0, r4, r2
 8012946:	43de      	mvns	r6, r3
 8012948:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801294c:	1a84      	subs	r4, r0, r2
 801294e:	428e      	cmp	r6, r1
 8012950:	41ac      	sbcs	r4, r5
 8012952:	d332      	bcc.n	80129ba <rmw_time_equal+0x9a>
 8012954:	eb11 0e03 	adds.w	lr, r1, r3
 8012958:	eb42 0005 	adc.w	r0, r2, r5
 801295c:	9b08      	ldr	r3, [sp, #32]
 801295e:	4918      	ldr	r1, [pc, #96]	@ (80129c0 <rmw_time_equal+0xa0>)
 8012960:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8012962:	2202      	movs	r2, #2
 8012964:	4299      	cmp	r1, r3
 8012966:	41aa      	sbcs	r2, r5
 8012968:	d31e      	bcc.n	80129a8 <rmw_time_equal+0x88>
 801296a:	4c16      	ldr	r4, [pc, #88]	@ (80129c4 <rmw_time_equal+0xa4>)
 801296c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801296e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012970:	fba3 3104 	umull	r3, r1, r3, r4
 8012974:	fb04 1105 	mla	r1, r4, r5, r1
 8012978:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 801297c:	43dd      	mvns	r5, r3
 801297e:	ebac 0401 	sub.w	r4, ip, r1
 8012982:	4295      	cmp	r5, r2
 8012984:	41b4      	sbcs	r4, r6
 8012986:	d314      	bcc.n	80129b2 <rmw_time_equal+0x92>
 8012988:	18d2      	adds	r2, r2, r3
 801298a:	eb41 0306 	adc.w	r3, r1, r6
 801298e:	4283      	cmp	r3, r0
 8012990:	bf08      	it	eq
 8012992:	4572      	cmpeq	r2, lr
 8012994:	bf0c      	ite	eq
 8012996:	2001      	moveq	r0, #1
 8012998:	2000      	movne	r0, #0
 801299a:	b004      	add	sp, #16
 801299c:	bd70      	pop	{r4, r5, r6, pc}
 801299e:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80129a2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80129a6:	e7d9      	b.n	801295c <rmw_time_equal+0x3c>
 80129a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80129ac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80129b0:	e7ed      	b.n	801298e <rmw_time_equal+0x6e>
 80129b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80129b6:	4663      	mov	r3, ip
 80129b8:	e7e9      	b.n	801298e <rmw_time_equal+0x6e>
 80129ba:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80129be:	e7cd      	b.n	801295c <rmw_time_equal+0x3c>
 80129c0:	25c17d04 	.word	0x25c17d04
 80129c4:	3b9aca00 	.word	0x3b9aca00

080129c8 <rmw_time_total_nsec>:
 80129c8:	b430      	push	{r4, r5}
 80129ca:	b084      	sub	sp, #16
 80129cc:	ac04      	add	r4, sp, #16
 80129ce:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80129d2:	4914      	ldr	r1, [pc, #80]	@ (8012a24 <rmw_time_total_nsec+0x5c>)
 80129d4:	9c01      	ldr	r4, [sp, #4]
 80129d6:	2202      	movs	r2, #2
 80129d8:	4281      	cmp	r1, r0
 80129da:	41a2      	sbcs	r2, r4
 80129dc:	d315      	bcc.n	8012a0a <rmw_time_total_nsec+0x42>
 80129de:	4912      	ldr	r1, [pc, #72]	@ (8012a28 <rmw_time_total_nsec+0x60>)
 80129e0:	4603      	mov	r3, r0
 80129e2:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 80129e6:	fba3 3201 	umull	r3, r2, r3, r1
 80129ea:	fb01 2204 	mla	r2, r1, r4, r2
 80129ee:	ea6f 0c03 	mvn.w	ip, r3
 80129f2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80129f6:	1a8c      	subs	r4, r1, r2
 80129f8:	4584      	cmp	ip, r0
 80129fa:	41ac      	sbcs	r4, r5
 80129fc:	d30c      	bcc.n	8012a18 <rmw_time_total_nsec+0x50>
 80129fe:	1818      	adds	r0, r3, r0
 8012a00:	eb42 0105 	adc.w	r1, r2, r5
 8012a04:	b004      	add	sp, #16
 8012a06:	bc30      	pop	{r4, r5}
 8012a08:	4770      	bx	lr
 8012a0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012a0e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012a12:	b004      	add	sp, #16
 8012a14:	bc30      	pop	{r4, r5}
 8012a16:	4770      	bx	lr
 8012a18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012a1c:	b004      	add	sp, #16
 8012a1e:	bc30      	pop	{r4, r5}
 8012a20:	4770      	bx	lr
 8012a22:	bf00      	nop
 8012a24:	25c17d04 	.word	0x25c17d04
 8012a28:	3b9aca00 	.word	0x3b9aca00

08012a2c <rmw_get_zero_initialized_message_info>:
 8012a2c:	b510      	push	{r4, lr}
 8012a2e:	4c09      	ldr	r4, [pc, #36]	@ (8012a54 <rmw_get_zero_initialized_message_info+0x28>)
 8012a30:	4686      	mov	lr, r0
 8012a32:	4684      	mov	ip, r0
 8012a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012a36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012a3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012a42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012a4a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012a4e:	4670      	mov	r0, lr
 8012a50:	bd10      	pop	{r4, pc}
 8012a52:	bf00      	nop
 8012a54:	08019e98 	.word	0x08019e98

08012a58 <rmw_validate_full_topic_name>:
 8012a58:	2800      	cmp	r0, #0
 8012a5a:	d049      	beq.n	8012af0 <rmw_validate_full_topic_name+0x98>
 8012a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a60:	460e      	mov	r6, r1
 8012a62:	2900      	cmp	r1, #0
 8012a64:	d056      	beq.n	8012b14 <rmw_validate_full_topic_name+0xbc>
 8012a66:	4615      	mov	r5, r2
 8012a68:	4604      	mov	r4, r0
 8012a6a:	f7ed fc19 	bl	80002a0 <strlen>
 8012a6e:	b150      	cbz	r0, 8012a86 <rmw_validate_full_topic_name+0x2e>
 8012a70:	7823      	ldrb	r3, [r4, #0]
 8012a72:	2b2f      	cmp	r3, #47	@ 0x2f
 8012a74:	d00c      	beq.n	8012a90 <rmw_validate_full_topic_name+0x38>
 8012a76:	2302      	movs	r3, #2
 8012a78:	6033      	str	r3, [r6, #0]
 8012a7a:	b10d      	cbz	r5, 8012a80 <rmw_validate_full_topic_name+0x28>
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	602b      	str	r3, [r5, #0]
 8012a80:	2000      	movs	r0, #0
 8012a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a86:	2301      	movs	r3, #1
 8012a88:	6033      	str	r3, [r6, #0]
 8012a8a:	2d00      	cmp	r5, #0
 8012a8c:	d1f6      	bne.n	8012a7c <rmw_validate_full_topic_name+0x24>
 8012a8e:	e7f7      	b.n	8012a80 <rmw_validate_full_topic_name+0x28>
 8012a90:	1e47      	subs	r7, r0, #1
 8012a92:	5de3      	ldrb	r3, [r4, r7]
 8012a94:	2b2f      	cmp	r3, #47	@ 0x2f
 8012a96:	d03f      	beq.n	8012b18 <rmw_validate_full_topic_name+0xc0>
 8012a98:	1e63      	subs	r3, r4, #1
 8012a9a:	4621      	mov	r1, r4
 8012a9c:	eb03 0e00 	add.w	lr, r3, r0
 8012aa0:	469c      	mov	ip, r3
 8012aa2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8012aa6:	2a5f      	cmp	r2, #95	@ 0x5f
 8012aa8:	d006      	beq.n	8012ab8 <rmw_validate_full_topic_name+0x60>
 8012aaa:	d823      	bhi.n	8012af4 <rmw_validate_full_topic_name+0x9c>
 8012aac:	2a39      	cmp	r2, #57	@ 0x39
 8012aae:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 8012ab2:	d82b      	bhi.n	8012b0c <rmw_validate_full_topic_name+0xb4>
 8012ab4:	2a2e      	cmp	r2, #46	@ 0x2e
 8012ab6:	d920      	bls.n	8012afa <rmw_validate_full_topic_name+0xa2>
 8012ab8:	4573      	cmp	r3, lr
 8012aba:	d1f1      	bne.n	8012aa0 <rmw_validate_full_topic_name+0x48>
 8012abc:	4c21      	ldr	r4, [pc, #132]	@ (8012b44 <rmw_validate_full_topic_name+0xec>)
 8012abe:	2300      	movs	r3, #0
 8012ac0:	e003      	b.n	8012aca <rmw_validate_full_topic_name+0x72>
 8012ac2:	4298      	cmp	r0, r3
 8012ac4:	f101 0101 	add.w	r1, r1, #1
 8012ac8:	d02c      	beq.n	8012b24 <rmw_validate_full_topic_name+0xcc>
 8012aca:	429f      	cmp	r7, r3
 8012acc:	f103 0301 	add.w	r3, r3, #1
 8012ad0:	d0f7      	beq.n	8012ac2 <rmw_validate_full_topic_name+0x6a>
 8012ad2:	780a      	ldrb	r2, [r1, #0]
 8012ad4:	2a2f      	cmp	r2, #47	@ 0x2f
 8012ad6:	d1f4      	bne.n	8012ac2 <rmw_validate_full_topic_name+0x6a>
 8012ad8:	784a      	ldrb	r2, [r1, #1]
 8012ada:	2a2f      	cmp	r2, #47	@ 0x2f
 8012adc:	d02d      	beq.n	8012b3a <rmw_validate_full_topic_name+0xe2>
 8012ade:	5ca2      	ldrb	r2, [r4, r2]
 8012ae0:	0752      	lsls	r2, r2, #29
 8012ae2:	d5ee      	bpl.n	8012ac2 <rmw_validate_full_topic_name+0x6a>
 8012ae4:	2206      	movs	r2, #6
 8012ae6:	6032      	str	r2, [r6, #0]
 8012ae8:	2d00      	cmp	r5, #0
 8012aea:	d0c9      	beq.n	8012a80 <rmw_validate_full_topic_name+0x28>
 8012aec:	602b      	str	r3, [r5, #0]
 8012aee:	e7c7      	b.n	8012a80 <rmw_validate_full_topic_name+0x28>
 8012af0:	200b      	movs	r0, #11
 8012af2:	4770      	bx	lr
 8012af4:	3a61      	subs	r2, #97	@ 0x61
 8012af6:	2a19      	cmp	r2, #25
 8012af8:	d9de      	bls.n	8012ab8 <rmw_validate_full_topic_name+0x60>
 8012afa:	2304      	movs	r3, #4
 8012afc:	6033      	str	r3, [r6, #0]
 8012afe:	2d00      	cmp	r5, #0
 8012b00:	d0be      	beq.n	8012a80 <rmw_validate_full_topic_name+0x28>
 8012b02:	f1c4 0401 	rsb	r4, r4, #1
 8012b06:	4464      	add	r4, ip
 8012b08:	602c      	str	r4, [r5, #0]
 8012b0a:	e7b9      	b.n	8012a80 <rmw_validate_full_topic_name+0x28>
 8012b0c:	f1b8 0f19 	cmp.w	r8, #25
 8012b10:	d9d2      	bls.n	8012ab8 <rmw_validate_full_topic_name+0x60>
 8012b12:	e7f2      	b.n	8012afa <rmw_validate_full_topic_name+0xa2>
 8012b14:	200b      	movs	r0, #11
 8012b16:	e7b4      	b.n	8012a82 <rmw_validate_full_topic_name+0x2a>
 8012b18:	2303      	movs	r3, #3
 8012b1a:	6033      	str	r3, [r6, #0]
 8012b1c:	2d00      	cmp	r5, #0
 8012b1e:	d0af      	beq.n	8012a80 <rmw_validate_full_topic_name+0x28>
 8012b20:	602f      	str	r7, [r5, #0]
 8012b22:	e7ad      	b.n	8012a80 <rmw_validate_full_topic_name+0x28>
 8012b24:	28f7      	cmp	r0, #247	@ 0xf7
 8012b26:	d802      	bhi.n	8012b2e <rmw_validate_full_topic_name+0xd6>
 8012b28:	2300      	movs	r3, #0
 8012b2a:	6033      	str	r3, [r6, #0]
 8012b2c:	e7a8      	b.n	8012a80 <rmw_validate_full_topic_name+0x28>
 8012b2e:	2307      	movs	r3, #7
 8012b30:	6033      	str	r3, [r6, #0]
 8012b32:	2d00      	cmp	r5, #0
 8012b34:	d0a4      	beq.n	8012a80 <rmw_validate_full_topic_name+0x28>
 8012b36:	23f6      	movs	r3, #246	@ 0xf6
 8012b38:	e7d8      	b.n	8012aec <rmw_validate_full_topic_name+0x94>
 8012b3a:	2205      	movs	r2, #5
 8012b3c:	6032      	str	r2, [r6, #0]
 8012b3e:	2d00      	cmp	r5, #0
 8012b40:	d1d4      	bne.n	8012aec <rmw_validate_full_topic_name+0x94>
 8012b42:	e79d      	b.n	8012a80 <rmw_validate_full_topic_name+0x28>
 8012b44:	0801a5e7 	.word	0x0801a5e7

08012b48 <rmw_validate_namespace_with_size>:
 8012b48:	2800      	cmp	r0, #0
 8012b4a:	d031      	beq.n	8012bb0 <rmw_validate_namespace_with_size+0x68>
 8012b4c:	b570      	push	{r4, r5, r6, lr}
 8012b4e:	4614      	mov	r4, r2
 8012b50:	b0c2      	sub	sp, #264	@ 0x108
 8012b52:	b1ba      	cbz	r2, 8012b84 <rmw_validate_namespace_with_size+0x3c>
 8012b54:	2901      	cmp	r1, #1
 8012b56:	460e      	mov	r6, r1
 8012b58:	461d      	mov	r5, r3
 8012b5a:	d102      	bne.n	8012b62 <rmw_validate_namespace_with_size+0x1a>
 8012b5c:	7803      	ldrb	r3, [r0, #0]
 8012b5e:	2b2f      	cmp	r3, #47	@ 0x2f
 8012b60:	d015      	beq.n	8012b8e <rmw_validate_namespace_with_size+0x46>
 8012b62:	aa01      	add	r2, sp, #4
 8012b64:	4669      	mov	r1, sp
 8012b66:	f7ff ff77 	bl	8012a58 <rmw_validate_full_topic_name>
 8012b6a:	b960      	cbnz	r0, 8012b86 <rmw_validate_namespace_with_size+0x3e>
 8012b6c:	9b00      	ldr	r3, [sp, #0]
 8012b6e:	b163      	cbz	r3, 8012b8a <rmw_validate_namespace_with_size+0x42>
 8012b70:	2b07      	cmp	r3, #7
 8012b72:	d00a      	beq.n	8012b8a <rmw_validate_namespace_with_size+0x42>
 8012b74:	1e5a      	subs	r2, r3, #1
 8012b76:	2a05      	cmp	r2, #5
 8012b78:	d81c      	bhi.n	8012bb4 <rmw_validate_namespace_with_size+0x6c>
 8012b7a:	e8df f002 	tbb	[pc, r2]
 8012b7e:	0c0c      	.short	0x0c0c
 8012b80:	0c0c0c0c 	.word	0x0c0c0c0c
 8012b84:	200b      	movs	r0, #11
 8012b86:	b042      	add	sp, #264	@ 0x108
 8012b88:	bd70      	pop	{r4, r5, r6, pc}
 8012b8a:	2ef5      	cmp	r6, #245	@ 0xf5
 8012b8c:	d809      	bhi.n	8012ba2 <rmw_validate_namespace_with_size+0x5a>
 8012b8e:	2300      	movs	r3, #0
 8012b90:	6023      	str	r3, [r4, #0]
 8012b92:	2000      	movs	r0, #0
 8012b94:	e7f7      	b.n	8012b86 <rmw_validate_namespace_with_size+0x3e>
 8012b96:	6023      	str	r3, [r4, #0]
 8012b98:	2d00      	cmp	r5, #0
 8012b9a:	d0fa      	beq.n	8012b92 <rmw_validate_namespace_with_size+0x4a>
 8012b9c:	9b01      	ldr	r3, [sp, #4]
 8012b9e:	602b      	str	r3, [r5, #0]
 8012ba0:	e7f7      	b.n	8012b92 <rmw_validate_namespace_with_size+0x4a>
 8012ba2:	2307      	movs	r3, #7
 8012ba4:	6023      	str	r3, [r4, #0]
 8012ba6:	2d00      	cmp	r5, #0
 8012ba8:	d0f3      	beq.n	8012b92 <rmw_validate_namespace_with_size+0x4a>
 8012baa:	23f4      	movs	r3, #244	@ 0xf4
 8012bac:	602b      	str	r3, [r5, #0]
 8012bae:	e7f0      	b.n	8012b92 <rmw_validate_namespace_with_size+0x4a>
 8012bb0:	200b      	movs	r0, #11
 8012bb2:	4770      	bx	lr
 8012bb4:	4a03      	ldr	r2, [pc, #12]	@ (8012bc4 <rmw_validate_namespace_with_size+0x7c>)
 8012bb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012bba:	a802      	add	r0, sp, #8
 8012bbc:	f7ff fcd4 	bl	8012568 <rcutils_snprintf>
 8012bc0:	2001      	movs	r0, #1
 8012bc2:	e7e0      	b.n	8012b86 <rmw_validate_namespace_with_size+0x3e>
 8012bc4:	080192b4 	.word	0x080192b4

08012bc8 <rmw_validate_namespace>:
 8012bc8:	b168      	cbz	r0, 8012be6 <rmw_validate_namespace+0x1e>
 8012bca:	b570      	push	{r4, r5, r6, lr}
 8012bcc:	460d      	mov	r5, r1
 8012bce:	4616      	mov	r6, r2
 8012bd0:	4604      	mov	r4, r0
 8012bd2:	f7ed fb65 	bl	80002a0 <strlen>
 8012bd6:	4633      	mov	r3, r6
 8012bd8:	4601      	mov	r1, r0
 8012bda:	462a      	mov	r2, r5
 8012bdc:	4620      	mov	r0, r4
 8012bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012be2:	f7ff bfb1 	b.w	8012b48 <rmw_validate_namespace_with_size>
 8012be6:	200b      	movs	r0, #11
 8012be8:	4770      	bx	lr
 8012bea:	bf00      	nop

08012bec <rmw_namespace_validation_result_string>:
 8012bec:	2807      	cmp	r0, #7
 8012bee:	bf9a      	itte	ls
 8012bf0:	4b02      	ldrls	r3, [pc, #8]	@ (8012bfc <rmw_namespace_validation_result_string+0x10>)
 8012bf2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012bf6:	4802      	ldrhi	r0, [pc, #8]	@ (8012c00 <rmw_namespace_validation_result_string+0x14>)
 8012bf8:	4770      	bx	lr
 8012bfa:	bf00      	nop
 8012bfc:	08019ed0 	.word	0x08019ed0
 8012c00:	08019304 	.word	0x08019304

08012c04 <rmw_validate_node_name>:
 8012c04:	2800      	cmp	r0, #0
 8012c06:	d037      	beq.n	8012c78 <rmw_validate_node_name+0x74>
 8012c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c0a:	460e      	mov	r6, r1
 8012c0c:	2900      	cmp	r1, #0
 8012c0e:	d035      	beq.n	8012c7c <rmw_validate_node_name+0x78>
 8012c10:	4617      	mov	r7, r2
 8012c12:	4604      	mov	r4, r0
 8012c14:	f7ed fb44 	bl	80002a0 <strlen>
 8012c18:	b1d8      	cbz	r0, 8012c52 <rmw_validate_node_name+0x4e>
 8012c1a:	1e63      	subs	r3, r4, #1
 8012c1c:	1819      	adds	r1, r3, r0
 8012c1e:	461a      	mov	r2, r3
 8012c20:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8012c24:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 8012c28:	f02e 0c20 	bic.w	ip, lr, #32
 8012c2c:	2d09      	cmp	r5, #9
 8012c2e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8012c32:	d915      	bls.n	8012c60 <rmw_validate_node_name+0x5c>
 8012c34:	f1bc 0f19 	cmp.w	ip, #25
 8012c38:	d912      	bls.n	8012c60 <rmw_validate_node_name+0x5c>
 8012c3a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8012c3e:	d00f      	beq.n	8012c60 <rmw_validate_node_name+0x5c>
 8012c40:	2302      	movs	r3, #2
 8012c42:	6033      	str	r3, [r6, #0]
 8012c44:	b11f      	cbz	r7, 8012c4e <rmw_validate_node_name+0x4a>
 8012c46:	f1c4 0401 	rsb	r4, r4, #1
 8012c4a:	4414      	add	r4, r2
 8012c4c:	603c      	str	r4, [r7, #0]
 8012c4e:	2000      	movs	r0, #0
 8012c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c52:	2301      	movs	r3, #1
 8012c54:	6033      	str	r3, [r6, #0]
 8012c56:	2f00      	cmp	r7, #0
 8012c58:	d0f9      	beq.n	8012c4e <rmw_validate_node_name+0x4a>
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	603b      	str	r3, [r7, #0]
 8012c5e:	e7f6      	b.n	8012c4e <rmw_validate_node_name+0x4a>
 8012c60:	4299      	cmp	r1, r3
 8012c62:	d1dc      	bne.n	8012c1e <rmw_validate_node_name+0x1a>
 8012c64:	7823      	ldrb	r3, [r4, #0]
 8012c66:	4a0c      	ldr	r2, [pc, #48]	@ (8012c98 <rmw_validate_node_name+0x94>)
 8012c68:	5cd3      	ldrb	r3, [r2, r3]
 8012c6a:	f013 0304 	ands.w	r3, r3, #4
 8012c6e:	d10e      	bne.n	8012c8e <rmw_validate_node_name+0x8a>
 8012c70:	28ff      	cmp	r0, #255	@ 0xff
 8012c72:	d805      	bhi.n	8012c80 <rmw_validate_node_name+0x7c>
 8012c74:	6033      	str	r3, [r6, #0]
 8012c76:	e7ea      	b.n	8012c4e <rmw_validate_node_name+0x4a>
 8012c78:	200b      	movs	r0, #11
 8012c7a:	4770      	bx	lr
 8012c7c:	200b      	movs	r0, #11
 8012c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c80:	2304      	movs	r3, #4
 8012c82:	6033      	str	r3, [r6, #0]
 8012c84:	2f00      	cmp	r7, #0
 8012c86:	d0e2      	beq.n	8012c4e <rmw_validate_node_name+0x4a>
 8012c88:	23fe      	movs	r3, #254	@ 0xfe
 8012c8a:	603b      	str	r3, [r7, #0]
 8012c8c:	e7df      	b.n	8012c4e <rmw_validate_node_name+0x4a>
 8012c8e:	2303      	movs	r3, #3
 8012c90:	6033      	str	r3, [r6, #0]
 8012c92:	2f00      	cmp	r7, #0
 8012c94:	d1e1      	bne.n	8012c5a <rmw_validate_node_name+0x56>
 8012c96:	e7da      	b.n	8012c4e <rmw_validate_node_name+0x4a>
 8012c98:	0801a5e7 	.word	0x0801a5e7

08012c9c <rmw_node_name_validation_result_string>:
 8012c9c:	2804      	cmp	r0, #4
 8012c9e:	bf9a      	itte	ls
 8012ca0:	4b02      	ldrls	r3, [pc, #8]	@ (8012cac <rmw_node_name_validation_result_string+0x10>)
 8012ca2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012ca6:	4802      	ldrhi	r0, [pc, #8]	@ (8012cb0 <rmw_node_name_validation_result_string+0x14>)
 8012ca8:	4770      	bx	lr
 8012caa:	bf00      	nop
 8012cac:	08019ef0 	.word	0x08019ef0
 8012cb0:	080194ac 	.word	0x080194ac

08012cb4 <get_memory>:
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	6840      	ldr	r0, [r0, #4]
 8012cb8:	b158      	cbz	r0, 8012cd2 <get_memory+0x1e>
 8012cba:	6842      	ldr	r2, [r0, #4]
 8012cbc:	605a      	str	r2, [r3, #4]
 8012cbe:	b10a      	cbz	r2, 8012cc4 <get_memory+0x10>
 8012cc0:	2100      	movs	r1, #0
 8012cc2:	6011      	str	r1, [r2, #0]
 8012cc4:	681a      	ldr	r2, [r3, #0]
 8012cc6:	6042      	str	r2, [r0, #4]
 8012cc8:	b102      	cbz	r2, 8012ccc <get_memory+0x18>
 8012cca:	6010      	str	r0, [r2, #0]
 8012ccc:	2200      	movs	r2, #0
 8012cce:	6002      	str	r2, [r0, #0]
 8012cd0:	6018      	str	r0, [r3, #0]
 8012cd2:	4770      	bx	lr

08012cd4 <put_memory>:
 8012cd4:	680b      	ldr	r3, [r1, #0]
 8012cd6:	b10b      	cbz	r3, 8012cdc <put_memory+0x8>
 8012cd8:	684a      	ldr	r2, [r1, #4]
 8012cda:	605a      	str	r2, [r3, #4]
 8012cdc:	684a      	ldr	r2, [r1, #4]
 8012cde:	b102      	cbz	r2, 8012ce2 <put_memory+0xe>
 8012ce0:	6013      	str	r3, [r2, #0]
 8012ce2:	6803      	ldr	r3, [r0, #0]
 8012ce4:	428b      	cmp	r3, r1
 8012ce6:	6843      	ldr	r3, [r0, #4]
 8012ce8:	bf08      	it	eq
 8012cea:	6002      	streq	r2, [r0, #0]
 8012cec:	604b      	str	r3, [r1, #4]
 8012cee:	b103      	cbz	r3, 8012cf2 <put_memory+0x1e>
 8012cf0:	6019      	str	r1, [r3, #0]
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	600b      	str	r3, [r1, #0]
 8012cf6:	6041      	str	r1, [r0, #4]
 8012cf8:	4770      	bx	lr
 8012cfa:	bf00      	nop

08012cfc <rmw_destroy_client>:
 8012cfc:	b570      	push	{r4, r5, r6, lr}
 8012cfe:	b128      	cbz	r0, 8012d0c <rmw_destroy_client+0x10>
 8012d00:	4604      	mov	r4, r0
 8012d02:	6800      	ldr	r0, [r0, #0]
 8012d04:	460d      	mov	r5, r1
 8012d06:	f7f8 fae7 	bl	800b2d8 <is_uxrce_rmw_identifier_valid>
 8012d0a:	b910      	cbnz	r0, 8012d12 <rmw_destroy_client+0x16>
 8012d0c:	2401      	movs	r4, #1
 8012d0e:	4620      	mov	r0, r4
 8012d10:	bd70      	pop	{r4, r5, r6, pc}
 8012d12:	6863      	ldr	r3, [r4, #4]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d0f9      	beq.n	8012d0c <rmw_destroy_client+0x10>
 8012d18:	2d00      	cmp	r5, #0
 8012d1a:	d0f7      	beq.n	8012d0c <rmw_destroy_client+0x10>
 8012d1c:	6828      	ldr	r0, [r5, #0]
 8012d1e:	f7f8 fadb 	bl	800b2d8 <is_uxrce_rmw_identifier_valid>
 8012d22:	2800      	cmp	r0, #0
 8012d24:	d0f2      	beq.n	8012d0c <rmw_destroy_client+0x10>
 8012d26:	686e      	ldr	r6, [r5, #4]
 8012d28:	2e00      	cmp	r6, #0
 8012d2a:	d0ef      	beq.n	8012d0c <rmw_destroy_client+0x10>
 8012d2c:	6864      	ldr	r4, [r4, #4]
 8012d2e:	6932      	ldr	r2, [r6, #16]
 8012d30:	6920      	ldr	r0, [r4, #16]
 8012d32:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012d36:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012d3a:	6819      	ldr	r1, [r3, #0]
 8012d3c:	f002 fdf8 	bl	8015930 <uxr_buffer_cancel_data>
 8012d40:	4602      	mov	r2, r0
 8012d42:	6920      	ldr	r0, [r4, #16]
 8012d44:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012d48:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012d4c:	f7f8 fa3e 	bl	800b1cc <run_xrce_session>
 8012d50:	6920      	ldr	r0, [r4, #16]
 8012d52:	6932      	ldr	r2, [r6, #16]
 8012d54:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012d58:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012d5c:	6819      	ldr	r1, [r3, #0]
 8012d5e:	f7f9 fb11 	bl	800c384 <uxr_buffer_delete_entity>
 8012d62:	4602      	mov	r2, r0
 8012d64:	6920      	ldr	r0, [r4, #16]
 8012d66:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012d6a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012d6e:	f7f8 fa2d 	bl	800b1cc <run_xrce_session>
 8012d72:	f080 0401 	eor.w	r4, r0, #1
 8012d76:	b2e4      	uxtb	r4, r4
 8012d78:	4628      	mov	r0, r5
 8012d7a:	0064      	lsls	r4, r4, #1
 8012d7c:	f7f8 f906 	bl	800af8c <rmw_uxrce_fini_client_memory>
 8012d80:	e7c5      	b.n	8012d0e <rmw_destroy_client+0x12>
 8012d82:	bf00      	nop

08012d84 <rmw_get_gid_for_client>:
 8012d84:	b1a8      	cbz	r0, 8012db2 <rmw_get_gid_for_client+0x2e>
 8012d86:	b538      	push	{r3, r4, r5, lr}
 8012d88:	460c      	mov	r4, r1
 8012d8a:	b1a1      	cbz	r1, 8012db6 <rmw_get_gid_for_client+0x32>
 8012d8c:	4605      	mov	r5, r0
 8012d8e:	6800      	ldr	r0, [r0, #0]
 8012d90:	b120      	cbz	r0, 8012d9c <rmw_get_gid_for_client+0x18>
 8012d92:	4b0a      	ldr	r3, [pc, #40]	@ (8012dbc <rmw_get_gid_for_client+0x38>)
 8012d94:	6819      	ldr	r1, [r3, #0]
 8012d96:	f7ed fa23 	bl	80001e0 <strcmp>
 8012d9a:	b940      	cbnz	r0, 8012dae <rmw_get_gid_for_client+0x2a>
 8012d9c:	686b      	ldr	r3, [r5, #4]
 8012d9e:	2000      	movs	r0, #0
 8012da0:	6060      	str	r0, [r4, #4]
 8012da2:	60a0      	str	r0, [r4, #8]
 8012da4:	60e0      	str	r0, [r4, #12]
 8012da6:	6120      	str	r0, [r4, #16]
 8012da8:	691b      	ldr	r3, [r3, #16]
 8012daa:	6063      	str	r3, [r4, #4]
 8012dac:	bd38      	pop	{r3, r4, r5, pc}
 8012dae:	200c      	movs	r0, #12
 8012db0:	bd38      	pop	{r3, r4, r5, pc}
 8012db2:	200b      	movs	r0, #11
 8012db4:	4770      	bx	lr
 8012db6:	200b      	movs	r0, #11
 8012db8:	bd38      	pop	{r3, r4, r5, pc}
 8012dba:	bf00      	nop
 8012dbc:	08019f04 	.word	0x08019f04

08012dc0 <rmw_get_implementation_identifier>:
 8012dc0:	4b01      	ldr	r3, [pc, #4]	@ (8012dc8 <rmw_get_implementation_identifier+0x8>)
 8012dc2:	6818      	ldr	r0, [r3, #0]
 8012dc4:	4770      	bx	lr
 8012dc6:	bf00      	nop
 8012dc8:	08019f04 	.word	0x08019f04

08012dcc <rmw_init_options_init>:
 8012dcc:	b084      	sub	sp, #16
 8012dce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012dd0:	b083      	sub	sp, #12
 8012dd2:	ad09      	add	r5, sp, #36	@ 0x24
 8012dd4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8012dd8:	b130      	cbz	r0, 8012de8 <rmw_init_options_init+0x1c>
 8012dda:	4604      	mov	r4, r0
 8012ddc:	4628      	mov	r0, r5
 8012dde:	f7f7 fc9f 	bl	800a720 <rcutils_allocator_is_valid>
 8012de2:	b108      	cbz	r0, 8012de8 <rmw_init_options_init+0x1c>
 8012de4:	68a6      	ldr	r6, [r4, #8]
 8012de6:	b12e      	cbz	r6, 8012df4 <rmw_init_options_init+0x28>
 8012de8:	200b      	movs	r0, #11
 8012dea:	b003      	add	sp, #12
 8012dec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012df0:	b004      	add	sp, #16
 8012df2:	4770      	bx	lr
 8012df4:	2200      	movs	r2, #0
 8012df6:	2300      	movs	r3, #0
 8012df8:	e9c4 2300 	strd	r2, r3, [r4]
 8012dfc:	4b20      	ldr	r3, [pc, #128]	@ (8012e80 <rmw_init_options_init+0xb4>)
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	60a3      	str	r3, [r4, #8]
 8012e02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012e04:	f104 0c3c 	add.w	ip, r4, #60	@ 0x3c
 8012e08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012e0c:	466f      	mov	r7, sp
 8012e0e:	682b      	ldr	r3, [r5, #0]
 8012e10:	f8cc 3000 	str.w	r3, [ip]
 8012e14:	4638      	mov	r0, r7
 8012e16:	63a6      	str	r6, [r4, #56]	@ 0x38
 8012e18:	60e6      	str	r6, [r4, #12]
 8012e1a:	f004 f8a9 	bl	8016f70 <rmw_get_default_security_options>
 8012e1e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8012e22:	f104 0310 	add.w	r3, r4, #16
 8012e26:	e883 0003 	stmia.w	r3, {r0, r1}
 8012e2a:	2203      	movs	r2, #3
 8012e2c:	4815      	ldr	r0, [pc, #84]	@ (8012e84 <rmw_init_options_init+0xb8>)
 8012e2e:	4916      	ldr	r1, [pc, #88]	@ (8012e88 <rmw_init_options_init+0xbc>)
 8012e30:	f7f7 ffec 	bl	800ae0c <rmw_uxrce_init_init_options_impl_memory>
 8012e34:	4813      	ldr	r0, [pc, #76]	@ (8012e84 <rmw_init_options_init+0xb8>)
 8012e36:	f7ff ff3d 	bl	8012cb4 <get_memory>
 8012e3a:	b1f0      	cbz	r0, 8012e7a <rmw_init_options_init+0xae>
 8012e3c:	4a13      	ldr	r2, [pc, #76]	@ (8012e8c <rmw_init_options_init+0xc0>)
 8012e3e:	6883      	ldr	r3, [r0, #8]
 8012e40:	6851      	ldr	r1, [r2, #4]
 8012e42:	7810      	ldrb	r0, [r2, #0]
 8012e44:	6523      	str	r3, [r4, #80]	@ 0x50
 8012e46:	7418      	strb	r0, [r3, #16]
 8012e48:	6159      	str	r1, [r3, #20]
 8012e4a:	68d1      	ldr	r1, [r2, #12]
 8012e4c:	61d9      	str	r1, [r3, #28]
 8012e4e:	6911      	ldr	r1, [r2, #16]
 8012e50:	6219      	str	r1, [r3, #32]
 8012e52:	6951      	ldr	r1, [r2, #20]
 8012e54:	6892      	ldr	r2, [r2, #8]
 8012e56:	619a      	str	r2, [r3, #24]
 8012e58:	6259      	str	r1, [r3, #36]	@ 0x24
 8012e5a:	f7fa febf 	bl	800dbdc <uxr_nanos>
 8012e5e:	f004 fbc9 	bl	80175f4 <srand>
 8012e62:	f004 fbf5 	bl	8017650 <rand>
 8012e66:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8012e68:	6298      	str	r0, [r3, #40]	@ 0x28
 8012e6a:	2800      	cmp	r0, #0
 8012e6c:	d0f9      	beq.n	8012e62 <rmw_init_options_init+0x96>
 8012e6e:	2000      	movs	r0, #0
 8012e70:	b003      	add	sp, #12
 8012e72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012e76:	b004      	add	sp, #16
 8012e78:	4770      	bx	lr
 8012e7a:	2001      	movs	r0, #1
 8012e7c:	e7b5      	b.n	8012dea <rmw_init_options_init+0x1e>
 8012e7e:	bf00      	nop
 8012e80:	08019f04 	.word	0x08019f04
 8012e84:	2000c300 	.word	0x2000c300
 8012e88:	2000c27c 	.word	0x2000c27c
 8012e8c:	2000c150 	.word	0x2000c150

08012e90 <rmw_init_options_copy>:
 8012e90:	2800      	cmp	r0, #0
 8012e92:	d03e      	beq.n	8012f12 <rmw_init_options_copy+0x82>
 8012e94:	b570      	push	{r4, r5, r6, lr}
 8012e96:	460d      	mov	r5, r1
 8012e98:	b149      	cbz	r1, 8012eae <rmw_init_options_copy+0x1e>
 8012e9a:	4604      	mov	r4, r0
 8012e9c:	6880      	ldr	r0, [r0, #8]
 8012e9e:	b120      	cbz	r0, 8012eaa <rmw_init_options_copy+0x1a>
 8012ea0:	4b21      	ldr	r3, [pc, #132]	@ (8012f28 <rmw_init_options_copy+0x98>)
 8012ea2:	6819      	ldr	r1, [r3, #0]
 8012ea4:	f7ed f99c 	bl	80001e0 <strcmp>
 8012ea8:	bb78      	cbnz	r0, 8012f0a <rmw_init_options_copy+0x7a>
 8012eaa:	68ab      	ldr	r3, [r5, #8]
 8012eac:	b11b      	cbz	r3, 8012eb6 <rmw_init_options_copy+0x26>
 8012eae:	f04f 0c0b 	mov.w	ip, #11
 8012eb2:	4660      	mov	r0, ip
 8012eb4:	bd70      	pop	{r4, r5, r6, pc}
 8012eb6:	2258      	movs	r2, #88	@ 0x58
 8012eb8:	4621      	mov	r1, r4
 8012eba:	4628      	mov	r0, r5
 8012ebc:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 8012ec0:	f005 f88d 	bl	8017fde <memcpy>
 8012ec4:	4630      	mov	r0, r6
 8012ec6:	f7f7 fc2b 	bl	800a720 <rcutils_allocator_is_valid>
 8012eca:	2800      	cmp	r0, #0
 8012ecc:	d0ef      	beq.n	8012eae <rmw_init_options_copy+0x1e>
 8012ece:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8012ed0:	b138      	cbz	r0, 8012ee2 <rmw_init_options_copy+0x52>
 8012ed2:	f105 0238 	add.w	r2, r5, #56	@ 0x38
 8012ed6:	4631      	mov	r1, r6
 8012ed8:	f004 f816 	bl	8016f08 <rmw_enclave_options_copy>
 8012edc:	4684      	mov	ip, r0
 8012ede:	2800      	cmp	r0, #0
 8012ee0:	d1e7      	bne.n	8012eb2 <rmw_init_options_copy+0x22>
 8012ee2:	4812      	ldr	r0, [pc, #72]	@ (8012f2c <rmw_init_options_copy+0x9c>)
 8012ee4:	f7ff fee6 	bl	8012cb4 <get_memory>
 8012ee8:	b1b8      	cbz	r0, 8012f1a <rmw_init_options_copy+0x8a>
 8012eea:	6883      	ldr	r3, [r0, #8]
 8012eec:	652b      	str	r3, [r5, #80]	@ 0x50
 8012eee:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 8012ef0:	3510      	adds	r5, #16
 8012ef2:	f103 0410 	add.w	r4, r3, #16
 8012ef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ef8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012efa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012efe:	f04f 0c00 	mov.w	ip, #0
 8012f02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012f06:	4660      	mov	r0, ip
 8012f08:	bd70      	pop	{r4, r5, r6, pc}
 8012f0a:	f04f 0c0c 	mov.w	ip, #12
 8012f0e:	4660      	mov	r0, ip
 8012f10:	bd70      	pop	{r4, r5, r6, pc}
 8012f12:	f04f 0c0b 	mov.w	ip, #11
 8012f16:	4660      	mov	r0, ip
 8012f18:	4770      	bx	lr
 8012f1a:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8012f1c:	4631      	mov	r1, r6
 8012f1e:	f004 f815 	bl	8016f4c <rmw_enclave_options_fini>
 8012f22:	f04f 0c01 	mov.w	ip, #1
 8012f26:	e7c4      	b.n	8012eb2 <rmw_init_options_copy+0x22>
 8012f28:	08019f04 	.word	0x08019f04
 8012f2c:	2000c300 	.word	0x2000c300

08012f30 <rmw_init_options_fini>:
 8012f30:	2800      	cmp	r0, #0
 8012f32:	d035      	beq.n	8012fa0 <rmw_init_options_fini+0x70>
 8012f34:	b530      	push	{r4, r5, lr}
 8012f36:	f100 053c 	add.w	r5, r0, #60	@ 0x3c
 8012f3a:	b097      	sub	sp, #92	@ 0x5c
 8012f3c:	4604      	mov	r4, r0
 8012f3e:	4628      	mov	r0, r5
 8012f40:	f7f7 fbee 	bl	800a720 <rcutils_allocator_is_valid>
 8012f44:	b320      	cbz	r0, 8012f90 <rmw_init_options_fini+0x60>
 8012f46:	68a0      	ldr	r0, [r4, #8]
 8012f48:	b120      	cbz	r0, 8012f54 <rmw_init_options_fini+0x24>
 8012f4a:	4b16      	ldr	r3, [pc, #88]	@ (8012fa4 <rmw_init_options_fini+0x74>)
 8012f4c:	6819      	ldr	r1, [r3, #0]
 8012f4e:	f7ed f947 	bl	80001e0 <strcmp>
 8012f52:	bb18      	cbnz	r0, 8012f9c <rmw_init_options_fini+0x6c>
 8012f54:	4b14      	ldr	r3, [pc, #80]	@ (8012fa8 <rmw_init_options_fini+0x78>)
 8012f56:	6819      	ldr	r1, [r3, #0]
 8012f58:	b1e9      	cbz	r1, 8012f96 <rmw_init_options_fini+0x66>
 8012f5a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8012f5c:	e001      	b.n	8012f62 <rmw_init_options_fini+0x32>
 8012f5e:	6849      	ldr	r1, [r1, #4]
 8012f60:	b1c9      	cbz	r1, 8012f96 <rmw_init_options_fini+0x66>
 8012f62:	688b      	ldr	r3, [r1, #8]
 8012f64:	429a      	cmp	r2, r3
 8012f66:	d1fa      	bne.n	8012f5e <rmw_init_options_fini+0x2e>
 8012f68:	480f      	ldr	r0, [pc, #60]	@ (8012fa8 <rmw_init_options_fini+0x78>)
 8012f6a:	f7ff feb3 	bl	8012cd4 <put_memory>
 8012f6e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8012f70:	b118      	cbz	r0, 8012f7a <rmw_init_options_fini+0x4a>
 8012f72:	4629      	mov	r1, r5
 8012f74:	f003 ffea 	bl	8016f4c <rmw_enclave_options_fini>
 8012f78:	b940      	cbnz	r0, 8012f8c <rmw_init_options_fini+0x5c>
 8012f7a:	4668      	mov	r0, sp
 8012f7c:	f7ff fca6 	bl	80128cc <rmw_get_zero_initialized_init_options>
 8012f80:	2258      	movs	r2, #88	@ 0x58
 8012f82:	4669      	mov	r1, sp
 8012f84:	4620      	mov	r0, r4
 8012f86:	f005 f82a 	bl	8017fde <memcpy>
 8012f8a:	2000      	movs	r0, #0
 8012f8c:	b017      	add	sp, #92	@ 0x5c
 8012f8e:	bd30      	pop	{r4, r5, pc}
 8012f90:	200b      	movs	r0, #11
 8012f92:	b017      	add	sp, #92	@ 0x5c
 8012f94:	bd30      	pop	{r4, r5, pc}
 8012f96:	2001      	movs	r0, #1
 8012f98:	b017      	add	sp, #92	@ 0x5c
 8012f9a:	bd30      	pop	{r4, r5, pc}
 8012f9c:	200c      	movs	r0, #12
 8012f9e:	e7f5      	b.n	8012f8c <rmw_init_options_fini+0x5c>
 8012fa0:	200b      	movs	r0, #11
 8012fa2:	4770      	bx	lr
 8012fa4:	08019f04 	.word	0x08019f04
 8012fa8:	2000c300 	.word	0x2000c300

08012fac <rmw_init>:
 8012fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012fb0:	b083      	sub	sp, #12
 8012fb2:	2800      	cmp	r0, #0
 8012fb4:	f000 80d4 	beq.w	8013160 <rmw_init+0x1b4>
 8012fb8:	460e      	mov	r6, r1
 8012fba:	2900      	cmp	r1, #0
 8012fbc:	f000 80d0 	beq.w	8013160 <rmw_init+0x1b4>
 8012fc0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8012fc2:	4605      	mov	r5, r0
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	f000 80cb 	beq.w	8013160 <rmw_init+0x1b4>
 8012fca:	4b77      	ldr	r3, [pc, #476]	@ (80131a8 <rmw_init+0x1fc>)
 8012fcc:	6880      	ldr	r0, [r0, #8]
 8012fce:	681f      	ldr	r7, [r3, #0]
 8012fd0:	b128      	cbz	r0, 8012fde <rmw_init+0x32>
 8012fd2:	4639      	mov	r1, r7
 8012fd4:	f7ed f904 	bl	80001e0 <strcmp>
 8012fd8:	2800      	cmp	r0, #0
 8012fda:	f040 80d3 	bne.w	8013184 <rmw_init+0x1d8>
 8012fde:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012fe2:	4c72      	ldr	r4, [pc, #456]	@ (80131ac <rmw_init+0x200>)
 8012fe4:	4972      	ldr	r1, [pc, #456]	@ (80131b0 <rmw_init+0x204>)
 8012fe6:	4873      	ldr	r0, [pc, #460]	@ (80131b4 <rmw_init+0x208>)
 8012fe8:	60b7      	str	r7, [r6, #8]
 8012fea:	e9c6 2300 	strd	r2, r3, [r6]
 8012fee:	68eb      	ldr	r3, [r5, #12]
 8012ff0:	66b3      	str	r3, [r6, #104]	@ 0x68
 8012ff2:	2201      	movs	r2, #1
 8012ff4:	f7f7 feaa 	bl	800ad4c <rmw_uxrce_init_session_memory>
 8012ff8:	4620      	mov	r0, r4
 8012ffa:	496f      	ldr	r1, [pc, #444]	@ (80131b8 <rmw_init+0x20c>)
 8012ffc:	2204      	movs	r2, #4
 8012ffe:	f7f7 fee5 	bl	800adcc <rmw_uxrce_init_static_input_buffer_memory>
 8013002:	f04f 0800 	mov.w	r8, #0
 8013006:	486b      	ldr	r0, [pc, #428]	@ (80131b4 <rmw_init+0x208>)
 8013008:	f884 800d 	strb.w	r8, [r4, #13]
 801300c:	f7ff fe52 	bl	8012cb4 <get_memory>
 8013010:	2800      	cmp	r0, #0
 8013012:	f000 80b2 	beq.w	801317a <rmw_init+0x1ce>
 8013016:	6884      	ldr	r4, [r0, #8]
 8013018:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 801301a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801301c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8013020:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8013024:	9101      	str	r1, [sp, #4]
 8013026:	6a00      	ldr	r0, [r0, #32]
 8013028:	9000      	str	r0, [sp, #0]
 801302a:	f104 0910 	add.w	r9, r4, #16
 801302e:	4661      	mov	r1, ip
 8013030:	4648      	mov	r0, r9
 8013032:	f001 fed1 	bl	8014dd8 <uxr_set_custom_transport_callbacks>
 8013036:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801303a:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 801303e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8013042:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8013046:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801304a:	495c      	ldr	r1, [pc, #368]	@ (80131bc <rmw_init+0x210>)
 801304c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8013050:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8013054:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8013058:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 801305c:	4858      	ldr	r0, [pc, #352]	@ (80131c0 <rmw_init+0x214>)
 801305e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8013062:	2201      	movs	r2, #1
 8013064:	66f4      	str	r4, [r6, #108]	@ 0x6c
 8013066:	f7f7 fe51 	bl	800ad0c <rmw_uxrce_init_node_memory>
 801306a:	4956      	ldr	r1, [pc, #344]	@ (80131c4 <rmw_init+0x218>)
 801306c:	4856      	ldr	r0, [pc, #344]	@ (80131c8 <rmw_init+0x21c>)
 801306e:	2205      	movs	r2, #5
 8013070:	f7f7 fe2c 	bl	800accc <rmw_uxrce_init_subscription_memory>
 8013074:	4955      	ldr	r1, [pc, #340]	@ (80131cc <rmw_init+0x220>)
 8013076:	4856      	ldr	r0, [pc, #344]	@ (80131d0 <rmw_init+0x224>)
 8013078:	220a      	movs	r2, #10
 801307a:	f7f7 fe07 	bl	800ac8c <rmw_uxrce_init_publisher_memory>
 801307e:	4955      	ldr	r1, [pc, #340]	@ (80131d4 <rmw_init+0x228>)
 8013080:	4855      	ldr	r0, [pc, #340]	@ (80131d8 <rmw_init+0x22c>)
 8013082:	2201      	movs	r2, #1
 8013084:	f7f7 fdc2 	bl	800ac0c <rmw_uxrce_init_service_memory>
 8013088:	4954      	ldr	r1, [pc, #336]	@ (80131dc <rmw_init+0x230>)
 801308a:	4855      	ldr	r0, [pc, #340]	@ (80131e0 <rmw_init+0x234>)
 801308c:	2201      	movs	r2, #1
 801308e:	f7f7 fddd 	bl	800ac4c <rmw_uxrce_init_client_memory>
 8013092:	4954      	ldr	r1, [pc, #336]	@ (80131e4 <rmw_init+0x238>)
 8013094:	4854      	ldr	r0, [pc, #336]	@ (80131e8 <rmw_init+0x23c>)
 8013096:	220f      	movs	r2, #15
 8013098:	f7f7 fe78 	bl	800ad8c <rmw_uxrce_init_topic_memory>
 801309c:	4953      	ldr	r1, [pc, #332]	@ (80131ec <rmw_init+0x240>)
 801309e:	4854      	ldr	r0, [pc, #336]	@ (80131f0 <rmw_init+0x244>)
 80130a0:	2203      	movs	r2, #3
 80130a2:	f7f7 feb3 	bl	800ae0c <rmw_uxrce_init_init_options_impl_memory>
 80130a6:	4953      	ldr	r1, [pc, #332]	@ (80131f4 <rmw_init+0x248>)
 80130a8:	4853      	ldr	r0, [pc, #332]	@ (80131f8 <rmw_init+0x24c>)
 80130aa:	2204      	movs	r2, #4
 80130ac:	f7f7 fece 	bl	800ae4c <rmw_uxrce_init_wait_set_memory>
 80130b0:	4952      	ldr	r1, [pc, #328]	@ (80131fc <rmw_init+0x250>)
 80130b2:	4853      	ldr	r0, [pc, #332]	@ (8013200 <rmw_init+0x254>)
 80130b4:	2204      	movs	r2, #4
 80130b6:	f7f7 fee9 	bl	800ae8c <rmw_uxrce_init_guard_condition_memory>
 80130ba:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 80130bc:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 80130be:	4642      	mov	r2, r8
 80130c0:	f000 fd92 	bl	8013be8 <rmw_uxrce_transport_init>
 80130c4:	4607      	mov	r7, r0
 80130c6:	2800      	cmp	r0, #0
 80130c8:	d161      	bne.n	801318e <rmw_init+0x1e2>
 80130ca:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80130cc:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 80130d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80130d2:	4628      	mov	r0, r5
 80130d4:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80130d8:	f7f9 fbea 	bl	800c8b0 <uxr_init_session>
 80130dc:	4628      	mov	r0, r5
 80130de:	4949      	ldr	r1, [pc, #292]	@ (8013204 <rmw_init+0x258>)
 80130e0:	4622      	mov	r2, r4
 80130e2:	f7f9 fc09 	bl	800c8f8 <uxr_set_topic_callback>
 80130e6:	4628      	mov	r0, r5
 80130e8:	4947      	ldr	r1, [pc, #284]	@ (8013208 <rmw_init+0x25c>)
 80130ea:	463a      	mov	r2, r7
 80130ec:	f7f9 fc00 	bl	800c8f0 <uxr_set_status_callback>
 80130f0:	4628      	mov	r0, r5
 80130f2:	4946      	ldr	r1, [pc, #280]	@ (801320c <rmw_init+0x260>)
 80130f4:	463a      	mov	r2, r7
 80130f6:	f7f9 fc03 	bl	800c900 <uxr_set_request_callback>
 80130fa:	4628      	mov	r0, r5
 80130fc:	4944      	ldr	r1, [pc, #272]	@ (8013210 <rmw_init+0x264>)
 80130fe:	463a      	mov	r2, r7
 8013100:	f7f9 fc02 	bl	800c908 <uxr_set_reply_callback>
 8013104:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013108:	2304      	movs	r3, #4
 801310a:	0092      	lsls	r2, r2, #2
 801310c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8013110:	4628      	mov	r0, r5
 8013112:	f7f9 fc27 	bl	800c964 <uxr_create_input_reliable_stream>
 8013116:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801311a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801311e:	2304      	movs	r3, #4
 8013120:	0092      	lsls	r2, r2, #2
 8013122:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8013126:	4628      	mov	r0, r5
 8013128:	f7f9 fc04 	bl	800c934 <uxr_create_output_reliable_stream>
 801312c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8013130:	4628      	mov	r0, r5
 8013132:	f7f9 fc11 	bl	800c958 <uxr_create_input_best_effort_stream>
 8013136:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 801313a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801313e:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8013142:	3114      	adds	r1, #20
 8013144:	4628      	mov	r0, r5
 8013146:	f7f9 fbe3 	bl	800c910 <uxr_create_output_best_effort_stream>
 801314a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801314e:	4628      	mov	r0, r5
 8013150:	f7fa f97a 	bl	800d448 <uxr_create_session>
 8013154:	4605      	mov	r5, r0
 8013156:	b140      	cbz	r0, 801316a <rmw_init+0x1be>
 8013158:	4638      	mov	r0, r7
 801315a:	b003      	add	sp, #12
 801315c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013160:	270b      	movs	r7, #11
 8013162:	4638      	mov	r0, r7
 8013164:	b003      	add	sp, #12
 8013166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801316a:	4648      	mov	r0, r9
 801316c:	f001 fe76 	bl	8014e5c <uxr_close_custom_transport>
 8013170:	4810      	ldr	r0, [pc, #64]	@ (80131b4 <rmw_init+0x208>)
 8013172:	4621      	mov	r1, r4
 8013174:	f7ff fdae 	bl	8012cd4 <put_memory>
 8013178:	66f5      	str	r5, [r6, #108]	@ 0x6c
 801317a:	2701      	movs	r7, #1
 801317c:	4638      	mov	r0, r7
 801317e:	b003      	add	sp, #12
 8013180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013184:	270c      	movs	r7, #12
 8013186:	4638      	mov	r0, r7
 8013188:	b003      	add	sp, #12
 801318a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801318e:	4648      	mov	r0, r9
 8013190:	f001 fe64 	bl	8014e5c <uxr_close_custom_transport>
 8013194:	4807      	ldr	r0, [pc, #28]	@ (80131b4 <rmw_init+0x208>)
 8013196:	4621      	mov	r1, r4
 8013198:	f7ff fd9c 	bl	8012cd4 <put_memory>
 801319c:	4638      	mov	r0, r7
 801319e:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 80131a2:	b003      	add	sp, #12
 80131a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131a8:	08019f04 	.word	0x08019f04
 80131ac:	2000e410 	.word	0x2000e410
 80131b0:	2000f508 	.word	0x2000f508
 80131b4:	20010ab0 	.word	0x20010ab0
 80131b8:	2000c310 	.word	0x2000c310
 80131bc:	2000f450 	.word	0x2000f450
 80131c0:	2000f4f4 	.word	0x2000f4f4
 80131c4:	2000e788 	.word	0x2000e788
 80131c8:	2000ebc0 	.word	0x2000ebc0
 80131cc:	2000ebd0 	.word	0x2000ebd0
 80131d0:	2000f440 	.word	0x2000f440
 80131d4:	2000e6b0 	.word	0x2000e6b0
 80131d8:	2000e778 	.word	0x2000e778
 80131dc:	2000e5d8 	.word	0x2000e5d8
 80131e0:	2000e6a0 	.word	0x2000e6a0
 80131e4:	2000e420 	.word	0x2000e420
 80131e8:	2000e5c4 	.word	0x2000e5c4
 80131ec:	2000c27c 	.word	0x2000c27c
 80131f0:	2000c300 	.word	0x2000c300
 80131f4:	2000c1fc 	.word	0x2000c1fc
 80131f8:	2000c26c 	.word	0x2000c26c
 80131fc:	2000c16c 	.word	0x2000c16c
 8013200:	2000c1ec 	.word	0x2000c1ec
 8013204:	08016f81 	.word	0x08016f81
 8013208:	08016f79 	.word	0x08016f79
 801320c:	08017019 	.word	0x08017019
 8013210:	080170b5 	.word	0x080170b5

08013214 <rmw_context_fini>:
 8013214:	4b17      	ldr	r3, [pc, #92]	@ (8013274 <rmw_context_fini+0x60>)
 8013216:	b570      	push	{r4, r5, r6, lr}
 8013218:	681c      	ldr	r4, [r3, #0]
 801321a:	4605      	mov	r5, r0
 801321c:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 801321e:	b33c      	cbz	r4, 8013270 <rmw_context_fini+0x5c>
 8013220:	2600      	movs	r6, #0
 8013222:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 8013226:	691a      	ldr	r2, [r3, #16]
 8013228:	4282      	cmp	r2, r0
 801322a:	d018      	beq.n	801325e <rmw_context_fini+0x4a>
 801322c:	2c00      	cmp	r4, #0
 801322e:	d1f8      	bne.n	8013222 <rmw_context_fini+0xe>
 8013230:	b188      	cbz	r0, 8013256 <rmw_context_fini+0x42>
 8013232:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013236:	789b      	ldrb	r3, [r3, #2]
 8013238:	2b01      	cmp	r3, #1
 801323a:	bf14      	ite	ne
 801323c:	210a      	movne	r1, #10
 801323e:	2100      	moveq	r1, #0
 8013240:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013244:	f7fa f8d8 	bl	800d3f8 <uxr_delete_session_retries>
 8013248:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 801324a:	f7f7 fe3f 	bl	800aecc <rmw_uxrce_fini_session_memory>
 801324e:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8013250:	3010      	adds	r0, #16
 8013252:	f001 fe03 	bl	8014e5c <uxr_close_custom_transport>
 8013256:	2300      	movs	r3, #0
 8013258:	66eb      	str	r3, [r5, #108]	@ 0x6c
 801325a:	4630      	mov	r0, r6
 801325c:	bd70      	pop	{r4, r5, r6, pc}
 801325e:	f103 0018 	add.w	r0, r3, #24
 8013262:	f000 f911 	bl	8013488 <rmw_destroy_node>
 8013266:	4606      	mov	r6, r0
 8013268:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 801326a:	2c00      	cmp	r4, #0
 801326c:	d1d9      	bne.n	8013222 <rmw_context_fini+0xe>
 801326e:	e7df      	b.n	8013230 <rmw_context_fini+0x1c>
 8013270:	4626      	mov	r6, r4
 8013272:	e7dd      	b.n	8013230 <rmw_context_fini+0x1c>
 8013274:	2000f4f4 	.word	0x2000f4f4

08013278 <create_topic>:
 8013278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801327c:	4604      	mov	r4, r0
 801327e:	b084      	sub	sp, #16
 8013280:	4824      	ldr	r0, [pc, #144]	@ (8013314 <create_topic+0x9c>)
 8013282:	460f      	mov	r7, r1
 8013284:	4616      	mov	r6, r2
 8013286:	f7ff fd15 	bl	8012cb4 <get_memory>
 801328a:	2800      	cmp	r0, #0
 801328c:	d03c      	beq.n	8013308 <create_topic+0x90>
 801328e:	6923      	ldr	r3, [r4, #16]
 8013290:	6885      	ldr	r5, [r0, #8]
 8013292:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 801331c <create_topic+0xa4>
 8013296:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801329a:	e9c5 6405 	strd	r6, r4, [r5, #20]
 801329e:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80132a2:	1c42      	adds	r2, r0, #1
 80132a4:	2102      	movs	r1, #2
 80132a6:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80132aa:	f7f9 fa43 	bl	800c734 <uxr_object_id>
 80132ae:	223c      	movs	r2, #60	@ 0x3c
 80132b0:	6128      	str	r0, [r5, #16]
 80132b2:	4641      	mov	r1, r8
 80132b4:	4638      	mov	r0, r7
 80132b6:	f7f7 fff5 	bl	800b2a4 <generate_topic_name>
 80132ba:	b310      	cbz	r0, 8013302 <create_topic+0x8a>
 80132bc:	4f16      	ldr	r7, [pc, #88]	@ (8013318 <create_topic+0xa0>)
 80132be:	4630      	mov	r0, r6
 80132c0:	2264      	movs	r2, #100	@ 0x64
 80132c2:	4639      	mov	r1, r7
 80132c4:	f7f7 ffbe 	bl	800b244 <generate_type_name>
 80132c8:	b1d8      	cbz	r0, 8013302 <create_topic+0x8a>
 80132ca:	6920      	ldr	r0, [r4, #16]
 80132cc:	2306      	movs	r3, #6
 80132ce:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80132d2:	f8cd 8000 	str.w	r8, [sp]
 80132d6:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80132da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80132de:	6811      	ldr	r1, [r2, #0]
 80132e0:	6963      	ldr	r3, [r4, #20]
 80132e2:	692a      	ldr	r2, [r5, #16]
 80132e4:	f7f9 f8ca 	bl	800c47c <uxr_buffer_create_topic_bin>
 80132e8:	4602      	mov	r2, r0
 80132ea:	6920      	ldr	r0, [r4, #16]
 80132ec:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80132f0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80132f4:	f7f7 ff6a 	bl	800b1cc <run_xrce_session>
 80132f8:	b118      	cbz	r0, 8013302 <create_topic+0x8a>
 80132fa:	4628      	mov	r0, r5
 80132fc:	b004      	add	sp, #16
 80132fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013302:	4628      	mov	r0, r5
 8013304:	f7f7 fe58 	bl	800afb8 <rmw_uxrce_fini_topic_memory>
 8013308:	2500      	movs	r5, #0
 801330a:	4628      	mov	r0, r5
 801330c:	b004      	add	sp, #16
 801330e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013312:	bf00      	nop
 8013314:	2000e5c4 	.word	0x2000e5c4
 8013318:	20010cbc 	.word	0x20010cbc
 801331c:	20010d20 	.word	0x20010d20

08013320 <destroy_topic>:
 8013320:	b538      	push	{r3, r4, r5, lr}
 8013322:	6984      	ldr	r4, [r0, #24]
 8013324:	b1d4      	cbz	r4, 801335c <destroy_topic+0x3c>
 8013326:	4605      	mov	r5, r0
 8013328:	6920      	ldr	r0, [r4, #16]
 801332a:	692a      	ldr	r2, [r5, #16]
 801332c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013330:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013334:	6819      	ldr	r1, [r3, #0]
 8013336:	f7f9 f825 	bl	800c384 <uxr_buffer_delete_entity>
 801333a:	4602      	mov	r2, r0
 801333c:	6920      	ldr	r0, [r4, #16]
 801333e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013342:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013346:	f7f7 ff41 	bl	800b1cc <run_xrce_session>
 801334a:	f080 0401 	eor.w	r4, r0, #1
 801334e:	b2e4      	uxtb	r4, r4
 8013350:	4628      	mov	r0, r5
 8013352:	0064      	lsls	r4, r4, #1
 8013354:	f7f7 fe30 	bl	800afb8 <rmw_uxrce_fini_topic_memory>
 8013358:	4620      	mov	r0, r4
 801335a:	bd38      	pop	{r3, r4, r5, pc}
 801335c:	2401      	movs	r4, #1
 801335e:	4620      	mov	r0, r4
 8013360:	bd38      	pop	{r3, r4, r5, pc}
 8013362:	bf00      	nop

08013364 <create_node>:
 8013364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013368:	b083      	sub	sp, #12
 801336a:	2b00      	cmp	r3, #0
 801336c:	d063      	beq.n	8013436 <create_node+0xd2>
 801336e:	4606      	mov	r6, r0
 8013370:	4836      	ldr	r0, [pc, #216]	@ (801344c <create_node+0xe8>)
 8013372:	460f      	mov	r7, r1
 8013374:	4690      	mov	r8, r2
 8013376:	461d      	mov	r5, r3
 8013378:	f7ff fc9c 	bl	8012cb4 <get_memory>
 801337c:	2800      	cmp	r0, #0
 801337e:	d05a      	beq.n	8013436 <create_node+0xd2>
 8013380:	6884      	ldr	r4, [r0, #8]
 8013382:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8013384:	6123      	str	r3, [r4, #16]
 8013386:	f7ff fd1b 	bl	8012dc0 <rmw_get_implementation_identifier>
 801338a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801338e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8013392:	f8c4 9020 	str.w	r9, [r4, #32]
 8013396:	4630      	mov	r0, r6
 8013398:	f7ec ff82 	bl	80002a0 <strlen>
 801339c:	1c42      	adds	r2, r0, #1
 801339e:	2a3c      	cmp	r2, #60	@ 0x3c
 80133a0:	f104 0518 	add.w	r5, r4, #24
 80133a4:	d844      	bhi.n	8013430 <create_node+0xcc>
 80133a6:	4648      	mov	r0, r9
 80133a8:	4631      	mov	r1, r6
 80133aa:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80133ae:	f004 fe16 	bl	8017fde <memcpy>
 80133b2:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 80133b6:	4638      	mov	r0, r7
 80133b8:	f7ec ff72 	bl	80002a0 <strlen>
 80133bc:	1c42      	adds	r2, r0, #1
 80133be:	2a3c      	cmp	r2, #60	@ 0x3c
 80133c0:	d836      	bhi.n	8013430 <create_node+0xcc>
 80133c2:	4639      	mov	r1, r7
 80133c4:	4648      	mov	r0, r9
 80133c6:	f004 fe0a 	bl	8017fde <memcpy>
 80133ca:	6923      	ldr	r3, [r4, #16]
 80133cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80133d0:	2101      	movs	r1, #1
 80133d2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 80133d6:	1842      	adds	r2, r0, r1
 80133d8:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80133dc:	f7f9 f9aa 	bl	800c734 <uxr_object_id>
 80133e0:	6160      	str	r0, [r4, #20]
 80133e2:	783b      	ldrb	r3, [r7, #0]
 80133e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80133e6:	d128      	bne.n	801343a <create_node+0xd6>
 80133e8:	787b      	ldrb	r3, [r7, #1]
 80133ea:	bb33      	cbnz	r3, 801343a <create_node+0xd6>
 80133ec:	4a18      	ldr	r2, [pc, #96]	@ (8013450 <create_node+0xec>)
 80133ee:	4819      	ldr	r0, [pc, #100]	@ (8013454 <create_node+0xf0>)
 80133f0:	4633      	mov	r3, r6
 80133f2:	213c      	movs	r1, #60	@ 0x3c
 80133f4:	f004 fba4 	bl	8017b40 <sniprintf>
 80133f8:	6920      	ldr	r0, [r4, #16]
 80133fa:	4916      	ldr	r1, [pc, #88]	@ (8013454 <create_node+0xf0>)
 80133fc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013400:	9100      	str	r1, [sp, #0]
 8013402:	2106      	movs	r1, #6
 8013404:	9101      	str	r1, [sp, #4]
 8013406:	6811      	ldr	r1, [r2, #0]
 8013408:	6962      	ldr	r2, [r4, #20]
 801340a:	fa1f f388 	uxth.w	r3, r8
 801340e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013412:	f7f9 f801 	bl	800c418 <uxr_buffer_create_participant_bin>
 8013416:	4602      	mov	r2, r0
 8013418:	6920      	ldr	r0, [r4, #16]
 801341a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801341e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013422:	f7f7 fed3 	bl	800b1cc <run_xrce_session>
 8013426:	b118      	cbz	r0, 8013430 <create_node+0xcc>
 8013428:	4628      	mov	r0, r5
 801342a:	b003      	add	sp, #12
 801342c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013430:	4628      	mov	r0, r5
 8013432:	f7f7 fd51 	bl	800aed8 <rmw_uxrce_fini_node_memory>
 8013436:	2500      	movs	r5, #0
 8013438:	e7f6      	b.n	8013428 <create_node+0xc4>
 801343a:	4a07      	ldr	r2, [pc, #28]	@ (8013458 <create_node+0xf4>)
 801343c:	9600      	str	r6, [sp, #0]
 801343e:	463b      	mov	r3, r7
 8013440:	213c      	movs	r1, #60	@ 0x3c
 8013442:	4804      	ldr	r0, [pc, #16]	@ (8013454 <create_node+0xf0>)
 8013444:	f004 fb7c 	bl	8017b40 <sniprintf>
 8013448:	e7d6      	b.n	80133f8 <create_node+0x94>
 801344a:	bf00      	nop
 801344c:	2000f4f4 	.word	0x2000f4f4
 8013450:	08019058 	.word	0x08019058
 8013454:	20010d5c 	.word	0x20010d5c
 8013458:	08019258 	.word	0x08019258

0801345c <rmw_create_node>:
 801345c:	b191      	cbz	r1, 8013484 <rmw_create_node+0x28>
 801345e:	b410      	push	{r4}
 8013460:	4614      	mov	r4, r2
 8013462:	780a      	ldrb	r2, [r1, #0]
 8013464:	4603      	mov	r3, r0
 8013466:	4608      	mov	r0, r1
 8013468:	b142      	cbz	r2, 801347c <rmw_create_node+0x20>
 801346a:	b13c      	cbz	r4, 801347c <rmw_create_node+0x20>
 801346c:	7822      	ldrb	r2, [r4, #0]
 801346e:	b12a      	cbz	r2, 801347c <rmw_create_node+0x20>
 8013470:	4621      	mov	r1, r4
 8013472:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8013474:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013478:	f7ff bf74 	b.w	8013364 <create_node>
 801347c:	2000      	movs	r0, #0
 801347e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013482:	4770      	bx	lr
 8013484:	2000      	movs	r0, #0
 8013486:	4770      	bx	lr

08013488 <rmw_destroy_node>:
 8013488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801348a:	b328      	cbz	r0, 80134d8 <rmw_destroy_node+0x50>
 801348c:	4607      	mov	r7, r0
 801348e:	6800      	ldr	r0, [r0, #0]
 8013490:	b120      	cbz	r0, 801349c <rmw_destroy_node+0x14>
 8013492:	4b36      	ldr	r3, [pc, #216]	@ (801356c <rmw_destroy_node+0xe4>)
 8013494:	6819      	ldr	r1, [r3, #0]
 8013496:	f7ec fea3 	bl	80001e0 <strcmp>
 801349a:	b9e8      	cbnz	r0, 80134d8 <rmw_destroy_node+0x50>
 801349c:	687d      	ldr	r5, [r7, #4]
 801349e:	b1dd      	cbz	r5, 80134d8 <rmw_destroy_node+0x50>
 80134a0:	4b33      	ldr	r3, [pc, #204]	@ (8013570 <rmw_destroy_node+0xe8>)
 80134a2:	681c      	ldr	r4, [r3, #0]
 80134a4:	2c00      	cmp	r4, #0
 80134a6:	d05f      	beq.n	8013568 <rmw_destroy_node+0xe0>
 80134a8:	2600      	movs	r6, #0
 80134aa:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80134ae:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80134b2:	429d      	cmp	r5, r3
 80134b4:	d013      	beq.n	80134de <rmw_destroy_node+0x56>
 80134b6:	2c00      	cmp	r4, #0
 80134b8:	d1f7      	bne.n	80134aa <rmw_destroy_node+0x22>
 80134ba:	4b2e      	ldr	r3, [pc, #184]	@ (8013574 <rmw_destroy_node+0xec>)
 80134bc:	681c      	ldr	r4, [r3, #0]
 80134be:	b1c4      	cbz	r4, 80134f2 <rmw_destroy_node+0x6a>
 80134c0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80134c4:	6a0b      	ldr	r3, [r1, #32]
 80134c6:	429d      	cmp	r5, r3
 80134c8:	d1f9      	bne.n	80134be <rmw_destroy_node+0x36>
 80134ca:	317c      	adds	r1, #124	@ 0x7c
 80134cc:	4638      	mov	r0, r7
 80134ce:	f000 fad9 	bl	8013a84 <rmw_destroy_subscription>
 80134d2:	2801      	cmp	r0, #1
 80134d4:	4606      	mov	r6, r0
 80134d6:	d1f2      	bne.n	80134be <rmw_destroy_node+0x36>
 80134d8:	2601      	movs	r6, #1
 80134da:	4630      	mov	r0, r6
 80134dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134de:	3184      	adds	r1, #132	@ 0x84
 80134e0:	4638      	mov	r0, r7
 80134e2:	f7f7 fb21 	bl	800ab28 <rmw_destroy_publisher>
 80134e6:	2801      	cmp	r0, #1
 80134e8:	4606      	mov	r6, r0
 80134ea:	d0f5      	beq.n	80134d8 <rmw_destroy_node+0x50>
 80134ec:	2c00      	cmp	r4, #0
 80134ee:	d1dc      	bne.n	80134aa <rmw_destroy_node+0x22>
 80134f0:	e7e3      	b.n	80134ba <rmw_destroy_node+0x32>
 80134f2:	4b21      	ldr	r3, [pc, #132]	@ (8013578 <rmw_destroy_node+0xf0>)
 80134f4:	681c      	ldr	r4, [r3, #0]
 80134f6:	b16c      	cbz	r4, 8013514 <rmw_destroy_node+0x8c>
 80134f8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80134fc:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80134fe:	429d      	cmp	r5, r3
 8013500:	d1f9      	bne.n	80134f6 <rmw_destroy_node+0x6e>
 8013502:	317c      	adds	r1, #124	@ 0x7c
 8013504:	4638      	mov	r0, r7
 8013506:	f000 f98b 	bl	8013820 <rmw_destroy_service>
 801350a:	2801      	cmp	r0, #1
 801350c:	4606      	mov	r6, r0
 801350e:	d0e3      	beq.n	80134d8 <rmw_destroy_node+0x50>
 8013510:	2c00      	cmp	r4, #0
 8013512:	d1f1      	bne.n	80134f8 <rmw_destroy_node+0x70>
 8013514:	4b19      	ldr	r3, [pc, #100]	@ (801357c <rmw_destroy_node+0xf4>)
 8013516:	681c      	ldr	r4, [r3, #0]
 8013518:	b16c      	cbz	r4, 8013536 <rmw_destroy_node+0xae>
 801351a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801351e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8013520:	429d      	cmp	r5, r3
 8013522:	d1f9      	bne.n	8013518 <rmw_destroy_node+0x90>
 8013524:	317c      	adds	r1, #124	@ 0x7c
 8013526:	4638      	mov	r0, r7
 8013528:	f7ff fbe8 	bl	8012cfc <rmw_destroy_client>
 801352c:	2801      	cmp	r0, #1
 801352e:	4606      	mov	r6, r0
 8013530:	d0d2      	beq.n	80134d8 <rmw_destroy_node+0x50>
 8013532:	2c00      	cmp	r4, #0
 8013534:	d1f1      	bne.n	801351a <rmw_destroy_node+0x92>
 8013536:	6928      	ldr	r0, [r5, #16]
 8013538:	696a      	ldr	r2, [r5, #20]
 801353a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801353e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013542:	6819      	ldr	r1, [r3, #0]
 8013544:	f7f8 ff1e 	bl	800c384 <uxr_buffer_delete_entity>
 8013548:	4602      	mov	r2, r0
 801354a:	6928      	ldr	r0, [r5, #16]
 801354c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013550:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013554:	f7f7 fe3a 	bl	800b1cc <run_xrce_session>
 8013558:	2800      	cmp	r0, #0
 801355a:	bf08      	it	eq
 801355c:	2602      	moveq	r6, #2
 801355e:	4638      	mov	r0, r7
 8013560:	f7f7 fcba 	bl	800aed8 <rmw_uxrce_fini_node_memory>
 8013564:	4630      	mov	r0, r6
 8013566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013568:	4626      	mov	r6, r4
 801356a:	e7a6      	b.n	80134ba <rmw_destroy_node+0x32>
 801356c:	08019f04 	.word	0x08019f04
 8013570:	2000f440 	.word	0x2000f440
 8013574:	2000ebc0 	.word	0x2000ebc0
 8013578:	2000e778 	.word	0x2000e778
 801357c:	2000e6a0 	.word	0x2000e6a0

08013580 <rmw_node_get_graph_guard_condition>:
 8013580:	6843      	ldr	r3, [r0, #4]
 8013582:	6918      	ldr	r0, [r3, #16]
 8013584:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8013588:	4770      	bx	lr
 801358a:	bf00      	nop

0801358c <rmw_send_request>:
 801358c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013590:	4604      	mov	r4, r0
 8013592:	6800      	ldr	r0, [r0, #0]
 8013594:	b08a      	sub	sp, #40	@ 0x28
 8013596:	460e      	mov	r6, r1
 8013598:	4615      	mov	r5, r2
 801359a:	b128      	cbz	r0, 80135a8 <rmw_send_request+0x1c>
 801359c:	4b1e      	ldr	r3, [pc, #120]	@ (8013618 <rmw_send_request+0x8c>)
 801359e:	6819      	ldr	r1, [r3, #0]
 80135a0:	f7ec fe1e 	bl	80001e0 <strcmp>
 80135a4:	2800      	cmp	r0, #0
 80135a6:	d133      	bne.n	8013610 <rmw_send_request+0x84>
 80135a8:	6864      	ldr	r4, [r4, #4]
 80135aa:	6963      	ldr	r3, [r4, #20]
 80135ac:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 80135ae:	689b      	ldr	r3, [r3, #8]
 80135b0:	4798      	blx	r3
 80135b2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80135b6:	4630      	mov	r0, r6
 80135b8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80135bc:	4798      	blx	r3
 80135be:	693b      	ldr	r3, [r7, #16]
 80135c0:	9000      	str	r0, [sp, #0]
 80135c2:	6922      	ldr	r2, [r4, #16]
 80135c4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80135c6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80135ca:	ab02      	add	r3, sp, #8
 80135cc:	f7fa fba8 	bl	800dd20 <uxr_prepare_output_stream>
 80135d0:	2300      	movs	r3, #0
 80135d2:	6028      	str	r0, [r5, #0]
 80135d4:	606b      	str	r3, [r5, #4]
 80135d6:	b190      	cbz	r0, 80135fe <rmw_send_request+0x72>
 80135d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80135dc:	a902      	add	r1, sp, #8
 80135de:	4630      	mov	r0, r6
 80135e0:	4798      	blx	r3
 80135e2:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80135e6:	6938      	ldr	r0, [r7, #16]
 80135e8:	2b01      	cmp	r3, #1
 80135ea:	d00c      	beq.n	8013606 <rmw_send_request+0x7a>
 80135ec:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80135ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80135f2:	f7f9 fd65 	bl	800d0c0 <uxr_run_session_until_confirm_delivery>
 80135f6:	2000      	movs	r0, #0
 80135f8:	b00a      	add	sp, #40	@ 0x28
 80135fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135fe:	2001      	movs	r0, #1
 8013600:	b00a      	add	sp, #40	@ 0x28
 8013602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013606:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801360a:	f7f9 f9c1 	bl	800c990 <uxr_flash_output_streams>
 801360e:	e7f2      	b.n	80135f6 <rmw_send_request+0x6a>
 8013610:	200c      	movs	r0, #12
 8013612:	b00a      	add	sp, #40	@ 0x28
 8013614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013618:	08019f04 	.word	0x08019f04

0801361c <rmw_take_request>:
 801361c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013620:	4605      	mov	r5, r0
 8013622:	6800      	ldr	r0, [r0, #0]
 8013624:	b089      	sub	sp, #36	@ 0x24
 8013626:	460c      	mov	r4, r1
 8013628:	4690      	mov	r8, r2
 801362a:	461e      	mov	r6, r3
 801362c:	b128      	cbz	r0, 801363a <rmw_take_request+0x1e>
 801362e:	4b28      	ldr	r3, [pc, #160]	@ (80136d0 <rmw_take_request+0xb4>)
 8013630:	6819      	ldr	r1, [r3, #0]
 8013632:	f7ec fdd5 	bl	80001e0 <strcmp>
 8013636:	2800      	cmp	r0, #0
 8013638:	d146      	bne.n	80136c8 <rmw_take_request+0xac>
 801363a:	b10e      	cbz	r6, 8013640 <rmw_take_request+0x24>
 801363c:	2300      	movs	r3, #0
 801363e:	7033      	strb	r3, [r6, #0]
 8013640:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013644:	f7f7 fd44 	bl	800b0d0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013648:	4648      	mov	r0, r9
 801364a:	f7f7 fd19 	bl	800b080 <rmw_uxrce_find_static_input_buffer_by_owner>
 801364e:	4607      	mov	r7, r0
 8013650:	b3b0      	cbz	r0, 80136c0 <rmw_take_request+0xa4>
 8013652:	6885      	ldr	r5, [r0, #8]
 8013654:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8013658:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801365c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8013660:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8013664:	7423      	strb	r3, [r4, #16]
 8013666:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801366a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801366e:	74e2      	strb	r2, [r4, #19]
 8013670:	f8a4 3011 	strh.w	r3, [r4, #17]
 8013674:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8013678:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801367c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8013680:	61e1      	str	r1, [r4, #28]
 8013682:	6162      	str	r2, [r4, #20]
 8013684:	61a3      	str	r3, [r4, #24]
 8013686:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801368a:	689b      	ldr	r3, [r3, #8]
 801368c:	4798      	blx	r3
 801368e:	6844      	ldr	r4, [r0, #4]
 8013690:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8013694:	f105 0110 	add.w	r1, r5, #16
 8013698:	4668      	mov	r0, sp
 801369a:	f7f5 fe79 	bl	8009390 <ucdr_init_buffer>
 801369e:	68e3      	ldr	r3, [r4, #12]
 80136a0:	4641      	mov	r1, r8
 80136a2:	4668      	mov	r0, sp
 80136a4:	4798      	blx	r3
 80136a6:	4639      	mov	r1, r7
 80136a8:	4604      	mov	r4, r0
 80136aa:	480a      	ldr	r0, [pc, #40]	@ (80136d4 <rmw_take_request+0xb8>)
 80136ac:	f7ff fb12 	bl	8012cd4 <put_memory>
 80136b0:	b106      	cbz	r6, 80136b4 <rmw_take_request+0x98>
 80136b2:	7034      	strb	r4, [r6, #0]
 80136b4:	f084 0001 	eor.w	r0, r4, #1
 80136b8:	b2c0      	uxtb	r0, r0
 80136ba:	b009      	add	sp, #36	@ 0x24
 80136bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136c0:	2001      	movs	r0, #1
 80136c2:	b009      	add	sp, #36	@ 0x24
 80136c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136c8:	200c      	movs	r0, #12
 80136ca:	b009      	add	sp, #36	@ 0x24
 80136cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136d0:	08019f04 	.word	0x08019f04
 80136d4:	2000e410 	.word	0x2000e410

080136d8 <rmw_send_response>:
 80136d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136da:	4605      	mov	r5, r0
 80136dc:	6800      	ldr	r0, [r0, #0]
 80136de:	b091      	sub	sp, #68	@ 0x44
 80136e0:	460c      	mov	r4, r1
 80136e2:	4616      	mov	r6, r2
 80136e4:	b128      	cbz	r0, 80136f2 <rmw_send_response+0x1a>
 80136e6:	4b28      	ldr	r3, [pc, #160]	@ (8013788 <rmw_send_response+0xb0>)
 80136e8:	6819      	ldr	r1, [r3, #0]
 80136ea:	f7ec fd79 	bl	80001e0 <strcmp>
 80136ee:	2800      	cmp	r0, #0
 80136f0:	d141      	bne.n	8013776 <rmw_send_response+0x9e>
 80136f2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80136f6:	9306      	str	r3, [sp, #24]
 80136f8:	4623      	mov	r3, r4
 80136fa:	9207      	str	r2, [sp, #28]
 80136fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013700:	686d      	ldr	r5, [r5, #4]
 8013702:	789b      	ldrb	r3, [r3, #2]
 8013704:	68a1      	ldr	r1, [r4, #8]
 8013706:	f88d 2017 	strb.w	r2, [sp, #23]
 801370a:	f88d 3016 	strb.w	r3, [sp, #22]
 801370e:	68e2      	ldr	r2, [r4, #12]
 8013710:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8013714:	6860      	ldr	r0, [r4, #4]
 8013716:	f8ad 3014 	strh.w	r3, [sp, #20]
 801371a:	ab02      	add	r3, sp, #8
 801371c:	c307      	stmia	r3!, {r0, r1, r2}
 801371e:	696b      	ldr	r3, [r5, #20]
 8013720:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8013722:	68db      	ldr	r3, [r3, #12]
 8013724:	4798      	blx	r3
 8013726:	6844      	ldr	r4, [r0, #4]
 8013728:	4630      	mov	r0, r6
 801372a:	6923      	ldr	r3, [r4, #16]
 801372c:	4798      	blx	r3
 801372e:	f100 0318 	add.w	r3, r0, #24
 8013732:	6938      	ldr	r0, [r7, #16]
 8013734:	9300      	str	r3, [sp, #0]
 8013736:	692a      	ldr	r2, [r5, #16]
 8013738:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801373a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801373e:	ab08      	add	r3, sp, #32
 8013740:	f7fa faee 	bl	800dd20 <uxr_prepare_output_stream>
 8013744:	b910      	cbnz	r0, 801374c <rmw_send_response+0x74>
 8013746:	2001      	movs	r0, #1
 8013748:	b011      	add	sp, #68	@ 0x44
 801374a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801374c:	a902      	add	r1, sp, #8
 801374e:	a808      	add	r0, sp, #32
 8013750:	f7fb fc04 	bl	800ef5c <uxr_serialize_SampleIdentity>
 8013754:	68a3      	ldr	r3, [r4, #8]
 8013756:	a908      	add	r1, sp, #32
 8013758:	4630      	mov	r0, r6
 801375a:	4798      	blx	r3
 801375c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8013760:	6938      	ldr	r0, [r7, #16]
 8013762:	2b01      	cmp	r3, #1
 8013764:	d00a      	beq.n	801377c <rmw_send_response+0xa4>
 8013766:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8013768:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801376c:	f7f9 fca8 	bl	800d0c0 <uxr_run_session_until_confirm_delivery>
 8013770:	2000      	movs	r0, #0
 8013772:	b011      	add	sp, #68	@ 0x44
 8013774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013776:	200c      	movs	r0, #12
 8013778:	b011      	add	sp, #68	@ 0x44
 801377a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801377c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013780:	f7f9 f906 	bl	800c990 <uxr_flash_output_streams>
 8013784:	e7f4      	b.n	8013770 <rmw_send_response+0x98>
 8013786:	bf00      	nop
 8013788:	08019f04 	.word	0x08019f04

0801378c <rmw_take_response>:
 801378c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013790:	4604      	mov	r4, r0
 8013792:	6800      	ldr	r0, [r0, #0]
 8013794:	b088      	sub	sp, #32
 8013796:	4688      	mov	r8, r1
 8013798:	4617      	mov	r7, r2
 801379a:	461d      	mov	r5, r3
 801379c:	b120      	cbz	r0, 80137a8 <rmw_take_response+0x1c>
 801379e:	4b1e      	ldr	r3, [pc, #120]	@ (8013818 <rmw_take_response+0x8c>)
 80137a0:	6819      	ldr	r1, [r3, #0]
 80137a2:	f7ec fd1d 	bl	80001e0 <strcmp>
 80137a6:	bb78      	cbnz	r0, 8013808 <rmw_take_response+0x7c>
 80137a8:	b10d      	cbz	r5, 80137ae <rmw_take_response+0x22>
 80137aa:	2300      	movs	r3, #0
 80137ac:	702b      	strb	r3, [r5, #0]
 80137ae:	6864      	ldr	r4, [r4, #4]
 80137b0:	f7f7 fc8e 	bl	800b0d0 <rmw_uxrce_clean_expired_static_input_buffer>
 80137b4:	4620      	mov	r0, r4
 80137b6:	f7f7 fc63 	bl	800b080 <rmw_uxrce_find_static_input_buffer_by_owner>
 80137ba:	4606      	mov	r6, r0
 80137bc:	b340      	cbz	r0, 8013810 <rmw_take_response+0x84>
 80137be:	6963      	ldr	r3, [r4, #20]
 80137c0:	6884      	ldr	r4, [r0, #8]
 80137c2:	68db      	ldr	r3, [r3, #12]
 80137c4:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80137c8:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80137cc:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80137d0:	4798      	blx	r3
 80137d2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80137d6:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80137da:	f104 0110 	add.w	r1, r4, #16
 80137de:	4668      	mov	r0, sp
 80137e0:	f7f5 fdd6 	bl	8009390 <ucdr_init_buffer>
 80137e4:	4639      	mov	r1, r7
 80137e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80137ea:	4668      	mov	r0, sp
 80137ec:	4798      	blx	r3
 80137ee:	4631      	mov	r1, r6
 80137f0:	4604      	mov	r4, r0
 80137f2:	480a      	ldr	r0, [pc, #40]	@ (801381c <rmw_take_response+0x90>)
 80137f4:	f7ff fa6e 	bl	8012cd4 <put_memory>
 80137f8:	b105      	cbz	r5, 80137fc <rmw_take_response+0x70>
 80137fa:	702c      	strb	r4, [r5, #0]
 80137fc:	f084 0001 	eor.w	r0, r4, #1
 8013800:	b2c0      	uxtb	r0, r0
 8013802:	b008      	add	sp, #32
 8013804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013808:	200c      	movs	r0, #12
 801380a:	b008      	add	sp, #32
 801380c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013810:	2001      	movs	r0, #1
 8013812:	b008      	add	sp, #32
 8013814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013818:	08019f04 	.word	0x08019f04
 801381c:	2000e410 	.word	0x2000e410

08013820 <rmw_destroy_service>:
 8013820:	b570      	push	{r4, r5, r6, lr}
 8013822:	b128      	cbz	r0, 8013830 <rmw_destroy_service+0x10>
 8013824:	4604      	mov	r4, r0
 8013826:	6800      	ldr	r0, [r0, #0]
 8013828:	460d      	mov	r5, r1
 801382a:	f7f7 fd55 	bl	800b2d8 <is_uxrce_rmw_identifier_valid>
 801382e:	b910      	cbnz	r0, 8013836 <rmw_destroy_service+0x16>
 8013830:	2401      	movs	r4, #1
 8013832:	4620      	mov	r0, r4
 8013834:	bd70      	pop	{r4, r5, r6, pc}
 8013836:	6863      	ldr	r3, [r4, #4]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d0f9      	beq.n	8013830 <rmw_destroy_service+0x10>
 801383c:	2d00      	cmp	r5, #0
 801383e:	d0f7      	beq.n	8013830 <rmw_destroy_service+0x10>
 8013840:	6828      	ldr	r0, [r5, #0]
 8013842:	f7f7 fd49 	bl	800b2d8 <is_uxrce_rmw_identifier_valid>
 8013846:	2800      	cmp	r0, #0
 8013848:	d0f2      	beq.n	8013830 <rmw_destroy_service+0x10>
 801384a:	686e      	ldr	r6, [r5, #4]
 801384c:	2e00      	cmp	r6, #0
 801384e:	d0ef      	beq.n	8013830 <rmw_destroy_service+0x10>
 8013850:	6864      	ldr	r4, [r4, #4]
 8013852:	6932      	ldr	r2, [r6, #16]
 8013854:	6920      	ldr	r0, [r4, #16]
 8013856:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801385a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801385e:	6819      	ldr	r1, [r3, #0]
 8013860:	f002 f866 	bl	8015930 <uxr_buffer_cancel_data>
 8013864:	4602      	mov	r2, r0
 8013866:	6920      	ldr	r0, [r4, #16]
 8013868:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801386c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013870:	f7f7 fcac 	bl	800b1cc <run_xrce_session>
 8013874:	6920      	ldr	r0, [r4, #16]
 8013876:	6932      	ldr	r2, [r6, #16]
 8013878:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801387c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013880:	6819      	ldr	r1, [r3, #0]
 8013882:	f7f8 fd7f 	bl	800c384 <uxr_buffer_delete_entity>
 8013886:	4602      	mov	r2, r0
 8013888:	6920      	ldr	r0, [r4, #16]
 801388a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801388e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013892:	f7f7 fc9b 	bl	800b1cc <run_xrce_session>
 8013896:	f080 0401 	eor.w	r4, r0, #1
 801389a:	b2e4      	uxtb	r4, r4
 801389c:	4628      	mov	r0, r5
 801389e:	0064      	lsls	r4, r4, #1
 80138a0:	f7f7 fb5e 	bl	800af60 <rmw_uxrce_fini_service_memory>
 80138a4:	e7c5      	b.n	8013832 <rmw_destroy_service+0x12>
 80138a6:	bf00      	nop

080138a8 <rmw_create_subscription>:
 80138a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138ac:	b08d      	sub	sp, #52	@ 0x34
 80138ae:	2800      	cmp	r0, #0
 80138b0:	f000 80d1 	beq.w	8013a56 <rmw_create_subscription+0x1ae>
 80138b4:	460f      	mov	r7, r1
 80138b6:	2900      	cmp	r1, #0
 80138b8:	f000 80cd 	beq.w	8013a56 <rmw_create_subscription+0x1ae>
 80138bc:	4604      	mov	r4, r0
 80138be:	6800      	ldr	r0, [r0, #0]
 80138c0:	4615      	mov	r5, r2
 80138c2:	461e      	mov	r6, r3
 80138c4:	f7f7 fd08 	bl	800b2d8 <is_uxrce_rmw_identifier_valid>
 80138c8:	2800      	cmp	r0, #0
 80138ca:	f000 80c4 	beq.w	8013a56 <rmw_create_subscription+0x1ae>
 80138ce:	2d00      	cmp	r5, #0
 80138d0:	f000 80c1 	beq.w	8013a56 <rmw_create_subscription+0x1ae>
 80138d4:	782b      	ldrb	r3, [r5, #0]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	f000 80bd 	beq.w	8013a56 <rmw_create_subscription+0x1ae>
 80138dc:	2e00      	cmp	r6, #0
 80138de:	f000 80ba 	beq.w	8013a56 <rmw_create_subscription+0x1ae>
 80138e2:	485e      	ldr	r0, [pc, #376]	@ (8013a5c <rmw_create_subscription+0x1b4>)
 80138e4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80138e8:	f7ff f9e4 	bl	8012cb4 <get_memory>
 80138ec:	2800      	cmp	r0, #0
 80138ee:	f000 80b2 	beq.w	8013a56 <rmw_create_subscription+0x1ae>
 80138f2:	6884      	ldr	r4, [r0, #8]
 80138f4:	f8c4 4080 	str.w	r4, [r4, #128]	@ 0x80
 80138f8:	f7ff fa62 	bl	8012dc0 <rmw_get_implementation_identifier>
 80138fc:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8013900:	67e0      	str	r0, [r4, #124]	@ 0x7c
 8013902:	f8c4 a084 	str.w	sl, [r4, #132]	@ 0x84
 8013906:	4628      	mov	r0, r5
 8013908:	f7ec fcca 	bl	80002a0 <strlen>
 801390c:	3001      	adds	r0, #1
 801390e:	283c      	cmp	r0, #60	@ 0x3c
 8013910:	f104 087c 	add.w	r8, r4, #124	@ 0x7c
 8013914:	f200 8098 	bhi.w	8013a48 <rmw_create_subscription+0x1a0>
 8013918:	4a51      	ldr	r2, [pc, #324]	@ (8013a60 <rmw_create_subscription+0x1b8>)
 801391a:	462b      	mov	r3, r5
 801391c:	213c      	movs	r1, #60	@ 0x3c
 801391e:	4650      	mov	r0, sl
 8013920:	f004 f90e 	bl	8017b40 <sniprintf>
 8013924:	4631      	mov	r1, r6
 8013926:	f8c4 9020 	str.w	r9, [r4, #32]
 801392a:	2250      	movs	r2, #80	@ 0x50
 801392c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8013930:	f004 fb55 	bl	8017fde <memcpy>
 8013934:	494b      	ldr	r1, [pc, #300]	@ (8013a64 <rmw_create_subscription+0x1bc>)
 8013936:	4638      	mov	r0, r7
 8013938:	f7f7 fcdc 	bl	800b2f4 <get_message_typesupport_handle>
 801393c:	2800      	cmp	r0, #0
 801393e:	f000 8083 	beq.w	8013a48 <rmw_create_subscription+0x1a0>
 8013942:	6842      	ldr	r2, [r0, #4]
 8013944:	61a2      	str	r2, [r4, #24]
 8013946:	2a00      	cmp	r2, #0
 8013948:	d07e      	beq.n	8013a48 <rmw_create_subscription+0x1a0>
 801394a:	4629      	mov	r1, r5
 801394c:	4633      	mov	r3, r6
 801394e:	4648      	mov	r0, r9
 8013950:	f7ff fc92 	bl	8013278 <create_topic>
 8013954:	61e0      	str	r0, [r4, #28]
 8013956:	2800      	cmp	r0, #0
 8013958:	d07a      	beq.n	8013a50 <rmw_create_subscription+0x1a8>
 801395a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801395e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013962:	2104      	movs	r1, #4
 8013964:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8013968:	1c42      	adds	r2, r0, #1
 801396a:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801396e:	f7f8 fee1 	bl	800c734 <uxr_object_id>
 8013972:	6120      	str	r0, [r4, #16]
 8013974:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013978:	2506      	movs	r5, #6
 801397a:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801397e:	9500      	str	r5, [sp, #0]
 8013980:	6819      	ldr	r1, [r3, #0]
 8013982:	6922      	ldr	r2, [r4, #16]
 8013984:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013988:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801398c:	f7f8 fdd8 	bl	800c540 <uxr_buffer_create_subscriber_bin>
 8013990:	4602      	mov	r2, r0
 8013992:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013996:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801399a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801399e:	f7f7 fc15 	bl	800b1cc <run_xrce_session>
 80139a2:	2800      	cmp	r0, #0
 80139a4:	d050      	beq.n	8013a48 <rmw_create_subscription+0x1a0>
 80139a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80139aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80139ae:	4629      	mov	r1, r5
 80139b0:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 80139b4:	1c42      	adds	r2, r0, #1
 80139b6:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 80139ba:	f7f8 febb 	bl	800c734 <uxr_object_id>
 80139be:	af08      	add	r7, sp, #32
 80139c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80139c4:	69e3      	ldr	r3, [r4, #28]
 80139c6:	6160      	str	r0, [r4, #20]
 80139c8:	4631      	mov	r1, r6
 80139ca:	4638      	mov	r0, r7
 80139cc:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 80139d0:	9305      	str	r3, [sp, #20]
 80139d2:	f7f7 fc1b 	bl	800b20c <convert_qos_profile>
 80139d6:	9503      	str	r5, [sp, #12]
 80139d8:	e897 0003 	ldmia.w	r7, {r0, r1}
 80139dc:	9b05      	ldr	r3, [sp, #20]
 80139de:	9001      	str	r0, [sp, #4]
 80139e0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80139e4:	691b      	ldr	r3, [r3, #16]
 80139e6:	9300      	str	r3, [sp, #0]
 80139e8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80139ec:	f8db 1000 	ldr.w	r1, [fp]
 80139f0:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 80139f4:	f7f8 fe38 	bl	800c668 <uxr_buffer_create_datareader_bin>
 80139f8:	4602      	mov	r2, r0
 80139fa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80139fe:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013a02:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013a06:	f7f7 fbe1 	bl	800b1cc <run_xrce_session>
 8013a0a:	b1e8      	cbz	r0, 8013a48 <rmw_create_subscription+0x1a0>
 8013a0c:	7a33      	ldrb	r3, [r6, #8]
 8013a0e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013a12:	2b02      	cmp	r3, #2
 8013a14:	bf0c      	ite	eq
 8013a16:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8013a1a:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8013a1e:	9307      	str	r3, [sp, #28]
 8013a20:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013a24:	2200      	movs	r2, #0
 8013a26:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8013a2a:	ab0a      	add	r3, sp, #40	@ 0x28
 8013a2c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013a30:	9300      	str	r3, [sp, #0]
 8013a32:	6962      	ldr	r2, [r4, #20]
 8013a34:	9b07      	ldr	r3, [sp, #28]
 8013a36:	6809      	ldr	r1, [r1, #0]
 8013a38:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a3c:	f001 ff40 	bl	80158c0 <uxr_buffer_request_data>
 8013a40:	4640      	mov	r0, r8
 8013a42:	b00d      	add	sp, #52	@ 0x34
 8013a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a48:	69e0      	ldr	r0, [r4, #28]
 8013a4a:	b108      	cbz	r0, 8013a50 <rmw_create_subscription+0x1a8>
 8013a4c:	f7f7 fab4 	bl	800afb8 <rmw_uxrce_fini_topic_memory>
 8013a50:	4640      	mov	r0, r8
 8013a52:	f7f7 fa6f 	bl	800af34 <rmw_uxrce_fini_subscription_memory>
 8013a56:	f04f 0800 	mov.w	r8, #0
 8013a5a:	e7f1      	b.n	8013a40 <rmw_create_subscription+0x198>
 8013a5c:	2000ebc0 	.word	0x2000ebc0
 8013a60:	08019058 	.word	0x08019058
 8013a64:	08018ec8 	.word	0x08018ec8

08013a68 <rmw_subscription_get_actual_qos>:
 8013a68:	b508      	push	{r3, lr}
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	b140      	cbz	r0, 8013a80 <rmw_subscription_get_actual_qos+0x18>
 8013a6e:	4608      	mov	r0, r1
 8013a70:	b131      	cbz	r1, 8013a80 <rmw_subscription_get_actual_qos+0x18>
 8013a72:	6859      	ldr	r1, [r3, #4]
 8013a74:	2250      	movs	r2, #80	@ 0x50
 8013a76:	3128      	adds	r1, #40	@ 0x28
 8013a78:	f004 fab1 	bl	8017fde <memcpy>
 8013a7c:	2000      	movs	r0, #0
 8013a7e:	bd08      	pop	{r3, pc}
 8013a80:	200b      	movs	r0, #11
 8013a82:	bd08      	pop	{r3, pc}

08013a84 <rmw_destroy_subscription>:
 8013a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a88:	b128      	cbz	r0, 8013a96 <rmw_destroy_subscription+0x12>
 8013a8a:	4604      	mov	r4, r0
 8013a8c:	6800      	ldr	r0, [r0, #0]
 8013a8e:	460d      	mov	r5, r1
 8013a90:	f7f7 fc22 	bl	800b2d8 <is_uxrce_rmw_identifier_valid>
 8013a94:	b918      	cbnz	r0, 8013a9e <rmw_destroy_subscription+0x1a>
 8013a96:	2401      	movs	r4, #1
 8013a98:	4620      	mov	r0, r4
 8013a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a9e:	6863      	ldr	r3, [r4, #4]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d0f8      	beq.n	8013a96 <rmw_destroy_subscription+0x12>
 8013aa4:	2d00      	cmp	r5, #0
 8013aa6:	d0f6      	beq.n	8013a96 <rmw_destroy_subscription+0x12>
 8013aa8:	6828      	ldr	r0, [r5, #0]
 8013aaa:	f7f7 fc15 	bl	800b2d8 <is_uxrce_rmw_identifier_valid>
 8013aae:	2800      	cmp	r0, #0
 8013ab0:	d0f1      	beq.n	8013a96 <rmw_destroy_subscription+0x12>
 8013ab2:	686c      	ldr	r4, [r5, #4]
 8013ab4:	2c00      	cmp	r4, #0
 8013ab6:	d0ee      	beq.n	8013a96 <rmw_destroy_subscription+0x12>
 8013ab8:	6a26      	ldr	r6, [r4, #32]
 8013aba:	6962      	ldr	r2, [r4, #20]
 8013abc:	6930      	ldr	r0, [r6, #16]
 8013abe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013ac2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013ac6:	6819      	ldr	r1, [r3, #0]
 8013ac8:	f001 ff32 	bl	8015930 <uxr_buffer_cancel_data>
 8013acc:	4602      	mov	r2, r0
 8013ace:	6930      	ldr	r0, [r6, #16]
 8013ad0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013ad4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013ad8:	f7f7 fb78 	bl	800b1cc <run_xrce_session>
 8013adc:	69e0      	ldr	r0, [r4, #28]
 8013ade:	f7ff fc1f 	bl	8013320 <destroy_topic>
 8013ae2:	6a23      	ldr	r3, [r4, #32]
 8013ae4:	6962      	ldr	r2, [r4, #20]
 8013ae6:	6918      	ldr	r0, [r3, #16]
 8013ae8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013aec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013af0:	6819      	ldr	r1, [r3, #0]
 8013af2:	f7f8 fc47 	bl	800c384 <uxr_buffer_delete_entity>
 8013af6:	6a23      	ldr	r3, [r4, #32]
 8013af8:	6922      	ldr	r2, [r4, #16]
 8013afa:	4680      	mov	r8, r0
 8013afc:	6918      	ldr	r0, [r3, #16]
 8013afe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013b02:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013b06:	6819      	ldr	r1, [r3, #0]
 8013b08:	f7f8 fc3c 	bl	800c384 <uxr_buffer_delete_entity>
 8013b0c:	4607      	mov	r7, r0
 8013b0e:	6930      	ldr	r0, [r6, #16]
 8013b10:	4642      	mov	r2, r8
 8013b12:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013b16:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013b1a:	f7f7 fb57 	bl	800b1cc <run_xrce_session>
 8013b1e:	4604      	mov	r4, r0
 8013b20:	6930      	ldr	r0, [r6, #16]
 8013b22:	463a      	mov	r2, r7
 8013b24:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013b28:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013b2c:	f7f7 fb4e 	bl	800b1cc <run_xrce_session>
 8013b30:	4004      	ands	r4, r0
 8013b32:	f084 0401 	eor.w	r4, r4, #1
 8013b36:	b2e4      	uxtb	r4, r4
 8013b38:	4628      	mov	r0, r5
 8013b3a:	0064      	lsls	r4, r4, #1
 8013b3c:	f7f7 f9fa 	bl	800af34 <rmw_uxrce_fini_subscription_memory>
 8013b40:	e7aa      	b.n	8013a98 <rmw_destroy_subscription+0x14>
 8013b42:	bf00      	nop

08013b44 <rmw_take_with_info>:
 8013b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b46:	4604      	mov	r4, r0
 8013b48:	6800      	ldr	r0, [r0, #0]
 8013b4a:	b089      	sub	sp, #36	@ 0x24
 8013b4c:	460f      	mov	r7, r1
 8013b4e:	4615      	mov	r5, r2
 8013b50:	b128      	cbz	r0, 8013b5e <rmw_take_with_info+0x1a>
 8013b52:	4b23      	ldr	r3, [pc, #140]	@ (8013be0 <rmw_take_with_info+0x9c>)
 8013b54:	6819      	ldr	r1, [r3, #0]
 8013b56:	f7ec fb43 	bl	80001e0 <strcmp>
 8013b5a:	2800      	cmp	r0, #0
 8013b5c:	d13d      	bne.n	8013bda <rmw_take_with_info+0x96>
 8013b5e:	6864      	ldr	r4, [r4, #4]
 8013b60:	b1fd      	cbz	r5, 8013ba2 <rmw_take_with_info+0x5e>
 8013b62:	2300      	movs	r3, #0
 8013b64:	702b      	strb	r3, [r5, #0]
 8013b66:	f7f7 fab3 	bl	800b0d0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013b6a:	4620      	mov	r0, r4
 8013b6c:	f7f7 fa88 	bl	800b080 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013b70:	4606      	mov	r6, r0
 8013b72:	b1e8      	cbz	r0, 8013bb0 <rmw_take_with_info+0x6c>
 8013b74:	6881      	ldr	r1, [r0, #8]
 8013b76:	4668      	mov	r0, sp
 8013b78:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8013b7c:	3110      	adds	r1, #16
 8013b7e:	f7f5 fc07 	bl	8009390 <ucdr_init_buffer>
 8013b82:	69a3      	ldr	r3, [r4, #24]
 8013b84:	4639      	mov	r1, r7
 8013b86:	68db      	ldr	r3, [r3, #12]
 8013b88:	4668      	mov	r0, sp
 8013b8a:	4798      	blx	r3
 8013b8c:	4631      	mov	r1, r6
 8013b8e:	4604      	mov	r4, r0
 8013b90:	4814      	ldr	r0, [pc, #80]	@ (8013be4 <rmw_take_with_info+0xa0>)
 8013b92:	f7ff f89f 	bl	8012cd4 <put_memory>
 8013b96:	702c      	strb	r4, [r5, #0]
 8013b98:	f084 0001 	eor.w	r0, r4, #1
 8013b9c:	b2c0      	uxtb	r0, r0
 8013b9e:	b009      	add	sp, #36	@ 0x24
 8013ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ba2:	f7f7 fa95 	bl	800b0d0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013ba6:	4620      	mov	r0, r4
 8013ba8:	f7f7 fa6a 	bl	800b080 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013bac:	4605      	mov	r5, r0
 8013bae:	b910      	cbnz	r0, 8013bb6 <rmw_take_with_info+0x72>
 8013bb0:	2001      	movs	r0, #1
 8013bb2:	b009      	add	sp, #36	@ 0x24
 8013bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bb6:	68a9      	ldr	r1, [r5, #8]
 8013bb8:	4668      	mov	r0, sp
 8013bba:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8013bbe:	3110      	adds	r1, #16
 8013bc0:	f7f5 fbe6 	bl	8009390 <ucdr_init_buffer>
 8013bc4:	69a3      	ldr	r3, [r4, #24]
 8013bc6:	4639      	mov	r1, r7
 8013bc8:	68db      	ldr	r3, [r3, #12]
 8013bca:	4668      	mov	r0, sp
 8013bcc:	4798      	blx	r3
 8013bce:	4629      	mov	r1, r5
 8013bd0:	4604      	mov	r4, r0
 8013bd2:	4804      	ldr	r0, [pc, #16]	@ (8013be4 <rmw_take_with_info+0xa0>)
 8013bd4:	f7ff f87e 	bl	8012cd4 <put_memory>
 8013bd8:	e7de      	b.n	8013b98 <rmw_take_with_info+0x54>
 8013bda:	200c      	movs	r0, #12
 8013bdc:	b009      	add	sp, #36	@ 0x24
 8013bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013be0:	08019f04 	.word	0x08019f04
 8013be4:	2000e410 	.word	0x2000e410

08013be8 <rmw_uxrce_transport_init>:
 8013be8:	b508      	push	{r3, lr}
 8013bea:	b108      	cbz	r0, 8013bf0 <rmw_uxrce_transport_init+0x8>
 8013bec:	f100 0210 	add.w	r2, r0, #16
 8013bf0:	b139      	cbz	r1, 8013c02 <rmw_uxrce_transport_init+0x1a>
 8013bf2:	6949      	ldr	r1, [r1, #20]
 8013bf4:	4610      	mov	r0, r2
 8013bf6:	f001 f8fd 	bl	8014df4 <uxr_init_custom_transport>
 8013bfa:	f080 0001 	eor.w	r0, r0, #1
 8013bfe:	b2c0      	uxtb	r0, r0
 8013c00:	bd08      	pop	{r3, pc}
 8013c02:	4b04      	ldr	r3, [pc, #16]	@ (8013c14 <rmw_uxrce_transport_init+0x2c>)
 8013c04:	4610      	mov	r0, r2
 8013c06:	6859      	ldr	r1, [r3, #4]
 8013c08:	f001 f8f4 	bl	8014df4 <uxr_init_custom_transport>
 8013c0c:	f080 0001 	eor.w	r0, r0, #1
 8013c10:	b2c0      	uxtb	r0, r0
 8013c12:	bd08      	pop	{r3, pc}
 8013c14:	2000c150 	.word	0x2000c150

08013c18 <rmw_wait>:
 8013c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c1c:	b089      	sub	sp, #36	@ 0x24
 8013c1e:	4607      	mov	r7, r0
 8013c20:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8013c22:	460e      	mov	r6, r1
 8013c24:	4698      	mov	r8, r3
 8013c26:	4691      	mov	r9, r2
 8013c28:	2a00      	cmp	r2, #0
 8013c2a:	f000 811e 	beq.w	8013e6a <rmw_wait+0x252>
 8013c2e:	2c00      	cmp	r4, #0
 8013c30:	f000 80ef 	beq.w	8013e12 <rmw_wait+0x1fa>
 8013c34:	4bb5      	ldr	r3, [pc, #724]	@ (8013f0c <rmw_wait+0x2f4>)
 8013c36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013c38:	ad04      	add	r5, sp, #16
 8013c3a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8013c3e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013c42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013c46:	f7fe fe6b 	bl	8012920 <rmw_time_equal>
 8013c4a:	2800      	cmp	r0, #0
 8013c4c:	f000 811b 	beq.w	8013e86 <rmw_wait+0x26e>
 8013c50:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8013c54:	f7f7 fa3c 	bl	800b0d0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013c58:	4bad      	ldr	r3, [pc, #692]	@ (8013f10 <rmw_wait+0x2f8>)
 8013c5a:	681c      	ldr	r4, [r3, #0]
 8013c5c:	b14c      	cbz	r4, 8013c72 <rmw_wait+0x5a>
 8013c5e:	4623      	mov	r3, r4
 8013c60:	2100      	movs	r1, #0
 8013c62:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8013c66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013c6a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d1f7      	bne.n	8013c62 <rmw_wait+0x4a>
 8013c72:	f1b9 0f00 	cmp.w	r9, #0
 8013c76:	d011      	beq.n	8013c9c <rmw_wait+0x84>
 8013c78:	f8d9 1000 	ldr.w	r1, [r9]
 8013c7c:	b171      	cbz	r1, 8013c9c <rmw_wait+0x84>
 8013c7e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8013c82:	2300      	movs	r3, #0
 8013c84:	2001      	movs	r0, #1
 8013c86:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013c8a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013c8c:	6912      	ldr	r2, [r2, #16]
 8013c8e:	3301      	adds	r3, #1
 8013c90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013c94:	4299      	cmp	r1, r3
 8013c96:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013c9a:	d1f4      	bne.n	8013c86 <rmw_wait+0x6e>
 8013c9c:	f1b8 0f00 	cmp.w	r8, #0
 8013ca0:	f000 8109 	beq.w	8013eb6 <rmw_wait+0x29e>
 8013ca4:	f8d8 1000 	ldr.w	r1, [r8]
 8013ca8:	2900      	cmp	r1, #0
 8013caa:	f000 8116 	beq.w	8013eda <rmw_wait+0x2c2>
 8013cae:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	2001      	movs	r0, #1
 8013cb6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013cba:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013cbc:	6912      	ldr	r2, [r2, #16]
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013cc4:	4299      	cmp	r1, r3
 8013cc6:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013cca:	d1f4      	bne.n	8013cb6 <rmw_wait+0x9e>
 8013ccc:	2f00      	cmp	r7, #0
 8013cce:	f000 8114 	beq.w	8013efa <rmw_wait+0x2e2>
 8013cd2:	6839      	ldr	r1, [r7, #0]
 8013cd4:	b171      	cbz	r1, 8013cf4 <rmw_wait+0xdc>
 8013cd6:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8013cda:	2300      	movs	r3, #0
 8013cdc:	2001      	movs	r0, #1
 8013cde:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013ce2:	6a12      	ldr	r2, [r2, #32]
 8013ce4:	6912      	ldr	r2, [r2, #16]
 8013ce6:	3301      	adds	r3, #1
 8013ce8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013cec:	4299      	cmp	r1, r3
 8013cee:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013cf2:	d1f4      	bne.n	8013cde <rmw_wait+0xc6>
 8013cf4:	b344      	cbz	r4, 8013d48 <rmw_wait+0x130>
 8013cf6:	4622      	mov	r2, r4
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8013cfe:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8013d02:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8013d06:	440b      	add	r3, r1
 8013d08:	b2db      	uxtb	r3, r3
 8013d0a:	2a00      	cmp	r2, #0
 8013d0c:	d1f5      	bne.n	8013cfa <rmw_wait+0xe2>
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d075      	beq.n	8013dfe <rmw_wait+0x1e6>
 8013d12:	1c6a      	adds	r2, r5, #1
 8013d14:	d00d      	beq.n	8013d32 <rmw_wait+0x11a>
 8013d16:	ee07 5a90 	vmov	s15, r5
 8013d1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013d1e:	ee07 3a90 	vmov	s15, r3
 8013d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013d2a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8013d2e:	ee17 5a90 	vmov	r5, s15
 8013d32:	68a0      	ldr	r0, [r4, #8]
 8013d34:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8013d38:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	f040 808a 	bne.w	8013e56 <rmw_wait+0x23e>
 8013d42:	6864      	ldr	r4, [r4, #4]
 8013d44:	2c00      	cmp	r4, #0
 8013d46:	d1f4      	bne.n	8013d32 <rmw_wait+0x11a>
 8013d48:	f1b9 0f00 	cmp.w	r9, #0
 8013d4c:	f000 80c3 	beq.w	8013ed6 <rmw_wait+0x2be>
 8013d50:	f8d9 5000 	ldr.w	r5, [r9]
 8013d54:	b185      	cbz	r5, 8013d78 <rmw_wait+0x160>
 8013d56:	2400      	movs	r4, #0
 8013d58:	4625      	mov	r5, r4
 8013d5a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013d5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013d62:	f7f7 f98d 	bl	800b080 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013d66:	2800      	cmp	r0, #0
 8013d68:	d06d      	beq.n	8013e46 <rmw_wait+0x22e>
 8013d6a:	f8d9 3000 	ldr.w	r3, [r9]
 8013d6e:	3401      	adds	r4, #1
 8013d70:	42a3      	cmp	r3, r4
 8013d72:	f04f 0501 	mov.w	r5, #1
 8013d76:	d8f0      	bhi.n	8013d5a <rmw_wait+0x142>
 8013d78:	f1b8 0f00 	cmp.w	r8, #0
 8013d7c:	d012      	beq.n	8013da4 <rmw_wait+0x18c>
 8013d7e:	f8d8 1000 	ldr.w	r1, [r8]
 8013d82:	2400      	movs	r4, #0
 8013d84:	b171      	cbz	r1, 8013da4 <rmw_wait+0x18c>
 8013d86:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013d8a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013d8e:	f7f7 f977 	bl	800b080 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013d92:	2800      	cmp	r0, #0
 8013d94:	d047      	beq.n	8013e26 <rmw_wait+0x20e>
 8013d96:	f8d8 3000 	ldr.w	r3, [r8]
 8013d9a:	3401      	adds	r4, #1
 8013d9c:	42a3      	cmp	r3, r4
 8013d9e:	f04f 0501 	mov.w	r5, #1
 8013da2:	d8f0      	bhi.n	8013d86 <rmw_wait+0x16e>
 8013da4:	b17f      	cbz	r7, 8013dc6 <rmw_wait+0x1ae>
 8013da6:	683b      	ldr	r3, [r7, #0]
 8013da8:	2400      	movs	r4, #0
 8013daa:	b163      	cbz	r3, 8013dc6 <rmw_wait+0x1ae>
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013db2:	f7f7 f965 	bl	800b080 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013db6:	2800      	cmp	r0, #0
 8013db8:	d03d      	beq.n	8013e36 <rmw_wait+0x21e>
 8013dba:	683b      	ldr	r3, [r7, #0]
 8013dbc:	3401      	adds	r4, #1
 8013dbe:	42a3      	cmp	r3, r4
 8013dc0:	f04f 0501 	mov.w	r5, #1
 8013dc4:	d8f2      	bhi.n	8013dac <rmw_wait+0x194>
 8013dc6:	b1a6      	cbz	r6, 8013df2 <rmw_wait+0x1da>
 8013dc8:	6834      	ldr	r4, [r6, #0]
 8013dca:	b194      	cbz	r4, 8013df2 <rmw_wait+0x1da>
 8013dcc:	2300      	movs	r3, #0
 8013dce:	461f      	mov	r7, r3
 8013dd0:	e004      	b.n	8013ddc <rmw_wait+0x1c4>
 8013dd2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013dd6:	3301      	adds	r3, #1
 8013dd8:	429c      	cmp	r4, r3
 8013dda:	d00a      	beq.n	8013df2 <rmw_wait+0x1da>
 8013ddc:	6870      	ldr	r0, [r6, #4]
 8013dde:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8013de2:	7c0a      	ldrb	r2, [r1, #16]
 8013de4:	2a00      	cmp	r2, #0
 8013de6:	d0f4      	beq.n	8013dd2 <rmw_wait+0x1ba>
 8013de8:	3301      	adds	r3, #1
 8013dea:	429c      	cmp	r4, r3
 8013dec:	740f      	strb	r7, [r1, #16]
 8013dee:	4615      	mov	r5, r2
 8013df0:	d1f4      	bne.n	8013ddc <rmw_wait+0x1c4>
 8013df2:	f085 0001 	eor.w	r0, r5, #1
 8013df6:	0040      	lsls	r0, r0, #1
 8013df8:	b009      	add	sp, #36	@ 0x24
 8013dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013dfe:	68a0      	ldr	r0, [r4, #8]
 8013e00:	2100      	movs	r1, #0
 8013e02:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013e06:	f7f9 f921 	bl	800d04c <uxr_run_session_timeout>
 8013e0a:	6864      	ldr	r4, [r4, #4]
 8013e0c:	2c00      	cmp	r4, #0
 8013e0e:	d1f6      	bne.n	8013dfe <rmw_wait+0x1e6>
 8013e10:	e79a      	b.n	8013d48 <rmw_wait+0x130>
 8013e12:	f7f7 f95d 	bl	800b0d0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013e16:	4b3e      	ldr	r3, [pc, #248]	@ (8013f10 <rmw_wait+0x2f8>)
 8013e18:	681c      	ldr	r4, [r3, #0]
 8013e1a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8013e1e:	2c00      	cmp	r4, #0
 8013e20:	f47f af1d 	bne.w	8013c5e <rmw_wait+0x46>
 8013e24:	e728      	b.n	8013c78 <rmw_wait+0x60>
 8013e26:	e9d8 3200 	ldrd	r3, r2, [r8]
 8013e2a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013e2e:	3401      	adds	r4, #1
 8013e30:	429c      	cmp	r4, r3
 8013e32:	d3a8      	bcc.n	8013d86 <rmw_wait+0x16e>
 8013e34:	e7b6      	b.n	8013da4 <rmw_wait+0x18c>
 8013e36:	e9d7 3200 	ldrd	r3, r2, [r7]
 8013e3a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013e3e:	3401      	adds	r4, #1
 8013e40:	42a3      	cmp	r3, r4
 8013e42:	d8b3      	bhi.n	8013dac <rmw_wait+0x194>
 8013e44:	e7bf      	b.n	8013dc6 <rmw_wait+0x1ae>
 8013e46:	e9d9 3200 	ldrd	r3, r2, [r9]
 8013e4a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013e4e:	3401      	adds	r4, #1
 8013e50:	42a3      	cmp	r3, r4
 8013e52:	d882      	bhi.n	8013d5a <rmw_wait+0x142>
 8013e54:	e790      	b.n	8013d78 <rmw_wait+0x160>
 8013e56:	4629      	mov	r1, r5
 8013e58:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013e5c:	f7f9 f910 	bl	800d080 <uxr_run_session_until_data>
 8013e60:	6864      	ldr	r4, [r4, #4]
 8013e62:	2c00      	cmp	r4, #0
 8013e64:	f47f af65 	bne.w	8013d32 <rmw_wait+0x11a>
 8013e68:	e76e      	b.n	8013d48 <rmw_wait+0x130>
 8013e6a:	b1f3      	cbz	r3, 8013eaa <rmw_wait+0x292>
 8013e6c:	2c00      	cmp	r4, #0
 8013e6e:	f47f aee1 	bne.w	8013c34 <rmw_wait+0x1c>
 8013e72:	f7f7 f92d 	bl	800b0d0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013e76:	4b26      	ldr	r3, [pc, #152]	@ (8013f10 <rmw_wait+0x2f8>)
 8013e78:	681c      	ldr	r4, [r3, #0]
 8013e7a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8013e7e:	2c00      	cmp	r4, #0
 8013e80:	f47f aeed 	bne.w	8013c5e <rmw_wait+0x46>
 8013e84:	e70a      	b.n	8013c9c <rmw_wait+0x84>
 8013e86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013e8a:	f7fe fd9d 	bl	80129c8 <rmw_time_total_nsec>
 8013e8e:	4a21      	ldr	r2, [pc, #132]	@ (8013f14 <rmw_wait+0x2fc>)
 8013e90:	2300      	movs	r3, #0
 8013e92:	f7ec fe2b 	bl	8000aec <__aeabi_uldivmod>
 8013e96:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8013e9a:	f171 0100 	sbcs.w	r1, r1, #0
 8013e9e:	4605      	mov	r5, r0
 8013ea0:	f6ff aed8 	blt.w	8013c54 <rmw_wait+0x3c>
 8013ea4:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8013ea8:	e6d4      	b.n	8013c54 <rmw_wait+0x3c>
 8013eaa:	2800      	cmp	r0, #0
 8013eac:	d1de      	bne.n	8013e6c <rmw_wait+0x254>
 8013eae:	2900      	cmp	r1, #0
 8013eb0:	d1dc      	bne.n	8013e6c <rmw_wait+0x254>
 8013eb2:	4608      	mov	r0, r1
 8013eb4:	e7a0      	b.n	8013df8 <rmw_wait+0x1e0>
 8013eb6:	2f00      	cmp	r7, #0
 8013eb8:	f47f af0b 	bne.w	8013cd2 <rmw_wait+0xba>
 8013ebc:	2c00      	cmp	r4, #0
 8013ebe:	f47f af1a 	bne.w	8013cf6 <rmw_wait+0xde>
 8013ec2:	f1b9 0f00 	cmp.w	r9, #0
 8013ec6:	d027      	beq.n	8013f18 <rmw_wait+0x300>
 8013ec8:	f8d9 3000 	ldr.w	r3, [r9]
 8013ecc:	4625      	mov	r5, r4
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	f47f af41 	bne.w	8013d56 <rmw_wait+0x13e>
 8013ed4:	e777      	b.n	8013dc6 <rmw_wait+0x1ae>
 8013ed6:	464d      	mov	r5, r9
 8013ed8:	e74e      	b.n	8013d78 <rmw_wait+0x160>
 8013eda:	2f00      	cmp	r7, #0
 8013edc:	f47f aef9 	bne.w	8013cd2 <rmw_wait+0xba>
 8013ee0:	2c00      	cmp	r4, #0
 8013ee2:	f47f af08 	bne.w	8013cf6 <rmw_wait+0xde>
 8013ee6:	f1b9 0f00 	cmp.w	r9, #0
 8013eea:	d015      	beq.n	8013f18 <rmw_wait+0x300>
 8013eec:	f8d9 3000 	ldr.w	r3, [r9]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	f47f af30 	bne.w	8013d56 <rmw_wait+0x13e>
 8013ef6:	2500      	movs	r5, #0
 8013ef8:	e743      	b.n	8013d82 <rmw_wait+0x16a>
 8013efa:	2c00      	cmp	r4, #0
 8013efc:	f47f aefb 	bne.w	8013cf6 <rmw_wait+0xde>
 8013f00:	f1b9 0f00 	cmp.w	r9, #0
 8013f04:	f47f af24 	bne.w	8013d50 <rmw_wait+0x138>
 8013f08:	e7f5      	b.n	8013ef6 <rmw_wait+0x2de>
 8013f0a:	bf00      	nop
 8013f0c:	08018d80 	.word	0x08018d80
 8013f10:	20010ab0 	.word	0x20010ab0
 8013f14:	000f4240 	.word	0x000f4240
 8013f18:	464d      	mov	r5, r9
 8013f1a:	e754      	b.n	8013dc6 <rmw_wait+0x1ae>

08013f1c <rmw_create_wait_set>:
 8013f1c:	b508      	push	{r3, lr}
 8013f1e:	4803      	ldr	r0, [pc, #12]	@ (8013f2c <rmw_create_wait_set+0x10>)
 8013f20:	f7fe fec8 	bl	8012cb4 <get_memory>
 8013f24:	b108      	cbz	r0, 8013f2a <rmw_create_wait_set+0xe>
 8013f26:	6880      	ldr	r0, [r0, #8]
 8013f28:	3010      	adds	r0, #16
 8013f2a:	bd08      	pop	{r3, pc}
 8013f2c:	2000c26c 	.word	0x2000c26c

08013f30 <rmw_destroy_wait_set>:
 8013f30:	b508      	push	{r3, lr}
 8013f32:	4b08      	ldr	r3, [pc, #32]	@ (8013f54 <rmw_destroy_wait_set+0x24>)
 8013f34:	6819      	ldr	r1, [r3, #0]
 8013f36:	b911      	cbnz	r1, 8013f3e <rmw_destroy_wait_set+0xe>
 8013f38:	e00a      	b.n	8013f50 <rmw_destroy_wait_set+0x20>
 8013f3a:	6849      	ldr	r1, [r1, #4]
 8013f3c:	b141      	cbz	r1, 8013f50 <rmw_destroy_wait_set+0x20>
 8013f3e:	688b      	ldr	r3, [r1, #8]
 8013f40:	3310      	adds	r3, #16
 8013f42:	4298      	cmp	r0, r3
 8013f44:	d1f9      	bne.n	8013f3a <rmw_destroy_wait_set+0xa>
 8013f46:	4803      	ldr	r0, [pc, #12]	@ (8013f54 <rmw_destroy_wait_set+0x24>)
 8013f48:	f7fe fec4 	bl	8012cd4 <put_memory>
 8013f4c:	2000      	movs	r0, #0
 8013f4e:	bd08      	pop	{r3, pc}
 8013f50:	2001      	movs	r0, #1
 8013f52:	bd08      	pop	{r3, pc}
 8013f54:	2000c26c 	.word	0x2000c26c

08013f58 <rosidl_runtime_c__String__init>:
 8013f58:	b1b0      	cbz	r0, 8013f88 <rosidl_runtime_c__String__init+0x30>
 8013f5a:	b510      	push	{r4, lr}
 8013f5c:	b086      	sub	sp, #24
 8013f5e:	4604      	mov	r4, r0
 8013f60:	a801      	add	r0, sp, #4
 8013f62:	f7f6 fbb1 	bl	800a6c8 <rcutils_get_default_allocator>
 8013f66:	9b01      	ldr	r3, [sp, #4]
 8013f68:	9905      	ldr	r1, [sp, #20]
 8013f6a:	2001      	movs	r0, #1
 8013f6c:	4798      	blx	r3
 8013f6e:	6020      	str	r0, [r4, #0]
 8013f70:	b138      	cbz	r0, 8013f82 <rosidl_runtime_c__String__init+0x2a>
 8013f72:	2200      	movs	r2, #0
 8013f74:	2301      	movs	r3, #1
 8013f76:	7002      	strb	r2, [r0, #0]
 8013f78:	4618      	mov	r0, r3
 8013f7a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8013f7e:	b006      	add	sp, #24
 8013f80:	bd10      	pop	{r4, pc}
 8013f82:	2000      	movs	r0, #0
 8013f84:	b006      	add	sp, #24
 8013f86:	bd10      	pop	{r4, pc}
 8013f88:	2000      	movs	r0, #0
 8013f8a:	4770      	bx	lr

08013f8c <rosidl_runtime_c__String__fini>:
 8013f8c:	b320      	cbz	r0, 8013fd8 <rosidl_runtime_c__String__fini+0x4c>
 8013f8e:	b510      	push	{r4, lr}
 8013f90:	6803      	ldr	r3, [r0, #0]
 8013f92:	b086      	sub	sp, #24
 8013f94:	4604      	mov	r4, r0
 8013f96:	b173      	cbz	r3, 8013fb6 <rosidl_runtime_c__String__fini+0x2a>
 8013f98:	6883      	ldr	r3, [r0, #8]
 8013f9a:	b1f3      	cbz	r3, 8013fda <rosidl_runtime_c__String__fini+0x4e>
 8013f9c:	a801      	add	r0, sp, #4
 8013f9e:	f7f6 fb93 	bl	800a6c8 <rcutils_get_default_allocator>
 8013fa2:	9b02      	ldr	r3, [sp, #8]
 8013fa4:	9905      	ldr	r1, [sp, #20]
 8013fa6:	6820      	ldr	r0, [r4, #0]
 8013fa8:	4798      	blx	r3
 8013faa:	2300      	movs	r3, #0
 8013fac:	e9c4 3300 	strd	r3, r3, [r4]
 8013fb0:	60a3      	str	r3, [r4, #8]
 8013fb2:	b006      	add	sp, #24
 8013fb4:	bd10      	pop	{r4, pc}
 8013fb6:	6843      	ldr	r3, [r0, #4]
 8013fb8:	b9db      	cbnz	r3, 8013ff2 <rosidl_runtime_c__String__fini+0x66>
 8013fba:	6883      	ldr	r3, [r0, #8]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d0f8      	beq.n	8013fb2 <rosidl_runtime_c__String__fini+0x26>
 8013fc0:	4b12      	ldr	r3, [pc, #72]	@ (801400c <rosidl_runtime_c__String__fini+0x80>)
 8013fc2:	4813      	ldr	r0, [pc, #76]	@ (8014010 <rosidl_runtime_c__String__fini+0x84>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	2251      	movs	r2, #81	@ 0x51
 8013fc8:	68db      	ldr	r3, [r3, #12]
 8013fca:	2101      	movs	r1, #1
 8013fcc:	f003 fd3a 	bl	8017a44 <fwrite>
 8013fd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013fd4:	f003 f9f6 	bl	80173c4 <exit>
 8013fd8:	4770      	bx	lr
 8013fda:	4b0c      	ldr	r3, [pc, #48]	@ (801400c <rosidl_runtime_c__String__fini+0x80>)
 8013fdc:	480d      	ldr	r0, [pc, #52]	@ (8014014 <rosidl_runtime_c__String__fini+0x88>)
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	224c      	movs	r2, #76	@ 0x4c
 8013fe2:	68db      	ldr	r3, [r3, #12]
 8013fe4:	2101      	movs	r1, #1
 8013fe6:	f003 fd2d 	bl	8017a44 <fwrite>
 8013fea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013fee:	f003 f9e9 	bl	80173c4 <exit>
 8013ff2:	4b06      	ldr	r3, [pc, #24]	@ (801400c <rosidl_runtime_c__String__fini+0x80>)
 8013ff4:	4808      	ldr	r0, [pc, #32]	@ (8014018 <rosidl_runtime_c__String__fini+0x8c>)
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	224e      	movs	r2, #78	@ 0x4e
 8013ffa:	68db      	ldr	r3, [r3, #12]
 8013ffc:	2101      	movs	r1, #1
 8013ffe:	f003 fd21 	bl	8017a44 <fwrite>
 8014002:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014006:	f003 f9dd 	bl	80173c4 <exit>
 801400a:	bf00      	nop
 801400c:	20002e40 	.word	0x20002e40
 8014010:	08019650 	.word	0x08019650
 8014014:	080195b0 	.word	0x080195b0
 8014018:	08019600 	.word	0x08019600

0801401c <std_msgs__msg__Header__get_type_hash>:
 801401c:	4800      	ldr	r0, [pc, #0]	@ (8014020 <std_msgs__msg__Header__get_type_hash+0x4>)
 801401e:	4770      	bx	lr
 8014020:	200011d4 	.word	0x200011d4

08014024 <std_msgs__msg__Header__get_type_description>:
 8014024:	b510      	push	{r4, lr}
 8014026:	4c08      	ldr	r4, [pc, #32]	@ (8014048 <std_msgs__msg__Header__get_type_description+0x24>)
 8014028:	7820      	ldrb	r0, [r4, #0]
 801402a:	b108      	cbz	r0, 8014030 <std_msgs__msg__Header__get_type_description+0xc>
 801402c:	4807      	ldr	r0, [pc, #28]	@ (801404c <std_msgs__msg__Header__get_type_description+0x28>)
 801402e:	bd10      	pop	{r4, pc}
 8014030:	f000 f93c 	bl	80142ac <builtin_interfaces__msg__Time__get_type_description>
 8014034:	300c      	adds	r0, #12
 8014036:	c807      	ldmia	r0, {r0, r1, r2}
 8014038:	4b05      	ldr	r3, [pc, #20]	@ (8014050 <std_msgs__msg__Header__get_type_description+0x2c>)
 801403a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801403e:	2301      	movs	r3, #1
 8014040:	4802      	ldr	r0, [pc, #8]	@ (801404c <std_msgs__msg__Header__get_type_description+0x28>)
 8014042:	7023      	strb	r3, [r4, #0]
 8014044:	bd10      	pop	{r4, pc}
 8014046:	bf00      	nop
 8014048:	20010de1 	.word	0x20010de1
 801404c:	08019f38 	.word	0x08019f38
 8014050:	2000134c 	.word	0x2000134c

08014054 <std_msgs__msg__Header__get_individual_type_description_source>:
 8014054:	4800      	ldr	r0, [pc, #0]	@ (8014058 <std_msgs__msg__Header__get_individual_type_description_source+0x4>)
 8014056:	4770      	bx	lr
 8014058:	08019f14 	.word	0x08019f14

0801405c <std_msgs__msg__Header__get_type_description_sources>:
 801405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801405e:	4e0f      	ldr	r6, [pc, #60]	@ (801409c <std_msgs__msg__Header__get_type_description_sources+0x40>)
 8014060:	7837      	ldrb	r7, [r6, #0]
 8014062:	b10f      	cbz	r7, 8014068 <std_msgs__msg__Header__get_type_description_sources+0xc>
 8014064:	480e      	ldr	r0, [pc, #56]	@ (80140a0 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 8014066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014068:	4d0e      	ldr	r5, [pc, #56]	@ (80140a4 <std_msgs__msg__Header__get_type_description_sources+0x48>)
 801406a:	4c0f      	ldr	r4, [pc, #60]	@ (80140a8 <std_msgs__msg__Header__get_type_description_sources+0x4c>)
 801406c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801406e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014074:	682b      	ldr	r3, [r5, #0]
 8014076:	f844 3b04 	str.w	r3, [r4], #4
 801407a:	4638      	mov	r0, r7
 801407c:	f000 f922 	bl	80142c4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8014080:	2301      	movs	r3, #1
 8014082:	4684      	mov	ip, r0
 8014084:	7033      	strb	r3, [r6, #0]
 8014086:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801408a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801408c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014092:	f8dc 3000 	ldr.w	r3, [ip]
 8014096:	4802      	ldr	r0, [pc, #8]	@ (80140a0 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 8014098:	6023      	str	r3, [r4, #0]
 801409a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801409c:	20010de0 	.word	0x20010de0
 80140a0:	08019f08 	.word	0x08019f08
 80140a4:	08019f14 	.word	0x08019f14
 80140a8:	20010d98 	.word	0x20010d98

080140ac <std_msgs__msg__Header__init>:
 80140ac:	b1d8      	cbz	r0, 80140e6 <std_msgs__msg__Header__init+0x3a>
 80140ae:	b538      	push	{r3, r4, r5, lr}
 80140b0:	4604      	mov	r4, r0
 80140b2:	f000 f927 	bl	8014304 <builtin_interfaces__msg__Time__init>
 80140b6:	b130      	cbz	r0, 80140c6 <std_msgs__msg__Header__init+0x1a>
 80140b8:	f104 0508 	add.w	r5, r4, #8
 80140bc:	4628      	mov	r0, r5
 80140be:	f7ff ff4b 	bl	8013f58 <rosidl_runtime_c__String__init>
 80140c2:	b148      	cbz	r0, 80140d8 <std_msgs__msg__Header__init+0x2c>
 80140c4:	bd38      	pop	{r3, r4, r5, pc}
 80140c6:	4620      	mov	r0, r4
 80140c8:	f000 f920 	bl	801430c <builtin_interfaces__msg__Time__fini>
 80140cc:	f104 0008 	add.w	r0, r4, #8
 80140d0:	f7ff ff5c 	bl	8013f8c <rosidl_runtime_c__String__fini>
 80140d4:	2000      	movs	r0, #0
 80140d6:	bd38      	pop	{r3, r4, r5, pc}
 80140d8:	4620      	mov	r0, r4
 80140da:	f000 f917 	bl	801430c <builtin_interfaces__msg__Time__fini>
 80140de:	4628      	mov	r0, r5
 80140e0:	f7ff ff54 	bl	8013f8c <rosidl_runtime_c__String__fini>
 80140e4:	e7f6      	b.n	80140d4 <std_msgs__msg__Header__init+0x28>
 80140e6:	2000      	movs	r0, #0
 80140e8:	4770      	bx	lr
 80140ea:	bf00      	nop

080140ec <std_msgs__msg__Header__fini>:
 80140ec:	b148      	cbz	r0, 8014102 <std_msgs__msg__Header__fini+0x16>
 80140ee:	b510      	push	{r4, lr}
 80140f0:	4604      	mov	r4, r0
 80140f2:	f000 f90b 	bl	801430c <builtin_interfaces__msg__Time__fini>
 80140f6:	f104 0008 	add.w	r0, r4, #8
 80140fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140fe:	f7ff bf45 	b.w	8013f8c <rosidl_runtime_c__String__fini>
 8014102:	4770      	bx	lr

08014104 <tf2_msgs__msg__TFMessage__get_type_hash>:
 8014104:	4800      	ldr	r0, [pc, #0]	@ (8014108 <tf2_msgs__msg__TFMessage__get_type_hash+0x4>)
 8014106:	4770      	bx	lr
 8014108:	2000142c 	.word	0x2000142c

0801410c <tf2_msgs__msg__TFMessage__get_type_description>:
 801410c:	b570      	push	{r4, r5, r6, lr}
 801410e:	4e1e      	ldr	r6, [pc, #120]	@ (8014188 <tf2_msgs__msg__TFMessage__get_type_description+0x7c>)
 8014110:	7835      	ldrb	r5, [r6, #0]
 8014112:	b10d      	cbz	r5, 8014118 <tf2_msgs__msg__TFMessage__get_type_description+0xc>
 8014114:	481d      	ldr	r0, [pc, #116]	@ (801418c <tf2_msgs__msg__TFMessage__get_type_description+0x80>)
 8014116:	bd70      	pop	{r4, r5, r6, pc}
 8014118:	4628      	mov	r0, r5
 801411a:	f000 f8c7 	bl	80142ac <builtin_interfaces__msg__Time__get_type_description>
 801411e:	300c      	adds	r0, #12
 8014120:	c807      	ldmia	r0, {r0, r1, r2}
 8014122:	4c1b      	ldr	r4, [pc, #108]	@ (8014190 <tf2_msgs__msg__TFMessage__get_type_description+0x84>)
 8014124:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014128:	4628      	mov	r0, r5
 801412a:	f000 fa0f 	bl	801454c <geometry_msgs__msg__Quaternion__get_type_description>
 801412e:	300c      	adds	r0, #12
 8014130:	c807      	ldmia	r0, {r0, r1, r2}
 8014132:	f104 0318 	add.w	r3, r4, #24
 8014136:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801413a:	4628      	mov	r0, r5
 801413c:	f000 fa36 	bl	80145ac <geometry_msgs__msg__Transform__get_type_description>
 8014140:	300c      	adds	r0, #12
 8014142:	c807      	ldmia	r0, {r0, r1, r2}
 8014144:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8014148:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801414c:	4628      	mov	r0, r5
 801414e:	f000 fab9 	bl	80146c4 <geometry_msgs__msg__TransformStamped__get_type_description>
 8014152:	300c      	adds	r0, #12
 8014154:	c807      	ldmia	r0, {r0, r1, r2}
 8014156:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 801415a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801415e:	4628      	mov	r0, r5
 8014160:	f7f7 fca4 	bl	800baac <geometry_msgs__msg__Vector3__get_type_description>
 8014164:	300c      	adds	r0, #12
 8014166:	c807      	ldmia	r0, {r0, r1, r2}
 8014168:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 801416c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014170:	4628      	mov	r0, r5
 8014172:	f7ff ff57 	bl	8014024 <std_msgs__msg__Header__get_type_description>
 8014176:	300c      	adds	r0, #12
 8014178:	c807      	ldmia	r0, {r0, r1, r2}
 801417a:	3478      	adds	r4, #120	@ 0x78
 801417c:	2301      	movs	r3, #1
 801417e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014182:	7033      	strb	r3, [r6, #0]
 8014184:	4801      	ldr	r0, [pc, #4]	@ (801418c <tf2_msgs__msg__TFMessage__get_type_description+0x80>)
 8014186:	bd70      	pop	{r4, r5, r6, pc}
 8014188:	20010ee1 	.word	0x20010ee1
 801418c:	08019f8c 	.word	0x08019f8c
 8014190:	2000148c 	.word	0x2000148c

08014194 <tf2_msgs__msg__TFMessage__get_type_description_sources>:
 8014194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014196:	4d35      	ldr	r5, [pc, #212]	@ (801426c <tf2_msgs__msg__TFMessage__get_type_description_sources+0xd8>)
 8014198:	782e      	ldrb	r6, [r5, #0]
 801419a:	b10e      	cbz	r6, 80141a0 <tf2_msgs__msg__TFMessage__get_type_description_sources+0xc>
 801419c:	4834      	ldr	r0, [pc, #208]	@ (8014270 <tf2_msgs__msg__TFMessage__get_type_description_sources+0xdc>)
 801419e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141a0:	4f34      	ldr	r7, [pc, #208]	@ (8014274 <tf2_msgs__msg__TFMessage__get_type_description_sources+0xe0>)
 80141a2:	4c35      	ldr	r4, [pc, #212]	@ (8014278 <tf2_msgs__msg__TFMessage__get_type_description_sources+0xe4>)
 80141a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80141a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80141a8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80141aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80141ac:	683b      	ldr	r3, [r7, #0]
 80141ae:	4627      	mov	r7, r4
 80141b0:	4630      	mov	r0, r6
 80141b2:	f847 3b04 	str.w	r3, [r7], #4
 80141b6:	f000 f885 	bl	80142c4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80141ba:	4684      	mov	ip, r0
 80141bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80141c0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80141c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80141c6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80141c8:	4630      	mov	r0, r6
 80141ca:	f8dc 3000 	ldr.w	r3, [ip]
 80141ce:	603b      	str	r3, [r7, #0]
 80141d0:	f000 f9c8 	bl	8014564 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 80141d4:	4684      	mov	ip, r0
 80141d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80141da:	f104 0728 	add.w	r7, r4, #40	@ 0x28
 80141de:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80141e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80141e4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80141e6:	4630      	mov	r0, r6
 80141e8:	f8dc 3000 	ldr.w	r3, [ip]
 80141ec:	603b      	str	r3, [r7, #0]
 80141ee:	f000 f9fd 	bl	80145ec <geometry_msgs__msg__Transform__get_individual_type_description_source>
 80141f2:	4684      	mov	ip, r0
 80141f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80141f8:	f104 074c 	add.w	r7, r4, #76	@ 0x4c
 80141fc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80141fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014202:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014204:	4630      	mov	r0, r6
 8014206:	f8dc 3000 	ldr.w	r3, [ip]
 801420a:	603b      	str	r3, [r7, #0]
 801420c:	f000 fa96 	bl	801473c <geometry_msgs__msg__TransformStamped__get_individual_type_description_source>
 8014210:	4684      	mov	ip, r0
 8014212:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014216:	f104 0770 	add.w	r7, r4, #112	@ 0x70
 801421a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801421c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014220:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014222:	4630      	mov	r0, r6
 8014224:	f8dc 3000 	ldr.w	r3, [ip]
 8014228:	603b      	str	r3, [r7, #0]
 801422a:	f7f7 fc4b 	bl	800bac4 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 801422e:	4684      	mov	ip, r0
 8014230:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014234:	f104 0794 	add.w	r7, r4, #148	@ 0x94
 8014238:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801423a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801423e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014240:	4630      	mov	r0, r6
 8014242:	f8dc 3000 	ldr.w	r3, [ip]
 8014246:	603b      	str	r3, [r7, #0]
 8014248:	f7ff ff04 	bl	8014054 <std_msgs__msg__Header__get_individual_type_description_source>
 801424c:	2301      	movs	r3, #1
 801424e:	4684      	mov	ip, r0
 8014250:	702b      	strb	r3, [r5, #0]
 8014252:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014256:	34b8      	adds	r4, #184	@ 0xb8
 8014258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801425a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801425e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014260:	f8dc 3000 	ldr.w	r3, [ip]
 8014264:	4802      	ldr	r0, [pc, #8]	@ (8014270 <tf2_msgs__msg__TFMessage__get_type_description_sources+0xdc>)
 8014266:	6023      	str	r3, [r4, #0]
 8014268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801426a:	bf00      	nop
 801426c:	20010ee0 	.word	0x20010ee0
 8014270:	08019f5c 	.word	0x08019f5c
 8014274:	08019f68 	.word	0x08019f68
 8014278:	20010de4 	.word	0x20010de4

0801427c <tf2_msgs__msg__TFMessage__init>:
 801427c:	b158      	cbz	r0, 8014296 <tf2_msgs__msg__TFMessage__init+0x1a>
 801427e:	b510      	push	{r4, lr}
 8014280:	2100      	movs	r1, #0
 8014282:	4604      	mov	r4, r0
 8014284:	f7f7 faf2 	bl	800b86c <geometry_msgs__msg__TransformStamped__Sequence__init>
 8014288:	b100      	cbz	r0, 801428c <tf2_msgs__msg__TFMessage__init+0x10>
 801428a:	bd10      	pop	{r4, pc}
 801428c:	4620      	mov	r0, r4
 801428e:	f7f7 fb65 	bl	800b95c <geometry_msgs__msg__TransformStamped__Sequence__fini>
 8014292:	2000      	movs	r0, #0
 8014294:	bd10      	pop	{r4, pc}
 8014296:	2000      	movs	r0, #0
 8014298:	4770      	bx	lr
 801429a:	bf00      	nop

0801429c <tf2_msgs__msg__TFMessage__fini>:
 801429c:	b108      	cbz	r0, 80142a2 <tf2_msgs__msg__TFMessage__fini+0x6>
 801429e:	f7f7 bb5d 	b.w	800b95c <geometry_msgs__msg__TransformStamped__Sequence__fini>
 80142a2:	4770      	bx	lr

080142a4 <builtin_interfaces__msg__Time__get_type_hash>:
 80142a4:	4800      	ldr	r0, [pc, #0]	@ (80142a8 <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 80142a6:	4770      	bx	lr
 80142a8:	20001628 	.word	0x20001628

080142ac <builtin_interfaces__msg__Time__get_type_description>:
 80142ac:	4b03      	ldr	r3, [pc, #12]	@ (80142bc <builtin_interfaces__msg__Time__get_type_description+0x10>)
 80142ae:	781a      	ldrb	r2, [r3, #0]
 80142b0:	b90a      	cbnz	r2, 80142b6 <builtin_interfaces__msg__Time__get_type_description+0xa>
 80142b2:	2201      	movs	r2, #1
 80142b4:	701a      	strb	r2, [r3, #0]
 80142b6:	4802      	ldr	r0, [pc, #8]	@ (80142c0 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 80142b8:	4770      	bx	lr
 80142ba:	bf00      	nop
 80142bc:	20010f09 	.word	0x20010f09
 80142c0:	08019fe0 	.word	0x08019fe0

080142c4 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 80142c4:	4800      	ldr	r0, [pc, #0]	@ (80142c8 <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 80142c6:	4770      	bx	lr
 80142c8:	08019fbc 	.word	0x08019fbc

080142cc <builtin_interfaces__msg__Time__get_type_description_sources>:
 80142cc:	4b09      	ldr	r3, [pc, #36]	@ (80142f4 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 80142ce:	781a      	ldrb	r2, [r3, #0]
 80142d0:	b96a      	cbnz	r2, 80142ee <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 80142d2:	b430      	push	{r4, r5}
 80142d4:	4d08      	ldr	r5, [pc, #32]	@ (80142f8 <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 80142d6:	4c09      	ldr	r4, [pc, #36]	@ (80142fc <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 80142d8:	2201      	movs	r2, #1
 80142da:	701a      	strb	r2, [r3, #0]
 80142dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80142e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80142e4:	682b      	ldr	r3, [r5, #0]
 80142e6:	4806      	ldr	r0, [pc, #24]	@ (8014300 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 80142e8:	6023      	str	r3, [r4, #0]
 80142ea:	bc30      	pop	{r4, r5}
 80142ec:	4770      	bx	lr
 80142ee:	4804      	ldr	r0, [pc, #16]	@ (8014300 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 80142f0:	4770      	bx	lr
 80142f2:	bf00      	nop
 80142f4:	20010f08 	.word	0x20010f08
 80142f8:	08019fbc 	.word	0x08019fbc
 80142fc:	20010ee4 	.word	0x20010ee4
 8014300:	08019fb0 	.word	0x08019fb0

08014304 <builtin_interfaces__msg__Time__init>:
 8014304:	3800      	subs	r0, #0
 8014306:	bf18      	it	ne
 8014308:	2001      	movne	r0, #1
 801430a:	4770      	bx	lr

0801430c <builtin_interfaces__msg__Time__fini>:
 801430c:	4770      	bx	lr
 801430e:	bf00      	nop

08014310 <geometry_msgs__msg__Point__get_type_hash>:
 8014310:	4800      	ldr	r0, [pc, #0]	@ (8014314 <geometry_msgs__msg__Point__get_type_hash+0x4>)
 8014312:	4770      	bx	lr
 8014314:	200018b0 	.word	0x200018b0

08014318 <geometry_msgs__msg__Point__get_type_description>:
 8014318:	4b03      	ldr	r3, [pc, #12]	@ (8014328 <geometry_msgs__msg__Point__get_type_description+0x10>)
 801431a:	781a      	ldrb	r2, [r3, #0]
 801431c:	b90a      	cbnz	r2, 8014322 <geometry_msgs__msg__Point__get_type_description+0xa>
 801431e:	2201      	movs	r2, #1
 8014320:	701a      	strb	r2, [r3, #0]
 8014322:	4802      	ldr	r0, [pc, #8]	@ (801432c <geometry_msgs__msg__Point__get_type_description+0x14>)
 8014324:	4770      	bx	lr
 8014326:	bf00      	nop
 8014328:	20010f31 	.word	0x20010f31
 801432c:	0801a034 	.word	0x0801a034

08014330 <geometry_msgs__msg__Point__get_individual_type_description_source>:
 8014330:	4800      	ldr	r0, [pc, #0]	@ (8014334 <geometry_msgs__msg__Point__get_individual_type_description_source+0x4>)
 8014332:	4770      	bx	lr
 8014334:	0801a010 	.word	0x0801a010

08014338 <geometry_msgs__msg__Point__get_type_description_sources>:
 8014338:	4b09      	ldr	r3, [pc, #36]	@ (8014360 <geometry_msgs__msg__Point__get_type_description_sources+0x28>)
 801433a:	781a      	ldrb	r2, [r3, #0]
 801433c:	b96a      	cbnz	r2, 801435a <geometry_msgs__msg__Point__get_type_description_sources+0x22>
 801433e:	b430      	push	{r4, r5}
 8014340:	4d08      	ldr	r5, [pc, #32]	@ (8014364 <geometry_msgs__msg__Point__get_type_description_sources+0x2c>)
 8014342:	4c09      	ldr	r4, [pc, #36]	@ (8014368 <geometry_msgs__msg__Point__get_type_description_sources+0x30>)
 8014344:	2201      	movs	r2, #1
 8014346:	701a      	strb	r2, [r3, #0]
 8014348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801434a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801434c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801434e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014350:	682b      	ldr	r3, [r5, #0]
 8014352:	4806      	ldr	r0, [pc, #24]	@ (801436c <geometry_msgs__msg__Point__get_type_description_sources+0x34>)
 8014354:	6023      	str	r3, [r4, #0]
 8014356:	bc30      	pop	{r4, r5}
 8014358:	4770      	bx	lr
 801435a:	4804      	ldr	r0, [pc, #16]	@ (801436c <geometry_msgs__msg__Point__get_type_description_sources+0x34>)
 801435c:	4770      	bx	lr
 801435e:	bf00      	nop
 8014360:	20010f30 	.word	0x20010f30
 8014364:	0801a010 	.word	0x0801a010
 8014368:	20010f0c 	.word	0x20010f0c
 801436c:	0801a004 	.word	0x0801a004

08014370 <geometry_msgs__msg__Pose__get_type_hash>:
 8014370:	4800      	ldr	r0, [pc, #0]	@ (8014374 <geometry_msgs__msg__Pose__get_type_hash+0x4>)
 8014372:	4770      	bx	lr
 8014374:	20001a2c 	.word	0x20001a2c

08014378 <geometry_msgs__msg__Pose__get_type_description>:
 8014378:	b570      	push	{r4, r5, r6, lr}
 801437a:	4e0c      	ldr	r6, [pc, #48]	@ (80143ac <geometry_msgs__msg__Pose__get_type_description+0x34>)
 801437c:	7835      	ldrb	r5, [r6, #0]
 801437e:	b10d      	cbz	r5, 8014384 <geometry_msgs__msg__Pose__get_type_description+0xc>
 8014380:	480b      	ldr	r0, [pc, #44]	@ (80143b0 <geometry_msgs__msg__Pose__get_type_description+0x38>)
 8014382:	bd70      	pop	{r4, r5, r6, pc}
 8014384:	4628      	mov	r0, r5
 8014386:	f7ff ffc7 	bl	8014318 <geometry_msgs__msg__Point__get_type_description>
 801438a:	300c      	adds	r0, #12
 801438c:	c807      	ldmia	r0, {r0, r1, r2}
 801438e:	4c09      	ldr	r4, [pc, #36]	@ (80143b4 <geometry_msgs__msg__Pose__get_type_description+0x3c>)
 8014390:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014394:	4628      	mov	r0, r5
 8014396:	f000 f8d9 	bl	801454c <geometry_msgs__msg__Quaternion__get_type_description>
 801439a:	300c      	adds	r0, #12
 801439c:	c807      	ldmia	r0, {r0, r1, r2}
 801439e:	3418      	adds	r4, #24
 80143a0:	2301      	movs	r3, #1
 80143a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80143a6:	7033      	strb	r3, [r6, #0]
 80143a8:	4801      	ldr	r0, [pc, #4]	@ (80143b0 <geometry_msgs__msg__Pose__get_type_description+0x38>)
 80143aa:	bd70      	pop	{r4, r5, r6, pc}
 80143ac:	20010fa1 	.word	0x20010fa1
 80143b0:	0801a088 	.word	0x0801a088
 80143b4:	20001ad8 	.word	0x20001ad8

080143b8 <geometry_msgs__msg__Pose__get_individual_type_description_source>:
 80143b8:	4800      	ldr	r0, [pc, #0]	@ (80143bc <geometry_msgs__msg__Pose__get_individual_type_description_source+0x4>)
 80143ba:	4770      	bx	lr
 80143bc:	0801a064 	.word	0x0801a064

080143c0 <geometry_msgs__msg__Pose__get_type_description_sources>:
 80143c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143c2:	4e17      	ldr	r6, [pc, #92]	@ (8014420 <geometry_msgs__msg__Pose__get_type_description_sources+0x60>)
 80143c4:	7837      	ldrb	r7, [r6, #0]
 80143c6:	b10f      	cbz	r7, 80143cc <geometry_msgs__msg__Pose__get_type_description_sources+0xc>
 80143c8:	4816      	ldr	r0, [pc, #88]	@ (8014424 <geometry_msgs__msg__Pose__get_type_description_sources+0x64>)
 80143ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143cc:	4d16      	ldr	r5, [pc, #88]	@ (8014428 <geometry_msgs__msg__Pose__get_type_description_sources+0x68>)
 80143ce:	4c17      	ldr	r4, [pc, #92]	@ (801442c <geometry_msgs__msg__Pose__get_type_description_sources+0x6c>)
 80143d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80143d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80143d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80143d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80143d8:	682b      	ldr	r3, [r5, #0]
 80143da:	4625      	mov	r5, r4
 80143dc:	4638      	mov	r0, r7
 80143de:	f845 3b04 	str.w	r3, [r5], #4
 80143e2:	f7ff ffa5 	bl	8014330 <geometry_msgs__msg__Point__get_individual_type_description_source>
 80143e6:	4684      	mov	ip, r0
 80143e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80143ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80143ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80143f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80143f4:	4638      	mov	r0, r7
 80143f6:	f8dc 3000 	ldr.w	r3, [ip]
 80143fa:	602b      	str	r3, [r5, #0]
 80143fc:	f000 f8b2 	bl	8014564 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 8014400:	2301      	movs	r3, #1
 8014402:	4684      	mov	ip, r0
 8014404:	7033      	strb	r3, [r6, #0]
 8014406:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801440a:	3428      	adds	r4, #40	@ 0x28
 801440c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801440e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014414:	f8dc 3000 	ldr.w	r3, [ip]
 8014418:	4802      	ldr	r0, [pc, #8]	@ (8014424 <geometry_msgs__msg__Pose__get_type_description_sources+0x64>)
 801441a:	6023      	str	r3, [r4, #0]
 801441c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801441e:	bf00      	nop
 8014420:	20010fa0 	.word	0x20010fa0
 8014424:	0801a058 	.word	0x0801a058
 8014428:	0801a064 	.word	0x0801a064
 801442c:	20010f34 	.word	0x20010f34

08014430 <geometry_msgs__msg__PoseWithCovariance__get_type_hash>:
 8014430:	4800      	ldr	r0, [pc, #0]	@ (8014434 <geometry_msgs__msg__PoseWithCovariance__get_type_hash+0x4>)
 8014432:	4770      	bx	lr
 8014434:	20001bf8 	.word	0x20001bf8

08014438 <geometry_msgs__msg__PoseWithCovariance__get_type_description>:
 8014438:	b570      	push	{r4, r5, r6, lr}
 801443a:	4e11      	ldr	r6, [pc, #68]	@ (8014480 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x48>)
 801443c:	7835      	ldrb	r5, [r6, #0]
 801443e:	b10d      	cbz	r5, 8014444 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xc>
 8014440:	4810      	ldr	r0, [pc, #64]	@ (8014484 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x4c>)
 8014442:	bd70      	pop	{r4, r5, r6, pc}
 8014444:	4628      	mov	r0, r5
 8014446:	f7ff ff67 	bl	8014318 <geometry_msgs__msg__Point__get_type_description>
 801444a:	300c      	adds	r0, #12
 801444c:	c807      	ldmia	r0, {r0, r1, r2}
 801444e:	4c0e      	ldr	r4, [pc, #56]	@ (8014488 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x50>)
 8014450:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014454:	4628      	mov	r0, r5
 8014456:	f7ff ff8f 	bl	8014378 <geometry_msgs__msg__Pose__get_type_description>
 801445a:	300c      	adds	r0, #12
 801445c:	c807      	ldmia	r0, {r0, r1, r2}
 801445e:	f104 0318 	add.w	r3, r4, #24
 8014462:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014466:	4628      	mov	r0, r5
 8014468:	f000 f870 	bl	801454c <geometry_msgs__msg__Quaternion__get_type_description>
 801446c:	300c      	adds	r0, #12
 801446e:	c807      	ldmia	r0, {r0, r1, r2}
 8014470:	3430      	adds	r4, #48	@ 0x30
 8014472:	2301      	movs	r3, #1
 8014474:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014478:	7033      	strb	r3, [r6, #0]
 801447a:	4802      	ldr	r0, [pc, #8]	@ (8014484 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x4c>)
 801447c:	bd70      	pop	{r4, r5, r6, pc}
 801447e:	bf00      	nop
 8014480:	20011035 	.word	0x20011035
 8014484:	0801a0dc 	.word	0x0801a0dc
 8014488:	20001d70 	.word	0x20001d70

0801448c <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source>:
 801448c:	4800      	ldr	r0, [pc, #0]	@ (8014490 <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source+0x4>)
 801448e:	4770      	bx	lr
 8014490:	0801a0b8 	.word	0x0801a0b8

08014494 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources>:
 8014494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014496:	4e1e      	ldr	r6, [pc, #120]	@ (8014510 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x7c>)
 8014498:	7837      	ldrb	r7, [r6, #0]
 801449a:	b10f      	cbz	r7, 80144a0 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0xc>
 801449c:	481d      	ldr	r0, [pc, #116]	@ (8014514 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x80>)
 801449e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144a0:	4d1d      	ldr	r5, [pc, #116]	@ (8014518 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x84>)
 80144a2:	4c1e      	ldr	r4, [pc, #120]	@ (801451c <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x88>)
 80144a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80144a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80144a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80144aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80144ac:	682b      	ldr	r3, [r5, #0]
 80144ae:	4625      	mov	r5, r4
 80144b0:	4638      	mov	r0, r7
 80144b2:	f845 3b04 	str.w	r3, [r5], #4
 80144b6:	f7ff ff3b 	bl	8014330 <geometry_msgs__msg__Point__get_individual_type_description_source>
 80144ba:	4684      	mov	ip, r0
 80144bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80144c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80144c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80144c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80144c8:	4638      	mov	r0, r7
 80144ca:	f8dc 3000 	ldr.w	r3, [ip]
 80144ce:	602b      	str	r3, [r5, #0]
 80144d0:	f7ff ff72 	bl	80143b8 <geometry_msgs__msg__Pose__get_individual_type_description_source>
 80144d4:	4684      	mov	ip, r0
 80144d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80144da:	f104 0528 	add.w	r5, r4, #40	@ 0x28
 80144de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80144e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80144e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80144e6:	4638      	mov	r0, r7
 80144e8:	f8dc 3000 	ldr.w	r3, [ip]
 80144ec:	602b      	str	r3, [r5, #0]
 80144ee:	f000 f839 	bl	8014564 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 80144f2:	2301      	movs	r3, #1
 80144f4:	4684      	mov	ip, r0
 80144f6:	7033      	strb	r3, [r6, #0]
 80144f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80144fc:	344c      	adds	r4, #76	@ 0x4c
 80144fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014500:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014506:	f8dc 3000 	ldr.w	r3, [ip]
 801450a:	4802      	ldr	r0, [pc, #8]	@ (8014514 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x80>)
 801450c:	6023      	str	r3, [r4, #0]
 801450e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014510:	20011034 	.word	0x20011034
 8014514:	0801a0ac 	.word	0x0801a0ac
 8014518:	0801a0b8 	.word	0x0801a0b8
 801451c:	20010fa4 	.word	0x20010fa4

08014520 <geometry_msgs__msg__PoseWithCovariance__init>:
 8014520:	b150      	cbz	r0, 8014538 <geometry_msgs__msg__PoseWithCovariance__init+0x18>
 8014522:	b510      	push	{r4, lr}
 8014524:	4604      	mov	r4, r0
 8014526:	f002 fe47 	bl	80171b8 <geometry_msgs__msg__Pose__init>
 801452a:	b100      	cbz	r0, 801452e <geometry_msgs__msg__PoseWithCovariance__init+0xe>
 801452c:	bd10      	pop	{r4, pc}
 801452e:	4620      	mov	r0, r4
 8014530:	f002 fe62 	bl	80171f8 <geometry_msgs__msg__Pose__fini>
 8014534:	2000      	movs	r0, #0
 8014536:	bd10      	pop	{r4, pc}
 8014538:	2000      	movs	r0, #0
 801453a:	4770      	bx	lr

0801453c <geometry_msgs__msg__PoseWithCovariance__fini>:
 801453c:	b108      	cbz	r0, 8014542 <geometry_msgs__msg__PoseWithCovariance__fini+0x6>
 801453e:	f002 be5b 	b.w	80171f8 <geometry_msgs__msg__Pose__fini>
 8014542:	4770      	bx	lr

08014544 <geometry_msgs__msg__Quaternion__get_type_hash>:
 8014544:	4800      	ldr	r0, [pc, #0]	@ (8014548 <geometry_msgs__msg__Quaternion__get_type_hash+0x4>)
 8014546:	4770      	bx	lr
 8014548:	20001ecc 	.word	0x20001ecc

0801454c <geometry_msgs__msg__Quaternion__get_type_description>:
 801454c:	4b03      	ldr	r3, [pc, #12]	@ (801455c <geometry_msgs__msg__Quaternion__get_type_description+0x10>)
 801454e:	781a      	ldrb	r2, [r3, #0]
 8014550:	b90a      	cbnz	r2, 8014556 <geometry_msgs__msg__Quaternion__get_type_description+0xa>
 8014552:	2201      	movs	r2, #1
 8014554:	701a      	strb	r2, [r3, #0]
 8014556:	4802      	ldr	r0, [pc, #8]	@ (8014560 <geometry_msgs__msg__Quaternion__get_type_description+0x14>)
 8014558:	4770      	bx	lr
 801455a:	bf00      	nop
 801455c:	2001105d 	.word	0x2001105d
 8014560:	0801a130 	.word	0x0801a130

08014564 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>:
 8014564:	4800      	ldr	r0, [pc, #0]	@ (8014568 <geometry_msgs__msg__Quaternion__get_individual_type_description_source+0x4>)
 8014566:	4770      	bx	lr
 8014568:	0801a10c 	.word	0x0801a10c

0801456c <geometry_msgs__msg__Quaternion__get_type_description_sources>:
 801456c:	4b09      	ldr	r3, [pc, #36]	@ (8014594 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x28>)
 801456e:	781a      	ldrb	r2, [r3, #0]
 8014570:	b96a      	cbnz	r2, 801458e <geometry_msgs__msg__Quaternion__get_type_description_sources+0x22>
 8014572:	b430      	push	{r4, r5}
 8014574:	4d08      	ldr	r5, [pc, #32]	@ (8014598 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x2c>)
 8014576:	4c09      	ldr	r4, [pc, #36]	@ (801459c <geometry_msgs__msg__Quaternion__get_type_description_sources+0x30>)
 8014578:	2201      	movs	r2, #1
 801457a:	701a      	strb	r2, [r3, #0]
 801457c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801457e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014584:	682b      	ldr	r3, [r5, #0]
 8014586:	4806      	ldr	r0, [pc, #24]	@ (80145a0 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 8014588:	6023      	str	r3, [r4, #0]
 801458a:	bc30      	pop	{r4, r5}
 801458c:	4770      	bx	lr
 801458e:	4804      	ldr	r0, [pc, #16]	@ (80145a0 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 8014590:	4770      	bx	lr
 8014592:	bf00      	nop
 8014594:	2001105c 	.word	0x2001105c
 8014598:	0801a10c 	.word	0x0801a10c
 801459c:	20011038 	.word	0x20011038
 80145a0:	0801a100 	.word	0x0801a100

080145a4 <geometry_msgs__msg__Transform__get_type_hash>:
 80145a4:	4800      	ldr	r0, [pc, #0]	@ (80145a8 <geometry_msgs__msg__Transform__get_type_hash+0x4>)
 80145a6:	4770      	bx	lr
 80145a8:	200020c8 	.word	0x200020c8

080145ac <geometry_msgs__msg__Transform__get_type_description>:
 80145ac:	b570      	push	{r4, r5, r6, lr}
 80145ae:	4e0c      	ldr	r6, [pc, #48]	@ (80145e0 <geometry_msgs__msg__Transform__get_type_description+0x34>)
 80145b0:	7835      	ldrb	r5, [r6, #0]
 80145b2:	b10d      	cbz	r5, 80145b8 <geometry_msgs__msg__Transform__get_type_description+0xc>
 80145b4:	480b      	ldr	r0, [pc, #44]	@ (80145e4 <geometry_msgs__msg__Transform__get_type_description+0x38>)
 80145b6:	bd70      	pop	{r4, r5, r6, pc}
 80145b8:	4628      	mov	r0, r5
 80145ba:	f7ff ffc7 	bl	801454c <geometry_msgs__msg__Quaternion__get_type_description>
 80145be:	300c      	adds	r0, #12
 80145c0:	c807      	ldmia	r0, {r0, r1, r2}
 80145c2:	4c09      	ldr	r4, [pc, #36]	@ (80145e8 <geometry_msgs__msg__Transform__get_type_description+0x3c>)
 80145c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80145c8:	4628      	mov	r0, r5
 80145ca:	f7f7 fa6f 	bl	800baac <geometry_msgs__msg__Vector3__get_type_description>
 80145ce:	300c      	adds	r0, #12
 80145d0:	c807      	ldmia	r0, {r0, r1, r2}
 80145d2:	3418      	adds	r4, #24
 80145d4:	2301      	movs	r3, #1
 80145d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80145da:	7033      	strb	r3, [r6, #0]
 80145dc:	4801      	ldr	r0, [pc, #4]	@ (80145e4 <geometry_msgs__msg__Transform__get_type_description+0x38>)
 80145de:	bd70      	pop	{r4, r5, r6, pc}
 80145e0:	200110cd 	.word	0x200110cd
 80145e4:	0801a184 	.word	0x0801a184
 80145e8:	20002174 	.word	0x20002174

080145ec <geometry_msgs__msg__Transform__get_individual_type_description_source>:
 80145ec:	4800      	ldr	r0, [pc, #0]	@ (80145f0 <geometry_msgs__msg__Transform__get_individual_type_description_source+0x4>)
 80145ee:	4770      	bx	lr
 80145f0:	0801a160 	.word	0x0801a160

080145f4 <geometry_msgs__msg__Transform__get_type_description_sources>:
 80145f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145f6:	4e17      	ldr	r6, [pc, #92]	@ (8014654 <geometry_msgs__msg__Transform__get_type_description_sources+0x60>)
 80145f8:	7837      	ldrb	r7, [r6, #0]
 80145fa:	b10f      	cbz	r7, 8014600 <geometry_msgs__msg__Transform__get_type_description_sources+0xc>
 80145fc:	4816      	ldr	r0, [pc, #88]	@ (8014658 <geometry_msgs__msg__Transform__get_type_description_sources+0x64>)
 80145fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014600:	4d16      	ldr	r5, [pc, #88]	@ (801465c <geometry_msgs__msg__Transform__get_type_description_sources+0x68>)
 8014602:	4c17      	ldr	r4, [pc, #92]	@ (8014660 <geometry_msgs__msg__Transform__get_type_description_sources+0x6c>)
 8014604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801460a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801460c:	682b      	ldr	r3, [r5, #0]
 801460e:	4625      	mov	r5, r4
 8014610:	4638      	mov	r0, r7
 8014612:	f845 3b04 	str.w	r3, [r5], #4
 8014616:	f7ff ffa5 	bl	8014564 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 801461a:	4684      	mov	ip, r0
 801461c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014622:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014628:	4638      	mov	r0, r7
 801462a:	f8dc 3000 	ldr.w	r3, [ip]
 801462e:	602b      	str	r3, [r5, #0]
 8014630:	f7f7 fa48 	bl	800bac4 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 8014634:	2301      	movs	r3, #1
 8014636:	4684      	mov	ip, r0
 8014638:	7033      	strb	r3, [r6, #0]
 801463a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801463e:	3428      	adds	r4, #40	@ 0x28
 8014640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014642:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014648:	f8dc 3000 	ldr.w	r3, [ip]
 801464c:	4802      	ldr	r0, [pc, #8]	@ (8014658 <geometry_msgs__msg__Transform__get_type_description_sources+0x64>)
 801464e:	6023      	str	r3, [r4, #0]
 8014650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014652:	bf00      	nop
 8014654:	200110cc 	.word	0x200110cc
 8014658:	0801a154 	.word	0x0801a154
 801465c:	0801a160 	.word	0x0801a160
 8014660:	20011060 	.word	0x20011060

08014664 <geometry_msgs__msg__Transform__init>:
 8014664:	b1d8      	cbz	r0, 801469e <geometry_msgs__msg__Transform__init+0x3a>
 8014666:	b538      	push	{r3, r4, r5, lr}
 8014668:	4604      	mov	r4, r0
 801466a:	f7f7 fa4b 	bl	800bb04 <geometry_msgs__msg__Vector3__init>
 801466e:	b130      	cbz	r0, 801467e <geometry_msgs__msg__Transform__init+0x1a>
 8014670:	f104 0518 	add.w	r5, r4, #24
 8014674:	4628      	mov	r0, r5
 8014676:	f002 fdcb 	bl	8017210 <geometry_msgs__msg__Quaternion__init>
 801467a:	b148      	cbz	r0, 8014690 <geometry_msgs__msg__Transform__init+0x2c>
 801467c:	bd38      	pop	{r3, r4, r5, pc}
 801467e:	4620      	mov	r0, r4
 8014680:	f7f7 fa44 	bl	800bb0c <geometry_msgs__msg__Vector3__fini>
 8014684:	f104 0018 	add.w	r0, r4, #24
 8014688:	f002 fdd6 	bl	8017238 <geometry_msgs__msg__Quaternion__fini>
 801468c:	2000      	movs	r0, #0
 801468e:	bd38      	pop	{r3, r4, r5, pc}
 8014690:	4620      	mov	r0, r4
 8014692:	f7f7 fa3b 	bl	800bb0c <geometry_msgs__msg__Vector3__fini>
 8014696:	4628      	mov	r0, r5
 8014698:	f002 fdce 	bl	8017238 <geometry_msgs__msg__Quaternion__fini>
 801469c:	e7f6      	b.n	801468c <geometry_msgs__msg__Transform__init+0x28>
 801469e:	2000      	movs	r0, #0
 80146a0:	4770      	bx	lr
 80146a2:	bf00      	nop

080146a4 <geometry_msgs__msg__Transform__fini>:
 80146a4:	b148      	cbz	r0, 80146ba <geometry_msgs__msg__Transform__fini+0x16>
 80146a6:	b510      	push	{r4, lr}
 80146a8:	4604      	mov	r4, r0
 80146aa:	f7f7 fa2f 	bl	800bb0c <geometry_msgs__msg__Vector3__fini>
 80146ae:	f104 0018 	add.w	r0, r4, #24
 80146b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146b6:	f002 bdbf 	b.w	8017238 <geometry_msgs__msg__Quaternion__fini>
 80146ba:	4770      	bx	lr

080146bc <geometry_msgs__msg__TransformStamped__get_type_hash>:
 80146bc:	4800      	ldr	r0, [pc, #0]	@ (80146c0 <geometry_msgs__msg__TransformStamped__get_type_hash+0x4>)
 80146be:	4770      	bx	lr
 80146c0:	20002298 	.word	0x20002298

080146c4 <geometry_msgs__msg__TransformStamped__get_type_description>:
 80146c4:	b570      	push	{r4, r5, r6, lr}
 80146c6:	4e1a      	ldr	r6, [pc, #104]	@ (8014730 <geometry_msgs__msg__TransformStamped__get_type_description+0x6c>)
 80146c8:	7835      	ldrb	r5, [r6, #0]
 80146ca:	b10d      	cbz	r5, 80146d0 <geometry_msgs__msg__TransformStamped__get_type_description+0xc>
 80146cc:	4819      	ldr	r0, [pc, #100]	@ (8014734 <geometry_msgs__msg__TransformStamped__get_type_description+0x70>)
 80146ce:	bd70      	pop	{r4, r5, r6, pc}
 80146d0:	4628      	mov	r0, r5
 80146d2:	f7ff fdeb 	bl	80142ac <builtin_interfaces__msg__Time__get_type_description>
 80146d6:	300c      	adds	r0, #12
 80146d8:	c807      	ldmia	r0, {r0, r1, r2}
 80146da:	4c17      	ldr	r4, [pc, #92]	@ (8014738 <geometry_msgs__msg__TransformStamped__get_type_description+0x74>)
 80146dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80146e0:	4628      	mov	r0, r5
 80146e2:	f7ff ff33 	bl	801454c <geometry_msgs__msg__Quaternion__get_type_description>
 80146e6:	300c      	adds	r0, #12
 80146e8:	c807      	ldmia	r0, {r0, r1, r2}
 80146ea:	f104 0318 	add.w	r3, r4, #24
 80146ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80146f2:	4628      	mov	r0, r5
 80146f4:	f7ff ff5a 	bl	80145ac <geometry_msgs__msg__Transform__get_type_description>
 80146f8:	300c      	adds	r0, #12
 80146fa:	c807      	ldmia	r0, {r0, r1, r2}
 80146fc:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8014700:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014704:	4628      	mov	r0, r5
 8014706:	f7f7 f9d1 	bl	800baac <geometry_msgs__msg__Vector3__get_type_description>
 801470a:	300c      	adds	r0, #12
 801470c:	c807      	ldmia	r0, {r0, r1, r2}
 801470e:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8014712:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014716:	4628      	mov	r0, r5
 8014718:	f7ff fc84 	bl	8014024 <std_msgs__msg__Header__get_type_description>
 801471c:	300c      	adds	r0, #12
 801471e:	c807      	ldmia	r0, {r0, r1, r2}
 8014720:	3460      	adds	r4, #96	@ 0x60
 8014722:	2301      	movs	r3, #1
 8014724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014728:	7033      	strb	r3, [r6, #0]
 801472a:	4802      	ldr	r0, [pc, #8]	@ (8014734 <geometry_msgs__msg__TransformStamped__get_type_description+0x70>)
 801472c:	bd70      	pop	{r4, r5, r6, pc}
 801472e:	bf00      	nop
 8014730:	200111a9 	.word	0x200111a9
 8014734:	0801a1d8 	.word	0x0801a1d8
 8014738:	200025b8 	.word	0x200025b8

0801473c <geometry_msgs__msg__TransformStamped__get_individual_type_description_source>:
 801473c:	4800      	ldr	r0, [pc, #0]	@ (8014740 <geometry_msgs__msg__TransformStamped__get_individual_type_description_source+0x4>)
 801473e:	4770      	bx	lr
 8014740:	0801a1b4 	.word	0x0801a1b4

08014744 <geometry_msgs__msg__TransformStamped__get_type_description_sources>:
 8014744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014746:	4d2d      	ldr	r5, [pc, #180]	@ (80147fc <geometry_msgs__msg__TransformStamped__get_type_description_sources+0xb8>)
 8014748:	782e      	ldrb	r6, [r5, #0]
 801474a:	b10e      	cbz	r6, 8014750 <geometry_msgs__msg__TransformStamped__get_type_description_sources+0xc>
 801474c:	482c      	ldr	r0, [pc, #176]	@ (8014800 <geometry_msgs__msg__TransformStamped__get_type_description_sources+0xbc>)
 801474e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014750:	4f2c      	ldr	r7, [pc, #176]	@ (8014804 <geometry_msgs__msg__TransformStamped__get_type_description_sources+0xc0>)
 8014752:	4c2d      	ldr	r4, [pc, #180]	@ (8014808 <geometry_msgs__msg__TransformStamped__get_type_description_sources+0xc4>)
 8014754:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014758:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801475a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801475c:	683b      	ldr	r3, [r7, #0]
 801475e:	4627      	mov	r7, r4
 8014760:	4630      	mov	r0, r6
 8014762:	f847 3b04 	str.w	r3, [r7], #4
 8014766:	f7ff fdad 	bl	80142c4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801476a:	4684      	mov	ip, r0
 801476c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014770:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014772:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014776:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014778:	4630      	mov	r0, r6
 801477a:	f8dc 3000 	ldr.w	r3, [ip]
 801477e:	603b      	str	r3, [r7, #0]
 8014780:	f7ff fef0 	bl	8014564 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 8014784:	4684      	mov	ip, r0
 8014786:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801478a:	f104 0728 	add.w	r7, r4, #40	@ 0x28
 801478e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014790:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014794:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014796:	4630      	mov	r0, r6
 8014798:	f8dc 3000 	ldr.w	r3, [ip]
 801479c:	603b      	str	r3, [r7, #0]
 801479e:	f7ff ff25 	bl	80145ec <geometry_msgs__msg__Transform__get_individual_type_description_source>
 80147a2:	4684      	mov	ip, r0
 80147a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80147a8:	f104 074c 	add.w	r7, r4, #76	@ 0x4c
 80147ac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80147ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80147b2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80147b4:	4630      	mov	r0, r6
 80147b6:	f8dc 3000 	ldr.w	r3, [ip]
 80147ba:	603b      	str	r3, [r7, #0]
 80147bc:	f7f7 f982 	bl	800bac4 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 80147c0:	4684      	mov	ip, r0
 80147c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80147c6:	f104 0770 	add.w	r7, r4, #112	@ 0x70
 80147ca:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80147cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80147d0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80147d2:	4630      	mov	r0, r6
 80147d4:	f8dc 3000 	ldr.w	r3, [ip]
 80147d8:	603b      	str	r3, [r7, #0]
 80147da:	f7ff fc3b 	bl	8014054 <std_msgs__msg__Header__get_individual_type_description_source>
 80147de:	2301      	movs	r3, #1
 80147e0:	4684      	mov	ip, r0
 80147e2:	702b      	strb	r3, [r5, #0]
 80147e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80147e8:	3494      	adds	r4, #148	@ 0x94
 80147ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80147ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80147f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80147f2:	f8dc 3000 	ldr.w	r3, [ip]
 80147f6:	4802      	ldr	r0, [pc, #8]	@ (8014800 <geometry_msgs__msg__TransformStamped__get_type_description_sources+0xbc>)
 80147f8:	6023      	str	r3, [r4, #0]
 80147fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147fc:	200111a8 	.word	0x200111a8
 8014800:	0801a1a8 	.word	0x0801a1a8
 8014804:	0801a1b4 	.word	0x0801a1b4
 8014808:	200110d0 	.word	0x200110d0

0801480c <geometry_msgs__msg__TwistWithCovariance__get_type_hash>:
 801480c:	4800      	ldr	r0, [pc, #0]	@ (8014810 <geometry_msgs__msg__TwistWithCovariance__get_type_hash+0x4>)
 801480e:	4770      	bx	lr
 8014810:	200027d0 	.word	0x200027d0

08014814 <geometry_msgs__msg__TwistWithCovariance__get_type_description>:
 8014814:	b570      	push	{r4, r5, r6, lr}
 8014816:	4e0c      	ldr	r6, [pc, #48]	@ (8014848 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x34>)
 8014818:	7835      	ldrb	r5, [r6, #0]
 801481a:	b10d      	cbz	r5, 8014820 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0xc>
 801481c:	480b      	ldr	r0, [pc, #44]	@ (801484c <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x38>)
 801481e:	bd70      	pop	{r4, r5, r6, pc}
 8014820:	4628      	mov	r0, r5
 8014822:	f7f7 f8cf 	bl	800b9c4 <geometry_msgs__msg__Twist__get_type_description>
 8014826:	300c      	adds	r0, #12
 8014828:	c807      	ldmia	r0, {r0, r1, r2}
 801482a:	4c09      	ldr	r4, [pc, #36]	@ (8014850 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x3c>)
 801482c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014830:	4628      	mov	r0, r5
 8014832:	f7f7 f93b 	bl	800baac <geometry_msgs__msg__Vector3__get_type_description>
 8014836:	300c      	adds	r0, #12
 8014838:	c807      	ldmia	r0, {r0, r1, r2}
 801483a:	3418      	adds	r4, #24
 801483c:	2301      	movs	r3, #1
 801483e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014842:	7033      	strb	r3, [r6, #0]
 8014844:	4801      	ldr	r0, [pc, #4]	@ (801484c <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x38>)
 8014846:	bd70      	pop	{r4, r5, r6, pc}
 8014848:	20011219 	.word	0x20011219
 801484c:	0801a22c 	.word	0x0801a22c
 8014850:	2000294c 	.word	0x2000294c

08014854 <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source>:
 8014854:	4800      	ldr	r0, [pc, #0]	@ (8014858 <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source+0x4>)
 8014856:	4770      	bx	lr
 8014858:	0801a208 	.word	0x0801a208

0801485c <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources>:
 801485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801485e:	4e17      	ldr	r6, [pc, #92]	@ (80148bc <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x60>)
 8014860:	7837      	ldrb	r7, [r6, #0]
 8014862:	b10f      	cbz	r7, 8014868 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0xc>
 8014864:	4816      	ldr	r0, [pc, #88]	@ (80148c0 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x64>)
 8014866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014868:	4d16      	ldr	r5, [pc, #88]	@ (80148c4 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x68>)
 801486a:	4c17      	ldr	r4, [pc, #92]	@ (80148c8 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x6c>)
 801486c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801486e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014874:	682b      	ldr	r3, [r5, #0]
 8014876:	4625      	mov	r5, r4
 8014878:	4638      	mov	r0, r7
 801487a:	f845 3b04 	str.w	r3, [r5], #4
 801487e:	f7f7 f8b9 	bl	800b9f4 <geometry_msgs__msg__Twist__get_individual_type_description_source>
 8014882:	4684      	mov	ip, r0
 8014884:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801488a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801488e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014890:	4638      	mov	r0, r7
 8014892:	f8dc 3000 	ldr.w	r3, [ip]
 8014896:	602b      	str	r3, [r5, #0]
 8014898:	f7f7 f914 	bl	800bac4 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 801489c:	2301      	movs	r3, #1
 801489e:	4684      	mov	ip, r0
 80148a0:	7033      	strb	r3, [r6, #0]
 80148a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80148a6:	3428      	adds	r4, #40	@ 0x28
 80148a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80148aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80148ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80148b0:	f8dc 3000 	ldr.w	r3, [ip]
 80148b4:	4802      	ldr	r0, [pc, #8]	@ (80148c0 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x64>)
 80148b6:	6023      	str	r3, [r4, #0]
 80148b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148ba:	bf00      	nop
 80148bc:	20011218 	.word	0x20011218
 80148c0:	0801a1fc 	.word	0x0801a1fc
 80148c4:	0801a208 	.word	0x0801a208
 80148c8:	200111ac 	.word	0x200111ac

080148cc <geometry_msgs__msg__TwistWithCovariance__init>:
 80148cc:	b150      	cbz	r0, 80148e4 <geometry_msgs__msg__TwistWithCovariance__init+0x18>
 80148ce:	b510      	push	{r4, lr}
 80148d0:	4604      	mov	r4, r0
 80148d2:	f7f7 f8bb 	bl	800ba4c <geometry_msgs__msg__Twist__init>
 80148d6:	b100      	cbz	r0, 80148da <geometry_msgs__msg__TwistWithCovariance__init+0xe>
 80148d8:	bd10      	pop	{r4, pc}
 80148da:	4620      	mov	r0, r4
 80148dc:	f7f7 f8d6 	bl	800ba8c <geometry_msgs__msg__Twist__fini>
 80148e0:	2000      	movs	r0, #0
 80148e2:	bd10      	pop	{r4, pc}
 80148e4:	2000      	movs	r0, #0
 80148e6:	4770      	bx	lr

080148e8 <geometry_msgs__msg__TwistWithCovariance__fini>:
 80148e8:	b108      	cbz	r0, 80148ee <geometry_msgs__msg__TwistWithCovariance__fini+0x6>
 80148ea:	f7f7 b8cf 	b.w	800ba8c <geometry_msgs__msg__Twist__fini>
 80148ee:	4770      	bx	lr

080148f0 <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_init_function>:
 80148f0:	f002 bc62 	b.w	80171b8 <geometry_msgs__msg__Pose__init>

080148f4 <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_fini_function>:
 80148f4:	f002 bc80 	b.w	80171f8 <geometry_msgs__msg__Pose__fini>

080148f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 80148f8:	b510      	push	{r4, lr}
 80148fa:	f002 fca3 	bl	8017244 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 80148fe:	4c07      	ldr	r4, [pc, #28]	@ (801491c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x24>)
 8014900:	60e0      	str	r0, [r4, #12]
 8014902:	f000 f815 	bl	8014930 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8014906:	4b06      	ldr	r3, [pc, #24]	@ (8014920 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8014908:	64a0      	str	r0, [r4, #72]	@ 0x48
 801490a:	681a      	ldr	r2, [r3, #0]
 801490c:	b10a      	cbz	r2, 8014912 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x1a>
 801490e:	4804      	ldr	r0, [pc, #16]	@ (8014920 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8014910:	bd10      	pop	{r4, pc}
 8014912:	4a04      	ldr	r2, [pc, #16]	@ (8014924 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x2c>)
 8014914:	4802      	ldr	r0, [pc, #8]	@ (8014920 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8014916:	6812      	ldr	r2, [r2, #0]
 8014918:	601a      	str	r2, [r3, #0]
 801491a:	bd10      	pop	{r4, pc}
 801491c:	20002a88 	.word	0x20002a88
 8014920:	20002a70 	.word	0x20002a70
 8014924:	2000037c 	.word	0x2000037c

08014928 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8014928:	f002 bc72 	b.w	8017210 <geometry_msgs__msg__Quaternion__init>

0801492c <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 801492c:	f002 bc84 	b.w	8017238 <geometry_msgs__msg__Quaternion__fini>

08014930 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8014930:	4b04      	ldr	r3, [pc, #16]	@ (8014944 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8014932:	681a      	ldr	r2, [r3, #0]
 8014934:	b10a      	cbz	r2, 801493a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8014936:	4803      	ldr	r0, [pc, #12]	@ (8014944 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8014938:	4770      	bx	lr
 801493a:	4a03      	ldr	r2, [pc, #12]	@ (8014948 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 801493c:	4801      	ldr	r0, [pc, #4]	@ (8014944 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 801493e:	6812      	ldr	r2, [r2, #0]
 8014940:	601a      	str	r2, [r3, #0]
 8014942:	4770      	bx	lr
 8014944:	20002b00 	.word	0x20002b00
 8014948:	2000037c 	.word	0x2000037c

0801494c <geometry_msgs__msg__Transform__rosidl_typesupport_introspection_c__Transform_init_function>:
 801494c:	f7ff be8a 	b.w	8014664 <geometry_msgs__msg__Transform__init>

08014950 <geometry_msgs__msg__Transform__rosidl_typesupport_introspection_c__Transform_fini_function>:
 8014950:	f7ff bea8 	b.w	80146a4 <geometry_msgs__msg__Transform__fini>

08014954 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Transform>:
 8014954:	b510      	push	{r4, lr}
 8014956:	f7f3 f91f 	bl	8007b98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801495a:	4c07      	ldr	r4, [pc, #28]	@ (8014978 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Transform+0x24>)
 801495c:	60e0      	str	r0, [r4, #12]
 801495e:	f7ff ffe7 	bl	8014930 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8014962:	4b06      	ldr	r3, [pc, #24]	@ (801497c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Transform+0x28>)
 8014964:	64a0      	str	r0, [r4, #72]	@ 0x48
 8014966:	681a      	ldr	r2, [r3, #0]
 8014968:	b10a      	cbz	r2, 801496e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Transform+0x1a>
 801496a:	4804      	ldr	r0, [pc, #16]	@ (801497c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Transform+0x28>)
 801496c:	bd10      	pop	{r4, pc}
 801496e:	4a04      	ldr	r2, [pc, #16]	@ (8014980 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Transform+0x2c>)
 8014970:	4802      	ldr	r0, [pc, #8]	@ (801497c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Transform+0x28>)
 8014972:	6812      	ldr	r2, [r2, #0]
 8014974:	601a      	str	r2, [r3, #0]
 8014976:	bd10      	pop	{r4, pc}
 8014978:	20002c20 	.word	0x20002c20
 801497c:	20002c08 	.word	0x20002c08
 8014980:	2000037c 	.word	0x2000037c

08014984 <get_serialized_size_geometry_msgs__msg__Pose>:
 8014984:	b570      	push	{r4, r5, r6, lr}
 8014986:	4604      	mov	r4, r0
 8014988:	b148      	cbz	r0, 801499e <get_serialized_size_geometry_msgs__msg__Pose+0x1a>
 801498a:	460d      	mov	r5, r1
 801498c:	f002 fc68 	bl	8017260 <get_serialized_size_geometry_msgs__msg__Point>
 8014990:	4606      	mov	r6, r0
 8014992:	1829      	adds	r1, r5, r0
 8014994:	f104 0018 	add.w	r0, r4, #24
 8014998:	f000 f864 	bl	8014a64 <get_serialized_size_geometry_msgs__msg__Quaternion>
 801499c:	4430      	add	r0, r6
 801499e:	bd70      	pop	{r4, r5, r6, pc}

080149a0 <_Pose__cdr_deserialize>:
 80149a0:	b570      	push	{r4, r5, r6, lr}
 80149a2:	460c      	mov	r4, r1
 80149a4:	b189      	cbz	r1, 80149ca <_Pose__cdr_deserialize+0x2a>
 80149a6:	4605      	mov	r5, r0
 80149a8:	f002 fce6 	bl	8017378 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 80149ac:	6843      	ldr	r3, [r0, #4]
 80149ae:	4621      	mov	r1, r4
 80149b0:	68db      	ldr	r3, [r3, #12]
 80149b2:	4628      	mov	r0, r5
 80149b4:	4798      	blx	r3
 80149b6:	f000 f909 	bl	8014bcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80149ba:	6843      	ldr	r3, [r0, #4]
 80149bc:	f104 0118 	add.w	r1, r4, #24
 80149c0:	4628      	mov	r0, r5
 80149c2:	68db      	ldr	r3, [r3, #12]
 80149c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80149c8:	4718      	bx	r3
 80149ca:	4608      	mov	r0, r1
 80149cc:	bd70      	pop	{r4, r5, r6, pc}
 80149ce:	bf00      	nop

080149d0 <_Pose__cdr_serialize>:
 80149d0:	b198      	cbz	r0, 80149fa <_Pose__cdr_serialize+0x2a>
 80149d2:	b570      	push	{r4, r5, r6, lr}
 80149d4:	460d      	mov	r5, r1
 80149d6:	4604      	mov	r4, r0
 80149d8:	f002 fcce 	bl	8017378 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 80149dc:	6843      	ldr	r3, [r0, #4]
 80149de:	4629      	mov	r1, r5
 80149e0:	689b      	ldr	r3, [r3, #8]
 80149e2:	4620      	mov	r0, r4
 80149e4:	4798      	blx	r3
 80149e6:	f000 f8f1 	bl	8014bcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80149ea:	6843      	ldr	r3, [r0, #4]
 80149ec:	4629      	mov	r1, r5
 80149ee:	f104 0018 	add.w	r0, r4, #24
 80149f2:	689b      	ldr	r3, [r3, #8]
 80149f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80149f8:	4718      	bx	r3
 80149fa:	4770      	bx	lr

080149fc <_Pose__get_serialized_size>:
 80149fc:	b538      	push	{r3, r4, r5, lr}
 80149fe:	4604      	mov	r4, r0
 8014a00:	b148      	cbz	r0, 8014a16 <_Pose__get_serialized_size+0x1a>
 8014a02:	2100      	movs	r1, #0
 8014a04:	f002 fc2c 	bl	8017260 <get_serialized_size_geometry_msgs__msg__Point>
 8014a08:	4605      	mov	r5, r0
 8014a0a:	4601      	mov	r1, r0
 8014a0c:	f104 0018 	add.w	r0, r4, #24
 8014a10:	f000 f828 	bl	8014a64 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8014a14:	4428      	add	r0, r5
 8014a16:	bd38      	pop	{r3, r4, r5, pc}

08014a18 <_Pose__max_serialized_size>:
 8014a18:	b510      	push	{r4, lr}
 8014a1a:	b082      	sub	sp, #8
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	2100      	movs	r1, #0
 8014a20:	f10d 0007 	add.w	r0, sp, #7
 8014a24:	f88d 3007 	strb.w	r3, [sp, #7]
 8014a28:	f002 fc8c 	bl	8017344 <max_serialized_size_geometry_msgs__msg__Point>
 8014a2c:	4604      	mov	r4, r0
 8014a2e:	4601      	mov	r1, r0
 8014a30:	f10d 0007 	add.w	r0, sp, #7
 8014a34:	f000 f8a8 	bl	8014b88 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8014a38:	4420      	add	r0, r4
 8014a3a:	b002      	add	sp, #8
 8014a3c:	bd10      	pop	{r4, pc}
 8014a3e:	bf00      	nop

08014a40 <max_serialized_size_geometry_msgs__msg__Pose>:
 8014a40:	2301      	movs	r3, #1
 8014a42:	b570      	push	{r4, r5, r6, lr}
 8014a44:	7003      	strb	r3, [r0, #0]
 8014a46:	4605      	mov	r5, r0
 8014a48:	460e      	mov	r6, r1
 8014a4a:	f002 fc7b 	bl	8017344 <max_serialized_size_geometry_msgs__msg__Point>
 8014a4e:	4604      	mov	r4, r0
 8014a50:	1831      	adds	r1, r6, r0
 8014a52:	4628      	mov	r0, r5
 8014a54:	f000 f898 	bl	8014b88 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8014a58:	4420      	add	r0, r4
 8014a5a:	bd70      	pop	{r4, r5, r6, pc}

08014a5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8014a5c:	4800      	ldr	r0, [pc, #0]	@ (8014a60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x4>)
 8014a5e:	4770      	bx	lr
 8014a60:	20002c98 	.word	0x20002c98

08014a64 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8014a64:	b1f0      	cbz	r0, 8014aa4 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 8014a66:	b570      	push	{r4, r5, r6, lr}
 8014a68:	460d      	mov	r5, r1
 8014a6a:	4628      	mov	r0, r5
 8014a6c:	2108      	movs	r1, #8
 8014a6e:	f7f4 fc93 	bl	8009398 <ucdr_alignment>
 8014a72:	2108      	movs	r1, #8
 8014a74:	186c      	adds	r4, r5, r1
 8014a76:	4404      	add	r4, r0
 8014a78:	4620      	mov	r0, r4
 8014a7a:	f7f4 fc8d 	bl	8009398 <ucdr_alignment>
 8014a7e:	f100 0608 	add.w	r6, r0, #8
 8014a82:	4426      	add	r6, r4
 8014a84:	2108      	movs	r1, #8
 8014a86:	4630      	mov	r0, r6
 8014a88:	f7f4 fc86 	bl	8009398 <ucdr_alignment>
 8014a8c:	f100 0408 	add.w	r4, r0, #8
 8014a90:	4434      	add	r4, r6
 8014a92:	2108      	movs	r1, #8
 8014a94:	4620      	mov	r0, r4
 8014a96:	f7f4 fc7f 	bl	8009398 <ucdr_alignment>
 8014a9a:	f1c5 0508 	rsb	r5, r5, #8
 8014a9e:	4405      	add	r5, r0
 8014aa0:	1928      	adds	r0, r5, r4
 8014aa2:	bd70      	pop	{r4, r5, r6, pc}
 8014aa4:	4770      	bx	lr
 8014aa6:	bf00      	nop

08014aa8 <_Quaternion__cdr_deserialize>:
 8014aa8:	b538      	push	{r3, r4, r5, lr}
 8014aaa:	460c      	mov	r4, r1
 8014aac:	b199      	cbz	r1, 8014ad6 <_Quaternion__cdr_deserialize+0x2e>
 8014aae:	4605      	mov	r5, r0
 8014ab0:	f7f4 fa94 	bl	8008fdc <ucdr_deserialize_double>
 8014ab4:	f104 0108 	add.w	r1, r4, #8
 8014ab8:	4628      	mov	r0, r5
 8014aba:	f7f4 fa8f 	bl	8008fdc <ucdr_deserialize_double>
 8014abe:	f104 0110 	add.w	r1, r4, #16
 8014ac2:	4628      	mov	r0, r5
 8014ac4:	f7f4 fa8a 	bl	8008fdc <ucdr_deserialize_double>
 8014ac8:	f104 0118 	add.w	r1, r4, #24
 8014acc:	4628      	mov	r0, r5
 8014ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ad2:	f7f4 ba83 	b.w	8008fdc <ucdr_deserialize_double>
 8014ad6:	4608      	mov	r0, r1
 8014ad8:	bd38      	pop	{r3, r4, r5, pc}
 8014ada:	bf00      	nop

08014adc <_Quaternion__cdr_serialize>:
 8014adc:	b1c0      	cbz	r0, 8014b10 <_Quaternion__cdr_serialize+0x34>
 8014ade:	b538      	push	{r3, r4, r5, lr}
 8014ae0:	ed90 0b00 	vldr	d0, [r0]
 8014ae4:	460d      	mov	r5, r1
 8014ae6:	4604      	mov	r4, r0
 8014ae8:	4608      	mov	r0, r1
 8014aea:	f7f4 f8e7 	bl	8008cbc <ucdr_serialize_double>
 8014aee:	ed94 0b02 	vldr	d0, [r4, #8]
 8014af2:	4628      	mov	r0, r5
 8014af4:	f7f4 f8e2 	bl	8008cbc <ucdr_serialize_double>
 8014af8:	ed94 0b04 	vldr	d0, [r4, #16]
 8014afc:	4628      	mov	r0, r5
 8014afe:	f7f4 f8dd 	bl	8008cbc <ucdr_serialize_double>
 8014b02:	ed94 0b06 	vldr	d0, [r4, #24]
 8014b06:	4628      	mov	r0, r5
 8014b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b0c:	f7f4 b8d6 	b.w	8008cbc <ucdr_serialize_double>
 8014b10:	4770      	bx	lr
 8014b12:	bf00      	nop

08014b14 <_Quaternion__get_serialized_size>:
 8014b14:	b1d8      	cbz	r0, 8014b4e <_Quaternion__get_serialized_size+0x3a>
 8014b16:	b538      	push	{r3, r4, r5, lr}
 8014b18:	2108      	movs	r1, #8
 8014b1a:	2000      	movs	r0, #0
 8014b1c:	f7f4 fc3c 	bl	8009398 <ucdr_alignment>
 8014b20:	f100 0408 	add.w	r4, r0, #8
 8014b24:	2108      	movs	r1, #8
 8014b26:	4620      	mov	r0, r4
 8014b28:	f7f4 fc36 	bl	8009398 <ucdr_alignment>
 8014b2c:	f100 0508 	add.w	r5, r0, #8
 8014b30:	4425      	add	r5, r4
 8014b32:	2108      	movs	r1, #8
 8014b34:	4628      	mov	r0, r5
 8014b36:	f7f4 fc2f 	bl	8009398 <ucdr_alignment>
 8014b3a:	f100 0408 	add.w	r4, r0, #8
 8014b3e:	442c      	add	r4, r5
 8014b40:	2108      	movs	r1, #8
 8014b42:	4620      	mov	r0, r4
 8014b44:	f7f4 fc28 	bl	8009398 <ucdr_alignment>
 8014b48:	3008      	adds	r0, #8
 8014b4a:	4420      	add	r0, r4
 8014b4c:	bd38      	pop	{r3, r4, r5, pc}
 8014b4e:	4770      	bx	lr

08014b50 <_Quaternion__max_serialized_size>:
 8014b50:	b538      	push	{r3, r4, r5, lr}
 8014b52:	2108      	movs	r1, #8
 8014b54:	2000      	movs	r0, #0
 8014b56:	f7f4 fc1f 	bl	8009398 <ucdr_alignment>
 8014b5a:	f100 0408 	add.w	r4, r0, #8
 8014b5e:	2108      	movs	r1, #8
 8014b60:	4620      	mov	r0, r4
 8014b62:	f7f4 fc19 	bl	8009398 <ucdr_alignment>
 8014b66:	f100 0508 	add.w	r5, r0, #8
 8014b6a:	4425      	add	r5, r4
 8014b6c:	2108      	movs	r1, #8
 8014b6e:	4628      	mov	r0, r5
 8014b70:	f7f4 fc12 	bl	8009398 <ucdr_alignment>
 8014b74:	f100 0408 	add.w	r4, r0, #8
 8014b78:	442c      	add	r4, r5
 8014b7a:	2108      	movs	r1, #8
 8014b7c:	4620      	mov	r0, r4
 8014b7e:	f7f4 fc0b 	bl	8009398 <ucdr_alignment>
 8014b82:	3008      	adds	r0, #8
 8014b84:	4420      	add	r0, r4
 8014b86:	bd38      	pop	{r3, r4, r5, pc}

08014b88 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8014b88:	b570      	push	{r4, r5, r6, lr}
 8014b8a:	2301      	movs	r3, #1
 8014b8c:	460c      	mov	r4, r1
 8014b8e:	7003      	strb	r3, [r0, #0]
 8014b90:	2108      	movs	r1, #8
 8014b92:	4620      	mov	r0, r4
 8014b94:	f7f4 fc00 	bl	8009398 <ucdr_alignment>
 8014b98:	2108      	movs	r1, #8
 8014b9a:	1863      	adds	r3, r4, r1
 8014b9c:	18c5      	adds	r5, r0, r3
 8014b9e:	4628      	mov	r0, r5
 8014ba0:	f7f4 fbfa 	bl	8009398 <ucdr_alignment>
 8014ba4:	f100 0608 	add.w	r6, r0, #8
 8014ba8:	442e      	add	r6, r5
 8014baa:	2108      	movs	r1, #8
 8014bac:	4630      	mov	r0, r6
 8014bae:	f7f4 fbf3 	bl	8009398 <ucdr_alignment>
 8014bb2:	f100 0508 	add.w	r5, r0, #8
 8014bb6:	4435      	add	r5, r6
 8014bb8:	2108      	movs	r1, #8
 8014bba:	4628      	mov	r0, r5
 8014bbc:	f7f4 fbec 	bl	8009398 <ucdr_alignment>
 8014bc0:	f1c4 0408 	rsb	r4, r4, #8
 8014bc4:	4420      	add	r0, r4
 8014bc6:	4428      	add	r0, r5
 8014bc8:	bd70      	pop	{r4, r5, r6, pc}
 8014bca:	bf00      	nop

08014bcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8014bcc:	4800      	ldr	r0, [pc, #0]	@ (8014bd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8014bce:	4770      	bx	lr
 8014bd0:	20002ccc 	.word	0x20002ccc

08014bd4 <get_serialized_size_geometry_msgs__msg__Transform>:
 8014bd4:	b570      	push	{r4, r5, r6, lr}
 8014bd6:	4604      	mov	r4, r0
 8014bd8:	b148      	cbz	r0, 8014bee <get_serialized_size_geometry_msgs__msg__Transform+0x1a>
 8014bda:	460d      	mov	r5, r1
 8014bdc:	f7f3 f85a 	bl	8007c94 <get_serialized_size_geometry_msgs__msg__Vector3>
 8014be0:	4606      	mov	r6, r0
 8014be2:	1829      	adds	r1, r5, r0
 8014be4:	f104 0018 	add.w	r0, r4, #24
 8014be8:	f7ff ff3c 	bl	8014a64 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8014bec:	4430      	add	r0, r6
 8014bee:	bd70      	pop	{r4, r5, r6, pc}

08014bf0 <_Transform__cdr_deserialize>:
 8014bf0:	b570      	push	{r4, r5, r6, lr}
 8014bf2:	460c      	mov	r4, r1
 8014bf4:	b189      	cbz	r1, 8014c1a <_Transform__cdr_deserialize+0x2a>
 8014bf6:	4605      	mov	r5, r0
 8014bf8:	f7f3 f8d8 	bl	8007dac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8014bfc:	6843      	ldr	r3, [r0, #4]
 8014bfe:	4621      	mov	r1, r4
 8014c00:	68db      	ldr	r3, [r3, #12]
 8014c02:	4628      	mov	r0, r5
 8014c04:	4798      	blx	r3
 8014c06:	f7ff ffe1 	bl	8014bcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8014c0a:	6843      	ldr	r3, [r0, #4]
 8014c0c:	f104 0118 	add.w	r1, r4, #24
 8014c10:	4628      	mov	r0, r5
 8014c12:	68db      	ldr	r3, [r3, #12]
 8014c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c18:	4718      	bx	r3
 8014c1a:	4608      	mov	r0, r1
 8014c1c:	bd70      	pop	{r4, r5, r6, pc}
 8014c1e:	bf00      	nop

08014c20 <_Transform__cdr_serialize>:
 8014c20:	b198      	cbz	r0, 8014c4a <_Transform__cdr_serialize+0x2a>
 8014c22:	b570      	push	{r4, r5, r6, lr}
 8014c24:	460d      	mov	r5, r1
 8014c26:	4604      	mov	r4, r0
 8014c28:	f7f3 f8c0 	bl	8007dac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8014c2c:	6843      	ldr	r3, [r0, #4]
 8014c2e:	4629      	mov	r1, r5
 8014c30:	689b      	ldr	r3, [r3, #8]
 8014c32:	4620      	mov	r0, r4
 8014c34:	4798      	blx	r3
 8014c36:	f7ff ffc9 	bl	8014bcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8014c3a:	6843      	ldr	r3, [r0, #4]
 8014c3c:	4629      	mov	r1, r5
 8014c3e:	f104 0018 	add.w	r0, r4, #24
 8014c42:	689b      	ldr	r3, [r3, #8]
 8014c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c48:	4718      	bx	r3
 8014c4a:	4770      	bx	lr

08014c4c <_Transform__get_serialized_size>:
 8014c4c:	b538      	push	{r3, r4, r5, lr}
 8014c4e:	4604      	mov	r4, r0
 8014c50:	b148      	cbz	r0, 8014c66 <_Transform__get_serialized_size+0x1a>
 8014c52:	2100      	movs	r1, #0
 8014c54:	f7f3 f81e 	bl	8007c94 <get_serialized_size_geometry_msgs__msg__Vector3>
 8014c58:	4605      	mov	r5, r0
 8014c5a:	4601      	mov	r1, r0
 8014c5c:	f104 0018 	add.w	r0, r4, #24
 8014c60:	f7ff ff00 	bl	8014a64 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8014c64:	4428      	add	r0, r5
 8014c66:	bd38      	pop	{r3, r4, r5, pc}

08014c68 <_Transform__max_serialized_size>:
 8014c68:	b510      	push	{r4, lr}
 8014c6a:	b082      	sub	sp, #8
 8014c6c:	2301      	movs	r3, #1
 8014c6e:	2100      	movs	r1, #0
 8014c70:	f10d 0007 	add.w	r0, sp, #7
 8014c74:	f88d 3007 	strb.w	r3, [sp, #7]
 8014c78:	f7f3 f87e 	bl	8007d78 <max_serialized_size_geometry_msgs__msg__Vector3>
 8014c7c:	4604      	mov	r4, r0
 8014c7e:	4601      	mov	r1, r0
 8014c80:	f10d 0007 	add.w	r0, sp, #7
 8014c84:	f7ff ff80 	bl	8014b88 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8014c88:	4420      	add	r0, r4
 8014c8a:	b002      	add	sp, #8
 8014c8c:	bd10      	pop	{r4, pc}
 8014c8e:	bf00      	nop

08014c90 <max_serialized_size_geometry_msgs__msg__Transform>:
 8014c90:	2301      	movs	r3, #1
 8014c92:	b570      	push	{r4, r5, r6, lr}
 8014c94:	7003      	strb	r3, [r0, #0]
 8014c96:	4605      	mov	r5, r0
 8014c98:	460e      	mov	r6, r1
 8014c9a:	f7f3 f86d 	bl	8007d78 <max_serialized_size_geometry_msgs__msg__Vector3>
 8014c9e:	4604      	mov	r4, r0
 8014ca0:	1831      	adds	r1, r6, r0
 8014ca2:	4628      	mov	r0, r5
 8014ca4:	f7ff ff70 	bl	8014b88 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8014ca8:	4420      	add	r0, r4
 8014caa:	bd70      	pop	{r4, r5, r6, pc}

08014cac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Transform>:
 8014cac:	4800      	ldr	r0, [pc, #0]	@ (8014cb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Transform+0x4>)
 8014cae:	4770      	bx	lr
 8014cb0:	20002d00 	.word	0x20002d00

08014cb4 <ucdr_serialize_string>:
 8014cb4:	b538      	push	{r3, r4, r5, lr}
 8014cb6:	4605      	mov	r5, r0
 8014cb8:	4608      	mov	r0, r1
 8014cba:	460c      	mov	r4, r1
 8014cbc:	f7eb faf0 	bl	80002a0 <strlen>
 8014cc0:	4621      	mov	r1, r4
 8014cc2:	1c42      	adds	r2, r0, #1
 8014cc4:	4628      	mov	r0, r5
 8014cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014cca:	f7f7 baff 	b.w	800c2cc <ucdr_serialize_sequence_char>
 8014cce:	bf00      	nop

08014cd0 <ucdr_deserialize_string>:
 8014cd0:	b500      	push	{lr}
 8014cd2:	b083      	sub	sp, #12
 8014cd4:	ab01      	add	r3, sp, #4
 8014cd6:	f7f7 fb0b 	bl	800c2f0 <ucdr_deserialize_sequence_char>
 8014cda:	b003      	add	sp, #12
 8014cdc:	f85d fb04 	ldr.w	pc, [sp], #4

08014ce0 <get_custom_error>:
 8014ce0:	4b01      	ldr	r3, [pc, #4]	@ (8014ce8 <get_custom_error+0x8>)
 8014ce2:	7818      	ldrb	r0, [r3, #0]
 8014ce4:	4770      	bx	lr
 8014ce6:	bf00      	nop
 8014ce8:	2001121a 	.word	0x2001121a

08014cec <recv_custom_msg>:
 8014cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cf0:	b089      	sub	sp, #36	@ 0x24
 8014cf2:	4693      	mov	fp, r2
 8014cf4:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8014cf8:	9104      	str	r1, [sp, #16]
 8014cfa:	2100      	movs	r1, #0
 8014cfc:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8014d00:	9305      	str	r3, [sp, #20]
 8014d02:	4604      	mov	r4, r0
 8014d04:	f88d 101e 	strb.w	r1, [sp, #30]
 8014d08:	b332      	cbz	r2, 8014d58 <recv_custom_msg+0x6c>
 8014d0a:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 8014d0e:	f10d 091f 	add.w	r9, sp, #31
 8014d12:	f10d 0814 	add.w	r8, sp, #20
 8014d16:	f10d 071e 	add.w	r7, sp, #30
 8014d1a:	f44f 7600 	mov.w	r6, #512	@ 0x200
 8014d1e:	e004      	b.n	8014d2a <recv_custom_msg+0x3e>
 8014d20:	9b05      	ldr	r3, [sp, #20]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	dd10      	ble.n	8014d48 <recv_custom_msg+0x5c>
 8014d26:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 8014d2a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014d2e:	e9cd 6700 	strd	r6, r7, [sp]
 8014d32:	4623      	mov	r3, r4
 8014d34:	4622      	mov	r2, r4
 8014d36:	4629      	mov	r1, r5
 8014d38:	4650      	mov	r0, sl
 8014d3a:	f001 f8f9 	bl	8015f30 <uxr_read_framed_msg>
 8014d3e:	2800      	cmp	r0, #0
 8014d40:	d0ee      	beq.n	8014d20 <recv_custom_msg+0x34>
 8014d42:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014d46:	b1a3      	cbz	r3, 8014d72 <recv_custom_msg+0x86>
 8014d48:	4b0e      	ldr	r3, [pc, #56]	@ (8014d84 <recv_custom_msg+0x98>)
 8014d4a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8014d4e:	701a      	strb	r2, [r3, #0]
 8014d50:	2000      	movs	r0, #0
 8014d52:	b009      	add	sp, #36	@ 0x24
 8014d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d58:	f10d 021f 	add.w	r2, sp, #31
 8014d5c:	9200      	str	r2, [sp, #0]
 8014d5e:	4601      	mov	r1, r0
 8014d60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014d64:	47a8      	blx	r5
 8014d66:	2800      	cmp	r0, #0
 8014d68:	d0ee      	beq.n	8014d48 <recv_custom_msg+0x5c>
 8014d6a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d1ea      	bne.n	8014d48 <recv_custom_msg+0x5c>
 8014d72:	9b04      	ldr	r3, [sp, #16]
 8014d74:	f8cb 0000 	str.w	r0, [fp]
 8014d78:	2001      	movs	r0, #1
 8014d7a:	601c      	str	r4, [r3, #0]
 8014d7c:	b009      	add	sp, #36	@ 0x24
 8014d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d82:	bf00      	nop
 8014d84:	2001121a 	.word	0x2001121a

08014d88 <send_custom_msg>:
 8014d88:	b570      	push	{r4, r5, r6, lr}
 8014d8a:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8014d8e:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8014d92:	b086      	sub	sp, #24
 8014d94:	4616      	mov	r6, r2
 8014d96:	b965      	cbnz	r5, 8014db2 <send_custom_msg+0x2a>
 8014d98:	f10d 0317 	add.w	r3, sp, #23
 8014d9c:	47a0      	blx	r4
 8014d9e:	b108      	cbz	r0, 8014da4 <send_custom_msg+0x1c>
 8014da0:	42b0      	cmp	r0, r6
 8014da2:	d014      	beq.n	8014dce <send_custom_msg+0x46>
 8014da4:	4b0b      	ldr	r3, [pc, #44]	@ (8014dd4 <send_custom_msg+0x4c>)
 8014da6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8014daa:	701a      	strb	r2, [r3, #0]
 8014dac:	2000      	movs	r0, #0
 8014dae:	b006      	add	sp, #24
 8014db0:	bd70      	pop	{r4, r5, r6, pc}
 8014db2:	f10d 0217 	add.w	r2, sp, #23
 8014db6:	9202      	str	r2, [sp, #8]
 8014db8:	2200      	movs	r2, #0
 8014dba:	e9cd 6200 	strd	r6, r2, [sp]
 8014dbe:	460b      	mov	r3, r1
 8014dc0:	4602      	mov	r2, r0
 8014dc2:	4621      	mov	r1, r4
 8014dc4:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8014dc8:	f000 fed4 	bl	8015b74 <uxr_write_framed_msg>
 8014dcc:	e7e7      	b.n	8014d9e <send_custom_msg+0x16>
 8014dce:	2001      	movs	r0, #1
 8014dd0:	b006      	add	sp, #24
 8014dd2:	bd70      	pop	{r4, r5, r6, pc}
 8014dd4:	2001121a 	.word	0x2001121a

08014dd8 <uxr_set_custom_transport_callbacks>:
 8014dd8:	b410      	push	{r4}
 8014dda:	9c01      	ldr	r4, [sp, #4]
 8014ddc:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8014de0:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8014de4:	9b02      	ldr	r3, [sp, #8]
 8014de6:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8014dea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014dee:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8014df2:	4770      	bx	lr

08014df4 <uxr_init_custom_transport>:
 8014df4:	b538      	push	{r3, r4, r5, lr}
 8014df6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8014dfa:	b303      	cbz	r3, 8014e3e <uxr_init_custom_transport+0x4a>
 8014dfc:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8014e00:	4604      	mov	r4, r0
 8014e02:	b1e2      	cbz	r2, 8014e3e <uxr_init_custom_transport+0x4a>
 8014e04:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8014e08:	b1ca      	cbz	r2, 8014e3e <uxr_init_custom_transport+0x4a>
 8014e0a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8014e0e:	b1b2      	cbz	r2, 8014e3e <uxr_init_custom_transport+0x4a>
 8014e10:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8014e14:	4798      	blx	r3
 8014e16:	4605      	mov	r5, r0
 8014e18:	b188      	cbz	r0, 8014e3e <uxr_init_custom_transport+0x4a>
 8014e1a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8014e1e:	b98b      	cbnz	r3, 8014e44 <uxr_init_custom_transport+0x50>
 8014e20:	490b      	ldr	r1, [pc, #44]	@ (8014e50 <uxr_init_custom_transport+0x5c>)
 8014e22:	4b0c      	ldr	r3, [pc, #48]	@ (8014e54 <uxr_init_custom_transport+0x60>)
 8014e24:	4a0c      	ldr	r2, [pc, #48]	@ (8014e58 <uxr_init_custom_transport+0x64>)
 8014e26:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8014e2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014e2e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8014e32:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8014e36:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8014e3a:	4628      	mov	r0, r5
 8014e3c:	bd38      	pop	{r3, r4, r5, pc}
 8014e3e:	2500      	movs	r5, #0
 8014e40:	4628      	mov	r0, r5
 8014e42:	bd38      	pop	{r3, r4, r5, pc}
 8014e44:	2100      	movs	r1, #0
 8014e46:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8014e4a:	f000 fe8d 	bl	8015b68 <uxr_init_framing_io>
 8014e4e:	e7e7      	b.n	8014e20 <uxr_init_custom_transport+0x2c>
 8014e50:	08014d89 	.word	0x08014d89
 8014e54:	08014ced 	.word	0x08014ced
 8014e58:	08014ce1 	.word	0x08014ce1

08014e5c <uxr_close_custom_transport>:
 8014e5c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8014e60:	4718      	bx	r3
 8014e62:	bf00      	nop

08014e64 <uxr_init_input_best_effort_stream>:
 8014e64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014e68:	8003      	strh	r3, [r0, #0]
 8014e6a:	4770      	bx	lr

08014e6c <uxr_reset_input_best_effort_stream>:
 8014e6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014e70:	8003      	strh	r3, [r0, #0]
 8014e72:	4770      	bx	lr

08014e74 <uxr_receive_best_effort_message>:
 8014e74:	b538      	push	{r3, r4, r5, lr}
 8014e76:	4604      	mov	r4, r0
 8014e78:	8800      	ldrh	r0, [r0, #0]
 8014e7a:	460d      	mov	r5, r1
 8014e7c:	f000 fe5e 	bl	8015b3c <uxr_seq_num_cmp>
 8014e80:	4603      	mov	r3, r0
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8014e88:	bfb8      	it	lt
 8014e8a:	8025      	strhlt	r5, [r4, #0]
 8014e8c:	bd38      	pop	{r3, r4, r5, pc}
 8014e8e:	bf00      	nop

08014e90 <on_full_input_buffer>:
 8014e90:	b570      	push	{r4, r5, r6, lr}
 8014e92:	4605      	mov	r5, r0
 8014e94:	460c      	mov	r4, r1
 8014e96:	682b      	ldr	r3, [r5, #0]
 8014e98:	6809      	ldr	r1, [r1, #0]
 8014e9a:	8920      	ldrh	r0, [r4, #8]
 8014e9c:	6862      	ldr	r2, [r4, #4]
 8014e9e:	fbb2 f2f0 	udiv	r2, r2, r0
 8014ea2:	1a5b      	subs	r3, r3, r1
 8014ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8014ea8:	3301      	adds	r3, #1
 8014eaa:	b29b      	uxth	r3, r3
 8014eac:	fbb3 f6f0 	udiv	r6, r3, r0
 8014eb0:	fb00 3316 	mls	r3, r0, r6, r3
 8014eb4:	b29b      	uxth	r3, r3
 8014eb6:	fb02 f303 	mul.w	r3, r2, r3
 8014eba:	1d18      	adds	r0, r3, #4
 8014ebc:	4408      	add	r0, r1
 8014ebe:	7d26      	ldrb	r6, [r4, #20]
 8014ec0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8014ec4:	b116      	cbz	r6, 8014ecc <on_full_input_buffer+0x3c>
 8014ec6:	2600      	movs	r6, #0
 8014ec8:	f840 6c04 	str.w	r6, [r0, #-4]
 8014ecc:	2a03      	cmp	r2, #3
 8014ece:	d801      	bhi.n	8014ed4 <on_full_input_buffer+0x44>
 8014ed0:	2001      	movs	r0, #1
 8014ed2:	bd70      	pop	{r4, r5, r6, pc}
 8014ed4:	3308      	adds	r3, #8
 8014ed6:	4419      	add	r1, r3
 8014ed8:	4628      	mov	r0, r5
 8014eda:	692b      	ldr	r3, [r5, #16]
 8014edc:	3a04      	subs	r2, #4
 8014ede:	f7f4 fa4f 	bl	8009380 <ucdr_init_buffer_origin>
 8014ee2:	4628      	mov	r0, r5
 8014ee4:	4902      	ldr	r1, [pc, #8]	@ (8014ef0 <on_full_input_buffer+0x60>)
 8014ee6:	4622      	mov	r2, r4
 8014ee8:	f7f4 fa26 	bl	8009338 <ucdr_set_on_full_buffer_callback>
 8014eec:	2000      	movs	r0, #0
 8014eee:	bd70      	pop	{r4, r5, r6, pc}
 8014ef0:	08014e91 	.word	0x08014e91

08014ef4 <uxr_init_input_reliable_stream>:
 8014ef4:	b500      	push	{lr}
 8014ef6:	e9c0 1200 	strd	r1, r2, [r0]
 8014efa:	f04f 0e00 	mov.w	lr, #0
 8014efe:	9a01      	ldr	r2, [sp, #4]
 8014f00:	8103      	strh	r3, [r0, #8]
 8014f02:	6102      	str	r2, [r0, #16]
 8014f04:	f880 e014 	strb.w	lr, [r0, #20]
 8014f08:	b1d3      	cbz	r3, 8014f40 <uxr_init_input_reliable_stream+0x4c>
 8014f0a:	f8c1 e000 	str.w	lr, [r1]
 8014f0e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014f12:	f1bc 0f01 	cmp.w	ip, #1
 8014f16:	d913      	bls.n	8014f40 <uxr_init_input_reliable_stream+0x4c>
 8014f18:	2301      	movs	r3, #1
 8014f1a:	fbb3 f1fc 	udiv	r1, r3, ip
 8014f1e:	fb0c 3111 	mls	r1, ip, r1, r3
 8014f22:	b289      	uxth	r1, r1
 8014f24:	6842      	ldr	r2, [r0, #4]
 8014f26:	fbb2 f2fc 	udiv	r2, r2, ip
 8014f2a:	fb01 f202 	mul.w	r2, r1, r2
 8014f2e:	6801      	ldr	r1, [r0, #0]
 8014f30:	f841 e002 	str.w	lr, [r1, r2]
 8014f34:	3301      	adds	r3, #1
 8014f36:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014f3a:	b29b      	uxth	r3, r3
 8014f3c:	459c      	cmp	ip, r3
 8014f3e:	d8ec      	bhi.n	8014f1a <uxr_init_input_reliable_stream+0x26>
 8014f40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014f44:	60c3      	str	r3, [r0, #12]
 8014f46:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f4a:	bf00      	nop

08014f4c <uxr_reset_input_reliable_stream>:
 8014f4c:	8901      	ldrh	r1, [r0, #8]
 8014f4e:	b1e9      	cbz	r1, 8014f8c <uxr_reset_input_reliable_stream+0x40>
 8014f50:	f04f 0c00 	mov.w	ip, #0
 8014f54:	b500      	push	{lr}
 8014f56:	4663      	mov	r3, ip
 8014f58:	46e6      	mov	lr, ip
 8014f5a:	fbb3 f2f1 	udiv	r2, r3, r1
 8014f5e:	fb01 3312 	mls	r3, r1, r2, r3
 8014f62:	b29b      	uxth	r3, r3
 8014f64:	6842      	ldr	r2, [r0, #4]
 8014f66:	fbb2 f2f1 	udiv	r2, r2, r1
 8014f6a:	fb03 f202 	mul.w	r2, r3, r2
 8014f6e:	6803      	ldr	r3, [r0, #0]
 8014f70:	f843 e002 	str.w	lr, [r3, r2]
 8014f74:	f10c 0c01 	add.w	ip, ip, #1
 8014f78:	8901      	ldrh	r1, [r0, #8]
 8014f7a:	fa1f f38c 	uxth.w	r3, ip
 8014f7e:	4299      	cmp	r1, r3
 8014f80:	d8eb      	bhi.n	8014f5a <uxr_reset_input_reliable_stream+0xe>
 8014f82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014f86:	60c3      	str	r3, [r0, #12]
 8014f88:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014f90:	60c3      	str	r3, [r0, #12]
 8014f92:	4770      	bx	lr

08014f94 <uxr_receive_reliable_message>:
 8014f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f98:	4604      	mov	r4, r0
 8014f9a:	460d      	mov	r5, r1
 8014f9c:	8901      	ldrh	r1, [r0, #8]
 8014f9e:	8980      	ldrh	r0, [r0, #12]
 8014fa0:	4690      	mov	r8, r2
 8014fa2:	461f      	mov	r7, r3
 8014fa4:	f000 fdc2 	bl	8015b2c <uxr_seq_num_add>
 8014fa8:	4629      	mov	r1, r5
 8014faa:	4606      	mov	r6, r0
 8014fac:	89a0      	ldrh	r0, [r4, #12]
 8014fae:	f000 fdc5 	bl	8015b3c <uxr_seq_num_cmp>
 8014fb2:	2800      	cmp	r0, #0
 8014fb4:	db0a      	blt.n	8014fcc <uxr_receive_reliable_message+0x38>
 8014fb6:	2600      	movs	r6, #0
 8014fb8:	89e0      	ldrh	r0, [r4, #14]
 8014fba:	4629      	mov	r1, r5
 8014fbc:	f000 fdbe 	bl	8015b3c <uxr_seq_num_cmp>
 8014fc0:	2800      	cmp	r0, #0
 8014fc2:	bfb8      	it	lt
 8014fc4:	81e5      	strhlt	r5, [r4, #14]
 8014fc6:	4630      	mov	r0, r6
 8014fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fcc:	4630      	mov	r0, r6
 8014fce:	4629      	mov	r1, r5
 8014fd0:	f000 fdb4 	bl	8015b3c <uxr_seq_num_cmp>
 8014fd4:	2800      	cmp	r0, #0
 8014fd6:	dbee      	blt.n	8014fb6 <uxr_receive_reliable_message+0x22>
 8014fd8:	6923      	ldr	r3, [r4, #16]
 8014fda:	4640      	mov	r0, r8
 8014fdc:	4798      	blx	r3
 8014fde:	2101      	movs	r1, #1
 8014fe0:	4606      	mov	r6, r0
 8014fe2:	89a0      	ldrh	r0, [r4, #12]
 8014fe4:	f000 fda2 	bl	8015b2c <uxr_seq_num_add>
 8014fe8:	b90e      	cbnz	r6, 8014fee <uxr_receive_reliable_message+0x5a>
 8014fea:	4285      	cmp	r5, r0
 8014fec:	d046      	beq.n	801507c <uxr_receive_reliable_message+0xe8>
 8014fee:	8921      	ldrh	r1, [r4, #8]
 8014ff0:	fbb5 f2f1 	udiv	r2, r5, r1
 8014ff4:	fb01 5212 	mls	r2, r1, r2, r5
 8014ff8:	b292      	uxth	r2, r2
 8014ffa:	6863      	ldr	r3, [r4, #4]
 8014ffc:	6820      	ldr	r0, [r4, #0]
 8014ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8015002:	fb02 f303 	mul.w	r3, r2, r3
 8015006:	3304      	adds	r3, #4
 8015008:	4418      	add	r0, r3
 801500a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d1d1      	bne.n	8014fb6 <uxr_receive_reliable_message+0x22>
 8015012:	4641      	mov	r1, r8
 8015014:	463a      	mov	r2, r7
 8015016:	f002 ffe2 	bl	8017fde <memcpy>
 801501a:	8921      	ldrh	r1, [r4, #8]
 801501c:	fbb5 f2f1 	udiv	r2, r5, r1
 8015020:	fb01 5212 	mls	r2, r1, r2, r5
 8015024:	b292      	uxth	r2, r2
 8015026:	6863      	ldr	r3, [r4, #4]
 8015028:	fbb3 f3f1 	udiv	r3, r3, r1
 801502c:	fb02 f303 	mul.w	r3, r2, r3
 8015030:	6822      	ldr	r2, [r4, #0]
 8015032:	50d7      	str	r7, [r2, r3]
 8015034:	9a06      	ldr	r2, [sp, #24]
 8015036:	2301      	movs	r3, #1
 8015038:	7013      	strb	r3, [r2, #0]
 801503a:	2e00      	cmp	r6, #0
 801503c:	d0bb      	beq.n	8014fb6 <uxr_receive_reliable_message+0x22>
 801503e:	89a6      	ldrh	r6, [r4, #12]
 8015040:	2101      	movs	r1, #1
 8015042:	4630      	mov	r0, r6
 8015044:	f000 fd72 	bl	8015b2c <uxr_seq_num_add>
 8015048:	8921      	ldrh	r1, [r4, #8]
 801504a:	fbb0 f2f1 	udiv	r2, r0, r1
 801504e:	fb01 0212 	mls	r2, r1, r2, r0
 8015052:	b292      	uxth	r2, r2
 8015054:	6863      	ldr	r3, [r4, #4]
 8015056:	fbb3 f3f1 	udiv	r3, r3, r1
 801505a:	4606      	mov	r6, r0
 801505c:	fb02 f303 	mul.w	r3, r2, r3
 8015060:	6820      	ldr	r0, [r4, #0]
 8015062:	3304      	adds	r3, #4
 8015064:	4418      	add	r0, r3
 8015066:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d0a3      	beq.n	8014fb6 <uxr_receive_reliable_message+0x22>
 801506e:	6923      	ldr	r3, [r4, #16]
 8015070:	4798      	blx	r3
 8015072:	2802      	cmp	r0, #2
 8015074:	d005      	beq.n	8015082 <uxr_receive_reliable_message+0xee>
 8015076:	2801      	cmp	r0, #1
 8015078:	d0e2      	beq.n	8015040 <uxr_receive_reliable_message+0xac>
 801507a:	e79c      	b.n	8014fb6 <uxr_receive_reliable_message+0x22>
 801507c:	9b06      	ldr	r3, [sp, #24]
 801507e:	81a5      	strh	r5, [r4, #12]
 8015080:	701e      	strb	r6, [r3, #0]
 8015082:	2601      	movs	r6, #1
 8015084:	e798      	b.n	8014fb8 <uxr_receive_reliable_message+0x24>
 8015086:	bf00      	nop

08015088 <uxr_next_input_reliable_buffer_available>:
 8015088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801508c:	4604      	mov	r4, r0
 801508e:	460f      	mov	r7, r1
 8015090:	8980      	ldrh	r0, [r0, #12]
 8015092:	2101      	movs	r1, #1
 8015094:	4690      	mov	r8, r2
 8015096:	f000 fd49 	bl	8015b2c <uxr_seq_num_add>
 801509a:	8921      	ldrh	r1, [r4, #8]
 801509c:	fbb0 f2f1 	udiv	r2, r0, r1
 80150a0:	fb01 0212 	mls	r2, r1, r2, r0
 80150a4:	b292      	uxth	r2, r2
 80150a6:	6863      	ldr	r3, [r4, #4]
 80150a8:	6826      	ldr	r6, [r4, #0]
 80150aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80150ae:	fb02 f303 	mul.w	r3, r2, r3
 80150b2:	3304      	adds	r3, #4
 80150b4:	441e      	add	r6, r3
 80150b6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80150ba:	f1b9 0f00 	cmp.w	r9, #0
 80150be:	d023      	beq.n	8015108 <uxr_next_input_reliable_buffer_available+0x80>
 80150c0:	6923      	ldr	r3, [r4, #16]
 80150c2:	4605      	mov	r5, r0
 80150c4:	4630      	mov	r0, r6
 80150c6:	4798      	blx	r3
 80150c8:	4682      	mov	sl, r0
 80150ca:	b300      	cbz	r0, 801510e <uxr_next_input_reliable_buffer_available+0x86>
 80150cc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80150d0:	2101      	movs	r1, #1
 80150d2:	4650      	mov	r0, sl
 80150d4:	f000 fd2a 	bl	8015b2c <uxr_seq_num_add>
 80150d8:	8921      	ldrh	r1, [r4, #8]
 80150da:	fbb0 f2f1 	udiv	r2, r0, r1
 80150de:	4682      	mov	sl, r0
 80150e0:	fb01 0212 	mls	r2, r1, r2, r0
 80150e4:	e9d4 0300 	ldrd	r0, r3, [r4]
 80150e8:	b292      	uxth	r2, r2
 80150ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80150ee:	fb02 f303 	mul.w	r3, r2, r3
 80150f2:	3304      	adds	r3, #4
 80150f4:	4418      	add	r0, r3
 80150f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80150fa:	b12b      	cbz	r3, 8015108 <uxr_next_input_reliable_buffer_available+0x80>
 80150fc:	6923      	ldr	r3, [r4, #16]
 80150fe:	4798      	blx	r3
 8015100:	2802      	cmp	r0, #2
 8015102:	d01b      	beq.n	801513c <uxr_next_input_reliable_buffer_available+0xb4>
 8015104:	2801      	cmp	r0, #1
 8015106:	d0e3      	beq.n	80150d0 <uxr_next_input_reliable_buffer_available+0x48>
 8015108:	2000      	movs	r0, #0
 801510a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801510e:	464a      	mov	r2, r9
 8015110:	4631      	mov	r1, r6
 8015112:	4638      	mov	r0, r7
 8015114:	f7f4 f93c 	bl	8009390 <ucdr_init_buffer>
 8015118:	8921      	ldrh	r1, [r4, #8]
 801511a:	fbb5 f2f1 	udiv	r2, r5, r1
 801511e:	fb01 5212 	mls	r2, r1, r2, r5
 8015122:	b292      	uxth	r2, r2
 8015124:	6863      	ldr	r3, [r4, #4]
 8015126:	fbb3 f3f1 	udiv	r3, r3, r1
 801512a:	fb02 f303 	mul.w	r3, r2, r3
 801512e:	6822      	ldr	r2, [r4, #0]
 8015130:	f842 a003 	str.w	sl, [r2, r3]
 8015134:	81a5      	strh	r5, [r4, #12]
 8015136:	2001      	movs	r0, #1
 8015138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801513c:	eb06 0108 	add.w	r1, r6, r8
 8015140:	8926      	ldrh	r6, [r4, #8]
 8015142:	fbb5 f0f6 	udiv	r0, r5, r6
 8015146:	fb06 5010 	mls	r0, r6, r0, r5
 801514a:	b280      	uxth	r0, r0
 801514c:	6863      	ldr	r3, [r4, #4]
 801514e:	fbb3 f3f6 	udiv	r3, r3, r6
 8015152:	fb00 f303 	mul.w	r3, r0, r3
 8015156:	6820      	ldr	r0, [r4, #0]
 8015158:	2500      	movs	r5, #0
 801515a:	50c5      	str	r5, [r0, r3]
 801515c:	eba9 0208 	sub.w	r2, r9, r8
 8015160:	4638      	mov	r0, r7
 8015162:	f7f4 f915 	bl	8009390 <ucdr_init_buffer>
 8015166:	4903      	ldr	r1, [pc, #12]	@ (8015174 <uxr_next_input_reliable_buffer_available+0xec>)
 8015168:	4622      	mov	r2, r4
 801516a:	4638      	mov	r0, r7
 801516c:	f7f4 f8e4 	bl	8009338 <ucdr_set_on_full_buffer_callback>
 8015170:	4655      	mov	r5, sl
 8015172:	e7df      	b.n	8015134 <uxr_next_input_reliable_buffer_available+0xac>
 8015174:	08014e91 	.word	0x08014e91

08015178 <uxr_process_heartbeat>:
 8015178:	b538      	push	{r3, r4, r5, lr}
 801517a:	4611      	mov	r1, r2
 801517c:	4604      	mov	r4, r0
 801517e:	89c0      	ldrh	r0, [r0, #14]
 8015180:	4615      	mov	r5, r2
 8015182:	f000 fcdb 	bl	8015b3c <uxr_seq_num_cmp>
 8015186:	2800      	cmp	r0, #0
 8015188:	bfb8      	it	lt
 801518a:	81e5      	strhlt	r5, [r4, #14]
 801518c:	bd38      	pop	{r3, r4, r5, pc}
 801518e:	bf00      	nop

08015190 <uxr_compute_acknack>:
 8015190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015194:	8903      	ldrh	r3, [r0, #8]
 8015196:	8985      	ldrh	r5, [r0, #12]
 8015198:	4604      	mov	r4, r0
 801519a:	460e      	mov	r6, r1
 801519c:	2b00      	cmp	r3, #0
 801519e:	d048      	beq.n	8015232 <uxr_compute_acknack+0xa2>
 80151a0:	4628      	mov	r0, r5
 80151a2:	2701      	movs	r7, #1
 80151a4:	e003      	b.n	80151ae <uxr_compute_acknack+0x1e>
 80151a6:	4567      	cmp	r7, ip
 80151a8:	d243      	bcs.n	8015232 <uxr_compute_acknack+0xa2>
 80151aa:	89a0      	ldrh	r0, [r4, #12]
 80151ac:	3701      	adds	r7, #1
 80151ae:	b2b9      	uxth	r1, r7
 80151b0:	f000 fcbc 	bl	8015b2c <uxr_seq_num_add>
 80151b4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80151b8:	fbb0 f2fc 	udiv	r2, r0, ip
 80151bc:	e9d4 1300 	ldrd	r1, r3, [r4]
 80151c0:	fb0c 0212 	mls	r2, ip, r2, r0
 80151c4:	b292      	uxth	r2, r2
 80151c6:	fbb3 f3fc 	udiv	r3, r3, ip
 80151ca:	fb02 f303 	mul.w	r3, r2, r3
 80151ce:	58cb      	ldr	r3, [r1, r3]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d1e8      	bne.n	80151a6 <uxr_compute_acknack+0x16>
 80151d4:	8030      	strh	r0, [r6, #0]
 80151d6:	2101      	movs	r1, #1
 80151d8:	89e5      	ldrh	r5, [r4, #14]
 80151da:	f000 fcab 	bl	8015b34 <uxr_seq_num_sub>
 80151de:	4601      	mov	r1, r0
 80151e0:	4628      	mov	r0, r5
 80151e2:	f000 fca7 	bl	8015b34 <uxr_seq_num_sub>
 80151e6:	4605      	mov	r5, r0
 80151e8:	4607      	mov	r7, r0
 80151ea:	b1f8      	cbz	r0, 801522c <uxr_compute_acknack+0x9c>
 80151ec:	f04f 0900 	mov.w	r9, #0
 80151f0:	464d      	mov	r5, r9
 80151f2:	f04f 0801 	mov.w	r8, #1
 80151f6:	fa1f f189 	uxth.w	r1, r9
 80151fa:	8830      	ldrh	r0, [r6, #0]
 80151fc:	f000 fc96 	bl	8015b2c <uxr_seq_num_add>
 8015200:	8921      	ldrh	r1, [r4, #8]
 8015202:	fbb0 f3f1 	udiv	r3, r0, r1
 8015206:	fb03 0011 	mls	r0, r3, r1, r0
 801520a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801520e:	b280      	uxth	r0, r0
 8015210:	fbb3 f3f1 	udiv	r3, r3, r1
 8015214:	fb00 f303 	mul.w	r3, r0, r3
 8015218:	fa08 f109 	lsl.w	r1, r8, r9
 801521c:	58d3      	ldr	r3, [r2, r3]
 801521e:	f109 0901 	add.w	r9, r9, #1
 8015222:	b90b      	cbnz	r3, 8015228 <uxr_compute_acknack+0x98>
 8015224:	4329      	orrs	r1, r5
 8015226:	b28d      	uxth	r5, r1
 8015228:	454f      	cmp	r7, r9
 801522a:	d1e4      	bne.n	80151f6 <uxr_compute_acknack+0x66>
 801522c:	4628      	mov	r0, r5
 801522e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015232:	4628      	mov	r0, r5
 8015234:	e7ce      	b.n	80151d4 <uxr_compute_acknack+0x44>
 8015236:	bf00      	nop

08015238 <uxr_init_output_best_effort_stream>:
 8015238:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801523c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8015240:	6001      	str	r1, [r0, #0]
 8015242:	7303      	strb	r3, [r0, #12]
 8015244:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015248:	4770      	bx	lr
 801524a:	bf00      	nop

0801524c <uxr_reset_output_best_effort_stream>:
 801524c:	7b02      	ldrb	r2, [r0, #12]
 801524e:	6042      	str	r2, [r0, #4]
 8015250:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015254:	81c3      	strh	r3, [r0, #14]
 8015256:	4770      	bx	lr

08015258 <uxr_prepare_best_effort_buffer_to_write>:
 8015258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801525a:	4604      	mov	r4, r0
 801525c:	b083      	sub	sp, #12
 801525e:	6840      	ldr	r0, [r0, #4]
 8015260:	460d      	mov	r5, r1
 8015262:	4616      	mov	r6, r2
 8015264:	f7f8 fc9a 	bl	800db9c <uxr_submessage_padding>
 8015268:	6863      	ldr	r3, [r4, #4]
 801526a:	4418      	add	r0, r3
 801526c:	68a3      	ldr	r3, [r4, #8]
 801526e:	1942      	adds	r2, r0, r5
 8015270:	4293      	cmp	r3, r2
 8015272:	bf2c      	ite	cs
 8015274:	2701      	movcs	r7, #1
 8015276:	2700      	movcc	r7, #0
 8015278:	d202      	bcs.n	8015280 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801527a:	4638      	mov	r0, r7
 801527c:	b003      	add	sp, #12
 801527e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015280:	9000      	str	r0, [sp, #0]
 8015282:	6821      	ldr	r1, [r4, #0]
 8015284:	4630      	mov	r0, r6
 8015286:	2300      	movs	r3, #0
 8015288:	f7f4 f870 	bl	800936c <ucdr_init_buffer_origin_offset>
 801528c:	6863      	ldr	r3, [r4, #4]
 801528e:	4638      	mov	r0, r7
 8015290:	442b      	add	r3, r5
 8015292:	6063      	str	r3, [r4, #4]
 8015294:	b003      	add	sp, #12
 8015296:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015298 <uxr_prepare_best_effort_buffer_to_send>:
 8015298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801529c:	4604      	mov	r4, r0
 801529e:	461d      	mov	r5, r3
 80152a0:	6840      	ldr	r0, [r0, #4]
 80152a2:	7b23      	ldrb	r3, [r4, #12]
 80152a4:	4298      	cmp	r0, r3
 80152a6:	bf8c      	ite	hi
 80152a8:	2601      	movhi	r6, #1
 80152aa:	2600      	movls	r6, #0
 80152ac:	d802      	bhi.n	80152b4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80152ae:	4630      	mov	r0, r6
 80152b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152b4:	4688      	mov	r8, r1
 80152b6:	89e0      	ldrh	r0, [r4, #14]
 80152b8:	2101      	movs	r1, #1
 80152ba:	4617      	mov	r7, r2
 80152bc:	f000 fc36 	bl	8015b2c <uxr_seq_num_add>
 80152c0:	6823      	ldr	r3, [r4, #0]
 80152c2:	81e0      	strh	r0, [r4, #14]
 80152c4:	8028      	strh	r0, [r5, #0]
 80152c6:	f8c8 3000 	str.w	r3, [r8]
 80152ca:	6863      	ldr	r3, [r4, #4]
 80152cc:	603b      	str	r3, [r7, #0]
 80152ce:	7b23      	ldrb	r3, [r4, #12]
 80152d0:	6063      	str	r3, [r4, #4]
 80152d2:	4630      	mov	r0, r6
 80152d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080152d8 <on_full_output_buffer>:
 80152d8:	b538      	push	{r3, r4, r5, lr}
 80152da:	460c      	mov	r4, r1
 80152dc:	6803      	ldr	r3, [r0, #0]
 80152de:	6809      	ldr	r1, [r1, #0]
 80152e0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80152e4:	6862      	ldr	r2, [r4, #4]
 80152e6:	fbb2 f2fc 	udiv	r2, r2, ip
 80152ea:	1a5b      	subs	r3, r3, r1
 80152ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80152f0:	3301      	adds	r3, #1
 80152f2:	b29b      	uxth	r3, r3
 80152f4:	fbb3 fefc 	udiv	lr, r3, ip
 80152f8:	fb0c 331e 	mls	r3, ip, lr, r3
 80152fc:	b29b      	uxth	r3, r3
 80152fe:	fb02 f303 	mul.w	r3, r2, r3
 8015302:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8015306:	58ca      	ldr	r2, [r1, r3]
 8015308:	4463      	add	r3, ip
 801530a:	eba2 020c 	sub.w	r2, r2, ip
 801530e:	3308      	adds	r3, #8
 8015310:	4605      	mov	r5, r0
 8015312:	4419      	add	r1, r3
 8015314:	3a04      	subs	r2, #4
 8015316:	6903      	ldr	r3, [r0, #16]
 8015318:	f7f4 f832 	bl	8009380 <ucdr_init_buffer_origin>
 801531c:	4628      	mov	r0, r5
 801531e:	4903      	ldr	r1, [pc, #12]	@ (801532c <on_full_output_buffer+0x54>)
 8015320:	4622      	mov	r2, r4
 8015322:	f7f4 f809 	bl	8009338 <ucdr_set_on_full_buffer_callback>
 8015326:	2000      	movs	r0, #0
 8015328:	bd38      	pop	{r3, r4, r5, pc}
 801532a:	bf00      	nop
 801532c:	080152d9 	.word	0x080152d9

08015330 <uxr_init_output_reliable_stream>:
 8015330:	b410      	push	{r4}
 8015332:	f89d c004 	ldrb.w	ip, [sp, #4]
 8015336:	8103      	strh	r3, [r0, #8]
 8015338:	e9c0 1200 	strd	r1, r2, [r0]
 801533c:	f880 c00c 	strb.w	ip, [r0, #12]
 8015340:	b1d3      	cbz	r3, 8015378 <uxr_init_output_reliable_stream+0x48>
 8015342:	f8c1 c000 	str.w	ip, [r1]
 8015346:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801534a:	f1bc 0f01 	cmp.w	ip, #1
 801534e:	d913      	bls.n	8015378 <uxr_init_output_reliable_stream+0x48>
 8015350:	2301      	movs	r3, #1
 8015352:	fbb3 f1fc 	udiv	r1, r3, ip
 8015356:	fb0c 3111 	mls	r1, ip, r1, r3
 801535a:	b289      	uxth	r1, r1
 801535c:	6842      	ldr	r2, [r0, #4]
 801535e:	6804      	ldr	r4, [r0, #0]
 8015360:	fbb2 f2fc 	udiv	r2, r2, ip
 8015364:	fb01 f202 	mul.w	r2, r1, r2
 8015368:	7b01      	ldrb	r1, [r0, #12]
 801536a:	50a1      	str	r1, [r4, r2]
 801536c:	3301      	adds	r3, #1
 801536e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015372:	b29b      	uxth	r3, r3
 8015374:	459c      	cmp	ip, r3
 8015376:	d8ec      	bhi.n	8015352 <uxr_init_output_reliable_stream+0x22>
 8015378:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801537c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015380:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8015384:	4905      	ldr	r1, [pc, #20]	@ (801539c <uxr_init_output_reliable_stream+0x6c>)
 8015386:	f85d 4b04 	ldr.w	r4, [sp], #4
 801538a:	f8c0 100e 	str.w	r1, [r0, #14]
 801538e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015392:	2300      	movs	r3, #0
 8015394:	8242      	strh	r2, [r0, #18]
 8015396:	8403      	strh	r3, [r0, #32]
 8015398:	4770      	bx	lr
 801539a:	bf00      	nop
 801539c:	ffff0000 	.word	0xffff0000

080153a0 <uxr_reset_output_reliable_stream>:
 80153a0:	8901      	ldrh	r1, [r0, #8]
 80153a2:	b1b1      	cbz	r1, 80153d2 <uxr_reset_output_reliable_stream+0x32>
 80153a4:	f04f 0c00 	mov.w	ip, #0
 80153a8:	4663      	mov	r3, ip
 80153aa:	fbb3 f2f1 	udiv	r2, r3, r1
 80153ae:	fb01 3312 	mls	r3, r1, r2, r3
 80153b2:	b29b      	uxth	r3, r3
 80153b4:	6842      	ldr	r2, [r0, #4]
 80153b6:	fbb2 f2f1 	udiv	r2, r2, r1
 80153ba:	6801      	ldr	r1, [r0, #0]
 80153bc:	fb03 f202 	mul.w	r2, r3, r2
 80153c0:	7b03      	ldrb	r3, [r0, #12]
 80153c2:	508b      	str	r3, [r1, r2]
 80153c4:	f10c 0c01 	add.w	ip, ip, #1
 80153c8:	8901      	ldrh	r1, [r0, #8]
 80153ca:	fa1f f38c 	uxth.w	r3, ip
 80153ce:	4299      	cmp	r1, r3
 80153d0:	d8eb      	bhi.n	80153aa <uxr_reset_output_reliable_stream+0xa>
 80153d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80153d6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80153da:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80153de:	4904      	ldr	r1, [pc, #16]	@ (80153f0 <uxr_reset_output_reliable_stream+0x50>)
 80153e0:	f8c0 100e 	str.w	r1, [r0, #14]
 80153e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80153e8:	2300      	movs	r3, #0
 80153ea:	8242      	strh	r2, [r0, #18]
 80153ec:	8403      	strh	r3, [r0, #32]
 80153ee:	4770      	bx	lr
 80153f0:	ffff0000 	.word	0xffff0000

080153f4 <uxr_prepare_reliable_buffer_to_write>:
 80153f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153f8:	4604      	mov	r4, r0
 80153fa:	b091      	sub	sp, #68	@ 0x44
 80153fc:	8900      	ldrh	r0, [r0, #8]
 80153fe:	89e7      	ldrh	r7, [r4, #14]
 8015400:	6823      	ldr	r3, [r4, #0]
 8015402:	9204      	str	r2, [sp, #16]
 8015404:	fbb7 f2f0 	udiv	r2, r7, r0
 8015408:	fb00 7212 	mls	r2, r0, r2, r7
 801540c:	b292      	uxth	r2, r2
 801540e:	6865      	ldr	r5, [r4, #4]
 8015410:	fbb5 f5f0 	udiv	r5, r5, r0
 8015414:	fb05 3202 	mla	r2, r5, r2, r3
 8015418:	3204      	adds	r2, #4
 801541a:	f852 ac04 	ldr.w	sl, [r2, #-4]
 801541e:	f894 b00c 	ldrb.w	fp, [r4, #12]
 8015422:	9203      	str	r2, [sp, #12]
 8015424:	4688      	mov	r8, r1
 8015426:	f1a5 0904 	sub.w	r9, r5, #4
 801542a:	2800      	cmp	r0, #0
 801542c:	f000 8143 	beq.w	80156b6 <uxr_prepare_reliable_buffer_to_write+0x2c2>
 8015430:	2100      	movs	r1, #0
 8015432:	460e      	mov	r6, r1
 8015434:	b28a      	uxth	r2, r1
 8015436:	fbb2 fcf0 	udiv	ip, r2, r0
 801543a:	fb00 221c 	mls	r2, r0, ip, r2
 801543e:	b292      	uxth	r2, r2
 8015440:	fb05 f202 	mul.w	r2, r5, r2
 8015444:	3101      	adds	r1, #1
 8015446:	589a      	ldr	r2, [r3, r2]
 8015448:	455a      	cmp	r2, fp
 801544a:	bf04      	itt	eq
 801544c:	3601      	addeq	r6, #1
 801544e:	b2b6      	uxtheq	r6, r6
 8015450:	4281      	cmp	r1, r0
 8015452:	d1ef      	bne.n	8015434 <uxr_prepare_reliable_buffer_to_write+0x40>
 8015454:	4650      	mov	r0, sl
 8015456:	2104      	movs	r1, #4
 8015458:	9605      	str	r6, [sp, #20]
 801545a:	f7f3 ff9d 	bl	8009398 <ucdr_alignment>
 801545e:	4482      	add	sl, r0
 8015460:	eb0a 0208 	add.w	r2, sl, r8
 8015464:	454a      	cmp	r2, r9
 8015466:	f240 80ca 	bls.w	80155fe <uxr_prepare_reliable_buffer_to_write+0x20a>
 801546a:	7b22      	ldrb	r2, [r4, #12]
 801546c:	4442      	add	r2, r8
 801546e:	454a      	cmp	r2, r9
 8015470:	f240 80b2 	bls.w	80155d8 <uxr_prepare_reliable_buffer_to_write+0x1e4>
 8015474:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 8015478:	32fc      	adds	r2, #252	@ 0xfc
 801547a:	fa1f f389 	uxth.w	r3, r9
 801547e:	441a      	add	r2, r3
 8015480:	b292      	uxth	r2, r2
 8015482:	fb06 fb02 	mul.w	fp, r6, r2
 8015486:	45c3      	cmp	fp, r8
 8015488:	9205      	str	r2, [sp, #20]
 801548a:	9206      	str	r2, [sp, #24]
 801548c:	f0c0 80b3 	bcc.w	80155f6 <uxr_prepare_reliable_buffer_to_write+0x202>
 8015490:	f10a 0204 	add.w	r2, sl, #4
 8015494:	454a      	cmp	r2, r9
 8015496:	f080 80db 	bcs.w	8015650 <uxr_prepare_reliable_buffer_to_write+0x25c>
 801549a:	f1a3 0b04 	sub.w	fp, r3, #4
 801549e:	ebab 0b0a 	sub.w	fp, fp, sl
 80154a2:	9b05      	ldr	r3, [sp, #20]
 80154a4:	fa1f fb8b 	uxth.w	fp, fp
 80154a8:	eba8 080b 	sub.w	r8, r8, fp
 80154ac:	fbb8 fcf3 	udiv	ip, r8, r3
 80154b0:	fb03 831c 	mls	r3, r3, ip, r8
 80154b4:	fa1f fc8c 	uxth.w	ip, ip
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	f040 80c1 	bne.w	8015640 <uxr_prepare_reliable_buffer_to_write+0x24c>
 80154be:	45b4      	cmp	ip, r6
 80154c0:	f200 8099 	bhi.w	80155f6 <uxr_prepare_reliable_buffer_to_write+0x202>
 80154c4:	f10d 0820 	add.w	r8, sp, #32
 80154c8:	f1bc 0f00 	cmp.w	ip, #0
 80154cc:	d040      	beq.n	8015550 <uxr_prepare_reliable_buffer_to_write+0x15c>
 80154ce:	f8cd a01c 	str.w	sl, [sp, #28]
 80154d2:	2600      	movs	r6, #0
 80154d4:	f8dd a014 	ldr.w	sl, [sp, #20]
 80154d8:	9505      	str	r5, [sp, #20]
 80154da:	f10d 0820 	add.w	r8, sp, #32
 80154de:	4665      	mov	r5, ip
 80154e0:	e000      	b.n	80154e4 <uxr_prepare_reliable_buffer_to_write+0xf0>
 80154e2:	46d3      	mov	fp, sl
 80154e4:	8921      	ldrh	r1, [r4, #8]
 80154e6:	fbb7 f2f1 	udiv	r2, r7, r1
 80154ea:	fb01 7212 	mls	r2, r1, r2, r7
 80154ee:	b292      	uxth	r2, r2
 80154f0:	6863      	ldr	r3, [r4, #4]
 80154f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80154f6:	6821      	ldr	r1, [r4, #0]
 80154f8:	fb02 f303 	mul.w	r3, r2, r3
 80154fc:	3304      	adds	r3, #4
 80154fe:	4419      	add	r1, r3
 8015500:	4640      	mov	r0, r8
 8015502:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8015506:	9200      	str	r2, [sp, #0]
 8015508:	2300      	movs	r3, #0
 801550a:	464a      	mov	r2, r9
 801550c:	f7f3 ff2e 	bl	800936c <ucdr_init_buffer_origin_offset>
 8015510:	465a      	mov	r2, fp
 8015512:	2300      	movs	r3, #0
 8015514:	210d      	movs	r1, #13
 8015516:	4640      	mov	r0, r8
 8015518:	f7f8 fb00 	bl	800db1c <uxr_buffer_submessage_header>
 801551c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015520:	fbb7 f2fc 	udiv	r2, r7, ip
 8015524:	fb0c 7212 	mls	r2, ip, r2, r7
 8015528:	b292      	uxth	r2, r2
 801552a:	6863      	ldr	r3, [r4, #4]
 801552c:	fbb3 f3fc 	udiv	r3, r3, ip
 8015530:	fb02 f303 	mul.w	r3, r2, r3
 8015534:	6822      	ldr	r2, [r4, #0]
 8015536:	4638      	mov	r0, r7
 8015538:	f842 9003 	str.w	r9, [r2, r3]
 801553c:	2101      	movs	r1, #1
 801553e:	f000 faf5 	bl	8015b2c <uxr_seq_num_add>
 8015542:	3601      	adds	r6, #1
 8015544:	42ae      	cmp	r6, r5
 8015546:	4607      	mov	r7, r0
 8015548:	d1cb      	bne.n	80154e2 <uxr_prepare_reliable_buffer_to_write+0xee>
 801554a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801554e:	9d05      	ldr	r5, [sp, #20]
 8015550:	8920      	ldrh	r0, [r4, #8]
 8015552:	fbb7 f1f0 	udiv	r1, r7, r0
 8015556:	fb00 7111 	mls	r1, r0, r1, r7
 801555a:	b289      	uxth	r1, r1
 801555c:	6863      	ldr	r3, [r4, #4]
 801555e:	fbb3 f3f0 	udiv	r3, r3, r0
 8015562:	fb01 f303 	mul.w	r3, r1, r3
 8015566:	6821      	ldr	r1, [r4, #0]
 8015568:	3304      	adds	r3, #4
 801556a:	4419      	add	r1, r3
 801556c:	464a      	mov	r2, r9
 801556e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8015572:	9000      	str	r0, [sp, #0]
 8015574:	2300      	movs	r3, #0
 8015576:	4640      	mov	r0, r8
 8015578:	f7f3 fef8 	bl	800936c <ucdr_init_buffer_origin_offset>
 801557c:	4640      	mov	r0, r8
 801557e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8015582:	2302      	movs	r3, #2
 8015584:	fa1f f288 	uxth.w	r2, r8
 8015588:	210d      	movs	r1, #13
 801558a:	f7f8 fac7 	bl	800db1c <uxr_buffer_submessage_header>
 801558e:	8926      	ldrh	r6, [r4, #8]
 8015590:	9b03      	ldr	r3, [sp, #12]
 8015592:	7b20      	ldrb	r0, [r4, #12]
 8015594:	f1a5 0208 	sub.w	r2, r5, #8
 8015598:	f10a 0104 	add.w	r1, sl, #4
 801559c:	fbb7 f5f6 	udiv	r5, r7, r6
 80155a0:	fb06 7515 	mls	r5, r6, r5, r7
 80155a4:	440b      	add	r3, r1
 80155a6:	b2ad      	uxth	r5, r5
 80155a8:	4619      	mov	r1, r3
 80155aa:	3004      	adds	r0, #4
 80155ac:	6863      	ldr	r3, [r4, #4]
 80155ae:	fbb3 f3f6 	udiv	r3, r3, r6
 80155b2:	fb05 f303 	mul.w	r3, r5, r3
 80155b6:	6825      	ldr	r5, [r4, #0]
 80155b8:	4440      	add	r0, r8
 80155ba:	50e8      	str	r0, [r5, r3]
 80155bc:	9d04      	ldr	r5, [sp, #16]
 80155be:	eba2 020a 	sub.w	r2, r2, sl
 80155c2:	4628      	mov	r0, r5
 80155c4:	f7f3 fee4 	bl	8009390 <ucdr_init_buffer>
 80155c8:	493c      	ldr	r1, [pc, #240]	@ (80156bc <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 80155ca:	4622      	mov	r2, r4
 80155cc:	4628      	mov	r0, r5
 80155ce:	f7f3 feb3 	bl	8009338 <ucdr_set_on_full_buffer_callback>
 80155d2:	81e7      	strh	r7, [r4, #14]
 80155d4:	2001      	movs	r0, #1
 80155d6:	e00f      	b.n	80155f8 <uxr_prepare_reliable_buffer_to_write+0x204>
 80155d8:	2101      	movs	r1, #1
 80155da:	89e0      	ldrh	r0, [r4, #14]
 80155dc:	f000 faa6 	bl	8015b2c <uxr_seq_num_add>
 80155e0:	8921      	ldrh	r1, [r4, #8]
 80155e2:	4605      	mov	r5, r0
 80155e4:	8a60      	ldrh	r0, [r4, #18]
 80155e6:	f000 faa1 	bl	8015b2c <uxr_seq_num_add>
 80155ea:	4601      	mov	r1, r0
 80155ec:	4628      	mov	r0, r5
 80155ee:	f000 faa5 	bl	8015b3c <uxr_seq_num_cmp>
 80155f2:	2800      	cmp	r0, #0
 80155f4:	dd45      	ble.n	8015682 <uxr_prepare_reliable_buffer_to_write+0x28e>
 80155f6:	2000      	movs	r0, #0
 80155f8:	b011      	add	sp, #68	@ 0x44
 80155fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155fe:	8921      	ldrh	r1, [r4, #8]
 8015600:	8a60      	ldrh	r0, [r4, #18]
 8015602:	9205      	str	r2, [sp, #20]
 8015604:	f000 fa92 	bl	8015b2c <uxr_seq_num_add>
 8015608:	4601      	mov	r1, r0
 801560a:	4638      	mov	r0, r7
 801560c:	f000 fa96 	bl	8015b3c <uxr_seq_num_cmp>
 8015610:	2800      	cmp	r0, #0
 8015612:	9a05      	ldr	r2, [sp, #20]
 8015614:	dcef      	bgt.n	80155f6 <uxr_prepare_reliable_buffer_to_write+0x202>
 8015616:	8926      	ldrh	r6, [r4, #8]
 8015618:	fbb7 f5f6 	udiv	r5, r7, r6
 801561c:	fb06 7515 	mls	r5, r6, r5, r7
 8015620:	b2ad      	uxth	r5, r5
 8015622:	6863      	ldr	r3, [r4, #4]
 8015624:	6824      	ldr	r4, [r4, #0]
 8015626:	fbb3 f3f6 	udiv	r3, r3, r6
 801562a:	fb05 f303 	mul.w	r3, r5, r3
 801562e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8015632:	50e2      	str	r2, [r4, r3]
 8015634:	2300      	movs	r3, #0
 8015636:	f8cd a000 	str.w	sl, [sp]
 801563a:	f7f3 fe97 	bl	800936c <ucdr_init_buffer_origin_offset>
 801563e:	e7c9      	b.n	80155d4 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8015640:	f10c 0c01 	add.w	ip, ip, #1
 8015644:	fa1f fc8c 	uxth.w	ip, ip
 8015648:	45b4      	cmp	ip, r6
 801564a:	9306      	str	r3, [sp, #24]
 801564c:	d8d3      	bhi.n	80155f6 <uxr_prepare_reliable_buffer_to_write+0x202>
 801564e:	e739      	b.n	80154c4 <uxr_prepare_reliable_buffer_to_write+0xd0>
 8015650:	4638      	mov	r0, r7
 8015652:	2101      	movs	r1, #1
 8015654:	9307      	str	r3, [sp, #28]
 8015656:	f000 fa69 	bl	8015b2c <uxr_seq_num_add>
 801565a:	8921      	ldrh	r1, [r4, #8]
 801565c:	6862      	ldr	r2, [r4, #4]
 801565e:	4607      	mov	r7, r0
 8015660:	fbb0 f0f1 	udiv	r0, r0, r1
 8015664:	fb01 7010 	mls	r0, r1, r0, r7
 8015668:	b280      	uxth	r0, r0
 801566a:	fbb2 f1f1 	udiv	r1, r2, r1
 801566e:	6822      	ldr	r2, [r4, #0]
 8015670:	fb00 f101 	mul.w	r1, r0, r1
 8015674:	3104      	adds	r1, #4
 8015676:	1853      	adds	r3, r2, r1
 8015678:	9303      	str	r3, [sp, #12]
 801567a:	f853 ac04 	ldr.w	sl, [r3, #-4]
 801567e:	9b07      	ldr	r3, [sp, #28]
 8015680:	e70b      	b.n	801549a <uxr_prepare_reliable_buffer_to_write+0xa6>
 8015682:	8921      	ldrh	r1, [r4, #8]
 8015684:	fbb5 f2f1 	udiv	r2, r5, r1
 8015688:	fb01 5212 	mls	r2, r1, r2, r5
 801568c:	b292      	uxth	r2, r2
 801568e:	6863      	ldr	r3, [r4, #4]
 8015690:	fbb3 f3f1 	udiv	r3, r3, r1
 8015694:	6821      	ldr	r1, [r4, #0]
 8015696:	9804      	ldr	r0, [sp, #16]
 8015698:	fb02 f303 	mul.w	r3, r2, r3
 801569c:	3304      	adds	r3, #4
 801569e:	7b22      	ldrb	r2, [r4, #12]
 80156a0:	4419      	add	r1, r3
 80156a2:	4442      	add	r2, r8
 80156a4:	f841 2c04 	str.w	r2, [r1, #-4]
 80156a8:	7b23      	ldrb	r3, [r4, #12]
 80156aa:	9300      	str	r3, [sp, #0]
 80156ac:	2300      	movs	r3, #0
 80156ae:	f7f3 fe5d 	bl	800936c <ucdr_init_buffer_origin_offset>
 80156b2:	81e5      	strh	r5, [r4, #14]
 80156b4:	e78e      	b.n	80155d4 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 80156b6:	4606      	mov	r6, r0
 80156b8:	e6cc      	b.n	8015454 <uxr_prepare_reliable_buffer_to_write+0x60>
 80156ba:	bf00      	nop
 80156bc:	080152d9 	.word	0x080152d9

080156c0 <uxr_prepare_next_reliable_buffer_to_send>:
 80156c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156c2:	4604      	mov	r4, r0
 80156c4:	460f      	mov	r7, r1
 80156c6:	8a00      	ldrh	r0, [r0, #16]
 80156c8:	2101      	movs	r1, #1
 80156ca:	4615      	mov	r5, r2
 80156cc:	461e      	mov	r6, r3
 80156ce:	f000 fa2d 	bl	8015b2c <uxr_seq_num_add>
 80156d2:	8030      	strh	r0, [r6, #0]
 80156d4:	8922      	ldrh	r2, [r4, #8]
 80156d6:	fbb0 f3f2 	udiv	r3, r0, r2
 80156da:	fb02 0c13 	mls	ip, r2, r3, r0
 80156de:	fa1f fc8c 	uxth.w	ip, ip
 80156e2:	6863      	ldr	r3, [r4, #4]
 80156e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80156e8:	fb0c fc03 	mul.w	ip, ip, r3
 80156ec:	6823      	ldr	r3, [r4, #0]
 80156ee:	89e1      	ldrh	r1, [r4, #14]
 80156f0:	f10c 0c04 	add.w	ip, ip, #4
 80156f4:	4463      	add	r3, ip
 80156f6:	603b      	str	r3, [r7, #0]
 80156f8:	6823      	ldr	r3, [r4, #0]
 80156fa:	4463      	add	r3, ip
 80156fc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015700:	602b      	str	r3, [r5, #0]
 8015702:	f000 fa1b 	bl	8015b3c <uxr_seq_num_cmp>
 8015706:	2800      	cmp	r0, #0
 8015708:	dd01      	ble.n	801570e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801570a:	2000      	movs	r0, #0
 801570c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801570e:	7b23      	ldrb	r3, [r4, #12]
 8015710:	682a      	ldr	r2, [r5, #0]
 8015712:	429a      	cmp	r2, r3
 8015714:	d9f9      	bls.n	801570a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015716:	8a61      	ldrh	r1, [r4, #18]
 8015718:	8a20      	ldrh	r0, [r4, #16]
 801571a:	f000 fa0b 	bl	8015b34 <uxr_seq_num_sub>
 801571e:	8923      	ldrh	r3, [r4, #8]
 8015720:	4283      	cmp	r3, r0
 8015722:	d0f2      	beq.n	801570a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015724:	8830      	ldrh	r0, [r6, #0]
 8015726:	89e3      	ldrh	r3, [r4, #14]
 8015728:	8220      	strh	r0, [r4, #16]
 801572a:	4298      	cmp	r0, r3
 801572c:	d001      	beq.n	8015732 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801572e:	2001      	movs	r0, #1
 8015730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015732:	2101      	movs	r1, #1
 8015734:	f000 f9fa 	bl	8015b2c <uxr_seq_num_add>
 8015738:	81e0      	strh	r0, [r4, #14]
 801573a:	e7f8      	b.n	801572e <uxr_prepare_next_reliable_buffer_to_send+0x6e>

0801573c <uxr_update_output_stream_heartbeat_timestamp>:
 801573c:	b570      	push	{r4, r5, r6, lr}
 801573e:	8a01      	ldrh	r1, [r0, #16]
 8015740:	4604      	mov	r4, r0
 8015742:	8a40      	ldrh	r0, [r0, #18]
 8015744:	4615      	mov	r5, r2
 8015746:	461e      	mov	r6, r3
 8015748:	f000 f9f8 	bl	8015b3c <uxr_seq_num_cmp>
 801574c:	2800      	cmp	r0, #0
 801574e:	db07      	blt.n	8015760 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8015750:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8015754:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8015758:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801575c:	2000      	movs	r0, #0
 801575e:	bd70      	pop	{r4, r5, r6, pc}
 8015760:	f894 3020 	ldrb.w	r3, [r4, #32]
 8015764:	b953      	cbnz	r3, 801577c <uxr_update_output_stream_heartbeat_timestamp+0x40>
 8015766:	2301      	movs	r3, #1
 8015768:	f884 3020 	strb.w	r3, [r4, #32]
 801576c:	3564      	adds	r5, #100	@ 0x64
 801576e:	f04f 0000 	mov.w	r0, #0
 8015772:	f146 0600 	adc.w	r6, r6, #0
 8015776:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801577a:	bd70      	pop	{r4, r5, r6, pc}
 801577c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015780:	428d      	cmp	r5, r1
 8015782:	eb76 0202 	sbcs.w	r2, r6, r2
 8015786:	dbf1      	blt.n	801576c <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8015788:	3301      	adds	r3, #1
 801578a:	3564      	adds	r5, #100	@ 0x64
 801578c:	f884 3020 	strb.w	r3, [r4, #32]
 8015790:	f04f 0001 	mov.w	r0, #1
 8015794:	f146 0600 	adc.w	r6, r6, #0
 8015798:	e7ed      	b.n	8015776 <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 801579a:	bf00      	nop

0801579c <uxr_begin_output_nack_buffer_it>:
 801579c:	8a40      	ldrh	r0, [r0, #18]
 801579e:	4770      	bx	lr

080157a0 <uxr_next_reliable_nack_buffer_to_send>:
 80157a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157a4:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80157a8:	f1b8 0f00 	cmp.w	r8, #0
 80157ac:	d104      	bne.n	80157b8 <uxr_next_reliable_nack_buffer_to_send+0x18>
 80157ae:	f04f 0800 	mov.w	r8, #0
 80157b2:	4640      	mov	r0, r8
 80157b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157b8:	4604      	mov	r4, r0
 80157ba:	460e      	mov	r6, r1
 80157bc:	8818      	ldrh	r0, [r3, #0]
 80157be:	4617      	mov	r7, r2
 80157c0:	461d      	mov	r5, r3
 80157c2:	e019      	b.n	80157f8 <uxr_next_reliable_nack_buffer_to_send+0x58>
 80157c4:	8921      	ldrh	r1, [r4, #8]
 80157c6:	8828      	ldrh	r0, [r5, #0]
 80157c8:	fbb0 fcf1 	udiv	ip, r0, r1
 80157cc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80157d0:	fb01 0c1c 	mls	ip, r1, ip, r0
 80157d4:	fa1f fc8c 	uxth.w	ip, ip
 80157d8:	fbb2 f2f1 	udiv	r2, r2, r1
 80157dc:	fb02 fc0c 	mul.w	ip, r2, ip
 80157e0:	f10c 0c04 	add.w	ip, ip, #4
 80157e4:	4463      	add	r3, ip
 80157e6:	6033      	str	r3, [r6, #0]
 80157e8:	6823      	ldr	r3, [r4, #0]
 80157ea:	4463      	add	r3, ip
 80157ec:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80157f0:	603b      	str	r3, [r7, #0]
 80157f2:	7b22      	ldrb	r2, [r4, #12]
 80157f4:	429a      	cmp	r2, r3
 80157f6:	d1dc      	bne.n	80157b2 <uxr_next_reliable_nack_buffer_to_send+0x12>
 80157f8:	2101      	movs	r1, #1
 80157fa:	f000 f997 	bl	8015b2c <uxr_seq_num_add>
 80157fe:	8028      	strh	r0, [r5, #0]
 8015800:	8a21      	ldrh	r1, [r4, #16]
 8015802:	f000 f99b 	bl	8015b3c <uxr_seq_num_cmp>
 8015806:	2800      	cmp	r0, #0
 8015808:	dddc      	ble.n	80157c4 <uxr_next_reliable_nack_buffer_to_send+0x24>
 801580a:	2300      	movs	r3, #0
 801580c:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 8015810:	e7cd      	b.n	80157ae <uxr_next_reliable_nack_buffer_to_send+0xe>
 8015812:	bf00      	nop

08015814 <uxr_process_acknack>:
 8015814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015816:	4604      	mov	r4, r0
 8015818:	460e      	mov	r6, r1
 801581a:	4610      	mov	r0, r2
 801581c:	2101      	movs	r1, #1
 801581e:	f000 f989 	bl	8015b34 <uxr_seq_num_sub>
 8015822:	8a61      	ldrh	r1, [r4, #18]
 8015824:	f000 f986 	bl	8015b34 <uxr_seq_num_sub>
 8015828:	b1c0      	cbz	r0, 801585c <uxr_process_acknack+0x48>
 801582a:	4605      	mov	r5, r0
 801582c:	2700      	movs	r7, #0
 801582e:	2101      	movs	r1, #1
 8015830:	8a60      	ldrh	r0, [r4, #18]
 8015832:	f000 f97b 	bl	8015b2c <uxr_seq_num_add>
 8015836:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801583a:	fbb0 f1fc 	udiv	r1, r0, ip
 801583e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015842:	fb0c 0111 	mls	r1, ip, r1, r0
 8015846:	b289      	uxth	r1, r1
 8015848:	3701      	adds	r7, #1
 801584a:	fbb3 f3fc 	udiv	r3, r3, ip
 801584e:	fb01 f303 	mul.w	r3, r1, r3
 8015852:	42bd      	cmp	r5, r7
 8015854:	7b21      	ldrb	r1, [r4, #12]
 8015856:	8260      	strh	r0, [r4, #18]
 8015858:	50d1      	str	r1, [r2, r3]
 801585a:	d1e8      	bne.n	801582e <uxr_process_acknack+0x1a>
 801585c:	3e00      	subs	r6, #0
 801585e:	f04f 0300 	mov.w	r3, #0
 8015862:	bf18      	it	ne
 8015864:	2601      	movne	r6, #1
 8015866:	f884 3020 	strb.w	r3, [r4, #32]
 801586a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801586e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015870 <uxr_is_output_up_to_date>:
 8015870:	8a01      	ldrh	r1, [r0, #16]
 8015872:	8a40      	ldrh	r0, [r0, #18]
 8015874:	b508      	push	{r3, lr}
 8015876:	f000 f961 	bl	8015b3c <uxr_seq_num_cmp>
 801587a:	fab0 f080 	clz	r0, r0
 801587e:	0940      	lsrs	r0, r0, #5
 8015880:	bd08      	pop	{r3, pc}
 8015882:	bf00      	nop

08015884 <get_available_free_slots>:
 8015884:	8901      	ldrh	r1, [r0, #8]
 8015886:	b1c1      	cbz	r1, 80158ba <get_available_free_slots+0x36>
 8015888:	b530      	push	{r4, r5, lr}
 801588a:	2200      	movs	r2, #0
 801588c:	6843      	ldr	r3, [r0, #4]
 801588e:	6805      	ldr	r5, [r0, #0]
 8015890:	7b04      	ldrb	r4, [r0, #12]
 8015892:	fbb3 fef1 	udiv	lr, r3, r1
 8015896:	4610      	mov	r0, r2
 8015898:	b293      	uxth	r3, r2
 801589a:	fbb3 fcf1 	udiv	ip, r3, r1
 801589e:	fb01 331c 	mls	r3, r1, ip, r3
 80158a2:	b29b      	uxth	r3, r3
 80158a4:	fb0e f303 	mul.w	r3, lr, r3
 80158a8:	3201      	adds	r2, #1
 80158aa:	58eb      	ldr	r3, [r5, r3]
 80158ac:	429c      	cmp	r4, r3
 80158ae:	bf04      	itt	eq
 80158b0:	3001      	addeq	r0, #1
 80158b2:	b280      	uxtheq	r0, r0
 80158b4:	4291      	cmp	r1, r2
 80158b6:	d1ef      	bne.n	8015898 <get_available_free_slots+0x14>
 80158b8:	bd30      	pop	{r4, r5, pc}
 80158ba:	4608      	mov	r0, r1
 80158bc:	4770      	bx	lr
 80158be:	bf00      	nop

080158c0 <uxr_buffer_request_data>:
 80158c0:	b530      	push	{r4, r5, lr}
 80158c2:	b095      	sub	sp, #84	@ 0x54
 80158c4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80158c8:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80158ca:	f88d 301c 	strb.w	r3, [sp, #28]
 80158ce:	2200      	movs	r2, #0
 80158d0:	2d00      	cmp	r5, #0
 80158d2:	bf14      	ite	ne
 80158d4:	2101      	movne	r1, #1
 80158d6:	4611      	moveq	r1, r2
 80158d8:	4604      	mov	r4, r0
 80158da:	f88d 201d 	strb.w	r2, [sp, #29]
 80158de:	f88d 201e 	strb.w	r2, [sp, #30]
 80158e2:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80158e6:	d021      	beq.n	801592c <uxr_buffer_request_data+0x6c>
 80158e8:	682a      	ldr	r2, [r5, #0]
 80158ea:	686b      	ldr	r3, [r5, #4]
 80158ec:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 80158f0:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80158f4:	2210      	movs	r2, #16
 80158f6:	2308      	movs	r3, #8
 80158f8:	2100      	movs	r1, #0
 80158fa:	e9cd 3100 	strd	r3, r1, [sp]
 80158fe:	4620      	mov	r0, r4
 8015900:	9905      	ldr	r1, [sp, #20]
 8015902:	ab0c      	add	r3, sp, #48	@ 0x30
 8015904:	f7f7 fe86 	bl	800d614 <uxr_prepare_stream_to_write_submessage>
 8015908:	b918      	cbnz	r0, 8015912 <uxr_buffer_request_data+0x52>
 801590a:	4604      	mov	r4, r0
 801590c:	4620      	mov	r0, r4
 801590e:	b015      	add	sp, #84	@ 0x54
 8015910:	bd30      	pop	{r4, r5, pc}
 8015912:	9904      	ldr	r1, [sp, #16]
 8015914:	aa06      	add	r2, sp, #24
 8015916:	4620      	mov	r0, r4
 8015918:	f7f7 ffb6 	bl	800d888 <uxr_init_base_object_request>
 801591c:	a906      	add	r1, sp, #24
 801591e:	4604      	mov	r4, r0
 8015920:	a80c      	add	r0, sp, #48	@ 0x30
 8015922:	f7f9 fa6d 	bl	800ee00 <uxr_serialize_READ_DATA_Payload>
 8015926:	4620      	mov	r0, r4
 8015928:	b015      	add	sp, #84	@ 0x54
 801592a:	bd30      	pop	{r4, r5, pc}
 801592c:	2208      	movs	r2, #8
 801592e:	e7e2      	b.n	80158f6 <uxr_buffer_request_data+0x36>

08015930 <uxr_buffer_cancel_data>:
 8015930:	b510      	push	{r4, lr}
 8015932:	b094      	sub	sp, #80	@ 0x50
 8015934:	2300      	movs	r3, #0
 8015936:	9301      	str	r3, [sp, #4]
 8015938:	9205      	str	r2, [sp, #20]
 801593a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801593e:	2201      	movs	r2, #1
 8015940:	f88d 301e 	strb.w	r3, [sp, #30]
 8015944:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8015948:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801594c:	2308      	movs	r3, #8
 801594e:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8015952:	9300      	str	r3, [sp, #0]
 8015954:	2210      	movs	r2, #16
 8015956:	ab0c      	add	r3, sp, #48	@ 0x30
 8015958:	4604      	mov	r4, r0
 801595a:	f7f7 fe5b 	bl	800d614 <uxr_prepare_stream_to_write_submessage>
 801595e:	b918      	cbnz	r0, 8015968 <uxr_buffer_cancel_data+0x38>
 8015960:	4604      	mov	r4, r0
 8015962:	4620      	mov	r0, r4
 8015964:	b014      	add	sp, #80	@ 0x50
 8015966:	bd10      	pop	{r4, pc}
 8015968:	9905      	ldr	r1, [sp, #20]
 801596a:	aa06      	add	r2, sp, #24
 801596c:	4620      	mov	r0, r4
 801596e:	f7f7 ff8b 	bl	800d888 <uxr_init_base_object_request>
 8015972:	a906      	add	r1, sp, #24
 8015974:	4604      	mov	r4, r0
 8015976:	a80c      	add	r0, sp, #48	@ 0x30
 8015978:	f7f9 fa42 	bl	800ee00 <uxr_serialize_READ_DATA_Payload>
 801597c:	4620      	mov	r0, r4
 801597e:	b014      	add	sp, #80	@ 0x50
 8015980:	bd10      	pop	{r4, pc}
 8015982:	bf00      	nop

08015984 <read_submessage_format>:
 8015984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015988:	b095      	sub	sp, #84	@ 0x54
 801598a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 801598e:	b113      	cbz	r3, 8015996 <read_submessage_format+0x12>
 8015990:	b015      	add	sp, #84	@ 0x54
 8015992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015996:	460c      	mov	r4, r1
 8015998:	4616      	mov	r6, r2
 801599a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801599e:	461d      	mov	r5, r3
 80159a0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80159a2:	9304      	str	r3, [sp, #16]
 80159a4:	1a52      	subs	r2, r2, r1
 80159a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80159a8:	9305      	str	r3, [sp, #20]
 80159aa:	4680      	mov	r8, r0
 80159ac:	a80c      	add	r0, sp, #48	@ 0x30
 80159ae:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 80159b2:	f7f3 fced 	bl	8009390 <ucdr_init_buffer>
 80159b6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80159ba:	a80c      	add	r0, sp, #48	@ 0x30
 80159bc:	f7f3 fcbc 	bl	8009338 <ucdr_set_on_full_buffer_callback>
 80159c0:	69e3      	ldr	r3, [r4, #28]
 80159c2:	b35b      	cbz	r3, 8015a1c <read_submessage_format+0x98>
 80159c4:	f1b9 0f07 	cmp.w	r9, #7
 80159c8:	751d      	strb	r5, [r3, #20]
 80159ca:	d043      	beq.n	8015a54 <read_submessage_format+0xd0>
 80159cc:	f1b9 0f08 	cmp.w	r9, #8
 80159d0:	d032      	beq.n	8015a38 <read_submessage_format+0xb4>
 80159d2:	f1b9 0f06 	cmp.w	r9, #6
 80159d6:	d008      	beq.n	80159ea <read_submessage_format+0x66>
 80159d8:	2201      	movs	r2, #1
 80159da:	751a      	strb	r2, [r3, #20]
 80159dc:	4631      	mov	r1, r6
 80159de:	4620      	mov	r0, r4
 80159e0:	f7f3 fd26 	bl	8009430 <ucdr_advance_buffer>
 80159e4:	b015      	add	sp, #84	@ 0x54
 80159e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80159ea:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 80159ee:	2d00      	cmp	r5, #0
 80159f0:	d0f2      	beq.n	80159d8 <read_submessage_format+0x54>
 80159f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80159f4:	e9cd 3600 	strd	r3, r6, [sp]
 80159f8:	2306      	movs	r3, #6
 80159fa:	f88d 3016 	strb.w	r3, [sp, #22]
 80159fe:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 8015a02:	9302      	str	r3, [sp, #8]
 8015a04:	463a      	mov	r2, r7
 8015a06:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015a0a:	4640      	mov	r0, r8
 8015a0c:	47a8      	blx	r5
 8015a0e:	69e3      	ldr	r3, [r4, #28]
 8015a10:	2201      	movs	r2, #1
 8015a12:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d1de      	bne.n	80159d8 <read_submessage_format+0x54>
 8015a1a:	e7df      	b.n	80159dc <read_submessage_format+0x58>
 8015a1c:	f1b9 0f07 	cmp.w	r9, #7
 8015a20:	d032      	beq.n	8015a88 <read_submessage_format+0x104>
 8015a22:	f1b9 0f08 	cmp.w	r9, #8
 8015a26:	d02a      	beq.n	8015a7e <read_submessage_format+0xfa>
 8015a28:	f1b9 0f06 	cmp.w	r9, #6
 8015a2c:	d1d6      	bne.n	80159dc <read_submessage_format+0x58>
 8015a2e:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 8015a32:	2d00      	cmp	r5, #0
 8015a34:	d1dd      	bne.n	80159f2 <read_submessage_format+0x6e>
 8015a36:	e7d1      	b.n	80159dc <read_submessage_format+0x58>
 8015a38:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 8015a3c:	2a00      	cmp	r2, #0
 8015a3e:	d0cb      	beq.n	80159d8 <read_submessage_format+0x54>
 8015a40:	a906      	add	r1, sp, #24
 8015a42:	a80c      	add	r0, sp, #48	@ 0x30
 8015a44:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8015a46:	f7f9 faaf 	bl	800efa8 <uxr_deserialize_SampleIdentity>
 8015a4a:	bb28      	cbnz	r0, 8015a98 <read_submessage_format+0x114>
 8015a4c:	69e3      	ldr	r3, [r4, #28]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d1c2      	bne.n	80159d8 <read_submessage_format+0x54>
 8015a52:	e7c3      	b.n	80159dc <read_submessage_format+0x58>
 8015a54:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 8015a58:	b16a      	cbz	r2, 8015a76 <read_submessage_format+0xf2>
 8015a5a:	a906      	add	r1, sp, #24
 8015a5c:	a80c      	add	r0, sp, #48	@ 0x30
 8015a5e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8015a60:	f7f8 ff82 	bl	800e968 <uxr_deserialize_BaseObjectRequest>
 8015a64:	2800      	cmp	r0, #0
 8015a66:	d13a      	bne.n	8015ade <read_submessage_format+0x15a>
 8015a68:	68a2      	ldr	r2, [r4, #8]
 8015a6a:	69e3      	ldr	r3, [r4, #28]
 8015a6c:	4432      	add	r2, r6
 8015a6e:	60a2      	str	r2, [r4, #8]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d1b1      	bne.n	80159d8 <read_submessage_format+0x54>
 8015a74:	e7b2      	b.n	80159dc <read_submessage_format+0x58>
 8015a76:	68a2      	ldr	r2, [r4, #8]
 8015a78:	4432      	add	r2, r6
 8015a7a:	60a2      	str	r2, [r4, #8]
 8015a7c:	e7ac      	b.n	80159d8 <read_submessage_format+0x54>
 8015a7e:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d1dc      	bne.n	8015a40 <read_submessage_format+0xbc>
 8015a86:	e7a9      	b.n	80159dc <read_submessage_format+0x58>
 8015a88:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d1e4      	bne.n	8015a5a <read_submessage_format+0xd6>
 8015a90:	68a3      	ldr	r3, [r4, #8]
 8015a92:	4433      	add	r3, r6
 8015a94:	60a3      	str	r3, [r4, #8]
 8015a96:	e7a1      	b.n	80159dc <read_submessage_format+0x58>
 8015a98:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8015a9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015a9e:	1a52      	subs	r2, r2, r1
 8015aa0:	1aed      	subs	r5, r5, r3
 8015aa2:	a80c      	add	r0, sp, #48	@ 0x30
 8015aa4:	f7f3 fc74 	bl	8009390 <ucdr_init_buffer>
 8015aa8:	4435      	add	r5, r6
 8015aaa:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015aae:	a80c      	add	r0, sp, #48	@ 0x30
 8015ab0:	f7f3 fc42 	bl	8009338 <ucdr_set_on_full_buffer_callback>
 8015ab4:	b2ad      	uxth	r5, r5
 8015ab6:	ab0c      	add	r3, sp, #48	@ 0x30
 8015ab8:	9300      	str	r3, [sp, #0]
 8015aba:	9501      	str	r5, [sp, #4]
 8015abc:	2108      	movs	r1, #8
 8015abe:	f88d 1016 	strb.w	r1, [sp, #22]
 8015ac2:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 8015ac6:	9102      	str	r1, [sp, #8]
 8015ac8:	ab06      	add	r3, sp, #24
 8015aca:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 8015ace:	9905      	ldr	r1, [sp, #20]
 8015ad0:	463a      	mov	r2, r7
 8015ad2:	4640      	mov	r0, r8
 8015ad4:	47a8      	blx	r5
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8015adc:	e7b6      	b.n	8015a4c <read_submessage_format+0xc8>
 8015ade:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8015ae2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015ae4:	1a52      	subs	r2, r2, r1
 8015ae6:	1aed      	subs	r5, r5, r3
 8015ae8:	a80c      	add	r0, sp, #48	@ 0x30
 8015aea:	f7f3 fc51 	bl	8009390 <ucdr_init_buffer>
 8015aee:	4435      	add	r5, r6
 8015af0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015af4:	a80c      	add	r0, sp, #48	@ 0x30
 8015af6:	f7f3 fc1f 	bl	8009338 <ucdr_set_on_full_buffer_callback>
 8015afa:	b2ad      	uxth	r5, r5
 8015afc:	ab0c      	add	r3, sp, #48	@ 0x30
 8015afe:	9300      	str	r3, [sp, #0]
 8015b00:	9501      	str	r5, [sp, #4]
 8015b02:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8015b06:	2107      	movs	r1, #7
 8015b08:	f88d 1016 	strb.w	r1, [sp, #22]
 8015b0c:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 8015b10:	9102      	str	r1, [sp, #8]
 8015b12:	ba5b      	rev16	r3, r3
 8015b14:	b29b      	uxth	r3, r3
 8015b16:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 8015b1a:	9905      	ldr	r1, [sp, #20]
 8015b1c:	463a      	mov	r2, r7
 8015b1e:	4640      	mov	r0, r8
 8015b20:	47a8      	blx	r5
 8015b22:	2301      	movs	r3, #1
 8015b24:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8015b28:	e79e      	b.n	8015a68 <read_submessage_format+0xe4>
 8015b2a:	bf00      	nop

08015b2c <uxr_seq_num_add>:
 8015b2c:	4408      	add	r0, r1
 8015b2e:	b280      	uxth	r0, r0
 8015b30:	4770      	bx	lr
 8015b32:	bf00      	nop

08015b34 <uxr_seq_num_sub>:
 8015b34:	1a40      	subs	r0, r0, r1
 8015b36:	b280      	uxth	r0, r0
 8015b38:	4770      	bx	lr
 8015b3a:	bf00      	nop

08015b3c <uxr_seq_num_cmp>:
 8015b3c:	4288      	cmp	r0, r1
 8015b3e:	d010      	beq.n	8015b62 <uxr_seq_num_cmp+0x26>
 8015b40:	d207      	bcs.n	8015b52 <uxr_seq_num_cmp+0x16>
 8015b42:	1a09      	subs	r1, r1, r0
 8015b44:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8015b48:	bfb4      	ite	lt
 8015b4a:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
 8015b4e:	2001      	movge	r0, #1
 8015b50:	4770      	bx	lr
 8015b52:	1a41      	subs	r1, r0, r1
 8015b54:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8015b58:	bfcc      	ite	gt
 8015b5a:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8015b5e:	2001      	movle	r0, #1
 8015b60:	4770      	bx	lr
 8015b62:	2000      	movs	r0, #0
 8015b64:	4770      	bx	lr
 8015b66:	bf00      	nop

08015b68 <uxr_init_framing_io>:
 8015b68:	2300      	movs	r3, #0
 8015b6a:	7041      	strb	r1, [r0, #1]
 8015b6c:	7003      	strb	r3, [r0, #0]
 8015b6e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8015b70:	4770      	bx	lr
 8015b72:	bf00      	nop

08015b74 <uxr_write_framed_msg>:
 8015b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b78:	f890 c001 	ldrb.w	ip, [r0, #1]
 8015b7c:	4617      	mov	r7, r2
 8015b7e:	227e      	movs	r2, #126	@ 0x7e
 8015b80:	b085      	sub	sp, #20
 8015b82:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 8015b86:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 8015b8a:	2a01      	cmp	r2, #1
 8015b8c:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8015b90:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8015b94:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8015b98:	4604      	mov	r4, r0
 8015b9a:	460e      	mov	r6, r1
 8015b9c:	469a      	mov	sl, r3
 8015b9e:	f240 812e 	bls.w	8015dfe <uxr_write_framed_msg+0x28a>
 8015ba2:	2003      	movs	r0, #3
 8015ba4:	2102      	movs	r1, #2
 8015ba6:	f04f 0905 	mov.w	r9, #5
 8015baa:	2204      	movs	r2, #4
 8015bac:	4686      	mov	lr, r0
 8015bae:	460b      	mov	r3, r1
 8015bb0:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 8015bb4:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 8015bb8:	f1bc 0f01 	cmp.w	ip, #1
 8015bbc:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015bc0:	4421      	add	r1, r4
 8015bc2:	f240 8110 	bls.w	8015de6 <uxr_write_framed_msg+0x272>
 8015bc6:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8015bca:	fa5f fc8b 	uxtb.w	ip, fp
 8015bce:	f3cb 2107 	ubfx	r1, fp, #8, #8
 8015bd2:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 8015bd6:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 8015bda:	f1be 0f01 	cmp.w	lr, #1
 8015bde:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 8015be2:	b2ed      	uxtb	r5, r5
 8015be4:	d94c      	bls.n	8015c80 <uxr_write_framed_msg+0x10c>
 8015be6:	4420      	add	r0, r4
 8015be8:	2d01      	cmp	r5, #1
 8015bea:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8015bee:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015bf2:	d95d      	bls.n	8015cb0 <uxr_write_framed_msg+0x13c>
 8015bf4:	18a0      	adds	r0, r4, r2
 8015bf6:	3201      	adds	r2, #1
 8015bf8:	b2d2      	uxtb	r2, r2
 8015bfa:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015bfe:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015c02:	f1bb 0f00 	cmp.w	fp, #0
 8015c06:	f000 8108 	beq.w	8015e1a <uxr_write_framed_msg+0x2a6>
 8015c0a:	f04f 0c00 	mov.w	ip, #0
 8015c0e:	4661      	mov	r1, ip
 8015c10:	46de      	mov	lr, fp
 8015c12:	46e3      	mov	fp, ip
 8015c14:	46d4      	mov	ip, sl
 8015c16:	468a      	mov	sl, r1
 8015c18:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 8015e24 <uxr_write_framed_msg+0x2b0>
 8015c1c:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8015c20:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8015c24:	2901      	cmp	r1, #1
 8015c26:	d91b      	bls.n	8015c60 <uxr_write_framed_msg+0xec>
 8015c28:	2a29      	cmp	r2, #41	@ 0x29
 8015c2a:	d84e      	bhi.n	8015cca <uxr_write_framed_msg+0x156>
 8015c2c:	18a1      	adds	r1, r4, r2
 8015c2e:	3201      	adds	r2, #1
 8015c30:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8015c34:	b2d2      	uxtb	r2, r2
 8015c36:	ea8b 0303 	eor.w	r3, fp, r3
 8015c3a:	b2db      	uxtb	r3, r3
 8015c3c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015c40:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 8015c44:	f10a 0a01 	add.w	sl, sl, #1
 8015c48:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 8015c4c:	45d6      	cmp	lr, sl
 8015c4e:	d95a      	bls.n	8015d06 <uxr_write_framed_msg+0x192>
 8015c50:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8015c54:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015c58:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8015c5c:	2901      	cmp	r1, #1
 8015c5e:	d8e3      	bhi.n	8015c28 <uxr_write_framed_msg+0xb4>
 8015c60:	1c51      	adds	r1, r2, #1
 8015c62:	b2c9      	uxtb	r1, r1
 8015c64:	2929      	cmp	r1, #41	@ 0x29
 8015c66:	d830      	bhi.n	8015cca <uxr_write_framed_msg+0x156>
 8015c68:	18a1      	adds	r1, r4, r2
 8015c6a:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 8015c6e:	3202      	adds	r2, #2
 8015c70:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8015c74:	f083 0020 	eor.w	r0, r3, #32
 8015c78:	b2d2      	uxtb	r2, r2
 8015c7a:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 8015c7e:	e7da      	b.n	8015c36 <uxr_write_framed_msg+0xc2>
 8015c80:	eb04 0e00 	add.w	lr, r4, r0
 8015c84:	f08c 0c20 	eor.w	ip, ip, #32
 8015c88:	1c82      	adds	r2, r0, #2
 8015c8a:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 8015c8e:	b2d2      	uxtb	r2, r2
 8015c90:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015c94:	2d01      	cmp	r5, #1
 8015c96:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 8015c9a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015c9e:	d907      	bls.n	8015cb0 <uxr_write_framed_msg+0x13c>
 8015ca0:	4422      	add	r2, r4
 8015ca2:	3003      	adds	r0, #3
 8015ca4:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 8015ca8:	b2c2      	uxtb	r2, r0
 8015caa:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015cae:	e7ac      	b.n	8015c0a <uxr_write_framed_msg+0x96>
 8015cb0:	18a0      	adds	r0, r4, r2
 8015cb2:	f081 0120 	eor.w	r1, r1, #32
 8015cb6:	3202      	adds	r2, #2
 8015cb8:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8015cbc:	b2d2      	uxtb	r2, r2
 8015cbe:	217d      	movs	r1, #125	@ 0x7d
 8015cc0:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015cc4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015cc8:	e79f      	b.n	8015c0a <uxr_write_framed_msg+0x96>
 8015cca:	e9cd ba00 	strd	fp, sl, [sp]
 8015cce:	2500      	movs	r5, #0
 8015cd0:	46e2      	mov	sl, ip
 8015cd2:	46f3      	mov	fp, lr
 8015cd4:	e000      	b.n	8015cd8 <uxr_write_framed_msg+0x164>
 8015cd6:	b190      	cbz	r0, 8015cfe <uxr_write_framed_msg+0x18a>
 8015cd8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015cdc:	1b52      	subs	r2, r2, r5
 8015cde:	4643      	mov	r3, r8
 8015ce0:	4421      	add	r1, r4
 8015ce2:	4638      	mov	r0, r7
 8015ce4:	47b0      	blx	r6
 8015ce6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015cea:	4405      	add	r5, r0
 8015cec:	4295      	cmp	r5, r2
 8015cee:	d3f2      	bcc.n	8015cd6 <uxr_write_framed_msg+0x162>
 8015cf0:	46d4      	mov	ip, sl
 8015cf2:	46de      	mov	lr, fp
 8015cf4:	f8dd a004 	ldr.w	sl, [sp, #4]
 8015cf8:	f8dd b000 	ldr.w	fp, [sp]
 8015cfc:	d06f      	beq.n	8015dde <uxr_write_framed_msg+0x26a>
 8015cfe:	2000      	movs	r0, #0
 8015d00:	b005      	add	sp, #20
 8015d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d06:	46dc      	mov	ip, fp
 8015d08:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015d0c:	f8ad c00c 	strh.w	ip, [sp, #12]
 8015d10:	46f3      	mov	fp, lr
 8015d12:	fa5f fc8c 	uxtb.w	ip, ip
 8015d16:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 8015d1a:	2b01      	cmp	r3, #1
 8015d1c:	f04f 0900 	mov.w	r9, #0
 8015d20:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 8015d24:	d930      	bls.n	8015d88 <uxr_write_framed_msg+0x214>
 8015d26:	2a29      	cmp	r2, #41	@ 0x29
 8015d28:	d91c      	bls.n	8015d64 <uxr_write_framed_msg+0x1f0>
 8015d2a:	2500      	movs	r5, #0
 8015d2c:	e001      	b.n	8015d32 <uxr_write_framed_msg+0x1be>
 8015d2e:	2800      	cmp	r0, #0
 8015d30:	d0e5      	beq.n	8015cfe <uxr_write_framed_msg+0x18a>
 8015d32:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015d36:	1b52      	subs	r2, r2, r5
 8015d38:	4643      	mov	r3, r8
 8015d3a:	4421      	add	r1, r4
 8015d3c:	4638      	mov	r0, r7
 8015d3e:	47b0      	blx	r6
 8015d40:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015d44:	4405      	add	r5, r0
 8015d46:	4295      	cmp	r5, r2
 8015d48:	d3f1      	bcc.n	8015d2e <uxr_write_framed_msg+0x1ba>
 8015d4a:	d1d8      	bne.n	8015cfe <uxr_write_framed_msg+0x18a>
 8015d4c:	f109 0310 	add.w	r3, r9, #16
 8015d50:	446b      	add	r3, sp
 8015d52:	2200      	movs	r2, #0
 8015d54:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 8015d58:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015d5c:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 8015d60:	2b01      	cmp	r3, #1
 8015d62:	d911      	bls.n	8015d88 <uxr_write_framed_msg+0x214>
 8015d64:	18a3      	adds	r3, r4, r2
 8015d66:	3201      	adds	r2, #1
 8015d68:	b2d2      	uxtb	r2, r2
 8015d6a:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 8015d6e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015d72:	f1b9 0f00 	cmp.w	r9, #0
 8015d76:	d119      	bne.n	8015dac <uxr_write_framed_msg+0x238>
 8015d78:	f89d c00d 	ldrb.w	ip, [sp, #13]
 8015d7c:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 8015d80:	2b01      	cmp	r3, #1
 8015d82:	f04f 0901 	mov.w	r9, #1
 8015d86:	d8ce      	bhi.n	8015d26 <uxr_write_framed_msg+0x1b2>
 8015d88:	1c53      	adds	r3, r2, #1
 8015d8a:	b2db      	uxtb	r3, r3
 8015d8c:	2b29      	cmp	r3, #41	@ 0x29
 8015d8e:	d8cc      	bhi.n	8015d2a <uxr_write_framed_msg+0x1b6>
 8015d90:	18a3      	adds	r3, r4, r2
 8015d92:	3202      	adds	r2, #2
 8015d94:	f08c 0c20 	eor.w	ip, ip, #32
 8015d98:	b2d2      	uxtb	r2, r2
 8015d9a:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 8015d9e:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 8015da2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015da6:	f1b9 0f00 	cmp.w	r9, #0
 8015daa:	d0e5      	beq.n	8015d78 <uxr_write_framed_msg+0x204>
 8015dac:	2500      	movs	r5, #0
 8015dae:	e001      	b.n	8015db4 <uxr_write_framed_msg+0x240>
 8015db0:	2800      	cmp	r0, #0
 8015db2:	d0a4      	beq.n	8015cfe <uxr_write_framed_msg+0x18a>
 8015db4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015db8:	1b52      	subs	r2, r2, r5
 8015dba:	4643      	mov	r3, r8
 8015dbc:	4421      	add	r1, r4
 8015dbe:	4638      	mov	r0, r7
 8015dc0:	47b0      	blx	r6
 8015dc2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015dc6:	4405      	add	r5, r0
 8015dc8:	4295      	cmp	r5, r2
 8015dca:	d3f1      	bcc.n	8015db0 <uxr_write_framed_msg+0x23c>
 8015dcc:	d197      	bne.n	8015cfe <uxr_write_framed_msg+0x18a>
 8015dce:	2300      	movs	r3, #0
 8015dd0:	fa1f f08b 	uxth.w	r0, fp
 8015dd4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015dd8:	b005      	add	sp, #20
 8015dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dde:	2300      	movs	r3, #0
 8015de0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015de4:	e732      	b.n	8015c4c <uxr_write_framed_msg+0xd8>
 8015de6:	44a6      	add	lr, r4
 8015de8:	f085 0520 	eor.w	r5, r5, #32
 8015dec:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015df0:	4610      	mov	r0, r2
 8015df2:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 8015df6:	464a      	mov	r2, r9
 8015df8:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 8015dfc:	e6e5      	b.n	8015bca <uxr_write_framed_msg+0x56>
 8015dfe:	f08c 0c20 	eor.w	ip, ip, #32
 8015e02:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 8015e06:	2103      	movs	r1, #3
 8015e08:	2004      	movs	r0, #4
 8015e0a:	f04f 0906 	mov.w	r9, #6
 8015e0e:	2205      	movs	r2, #5
 8015e10:	4686      	mov	lr, r0
 8015e12:	460b      	mov	r3, r1
 8015e14:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015e18:	e6ca      	b.n	8015bb0 <uxr_write_framed_msg+0x3c>
 8015e1a:	f8ad b00c 	strh.w	fp, [sp, #12]
 8015e1e:	46dc      	mov	ip, fp
 8015e20:	e779      	b.n	8015d16 <uxr_write_framed_msg+0x1a2>
 8015e22:	bf00      	nop
 8015e24:	0801a2b0 	.word	0x0801a2b0

08015e28 <uxr_framing_read_transport>:
 8015e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e2c:	4604      	mov	r4, r0
 8015e2e:	b083      	sub	sp, #12
 8015e30:	461f      	mov	r7, r3
 8015e32:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8015e36:	4689      	mov	r9, r1
 8015e38:	4692      	mov	sl, r2
 8015e3a:	f7f7 feb5 	bl	800dba8 <uxr_millis>
 8015e3e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015e42:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8015e46:	42b3      	cmp	r3, r6
 8015e48:	4680      	mov	r8, r0
 8015e4a:	d062      	beq.n	8015f12 <uxr_framing_read_transport+0xea>
 8015e4c:	d81c      	bhi.n	8015e88 <uxr_framing_read_transport+0x60>
 8015e4e:	1e75      	subs	r5, r6, #1
 8015e50:	1aed      	subs	r5, r5, r3
 8015e52:	b2ed      	uxtb	r5, r5
 8015e54:	2600      	movs	r6, #0
 8015e56:	455d      	cmp	r5, fp
 8015e58:	d81f      	bhi.n	8015e9a <uxr_framing_read_transport+0x72>
 8015e5a:	19ab      	adds	r3, r5, r6
 8015e5c:	455b      	cmp	r3, fp
 8015e5e:	bf84      	itt	hi
 8015e60:	ebab 0b05 	subhi.w	fp, fp, r5
 8015e64:	fa5f f68b 	uxtbhi.w	r6, fp
 8015e68:	b9e5      	cbnz	r5, 8015ea4 <uxr_framing_read_transport+0x7c>
 8015e6a:	f04f 0b00 	mov.w	fp, #0
 8015e6e:	f7f7 fe9b 	bl	800dba8 <uxr_millis>
 8015e72:	683b      	ldr	r3, [r7, #0]
 8015e74:	eba0 0108 	sub.w	r1, r0, r8
 8015e78:	1a5b      	subs	r3, r3, r1
 8015e7a:	4658      	mov	r0, fp
 8015e7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015e80:	603b      	str	r3, [r7, #0]
 8015e82:	b003      	add	sp, #12
 8015e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e88:	2e00      	cmp	r6, #0
 8015e8a:	d04a      	beq.n	8015f22 <uxr_framing_read_transport+0xfa>
 8015e8c:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 8015e90:	b2dd      	uxtb	r5, r3
 8015e92:	3e01      	subs	r6, #1
 8015e94:	455d      	cmp	r5, fp
 8015e96:	b2f6      	uxtb	r6, r6
 8015e98:	d9df      	bls.n	8015e5a <uxr_framing_read_transport+0x32>
 8015e9a:	fa5f f58b 	uxtb.w	r5, fp
 8015e9e:	2600      	movs	r6, #0
 8015ea0:	2d00      	cmp	r5, #0
 8015ea2:	d0e2      	beq.n	8015e6a <uxr_framing_read_transport+0x42>
 8015ea4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015ea8:	3102      	adds	r1, #2
 8015eaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015eac:	9300      	str	r3, [sp, #0]
 8015eae:	683b      	ldr	r3, [r7, #0]
 8015eb0:	4421      	add	r1, r4
 8015eb2:	462a      	mov	r2, r5
 8015eb4:	4650      	mov	r0, sl
 8015eb6:	47c8      	blx	r9
 8015eb8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8015f2c <uxr_framing_read_transport+0x104>)
 8015ebe:	4403      	add	r3, r0
 8015ec0:	0859      	lsrs	r1, r3, #1
 8015ec2:	4683      	mov	fp, r0
 8015ec4:	fba2 0101 	umull	r0, r1, r2, r1
 8015ec8:	0889      	lsrs	r1, r1, #2
 8015eca:	222a      	movs	r2, #42	@ 0x2a
 8015ecc:	fb02 3111 	mls	r1, r2, r1, r3
 8015ed0:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8015ed4:	f1bb 0f00 	cmp.w	fp, #0
 8015ed8:	d0c7      	beq.n	8015e6a <uxr_framing_read_transport+0x42>
 8015eda:	45ab      	cmp	fp, r5
 8015edc:	d1c7      	bne.n	8015e6e <uxr_framing_read_transport+0x46>
 8015ede:	2e00      	cmp	r6, #0
 8015ee0:	d0c5      	beq.n	8015e6e <uxr_framing_read_transport+0x46>
 8015ee2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015ee4:	9300      	str	r3, [sp, #0]
 8015ee6:	3102      	adds	r1, #2
 8015ee8:	4632      	mov	r2, r6
 8015eea:	4421      	add	r1, r4
 8015eec:	2300      	movs	r3, #0
 8015eee:	4650      	mov	r0, sl
 8015ef0:	47c8      	blx	r9
 8015ef2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015ef6:	4a0d      	ldr	r2, [pc, #52]	@ (8015f2c <uxr_framing_read_transport+0x104>)
 8015ef8:	4403      	add	r3, r0
 8015efa:	0859      	lsrs	r1, r3, #1
 8015efc:	fba2 2101 	umull	r2, r1, r2, r1
 8015f00:	0889      	lsrs	r1, r1, #2
 8015f02:	222a      	movs	r2, #42	@ 0x2a
 8015f04:	fb02 3311 	mls	r3, r2, r1, r3
 8015f08:	eb00 0b05 	add.w	fp, r0, r5
 8015f0c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8015f10:	e7ad      	b.n	8015e6e <uxr_framing_read_transport+0x46>
 8015f12:	2600      	movs	r6, #0
 8015f14:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8015f18:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8015f1a:	d9be      	bls.n	8015e9a <uxr_framing_read_transport+0x72>
 8015f1c:	2529      	movs	r5, #41	@ 0x29
 8015f1e:	2102      	movs	r1, #2
 8015f20:	e7c3      	b.n	8015eaa <uxr_framing_read_transport+0x82>
 8015f22:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 8015f26:	b2dd      	uxtb	r5, r3
 8015f28:	e795      	b.n	8015e56 <uxr_framing_read_transport+0x2e>
 8015f2a:	bf00      	nop
 8015f2c:	30c30c31 	.word	0x30c30c31

08015f30 <uxr_read_framed_msg>:
 8015f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f34:	461d      	mov	r5, r3
 8015f36:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 8015f3a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8015f3e:	b085      	sub	sp, #20
 8015f40:	459c      	cmp	ip, r3
 8015f42:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 8015f46:	4604      	mov	r4, r0
 8015f48:	460f      	mov	r7, r1
 8015f4a:	4616      	mov	r6, r2
 8015f4c:	f000 81ae 	beq.w	80162ac <uxr_read_framed_msg+0x37c>
 8015f50:	2000      	movs	r0, #0
 8015f52:	4639      	mov	r1, r7
 8015f54:	2800      	cmp	r0, #0
 8015f56:	d138      	bne.n	8015fca <uxr_read_framed_msg+0x9a>
 8015f58:	468a      	mov	sl, r1
 8015f5a:	7823      	ldrb	r3, [r4, #0]
 8015f5c:	2b07      	cmp	r3, #7
 8015f5e:	d8fd      	bhi.n	8015f5c <uxr_read_framed_msg+0x2c>
 8015f60:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015f64:	0116013b 	.word	0x0116013b
 8015f68:	00cd00f0 	.word	0x00cd00f0
 8015f6c:	005a00a0 	.word	0x005a00a0
 8015f70:	00080037 	.word	0x00080037
 8015f74:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015f78:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015f7c:	4290      	cmp	r0, r2
 8015f7e:	f000 8167 	beq.w	8016250 <uxr_read_framed_msg+0x320>
 8015f82:	18a3      	adds	r3, r4, r2
 8015f84:	1c57      	adds	r7, r2, #1
 8015f86:	49c7      	ldr	r1, [pc, #796]	@ (80162a4 <uxr_read_framed_msg+0x374>)
 8015f88:	f893 c002 	ldrb.w	ip, [r3, #2]
 8015f8c:	087b      	lsrs	r3, r7, #1
 8015f8e:	fba1 8303 	umull	r8, r3, r1, r3
 8015f92:	089b      	lsrs	r3, r3, #2
 8015f94:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8015f98:	fb08 7313 	mls	r3, r8, r3, r7
 8015f9c:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8015fa0:	b2df      	uxtb	r7, r3
 8015fa2:	f000 81b2 	beq.w	801630a <uxr_read_framed_msg+0x3da>
 8015fa6:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015faa:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 8015fae:	f000 8220 	beq.w	80163f2 <uxr_read_framed_msg+0x4c2>
 8015fb2:	4661      	mov	r1, ip
 8015fb4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8015fb6:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8015fb8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015fbc:	b29b      	uxth	r3, r3
 8015fbe:	2100      	movs	r1, #0
 8015fc0:	429a      	cmp	r2, r3
 8015fc2:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8015fc4:	7021      	strb	r1, [r4, #0]
 8015fc6:	f000 8198 	beq.w	80162fa <uxr_read_framed_msg+0x3ca>
 8015fca:	2000      	movs	r0, #0
 8015fcc:	b005      	add	sp, #20
 8015fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fd2:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8015fd6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015fda:	4297      	cmp	r7, r2
 8015fdc:	f000 8148 	beq.w	8016270 <uxr_read_framed_msg+0x340>
 8015fe0:	18a3      	adds	r3, r4, r2
 8015fe2:	f102 0c01 	add.w	ip, r2, #1
 8015fe6:	49af      	ldr	r1, [pc, #700]	@ (80162a4 <uxr_read_framed_msg+0x374>)
 8015fe8:	7898      	ldrb	r0, [r3, #2]
 8015fea:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8015fee:	fba1 8303 	umull	r8, r3, r1, r3
 8015ff2:	089b      	lsrs	r3, r3, #2
 8015ff4:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8015ff8:	fb08 c313 	mls	r3, r8, r3, ip
 8015ffc:	287d      	cmp	r0, #125	@ 0x7d
 8015ffe:	fa5f fc83 	uxtb.w	ip, r3
 8016002:	f000 8194 	beq.w	801632e <uxr_read_framed_msg+0x3fe>
 8016006:	287e      	cmp	r0, #126	@ 0x7e
 8016008:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801600c:	f000 8200 	beq.w	8016410 <uxr_read_framed_msg+0x4e0>
 8016010:	2307      	movs	r3, #7
 8016012:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8016014:	7023      	strb	r3, [r4, #0]
 8016016:	e7a0      	b.n	8015f5a <uxr_read_framed_msg+0x2a>
 8016018:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801601a:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 801601c:	429f      	cmp	r7, r3
 801601e:	f240 8164 	bls.w	80162ea <uxr_read_framed_msg+0x3ba>
 8016022:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 80162a4 <uxr_read_framed_msg+0x374>
 8016026:	f8cd a00c 	str.w	sl, [sp, #12]
 801602a:	212a      	movs	r1, #42	@ 0x2a
 801602c:	e01f      	b.n	801606e <uxr_read_framed_msg+0x13e>
 801602e:	f89a e002 	ldrb.w	lr, [sl, #2]
 8016032:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 8016036:	f000 80ea 	beq.w	801620e <uxr_read_framed_msg+0x2de>
 801603a:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801603e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016042:	f000 8142 	beq.w	80162ca <uxr_read_framed_msg+0x39a>
 8016046:	f805 e003 	strb.w	lr, [r5, r3]
 801604a:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 801604c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801604e:	4f96      	ldr	r7, [pc, #600]	@ (80162a8 <uxr_read_framed_msg+0x378>)
 8016050:	ea80 020e 	eor.w	r2, r0, lr
 8016054:	b2d2      	uxtb	r2, r2
 8016056:	3301      	adds	r3, #1
 8016058:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801605c:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 801605e:	b29b      	uxth	r3, r3
 8016060:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8016064:	42bb      	cmp	r3, r7
 8016066:	8663      	strh	r3, [r4, #50]	@ 0x32
 8016068:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801606a:	f080 80e7 	bcs.w	801623c <uxr_read_framed_msg+0x30c>
 801606e:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8016072:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 8016076:	f100 0c01 	add.w	ip, r0, #1
 801607a:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 801607e:	fba9 e20e 	umull	lr, r2, r9, lr
 8016082:	0892      	lsrs	r2, r2, #2
 8016084:	fb01 c212 	mls	r2, r1, r2, ip
 8016088:	4580      	cmp	r8, r0
 801608a:	eb04 0a00 	add.w	sl, r4, r0
 801608e:	fa5f fc82 	uxtb.w	ip, r2
 8016092:	d1cc      	bne.n	801602e <uxr_read_framed_msg+0xfe>
 8016094:	42bb      	cmp	r3, r7
 8016096:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801609a:	f040 8128 	bne.w	80162ee <uxr_read_framed_msg+0x3be>
 801609e:	2306      	movs	r3, #6
 80160a0:	7023      	strb	r3, [r4, #0]
 80160a2:	e75a      	b.n	8015f5a <uxr_read_framed_msg+0x2a>
 80160a4:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 80160a8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80160ac:	4297      	cmp	r7, r2
 80160ae:	f000 80cf 	beq.w	8016250 <uxr_read_framed_msg+0x320>
 80160b2:	18a3      	adds	r3, r4, r2
 80160b4:	f102 0c01 	add.w	ip, r2, #1
 80160b8:	497a      	ldr	r1, [pc, #488]	@ (80162a4 <uxr_read_framed_msg+0x374>)
 80160ba:	7898      	ldrb	r0, [r3, #2]
 80160bc:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80160c0:	fba1 8303 	umull	r8, r3, r1, r3
 80160c4:	089b      	lsrs	r3, r3, #2
 80160c6:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 80160ca:	fb08 c313 	mls	r3, r8, r3, ip
 80160ce:	287d      	cmp	r0, #125	@ 0x7d
 80160d0:	fa5f fc83 	uxtb.w	ip, r3
 80160d4:	f000 813d 	beq.w	8016352 <uxr_read_framed_msg+0x422>
 80160d8:	287e      	cmp	r0, #126	@ 0x7e
 80160da:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80160de:	f000 8188 	beq.w	80163f2 <uxr_read_framed_msg+0x4c2>
 80160e2:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80160e4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80160e6:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 80160ea:	b29b      	uxth	r3, r3
 80160ec:	2200      	movs	r2, #0
 80160ee:	428b      	cmp	r3, r1
 80160f0:	8623      	strh	r3, [r4, #48]	@ 0x30
 80160f2:	8662      	strh	r2, [r4, #50]	@ 0x32
 80160f4:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80160f6:	f240 80f5 	bls.w	80162e4 <uxr_read_framed_msg+0x3b4>
 80160fa:	7022      	strb	r2, [r4, #0]
 80160fc:	e765      	b.n	8015fca <uxr_read_framed_msg+0x9a>
 80160fe:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8016102:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016106:	4297      	cmp	r7, r2
 8016108:	f000 80b2 	beq.w	8016270 <uxr_read_framed_msg+0x340>
 801610c:	18a3      	adds	r3, r4, r2
 801610e:	f102 0c01 	add.w	ip, r2, #1
 8016112:	4964      	ldr	r1, [pc, #400]	@ (80162a4 <uxr_read_framed_msg+0x374>)
 8016114:	7898      	ldrb	r0, [r3, #2]
 8016116:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801611a:	fba1 8303 	umull	r8, r3, r1, r3
 801611e:	089b      	lsrs	r3, r3, #2
 8016120:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8016124:	fb08 c313 	mls	r3, r8, r3, ip
 8016128:	287d      	cmp	r0, #125	@ 0x7d
 801612a:	fa5f fc83 	uxtb.w	ip, r3
 801612e:	f000 813b 	beq.w	80163a8 <uxr_read_framed_msg+0x478>
 8016132:	287e      	cmp	r0, #126	@ 0x7e
 8016134:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016138:	f000 816a 	beq.w	8016410 <uxr_read_framed_msg+0x4e0>
 801613c:	2304      	movs	r3, #4
 801613e:	8620      	strh	r0, [r4, #48]	@ 0x30
 8016140:	7023      	strb	r3, [r4, #0]
 8016142:	e70a      	b.n	8015f5a <uxr_read_framed_msg+0x2a>
 8016144:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8016148:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801614c:	4297      	cmp	r7, r2
 801614e:	f000 80c4 	beq.w	80162da <uxr_read_framed_msg+0x3aa>
 8016152:	18a3      	adds	r3, r4, r2
 8016154:	f102 0c01 	add.w	ip, r2, #1
 8016158:	4952      	ldr	r1, [pc, #328]	@ (80162a4 <uxr_read_framed_msg+0x374>)
 801615a:	7898      	ldrb	r0, [r3, #2]
 801615c:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8016160:	fba1 8303 	umull	r8, r3, r1, r3
 8016164:	089b      	lsrs	r3, r3, #2
 8016166:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801616a:	fb08 c313 	mls	r3, r8, r3, ip
 801616e:	287d      	cmp	r0, #125	@ 0x7d
 8016170:	fa5f fc83 	uxtb.w	ip, r3
 8016174:	f000 812b 	beq.w	80163ce <uxr_read_framed_msg+0x49e>
 8016178:	287e      	cmp	r0, #126	@ 0x7e
 801617a:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801617e:	f000 8155 	beq.w	801642c <uxr_read_framed_msg+0x4fc>
 8016182:	7863      	ldrb	r3, [r4, #1]
 8016184:	4283      	cmp	r3, r0
 8016186:	bf0c      	ite	eq
 8016188:	2303      	moveq	r3, #3
 801618a:	2300      	movne	r3, #0
 801618c:	7023      	strb	r3, [r4, #0]
 801618e:	e6e4      	b.n	8015f5a <uxr_read_framed_msg+0x2a>
 8016190:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016194:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016198:	2300      	movs	r3, #0
 801619a:	4290      	cmp	r0, r2
 801619c:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 80161a0:	d06b      	beq.n	801627a <uxr_read_framed_msg+0x34a>
 80161a2:	18a3      	adds	r3, r4, r2
 80161a4:	f102 0c01 	add.w	ip, r2, #1
 80161a8:	493e      	ldr	r1, [pc, #248]	@ (80162a4 <uxr_read_framed_msg+0x374>)
 80161aa:	789f      	ldrb	r7, [r3, #2]
 80161ac:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80161b0:	fba1 8303 	umull	r8, r3, r1, r3
 80161b4:	089b      	lsrs	r3, r3, #2
 80161b6:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 80161ba:	fb08 c313 	mls	r3, r8, r3, ip
 80161be:	2f7d      	cmp	r7, #125	@ 0x7d
 80161c0:	fa5f fc83 	uxtb.w	ip, r3
 80161c4:	f000 80d8 	beq.w	8016378 <uxr_read_framed_msg+0x448>
 80161c8:	2f7e      	cmp	r7, #126	@ 0x7e
 80161ca:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80161ce:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 80161d2:	d052      	beq.n	801627a <uxr_read_framed_msg+0x34a>
 80161d4:	2302      	movs	r3, #2
 80161d6:	7023      	strb	r3, [r4, #0]
 80161d8:	e6bf      	b.n	8015f5a <uxr_read_framed_msg+0x2a>
 80161da:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 80161de:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80161e2:	4930      	ldr	r1, [pc, #192]	@ (80162a4 <uxr_read_framed_msg+0x374>)
 80161e4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80161e8:	e004      	b.n	80161f4 <uxr_read_framed_msg+0x2c4>
 80161ea:	78bb      	ldrb	r3, [r7, #2]
 80161ec:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80161f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80161f2:	d02a      	beq.n	801624a <uxr_read_framed_msg+0x31a>
 80161f4:	1c50      	adds	r0, r2, #1
 80161f6:	0843      	lsrs	r3, r0, #1
 80161f8:	fba1 e303 	umull	lr, r3, r1, r3
 80161fc:	089b      	lsrs	r3, r3, #2
 80161fe:	fb0c 0013 	mls	r0, ip, r3, r0
 8016202:	4590      	cmp	r8, r2
 8016204:	eb04 0702 	add.w	r7, r4, r2
 8016208:	b2c2      	uxtb	r2, r0
 801620a:	d1ee      	bne.n	80161ea <uxr_read_framed_msg+0x2ba>
 801620c:	e6dd      	b.n	8015fca <uxr_read_framed_msg+0x9a>
 801620e:	3002      	adds	r0, #2
 8016210:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8016214:	eb04 0a02 	add.w	sl, r4, r2
 8016218:	fba9 e20e 	umull	lr, r2, r9, lr
 801621c:	0892      	lsrs	r2, r2, #2
 801621e:	45e0      	cmp	r8, ip
 8016220:	fb01 0012 	mls	r0, r1, r2, r0
 8016224:	f43f af36 	beq.w	8016094 <uxr_read_framed_msg+0x164>
 8016228:	f89a e002 	ldrb.w	lr, [sl, #2]
 801622c:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8016230:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8016234:	d049      	beq.n	80162ca <uxr_read_framed_msg+0x39a>
 8016236:	f08e 0e20 	eor.w	lr, lr, #32
 801623a:	e704      	b.n	8016046 <uxr_read_framed_msg+0x116>
 801623c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8016240:	f43f af2d 	beq.w	801609e <uxr_read_framed_msg+0x16e>
 8016244:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8016248:	d151      	bne.n	80162ee <uxr_read_framed_msg+0x3be>
 801624a:	2301      	movs	r3, #1
 801624c:	7023      	strb	r3, [r4, #0]
 801624e:	e684      	b.n	8015f5a <uxr_read_framed_msg+0x2a>
 8016250:	4651      	mov	r1, sl
 8016252:	f8cd b000 	str.w	fp, [sp]
 8016256:	2301      	movs	r3, #1
 8016258:	9301      	str	r3, [sp, #4]
 801625a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801625c:	9103      	str	r1, [sp, #12]
 801625e:	4632      	mov	r2, r6
 8016260:	4620      	mov	r0, r4
 8016262:	f7ff fde1 	bl	8015e28 <uxr_framing_read_transport>
 8016266:	fab0 f080 	clz	r0, r0
 801626a:	9903      	ldr	r1, [sp, #12]
 801626c:	0940      	lsrs	r0, r0, #5
 801626e:	e671      	b.n	8015f54 <uxr_read_framed_msg+0x24>
 8016270:	4651      	mov	r1, sl
 8016272:	f8cd b000 	str.w	fp, [sp]
 8016276:	2302      	movs	r3, #2
 8016278:	e7ee      	b.n	8016258 <uxr_read_framed_msg+0x328>
 801627a:	2304      	movs	r3, #4
 801627c:	9301      	str	r3, [sp, #4]
 801627e:	f8cd b000 	str.w	fp, [sp]
 8016282:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016284:	4632      	mov	r2, r6
 8016286:	4651      	mov	r1, sl
 8016288:	4620      	mov	r0, r4
 801628a:	f7ff fdcd 	bl	8015e28 <uxr_framing_read_transport>
 801628e:	2800      	cmp	r0, #0
 8016290:	f47f ae63 	bne.w	8015f5a <uxr_read_framed_msg+0x2a>
 8016294:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 8016298:	387e      	subs	r0, #126	@ 0x7e
 801629a:	4651      	mov	r1, sl
 801629c:	bf18      	it	ne
 801629e:	2001      	movne	r0, #1
 80162a0:	e658      	b.n	8015f54 <uxr_read_framed_msg+0x24>
 80162a2:	bf00      	nop
 80162a4:	30c30c31 	.word	0x30c30c31
 80162a8:	0801a2b0 	.word	0x0801a2b0
 80162ac:	2305      	movs	r3, #5
 80162ae:	9301      	str	r3, [sp, #4]
 80162b0:	f8cd b000 	str.w	fp, [sp]
 80162b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80162b6:	f7ff fdb7 	bl	8015e28 <uxr_framing_read_transport>
 80162ba:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80162be:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80162c2:	429a      	cmp	r2, r3
 80162c4:	f43f ae81 	beq.w	8015fca <uxr_read_framed_msg+0x9a>
 80162c8:	e642      	b.n	8015f50 <uxr_read_framed_msg+0x20>
 80162ca:	42bb      	cmp	r3, r7
 80162cc:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80162d0:	f43f aee5 	beq.w	801609e <uxr_read_framed_msg+0x16e>
 80162d4:	2301      	movs	r3, #1
 80162d6:	7023      	strb	r3, [r4, #0]
 80162d8:	e63f      	b.n	8015f5a <uxr_read_framed_msg+0x2a>
 80162da:	4651      	mov	r1, sl
 80162dc:	f8cd b000 	str.w	fp, [sp]
 80162e0:	2303      	movs	r3, #3
 80162e2:	e7b9      	b.n	8016258 <uxr_read_framed_msg+0x328>
 80162e4:	2305      	movs	r3, #5
 80162e6:	7023      	strb	r3, [r4, #0]
 80162e8:	e637      	b.n	8015f5a <uxr_read_framed_msg+0x2a>
 80162ea:	f43f aed8 	beq.w	801609e <uxr_read_framed_msg+0x16e>
 80162ee:	1afb      	subs	r3, r7, r3
 80162f0:	3302      	adds	r3, #2
 80162f2:	e9cd b300 	strd	fp, r3, [sp]
 80162f6:	4651      	mov	r1, sl
 80162f8:	e7af      	b.n	801625a <uxr_read_framed_msg+0x32a>
 80162fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80162fc:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8016300:	7013      	strb	r3, [r2, #0]
 8016302:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8016304:	b005      	add	sp, #20
 8016306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801630a:	4287      	cmp	r7, r0
 801630c:	d0a0      	beq.n	8016250 <uxr_read_framed_msg+0x320>
 801630e:	4423      	add	r3, r4
 8016310:	3202      	adds	r2, #2
 8016312:	7898      	ldrb	r0, [r3, #2]
 8016314:	0853      	lsrs	r3, r2, #1
 8016316:	fba1 e303 	umull	lr, r3, r1, r3
 801631a:	089b      	lsrs	r3, r3, #2
 801631c:	fb08 2213 	mls	r2, r8, r3, r2
 8016320:	287e      	cmp	r0, #126	@ 0x7e
 8016322:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016326:	d064      	beq.n	80163f2 <uxr_read_framed_msg+0x4c2>
 8016328:	f080 0120 	eor.w	r1, r0, #32
 801632c:	e642      	b.n	8015fb4 <uxr_read_framed_msg+0x84>
 801632e:	45bc      	cmp	ip, r7
 8016330:	d09e      	beq.n	8016270 <uxr_read_framed_msg+0x340>
 8016332:	4423      	add	r3, r4
 8016334:	3202      	adds	r2, #2
 8016336:	7898      	ldrb	r0, [r3, #2]
 8016338:	0853      	lsrs	r3, r2, #1
 801633a:	fba1 e303 	umull	lr, r3, r1, r3
 801633e:	089b      	lsrs	r3, r3, #2
 8016340:	fb08 2213 	mls	r2, r8, r3, r2
 8016344:	287e      	cmp	r0, #126	@ 0x7e
 8016346:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801634a:	d061      	beq.n	8016410 <uxr_read_framed_msg+0x4e0>
 801634c:	f080 0020 	eor.w	r0, r0, #32
 8016350:	e65e      	b.n	8016010 <uxr_read_framed_msg+0xe0>
 8016352:	4567      	cmp	r7, ip
 8016354:	f43f af7c 	beq.w	8016250 <uxr_read_framed_msg+0x320>
 8016358:	4423      	add	r3, r4
 801635a:	3202      	adds	r2, #2
 801635c:	7898      	ldrb	r0, [r3, #2]
 801635e:	0853      	lsrs	r3, r2, #1
 8016360:	fba1 e303 	umull	lr, r3, r1, r3
 8016364:	089b      	lsrs	r3, r3, #2
 8016366:	fb08 2213 	mls	r2, r8, r3, r2
 801636a:	287e      	cmp	r0, #126	@ 0x7e
 801636c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016370:	d03f      	beq.n	80163f2 <uxr_read_framed_msg+0x4c2>
 8016372:	f080 0020 	eor.w	r0, r0, #32
 8016376:	e6b4      	b.n	80160e2 <uxr_read_framed_msg+0x1b2>
 8016378:	4560      	cmp	r0, ip
 801637a:	f43f af7e 	beq.w	801627a <uxr_read_framed_msg+0x34a>
 801637e:	4423      	add	r3, r4
 8016380:	3202      	adds	r2, #2
 8016382:	7898      	ldrb	r0, [r3, #2]
 8016384:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8016388:	0853      	lsrs	r3, r2, #1
 801638a:	fba1 e303 	umull	lr, r3, r1, r3
 801638e:	089b      	lsrs	r3, r3, #2
 8016390:	fb08 2213 	mls	r2, r8, r3, r2
 8016394:	287e      	cmp	r0, #126	@ 0x7e
 8016396:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801639a:	f43f af6e 	beq.w	801627a <uxr_read_framed_msg+0x34a>
 801639e:	f080 0020 	eor.w	r0, r0, #32
 80163a2:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80163a6:	e715      	b.n	80161d4 <uxr_read_framed_msg+0x2a4>
 80163a8:	4567      	cmp	r7, ip
 80163aa:	f43f af61 	beq.w	8016270 <uxr_read_framed_msg+0x340>
 80163ae:	4423      	add	r3, r4
 80163b0:	3202      	adds	r2, #2
 80163b2:	7898      	ldrb	r0, [r3, #2]
 80163b4:	0853      	lsrs	r3, r2, #1
 80163b6:	fba1 e303 	umull	lr, r3, r1, r3
 80163ba:	089b      	lsrs	r3, r3, #2
 80163bc:	fb08 2213 	mls	r2, r8, r3, r2
 80163c0:	287e      	cmp	r0, #126	@ 0x7e
 80163c2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80163c6:	d023      	beq.n	8016410 <uxr_read_framed_msg+0x4e0>
 80163c8:	f080 0020 	eor.w	r0, r0, #32
 80163cc:	e6b6      	b.n	801613c <uxr_read_framed_msg+0x20c>
 80163ce:	45bc      	cmp	ip, r7
 80163d0:	d083      	beq.n	80162da <uxr_read_framed_msg+0x3aa>
 80163d2:	4423      	add	r3, r4
 80163d4:	3202      	adds	r2, #2
 80163d6:	7898      	ldrb	r0, [r3, #2]
 80163d8:	0853      	lsrs	r3, r2, #1
 80163da:	fba1 e303 	umull	lr, r3, r1, r3
 80163de:	089b      	lsrs	r3, r3, #2
 80163e0:	fb08 2213 	mls	r2, r8, r3, r2
 80163e4:	287e      	cmp	r0, #126	@ 0x7e
 80163e6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80163ea:	d01f      	beq.n	801642c <uxr_read_framed_msg+0x4fc>
 80163ec:	f080 0020 	eor.w	r0, r0, #32
 80163f0:	e6c7      	b.n	8016182 <uxr_read_framed_msg+0x252>
 80163f2:	2701      	movs	r7, #1
 80163f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80163f6:	f8cd b000 	str.w	fp, [sp]
 80163fa:	9701      	str	r7, [sp, #4]
 80163fc:	4632      	mov	r2, r6
 80163fe:	4651      	mov	r1, sl
 8016400:	4620      	mov	r0, r4
 8016402:	f7ff fd11 	bl	8015e28 <uxr_framing_read_transport>
 8016406:	2800      	cmp	r0, #0
 8016408:	f47f ada7 	bne.w	8015f5a <uxr_read_framed_msg+0x2a>
 801640c:	7027      	strb	r7, [r4, #0]
 801640e:	e5a4      	b.n	8015f5a <uxr_read_framed_msg+0x2a>
 8016410:	f8cd b000 	str.w	fp, [sp]
 8016414:	2302      	movs	r3, #2
 8016416:	9301      	str	r3, [sp, #4]
 8016418:	4632      	mov	r2, r6
 801641a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801641c:	4651      	mov	r1, sl
 801641e:	4620      	mov	r0, r4
 8016420:	f7ff fd02 	bl	8015e28 <uxr_framing_read_transport>
 8016424:	2800      	cmp	r0, #0
 8016426:	f47f ad98 	bne.w	8015f5a <uxr_read_framed_msg+0x2a>
 801642a:	e70e      	b.n	801624a <uxr_read_framed_msg+0x31a>
 801642c:	f8cd b000 	str.w	fp, [sp]
 8016430:	2303      	movs	r3, #3
 8016432:	e7f0      	b.n	8016416 <uxr_read_framed_msg+0x4e6>

08016434 <rcl_get_automatic_discovery_range>:
 8016434:	b530      	push	{r4, r5, lr}
 8016436:	b083      	sub	sp, #12
 8016438:	2300      	movs	r3, #0
 801643a:	9301      	str	r3, [sp, #4]
 801643c:	b1c0      	cbz	r0, 8016470 <rcl_get_automatic_discovery_range+0x3c>
 801643e:	4604      	mov	r4, r0
 8016440:	a901      	add	r1, sp, #4
 8016442:	4818      	ldr	r0, [pc, #96]	@ (80164a4 <rcl_get_automatic_discovery_range+0x70>)
 8016444:	f7fb ff86 	bl	8012354 <rcutils_get_env>
 8016448:	b110      	cbz	r0, 8016450 <rcl_get_automatic_discovery_range+0x1c>
 801644a:	2001      	movs	r0, #1
 801644c:	b003      	add	sp, #12
 801644e:	bd30      	pop	{r4, r5, pc}
 8016450:	9d01      	ldr	r5, [sp, #4]
 8016452:	782b      	ldrb	r3, [r5, #0]
 8016454:	b923      	cbnz	r3, 8016460 <rcl_get_automatic_discovery_range+0x2c>
 8016456:	2303      	movs	r3, #3
 8016458:	7023      	strb	r3, [r4, #0]
 801645a:	2000      	movs	r0, #0
 801645c:	b003      	add	sp, #12
 801645e:	bd30      	pop	{r4, r5, pc}
 8016460:	4911      	ldr	r1, [pc, #68]	@ (80164a8 <rcl_get_automatic_discovery_range+0x74>)
 8016462:	4628      	mov	r0, r5
 8016464:	f7e9 febc 	bl	80001e0 <strcmp>
 8016468:	b928      	cbnz	r0, 8016476 <rcl_get_automatic_discovery_range+0x42>
 801646a:	2301      	movs	r3, #1
 801646c:	7023      	strb	r3, [r4, #0]
 801646e:	e7f4      	b.n	801645a <rcl_get_automatic_discovery_range+0x26>
 8016470:	200b      	movs	r0, #11
 8016472:	b003      	add	sp, #12
 8016474:	bd30      	pop	{r4, r5, pc}
 8016476:	490d      	ldr	r1, [pc, #52]	@ (80164ac <rcl_get_automatic_discovery_range+0x78>)
 8016478:	4628      	mov	r0, r5
 801647a:	f7e9 feb1 	bl	80001e0 <strcmp>
 801647e:	b168      	cbz	r0, 801649c <rcl_get_automatic_discovery_range+0x68>
 8016480:	490b      	ldr	r1, [pc, #44]	@ (80164b0 <rcl_get_automatic_discovery_range+0x7c>)
 8016482:	4628      	mov	r0, r5
 8016484:	f7e9 feac 	bl	80001e0 <strcmp>
 8016488:	2800      	cmp	r0, #0
 801648a:	d0e4      	beq.n	8016456 <rcl_get_automatic_discovery_range+0x22>
 801648c:	4909      	ldr	r1, [pc, #36]	@ (80164b4 <rcl_get_automatic_discovery_range+0x80>)
 801648e:	4628      	mov	r0, r5
 8016490:	f7e9 fea6 	bl	80001e0 <strcmp>
 8016494:	b910      	cbnz	r0, 801649c <rcl_get_automatic_discovery_range+0x68>
 8016496:	2304      	movs	r3, #4
 8016498:	7023      	strb	r3, [r4, #0]
 801649a:	e7de      	b.n	801645a <rcl_get_automatic_discovery_range+0x26>
 801649c:	2302      	movs	r3, #2
 801649e:	7023      	strb	r3, [r4, #0]
 80164a0:	e7db      	b.n	801645a <rcl_get_automatic_discovery_range+0x26>
 80164a2:	bf00      	nop
 80164a4:	080196f8 	.word	0x080196f8
 80164a8:	08019718 	.word	0x08019718
 80164ac:	0801971c 	.word	0x0801971c
 80164b0:	08019728 	.word	0x08019728
 80164b4:	08019730 	.word	0x08019730

080164b8 <rcl_automatic_discovery_range_to_string>:
 80164b8:	2804      	cmp	r0, #4
 80164ba:	bf9a      	itte	ls
 80164bc:	4b02      	ldrls	r3, [pc, #8]	@ (80164c8 <rcl_automatic_discovery_range_to_string+0x10>)
 80164be:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80164c2:	2000      	movhi	r0, #0
 80164c4:	4770      	bx	lr
 80164c6:	bf00      	nop
 80164c8:	0801a4b0 	.word	0x0801a4b0

080164cc <rcl_get_discovery_static_peers>:
 80164cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164d0:	b08c      	sub	sp, #48	@ 0x30
 80164d2:	2300      	movs	r3, #0
 80164d4:	9304      	str	r3, [sp, #16]
 80164d6:	2800      	cmp	r0, #0
 80164d8:	d04e      	beq.n	8016578 <rcl_get_discovery_static_peers+0xac>
 80164da:	460d      	mov	r5, r1
 80164dc:	2900      	cmp	r1, #0
 80164de:	d04b      	beq.n	8016578 <rcl_get_discovery_static_peers+0xac>
 80164e0:	4604      	mov	r4, r0
 80164e2:	a904      	add	r1, sp, #16
 80164e4:	482d      	ldr	r0, [pc, #180]	@ (801659c <rcl_get_discovery_static_peers+0xd0>)
 80164e6:	f7fb ff35 	bl	8012354 <rcutils_get_env>
 80164ea:	b118      	cbz	r0, 80164f4 <rcl_get_discovery_static_peers+0x28>
 80164ec:	2001      	movs	r0, #1
 80164ee:	b00c      	add	sp, #48	@ 0x30
 80164f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164f4:	9b04      	ldr	r3, [sp, #16]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d0f8      	beq.n	80164ec <rcl_get_discovery_static_peers+0x20>
 80164fa:	af05      	add	r7, sp, #20
 80164fc:	4638      	mov	r0, r7
 80164fe:	f000 fc7f 	bl	8016e00 <rcutils_get_zero_initialized_string_array>
 8016502:	f105 0308 	add.w	r3, r5, #8
 8016506:	9703      	str	r7, [sp, #12]
 8016508:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801650c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016510:	9804      	ldr	r0, [sp, #16]
 8016512:	e895 000c 	ldmia.w	r5, {r2, r3}
 8016516:	213b      	movs	r1, #59	@ 0x3b
 8016518:	f000 fbc2 	bl	8016ca0 <rcutils_split>
 801651c:	2800      	cmp	r0, #0
 801651e:	d1e5      	bne.n	80164ec <rcl_get_discovery_static_peers+0x20>
 8016520:	9905      	ldr	r1, [sp, #20]
 8016522:	462a      	mov	r2, r5
 8016524:	4620      	mov	r0, r4
 8016526:	f000 fcc3 	bl	8016eb0 <rmw_discovery_options_init>
 801652a:	4606      	mov	r6, r0
 801652c:	bb90      	cbnz	r0, 8016594 <rcl_get_discovery_static_peers+0xc8>
 801652e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8016532:	f1b9 0f00 	cmp.w	r9, #0
 8016536:	d026      	beq.n	8016586 <rcl_get_discovery_static_peers+0xba>
 8016538:	f8dd a018 	ldr.w	sl, [sp, #24]
 801653c:	4680      	mov	r8, r0
 801653e:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 8016542:	4628      	mov	r0, r5
 8016544:	f7e9 feac 	bl	80002a0 <strlen>
 8016548:	28ff      	cmp	r0, #255	@ 0xff
 801654a:	4629      	mov	r1, r5
 801654c:	ea4f 2506 	mov.w	r5, r6, lsl #8
 8016550:	d816      	bhi.n	8016580 <rcl_get_discovery_static_peers+0xb4>
 8016552:	6860      	ldr	r0, [r4, #4]
 8016554:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016558:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 801655c:	f001 fc8b 	bl	8017e76 <strncpy>
 8016560:	6863      	ldr	r3, [r4, #4]
 8016562:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8016566:	3601      	adds	r6, #1
 8016568:	442b      	add	r3, r5
 801656a:	454e      	cmp	r6, r9
 801656c:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 8016570:	d209      	bcs.n	8016586 <rcl_get_discovery_static_peers+0xba>
 8016572:	f8dd a018 	ldr.w	sl, [sp, #24]
 8016576:	e7e2      	b.n	801653e <rcl_get_discovery_static_peers+0x72>
 8016578:	200b      	movs	r0, #11
 801657a:	b00c      	add	sp, #48	@ 0x30
 801657c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016580:	3601      	adds	r6, #1
 8016582:	454e      	cmp	r6, r9
 8016584:	d3db      	bcc.n	801653e <rcl_get_discovery_static_peers+0x72>
 8016586:	4638      	mov	r0, r7
 8016588:	f000 fc6c 	bl	8016e64 <rcutils_string_array_fini>
 801658c:	3800      	subs	r0, #0
 801658e:	bf18      	it	ne
 8016590:	2001      	movne	r0, #1
 8016592:	e7ac      	b.n	80164ee <rcl_get_discovery_static_peers+0x22>
 8016594:	f7f8 ff66 	bl	800f464 <rcl_convert_rmw_ret_to_rcl_ret>
 8016598:	e7a9      	b.n	80164ee <rcl_get_discovery_static_peers+0x22>
 801659a:	bf00      	nop
 801659c:	08019740 	.word	0x08019740

080165a0 <rcl_get_default_domain_id>:
 80165a0:	b530      	push	{r4, r5, lr}
 80165a2:	b083      	sub	sp, #12
 80165a4:	2300      	movs	r3, #0
 80165a6:	9300      	str	r3, [sp, #0]
 80165a8:	b1f0      	cbz	r0, 80165e8 <rcl_get_default_domain_id+0x48>
 80165aa:	4604      	mov	r4, r0
 80165ac:	4669      	mov	r1, sp
 80165ae:	4812      	ldr	r0, [pc, #72]	@ (80165f8 <rcl_get_default_domain_id+0x58>)
 80165b0:	f7fb fed0 	bl	8012354 <rcutils_get_env>
 80165b4:	4602      	mov	r2, r0
 80165b6:	b108      	cbz	r0, 80165bc <rcl_get_default_domain_id+0x1c>
 80165b8:	2001      	movs	r0, #1
 80165ba:	e004      	b.n	80165c6 <rcl_get_default_domain_id+0x26>
 80165bc:	9800      	ldr	r0, [sp, #0]
 80165be:	b108      	cbz	r0, 80165c4 <rcl_get_default_domain_id+0x24>
 80165c0:	7803      	ldrb	r3, [r0, #0]
 80165c2:	b913      	cbnz	r3, 80165ca <rcl_get_default_domain_id+0x2a>
 80165c4:	2000      	movs	r0, #0
 80165c6:	b003      	add	sp, #12
 80165c8:	bd30      	pop	{r4, r5, pc}
 80165ca:	a901      	add	r1, sp, #4
 80165cc:	9201      	str	r2, [sp, #4]
 80165ce:	f001 f921 	bl	8017814 <strtoul>
 80165d2:	4605      	mov	r5, r0
 80165d4:	b158      	cbz	r0, 80165ee <rcl_get_default_domain_id+0x4e>
 80165d6:	1c43      	adds	r3, r0, #1
 80165d8:	d104      	bne.n	80165e4 <rcl_get_default_domain_id+0x44>
 80165da:	f001 fccb 	bl	8017f74 <__errno>
 80165de:	6803      	ldr	r3, [r0, #0]
 80165e0:	2b22      	cmp	r3, #34	@ 0x22
 80165e2:	d0e9      	beq.n	80165b8 <rcl_get_default_domain_id+0x18>
 80165e4:	6025      	str	r5, [r4, #0]
 80165e6:	e7ed      	b.n	80165c4 <rcl_get_default_domain_id+0x24>
 80165e8:	200b      	movs	r0, #11
 80165ea:	b003      	add	sp, #12
 80165ec:	bd30      	pop	{r4, r5, pc}
 80165ee:	9b01      	ldr	r3, [sp, #4]
 80165f0:	781b      	ldrb	r3, [r3, #0]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d0f6      	beq.n	80165e4 <rcl_get_default_domain_id+0x44>
 80165f6:	e7df      	b.n	80165b8 <rcl_get_default_domain_id+0x18>
 80165f8:	08019820 	.word	0x08019820

080165fc <rcl_expand_topic_name>:
 80165fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016600:	b08b      	sub	sp, #44	@ 0x2c
 8016602:	9306      	str	r3, [sp, #24]
 8016604:	2800      	cmp	r0, #0
 8016606:	f000 80ad 	beq.w	8016764 <rcl_expand_topic_name+0x168>
 801660a:	460e      	mov	r6, r1
 801660c:	2900      	cmp	r1, #0
 801660e:	f000 80a9 	beq.w	8016764 <rcl_expand_topic_name+0x168>
 8016612:	4617      	mov	r7, r2
 8016614:	2a00      	cmp	r2, #0
 8016616:	f000 80a5 	beq.w	8016764 <rcl_expand_topic_name+0x168>
 801661a:	2b00      	cmp	r3, #0
 801661c:	f000 80a2 	beq.w	8016764 <rcl_expand_topic_name+0x168>
 8016620:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016622:	2b00      	cmp	r3, #0
 8016624:	f000 809e 	beq.w	8016764 <rcl_expand_topic_name+0x168>
 8016628:	2200      	movs	r2, #0
 801662a:	a909      	add	r1, sp, #36	@ 0x24
 801662c:	4680      	mov	r8, r0
 801662e:	f000 fa45 	bl	8016abc <rcl_validate_topic_name>
 8016632:	4605      	mov	r5, r0
 8016634:	2800      	cmp	r0, #0
 8016636:	f040 8096 	bne.w	8016766 <rcl_expand_topic_name+0x16a>
 801663a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801663c:	2b00      	cmp	r3, #0
 801663e:	f040 809a 	bne.w	8016776 <rcl_expand_topic_name+0x17a>
 8016642:	4602      	mov	r2, r0
 8016644:	a909      	add	r1, sp, #36	@ 0x24
 8016646:	4630      	mov	r0, r6
 8016648:	f7fc fadc 	bl	8012c04 <rmw_validate_node_name>
 801664c:	2800      	cmp	r0, #0
 801664e:	f040 808e 	bne.w	801676e <rcl_expand_topic_name+0x172>
 8016652:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016654:	2a00      	cmp	r2, #0
 8016656:	f040 8093 	bne.w	8016780 <rcl_expand_topic_name+0x184>
 801665a:	a909      	add	r1, sp, #36	@ 0x24
 801665c:	4638      	mov	r0, r7
 801665e:	f7fc fab3 	bl	8012bc8 <rmw_validate_namespace>
 8016662:	2800      	cmp	r0, #0
 8016664:	f040 8083 	bne.w	801676e <rcl_expand_topic_name+0x172>
 8016668:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801666a:	2d00      	cmp	r5, #0
 801666c:	f040 80f5 	bne.w	801685a <rcl_expand_topic_name+0x25e>
 8016670:	217b      	movs	r1, #123	@ 0x7b
 8016672:	4640      	mov	r0, r8
 8016674:	f001 fbe0 	bl	8017e38 <strchr>
 8016678:	f898 3000 	ldrb.w	r3, [r8]
 801667c:	2b2f      	cmp	r3, #47	@ 0x2f
 801667e:	4604      	mov	r4, r0
 8016680:	f000 809f 	beq.w	80167c2 <rcl_expand_topic_name+0x1c6>
 8016684:	2b7e      	cmp	r3, #126	@ 0x7e
 8016686:	f040 80ea 	bne.w	801685e <rcl_expand_topic_name+0x262>
 801668a:	4638      	mov	r0, r7
 801668c:	f7e9 fe08 	bl	80002a0 <strlen>
 8016690:	4a86      	ldr	r2, [pc, #536]	@ (80168ac <rcl_expand_topic_name+0x2b0>)
 8016692:	4b87      	ldr	r3, [pc, #540]	@ (80168b0 <rcl_expand_topic_name+0x2b4>)
 8016694:	2801      	cmp	r0, #1
 8016696:	bf08      	it	eq
 8016698:	4613      	moveq	r3, r2
 801669a:	9302      	str	r3, [sp, #8]
 801669c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801669e:	9300      	str	r3, [sp, #0]
 80166a0:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80166a4:	f108 0301 	add.w	r3, r8, #1
 80166a8:	9305      	str	r3, [sp, #20]
 80166aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80166ae:	9301      	str	r3, [sp, #4]
 80166b0:	ab14      	add	r3, sp, #80	@ 0x50
 80166b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80166b4:	f7fb fe66 	bl	8012384 <rcutils_format_string_limit>
 80166b8:	4682      	mov	sl, r0
 80166ba:	2800      	cmp	r0, #0
 80166bc:	f000 80e1 	beq.w	8016882 <rcl_expand_topic_name+0x286>
 80166c0:	2c00      	cmp	r4, #0
 80166c2:	f000 8085 	beq.w	80167d0 <rcl_expand_topic_name+0x1d4>
 80166c6:	217b      	movs	r1, #123	@ 0x7b
 80166c8:	f001 fbb6 	bl	8017e38 <strchr>
 80166cc:	46d1      	mov	r9, sl
 80166ce:	4604      	mov	r4, r0
 80166d0:	9507      	str	r5, [sp, #28]
 80166d2:	464d      	mov	r5, r9
 80166d4:	2c00      	cmp	r4, #0
 80166d6:	f000 80a1 	beq.w	801681c <rcl_expand_topic_name+0x220>
 80166da:	217d      	movs	r1, #125	@ 0x7d
 80166dc:	4628      	mov	r0, r5
 80166de:	f001 fbab 	bl	8017e38 <strchr>
 80166e2:	eba0 0904 	sub.w	r9, r0, r4
 80166e6:	f109 0b01 	add.w	fp, r9, #1
 80166ea:	4872      	ldr	r0, [pc, #456]	@ (80168b4 <rcl_expand_topic_name+0x2b8>)
 80166ec:	465a      	mov	r2, fp
 80166ee:	4621      	mov	r1, r4
 80166f0:	f001 fbaf 	bl	8017e52 <strncmp>
 80166f4:	2800      	cmp	r0, #0
 80166f6:	d069      	beq.n	80167cc <rcl_expand_topic_name+0x1d0>
 80166f8:	486f      	ldr	r0, [pc, #444]	@ (80168b8 <rcl_expand_topic_name+0x2bc>)
 80166fa:	465a      	mov	r2, fp
 80166fc:	4621      	mov	r1, r4
 80166fe:	f001 fba8 	bl	8017e52 <strncmp>
 8016702:	b130      	cbz	r0, 8016712 <rcl_expand_topic_name+0x116>
 8016704:	486d      	ldr	r0, [pc, #436]	@ (80168bc <rcl_expand_topic_name+0x2c0>)
 8016706:	465a      	mov	r2, fp
 8016708:	4621      	mov	r1, r4
 801670a:	f001 fba2 	bl	8017e52 <strncmp>
 801670e:	2800      	cmp	r0, #0
 8016710:	d138      	bne.n	8016784 <rcl_expand_topic_name+0x188>
 8016712:	46b9      	mov	r9, r7
 8016714:	ab16      	add	r3, sp, #88	@ 0x58
 8016716:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801671a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801671e:	ab14      	add	r3, sp, #80	@ 0x50
 8016720:	4620      	mov	r0, r4
 8016722:	cb0c      	ldmia	r3, {r2, r3}
 8016724:	4659      	mov	r1, fp
 8016726:	f7fb ff81 	bl	801262c <rcutils_strndup>
 801672a:	4604      	mov	r4, r0
 801672c:	2800      	cmp	r0, #0
 801672e:	f000 8099 	beq.w	8016864 <rcl_expand_topic_name+0x268>
 8016732:	464a      	mov	r2, r9
 8016734:	4628      	mov	r0, r5
 8016736:	ab14      	add	r3, sp, #80	@ 0x50
 8016738:	4621      	mov	r1, r4
 801673a:	f7fb fe5d 	bl	80123f8 <rcutils_repl_str>
 801673e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016740:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016742:	4605      	mov	r5, r0
 8016744:	4620      	mov	r0, r4
 8016746:	4798      	blx	r3
 8016748:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801674a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801674c:	4650      	mov	r0, sl
 801674e:	4798      	blx	r3
 8016750:	2d00      	cmp	r5, #0
 8016752:	f000 8091 	beq.w	8016878 <rcl_expand_topic_name+0x27c>
 8016756:	217b      	movs	r1, #123	@ 0x7b
 8016758:	4628      	mov	r0, r5
 801675a:	f001 fb6d 	bl	8017e38 <strchr>
 801675e:	46aa      	mov	sl, r5
 8016760:	4604      	mov	r4, r0
 8016762:	e7b7      	b.n	80166d4 <rcl_expand_topic_name+0xd8>
 8016764:	250b      	movs	r5, #11
 8016766:	4628      	mov	r0, r5
 8016768:	b00b      	add	sp, #44	@ 0x2c
 801676a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801676e:	f7f8 fe79 	bl	800f464 <rcl_convert_rmw_ret_to_rcl_ret>
 8016772:	4605      	mov	r5, r0
 8016774:	e7f7      	b.n	8016766 <rcl_expand_topic_name+0x16a>
 8016776:	2567      	movs	r5, #103	@ 0x67
 8016778:	4628      	mov	r0, r5
 801677a:	b00b      	add	sp, #44	@ 0x2c
 801677c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016780:	25c9      	movs	r5, #201	@ 0xc9
 8016782:	e7f0      	b.n	8016766 <rcl_expand_topic_name+0x16a>
 8016784:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8016788:	9806      	ldr	r0, [sp, #24]
 801678a:	1c61      	adds	r1, r4, #1
 801678c:	f7fc f86a 	bl	8012864 <rcutils_string_map_getn>
 8016790:	4681      	mov	r9, r0
 8016792:	2800      	cmp	r0, #0
 8016794:	d1be      	bne.n	8016714 <rcl_expand_topic_name+0x118>
 8016796:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016798:	ab16      	add	r3, sp, #88	@ 0x58
 801679a:	6010      	str	r0, [r2, #0]
 801679c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80167a0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80167a4:	ab14      	add	r3, sp, #80	@ 0x50
 80167a6:	cb0c      	ldmia	r3, {r2, r3}
 80167a8:	4659      	mov	r1, fp
 80167aa:	4620      	mov	r0, r4
 80167ac:	f7fb ff3e 	bl	801262c <rcutils_strndup>
 80167b0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80167b2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80167b4:	4798      	blx	r3
 80167b6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80167b8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80167ba:	4650      	mov	r0, sl
 80167bc:	4798      	blx	r3
 80167be:	2569      	movs	r5, #105	@ 0x69
 80167c0:	e7d1      	b.n	8016766 <rcl_expand_topic_name+0x16a>
 80167c2:	2800      	cmp	r0, #0
 80167c4:	d061      	beq.n	801688a <rcl_expand_topic_name+0x28e>
 80167c6:	46c1      	mov	r9, r8
 80167c8:	46aa      	mov	sl, r5
 80167ca:	e781      	b.n	80166d0 <rcl_expand_topic_name+0xd4>
 80167cc:	46b1      	mov	r9, r6
 80167ce:	e7a1      	b.n	8016714 <rcl_expand_topic_name+0x118>
 80167d0:	f89a 3000 	ldrb.w	r3, [sl]
 80167d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80167d6:	d01d      	beq.n	8016814 <rcl_expand_topic_name+0x218>
 80167d8:	4638      	mov	r0, r7
 80167da:	f7e9 fd61 	bl	80002a0 <strlen>
 80167de:	4a38      	ldr	r2, [pc, #224]	@ (80168c0 <rcl_expand_topic_name+0x2c4>)
 80167e0:	4b38      	ldr	r3, [pc, #224]	@ (80168c4 <rcl_expand_topic_name+0x2c8>)
 80167e2:	f8cd a010 	str.w	sl, [sp, #16]
 80167e6:	2801      	cmp	r0, #1
 80167e8:	bf18      	it	ne
 80167ea:	4613      	movne	r3, r2
 80167ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80167f0:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80167f4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80167f6:	9703      	str	r7, [sp, #12]
 80167f8:	9200      	str	r2, [sp, #0]
 80167fa:	ab14      	add	r3, sp, #80	@ 0x50
 80167fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80167fe:	f7fb fdc1 	bl	8012384 <rcutils_format_string_limit>
 8016802:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016804:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016806:	4604      	mov	r4, r0
 8016808:	4650      	mov	r0, sl
 801680a:	4798      	blx	r3
 801680c:	46a2      	mov	sl, r4
 801680e:	4653      	mov	r3, sl
 8016810:	2b00      	cmp	r3, #0
 8016812:	d036      	beq.n	8016882 <rcl_expand_topic_name+0x286>
 8016814:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016816:	f8c3 a000 	str.w	sl, [r3]
 801681a:	e7a4      	b.n	8016766 <rcl_expand_topic_name+0x16a>
 801681c:	4653      	mov	r3, sl
 801681e:	9d07      	ldr	r5, [sp, #28]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d1d5      	bne.n	80167d0 <rcl_expand_topic_name+0x1d4>
 8016824:	f898 3000 	ldrb.w	r3, [r8]
 8016828:	2b2f      	cmp	r3, #47	@ 0x2f
 801682a:	d0f3      	beq.n	8016814 <rcl_expand_topic_name+0x218>
 801682c:	4638      	mov	r0, r7
 801682e:	f7e9 fd37 	bl	80002a0 <strlen>
 8016832:	4a23      	ldr	r2, [pc, #140]	@ (80168c0 <rcl_expand_topic_name+0x2c4>)
 8016834:	4b23      	ldr	r3, [pc, #140]	@ (80168c4 <rcl_expand_topic_name+0x2c8>)
 8016836:	f8cd 8010 	str.w	r8, [sp, #16]
 801683a:	2801      	cmp	r0, #1
 801683c:	bf18      	it	ne
 801683e:	4613      	movne	r3, r2
 8016840:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016844:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016848:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801684a:	9703      	str	r7, [sp, #12]
 801684c:	9200      	str	r2, [sp, #0]
 801684e:	ab14      	add	r3, sp, #80	@ 0x50
 8016850:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016852:	f7fb fd97 	bl	8012384 <rcutils_format_string_limit>
 8016856:	4682      	mov	sl, r0
 8016858:	e7d9      	b.n	801680e <rcl_expand_topic_name+0x212>
 801685a:	25ca      	movs	r5, #202	@ 0xca
 801685c:	e783      	b.n	8016766 <rcl_expand_topic_name+0x16a>
 801685e:	2800      	cmp	r0, #0
 8016860:	d1b1      	bne.n	80167c6 <rcl_expand_topic_name+0x1ca>
 8016862:	e7e3      	b.n	801682c <rcl_expand_topic_name+0x230>
 8016864:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016866:	6018      	str	r0, [r3, #0]
 8016868:	f7f3 ff86 	bl	800a778 <rcutils_reset_error>
 801686c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801686e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016870:	4650      	mov	r0, sl
 8016872:	4798      	blx	r3
 8016874:	250a      	movs	r5, #10
 8016876:	e776      	b.n	8016766 <rcl_expand_topic_name+0x16a>
 8016878:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801687a:	601d      	str	r5, [r3, #0]
 801687c:	f7f3 ff7c 	bl	800a778 <rcutils_reset_error>
 8016880:	e7f8      	b.n	8016874 <rcl_expand_topic_name+0x278>
 8016882:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016884:	2300      	movs	r3, #0
 8016886:	6013      	str	r3, [r2, #0]
 8016888:	e7f4      	b.n	8016874 <rcl_expand_topic_name+0x278>
 801688a:	ab17      	add	r3, sp, #92	@ 0x5c
 801688c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016890:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016894:	ab14      	add	r3, sp, #80	@ 0x50
 8016896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016898:	4640      	mov	r0, r8
 801689a:	f7fb fe91 	bl	80125c0 <rcutils_strdup>
 801689e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80168a0:	6018      	str	r0, [r3, #0]
 80168a2:	2800      	cmp	r0, #0
 80168a4:	f47f af5f 	bne.w	8016766 <rcl_expand_topic_name+0x16a>
 80168a8:	e7e8      	b.n	801687c <rcl_expand_topic_name+0x280>
 80168aa:	bf00      	nop
 80168ac:	08019054 	.word	0x08019054
 80168b0:	08019830 	.word	0x08019830
 80168b4:	08019838 	.word	0x08019838
 80168b8:	08019840 	.word	0x08019840
 80168bc:	08019848 	.word	0x08019848
 80168c0:	08019258 	.word	0x08019258
 80168c4:	08019064 	.word	0x08019064

080168c8 <rcl_get_default_topic_name_substitutions>:
 80168c8:	2800      	cmp	r0, #0
 80168ca:	bf0c      	ite	eq
 80168cc:	200b      	moveq	r0, #11
 80168ce:	2000      	movne	r0, #0
 80168d0:	4770      	bx	lr
 80168d2:	bf00      	nop

080168d4 <rcl_get_zero_initialized_guard_condition>:
 80168d4:	4a03      	ldr	r2, [pc, #12]	@ (80168e4 <rcl_get_zero_initialized_guard_condition+0x10>)
 80168d6:	4603      	mov	r3, r0
 80168d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80168dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80168e0:	4618      	mov	r0, r3
 80168e2:	4770      	bx	lr
 80168e4:	0801a4c4 	.word	0x0801a4c4

080168e8 <rcl_guard_condition_init>:
 80168e8:	b082      	sub	sp, #8
 80168ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168ec:	b087      	sub	sp, #28
 80168ee:	ac0c      	add	r4, sp, #48	@ 0x30
 80168f0:	e884 000c 	stmia.w	r4, {r2, r3}
 80168f4:	46a6      	mov	lr, r4
 80168f6:	460d      	mov	r5, r1
 80168f8:	4604      	mov	r4, r0
 80168fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80168fe:	f10d 0c04 	add.w	ip, sp, #4
 8016902:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016906:	f8de 3000 	ldr.w	r3, [lr]
 801690a:	f8cc 3000 	str.w	r3, [ip]
 801690e:	a801      	add	r0, sp, #4
 8016910:	f7f3 ff06 	bl	800a720 <rcutils_allocator_is_valid>
 8016914:	b338      	cbz	r0, 8016966 <rcl_guard_condition_init+0x7e>
 8016916:	b334      	cbz	r4, 8016966 <rcl_guard_condition_init+0x7e>
 8016918:	6866      	ldr	r6, [r4, #4]
 801691a:	b9ee      	cbnz	r6, 8016958 <rcl_guard_condition_init+0x70>
 801691c:	b31d      	cbz	r5, 8016966 <rcl_guard_condition_init+0x7e>
 801691e:	4628      	mov	r0, r5
 8016920:	f7f8 fdba 	bl	800f498 <rcl_context_is_valid>
 8016924:	b308      	cbz	r0, 801696a <rcl_guard_condition_init+0x82>
 8016926:	9b01      	ldr	r3, [sp, #4]
 8016928:	9905      	ldr	r1, [sp, #20]
 801692a:	201c      	movs	r0, #28
 801692c:	4798      	blx	r3
 801692e:	4607      	mov	r7, r0
 8016930:	6060      	str	r0, [r4, #4]
 8016932:	b310      	cbz	r0, 801697a <rcl_guard_condition_init+0x92>
 8016934:	6828      	ldr	r0, [r5, #0]
 8016936:	3028      	adds	r0, #40	@ 0x28
 8016938:	f000 fc06 	bl	8017148 <rmw_create_guard_condition>
 801693c:	6038      	str	r0, [r7, #0]
 801693e:	6860      	ldr	r0, [r4, #4]
 8016940:	6807      	ldr	r7, [r0, #0]
 8016942:	b1a7      	cbz	r7, 801696e <rcl_guard_condition_init+0x86>
 8016944:	2301      	movs	r3, #1
 8016946:	ac01      	add	r4, sp, #4
 8016948:	7103      	strb	r3, [r0, #4]
 801694a:	f100 0708 	add.w	r7, r0, #8
 801694e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016950:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016952:	6823      	ldr	r3, [r4, #0]
 8016954:	603b      	str	r3, [r7, #0]
 8016956:	e000      	b.n	801695a <rcl_guard_condition_init+0x72>
 8016958:	2664      	movs	r6, #100	@ 0x64
 801695a:	4630      	mov	r0, r6
 801695c:	b007      	add	sp, #28
 801695e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016962:	b002      	add	sp, #8
 8016964:	4770      	bx	lr
 8016966:	260b      	movs	r6, #11
 8016968:	e7f7      	b.n	801695a <rcl_guard_condition_init+0x72>
 801696a:	2665      	movs	r6, #101	@ 0x65
 801696c:	e7f5      	b.n	801695a <rcl_guard_condition_init+0x72>
 801696e:	9b02      	ldr	r3, [sp, #8]
 8016970:	9905      	ldr	r1, [sp, #20]
 8016972:	4798      	blx	r3
 8016974:	2601      	movs	r6, #1
 8016976:	6067      	str	r7, [r4, #4]
 8016978:	e7ef      	b.n	801695a <rcl_guard_condition_init+0x72>
 801697a:	260a      	movs	r6, #10
 801697c:	e7ed      	b.n	801695a <rcl_guard_condition_init+0x72>
 801697e:	bf00      	nop

08016980 <rcl_guard_condition_init_from_rmw>:
 8016980:	b082      	sub	sp, #8
 8016982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016986:	b086      	sub	sp, #24
 8016988:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801698c:	4604      	mov	r4, r0
 801698e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016992:	460e      	mov	r6, r1
 8016994:	4617      	mov	r7, r2
 8016996:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801699a:	f10d 0e04 	add.w	lr, sp, #4
 801699e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80169a2:	f8dc 3000 	ldr.w	r3, [ip]
 80169a6:	f8ce 3000 	str.w	r3, [lr]
 80169aa:	a801      	add	r0, sp, #4
 80169ac:	f7f3 feb8 	bl	800a720 <rcutils_allocator_is_valid>
 80169b0:	b350      	cbz	r0, 8016a08 <rcl_guard_condition_init_from_rmw+0x88>
 80169b2:	b34c      	cbz	r4, 8016a08 <rcl_guard_condition_init_from_rmw+0x88>
 80169b4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80169b8:	f1b8 0f00 	cmp.w	r8, #0
 80169bc:	d11e      	bne.n	80169fc <rcl_guard_condition_init_from_rmw+0x7c>
 80169be:	b31f      	cbz	r7, 8016a08 <rcl_guard_condition_init_from_rmw+0x88>
 80169c0:	4638      	mov	r0, r7
 80169c2:	f7f8 fd69 	bl	800f498 <rcl_context_is_valid>
 80169c6:	b328      	cbz	r0, 8016a14 <rcl_guard_condition_init_from_rmw+0x94>
 80169c8:	9b01      	ldr	r3, [sp, #4]
 80169ca:	9905      	ldr	r1, [sp, #20]
 80169cc:	201c      	movs	r0, #28
 80169ce:	4798      	blx	r3
 80169d0:	4605      	mov	r5, r0
 80169d2:	6060      	str	r0, [r4, #4]
 80169d4:	b358      	cbz	r0, 8016a2e <rcl_guard_condition_init_from_rmw+0xae>
 80169d6:	b1fe      	cbz	r6, 8016a18 <rcl_guard_condition_init_from_rmw+0x98>
 80169d8:	6006      	str	r6, [r0, #0]
 80169da:	f880 8004 	strb.w	r8, [r0, #4]
 80169de:	ac01      	add	r4, sp, #4
 80169e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169e2:	f105 0c08 	add.w	ip, r5, #8
 80169e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169ea:	6823      	ldr	r3, [r4, #0]
 80169ec:	f8cc 3000 	str.w	r3, [ip]
 80169f0:	2000      	movs	r0, #0
 80169f2:	b006      	add	sp, #24
 80169f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169f8:	b002      	add	sp, #8
 80169fa:	4770      	bx	lr
 80169fc:	2064      	movs	r0, #100	@ 0x64
 80169fe:	b006      	add	sp, #24
 8016a00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a04:	b002      	add	sp, #8
 8016a06:	4770      	bx	lr
 8016a08:	200b      	movs	r0, #11
 8016a0a:	b006      	add	sp, #24
 8016a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a10:	b002      	add	sp, #8
 8016a12:	4770      	bx	lr
 8016a14:	2065      	movs	r0, #101	@ 0x65
 8016a16:	e7f2      	b.n	80169fe <rcl_guard_condition_init_from_rmw+0x7e>
 8016a18:	6838      	ldr	r0, [r7, #0]
 8016a1a:	3028      	adds	r0, #40	@ 0x28
 8016a1c:	f000 fb94 	bl	8017148 <rmw_create_guard_condition>
 8016a20:	6028      	str	r0, [r5, #0]
 8016a22:	6865      	ldr	r5, [r4, #4]
 8016a24:	682e      	ldr	r6, [r5, #0]
 8016a26:	b126      	cbz	r6, 8016a32 <rcl_guard_condition_init_from_rmw+0xb2>
 8016a28:	2301      	movs	r3, #1
 8016a2a:	712b      	strb	r3, [r5, #4]
 8016a2c:	e7d7      	b.n	80169de <rcl_guard_condition_init_from_rmw+0x5e>
 8016a2e:	200a      	movs	r0, #10
 8016a30:	e7e5      	b.n	80169fe <rcl_guard_condition_init_from_rmw+0x7e>
 8016a32:	4628      	mov	r0, r5
 8016a34:	9b02      	ldr	r3, [sp, #8]
 8016a36:	9905      	ldr	r1, [sp, #20]
 8016a38:	4798      	blx	r3
 8016a3a:	2001      	movs	r0, #1
 8016a3c:	6066      	str	r6, [r4, #4]
 8016a3e:	e7de      	b.n	80169fe <rcl_guard_condition_init_from_rmw+0x7e>

08016a40 <rcl_guard_condition_fini>:
 8016a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a42:	b1d8      	cbz	r0, 8016a7c <rcl_guard_condition_fini+0x3c>
 8016a44:	4604      	mov	r4, r0
 8016a46:	6840      	ldr	r0, [r0, #4]
 8016a48:	b158      	cbz	r0, 8016a62 <rcl_guard_condition_fini+0x22>
 8016a4a:	6803      	ldr	r3, [r0, #0]
 8016a4c:	68c6      	ldr	r6, [r0, #12]
 8016a4e:	6987      	ldr	r7, [r0, #24]
 8016a50:	b153      	cbz	r3, 8016a68 <rcl_guard_condition_fini+0x28>
 8016a52:	7905      	ldrb	r5, [r0, #4]
 8016a54:	b955      	cbnz	r5, 8016a6c <rcl_guard_condition_fini+0x2c>
 8016a56:	4639      	mov	r1, r7
 8016a58:	47b0      	blx	r6
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	6063      	str	r3, [r4, #4]
 8016a5e:	4628      	mov	r0, r5
 8016a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a62:	4605      	mov	r5, r0
 8016a64:	4628      	mov	r0, r5
 8016a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a68:	461d      	mov	r5, r3
 8016a6a:	e7f4      	b.n	8016a56 <rcl_guard_condition_fini+0x16>
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	f000 fb7f 	bl	8017170 <rmw_destroy_guard_condition>
 8016a72:	1e05      	subs	r5, r0, #0
 8016a74:	bf18      	it	ne
 8016a76:	2501      	movne	r5, #1
 8016a78:	6860      	ldr	r0, [r4, #4]
 8016a7a:	e7ec      	b.n	8016a56 <rcl_guard_condition_fini+0x16>
 8016a7c:	250b      	movs	r5, #11
 8016a7e:	4628      	mov	r0, r5
 8016a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a82:	bf00      	nop

08016a84 <rcl_guard_condition_get_default_options>:
 8016a84:	b510      	push	{r4, lr}
 8016a86:	4604      	mov	r4, r0
 8016a88:	f7f3 fe1e 	bl	800a6c8 <rcutils_get_default_allocator>
 8016a8c:	4620      	mov	r0, r4
 8016a8e:	bd10      	pop	{r4, pc}

08016a90 <rcl_trigger_guard_condition>:
 8016a90:	b148      	cbz	r0, 8016aa6 <rcl_trigger_guard_condition+0x16>
 8016a92:	b508      	push	{r3, lr}
 8016a94:	6843      	ldr	r3, [r0, #4]
 8016a96:	b143      	cbz	r3, 8016aaa <rcl_trigger_guard_condition+0x1a>
 8016a98:	6818      	ldr	r0, [r3, #0]
 8016a9a:	f000 fb7d 	bl	8017198 <rmw_trigger_guard_condition>
 8016a9e:	3800      	subs	r0, #0
 8016aa0:	bf18      	it	ne
 8016aa2:	2001      	movne	r0, #1
 8016aa4:	bd08      	pop	{r3, pc}
 8016aa6:	200b      	movs	r0, #11
 8016aa8:	4770      	bx	lr
 8016aaa:	200b      	movs	r0, #11
 8016aac:	bd08      	pop	{r3, pc}
 8016aae:	bf00      	nop

08016ab0 <rcl_guard_condition_get_rmw_handle>:
 8016ab0:	b110      	cbz	r0, 8016ab8 <rcl_guard_condition_get_rmw_handle+0x8>
 8016ab2:	6840      	ldr	r0, [r0, #4]
 8016ab4:	b100      	cbz	r0, 8016ab8 <rcl_guard_condition_get_rmw_handle+0x8>
 8016ab6:	6800      	ldr	r0, [r0, #0]
 8016ab8:	4770      	bx	lr
 8016aba:	bf00      	nop

08016abc <rcl_validate_topic_name>:
 8016abc:	2800      	cmp	r0, #0
 8016abe:	d06b      	beq.n	8016b98 <rcl_validate_topic_name+0xdc>
 8016ac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ac4:	460d      	mov	r5, r1
 8016ac6:	2900      	cmp	r1, #0
 8016ac8:	d06d      	beq.n	8016ba6 <rcl_validate_topic_name+0xea>
 8016aca:	4616      	mov	r6, r2
 8016acc:	4604      	mov	r4, r0
 8016ace:	f7e9 fbe7 	bl	80002a0 <strlen>
 8016ad2:	b190      	cbz	r0, 8016afa <rcl_validate_topic_name+0x3e>
 8016ad4:	7821      	ldrb	r1, [r4, #0]
 8016ad6:	4a71      	ldr	r2, [pc, #452]	@ (8016c9c <rcl_validate_topic_name+0x1e0>)
 8016ad8:	5c53      	ldrb	r3, [r2, r1]
 8016ada:	f013 0304 	ands.w	r3, r3, #4
 8016ade:	d15d      	bne.n	8016b9c <rcl_validate_topic_name+0xe0>
 8016ae0:	1e47      	subs	r7, r0, #1
 8016ae2:	f814 c007 	ldrb.w	ip, [r4, r7]
 8016ae6:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 8016aea:	d10d      	bne.n	8016b08 <rcl_validate_topic_name+0x4c>
 8016aec:	2302      	movs	r3, #2
 8016aee:	602b      	str	r3, [r5, #0]
 8016af0:	b146      	cbz	r6, 8016b04 <rcl_validate_topic_name+0x48>
 8016af2:	6037      	str	r7, [r6, #0]
 8016af4:	2000      	movs	r0, #0
 8016af6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016afa:	2301      	movs	r3, #1
 8016afc:	602b      	str	r3, [r5, #0]
 8016afe:	b10e      	cbz	r6, 8016b04 <rcl_validate_topic_name+0x48>
 8016b00:	2300      	movs	r3, #0
 8016b02:	6033      	str	r3, [r6, #0]
 8016b04:	2000      	movs	r0, #0
 8016b06:	e7f6      	b.n	8016af6 <rcl_validate_topic_name+0x3a>
 8016b08:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8016b0c:	469a      	mov	sl, r3
 8016b0e:	469e      	mov	lr, r3
 8016b10:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8016b14:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 8016b18:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 8016b1c:	d85b      	bhi.n	8016bd6 <rcl_validate_topic_name+0x11a>
 8016b1e:	e8df f00c 	tbb	[pc, ip]
 8016b22:	4463      	.short	0x4463
 8016b24:	44444444 	.word	0x44444444
 8016b28:	44444444 	.word	0x44444444
 8016b2c:	5a5a5a44 	.word	0x5a5a5a44
 8016b30:	5a5a5a5a 	.word	0x5a5a5a5a
 8016b34:	44444444 	.word	0x44444444
 8016b38:	44444444 	.word	0x44444444
 8016b3c:	44444444 	.word	0x44444444
 8016b40:	44444444 	.word	0x44444444
 8016b44:	44444444 	.word	0x44444444
 8016b48:	44444444 	.word	0x44444444
 8016b4c:	5a5a4444 	.word	0x5a5a4444
 8016b50:	5a2e5a5a 	.word	0x5a2e5a5a
 8016b54:	44444444 	.word	0x44444444
 8016b58:	44444444 	.word	0x44444444
 8016b5c:	44444444 	.word	0x44444444
 8016b60:	44444444 	.word	0x44444444
 8016b64:	44444444 	.word	0x44444444
 8016b68:	44444444 	.word	0x44444444
 8016b6c:	5a284444 	.word	0x5a284444
 8016b70:	6b73      	.short	0x6b73
 8016b72:	f1ba 0f00 	cmp.w	sl, #0
 8016b76:	d13a      	bne.n	8016bee <rcl_validate_topic_name+0x132>
 8016b78:	4673      	mov	r3, lr
 8016b7a:	f04f 0a01 	mov.w	sl, #1
 8016b7e:	f10e 0e01 	add.w	lr, lr, #1
 8016b82:	4570      	cmp	r0, lr
 8016b84:	d1c4      	bne.n	8016b10 <rcl_validate_topic_name+0x54>
 8016b86:	f1ba 0f00 	cmp.w	sl, #0
 8016b8a:	d048      	beq.n	8016c1e <rcl_validate_topic_name+0x162>
 8016b8c:	2205      	movs	r2, #5
 8016b8e:	602a      	str	r2, [r5, #0]
 8016b90:	2e00      	cmp	r6, #0
 8016b92:	d0b7      	beq.n	8016b04 <rcl_validate_topic_name+0x48>
 8016b94:	6033      	str	r3, [r6, #0]
 8016b96:	e7b5      	b.n	8016b04 <rcl_validate_topic_name+0x48>
 8016b98:	200b      	movs	r0, #11
 8016b9a:	4770      	bx	lr
 8016b9c:	2304      	movs	r3, #4
 8016b9e:	602b      	str	r3, [r5, #0]
 8016ba0:	2e00      	cmp	r6, #0
 8016ba2:	d1ad      	bne.n	8016b00 <rcl_validate_topic_name+0x44>
 8016ba4:	e7ae      	b.n	8016b04 <rcl_validate_topic_name+0x48>
 8016ba6:	200b      	movs	r0, #11
 8016ba8:	e7a5      	b.n	8016af6 <rcl_validate_topic_name+0x3a>
 8016baa:	f812 c009 	ldrb.w	ip, [r2, r9]
 8016bae:	f01c 0f04 	tst.w	ip, #4
 8016bb2:	d0e4      	beq.n	8016b7e <rcl_validate_topic_name+0xc2>
 8016bb4:	f1ba 0f00 	cmp.w	sl, #0
 8016bb8:	d0e1      	beq.n	8016b7e <rcl_validate_topic_name+0xc2>
 8016bba:	f1be 0f00 	cmp.w	lr, #0
 8016bbe:	d0de      	beq.n	8016b7e <rcl_validate_topic_name+0xc2>
 8016bc0:	f10e 3cff 	add.w	ip, lr, #4294967295	@ 0xffffffff
 8016bc4:	4563      	cmp	r3, ip
 8016bc6:	d1da      	bne.n	8016b7e <rcl_validate_topic_name+0xc2>
 8016bc8:	2309      	movs	r3, #9
 8016bca:	602b      	str	r3, [r5, #0]
 8016bcc:	2e00      	cmp	r6, #0
 8016bce:	d099      	beq.n	8016b04 <rcl_validate_topic_name+0x48>
 8016bd0:	f8c6 e000 	str.w	lr, [r6]
 8016bd4:	e796      	b.n	8016b04 <rcl_validate_topic_name+0x48>
 8016bd6:	f1ba 0f00 	cmp.w	sl, #0
 8016bda:	bf0c      	ite	eq
 8016bdc:	2303      	moveq	r3, #3
 8016bde:	2308      	movne	r3, #8
 8016be0:	602b      	str	r3, [r5, #0]
 8016be2:	2e00      	cmp	r6, #0
 8016be4:	d1f4      	bne.n	8016bd0 <rcl_validate_topic_name+0x114>
 8016be6:	e78d      	b.n	8016b04 <rcl_validate_topic_name+0x48>
 8016be8:	f1ba 0f00 	cmp.w	sl, #0
 8016bec:	d0c7      	beq.n	8016b7e <rcl_validate_topic_name+0xc2>
 8016bee:	2308      	movs	r3, #8
 8016bf0:	602b      	str	r3, [r5, #0]
 8016bf2:	2e00      	cmp	r6, #0
 8016bf4:	d1ec      	bne.n	8016bd0 <rcl_validate_topic_name+0x114>
 8016bf6:	e785      	b.n	8016b04 <rcl_validate_topic_name+0x48>
 8016bf8:	f1be 0f00 	cmp.w	lr, #0
 8016bfc:	d0bf      	beq.n	8016b7e <rcl_validate_topic_name+0xc2>
 8016bfe:	2306      	movs	r3, #6
 8016c00:	602b      	str	r3, [r5, #0]
 8016c02:	2e00      	cmp	r6, #0
 8016c04:	d1e4      	bne.n	8016bd0 <rcl_validate_topic_name+0x114>
 8016c06:	e77d      	b.n	8016b04 <rcl_validate_topic_name+0x48>
 8016c08:	f1ba 0f00 	cmp.w	sl, #0
 8016c0c:	d104      	bne.n	8016c18 <rcl_validate_topic_name+0x15c>
 8016c0e:	2305      	movs	r3, #5
 8016c10:	602b      	str	r3, [r5, #0]
 8016c12:	2e00      	cmp	r6, #0
 8016c14:	d1dc      	bne.n	8016bd0 <rcl_validate_topic_name+0x114>
 8016c16:	e775      	b.n	8016b04 <rcl_validate_topic_name+0x48>
 8016c18:	f04f 0a00 	mov.w	sl, #0
 8016c1c:	e7af      	b.n	8016b7e <rcl_validate_topic_name+0xc2>
 8016c1e:	297e      	cmp	r1, #126	@ 0x7e
 8016c20:	d01d      	beq.n	8016c5e <rcl_validate_topic_name+0x1a2>
 8016c22:	2101      	movs	r1, #1
 8016c24:	e006      	b.n	8016c34 <rcl_validate_topic_name+0x178>
 8016c26:	458e      	cmp	lr, r1
 8016c28:	f104 0401 	add.w	r4, r4, #1
 8016c2c:	f101 0301 	add.w	r3, r1, #1
 8016c30:	d912      	bls.n	8016c58 <rcl_validate_topic_name+0x19c>
 8016c32:	4619      	mov	r1, r3
 8016c34:	4557      	cmp	r7, sl
 8016c36:	f10a 0a01 	add.w	sl, sl, #1
 8016c3a:	d0f4      	beq.n	8016c26 <rcl_validate_topic_name+0x16a>
 8016c3c:	7823      	ldrb	r3, [r4, #0]
 8016c3e:	2b2f      	cmp	r3, #47	@ 0x2f
 8016c40:	d1f1      	bne.n	8016c26 <rcl_validate_topic_name+0x16a>
 8016c42:	7863      	ldrb	r3, [r4, #1]
 8016c44:	5cd3      	ldrb	r3, [r2, r3]
 8016c46:	075b      	lsls	r3, r3, #29
 8016c48:	d5ed      	bpl.n	8016c26 <rcl_validate_topic_name+0x16a>
 8016c4a:	2304      	movs	r3, #4
 8016c4c:	602b      	str	r3, [r5, #0]
 8016c4e:	2e00      	cmp	r6, #0
 8016c50:	f43f af58 	beq.w	8016b04 <rcl_validate_topic_name+0x48>
 8016c54:	6031      	str	r1, [r6, #0]
 8016c56:	e755      	b.n	8016b04 <rcl_validate_topic_name+0x48>
 8016c58:	2300      	movs	r3, #0
 8016c5a:	602b      	str	r3, [r5, #0]
 8016c5c:	e752      	b.n	8016b04 <rcl_validate_topic_name+0x48>
 8016c5e:	4653      	mov	r3, sl
 8016c60:	2101      	movs	r1, #1
 8016c62:	e00a      	b.n	8016c7a <rcl_validate_topic_name+0x1be>
 8016c64:	2b01      	cmp	r3, #1
 8016c66:	d012      	beq.n	8016c8e <rcl_validate_topic_name+0x1d2>
 8016c68:	458e      	cmp	lr, r1
 8016c6a:	f103 0301 	add.w	r3, r3, #1
 8016c6e:	f104 0401 	add.w	r4, r4, #1
 8016c72:	f101 0001 	add.w	r0, r1, #1
 8016c76:	d9ef      	bls.n	8016c58 <rcl_validate_topic_name+0x19c>
 8016c78:	4601      	mov	r1, r0
 8016c7a:	429f      	cmp	r7, r3
 8016c7c:	d0f4      	beq.n	8016c68 <rcl_validate_topic_name+0x1ac>
 8016c7e:	7820      	ldrb	r0, [r4, #0]
 8016c80:	282f      	cmp	r0, #47	@ 0x2f
 8016c82:	d1ef      	bne.n	8016c64 <rcl_validate_topic_name+0x1a8>
 8016c84:	7860      	ldrb	r0, [r4, #1]
 8016c86:	5c10      	ldrb	r0, [r2, r0]
 8016c88:	0740      	lsls	r0, r0, #29
 8016c8a:	d5ed      	bpl.n	8016c68 <rcl_validate_topic_name+0x1ac>
 8016c8c:	e7dd      	b.n	8016c4a <rcl_validate_topic_name+0x18e>
 8016c8e:	2207      	movs	r2, #7
 8016c90:	602a      	str	r2, [r5, #0]
 8016c92:	2e00      	cmp	r6, #0
 8016c94:	f47f af7e 	bne.w	8016b94 <rcl_validate_topic_name+0xd8>
 8016c98:	e734      	b.n	8016b04 <rcl_validate_topic_name+0x48>
 8016c9a:	bf00      	nop
 8016c9c:	0801a5e7 	.word	0x0801a5e7

08016ca0 <rcutils_split>:
 8016ca0:	b082      	sub	sp, #8
 8016ca2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ca6:	b08b      	sub	sp, #44	@ 0x2c
 8016ca8:	ac14      	add	r4, sp, #80	@ 0x50
 8016caa:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8016cac:	e884 000c 	stmia.w	r4, {r2, r3}
 8016cb0:	2f00      	cmp	r7, #0
 8016cb2:	f000 8091 	beq.w	8016dd8 <rcutils_split+0x138>
 8016cb6:	4606      	mov	r6, r0
 8016cb8:	2800      	cmp	r0, #0
 8016cba:	d072      	beq.n	8016da2 <rcutils_split+0x102>
 8016cbc:	7804      	ldrb	r4, [r0, #0]
 8016cbe:	2c00      	cmp	r4, #0
 8016cc0:	d06f      	beq.n	8016da2 <rcutils_split+0x102>
 8016cc2:	460d      	mov	r5, r1
 8016cc4:	f7e9 faec 	bl	80002a0 <strlen>
 8016cc8:	1833      	adds	r3, r6, r0
 8016cca:	1b64      	subs	r4, r4, r5
 8016ccc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016cd0:	4681      	mov	r9, r0
 8016cd2:	fab4 f484 	clz	r4, r4
 8016cd6:	0964      	lsrs	r4, r4, #5
 8016cd8:	42ab      	cmp	r3, r5
 8016cda:	bf08      	it	eq
 8016cdc:	f1a9 0901 	subeq.w	r9, r9, #1
 8016ce0:	454c      	cmp	r4, r9
 8016ce2:	d26a      	bcs.n	8016dba <rcutils_split+0x11a>
 8016ce4:	1933      	adds	r3, r6, r4
 8016ce6:	eb06 0009 	add.w	r0, r6, r9
 8016cea:	2101      	movs	r1, #1
 8016cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016cf0:	42aa      	cmp	r2, r5
 8016cf2:	bf08      	it	eq
 8016cf4:	3101      	addeq	r1, #1
 8016cf6:	4283      	cmp	r3, r0
 8016cf8:	d1f8      	bne.n	8016cec <rcutils_split+0x4c>
 8016cfa:	aa14      	add	r2, sp, #80	@ 0x50
 8016cfc:	4638      	mov	r0, r7
 8016cfe:	f000 f88f 	bl	8016e20 <rcutils_string_array_init>
 8016d02:	2800      	cmp	r0, #0
 8016d04:	d141      	bne.n	8016d8a <rcutils_split+0xea>
 8016d06:	687a      	ldr	r2, [r7, #4]
 8016d08:	4680      	mov	r8, r0
 8016d0a:	46a2      	mov	sl, r4
 8016d0c:	e002      	b.n	8016d14 <rcutils_split+0x74>
 8016d0e:	3401      	adds	r4, #1
 8016d10:	454c      	cmp	r4, r9
 8016d12:	d222      	bcs.n	8016d5a <rcutils_split+0xba>
 8016d14:	5d33      	ldrb	r3, [r6, r4]
 8016d16:	42ab      	cmp	r3, r5
 8016d18:	d1f9      	bne.n	8016d0e <rcutils_split+0x6e>
 8016d1a:	4554      	cmp	r4, sl
 8016d1c:	eba4 0b0a 	sub.w	fp, r4, sl
 8016d20:	d038      	beq.n	8016d94 <rcutils_split+0xf4>
 8016d22:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016d24:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016d26:	9201      	str	r2, [sp, #4]
 8016d28:	f10b 0002 	add.w	r0, fp, #2
 8016d2c:	4798      	blx	r3
 8016d2e:	9a01      	ldr	r2, [sp, #4]
 8016d30:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 8016d34:	687a      	ldr	r2, [r7, #4]
 8016d36:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8016d3a:	eb06 030a 	add.w	r3, r6, sl
 8016d3e:	f10b 0101 	add.w	r1, fp, #1
 8016d42:	2800      	cmp	r0, #0
 8016d44:	d04e      	beq.n	8016de4 <rcutils_split+0x144>
 8016d46:	4a2d      	ldr	r2, [pc, #180]	@ (8016dfc <rcutils_split+0x15c>)
 8016d48:	f000 fefa 	bl	8017b40 <sniprintf>
 8016d4c:	687a      	ldr	r2, [r7, #4]
 8016d4e:	f108 0801 	add.w	r8, r8, #1
 8016d52:	3401      	adds	r4, #1
 8016d54:	454c      	cmp	r4, r9
 8016d56:	46a2      	mov	sl, r4
 8016d58:	d3dc      	bcc.n	8016d14 <rcutils_split+0x74>
 8016d5a:	4554      	cmp	r4, sl
 8016d5c:	d035      	beq.n	8016dca <rcutils_split+0x12a>
 8016d5e:	eba4 040a 	sub.w	r4, r4, sl
 8016d62:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016d64:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016d66:	9201      	str	r2, [sp, #4]
 8016d68:	1ca0      	adds	r0, r4, #2
 8016d6a:	4798      	blx	r3
 8016d6c:	9a01      	ldr	r2, [sp, #4]
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 8016d74:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016d78:	2800      	cmp	r0, #0
 8016d7a:	d035      	beq.n	8016de8 <rcutils_split+0x148>
 8016d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8016dfc <rcutils_split+0x15c>)
 8016d7e:	eb06 030a 	add.w	r3, r6, sl
 8016d82:	1c61      	adds	r1, r4, #1
 8016d84:	f000 fedc 	bl	8017b40 <sniprintf>
 8016d88:	2000      	movs	r0, #0
 8016d8a:	b00b      	add	sp, #44	@ 0x2c
 8016d8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d90:	b002      	add	sp, #8
 8016d92:	4770      	bx	lr
 8016d94:	683b      	ldr	r3, [r7, #0]
 8016d96:	3b01      	subs	r3, #1
 8016d98:	2100      	movs	r1, #0
 8016d9a:	603b      	str	r3, [r7, #0]
 8016d9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8016da0:	e7d7      	b.n	8016d52 <rcutils_split+0xb2>
 8016da2:	a802      	add	r0, sp, #8
 8016da4:	ac02      	add	r4, sp, #8
 8016da6:	f000 f82b 	bl	8016e00 <rcutils_get_zero_initialized_string_array>
 8016daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016dac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016dae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8016db2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8016db6:	2000      	movs	r0, #0
 8016db8:	e7e7      	b.n	8016d8a <rcutils_split+0xea>
 8016dba:	aa14      	add	r2, sp, #80	@ 0x50
 8016dbc:	2101      	movs	r1, #1
 8016dbe:	4638      	mov	r0, r7
 8016dc0:	f000 f82e 	bl	8016e20 <rcutils_string_array_init>
 8016dc4:	2800      	cmp	r0, #0
 8016dc6:	d1e0      	bne.n	8016d8a <rcutils_split+0xea>
 8016dc8:	687a      	ldr	r2, [r7, #4]
 8016dca:	683b      	ldr	r3, [r7, #0]
 8016dcc:	3b01      	subs	r3, #1
 8016dce:	2100      	movs	r1, #0
 8016dd0:	603b      	str	r3, [r7, #0]
 8016dd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8016dd6:	e7ee      	b.n	8016db6 <rcutils_split+0x116>
 8016dd8:	200b      	movs	r0, #11
 8016dda:	b00b      	add	sp, #44	@ 0x2c
 8016ddc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016de0:	b002      	add	sp, #8
 8016de2:	4770      	bx	lr
 8016de4:	f8c7 8000 	str.w	r8, [r7]
 8016de8:	4638      	mov	r0, r7
 8016dea:	f000 f83b 	bl	8016e64 <rcutils_string_array_fini>
 8016dee:	b908      	cbnz	r0, 8016df4 <rcutils_split+0x154>
 8016df0:	200a      	movs	r0, #10
 8016df2:	e7ca      	b.n	8016d8a <rcutils_split+0xea>
 8016df4:	f7f3 fcc0 	bl	800a778 <rcutils_reset_error>
 8016df8:	e7fa      	b.n	8016df0 <rcutils_split+0x150>
 8016dfa:	bf00      	nop
 8016dfc:	08019058 	.word	0x08019058

08016e00 <rcutils_get_zero_initialized_string_array>:
 8016e00:	b510      	push	{r4, lr}
 8016e02:	4c06      	ldr	r4, [pc, #24]	@ (8016e1c <rcutils_get_zero_initialized_string_array+0x1c>)
 8016e04:	4686      	mov	lr, r0
 8016e06:	4684      	mov	ip, r0
 8016e08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e0e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8016e12:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8016e16:	4670      	mov	r0, lr
 8016e18:	bd10      	pop	{r4, pc}
 8016e1a:	bf00      	nop
 8016e1c:	0801a4cc 	.word	0x0801a4cc

08016e20 <rcutils_string_array_init>:
 8016e20:	b1da      	cbz	r2, 8016e5a <rcutils_string_array_init+0x3a>
 8016e22:	b570      	push	{r4, r5, r6, lr}
 8016e24:	4605      	mov	r5, r0
 8016e26:	b1d0      	cbz	r0, 8016e5e <rcutils_string_array_init+0x3e>
 8016e28:	460e      	mov	r6, r1
 8016e2a:	4614      	mov	r4, r2
 8016e2c:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 8016e30:	6001      	str	r1, [r0, #0]
 8016e32:	2104      	movs	r1, #4
 8016e34:	4630      	mov	r0, r6
 8016e36:	4798      	blx	r3
 8016e38:	6068      	str	r0, [r5, #4]
 8016e3a:	b150      	cbz	r0, 8016e52 <rcutils_string_array_init+0x32>
 8016e3c:	46a4      	mov	ip, r4
 8016e3e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016e42:	f105 0408 	add.w	r4, r5, #8
 8016e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016e48:	f8dc 3000 	ldr.w	r3, [ip]
 8016e4c:	6023      	str	r3, [r4, #0]
 8016e4e:	2000      	movs	r0, #0
 8016e50:	bd70      	pop	{r4, r5, r6, pc}
 8016e52:	2e00      	cmp	r6, #0
 8016e54:	d0f2      	beq.n	8016e3c <rcutils_string_array_init+0x1c>
 8016e56:	200a      	movs	r0, #10
 8016e58:	bd70      	pop	{r4, r5, r6, pc}
 8016e5a:	200b      	movs	r0, #11
 8016e5c:	4770      	bx	lr
 8016e5e:	200b      	movs	r0, #11
 8016e60:	bd70      	pop	{r4, r5, r6, pc}
 8016e62:	bf00      	nop

08016e64 <rcutils_string_array_fini>:
 8016e64:	b310      	cbz	r0, 8016eac <rcutils_string_array_fini+0x48>
 8016e66:	6843      	ldr	r3, [r0, #4]
 8016e68:	b570      	push	{r4, r5, r6, lr}
 8016e6a:	4604      	mov	r4, r0
 8016e6c:	b1d3      	cbz	r3, 8016ea4 <rcutils_string_array_fini+0x40>
 8016e6e:	3008      	adds	r0, #8
 8016e70:	f7f3 fc56 	bl	800a720 <rcutils_allocator_is_valid>
 8016e74:	b1c0      	cbz	r0, 8016ea8 <rcutils_string_array_fini+0x44>
 8016e76:	e9d4 3000 	ldrd	r3, r0, [r4]
 8016e7a:	b16b      	cbz	r3, 8016e98 <rcutils_string_array_fini+0x34>
 8016e7c:	2500      	movs	r5, #0
 8016e7e:	462e      	mov	r6, r5
 8016e80:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8016e84:	68e3      	ldr	r3, [r4, #12]
 8016e86:	69a1      	ldr	r1, [r4, #24]
 8016e88:	4798      	blx	r3
 8016e8a:	e9d4 3000 	ldrd	r3, r0, [r4]
 8016e8e:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8016e92:	3501      	adds	r5, #1
 8016e94:	42ab      	cmp	r3, r5
 8016e96:	d8f3      	bhi.n	8016e80 <rcutils_string_array_fini+0x1c>
 8016e98:	68e3      	ldr	r3, [r4, #12]
 8016e9a:	69a1      	ldr	r1, [r4, #24]
 8016e9c:	4798      	blx	r3
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	e9c4 3300 	strd	r3, r3, [r4]
 8016ea4:	2000      	movs	r0, #0
 8016ea6:	bd70      	pop	{r4, r5, r6, pc}
 8016ea8:	200b      	movs	r0, #11
 8016eaa:	bd70      	pop	{r4, r5, r6, pc}
 8016eac:	200b      	movs	r0, #11
 8016eae:	4770      	bx	lr

08016eb0 <rmw_discovery_options_init>:
 8016eb0:	b328      	cbz	r0, 8016efe <rmw_discovery_options_init+0x4e>
 8016eb2:	b570      	push	{r4, r5, r6, lr}
 8016eb4:	4604      	mov	r4, r0
 8016eb6:	4610      	mov	r0, r2
 8016eb8:	460e      	mov	r6, r1
 8016eba:	4615      	mov	r5, r2
 8016ebc:	f7f3 fc30 	bl	800a720 <rcutils_allocator_is_valid>
 8016ec0:	b1d8      	cbz	r0, 8016efa <rmw_discovery_options_init+0x4a>
 8016ec2:	68a3      	ldr	r3, [r4, #8]
 8016ec4:	b9cb      	cbnz	r3, 8016efa <rmw_discovery_options_init+0x4a>
 8016ec6:	6863      	ldr	r3, [r4, #4]
 8016ec8:	b9bb      	cbnz	r3, 8016efa <rmw_discovery_options_init+0x4a>
 8016eca:	7823      	ldrb	r3, [r4, #0]
 8016ecc:	b90b      	cbnz	r3, 8016ed2 <rmw_discovery_options_init+0x22>
 8016ece:	2302      	movs	r3, #2
 8016ed0:	7023      	strb	r3, [r4, #0]
 8016ed2:	b186      	cbz	r6, 8016ef6 <rmw_discovery_options_init+0x46>
 8016ed4:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8016ed8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016edc:	4630      	mov	r0, r6
 8016ede:	4798      	blx	r3
 8016ee0:	6060      	str	r0, [r4, #4]
 8016ee2:	b170      	cbz	r0, 8016f02 <rmw_discovery_options_init+0x52>
 8016ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ee6:	f104 0c0c 	add.w	ip, r4, #12
 8016eea:	60a6      	str	r6, [r4, #8]
 8016eec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ef0:	682b      	ldr	r3, [r5, #0]
 8016ef2:	f8cc 3000 	str.w	r3, [ip]
 8016ef6:	2000      	movs	r0, #0
 8016ef8:	bd70      	pop	{r4, r5, r6, pc}
 8016efa:	200b      	movs	r0, #11
 8016efc:	bd70      	pop	{r4, r5, r6, pc}
 8016efe:	200b      	movs	r0, #11
 8016f00:	4770      	bx	lr
 8016f02:	200a      	movs	r0, #10
 8016f04:	bd70      	pop	{r4, r5, r6, pc}
 8016f06:	bf00      	nop

08016f08 <rmw_enclave_options_copy>:
 8016f08:	b1e0      	cbz	r0, 8016f44 <rmw_enclave_options_copy+0x3c>
 8016f0a:	b570      	push	{r4, r5, r6, lr}
 8016f0c:	4616      	mov	r6, r2
 8016f0e:	b082      	sub	sp, #8
 8016f10:	b1aa      	cbz	r2, 8016f3e <rmw_enclave_options_copy+0x36>
 8016f12:	4605      	mov	r5, r0
 8016f14:	4608      	mov	r0, r1
 8016f16:	460c      	mov	r4, r1
 8016f18:	f7f3 fc02 	bl	800a720 <rcutils_allocator_is_valid>
 8016f1c:	b178      	cbz	r0, 8016f3e <rmw_enclave_options_copy+0x36>
 8016f1e:	f104 030c 	add.w	r3, r4, #12
 8016f22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016f26:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016f2a:	4628      	mov	r0, r5
 8016f2c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016f30:	f7fb fb46 	bl	80125c0 <rcutils_strdup>
 8016f34:	b140      	cbz	r0, 8016f48 <rmw_enclave_options_copy+0x40>
 8016f36:	6030      	str	r0, [r6, #0]
 8016f38:	2000      	movs	r0, #0
 8016f3a:	b002      	add	sp, #8
 8016f3c:	bd70      	pop	{r4, r5, r6, pc}
 8016f3e:	200b      	movs	r0, #11
 8016f40:	b002      	add	sp, #8
 8016f42:	bd70      	pop	{r4, r5, r6, pc}
 8016f44:	200b      	movs	r0, #11
 8016f46:	4770      	bx	lr
 8016f48:	200a      	movs	r0, #10
 8016f4a:	e7f6      	b.n	8016f3a <rmw_enclave_options_copy+0x32>

08016f4c <rmw_enclave_options_fini>:
 8016f4c:	b170      	cbz	r0, 8016f6c <rmw_enclave_options_fini+0x20>
 8016f4e:	b538      	push	{r3, r4, r5, lr}
 8016f50:	4605      	mov	r5, r0
 8016f52:	4608      	mov	r0, r1
 8016f54:	460c      	mov	r4, r1
 8016f56:	f7f3 fbe3 	bl	800a720 <rcutils_allocator_is_valid>
 8016f5a:	b128      	cbz	r0, 8016f68 <rmw_enclave_options_fini+0x1c>
 8016f5c:	4628      	mov	r0, r5
 8016f5e:	6863      	ldr	r3, [r4, #4]
 8016f60:	6921      	ldr	r1, [r4, #16]
 8016f62:	4798      	blx	r3
 8016f64:	2000      	movs	r0, #0
 8016f66:	bd38      	pop	{r3, r4, r5, pc}
 8016f68:	200b      	movs	r0, #11
 8016f6a:	bd38      	pop	{r3, r4, r5, pc}
 8016f6c:	200b      	movs	r0, #11
 8016f6e:	4770      	bx	lr

08016f70 <rmw_get_default_security_options>:
 8016f70:	2200      	movs	r2, #0
 8016f72:	7002      	strb	r2, [r0, #0]
 8016f74:	6042      	str	r2, [r0, #4]
 8016f76:	4770      	bx	lr

08016f78 <on_status>:
 8016f78:	b082      	sub	sp, #8
 8016f7a:	b002      	add	sp, #8
 8016f7c:	4770      	bx	lr
 8016f7e:	bf00      	nop

08016f80 <on_topic>:
 8016f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f84:	4a22      	ldr	r2, [pc, #136]	@ (8017010 <on_topic+0x90>)
 8016f86:	b094      	sub	sp, #80	@ 0x50
 8016f88:	6812      	ldr	r2, [r2, #0]
 8016f8a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8016f8c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016f90:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8016f94:	b3c2      	cbz	r2, 8017008 <on_topic+0x88>
 8016f96:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8016f9a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8016f9e:	e001      	b.n	8016fa4 <on_topic+0x24>
 8016fa0:	6852      	ldr	r2, [r2, #4]
 8016fa2:	b38a      	cbz	r2, 8017008 <on_topic+0x88>
 8016fa4:	6894      	ldr	r4, [r2, #8]
 8016fa6:	8aa3      	ldrh	r3, [r4, #20]
 8016fa8:	428b      	cmp	r3, r1
 8016faa:	d1f9      	bne.n	8016fa0 <on_topic+0x20>
 8016fac:	7da3      	ldrb	r3, [r4, #22]
 8016fae:	4283      	cmp	r3, r0
 8016fb0:	d1f6      	bne.n	8016fa0 <on_topic+0x20>
 8016fb2:	2248      	movs	r2, #72	@ 0x48
 8016fb4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016fb8:	4668      	mov	r0, sp
 8016fba:	f001 f810 	bl	8017fde <memcpy>
 8016fbe:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8016fc2:	cb0c      	ldmia	r3, {r2, r3}
 8016fc4:	4620      	mov	r0, r4
 8016fc6:	f7f4 f803 	bl	800afd0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016fca:	4607      	mov	r7, r0
 8016fcc:	b1e0      	cbz	r0, 8017008 <on_topic+0x88>
 8016fce:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016fd2:	4632      	mov	r2, r6
 8016fd4:	4628      	mov	r0, r5
 8016fd6:	f108 0110 	add.w	r1, r8, #16
 8016fda:	f7f5 f869 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 8016fde:	b930      	cbnz	r0, 8016fee <on_topic+0x6e>
 8016fe0:	480c      	ldr	r0, [pc, #48]	@ (8017014 <on_topic+0x94>)
 8016fe2:	4639      	mov	r1, r7
 8016fe4:	b014      	add	sp, #80	@ 0x50
 8016fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fea:	f7fb be73 	b.w	8012cd4 <put_memory>
 8016fee:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8016ff2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8016ff6:	f7f3 fde9 	bl	800abcc <rmw_uros_epoch_nanos>
 8016ffa:	2305      	movs	r3, #5
 8016ffc:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8017000:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017004:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8017008:	b014      	add	sp, #80	@ 0x50
 801700a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801700e:	bf00      	nop
 8017010:	2000ebc0 	.word	0x2000ebc0
 8017014:	2000e410 	.word	0x2000e410

08017018 <on_request>:
 8017018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801701c:	4823      	ldr	r0, [pc, #140]	@ (80170ac <on_request+0x94>)
 801701e:	b094      	sub	sp, #80	@ 0x50
 8017020:	6800      	ldr	r0, [r0, #0]
 8017022:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017024:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017028:	9113      	str	r1, [sp, #76]	@ 0x4c
 801702a:	2800      	cmp	r0, #0
 801702c:	d03b      	beq.n	80170a6 <on_request+0x8e>
 801702e:	461d      	mov	r5, r3
 8017030:	e001      	b.n	8017036 <on_request+0x1e>
 8017032:	6840      	ldr	r0, [r0, #4]
 8017034:	b3b8      	cbz	r0, 80170a6 <on_request+0x8e>
 8017036:	6884      	ldr	r4, [r0, #8]
 8017038:	8b21      	ldrh	r1, [r4, #24]
 801703a:	4291      	cmp	r1, r2
 801703c:	d1f9      	bne.n	8017032 <on_request+0x1a>
 801703e:	2248      	movs	r2, #72	@ 0x48
 8017040:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017044:	4668      	mov	r0, sp
 8017046:	f000 ffca 	bl	8017fde <memcpy>
 801704a:	f104 0320 	add.w	r3, r4, #32
 801704e:	cb0c      	ldmia	r3, {r2, r3}
 8017050:	4620      	mov	r0, r4
 8017052:	f7f3 ffbd 	bl	800afd0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017056:	4680      	mov	r8, r0
 8017058:	b328      	cbz	r0, 80170a6 <on_request+0x8e>
 801705a:	4638      	mov	r0, r7
 801705c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017060:	4632      	mov	r2, r6
 8017062:	f107 0110 	add.w	r1, r7, #16
 8017066:	f7f5 f823 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 801706a:	b930      	cbnz	r0, 801707a <on_request+0x62>
 801706c:	4810      	ldr	r0, [pc, #64]	@ (80170b0 <on_request+0x98>)
 801706e:	4641      	mov	r1, r8
 8017070:	b014      	add	sp, #80	@ 0x50
 8017072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017076:	f7fb be2d 	b.w	8012cd4 <put_memory>
 801707a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801707c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8017080:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017084:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017088:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801708c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017090:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017094:	f7f3 fd9a 	bl	800abcc <rmw_uros_epoch_nanos>
 8017098:	2303      	movs	r3, #3
 801709a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801709e:	e942 0102 	strd	r0, r1, [r2, #-8]
 80170a2:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80170a6:	b014      	add	sp, #80	@ 0x50
 80170a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170ac:	2000e778 	.word	0x2000e778
 80170b0:	2000e410 	.word	0x2000e410

080170b4 <on_reply>:
 80170b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170b8:	4821      	ldr	r0, [pc, #132]	@ (8017140 <on_reply+0x8c>)
 80170ba:	b094      	sub	sp, #80	@ 0x50
 80170bc:	6800      	ldr	r0, [r0, #0]
 80170be:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80170c0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80170c4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80170c6:	b3b8      	cbz	r0, 8017138 <on_reply+0x84>
 80170c8:	461d      	mov	r5, r3
 80170ca:	e001      	b.n	80170d0 <on_reply+0x1c>
 80170cc:	6840      	ldr	r0, [r0, #4]
 80170ce:	b398      	cbz	r0, 8017138 <on_reply+0x84>
 80170d0:	6884      	ldr	r4, [r0, #8]
 80170d2:	8b21      	ldrh	r1, [r4, #24]
 80170d4:	4291      	cmp	r1, r2
 80170d6:	d1f9      	bne.n	80170cc <on_reply+0x18>
 80170d8:	2248      	movs	r2, #72	@ 0x48
 80170da:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80170de:	4668      	mov	r0, sp
 80170e0:	f000 ff7d 	bl	8017fde <memcpy>
 80170e4:	f104 0320 	add.w	r3, r4, #32
 80170e8:	cb0c      	ldmia	r3, {r2, r3}
 80170ea:	4620      	mov	r0, r4
 80170ec:	f7f3 ff70 	bl	800afd0 <rmw_uxrce_get_static_input_buffer_for_entity>
 80170f0:	4680      	mov	r8, r0
 80170f2:	b308      	cbz	r0, 8017138 <on_reply+0x84>
 80170f4:	4638      	mov	r0, r7
 80170f6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80170fa:	4632      	mov	r2, r6
 80170fc:	f107 0110 	add.w	r1, r7, #16
 8017100:	f7f4 ffd6 	bl	800c0b0 <ucdr_deserialize_array_uint8_t>
 8017104:	b930      	cbnz	r0, 8017114 <on_reply+0x60>
 8017106:	480f      	ldr	r0, [pc, #60]	@ (8017144 <on_reply+0x90>)
 8017108:	4641      	mov	r1, r8
 801710a:	b014      	add	sp, #80	@ 0x50
 801710c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017110:	f7fb bde0 	b.w	8012cd4 <put_memory>
 8017114:	2200      	movs	r2, #0
 8017116:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801711a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801711e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017122:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8017126:	f7f3 fd51 	bl	800abcc <rmw_uros_epoch_nanos>
 801712a:	2304      	movs	r3, #4
 801712c:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017130:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017134:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017138:	b014      	add	sp, #80	@ 0x50
 801713a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801713e:	bf00      	nop
 8017140:	2000e6a0 	.word	0x2000e6a0
 8017144:	2000e410 	.word	0x2000e410

08017148 <rmw_create_guard_condition>:
 8017148:	b538      	push	{r3, r4, r5, lr}
 801714a:	4605      	mov	r5, r0
 801714c:	4807      	ldr	r0, [pc, #28]	@ (801716c <rmw_create_guard_condition+0x24>)
 801714e:	f7fb fdb1 	bl	8012cb4 <get_memory>
 8017152:	b148      	cbz	r0, 8017168 <rmw_create_guard_condition+0x20>
 8017154:	6884      	ldr	r4, [r0, #8]
 8017156:	2300      	movs	r3, #0
 8017158:	7423      	strb	r3, [r4, #16]
 801715a:	61e5      	str	r5, [r4, #28]
 801715c:	f7fb fe30 	bl	8012dc0 <rmw_get_implementation_identifier>
 8017160:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017164:	f104 0014 	add.w	r0, r4, #20
 8017168:	bd38      	pop	{r3, r4, r5, pc}
 801716a:	bf00      	nop
 801716c:	2000c1ec 	.word	0x2000c1ec

08017170 <rmw_destroy_guard_condition>:
 8017170:	b508      	push	{r3, lr}
 8017172:	4b08      	ldr	r3, [pc, #32]	@ (8017194 <rmw_destroy_guard_condition+0x24>)
 8017174:	6819      	ldr	r1, [r3, #0]
 8017176:	b911      	cbnz	r1, 801717e <rmw_destroy_guard_condition+0xe>
 8017178:	e00a      	b.n	8017190 <rmw_destroy_guard_condition+0x20>
 801717a:	6849      	ldr	r1, [r1, #4]
 801717c:	b141      	cbz	r1, 8017190 <rmw_destroy_guard_condition+0x20>
 801717e:	688b      	ldr	r3, [r1, #8]
 8017180:	3314      	adds	r3, #20
 8017182:	4298      	cmp	r0, r3
 8017184:	d1f9      	bne.n	801717a <rmw_destroy_guard_condition+0xa>
 8017186:	4803      	ldr	r0, [pc, #12]	@ (8017194 <rmw_destroy_guard_condition+0x24>)
 8017188:	f7fb fda4 	bl	8012cd4 <put_memory>
 801718c:	2000      	movs	r0, #0
 801718e:	bd08      	pop	{r3, pc}
 8017190:	2001      	movs	r0, #1
 8017192:	bd08      	pop	{r3, pc}
 8017194:	2000c1ec 	.word	0x2000c1ec

08017198 <rmw_trigger_guard_condition>:
 8017198:	b160      	cbz	r0, 80171b4 <rmw_trigger_guard_condition+0x1c>
 801719a:	b510      	push	{r4, lr}
 801719c:	4604      	mov	r4, r0
 801719e:	6800      	ldr	r0, [r0, #0]
 80171a0:	f7f4 f89a 	bl	800b2d8 <is_uxrce_rmw_identifier_valid>
 80171a4:	b908      	cbnz	r0, 80171aa <rmw_trigger_guard_condition+0x12>
 80171a6:	2001      	movs	r0, #1
 80171a8:	bd10      	pop	{r4, pc}
 80171aa:	6863      	ldr	r3, [r4, #4]
 80171ac:	2201      	movs	r2, #1
 80171ae:	741a      	strb	r2, [r3, #16]
 80171b0:	2000      	movs	r0, #0
 80171b2:	bd10      	pop	{r4, pc}
 80171b4:	2001      	movs	r0, #1
 80171b6:	4770      	bx	lr

080171b8 <geometry_msgs__msg__Pose__init>:
 80171b8:	b1d8      	cbz	r0, 80171f2 <geometry_msgs__msg__Pose__init+0x3a>
 80171ba:	b538      	push	{r3, r4, r5, lr}
 80171bc:	4604      	mov	r4, r0
 80171be:	f000 f8df 	bl	8017380 <geometry_msgs__msg__Point__init>
 80171c2:	b130      	cbz	r0, 80171d2 <geometry_msgs__msg__Pose__init+0x1a>
 80171c4:	f104 0518 	add.w	r5, r4, #24
 80171c8:	4628      	mov	r0, r5
 80171ca:	f000 f821 	bl	8017210 <geometry_msgs__msg__Quaternion__init>
 80171ce:	b148      	cbz	r0, 80171e4 <geometry_msgs__msg__Pose__init+0x2c>
 80171d0:	bd38      	pop	{r3, r4, r5, pc}
 80171d2:	4620      	mov	r0, r4
 80171d4:	f000 f8d8 	bl	8017388 <geometry_msgs__msg__Point__fini>
 80171d8:	f104 0018 	add.w	r0, r4, #24
 80171dc:	f000 f82c 	bl	8017238 <geometry_msgs__msg__Quaternion__fini>
 80171e0:	2000      	movs	r0, #0
 80171e2:	bd38      	pop	{r3, r4, r5, pc}
 80171e4:	4620      	mov	r0, r4
 80171e6:	f000 f8cf 	bl	8017388 <geometry_msgs__msg__Point__fini>
 80171ea:	4628      	mov	r0, r5
 80171ec:	f000 f824 	bl	8017238 <geometry_msgs__msg__Quaternion__fini>
 80171f0:	e7f6      	b.n	80171e0 <geometry_msgs__msg__Pose__init+0x28>
 80171f2:	2000      	movs	r0, #0
 80171f4:	4770      	bx	lr
 80171f6:	bf00      	nop

080171f8 <geometry_msgs__msg__Pose__fini>:
 80171f8:	b148      	cbz	r0, 801720e <geometry_msgs__msg__Pose__fini+0x16>
 80171fa:	b510      	push	{r4, lr}
 80171fc:	4604      	mov	r4, r0
 80171fe:	f000 f8c3 	bl	8017388 <geometry_msgs__msg__Point__fini>
 8017202:	f104 0018 	add.w	r0, r4, #24
 8017206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801720a:	f000 b815 	b.w	8017238 <geometry_msgs__msg__Quaternion__fini>
 801720e:	4770      	bx	lr

08017210 <geometry_msgs__msg__Quaternion__init>:
 8017210:	b160      	cbz	r0, 801722c <geometry_msgs__msg__Quaternion__init+0x1c>
 8017212:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8017230 <geometry_msgs__msg__Quaternion__init+0x20>
 8017216:	2200      	movs	r2, #0
 8017218:	2300      	movs	r3, #0
 801721a:	e9c0 2300 	strd	r2, r3, [r0]
 801721e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017222:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017226:	ed80 7b06 	vstr	d7, [r0, #24]
 801722a:	2001      	movs	r0, #1
 801722c:	4770      	bx	lr
 801722e:	bf00      	nop
 8017230:	00000000 	.word	0x00000000
 8017234:	3ff00000 	.word	0x3ff00000

08017238 <geometry_msgs__msg__Quaternion__fini>:
 8017238:	4770      	bx	lr
 801723a:	bf00      	nop

0801723c <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_init_function>:
 801723c:	f000 b8a0 	b.w	8017380 <geometry_msgs__msg__Point__init>

08017240 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_fini_function>:
 8017240:	f000 b8a2 	b.w	8017388 <geometry_msgs__msg__Point__fini>

08017244 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 8017244:	4b04      	ldr	r3, [pc, #16]	@ (8017258 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8017246:	681a      	ldr	r2, [r3, #0]
 8017248:	b10a      	cbz	r2, 801724e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0xa>
 801724a:	4803      	ldr	r0, [pc, #12]	@ (8017258 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 801724c:	4770      	bx	lr
 801724e:	4a03      	ldr	r2, [pc, #12]	@ (801725c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x18>)
 8017250:	4801      	ldr	r0, [pc, #4]	@ (8017258 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8017252:	6812      	ldr	r2, [r2, #0]
 8017254:	601a      	str	r2, [r3, #0]
 8017256:	4770      	bx	lr
 8017258:	20002d34 	.word	0x20002d34
 801725c:	2000037c 	.word	0x2000037c

08017260 <get_serialized_size_geometry_msgs__msg__Point>:
 8017260:	b1b8      	cbz	r0, 8017292 <get_serialized_size_geometry_msgs__msg__Point+0x32>
 8017262:	b570      	push	{r4, r5, r6, lr}
 8017264:	460d      	mov	r5, r1
 8017266:	4628      	mov	r0, r5
 8017268:	2108      	movs	r1, #8
 801726a:	f7f2 f895 	bl	8009398 <ucdr_alignment>
 801726e:	2108      	movs	r1, #8
 8017270:	186e      	adds	r6, r5, r1
 8017272:	4406      	add	r6, r0
 8017274:	4630      	mov	r0, r6
 8017276:	f7f2 f88f 	bl	8009398 <ucdr_alignment>
 801727a:	f100 0408 	add.w	r4, r0, #8
 801727e:	4434      	add	r4, r6
 8017280:	2108      	movs	r1, #8
 8017282:	4620      	mov	r0, r4
 8017284:	f7f2 f888 	bl	8009398 <ucdr_alignment>
 8017288:	f1c5 0508 	rsb	r5, r5, #8
 801728c:	4405      	add	r5, r0
 801728e:	1928      	adds	r0, r5, r4
 8017290:	bd70      	pop	{r4, r5, r6, pc}
 8017292:	4770      	bx	lr

08017294 <_Point__cdr_deserialize>:
 8017294:	b538      	push	{r3, r4, r5, lr}
 8017296:	460c      	mov	r4, r1
 8017298:	b171      	cbz	r1, 80172b8 <_Point__cdr_deserialize+0x24>
 801729a:	4605      	mov	r5, r0
 801729c:	f7f1 fe9e 	bl	8008fdc <ucdr_deserialize_double>
 80172a0:	f104 0108 	add.w	r1, r4, #8
 80172a4:	4628      	mov	r0, r5
 80172a6:	f7f1 fe99 	bl	8008fdc <ucdr_deserialize_double>
 80172aa:	f104 0110 	add.w	r1, r4, #16
 80172ae:	4628      	mov	r0, r5
 80172b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80172b4:	f7f1 be92 	b.w	8008fdc <ucdr_deserialize_double>
 80172b8:	4608      	mov	r0, r1
 80172ba:	bd38      	pop	{r3, r4, r5, pc}

080172bc <_Point__cdr_serialize>:
 80172bc:	b198      	cbz	r0, 80172e6 <_Point__cdr_serialize+0x2a>
 80172be:	b538      	push	{r3, r4, r5, lr}
 80172c0:	ed90 0b00 	vldr	d0, [r0]
 80172c4:	460d      	mov	r5, r1
 80172c6:	4604      	mov	r4, r0
 80172c8:	4608      	mov	r0, r1
 80172ca:	f7f1 fcf7 	bl	8008cbc <ucdr_serialize_double>
 80172ce:	ed94 0b02 	vldr	d0, [r4, #8]
 80172d2:	4628      	mov	r0, r5
 80172d4:	f7f1 fcf2 	bl	8008cbc <ucdr_serialize_double>
 80172d8:	ed94 0b04 	vldr	d0, [r4, #16]
 80172dc:	4628      	mov	r0, r5
 80172de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80172e2:	f7f1 bceb 	b.w	8008cbc <ucdr_serialize_double>
 80172e6:	4770      	bx	lr

080172e8 <_Point__get_serialized_size>:
 80172e8:	b1a0      	cbz	r0, 8017314 <_Point__get_serialized_size+0x2c>
 80172ea:	b538      	push	{r3, r4, r5, lr}
 80172ec:	2108      	movs	r1, #8
 80172ee:	2000      	movs	r0, #0
 80172f0:	f7f2 f852 	bl	8009398 <ucdr_alignment>
 80172f4:	f100 0508 	add.w	r5, r0, #8
 80172f8:	2108      	movs	r1, #8
 80172fa:	4628      	mov	r0, r5
 80172fc:	f7f2 f84c 	bl	8009398 <ucdr_alignment>
 8017300:	f100 0408 	add.w	r4, r0, #8
 8017304:	442c      	add	r4, r5
 8017306:	2108      	movs	r1, #8
 8017308:	4620      	mov	r0, r4
 801730a:	f7f2 f845 	bl	8009398 <ucdr_alignment>
 801730e:	3008      	adds	r0, #8
 8017310:	4420      	add	r0, r4
 8017312:	bd38      	pop	{r3, r4, r5, pc}
 8017314:	4770      	bx	lr
 8017316:	bf00      	nop

08017318 <_Point__max_serialized_size>:
 8017318:	b538      	push	{r3, r4, r5, lr}
 801731a:	2108      	movs	r1, #8
 801731c:	2000      	movs	r0, #0
 801731e:	f7f2 f83b 	bl	8009398 <ucdr_alignment>
 8017322:	f100 0508 	add.w	r5, r0, #8
 8017326:	2108      	movs	r1, #8
 8017328:	4628      	mov	r0, r5
 801732a:	f7f2 f835 	bl	8009398 <ucdr_alignment>
 801732e:	f100 0408 	add.w	r4, r0, #8
 8017332:	442c      	add	r4, r5
 8017334:	2108      	movs	r1, #8
 8017336:	4620      	mov	r0, r4
 8017338:	f7f2 f82e 	bl	8009398 <ucdr_alignment>
 801733c:	3008      	adds	r0, #8
 801733e:	4420      	add	r0, r4
 8017340:	bd38      	pop	{r3, r4, r5, pc}
 8017342:	bf00      	nop

08017344 <max_serialized_size_geometry_msgs__msg__Point>:
 8017344:	b570      	push	{r4, r5, r6, lr}
 8017346:	2301      	movs	r3, #1
 8017348:	460c      	mov	r4, r1
 801734a:	7003      	strb	r3, [r0, #0]
 801734c:	2108      	movs	r1, #8
 801734e:	4620      	mov	r0, r4
 8017350:	f7f2 f822 	bl	8009398 <ucdr_alignment>
 8017354:	2108      	movs	r1, #8
 8017356:	1863      	adds	r3, r4, r1
 8017358:	18c6      	adds	r6, r0, r3
 801735a:	4630      	mov	r0, r6
 801735c:	f7f2 f81c 	bl	8009398 <ucdr_alignment>
 8017360:	f100 0508 	add.w	r5, r0, #8
 8017364:	4435      	add	r5, r6
 8017366:	2108      	movs	r1, #8
 8017368:	4628      	mov	r0, r5
 801736a:	f7f2 f815 	bl	8009398 <ucdr_alignment>
 801736e:	f1c4 0408 	rsb	r4, r4, #8
 8017372:	4420      	add	r0, r4
 8017374:	4428      	add	r0, r5
 8017376:	bd70      	pop	{r4, r5, r6, pc}

08017378 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 8017378:	4800      	ldr	r0, [pc, #0]	@ (801737c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x4>)
 801737a:	4770      	bx	lr
 801737c:	20002e00 	.word	0x20002e00

08017380 <geometry_msgs__msg__Point__init>:
 8017380:	3800      	subs	r0, #0
 8017382:	bf18      	it	ne
 8017384:	2001      	movne	r0, #1
 8017386:	4770      	bx	lr

08017388 <geometry_msgs__msg__Point__fini>:
 8017388:	4770      	bx	lr
 801738a:	bf00      	nop

0801738c <calloc>:
 801738c:	4b02      	ldr	r3, [pc, #8]	@ (8017398 <calloc+0xc>)
 801738e:	460a      	mov	r2, r1
 8017390:	4601      	mov	r1, r0
 8017392:	6818      	ldr	r0, [r3, #0]
 8017394:	f000 b802 	b.w	801739c <_calloc_r>
 8017398:	20002e40 	.word	0x20002e40

0801739c <_calloc_r>:
 801739c:	b570      	push	{r4, r5, r6, lr}
 801739e:	fba1 5402 	umull	r5, r4, r1, r2
 80173a2:	b934      	cbnz	r4, 80173b2 <_calloc_r+0x16>
 80173a4:	4629      	mov	r1, r5
 80173a6:	f000 f899 	bl	80174dc <_malloc_r>
 80173aa:	4606      	mov	r6, r0
 80173ac:	b928      	cbnz	r0, 80173ba <_calloc_r+0x1e>
 80173ae:	4630      	mov	r0, r6
 80173b0:	bd70      	pop	{r4, r5, r6, pc}
 80173b2:	220c      	movs	r2, #12
 80173b4:	6002      	str	r2, [r0, #0]
 80173b6:	2600      	movs	r6, #0
 80173b8:	e7f9      	b.n	80173ae <_calloc_r+0x12>
 80173ba:	462a      	mov	r2, r5
 80173bc:	4621      	mov	r1, r4
 80173be:	f000 fd33 	bl	8017e28 <memset>
 80173c2:	e7f4      	b.n	80173ae <_calloc_r+0x12>

080173c4 <exit>:
 80173c4:	b508      	push	{r3, lr}
 80173c6:	4b06      	ldr	r3, [pc, #24]	@ (80173e0 <exit+0x1c>)
 80173c8:	4604      	mov	r4, r0
 80173ca:	b113      	cbz	r3, 80173d2 <exit+0xe>
 80173cc:	2100      	movs	r1, #0
 80173ce:	f3af 8000 	nop.w
 80173d2:	4b04      	ldr	r3, [pc, #16]	@ (80173e4 <exit+0x20>)
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	b103      	cbz	r3, 80173da <exit+0x16>
 80173d8:	4798      	blx	r3
 80173da:	4620      	mov	r0, r4
 80173dc:	f7ea fe0a 	bl	8001ff4 <_exit>
 80173e0:	00000000 	.word	0x00000000
 80173e4:	2001135c 	.word	0x2001135c

080173e8 <getenv>:
 80173e8:	b507      	push	{r0, r1, r2, lr}
 80173ea:	4b04      	ldr	r3, [pc, #16]	@ (80173fc <getenv+0x14>)
 80173ec:	4601      	mov	r1, r0
 80173ee:	aa01      	add	r2, sp, #4
 80173f0:	6818      	ldr	r0, [r3, #0]
 80173f2:	f000 f805 	bl	8017400 <_findenv_r>
 80173f6:	b003      	add	sp, #12
 80173f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80173fc:	20002e40 	.word	0x20002e40

08017400 <_findenv_r>:
 8017400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017404:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017474 <_findenv_r+0x74>
 8017408:	4606      	mov	r6, r0
 801740a:	4689      	mov	r9, r1
 801740c:	4617      	mov	r7, r2
 801740e:	f000 fe13 	bl	8018038 <__env_lock>
 8017412:	f8da 4000 	ldr.w	r4, [sl]
 8017416:	b134      	cbz	r4, 8017426 <_findenv_r+0x26>
 8017418:	464b      	mov	r3, r9
 801741a:	4698      	mov	r8, r3
 801741c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017420:	b13a      	cbz	r2, 8017432 <_findenv_r+0x32>
 8017422:	2a3d      	cmp	r2, #61	@ 0x3d
 8017424:	d1f9      	bne.n	801741a <_findenv_r+0x1a>
 8017426:	4630      	mov	r0, r6
 8017428:	f000 fe0c 	bl	8018044 <__env_unlock>
 801742c:	2000      	movs	r0, #0
 801742e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017432:	eba8 0809 	sub.w	r8, r8, r9
 8017436:	46a3      	mov	fp, r4
 8017438:	f854 0b04 	ldr.w	r0, [r4], #4
 801743c:	2800      	cmp	r0, #0
 801743e:	d0f2      	beq.n	8017426 <_findenv_r+0x26>
 8017440:	4642      	mov	r2, r8
 8017442:	4649      	mov	r1, r9
 8017444:	f000 fd05 	bl	8017e52 <strncmp>
 8017448:	2800      	cmp	r0, #0
 801744a:	d1f4      	bne.n	8017436 <_findenv_r+0x36>
 801744c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017450:	eb03 0508 	add.w	r5, r3, r8
 8017454:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017458:	2b3d      	cmp	r3, #61	@ 0x3d
 801745a:	d1ec      	bne.n	8017436 <_findenv_r+0x36>
 801745c:	f8da 3000 	ldr.w	r3, [sl]
 8017460:	ebab 0303 	sub.w	r3, fp, r3
 8017464:	109b      	asrs	r3, r3, #2
 8017466:	4630      	mov	r0, r6
 8017468:	603b      	str	r3, [r7, #0]
 801746a:	f000 fdeb 	bl	8018044 <__env_unlock>
 801746e:	1c68      	adds	r0, r5, #1
 8017470:	e7dd      	b.n	801742e <_findenv_r+0x2e>
 8017472:	bf00      	nop
 8017474:	20000010 	.word	0x20000010

08017478 <malloc>:
 8017478:	4b02      	ldr	r3, [pc, #8]	@ (8017484 <malloc+0xc>)
 801747a:	4601      	mov	r1, r0
 801747c:	6818      	ldr	r0, [r3, #0]
 801747e:	f000 b82d 	b.w	80174dc <_malloc_r>
 8017482:	bf00      	nop
 8017484:	20002e40 	.word	0x20002e40

08017488 <free>:
 8017488:	4b02      	ldr	r3, [pc, #8]	@ (8017494 <free+0xc>)
 801748a:	4601      	mov	r1, r0
 801748c:	6818      	ldr	r0, [r3, #0]
 801748e:	f000 bddf 	b.w	8018050 <_free_r>
 8017492:	bf00      	nop
 8017494:	20002e40 	.word	0x20002e40

08017498 <sbrk_aligned>:
 8017498:	b570      	push	{r4, r5, r6, lr}
 801749a:	4e0f      	ldr	r6, [pc, #60]	@ (80174d8 <sbrk_aligned+0x40>)
 801749c:	460c      	mov	r4, r1
 801749e:	6831      	ldr	r1, [r6, #0]
 80174a0:	4605      	mov	r5, r0
 80174a2:	b911      	cbnz	r1, 80174aa <sbrk_aligned+0x12>
 80174a4:	f000 fd44 	bl	8017f30 <_sbrk_r>
 80174a8:	6030      	str	r0, [r6, #0]
 80174aa:	4621      	mov	r1, r4
 80174ac:	4628      	mov	r0, r5
 80174ae:	f000 fd3f 	bl	8017f30 <_sbrk_r>
 80174b2:	1c43      	adds	r3, r0, #1
 80174b4:	d103      	bne.n	80174be <sbrk_aligned+0x26>
 80174b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80174ba:	4620      	mov	r0, r4
 80174bc:	bd70      	pop	{r4, r5, r6, pc}
 80174be:	1cc4      	adds	r4, r0, #3
 80174c0:	f024 0403 	bic.w	r4, r4, #3
 80174c4:	42a0      	cmp	r0, r4
 80174c6:	d0f8      	beq.n	80174ba <sbrk_aligned+0x22>
 80174c8:	1a21      	subs	r1, r4, r0
 80174ca:	4628      	mov	r0, r5
 80174cc:	f000 fd30 	bl	8017f30 <_sbrk_r>
 80174d0:	3001      	adds	r0, #1
 80174d2:	d1f2      	bne.n	80174ba <sbrk_aligned+0x22>
 80174d4:	e7ef      	b.n	80174b6 <sbrk_aligned+0x1e>
 80174d6:	bf00      	nop
 80174d8:	2001121c 	.word	0x2001121c

080174dc <_malloc_r>:
 80174dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174e0:	1ccd      	adds	r5, r1, #3
 80174e2:	f025 0503 	bic.w	r5, r5, #3
 80174e6:	3508      	adds	r5, #8
 80174e8:	2d0c      	cmp	r5, #12
 80174ea:	bf38      	it	cc
 80174ec:	250c      	movcc	r5, #12
 80174ee:	2d00      	cmp	r5, #0
 80174f0:	4606      	mov	r6, r0
 80174f2:	db01      	blt.n	80174f8 <_malloc_r+0x1c>
 80174f4:	42a9      	cmp	r1, r5
 80174f6:	d904      	bls.n	8017502 <_malloc_r+0x26>
 80174f8:	230c      	movs	r3, #12
 80174fa:	6033      	str	r3, [r6, #0]
 80174fc:	2000      	movs	r0, #0
 80174fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017502:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80175d8 <_malloc_r+0xfc>
 8017506:	f000 f869 	bl	80175dc <__malloc_lock>
 801750a:	f8d8 3000 	ldr.w	r3, [r8]
 801750e:	461c      	mov	r4, r3
 8017510:	bb44      	cbnz	r4, 8017564 <_malloc_r+0x88>
 8017512:	4629      	mov	r1, r5
 8017514:	4630      	mov	r0, r6
 8017516:	f7ff ffbf 	bl	8017498 <sbrk_aligned>
 801751a:	1c43      	adds	r3, r0, #1
 801751c:	4604      	mov	r4, r0
 801751e:	d158      	bne.n	80175d2 <_malloc_r+0xf6>
 8017520:	f8d8 4000 	ldr.w	r4, [r8]
 8017524:	4627      	mov	r7, r4
 8017526:	2f00      	cmp	r7, #0
 8017528:	d143      	bne.n	80175b2 <_malloc_r+0xd6>
 801752a:	2c00      	cmp	r4, #0
 801752c:	d04b      	beq.n	80175c6 <_malloc_r+0xea>
 801752e:	6823      	ldr	r3, [r4, #0]
 8017530:	4639      	mov	r1, r7
 8017532:	4630      	mov	r0, r6
 8017534:	eb04 0903 	add.w	r9, r4, r3
 8017538:	f000 fcfa 	bl	8017f30 <_sbrk_r>
 801753c:	4581      	cmp	r9, r0
 801753e:	d142      	bne.n	80175c6 <_malloc_r+0xea>
 8017540:	6821      	ldr	r1, [r4, #0]
 8017542:	1a6d      	subs	r5, r5, r1
 8017544:	4629      	mov	r1, r5
 8017546:	4630      	mov	r0, r6
 8017548:	f7ff ffa6 	bl	8017498 <sbrk_aligned>
 801754c:	3001      	adds	r0, #1
 801754e:	d03a      	beq.n	80175c6 <_malloc_r+0xea>
 8017550:	6823      	ldr	r3, [r4, #0]
 8017552:	442b      	add	r3, r5
 8017554:	6023      	str	r3, [r4, #0]
 8017556:	f8d8 3000 	ldr.w	r3, [r8]
 801755a:	685a      	ldr	r2, [r3, #4]
 801755c:	bb62      	cbnz	r2, 80175b8 <_malloc_r+0xdc>
 801755e:	f8c8 7000 	str.w	r7, [r8]
 8017562:	e00f      	b.n	8017584 <_malloc_r+0xa8>
 8017564:	6822      	ldr	r2, [r4, #0]
 8017566:	1b52      	subs	r2, r2, r5
 8017568:	d420      	bmi.n	80175ac <_malloc_r+0xd0>
 801756a:	2a0b      	cmp	r2, #11
 801756c:	d917      	bls.n	801759e <_malloc_r+0xc2>
 801756e:	1961      	adds	r1, r4, r5
 8017570:	42a3      	cmp	r3, r4
 8017572:	6025      	str	r5, [r4, #0]
 8017574:	bf18      	it	ne
 8017576:	6059      	strne	r1, [r3, #4]
 8017578:	6863      	ldr	r3, [r4, #4]
 801757a:	bf08      	it	eq
 801757c:	f8c8 1000 	streq.w	r1, [r8]
 8017580:	5162      	str	r2, [r4, r5]
 8017582:	604b      	str	r3, [r1, #4]
 8017584:	4630      	mov	r0, r6
 8017586:	f000 f82f 	bl	80175e8 <__malloc_unlock>
 801758a:	f104 000b 	add.w	r0, r4, #11
 801758e:	1d23      	adds	r3, r4, #4
 8017590:	f020 0007 	bic.w	r0, r0, #7
 8017594:	1ac2      	subs	r2, r0, r3
 8017596:	bf1c      	itt	ne
 8017598:	1a1b      	subne	r3, r3, r0
 801759a:	50a3      	strne	r3, [r4, r2]
 801759c:	e7af      	b.n	80174fe <_malloc_r+0x22>
 801759e:	6862      	ldr	r2, [r4, #4]
 80175a0:	42a3      	cmp	r3, r4
 80175a2:	bf0c      	ite	eq
 80175a4:	f8c8 2000 	streq.w	r2, [r8]
 80175a8:	605a      	strne	r2, [r3, #4]
 80175aa:	e7eb      	b.n	8017584 <_malloc_r+0xa8>
 80175ac:	4623      	mov	r3, r4
 80175ae:	6864      	ldr	r4, [r4, #4]
 80175b0:	e7ae      	b.n	8017510 <_malloc_r+0x34>
 80175b2:	463c      	mov	r4, r7
 80175b4:	687f      	ldr	r7, [r7, #4]
 80175b6:	e7b6      	b.n	8017526 <_malloc_r+0x4a>
 80175b8:	461a      	mov	r2, r3
 80175ba:	685b      	ldr	r3, [r3, #4]
 80175bc:	42a3      	cmp	r3, r4
 80175be:	d1fb      	bne.n	80175b8 <_malloc_r+0xdc>
 80175c0:	2300      	movs	r3, #0
 80175c2:	6053      	str	r3, [r2, #4]
 80175c4:	e7de      	b.n	8017584 <_malloc_r+0xa8>
 80175c6:	230c      	movs	r3, #12
 80175c8:	6033      	str	r3, [r6, #0]
 80175ca:	4630      	mov	r0, r6
 80175cc:	f000 f80c 	bl	80175e8 <__malloc_unlock>
 80175d0:	e794      	b.n	80174fc <_malloc_r+0x20>
 80175d2:	6005      	str	r5, [r0, #0]
 80175d4:	e7d6      	b.n	8017584 <_malloc_r+0xa8>
 80175d6:	bf00      	nop
 80175d8:	20011220 	.word	0x20011220

080175dc <__malloc_lock>:
 80175dc:	4801      	ldr	r0, [pc, #4]	@ (80175e4 <__malloc_lock+0x8>)
 80175de:	f000 bcf4 	b.w	8017fca <__retarget_lock_acquire_recursive>
 80175e2:	bf00      	nop
 80175e4:	20011365 	.word	0x20011365

080175e8 <__malloc_unlock>:
 80175e8:	4801      	ldr	r0, [pc, #4]	@ (80175f0 <__malloc_unlock+0x8>)
 80175ea:	f000 bcef 	b.w	8017fcc <__retarget_lock_release_recursive>
 80175ee:	bf00      	nop
 80175f0:	20011365 	.word	0x20011365

080175f4 <srand>:
 80175f4:	b538      	push	{r3, r4, r5, lr}
 80175f6:	4b10      	ldr	r3, [pc, #64]	@ (8017638 <srand+0x44>)
 80175f8:	681d      	ldr	r5, [r3, #0]
 80175fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80175fc:	4604      	mov	r4, r0
 80175fe:	b9b3      	cbnz	r3, 801762e <srand+0x3a>
 8017600:	2018      	movs	r0, #24
 8017602:	f7ff ff39 	bl	8017478 <malloc>
 8017606:	4602      	mov	r2, r0
 8017608:	6328      	str	r0, [r5, #48]	@ 0x30
 801760a:	b920      	cbnz	r0, 8017616 <srand+0x22>
 801760c:	4b0b      	ldr	r3, [pc, #44]	@ (801763c <srand+0x48>)
 801760e:	480c      	ldr	r0, [pc, #48]	@ (8017640 <srand+0x4c>)
 8017610:	2146      	movs	r1, #70	@ 0x46
 8017612:	f000 fcf3 	bl	8017ffc <__assert_func>
 8017616:	490b      	ldr	r1, [pc, #44]	@ (8017644 <srand+0x50>)
 8017618:	4b0b      	ldr	r3, [pc, #44]	@ (8017648 <srand+0x54>)
 801761a:	e9c0 1300 	strd	r1, r3, [r0]
 801761e:	4b0b      	ldr	r3, [pc, #44]	@ (801764c <srand+0x58>)
 8017620:	6083      	str	r3, [r0, #8]
 8017622:	230b      	movs	r3, #11
 8017624:	8183      	strh	r3, [r0, #12]
 8017626:	2100      	movs	r1, #0
 8017628:	2001      	movs	r0, #1
 801762a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801762e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017630:	2200      	movs	r2, #0
 8017632:	611c      	str	r4, [r3, #16]
 8017634:	615a      	str	r2, [r3, #20]
 8017636:	bd38      	pop	{r3, r4, r5, pc}
 8017638:	20002e40 	.word	0x20002e40
 801763c:	0801a508 	.word	0x0801a508
 8017640:	0801a51f 	.word	0x0801a51f
 8017644:	abcd330e 	.word	0xabcd330e
 8017648:	e66d1234 	.word	0xe66d1234
 801764c:	0005deec 	.word	0x0005deec

08017650 <rand>:
 8017650:	4b16      	ldr	r3, [pc, #88]	@ (80176ac <rand+0x5c>)
 8017652:	b510      	push	{r4, lr}
 8017654:	681c      	ldr	r4, [r3, #0]
 8017656:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017658:	b9b3      	cbnz	r3, 8017688 <rand+0x38>
 801765a:	2018      	movs	r0, #24
 801765c:	f7ff ff0c 	bl	8017478 <malloc>
 8017660:	4602      	mov	r2, r0
 8017662:	6320      	str	r0, [r4, #48]	@ 0x30
 8017664:	b920      	cbnz	r0, 8017670 <rand+0x20>
 8017666:	4b12      	ldr	r3, [pc, #72]	@ (80176b0 <rand+0x60>)
 8017668:	4812      	ldr	r0, [pc, #72]	@ (80176b4 <rand+0x64>)
 801766a:	2152      	movs	r1, #82	@ 0x52
 801766c:	f000 fcc6 	bl	8017ffc <__assert_func>
 8017670:	4911      	ldr	r1, [pc, #68]	@ (80176b8 <rand+0x68>)
 8017672:	4b12      	ldr	r3, [pc, #72]	@ (80176bc <rand+0x6c>)
 8017674:	e9c0 1300 	strd	r1, r3, [r0]
 8017678:	4b11      	ldr	r3, [pc, #68]	@ (80176c0 <rand+0x70>)
 801767a:	6083      	str	r3, [r0, #8]
 801767c:	230b      	movs	r3, #11
 801767e:	8183      	strh	r3, [r0, #12]
 8017680:	2100      	movs	r1, #0
 8017682:	2001      	movs	r0, #1
 8017684:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017688:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801768a:	480e      	ldr	r0, [pc, #56]	@ (80176c4 <rand+0x74>)
 801768c:	690b      	ldr	r3, [r1, #16]
 801768e:	694c      	ldr	r4, [r1, #20]
 8017690:	4a0d      	ldr	r2, [pc, #52]	@ (80176c8 <rand+0x78>)
 8017692:	4358      	muls	r0, r3
 8017694:	fb02 0004 	mla	r0, r2, r4, r0
 8017698:	fba3 3202 	umull	r3, r2, r3, r2
 801769c:	3301      	adds	r3, #1
 801769e:	eb40 0002 	adc.w	r0, r0, r2
 80176a2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80176a6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80176aa:	bd10      	pop	{r4, pc}
 80176ac:	20002e40 	.word	0x20002e40
 80176b0:	0801a508 	.word	0x0801a508
 80176b4:	0801a51f 	.word	0x0801a51f
 80176b8:	abcd330e 	.word	0xabcd330e
 80176bc:	e66d1234 	.word	0xe66d1234
 80176c0:	0005deec 	.word	0x0005deec
 80176c4:	5851f42d 	.word	0x5851f42d
 80176c8:	4c957f2d 	.word	0x4c957f2d

080176cc <realloc>:
 80176cc:	4b02      	ldr	r3, [pc, #8]	@ (80176d8 <realloc+0xc>)
 80176ce:	460a      	mov	r2, r1
 80176d0:	4601      	mov	r1, r0
 80176d2:	6818      	ldr	r0, [r3, #0]
 80176d4:	f000 b802 	b.w	80176dc <_realloc_r>
 80176d8:	20002e40 	.word	0x20002e40

080176dc <_realloc_r>:
 80176dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176e0:	4607      	mov	r7, r0
 80176e2:	4614      	mov	r4, r2
 80176e4:	460d      	mov	r5, r1
 80176e6:	b921      	cbnz	r1, 80176f2 <_realloc_r+0x16>
 80176e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80176ec:	4611      	mov	r1, r2
 80176ee:	f7ff bef5 	b.w	80174dc <_malloc_r>
 80176f2:	b92a      	cbnz	r2, 8017700 <_realloc_r+0x24>
 80176f4:	f000 fcac 	bl	8018050 <_free_r>
 80176f8:	4625      	mov	r5, r4
 80176fa:	4628      	mov	r0, r5
 80176fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017700:	f000 fcf0 	bl	80180e4 <_malloc_usable_size_r>
 8017704:	4284      	cmp	r4, r0
 8017706:	4606      	mov	r6, r0
 8017708:	d802      	bhi.n	8017710 <_realloc_r+0x34>
 801770a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801770e:	d8f4      	bhi.n	80176fa <_realloc_r+0x1e>
 8017710:	4621      	mov	r1, r4
 8017712:	4638      	mov	r0, r7
 8017714:	f7ff fee2 	bl	80174dc <_malloc_r>
 8017718:	4680      	mov	r8, r0
 801771a:	b908      	cbnz	r0, 8017720 <_realloc_r+0x44>
 801771c:	4645      	mov	r5, r8
 801771e:	e7ec      	b.n	80176fa <_realloc_r+0x1e>
 8017720:	42b4      	cmp	r4, r6
 8017722:	4622      	mov	r2, r4
 8017724:	4629      	mov	r1, r5
 8017726:	bf28      	it	cs
 8017728:	4632      	movcs	r2, r6
 801772a:	f000 fc58 	bl	8017fde <memcpy>
 801772e:	4629      	mov	r1, r5
 8017730:	4638      	mov	r0, r7
 8017732:	f000 fc8d 	bl	8018050 <_free_r>
 8017736:	e7f1      	b.n	801771c <_realloc_r+0x40>

08017738 <_strtoul_l.isra.0>:
 8017738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801773c:	4e34      	ldr	r6, [pc, #208]	@ (8017810 <_strtoul_l.isra.0+0xd8>)
 801773e:	4686      	mov	lr, r0
 8017740:	460d      	mov	r5, r1
 8017742:	4628      	mov	r0, r5
 8017744:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017748:	5d37      	ldrb	r7, [r6, r4]
 801774a:	f017 0708 	ands.w	r7, r7, #8
 801774e:	d1f8      	bne.n	8017742 <_strtoul_l.isra.0+0xa>
 8017750:	2c2d      	cmp	r4, #45	@ 0x2d
 8017752:	d110      	bne.n	8017776 <_strtoul_l.isra.0+0x3e>
 8017754:	782c      	ldrb	r4, [r5, #0]
 8017756:	2701      	movs	r7, #1
 8017758:	1c85      	adds	r5, r0, #2
 801775a:	f033 0010 	bics.w	r0, r3, #16
 801775e:	d115      	bne.n	801778c <_strtoul_l.isra.0+0x54>
 8017760:	2c30      	cmp	r4, #48	@ 0x30
 8017762:	d10d      	bne.n	8017780 <_strtoul_l.isra.0+0x48>
 8017764:	7828      	ldrb	r0, [r5, #0]
 8017766:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801776a:	2858      	cmp	r0, #88	@ 0x58
 801776c:	d108      	bne.n	8017780 <_strtoul_l.isra.0+0x48>
 801776e:	786c      	ldrb	r4, [r5, #1]
 8017770:	3502      	adds	r5, #2
 8017772:	2310      	movs	r3, #16
 8017774:	e00a      	b.n	801778c <_strtoul_l.isra.0+0x54>
 8017776:	2c2b      	cmp	r4, #43	@ 0x2b
 8017778:	bf04      	itt	eq
 801777a:	782c      	ldrbeq	r4, [r5, #0]
 801777c:	1c85      	addeq	r5, r0, #2
 801777e:	e7ec      	b.n	801775a <_strtoul_l.isra.0+0x22>
 8017780:	2b00      	cmp	r3, #0
 8017782:	d1f6      	bne.n	8017772 <_strtoul_l.isra.0+0x3a>
 8017784:	2c30      	cmp	r4, #48	@ 0x30
 8017786:	bf14      	ite	ne
 8017788:	230a      	movne	r3, #10
 801778a:	2308      	moveq	r3, #8
 801778c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017790:	2600      	movs	r6, #0
 8017792:	fbb8 f8f3 	udiv	r8, r8, r3
 8017796:	fb03 f908 	mul.w	r9, r3, r8
 801779a:	ea6f 0909 	mvn.w	r9, r9
 801779e:	4630      	mov	r0, r6
 80177a0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80177a4:	f1bc 0f09 	cmp.w	ip, #9
 80177a8:	d810      	bhi.n	80177cc <_strtoul_l.isra.0+0x94>
 80177aa:	4664      	mov	r4, ip
 80177ac:	42a3      	cmp	r3, r4
 80177ae:	dd1e      	ble.n	80177ee <_strtoul_l.isra.0+0xb6>
 80177b0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80177b4:	d007      	beq.n	80177c6 <_strtoul_l.isra.0+0x8e>
 80177b6:	4580      	cmp	r8, r0
 80177b8:	d316      	bcc.n	80177e8 <_strtoul_l.isra.0+0xb0>
 80177ba:	d101      	bne.n	80177c0 <_strtoul_l.isra.0+0x88>
 80177bc:	45a1      	cmp	r9, r4
 80177be:	db13      	blt.n	80177e8 <_strtoul_l.isra.0+0xb0>
 80177c0:	fb00 4003 	mla	r0, r0, r3, r4
 80177c4:	2601      	movs	r6, #1
 80177c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80177ca:	e7e9      	b.n	80177a0 <_strtoul_l.isra.0+0x68>
 80177cc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80177d0:	f1bc 0f19 	cmp.w	ip, #25
 80177d4:	d801      	bhi.n	80177da <_strtoul_l.isra.0+0xa2>
 80177d6:	3c37      	subs	r4, #55	@ 0x37
 80177d8:	e7e8      	b.n	80177ac <_strtoul_l.isra.0+0x74>
 80177da:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80177de:	f1bc 0f19 	cmp.w	ip, #25
 80177e2:	d804      	bhi.n	80177ee <_strtoul_l.isra.0+0xb6>
 80177e4:	3c57      	subs	r4, #87	@ 0x57
 80177e6:	e7e1      	b.n	80177ac <_strtoul_l.isra.0+0x74>
 80177e8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80177ec:	e7eb      	b.n	80177c6 <_strtoul_l.isra.0+0x8e>
 80177ee:	1c73      	adds	r3, r6, #1
 80177f0:	d106      	bne.n	8017800 <_strtoul_l.isra.0+0xc8>
 80177f2:	2322      	movs	r3, #34	@ 0x22
 80177f4:	f8ce 3000 	str.w	r3, [lr]
 80177f8:	4630      	mov	r0, r6
 80177fa:	b932      	cbnz	r2, 801780a <_strtoul_l.isra.0+0xd2>
 80177fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017800:	b107      	cbz	r7, 8017804 <_strtoul_l.isra.0+0xcc>
 8017802:	4240      	negs	r0, r0
 8017804:	2a00      	cmp	r2, #0
 8017806:	d0f9      	beq.n	80177fc <_strtoul_l.isra.0+0xc4>
 8017808:	b106      	cbz	r6, 801780c <_strtoul_l.isra.0+0xd4>
 801780a:	1e69      	subs	r1, r5, #1
 801780c:	6011      	str	r1, [r2, #0]
 801780e:	e7f5      	b.n	80177fc <_strtoul_l.isra.0+0xc4>
 8017810:	0801a5e7 	.word	0x0801a5e7

08017814 <strtoul>:
 8017814:	4613      	mov	r3, r2
 8017816:	460a      	mov	r2, r1
 8017818:	4601      	mov	r1, r0
 801781a:	4802      	ldr	r0, [pc, #8]	@ (8017824 <strtoul+0x10>)
 801781c:	6800      	ldr	r0, [r0, #0]
 801781e:	f7ff bf8b 	b.w	8017738 <_strtoul_l.isra.0>
 8017822:	bf00      	nop
 8017824:	20002e40 	.word	0x20002e40

08017828 <std>:
 8017828:	2300      	movs	r3, #0
 801782a:	b510      	push	{r4, lr}
 801782c:	4604      	mov	r4, r0
 801782e:	e9c0 3300 	strd	r3, r3, [r0]
 8017832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017836:	6083      	str	r3, [r0, #8]
 8017838:	8181      	strh	r1, [r0, #12]
 801783a:	6643      	str	r3, [r0, #100]	@ 0x64
 801783c:	81c2      	strh	r2, [r0, #14]
 801783e:	6183      	str	r3, [r0, #24]
 8017840:	4619      	mov	r1, r3
 8017842:	2208      	movs	r2, #8
 8017844:	305c      	adds	r0, #92	@ 0x5c
 8017846:	f000 faef 	bl	8017e28 <memset>
 801784a:	4b0d      	ldr	r3, [pc, #52]	@ (8017880 <std+0x58>)
 801784c:	6263      	str	r3, [r4, #36]	@ 0x24
 801784e:	4b0d      	ldr	r3, [pc, #52]	@ (8017884 <std+0x5c>)
 8017850:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017852:	4b0d      	ldr	r3, [pc, #52]	@ (8017888 <std+0x60>)
 8017854:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017856:	4b0d      	ldr	r3, [pc, #52]	@ (801788c <std+0x64>)
 8017858:	6323      	str	r3, [r4, #48]	@ 0x30
 801785a:	4b0d      	ldr	r3, [pc, #52]	@ (8017890 <std+0x68>)
 801785c:	6224      	str	r4, [r4, #32]
 801785e:	429c      	cmp	r4, r3
 8017860:	d006      	beq.n	8017870 <std+0x48>
 8017862:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017866:	4294      	cmp	r4, r2
 8017868:	d002      	beq.n	8017870 <std+0x48>
 801786a:	33d0      	adds	r3, #208	@ 0xd0
 801786c:	429c      	cmp	r4, r3
 801786e:	d105      	bne.n	801787c <std+0x54>
 8017870:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017878:	f000 bba6 	b.w	8017fc8 <__retarget_lock_init_recursive>
 801787c:	bd10      	pop	{r4, pc}
 801787e:	bf00      	nop
 8017880:	08017bad 	.word	0x08017bad
 8017884:	08017bcf 	.word	0x08017bcf
 8017888:	08017c07 	.word	0x08017c07
 801788c:	08017c2b 	.word	0x08017c2b
 8017890:	20011224 	.word	0x20011224

08017894 <stdio_exit_handler>:
 8017894:	4a02      	ldr	r2, [pc, #8]	@ (80178a0 <stdio_exit_handler+0xc>)
 8017896:	4903      	ldr	r1, [pc, #12]	@ (80178a4 <stdio_exit_handler+0x10>)
 8017898:	4803      	ldr	r0, [pc, #12]	@ (80178a8 <stdio_exit_handler+0x14>)
 801789a:	f000 b869 	b.w	8017970 <_fwalk_sglue>
 801789e:	bf00      	nop
 80178a0:	20002e34 	.word	0x20002e34
 80178a4:	08018a49 	.word	0x08018a49
 80178a8:	20002e44 	.word	0x20002e44

080178ac <cleanup_stdio>:
 80178ac:	6841      	ldr	r1, [r0, #4]
 80178ae:	4b0c      	ldr	r3, [pc, #48]	@ (80178e0 <cleanup_stdio+0x34>)
 80178b0:	4299      	cmp	r1, r3
 80178b2:	b510      	push	{r4, lr}
 80178b4:	4604      	mov	r4, r0
 80178b6:	d001      	beq.n	80178bc <cleanup_stdio+0x10>
 80178b8:	f001 f8c6 	bl	8018a48 <_fflush_r>
 80178bc:	68a1      	ldr	r1, [r4, #8]
 80178be:	4b09      	ldr	r3, [pc, #36]	@ (80178e4 <cleanup_stdio+0x38>)
 80178c0:	4299      	cmp	r1, r3
 80178c2:	d002      	beq.n	80178ca <cleanup_stdio+0x1e>
 80178c4:	4620      	mov	r0, r4
 80178c6:	f001 f8bf 	bl	8018a48 <_fflush_r>
 80178ca:	68e1      	ldr	r1, [r4, #12]
 80178cc:	4b06      	ldr	r3, [pc, #24]	@ (80178e8 <cleanup_stdio+0x3c>)
 80178ce:	4299      	cmp	r1, r3
 80178d0:	d004      	beq.n	80178dc <cleanup_stdio+0x30>
 80178d2:	4620      	mov	r0, r4
 80178d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178d8:	f001 b8b6 	b.w	8018a48 <_fflush_r>
 80178dc:	bd10      	pop	{r4, pc}
 80178de:	bf00      	nop
 80178e0:	20011224 	.word	0x20011224
 80178e4:	2001128c 	.word	0x2001128c
 80178e8:	200112f4 	.word	0x200112f4

080178ec <global_stdio_init.part.0>:
 80178ec:	b510      	push	{r4, lr}
 80178ee:	4b0b      	ldr	r3, [pc, #44]	@ (801791c <global_stdio_init.part.0+0x30>)
 80178f0:	4c0b      	ldr	r4, [pc, #44]	@ (8017920 <global_stdio_init.part.0+0x34>)
 80178f2:	4a0c      	ldr	r2, [pc, #48]	@ (8017924 <global_stdio_init.part.0+0x38>)
 80178f4:	601a      	str	r2, [r3, #0]
 80178f6:	4620      	mov	r0, r4
 80178f8:	2200      	movs	r2, #0
 80178fa:	2104      	movs	r1, #4
 80178fc:	f7ff ff94 	bl	8017828 <std>
 8017900:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017904:	2201      	movs	r2, #1
 8017906:	2109      	movs	r1, #9
 8017908:	f7ff ff8e 	bl	8017828 <std>
 801790c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017910:	2202      	movs	r2, #2
 8017912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017916:	2112      	movs	r1, #18
 8017918:	f7ff bf86 	b.w	8017828 <std>
 801791c:	2001135c 	.word	0x2001135c
 8017920:	20011224 	.word	0x20011224
 8017924:	08017895 	.word	0x08017895

08017928 <__sfp_lock_acquire>:
 8017928:	4801      	ldr	r0, [pc, #4]	@ (8017930 <__sfp_lock_acquire+0x8>)
 801792a:	f000 bb4e 	b.w	8017fca <__retarget_lock_acquire_recursive>
 801792e:	bf00      	nop
 8017930:	20011366 	.word	0x20011366

08017934 <__sfp_lock_release>:
 8017934:	4801      	ldr	r0, [pc, #4]	@ (801793c <__sfp_lock_release+0x8>)
 8017936:	f000 bb49 	b.w	8017fcc <__retarget_lock_release_recursive>
 801793a:	bf00      	nop
 801793c:	20011366 	.word	0x20011366

08017940 <__sinit>:
 8017940:	b510      	push	{r4, lr}
 8017942:	4604      	mov	r4, r0
 8017944:	f7ff fff0 	bl	8017928 <__sfp_lock_acquire>
 8017948:	6a23      	ldr	r3, [r4, #32]
 801794a:	b11b      	cbz	r3, 8017954 <__sinit+0x14>
 801794c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017950:	f7ff bff0 	b.w	8017934 <__sfp_lock_release>
 8017954:	4b04      	ldr	r3, [pc, #16]	@ (8017968 <__sinit+0x28>)
 8017956:	6223      	str	r3, [r4, #32]
 8017958:	4b04      	ldr	r3, [pc, #16]	@ (801796c <__sinit+0x2c>)
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	2b00      	cmp	r3, #0
 801795e:	d1f5      	bne.n	801794c <__sinit+0xc>
 8017960:	f7ff ffc4 	bl	80178ec <global_stdio_init.part.0>
 8017964:	e7f2      	b.n	801794c <__sinit+0xc>
 8017966:	bf00      	nop
 8017968:	080178ad 	.word	0x080178ad
 801796c:	2001135c 	.word	0x2001135c

08017970 <_fwalk_sglue>:
 8017970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017974:	4607      	mov	r7, r0
 8017976:	4688      	mov	r8, r1
 8017978:	4614      	mov	r4, r2
 801797a:	2600      	movs	r6, #0
 801797c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017980:	f1b9 0901 	subs.w	r9, r9, #1
 8017984:	d505      	bpl.n	8017992 <_fwalk_sglue+0x22>
 8017986:	6824      	ldr	r4, [r4, #0]
 8017988:	2c00      	cmp	r4, #0
 801798a:	d1f7      	bne.n	801797c <_fwalk_sglue+0xc>
 801798c:	4630      	mov	r0, r6
 801798e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017992:	89ab      	ldrh	r3, [r5, #12]
 8017994:	2b01      	cmp	r3, #1
 8017996:	d907      	bls.n	80179a8 <_fwalk_sglue+0x38>
 8017998:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801799c:	3301      	adds	r3, #1
 801799e:	d003      	beq.n	80179a8 <_fwalk_sglue+0x38>
 80179a0:	4629      	mov	r1, r5
 80179a2:	4638      	mov	r0, r7
 80179a4:	47c0      	blx	r8
 80179a6:	4306      	orrs	r6, r0
 80179a8:	3568      	adds	r5, #104	@ 0x68
 80179aa:	e7e9      	b.n	8017980 <_fwalk_sglue+0x10>

080179ac <_fwrite_r>:
 80179ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179b0:	9c08      	ldr	r4, [sp, #32]
 80179b2:	468a      	mov	sl, r1
 80179b4:	4690      	mov	r8, r2
 80179b6:	fb02 f903 	mul.w	r9, r2, r3
 80179ba:	4606      	mov	r6, r0
 80179bc:	b118      	cbz	r0, 80179c6 <_fwrite_r+0x1a>
 80179be:	6a03      	ldr	r3, [r0, #32]
 80179c0:	b90b      	cbnz	r3, 80179c6 <_fwrite_r+0x1a>
 80179c2:	f7ff ffbd 	bl	8017940 <__sinit>
 80179c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80179c8:	07dd      	lsls	r5, r3, #31
 80179ca:	d405      	bmi.n	80179d8 <_fwrite_r+0x2c>
 80179cc:	89a3      	ldrh	r3, [r4, #12]
 80179ce:	0598      	lsls	r0, r3, #22
 80179d0:	d402      	bmi.n	80179d8 <_fwrite_r+0x2c>
 80179d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80179d4:	f000 faf9 	bl	8017fca <__retarget_lock_acquire_recursive>
 80179d8:	89a3      	ldrh	r3, [r4, #12]
 80179da:	0719      	lsls	r1, r3, #28
 80179dc:	d516      	bpl.n	8017a0c <_fwrite_r+0x60>
 80179de:	6923      	ldr	r3, [r4, #16]
 80179e0:	b1a3      	cbz	r3, 8017a0c <_fwrite_r+0x60>
 80179e2:	2500      	movs	r5, #0
 80179e4:	454d      	cmp	r5, r9
 80179e6:	d01f      	beq.n	8017a28 <_fwrite_r+0x7c>
 80179e8:	68a7      	ldr	r7, [r4, #8]
 80179ea:	f81a 1005 	ldrb.w	r1, [sl, r5]
 80179ee:	3f01      	subs	r7, #1
 80179f0:	2f00      	cmp	r7, #0
 80179f2:	60a7      	str	r7, [r4, #8]
 80179f4:	da04      	bge.n	8017a00 <_fwrite_r+0x54>
 80179f6:	69a3      	ldr	r3, [r4, #24]
 80179f8:	429f      	cmp	r7, r3
 80179fa:	db0f      	blt.n	8017a1c <_fwrite_r+0x70>
 80179fc:	290a      	cmp	r1, #10
 80179fe:	d00d      	beq.n	8017a1c <_fwrite_r+0x70>
 8017a00:	6823      	ldr	r3, [r4, #0]
 8017a02:	1c5a      	adds	r2, r3, #1
 8017a04:	6022      	str	r2, [r4, #0]
 8017a06:	7019      	strb	r1, [r3, #0]
 8017a08:	3501      	adds	r5, #1
 8017a0a:	e7eb      	b.n	80179e4 <_fwrite_r+0x38>
 8017a0c:	4621      	mov	r1, r4
 8017a0e:	4630      	mov	r0, r6
 8017a10:	f000 f98a 	bl	8017d28 <__swsetup_r>
 8017a14:	2800      	cmp	r0, #0
 8017a16:	d0e4      	beq.n	80179e2 <_fwrite_r+0x36>
 8017a18:	2500      	movs	r5, #0
 8017a1a:	e005      	b.n	8017a28 <_fwrite_r+0x7c>
 8017a1c:	4622      	mov	r2, r4
 8017a1e:	4630      	mov	r0, r6
 8017a20:	f000 f944 	bl	8017cac <__swbuf_r>
 8017a24:	3001      	adds	r0, #1
 8017a26:	d1ef      	bne.n	8017a08 <_fwrite_r+0x5c>
 8017a28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017a2a:	07da      	lsls	r2, r3, #31
 8017a2c:	d405      	bmi.n	8017a3a <_fwrite_r+0x8e>
 8017a2e:	89a3      	ldrh	r3, [r4, #12]
 8017a30:	059b      	lsls	r3, r3, #22
 8017a32:	d402      	bmi.n	8017a3a <_fwrite_r+0x8e>
 8017a34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017a36:	f000 fac9 	bl	8017fcc <__retarget_lock_release_recursive>
 8017a3a:	fbb5 f0f8 	udiv	r0, r5, r8
 8017a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08017a44 <fwrite>:
 8017a44:	b507      	push	{r0, r1, r2, lr}
 8017a46:	9300      	str	r3, [sp, #0]
 8017a48:	4613      	mov	r3, r2
 8017a4a:	460a      	mov	r2, r1
 8017a4c:	4601      	mov	r1, r0
 8017a4e:	4803      	ldr	r0, [pc, #12]	@ (8017a5c <fwrite+0x18>)
 8017a50:	6800      	ldr	r0, [r0, #0]
 8017a52:	f7ff ffab 	bl	80179ac <_fwrite_r>
 8017a56:	b003      	add	sp, #12
 8017a58:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a5c:	20002e40 	.word	0x20002e40

08017a60 <iprintf>:
 8017a60:	b40f      	push	{r0, r1, r2, r3}
 8017a62:	b507      	push	{r0, r1, r2, lr}
 8017a64:	4906      	ldr	r1, [pc, #24]	@ (8017a80 <iprintf+0x20>)
 8017a66:	ab04      	add	r3, sp, #16
 8017a68:	6808      	ldr	r0, [r1, #0]
 8017a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a6e:	6881      	ldr	r1, [r0, #8]
 8017a70:	9301      	str	r3, [sp, #4]
 8017a72:	f000 fcc1 	bl	80183f8 <_vfiprintf_r>
 8017a76:	b003      	add	sp, #12
 8017a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8017a7c:	b004      	add	sp, #16
 8017a7e:	4770      	bx	lr
 8017a80:	20002e40 	.word	0x20002e40

08017a84 <_puts_r>:
 8017a84:	6a03      	ldr	r3, [r0, #32]
 8017a86:	b570      	push	{r4, r5, r6, lr}
 8017a88:	6884      	ldr	r4, [r0, #8]
 8017a8a:	4605      	mov	r5, r0
 8017a8c:	460e      	mov	r6, r1
 8017a8e:	b90b      	cbnz	r3, 8017a94 <_puts_r+0x10>
 8017a90:	f7ff ff56 	bl	8017940 <__sinit>
 8017a94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017a96:	07db      	lsls	r3, r3, #31
 8017a98:	d405      	bmi.n	8017aa6 <_puts_r+0x22>
 8017a9a:	89a3      	ldrh	r3, [r4, #12]
 8017a9c:	0598      	lsls	r0, r3, #22
 8017a9e:	d402      	bmi.n	8017aa6 <_puts_r+0x22>
 8017aa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017aa2:	f000 fa92 	bl	8017fca <__retarget_lock_acquire_recursive>
 8017aa6:	89a3      	ldrh	r3, [r4, #12]
 8017aa8:	0719      	lsls	r1, r3, #28
 8017aaa:	d502      	bpl.n	8017ab2 <_puts_r+0x2e>
 8017aac:	6923      	ldr	r3, [r4, #16]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d135      	bne.n	8017b1e <_puts_r+0x9a>
 8017ab2:	4621      	mov	r1, r4
 8017ab4:	4628      	mov	r0, r5
 8017ab6:	f000 f937 	bl	8017d28 <__swsetup_r>
 8017aba:	b380      	cbz	r0, 8017b1e <_puts_r+0x9a>
 8017abc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8017ac0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017ac2:	07da      	lsls	r2, r3, #31
 8017ac4:	d405      	bmi.n	8017ad2 <_puts_r+0x4e>
 8017ac6:	89a3      	ldrh	r3, [r4, #12]
 8017ac8:	059b      	lsls	r3, r3, #22
 8017aca:	d402      	bmi.n	8017ad2 <_puts_r+0x4e>
 8017acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017ace:	f000 fa7d 	bl	8017fcc <__retarget_lock_release_recursive>
 8017ad2:	4628      	mov	r0, r5
 8017ad4:	bd70      	pop	{r4, r5, r6, pc}
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	da04      	bge.n	8017ae4 <_puts_r+0x60>
 8017ada:	69a2      	ldr	r2, [r4, #24]
 8017adc:	429a      	cmp	r2, r3
 8017ade:	dc17      	bgt.n	8017b10 <_puts_r+0x8c>
 8017ae0:	290a      	cmp	r1, #10
 8017ae2:	d015      	beq.n	8017b10 <_puts_r+0x8c>
 8017ae4:	6823      	ldr	r3, [r4, #0]
 8017ae6:	1c5a      	adds	r2, r3, #1
 8017ae8:	6022      	str	r2, [r4, #0]
 8017aea:	7019      	strb	r1, [r3, #0]
 8017aec:	68a3      	ldr	r3, [r4, #8]
 8017aee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017af2:	3b01      	subs	r3, #1
 8017af4:	60a3      	str	r3, [r4, #8]
 8017af6:	2900      	cmp	r1, #0
 8017af8:	d1ed      	bne.n	8017ad6 <_puts_r+0x52>
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	da11      	bge.n	8017b22 <_puts_r+0x9e>
 8017afe:	4622      	mov	r2, r4
 8017b00:	210a      	movs	r1, #10
 8017b02:	4628      	mov	r0, r5
 8017b04:	f000 f8d2 	bl	8017cac <__swbuf_r>
 8017b08:	3001      	adds	r0, #1
 8017b0a:	d0d7      	beq.n	8017abc <_puts_r+0x38>
 8017b0c:	250a      	movs	r5, #10
 8017b0e:	e7d7      	b.n	8017ac0 <_puts_r+0x3c>
 8017b10:	4622      	mov	r2, r4
 8017b12:	4628      	mov	r0, r5
 8017b14:	f000 f8ca 	bl	8017cac <__swbuf_r>
 8017b18:	3001      	adds	r0, #1
 8017b1a:	d1e7      	bne.n	8017aec <_puts_r+0x68>
 8017b1c:	e7ce      	b.n	8017abc <_puts_r+0x38>
 8017b1e:	3e01      	subs	r6, #1
 8017b20:	e7e4      	b.n	8017aec <_puts_r+0x68>
 8017b22:	6823      	ldr	r3, [r4, #0]
 8017b24:	1c5a      	adds	r2, r3, #1
 8017b26:	6022      	str	r2, [r4, #0]
 8017b28:	220a      	movs	r2, #10
 8017b2a:	701a      	strb	r2, [r3, #0]
 8017b2c:	e7ee      	b.n	8017b0c <_puts_r+0x88>
	...

08017b30 <puts>:
 8017b30:	4b02      	ldr	r3, [pc, #8]	@ (8017b3c <puts+0xc>)
 8017b32:	4601      	mov	r1, r0
 8017b34:	6818      	ldr	r0, [r3, #0]
 8017b36:	f7ff bfa5 	b.w	8017a84 <_puts_r>
 8017b3a:	bf00      	nop
 8017b3c:	20002e40 	.word	0x20002e40

08017b40 <sniprintf>:
 8017b40:	b40c      	push	{r2, r3}
 8017b42:	b530      	push	{r4, r5, lr}
 8017b44:	4b18      	ldr	r3, [pc, #96]	@ (8017ba8 <sniprintf+0x68>)
 8017b46:	1e0c      	subs	r4, r1, #0
 8017b48:	681d      	ldr	r5, [r3, #0]
 8017b4a:	b09d      	sub	sp, #116	@ 0x74
 8017b4c:	da08      	bge.n	8017b60 <sniprintf+0x20>
 8017b4e:	238b      	movs	r3, #139	@ 0x8b
 8017b50:	602b      	str	r3, [r5, #0]
 8017b52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b56:	b01d      	add	sp, #116	@ 0x74
 8017b58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017b5c:	b002      	add	sp, #8
 8017b5e:	4770      	bx	lr
 8017b60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017b64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017b68:	f04f 0300 	mov.w	r3, #0
 8017b6c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8017b6e:	bf14      	ite	ne
 8017b70:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017b74:	4623      	moveq	r3, r4
 8017b76:	9304      	str	r3, [sp, #16]
 8017b78:	9307      	str	r3, [sp, #28]
 8017b7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017b7e:	9002      	str	r0, [sp, #8]
 8017b80:	9006      	str	r0, [sp, #24]
 8017b82:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017b86:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017b88:	ab21      	add	r3, sp, #132	@ 0x84
 8017b8a:	a902      	add	r1, sp, #8
 8017b8c:	4628      	mov	r0, r5
 8017b8e:	9301      	str	r3, [sp, #4]
 8017b90:	f000 fb0c 	bl	80181ac <_svfiprintf_r>
 8017b94:	1c43      	adds	r3, r0, #1
 8017b96:	bfbc      	itt	lt
 8017b98:	238b      	movlt	r3, #139	@ 0x8b
 8017b9a:	602b      	strlt	r3, [r5, #0]
 8017b9c:	2c00      	cmp	r4, #0
 8017b9e:	d0da      	beq.n	8017b56 <sniprintf+0x16>
 8017ba0:	9b02      	ldr	r3, [sp, #8]
 8017ba2:	2200      	movs	r2, #0
 8017ba4:	701a      	strb	r2, [r3, #0]
 8017ba6:	e7d6      	b.n	8017b56 <sniprintf+0x16>
 8017ba8:	20002e40 	.word	0x20002e40

08017bac <__sread>:
 8017bac:	b510      	push	{r4, lr}
 8017bae:	460c      	mov	r4, r1
 8017bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bb4:	f000 f9aa 	bl	8017f0c <_read_r>
 8017bb8:	2800      	cmp	r0, #0
 8017bba:	bfab      	itete	ge
 8017bbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017bbe:	89a3      	ldrhlt	r3, [r4, #12]
 8017bc0:	181b      	addge	r3, r3, r0
 8017bc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017bc6:	bfac      	ite	ge
 8017bc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017bca:	81a3      	strhlt	r3, [r4, #12]
 8017bcc:	bd10      	pop	{r4, pc}

08017bce <__swrite>:
 8017bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bd2:	461f      	mov	r7, r3
 8017bd4:	898b      	ldrh	r3, [r1, #12]
 8017bd6:	05db      	lsls	r3, r3, #23
 8017bd8:	4605      	mov	r5, r0
 8017bda:	460c      	mov	r4, r1
 8017bdc:	4616      	mov	r6, r2
 8017bde:	d505      	bpl.n	8017bec <__swrite+0x1e>
 8017be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017be4:	2302      	movs	r3, #2
 8017be6:	2200      	movs	r2, #0
 8017be8:	f000 f97e 	bl	8017ee8 <_lseek_r>
 8017bec:	89a3      	ldrh	r3, [r4, #12]
 8017bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017bf2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017bf6:	81a3      	strh	r3, [r4, #12]
 8017bf8:	4632      	mov	r2, r6
 8017bfa:	463b      	mov	r3, r7
 8017bfc:	4628      	mov	r0, r5
 8017bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c02:	f000 b9a5 	b.w	8017f50 <_write_r>

08017c06 <__sseek>:
 8017c06:	b510      	push	{r4, lr}
 8017c08:	460c      	mov	r4, r1
 8017c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c0e:	f000 f96b 	bl	8017ee8 <_lseek_r>
 8017c12:	1c43      	adds	r3, r0, #1
 8017c14:	89a3      	ldrh	r3, [r4, #12]
 8017c16:	bf15      	itete	ne
 8017c18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017c1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017c1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017c22:	81a3      	strheq	r3, [r4, #12]
 8017c24:	bf18      	it	ne
 8017c26:	81a3      	strhne	r3, [r4, #12]
 8017c28:	bd10      	pop	{r4, pc}

08017c2a <__sclose>:
 8017c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c2e:	f000 b94b 	b.w	8017ec8 <_close_r>

08017c32 <_vsniprintf_r>:
 8017c32:	b530      	push	{r4, r5, lr}
 8017c34:	4614      	mov	r4, r2
 8017c36:	2c00      	cmp	r4, #0
 8017c38:	b09b      	sub	sp, #108	@ 0x6c
 8017c3a:	4605      	mov	r5, r0
 8017c3c:	461a      	mov	r2, r3
 8017c3e:	da05      	bge.n	8017c4c <_vsniprintf_r+0x1a>
 8017c40:	238b      	movs	r3, #139	@ 0x8b
 8017c42:	6003      	str	r3, [r0, #0]
 8017c44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c48:	b01b      	add	sp, #108	@ 0x6c
 8017c4a:	bd30      	pop	{r4, r5, pc}
 8017c4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017c50:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017c54:	f04f 0300 	mov.w	r3, #0
 8017c58:	9319      	str	r3, [sp, #100]	@ 0x64
 8017c5a:	bf14      	ite	ne
 8017c5c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017c60:	4623      	moveq	r3, r4
 8017c62:	9302      	str	r3, [sp, #8]
 8017c64:	9305      	str	r3, [sp, #20]
 8017c66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017c6a:	9100      	str	r1, [sp, #0]
 8017c6c:	9104      	str	r1, [sp, #16]
 8017c6e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017c72:	4669      	mov	r1, sp
 8017c74:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017c76:	f000 fa99 	bl	80181ac <_svfiprintf_r>
 8017c7a:	1c43      	adds	r3, r0, #1
 8017c7c:	bfbc      	itt	lt
 8017c7e:	238b      	movlt	r3, #139	@ 0x8b
 8017c80:	602b      	strlt	r3, [r5, #0]
 8017c82:	2c00      	cmp	r4, #0
 8017c84:	d0e0      	beq.n	8017c48 <_vsniprintf_r+0x16>
 8017c86:	9b00      	ldr	r3, [sp, #0]
 8017c88:	2200      	movs	r2, #0
 8017c8a:	701a      	strb	r2, [r3, #0]
 8017c8c:	e7dc      	b.n	8017c48 <_vsniprintf_r+0x16>
	...

08017c90 <vsniprintf>:
 8017c90:	b507      	push	{r0, r1, r2, lr}
 8017c92:	9300      	str	r3, [sp, #0]
 8017c94:	4613      	mov	r3, r2
 8017c96:	460a      	mov	r2, r1
 8017c98:	4601      	mov	r1, r0
 8017c9a:	4803      	ldr	r0, [pc, #12]	@ (8017ca8 <vsniprintf+0x18>)
 8017c9c:	6800      	ldr	r0, [r0, #0]
 8017c9e:	f7ff ffc8 	bl	8017c32 <_vsniprintf_r>
 8017ca2:	b003      	add	sp, #12
 8017ca4:	f85d fb04 	ldr.w	pc, [sp], #4
 8017ca8:	20002e40 	.word	0x20002e40

08017cac <__swbuf_r>:
 8017cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cae:	460e      	mov	r6, r1
 8017cb0:	4614      	mov	r4, r2
 8017cb2:	4605      	mov	r5, r0
 8017cb4:	b118      	cbz	r0, 8017cbe <__swbuf_r+0x12>
 8017cb6:	6a03      	ldr	r3, [r0, #32]
 8017cb8:	b90b      	cbnz	r3, 8017cbe <__swbuf_r+0x12>
 8017cba:	f7ff fe41 	bl	8017940 <__sinit>
 8017cbe:	69a3      	ldr	r3, [r4, #24]
 8017cc0:	60a3      	str	r3, [r4, #8]
 8017cc2:	89a3      	ldrh	r3, [r4, #12]
 8017cc4:	071a      	lsls	r2, r3, #28
 8017cc6:	d501      	bpl.n	8017ccc <__swbuf_r+0x20>
 8017cc8:	6923      	ldr	r3, [r4, #16]
 8017cca:	b943      	cbnz	r3, 8017cde <__swbuf_r+0x32>
 8017ccc:	4621      	mov	r1, r4
 8017cce:	4628      	mov	r0, r5
 8017cd0:	f000 f82a 	bl	8017d28 <__swsetup_r>
 8017cd4:	b118      	cbz	r0, 8017cde <__swbuf_r+0x32>
 8017cd6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017cda:	4638      	mov	r0, r7
 8017cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cde:	6823      	ldr	r3, [r4, #0]
 8017ce0:	6922      	ldr	r2, [r4, #16]
 8017ce2:	1a98      	subs	r0, r3, r2
 8017ce4:	6963      	ldr	r3, [r4, #20]
 8017ce6:	b2f6      	uxtb	r6, r6
 8017ce8:	4283      	cmp	r3, r0
 8017cea:	4637      	mov	r7, r6
 8017cec:	dc05      	bgt.n	8017cfa <__swbuf_r+0x4e>
 8017cee:	4621      	mov	r1, r4
 8017cf0:	4628      	mov	r0, r5
 8017cf2:	f000 fea9 	bl	8018a48 <_fflush_r>
 8017cf6:	2800      	cmp	r0, #0
 8017cf8:	d1ed      	bne.n	8017cd6 <__swbuf_r+0x2a>
 8017cfa:	68a3      	ldr	r3, [r4, #8]
 8017cfc:	3b01      	subs	r3, #1
 8017cfe:	60a3      	str	r3, [r4, #8]
 8017d00:	6823      	ldr	r3, [r4, #0]
 8017d02:	1c5a      	adds	r2, r3, #1
 8017d04:	6022      	str	r2, [r4, #0]
 8017d06:	701e      	strb	r6, [r3, #0]
 8017d08:	6962      	ldr	r2, [r4, #20]
 8017d0a:	1c43      	adds	r3, r0, #1
 8017d0c:	429a      	cmp	r2, r3
 8017d0e:	d004      	beq.n	8017d1a <__swbuf_r+0x6e>
 8017d10:	89a3      	ldrh	r3, [r4, #12]
 8017d12:	07db      	lsls	r3, r3, #31
 8017d14:	d5e1      	bpl.n	8017cda <__swbuf_r+0x2e>
 8017d16:	2e0a      	cmp	r6, #10
 8017d18:	d1df      	bne.n	8017cda <__swbuf_r+0x2e>
 8017d1a:	4621      	mov	r1, r4
 8017d1c:	4628      	mov	r0, r5
 8017d1e:	f000 fe93 	bl	8018a48 <_fflush_r>
 8017d22:	2800      	cmp	r0, #0
 8017d24:	d0d9      	beq.n	8017cda <__swbuf_r+0x2e>
 8017d26:	e7d6      	b.n	8017cd6 <__swbuf_r+0x2a>

08017d28 <__swsetup_r>:
 8017d28:	b538      	push	{r3, r4, r5, lr}
 8017d2a:	4b29      	ldr	r3, [pc, #164]	@ (8017dd0 <__swsetup_r+0xa8>)
 8017d2c:	4605      	mov	r5, r0
 8017d2e:	6818      	ldr	r0, [r3, #0]
 8017d30:	460c      	mov	r4, r1
 8017d32:	b118      	cbz	r0, 8017d3c <__swsetup_r+0x14>
 8017d34:	6a03      	ldr	r3, [r0, #32]
 8017d36:	b90b      	cbnz	r3, 8017d3c <__swsetup_r+0x14>
 8017d38:	f7ff fe02 	bl	8017940 <__sinit>
 8017d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d40:	0719      	lsls	r1, r3, #28
 8017d42:	d422      	bmi.n	8017d8a <__swsetup_r+0x62>
 8017d44:	06da      	lsls	r2, r3, #27
 8017d46:	d407      	bmi.n	8017d58 <__swsetup_r+0x30>
 8017d48:	2209      	movs	r2, #9
 8017d4a:	602a      	str	r2, [r5, #0]
 8017d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017d50:	81a3      	strh	r3, [r4, #12]
 8017d52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017d56:	e033      	b.n	8017dc0 <__swsetup_r+0x98>
 8017d58:	0758      	lsls	r0, r3, #29
 8017d5a:	d512      	bpl.n	8017d82 <__swsetup_r+0x5a>
 8017d5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017d5e:	b141      	cbz	r1, 8017d72 <__swsetup_r+0x4a>
 8017d60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017d64:	4299      	cmp	r1, r3
 8017d66:	d002      	beq.n	8017d6e <__swsetup_r+0x46>
 8017d68:	4628      	mov	r0, r5
 8017d6a:	f000 f971 	bl	8018050 <_free_r>
 8017d6e:	2300      	movs	r3, #0
 8017d70:	6363      	str	r3, [r4, #52]	@ 0x34
 8017d72:	89a3      	ldrh	r3, [r4, #12]
 8017d74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017d78:	81a3      	strh	r3, [r4, #12]
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	6063      	str	r3, [r4, #4]
 8017d7e:	6923      	ldr	r3, [r4, #16]
 8017d80:	6023      	str	r3, [r4, #0]
 8017d82:	89a3      	ldrh	r3, [r4, #12]
 8017d84:	f043 0308 	orr.w	r3, r3, #8
 8017d88:	81a3      	strh	r3, [r4, #12]
 8017d8a:	6923      	ldr	r3, [r4, #16]
 8017d8c:	b94b      	cbnz	r3, 8017da2 <__swsetup_r+0x7a>
 8017d8e:	89a3      	ldrh	r3, [r4, #12]
 8017d90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017d98:	d003      	beq.n	8017da2 <__swsetup_r+0x7a>
 8017d9a:	4621      	mov	r1, r4
 8017d9c:	4628      	mov	r0, r5
 8017d9e:	f000 feb3 	bl	8018b08 <__smakebuf_r>
 8017da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017da6:	f013 0201 	ands.w	r2, r3, #1
 8017daa:	d00a      	beq.n	8017dc2 <__swsetup_r+0x9a>
 8017dac:	2200      	movs	r2, #0
 8017dae:	60a2      	str	r2, [r4, #8]
 8017db0:	6962      	ldr	r2, [r4, #20]
 8017db2:	4252      	negs	r2, r2
 8017db4:	61a2      	str	r2, [r4, #24]
 8017db6:	6922      	ldr	r2, [r4, #16]
 8017db8:	b942      	cbnz	r2, 8017dcc <__swsetup_r+0xa4>
 8017dba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017dbe:	d1c5      	bne.n	8017d4c <__swsetup_r+0x24>
 8017dc0:	bd38      	pop	{r3, r4, r5, pc}
 8017dc2:	0799      	lsls	r1, r3, #30
 8017dc4:	bf58      	it	pl
 8017dc6:	6962      	ldrpl	r2, [r4, #20]
 8017dc8:	60a2      	str	r2, [r4, #8]
 8017dca:	e7f4      	b.n	8017db6 <__swsetup_r+0x8e>
 8017dcc:	2000      	movs	r0, #0
 8017dce:	e7f7      	b.n	8017dc0 <__swsetup_r+0x98>
 8017dd0:	20002e40 	.word	0x20002e40

08017dd4 <memcmp>:
 8017dd4:	b510      	push	{r4, lr}
 8017dd6:	3901      	subs	r1, #1
 8017dd8:	4402      	add	r2, r0
 8017dda:	4290      	cmp	r0, r2
 8017ddc:	d101      	bne.n	8017de2 <memcmp+0xe>
 8017dde:	2000      	movs	r0, #0
 8017de0:	e005      	b.n	8017dee <memcmp+0x1a>
 8017de2:	7803      	ldrb	r3, [r0, #0]
 8017de4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017de8:	42a3      	cmp	r3, r4
 8017dea:	d001      	beq.n	8017df0 <memcmp+0x1c>
 8017dec:	1b18      	subs	r0, r3, r4
 8017dee:	bd10      	pop	{r4, pc}
 8017df0:	3001      	adds	r0, #1
 8017df2:	e7f2      	b.n	8017dda <memcmp+0x6>

08017df4 <memmove>:
 8017df4:	4288      	cmp	r0, r1
 8017df6:	b510      	push	{r4, lr}
 8017df8:	eb01 0402 	add.w	r4, r1, r2
 8017dfc:	d902      	bls.n	8017e04 <memmove+0x10>
 8017dfe:	4284      	cmp	r4, r0
 8017e00:	4623      	mov	r3, r4
 8017e02:	d807      	bhi.n	8017e14 <memmove+0x20>
 8017e04:	1e43      	subs	r3, r0, #1
 8017e06:	42a1      	cmp	r1, r4
 8017e08:	d008      	beq.n	8017e1c <memmove+0x28>
 8017e0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017e0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017e12:	e7f8      	b.n	8017e06 <memmove+0x12>
 8017e14:	4402      	add	r2, r0
 8017e16:	4601      	mov	r1, r0
 8017e18:	428a      	cmp	r2, r1
 8017e1a:	d100      	bne.n	8017e1e <memmove+0x2a>
 8017e1c:	bd10      	pop	{r4, pc}
 8017e1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017e22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017e26:	e7f7      	b.n	8017e18 <memmove+0x24>

08017e28 <memset>:
 8017e28:	4402      	add	r2, r0
 8017e2a:	4603      	mov	r3, r0
 8017e2c:	4293      	cmp	r3, r2
 8017e2e:	d100      	bne.n	8017e32 <memset+0xa>
 8017e30:	4770      	bx	lr
 8017e32:	f803 1b01 	strb.w	r1, [r3], #1
 8017e36:	e7f9      	b.n	8017e2c <memset+0x4>

08017e38 <strchr>:
 8017e38:	b2c9      	uxtb	r1, r1
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e42:	b112      	cbz	r2, 8017e4a <strchr+0x12>
 8017e44:	428a      	cmp	r2, r1
 8017e46:	d1f9      	bne.n	8017e3c <strchr+0x4>
 8017e48:	4770      	bx	lr
 8017e4a:	2900      	cmp	r1, #0
 8017e4c:	bf18      	it	ne
 8017e4e:	2000      	movne	r0, #0
 8017e50:	4770      	bx	lr

08017e52 <strncmp>:
 8017e52:	b510      	push	{r4, lr}
 8017e54:	b16a      	cbz	r2, 8017e72 <strncmp+0x20>
 8017e56:	3901      	subs	r1, #1
 8017e58:	1884      	adds	r4, r0, r2
 8017e5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e5e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017e62:	429a      	cmp	r2, r3
 8017e64:	d103      	bne.n	8017e6e <strncmp+0x1c>
 8017e66:	42a0      	cmp	r0, r4
 8017e68:	d001      	beq.n	8017e6e <strncmp+0x1c>
 8017e6a:	2a00      	cmp	r2, #0
 8017e6c:	d1f5      	bne.n	8017e5a <strncmp+0x8>
 8017e6e:	1ad0      	subs	r0, r2, r3
 8017e70:	bd10      	pop	{r4, pc}
 8017e72:	4610      	mov	r0, r2
 8017e74:	e7fc      	b.n	8017e70 <strncmp+0x1e>

08017e76 <strncpy>:
 8017e76:	b510      	push	{r4, lr}
 8017e78:	3901      	subs	r1, #1
 8017e7a:	4603      	mov	r3, r0
 8017e7c:	b132      	cbz	r2, 8017e8c <strncpy+0x16>
 8017e7e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017e82:	f803 4b01 	strb.w	r4, [r3], #1
 8017e86:	3a01      	subs	r2, #1
 8017e88:	2c00      	cmp	r4, #0
 8017e8a:	d1f7      	bne.n	8017e7c <strncpy+0x6>
 8017e8c:	441a      	add	r2, r3
 8017e8e:	2100      	movs	r1, #0
 8017e90:	4293      	cmp	r3, r2
 8017e92:	d100      	bne.n	8017e96 <strncpy+0x20>
 8017e94:	bd10      	pop	{r4, pc}
 8017e96:	f803 1b01 	strb.w	r1, [r3], #1
 8017e9a:	e7f9      	b.n	8017e90 <strncpy+0x1a>

08017e9c <strstr>:
 8017e9c:	780a      	ldrb	r2, [r1, #0]
 8017e9e:	b570      	push	{r4, r5, r6, lr}
 8017ea0:	b96a      	cbnz	r2, 8017ebe <strstr+0x22>
 8017ea2:	bd70      	pop	{r4, r5, r6, pc}
 8017ea4:	429a      	cmp	r2, r3
 8017ea6:	d109      	bne.n	8017ebc <strstr+0x20>
 8017ea8:	460c      	mov	r4, r1
 8017eaa:	4605      	mov	r5, r0
 8017eac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d0f6      	beq.n	8017ea2 <strstr+0x6>
 8017eb4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017eb8:	429e      	cmp	r6, r3
 8017eba:	d0f7      	beq.n	8017eac <strstr+0x10>
 8017ebc:	3001      	adds	r0, #1
 8017ebe:	7803      	ldrb	r3, [r0, #0]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d1ef      	bne.n	8017ea4 <strstr+0x8>
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	e7ec      	b.n	8017ea2 <strstr+0x6>

08017ec8 <_close_r>:
 8017ec8:	b538      	push	{r3, r4, r5, lr}
 8017eca:	4d06      	ldr	r5, [pc, #24]	@ (8017ee4 <_close_r+0x1c>)
 8017ecc:	2300      	movs	r3, #0
 8017ece:	4604      	mov	r4, r0
 8017ed0:	4608      	mov	r0, r1
 8017ed2:	602b      	str	r3, [r5, #0]
 8017ed4:	f7ea f8d2 	bl	800207c <_close>
 8017ed8:	1c43      	adds	r3, r0, #1
 8017eda:	d102      	bne.n	8017ee2 <_close_r+0x1a>
 8017edc:	682b      	ldr	r3, [r5, #0]
 8017ede:	b103      	cbz	r3, 8017ee2 <_close_r+0x1a>
 8017ee0:	6023      	str	r3, [r4, #0]
 8017ee2:	bd38      	pop	{r3, r4, r5, pc}
 8017ee4:	20011360 	.word	0x20011360

08017ee8 <_lseek_r>:
 8017ee8:	b538      	push	{r3, r4, r5, lr}
 8017eea:	4d07      	ldr	r5, [pc, #28]	@ (8017f08 <_lseek_r+0x20>)
 8017eec:	4604      	mov	r4, r0
 8017eee:	4608      	mov	r0, r1
 8017ef0:	4611      	mov	r1, r2
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	602a      	str	r2, [r5, #0]
 8017ef6:	461a      	mov	r2, r3
 8017ef8:	f7ea f8e7 	bl	80020ca <_lseek>
 8017efc:	1c43      	adds	r3, r0, #1
 8017efe:	d102      	bne.n	8017f06 <_lseek_r+0x1e>
 8017f00:	682b      	ldr	r3, [r5, #0]
 8017f02:	b103      	cbz	r3, 8017f06 <_lseek_r+0x1e>
 8017f04:	6023      	str	r3, [r4, #0]
 8017f06:	bd38      	pop	{r3, r4, r5, pc}
 8017f08:	20011360 	.word	0x20011360

08017f0c <_read_r>:
 8017f0c:	b538      	push	{r3, r4, r5, lr}
 8017f0e:	4d07      	ldr	r5, [pc, #28]	@ (8017f2c <_read_r+0x20>)
 8017f10:	4604      	mov	r4, r0
 8017f12:	4608      	mov	r0, r1
 8017f14:	4611      	mov	r1, r2
 8017f16:	2200      	movs	r2, #0
 8017f18:	602a      	str	r2, [r5, #0]
 8017f1a:	461a      	mov	r2, r3
 8017f1c:	f7ea f875 	bl	800200a <_read>
 8017f20:	1c43      	adds	r3, r0, #1
 8017f22:	d102      	bne.n	8017f2a <_read_r+0x1e>
 8017f24:	682b      	ldr	r3, [r5, #0]
 8017f26:	b103      	cbz	r3, 8017f2a <_read_r+0x1e>
 8017f28:	6023      	str	r3, [r4, #0]
 8017f2a:	bd38      	pop	{r3, r4, r5, pc}
 8017f2c:	20011360 	.word	0x20011360

08017f30 <_sbrk_r>:
 8017f30:	b538      	push	{r3, r4, r5, lr}
 8017f32:	4d06      	ldr	r5, [pc, #24]	@ (8017f4c <_sbrk_r+0x1c>)
 8017f34:	2300      	movs	r3, #0
 8017f36:	4604      	mov	r4, r0
 8017f38:	4608      	mov	r0, r1
 8017f3a:	602b      	str	r3, [r5, #0]
 8017f3c:	f7ea f8d2 	bl	80020e4 <_sbrk>
 8017f40:	1c43      	adds	r3, r0, #1
 8017f42:	d102      	bne.n	8017f4a <_sbrk_r+0x1a>
 8017f44:	682b      	ldr	r3, [r5, #0]
 8017f46:	b103      	cbz	r3, 8017f4a <_sbrk_r+0x1a>
 8017f48:	6023      	str	r3, [r4, #0]
 8017f4a:	bd38      	pop	{r3, r4, r5, pc}
 8017f4c:	20011360 	.word	0x20011360

08017f50 <_write_r>:
 8017f50:	b538      	push	{r3, r4, r5, lr}
 8017f52:	4d07      	ldr	r5, [pc, #28]	@ (8017f70 <_write_r+0x20>)
 8017f54:	4604      	mov	r4, r0
 8017f56:	4608      	mov	r0, r1
 8017f58:	4611      	mov	r1, r2
 8017f5a:	2200      	movs	r2, #0
 8017f5c:	602a      	str	r2, [r5, #0]
 8017f5e:	461a      	mov	r2, r3
 8017f60:	f7ea f870 	bl	8002044 <_write>
 8017f64:	1c43      	adds	r3, r0, #1
 8017f66:	d102      	bne.n	8017f6e <_write_r+0x1e>
 8017f68:	682b      	ldr	r3, [r5, #0]
 8017f6a:	b103      	cbz	r3, 8017f6e <_write_r+0x1e>
 8017f6c:	6023      	str	r3, [r4, #0]
 8017f6e:	bd38      	pop	{r3, r4, r5, pc}
 8017f70:	20011360 	.word	0x20011360

08017f74 <__errno>:
 8017f74:	4b01      	ldr	r3, [pc, #4]	@ (8017f7c <__errno+0x8>)
 8017f76:	6818      	ldr	r0, [r3, #0]
 8017f78:	4770      	bx	lr
 8017f7a:	bf00      	nop
 8017f7c:	20002e40 	.word	0x20002e40

08017f80 <__libc_init_array>:
 8017f80:	b570      	push	{r4, r5, r6, lr}
 8017f82:	4d0d      	ldr	r5, [pc, #52]	@ (8017fb8 <__libc_init_array+0x38>)
 8017f84:	4c0d      	ldr	r4, [pc, #52]	@ (8017fbc <__libc_init_array+0x3c>)
 8017f86:	1b64      	subs	r4, r4, r5
 8017f88:	10a4      	asrs	r4, r4, #2
 8017f8a:	2600      	movs	r6, #0
 8017f8c:	42a6      	cmp	r6, r4
 8017f8e:	d109      	bne.n	8017fa4 <__libc_init_array+0x24>
 8017f90:	4d0b      	ldr	r5, [pc, #44]	@ (8017fc0 <__libc_init_array+0x40>)
 8017f92:	4c0c      	ldr	r4, [pc, #48]	@ (8017fc4 <__libc_init_array+0x44>)
 8017f94:	f000 fe62 	bl	8018c5c <_init>
 8017f98:	1b64      	subs	r4, r4, r5
 8017f9a:	10a4      	asrs	r4, r4, #2
 8017f9c:	2600      	movs	r6, #0
 8017f9e:	42a6      	cmp	r6, r4
 8017fa0:	d105      	bne.n	8017fae <__libc_init_array+0x2e>
 8017fa2:	bd70      	pop	{r4, r5, r6, pc}
 8017fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8017fa8:	4798      	blx	r3
 8017faa:	3601      	adds	r6, #1
 8017fac:	e7ee      	b.n	8017f8c <__libc_init_array+0xc>
 8017fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8017fb2:	4798      	blx	r3
 8017fb4:	3601      	adds	r6, #1
 8017fb6:	e7f2      	b.n	8017f9e <__libc_init_array+0x1e>
 8017fb8:	0801a6f0 	.word	0x0801a6f0
 8017fbc:	0801a6f0 	.word	0x0801a6f0
 8017fc0:	0801a6f0 	.word	0x0801a6f0
 8017fc4:	0801a700 	.word	0x0801a700

08017fc8 <__retarget_lock_init_recursive>:
 8017fc8:	4770      	bx	lr

08017fca <__retarget_lock_acquire_recursive>:
 8017fca:	4770      	bx	lr

08017fcc <__retarget_lock_release_recursive>:
 8017fcc:	4770      	bx	lr

08017fce <strcpy>:
 8017fce:	4603      	mov	r3, r0
 8017fd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017fd4:	f803 2b01 	strb.w	r2, [r3], #1
 8017fd8:	2a00      	cmp	r2, #0
 8017fda:	d1f9      	bne.n	8017fd0 <strcpy+0x2>
 8017fdc:	4770      	bx	lr

08017fde <memcpy>:
 8017fde:	440a      	add	r2, r1
 8017fe0:	4291      	cmp	r1, r2
 8017fe2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8017fe6:	d100      	bne.n	8017fea <memcpy+0xc>
 8017fe8:	4770      	bx	lr
 8017fea:	b510      	push	{r4, lr}
 8017fec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017ff4:	4291      	cmp	r1, r2
 8017ff6:	d1f9      	bne.n	8017fec <memcpy+0xe>
 8017ff8:	bd10      	pop	{r4, pc}
	...

08017ffc <__assert_func>:
 8017ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017ffe:	4614      	mov	r4, r2
 8018000:	461a      	mov	r2, r3
 8018002:	4b09      	ldr	r3, [pc, #36]	@ (8018028 <__assert_func+0x2c>)
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	4605      	mov	r5, r0
 8018008:	68d8      	ldr	r0, [r3, #12]
 801800a:	b14c      	cbz	r4, 8018020 <__assert_func+0x24>
 801800c:	4b07      	ldr	r3, [pc, #28]	@ (801802c <__assert_func+0x30>)
 801800e:	9100      	str	r1, [sp, #0]
 8018010:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018014:	4906      	ldr	r1, [pc, #24]	@ (8018030 <__assert_func+0x34>)
 8018016:	462b      	mov	r3, r5
 8018018:	f000 fd3e 	bl	8018a98 <fiprintf>
 801801c:	f000 fdd2 	bl	8018bc4 <abort>
 8018020:	4b04      	ldr	r3, [pc, #16]	@ (8018034 <__assert_func+0x38>)
 8018022:	461c      	mov	r4, r3
 8018024:	e7f3      	b.n	801800e <__assert_func+0x12>
 8018026:	bf00      	nop
 8018028:	20002e40 	.word	0x20002e40
 801802c:	0801a577 	.word	0x0801a577
 8018030:	0801a584 	.word	0x0801a584
 8018034:	0801a5b2 	.word	0x0801a5b2

08018038 <__env_lock>:
 8018038:	4801      	ldr	r0, [pc, #4]	@ (8018040 <__env_lock+0x8>)
 801803a:	f7ff bfc6 	b.w	8017fca <__retarget_lock_acquire_recursive>
 801803e:	bf00      	nop
 8018040:	20011364 	.word	0x20011364

08018044 <__env_unlock>:
 8018044:	4801      	ldr	r0, [pc, #4]	@ (801804c <__env_unlock+0x8>)
 8018046:	f7ff bfc1 	b.w	8017fcc <__retarget_lock_release_recursive>
 801804a:	bf00      	nop
 801804c:	20011364 	.word	0x20011364

08018050 <_free_r>:
 8018050:	b538      	push	{r3, r4, r5, lr}
 8018052:	4605      	mov	r5, r0
 8018054:	2900      	cmp	r1, #0
 8018056:	d041      	beq.n	80180dc <_free_r+0x8c>
 8018058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801805c:	1f0c      	subs	r4, r1, #4
 801805e:	2b00      	cmp	r3, #0
 8018060:	bfb8      	it	lt
 8018062:	18e4      	addlt	r4, r4, r3
 8018064:	f7ff faba 	bl	80175dc <__malloc_lock>
 8018068:	4a1d      	ldr	r2, [pc, #116]	@ (80180e0 <_free_r+0x90>)
 801806a:	6813      	ldr	r3, [r2, #0]
 801806c:	b933      	cbnz	r3, 801807c <_free_r+0x2c>
 801806e:	6063      	str	r3, [r4, #4]
 8018070:	6014      	str	r4, [r2, #0]
 8018072:	4628      	mov	r0, r5
 8018074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018078:	f7ff bab6 	b.w	80175e8 <__malloc_unlock>
 801807c:	42a3      	cmp	r3, r4
 801807e:	d908      	bls.n	8018092 <_free_r+0x42>
 8018080:	6820      	ldr	r0, [r4, #0]
 8018082:	1821      	adds	r1, r4, r0
 8018084:	428b      	cmp	r3, r1
 8018086:	bf01      	itttt	eq
 8018088:	6819      	ldreq	r1, [r3, #0]
 801808a:	685b      	ldreq	r3, [r3, #4]
 801808c:	1809      	addeq	r1, r1, r0
 801808e:	6021      	streq	r1, [r4, #0]
 8018090:	e7ed      	b.n	801806e <_free_r+0x1e>
 8018092:	461a      	mov	r2, r3
 8018094:	685b      	ldr	r3, [r3, #4]
 8018096:	b10b      	cbz	r3, 801809c <_free_r+0x4c>
 8018098:	42a3      	cmp	r3, r4
 801809a:	d9fa      	bls.n	8018092 <_free_r+0x42>
 801809c:	6811      	ldr	r1, [r2, #0]
 801809e:	1850      	adds	r0, r2, r1
 80180a0:	42a0      	cmp	r0, r4
 80180a2:	d10b      	bne.n	80180bc <_free_r+0x6c>
 80180a4:	6820      	ldr	r0, [r4, #0]
 80180a6:	4401      	add	r1, r0
 80180a8:	1850      	adds	r0, r2, r1
 80180aa:	4283      	cmp	r3, r0
 80180ac:	6011      	str	r1, [r2, #0]
 80180ae:	d1e0      	bne.n	8018072 <_free_r+0x22>
 80180b0:	6818      	ldr	r0, [r3, #0]
 80180b2:	685b      	ldr	r3, [r3, #4]
 80180b4:	6053      	str	r3, [r2, #4]
 80180b6:	4408      	add	r0, r1
 80180b8:	6010      	str	r0, [r2, #0]
 80180ba:	e7da      	b.n	8018072 <_free_r+0x22>
 80180bc:	d902      	bls.n	80180c4 <_free_r+0x74>
 80180be:	230c      	movs	r3, #12
 80180c0:	602b      	str	r3, [r5, #0]
 80180c2:	e7d6      	b.n	8018072 <_free_r+0x22>
 80180c4:	6820      	ldr	r0, [r4, #0]
 80180c6:	1821      	adds	r1, r4, r0
 80180c8:	428b      	cmp	r3, r1
 80180ca:	bf04      	itt	eq
 80180cc:	6819      	ldreq	r1, [r3, #0]
 80180ce:	685b      	ldreq	r3, [r3, #4]
 80180d0:	6063      	str	r3, [r4, #4]
 80180d2:	bf04      	itt	eq
 80180d4:	1809      	addeq	r1, r1, r0
 80180d6:	6021      	streq	r1, [r4, #0]
 80180d8:	6054      	str	r4, [r2, #4]
 80180da:	e7ca      	b.n	8018072 <_free_r+0x22>
 80180dc:	bd38      	pop	{r3, r4, r5, pc}
 80180de:	bf00      	nop
 80180e0:	20011220 	.word	0x20011220

080180e4 <_malloc_usable_size_r>:
 80180e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80180e8:	1f18      	subs	r0, r3, #4
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	bfbc      	itt	lt
 80180ee:	580b      	ldrlt	r3, [r1, r0]
 80180f0:	18c0      	addlt	r0, r0, r3
 80180f2:	4770      	bx	lr

080180f4 <__ssputs_r>:
 80180f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180f8:	688e      	ldr	r6, [r1, #8]
 80180fa:	461f      	mov	r7, r3
 80180fc:	42be      	cmp	r6, r7
 80180fe:	680b      	ldr	r3, [r1, #0]
 8018100:	4682      	mov	sl, r0
 8018102:	460c      	mov	r4, r1
 8018104:	4690      	mov	r8, r2
 8018106:	d82d      	bhi.n	8018164 <__ssputs_r+0x70>
 8018108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801810c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018110:	d026      	beq.n	8018160 <__ssputs_r+0x6c>
 8018112:	6965      	ldr	r5, [r4, #20]
 8018114:	6909      	ldr	r1, [r1, #16]
 8018116:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801811a:	eba3 0901 	sub.w	r9, r3, r1
 801811e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018122:	1c7b      	adds	r3, r7, #1
 8018124:	444b      	add	r3, r9
 8018126:	106d      	asrs	r5, r5, #1
 8018128:	429d      	cmp	r5, r3
 801812a:	bf38      	it	cc
 801812c:	461d      	movcc	r5, r3
 801812e:	0553      	lsls	r3, r2, #21
 8018130:	d527      	bpl.n	8018182 <__ssputs_r+0x8e>
 8018132:	4629      	mov	r1, r5
 8018134:	f7ff f9d2 	bl	80174dc <_malloc_r>
 8018138:	4606      	mov	r6, r0
 801813a:	b360      	cbz	r0, 8018196 <__ssputs_r+0xa2>
 801813c:	6921      	ldr	r1, [r4, #16]
 801813e:	464a      	mov	r2, r9
 8018140:	f7ff ff4d 	bl	8017fde <memcpy>
 8018144:	89a3      	ldrh	r3, [r4, #12]
 8018146:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801814a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801814e:	81a3      	strh	r3, [r4, #12]
 8018150:	6126      	str	r6, [r4, #16]
 8018152:	6165      	str	r5, [r4, #20]
 8018154:	444e      	add	r6, r9
 8018156:	eba5 0509 	sub.w	r5, r5, r9
 801815a:	6026      	str	r6, [r4, #0]
 801815c:	60a5      	str	r5, [r4, #8]
 801815e:	463e      	mov	r6, r7
 8018160:	42be      	cmp	r6, r7
 8018162:	d900      	bls.n	8018166 <__ssputs_r+0x72>
 8018164:	463e      	mov	r6, r7
 8018166:	6820      	ldr	r0, [r4, #0]
 8018168:	4632      	mov	r2, r6
 801816a:	4641      	mov	r1, r8
 801816c:	f7ff fe42 	bl	8017df4 <memmove>
 8018170:	68a3      	ldr	r3, [r4, #8]
 8018172:	1b9b      	subs	r3, r3, r6
 8018174:	60a3      	str	r3, [r4, #8]
 8018176:	6823      	ldr	r3, [r4, #0]
 8018178:	4433      	add	r3, r6
 801817a:	6023      	str	r3, [r4, #0]
 801817c:	2000      	movs	r0, #0
 801817e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018182:	462a      	mov	r2, r5
 8018184:	f7ff faaa 	bl	80176dc <_realloc_r>
 8018188:	4606      	mov	r6, r0
 801818a:	2800      	cmp	r0, #0
 801818c:	d1e0      	bne.n	8018150 <__ssputs_r+0x5c>
 801818e:	6921      	ldr	r1, [r4, #16]
 8018190:	4650      	mov	r0, sl
 8018192:	f7ff ff5d 	bl	8018050 <_free_r>
 8018196:	230c      	movs	r3, #12
 8018198:	f8ca 3000 	str.w	r3, [sl]
 801819c:	89a3      	ldrh	r3, [r4, #12]
 801819e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80181a2:	81a3      	strh	r3, [r4, #12]
 80181a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80181a8:	e7e9      	b.n	801817e <__ssputs_r+0x8a>
	...

080181ac <_svfiprintf_r>:
 80181ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181b0:	4698      	mov	r8, r3
 80181b2:	898b      	ldrh	r3, [r1, #12]
 80181b4:	061b      	lsls	r3, r3, #24
 80181b6:	b09d      	sub	sp, #116	@ 0x74
 80181b8:	4607      	mov	r7, r0
 80181ba:	460d      	mov	r5, r1
 80181bc:	4614      	mov	r4, r2
 80181be:	d510      	bpl.n	80181e2 <_svfiprintf_r+0x36>
 80181c0:	690b      	ldr	r3, [r1, #16]
 80181c2:	b973      	cbnz	r3, 80181e2 <_svfiprintf_r+0x36>
 80181c4:	2140      	movs	r1, #64	@ 0x40
 80181c6:	f7ff f989 	bl	80174dc <_malloc_r>
 80181ca:	6028      	str	r0, [r5, #0]
 80181cc:	6128      	str	r0, [r5, #16]
 80181ce:	b930      	cbnz	r0, 80181de <_svfiprintf_r+0x32>
 80181d0:	230c      	movs	r3, #12
 80181d2:	603b      	str	r3, [r7, #0]
 80181d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80181d8:	b01d      	add	sp, #116	@ 0x74
 80181da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181de:	2340      	movs	r3, #64	@ 0x40
 80181e0:	616b      	str	r3, [r5, #20]
 80181e2:	2300      	movs	r3, #0
 80181e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80181e6:	2320      	movs	r3, #32
 80181e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80181ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80181f0:	2330      	movs	r3, #48	@ 0x30
 80181f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018390 <_svfiprintf_r+0x1e4>
 80181f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80181fa:	f04f 0901 	mov.w	r9, #1
 80181fe:	4623      	mov	r3, r4
 8018200:	469a      	mov	sl, r3
 8018202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018206:	b10a      	cbz	r2, 801820c <_svfiprintf_r+0x60>
 8018208:	2a25      	cmp	r2, #37	@ 0x25
 801820a:	d1f9      	bne.n	8018200 <_svfiprintf_r+0x54>
 801820c:	ebba 0b04 	subs.w	fp, sl, r4
 8018210:	d00b      	beq.n	801822a <_svfiprintf_r+0x7e>
 8018212:	465b      	mov	r3, fp
 8018214:	4622      	mov	r2, r4
 8018216:	4629      	mov	r1, r5
 8018218:	4638      	mov	r0, r7
 801821a:	f7ff ff6b 	bl	80180f4 <__ssputs_r>
 801821e:	3001      	adds	r0, #1
 8018220:	f000 80a7 	beq.w	8018372 <_svfiprintf_r+0x1c6>
 8018224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018226:	445a      	add	r2, fp
 8018228:	9209      	str	r2, [sp, #36]	@ 0x24
 801822a:	f89a 3000 	ldrb.w	r3, [sl]
 801822e:	2b00      	cmp	r3, #0
 8018230:	f000 809f 	beq.w	8018372 <_svfiprintf_r+0x1c6>
 8018234:	2300      	movs	r3, #0
 8018236:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801823a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801823e:	f10a 0a01 	add.w	sl, sl, #1
 8018242:	9304      	str	r3, [sp, #16]
 8018244:	9307      	str	r3, [sp, #28]
 8018246:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801824a:	931a      	str	r3, [sp, #104]	@ 0x68
 801824c:	4654      	mov	r4, sl
 801824e:	2205      	movs	r2, #5
 8018250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018254:	484e      	ldr	r0, [pc, #312]	@ (8018390 <_svfiprintf_r+0x1e4>)
 8018256:	f7e7 ffd3 	bl	8000200 <memchr>
 801825a:	9a04      	ldr	r2, [sp, #16]
 801825c:	b9d8      	cbnz	r0, 8018296 <_svfiprintf_r+0xea>
 801825e:	06d0      	lsls	r0, r2, #27
 8018260:	bf44      	itt	mi
 8018262:	2320      	movmi	r3, #32
 8018264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018268:	0711      	lsls	r1, r2, #28
 801826a:	bf44      	itt	mi
 801826c:	232b      	movmi	r3, #43	@ 0x2b
 801826e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018272:	f89a 3000 	ldrb.w	r3, [sl]
 8018276:	2b2a      	cmp	r3, #42	@ 0x2a
 8018278:	d015      	beq.n	80182a6 <_svfiprintf_r+0xfa>
 801827a:	9a07      	ldr	r2, [sp, #28]
 801827c:	4654      	mov	r4, sl
 801827e:	2000      	movs	r0, #0
 8018280:	f04f 0c0a 	mov.w	ip, #10
 8018284:	4621      	mov	r1, r4
 8018286:	f811 3b01 	ldrb.w	r3, [r1], #1
 801828a:	3b30      	subs	r3, #48	@ 0x30
 801828c:	2b09      	cmp	r3, #9
 801828e:	d94b      	bls.n	8018328 <_svfiprintf_r+0x17c>
 8018290:	b1b0      	cbz	r0, 80182c0 <_svfiprintf_r+0x114>
 8018292:	9207      	str	r2, [sp, #28]
 8018294:	e014      	b.n	80182c0 <_svfiprintf_r+0x114>
 8018296:	eba0 0308 	sub.w	r3, r0, r8
 801829a:	fa09 f303 	lsl.w	r3, r9, r3
 801829e:	4313      	orrs	r3, r2
 80182a0:	9304      	str	r3, [sp, #16]
 80182a2:	46a2      	mov	sl, r4
 80182a4:	e7d2      	b.n	801824c <_svfiprintf_r+0xa0>
 80182a6:	9b03      	ldr	r3, [sp, #12]
 80182a8:	1d19      	adds	r1, r3, #4
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	9103      	str	r1, [sp, #12]
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	bfbb      	ittet	lt
 80182b2:	425b      	neglt	r3, r3
 80182b4:	f042 0202 	orrlt.w	r2, r2, #2
 80182b8:	9307      	strge	r3, [sp, #28]
 80182ba:	9307      	strlt	r3, [sp, #28]
 80182bc:	bfb8      	it	lt
 80182be:	9204      	strlt	r2, [sp, #16]
 80182c0:	7823      	ldrb	r3, [r4, #0]
 80182c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80182c4:	d10a      	bne.n	80182dc <_svfiprintf_r+0x130>
 80182c6:	7863      	ldrb	r3, [r4, #1]
 80182c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80182ca:	d132      	bne.n	8018332 <_svfiprintf_r+0x186>
 80182cc:	9b03      	ldr	r3, [sp, #12]
 80182ce:	1d1a      	adds	r2, r3, #4
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	9203      	str	r2, [sp, #12]
 80182d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80182d8:	3402      	adds	r4, #2
 80182da:	9305      	str	r3, [sp, #20]
 80182dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80183a0 <_svfiprintf_r+0x1f4>
 80182e0:	7821      	ldrb	r1, [r4, #0]
 80182e2:	2203      	movs	r2, #3
 80182e4:	4650      	mov	r0, sl
 80182e6:	f7e7 ff8b 	bl	8000200 <memchr>
 80182ea:	b138      	cbz	r0, 80182fc <_svfiprintf_r+0x150>
 80182ec:	9b04      	ldr	r3, [sp, #16]
 80182ee:	eba0 000a 	sub.w	r0, r0, sl
 80182f2:	2240      	movs	r2, #64	@ 0x40
 80182f4:	4082      	lsls	r2, r0
 80182f6:	4313      	orrs	r3, r2
 80182f8:	3401      	adds	r4, #1
 80182fa:	9304      	str	r3, [sp, #16]
 80182fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018300:	4824      	ldr	r0, [pc, #144]	@ (8018394 <_svfiprintf_r+0x1e8>)
 8018302:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018306:	2206      	movs	r2, #6
 8018308:	f7e7 ff7a 	bl	8000200 <memchr>
 801830c:	2800      	cmp	r0, #0
 801830e:	d036      	beq.n	801837e <_svfiprintf_r+0x1d2>
 8018310:	4b21      	ldr	r3, [pc, #132]	@ (8018398 <_svfiprintf_r+0x1ec>)
 8018312:	bb1b      	cbnz	r3, 801835c <_svfiprintf_r+0x1b0>
 8018314:	9b03      	ldr	r3, [sp, #12]
 8018316:	3307      	adds	r3, #7
 8018318:	f023 0307 	bic.w	r3, r3, #7
 801831c:	3308      	adds	r3, #8
 801831e:	9303      	str	r3, [sp, #12]
 8018320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018322:	4433      	add	r3, r6
 8018324:	9309      	str	r3, [sp, #36]	@ 0x24
 8018326:	e76a      	b.n	80181fe <_svfiprintf_r+0x52>
 8018328:	fb0c 3202 	mla	r2, ip, r2, r3
 801832c:	460c      	mov	r4, r1
 801832e:	2001      	movs	r0, #1
 8018330:	e7a8      	b.n	8018284 <_svfiprintf_r+0xd8>
 8018332:	2300      	movs	r3, #0
 8018334:	3401      	adds	r4, #1
 8018336:	9305      	str	r3, [sp, #20]
 8018338:	4619      	mov	r1, r3
 801833a:	f04f 0c0a 	mov.w	ip, #10
 801833e:	4620      	mov	r0, r4
 8018340:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018344:	3a30      	subs	r2, #48	@ 0x30
 8018346:	2a09      	cmp	r2, #9
 8018348:	d903      	bls.n	8018352 <_svfiprintf_r+0x1a6>
 801834a:	2b00      	cmp	r3, #0
 801834c:	d0c6      	beq.n	80182dc <_svfiprintf_r+0x130>
 801834e:	9105      	str	r1, [sp, #20]
 8018350:	e7c4      	b.n	80182dc <_svfiprintf_r+0x130>
 8018352:	fb0c 2101 	mla	r1, ip, r1, r2
 8018356:	4604      	mov	r4, r0
 8018358:	2301      	movs	r3, #1
 801835a:	e7f0      	b.n	801833e <_svfiprintf_r+0x192>
 801835c:	ab03      	add	r3, sp, #12
 801835e:	9300      	str	r3, [sp, #0]
 8018360:	462a      	mov	r2, r5
 8018362:	4b0e      	ldr	r3, [pc, #56]	@ (801839c <_svfiprintf_r+0x1f0>)
 8018364:	a904      	add	r1, sp, #16
 8018366:	4638      	mov	r0, r7
 8018368:	f3af 8000 	nop.w
 801836c:	1c42      	adds	r2, r0, #1
 801836e:	4606      	mov	r6, r0
 8018370:	d1d6      	bne.n	8018320 <_svfiprintf_r+0x174>
 8018372:	89ab      	ldrh	r3, [r5, #12]
 8018374:	065b      	lsls	r3, r3, #25
 8018376:	f53f af2d 	bmi.w	80181d4 <_svfiprintf_r+0x28>
 801837a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801837c:	e72c      	b.n	80181d8 <_svfiprintf_r+0x2c>
 801837e:	ab03      	add	r3, sp, #12
 8018380:	9300      	str	r3, [sp, #0]
 8018382:	462a      	mov	r2, r5
 8018384:	4b05      	ldr	r3, [pc, #20]	@ (801839c <_svfiprintf_r+0x1f0>)
 8018386:	a904      	add	r1, sp, #16
 8018388:	4638      	mov	r0, r7
 801838a:	f000 f9bb 	bl	8018704 <_printf_i>
 801838e:	e7ed      	b.n	801836c <_svfiprintf_r+0x1c0>
 8018390:	0801a5b3 	.word	0x0801a5b3
 8018394:	0801a5bd 	.word	0x0801a5bd
 8018398:	00000000 	.word	0x00000000
 801839c:	080180f5 	.word	0x080180f5
 80183a0:	0801a5b9 	.word	0x0801a5b9

080183a4 <__sfputc_r>:
 80183a4:	6893      	ldr	r3, [r2, #8]
 80183a6:	3b01      	subs	r3, #1
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	b410      	push	{r4}
 80183ac:	6093      	str	r3, [r2, #8]
 80183ae:	da08      	bge.n	80183c2 <__sfputc_r+0x1e>
 80183b0:	6994      	ldr	r4, [r2, #24]
 80183b2:	42a3      	cmp	r3, r4
 80183b4:	db01      	blt.n	80183ba <__sfputc_r+0x16>
 80183b6:	290a      	cmp	r1, #10
 80183b8:	d103      	bne.n	80183c2 <__sfputc_r+0x1e>
 80183ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183be:	f7ff bc75 	b.w	8017cac <__swbuf_r>
 80183c2:	6813      	ldr	r3, [r2, #0]
 80183c4:	1c58      	adds	r0, r3, #1
 80183c6:	6010      	str	r0, [r2, #0]
 80183c8:	7019      	strb	r1, [r3, #0]
 80183ca:	4608      	mov	r0, r1
 80183cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183d0:	4770      	bx	lr

080183d2 <__sfputs_r>:
 80183d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183d4:	4606      	mov	r6, r0
 80183d6:	460f      	mov	r7, r1
 80183d8:	4614      	mov	r4, r2
 80183da:	18d5      	adds	r5, r2, r3
 80183dc:	42ac      	cmp	r4, r5
 80183de:	d101      	bne.n	80183e4 <__sfputs_r+0x12>
 80183e0:	2000      	movs	r0, #0
 80183e2:	e007      	b.n	80183f4 <__sfputs_r+0x22>
 80183e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80183e8:	463a      	mov	r2, r7
 80183ea:	4630      	mov	r0, r6
 80183ec:	f7ff ffda 	bl	80183a4 <__sfputc_r>
 80183f0:	1c43      	adds	r3, r0, #1
 80183f2:	d1f3      	bne.n	80183dc <__sfputs_r+0xa>
 80183f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080183f8 <_vfiprintf_r>:
 80183f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183fc:	460d      	mov	r5, r1
 80183fe:	b09d      	sub	sp, #116	@ 0x74
 8018400:	4614      	mov	r4, r2
 8018402:	4698      	mov	r8, r3
 8018404:	4606      	mov	r6, r0
 8018406:	b118      	cbz	r0, 8018410 <_vfiprintf_r+0x18>
 8018408:	6a03      	ldr	r3, [r0, #32]
 801840a:	b90b      	cbnz	r3, 8018410 <_vfiprintf_r+0x18>
 801840c:	f7ff fa98 	bl	8017940 <__sinit>
 8018410:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018412:	07d9      	lsls	r1, r3, #31
 8018414:	d405      	bmi.n	8018422 <_vfiprintf_r+0x2a>
 8018416:	89ab      	ldrh	r3, [r5, #12]
 8018418:	059a      	lsls	r2, r3, #22
 801841a:	d402      	bmi.n	8018422 <_vfiprintf_r+0x2a>
 801841c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801841e:	f7ff fdd4 	bl	8017fca <__retarget_lock_acquire_recursive>
 8018422:	89ab      	ldrh	r3, [r5, #12]
 8018424:	071b      	lsls	r3, r3, #28
 8018426:	d501      	bpl.n	801842c <_vfiprintf_r+0x34>
 8018428:	692b      	ldr	r3, [r5, #16]
 801842a:	b99b      	cbnz	r3, 8018454 <_vfiprintf_r+0x5c>
 801842c:	4629      	mov	r1, r5
 801842e:	4630      	mov	r0, r6
 8018430:	f7ff fc7a 	bl	8017d28 <__swsetup_r>
 8018434:	b170      	cbz	r0, 8018454 <_vfiprintf_r+0x5c>
 8018436:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018438:	07dc      	lsls	r4, r3, #31
 801843a:	d504      	bpl.n	8018446 <_vfiprintf_r+0x4e>
 801843c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018440:	b01d      	add	sp, #116	@ 0x74
 8018442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018446:	89ab      	ldrh	r3, [r5, #12]
 8018448:	0598      	lsls	r0, r3, #22
 801844a:	d4f7      	bmi.n	801843c <_vfiprintf_r+0x44>
 801844c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801844e:	f7ff fdbd 	bl	8017fcc <__retarget_lock_release_recursive>
 8018452:	e7f3      	b.n	801843c <_vfiprintf_r+0x44>
 8018454:	2300      	movs	r3, #0
 8018456:	9309      	str	r3, [sp, #36]	@ 0x24
 8018458:	2320      	movs	r3, #32
 801845a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801845e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018462:	2330      	movs	r3, #48	@ 0x30
 8018464:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018614 <_vfiprintf_r+0x21c>
 8018468:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801846c:	f04f 0901 	mov.w	r9, #1
 8018470:	4623      	mov	r3, r4
 8018472:	469a      	mov	sl, r3
 8018474:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018478:	b10a      	cbz	r2, 801847e <_vfiprintf_r+0x86>
 801847a:	2a25      	cmp	r2, #37	@ 0x25
 801847c:	d1f9      	bne.n	8018472 <_vfiprintf_r+0x7a>
 801847e:	ebba 0b04 	subs.w	fp, sl, r4
 8018482:	d00b      	beq.n	801849c <_vfiprintf_r+0xa4>
 8018484:	465b      	mov	r3, fp
 8018486:	4622      	mov	r2, r4
 8018488:	4629      	mov	r1, r5
 801848a:	4630      	mov	r0, r6
 801848c:	f7ff ffa1 	bl	80183d2 <__sfputs_r>
 8018490:	3001      	adds	r0, #1
 8018492:	f000 80a7 	beq.w	80185e4 <_vfiprintf_r+0x1ec>
 8018496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018498:	445a      	add	r2, fp
 801849a:	9209      	str	r2, [sp, #36]	@ 0x24
 801849c:	f89a 3000 	ldrb.w	r3, [sl]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	f000 809f 	beq.w	80185e4 <_vfiprintf_r+0x1ec>
 80184a6:	2300      	movs	r3, #0
 80184a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80184ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80184b0:	f10a 0a01 	add.w	sl, sl, #1
 80184b4:	9304      	str	r3, [sp, #16]
 80184b6:	9307      	str	r3, [sp, #28]
 80184b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80184bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80184be:	4654      	mov	r4, sl
 80184c0:	2205      	movs	r2, #5
 80184c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184c6:	4853      	ldr	r0, [pc, #332]	@ (8018614 <_vfiprintf_r+0x21c>)
 80184c8:	f7e7 fe9a 	bl	8000200 <memchr>
 80184cc:	9a04      	ldr	r2, [sp, #16]
 80184ce:	b9d8      	cbnz	r0, 8018508 <_vfiprintf_r+0x110>
 80184d0:	06d1      	lsls	r1, r2, #27
 80184d2:	bf44      	itt	mi
 80184d4:	2320      	movmi	r3, #32
 80184d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80184da:	0713      	lsls	r3, r2, #28
 80184dc:	bf44      	itt	mi
 80184de:	232b      	movmi	r3, #43	@ 0x2b
 80184e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80184e4:	f89a 3000 	ldrb.w	r3, [sl]
 80184e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80184ea:	d015      	beq.n	8018518 <_vfiprintf_r+0x120>
 80184ec:	9a07      	ldr	r2, [sp, #28]
 80184ee:	4654      	mov	r4, sl
 80184f0:	2000      	movs	r0, #0
 80184f2:	f04f 0c0a 	mov.w	ip, #10
 80184f6:	4621      	mov	r1, r4
 80184f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80184fc:	3b30      	subs	r3, #48	@ 0x30
 80184fe:	2b09      	cmp	r3, #9
 8018500:	d94b      	bls.n	801859a <_vfiprintf_r+0x1a2>
 8018502:	b1b0      	cbz	r0, 8018532 <_vfiprintf_r+0x13a>
 8018504:	9207      	str	r2, [sp, #28]
 8018506:	e014      	b.n	8018532 <_vfiprintf_r+0x13a>
 8018508:	eba0 0308 	sub.w	r3, r0, r8
 801850c:	fa09 f303 	lsl.w	r3, r9, r3
 8018510:	4313      	orrs	r3, r2
 8018512:	9304      	str	r3, [sp, #16]
 8018514:	46a2      	mov	sl, r4
 8018516:	e7d2      	b.n	80184be <_vfiprintf_r+0xc6>
 8018518:	9b03      	ldr	r3, [sp, #12]
 801851a:	1d19      	adds	r1, r3, #4
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	9103      	str	r1, [sp, #12]
 8018520:	2b00      	cmp	r3, #0
 8018522:	bfbb      	ittet	lt
 8018524:	425b      	neglt	r3, r3
 8018526:	f042 0202 	orrlt.w	r2, r2, #2
 801852a:	9307      	strge	r3, [sp, #28]
 801852c:	9307      	strlt	r3, [sp, #28]
 801852e:	bfb8      	it	lt
 8018530:	9204      	strlt	r2, [sp, #16]
 8018532:	7823      	ldrb	r3, [r4, #0]
 8018534:	2b2e      	cmp	r3, #46	@ 0x2e
 8018536:	d10a      	bne.n	801854e <_vfiprintf_r+0x156>
 8018538:	7863      	ldrb	r3, [r4, #1]
 801853a:	2b2a      	cmp	r3, #42	@ 0x2a
 801853c:	d132      	bne.n	80185a4 <_vfiprintf_r+0x1ac>
 801853e:	9b03      	ldr	r3, [sp, #12]
 8018540:	1d1a      	adds	r2, r3, #4
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	9203      	str	r2, [sp, #12]
 8018546:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801854a:	3402      	adds	r4, #2
 801854c:	9305      	str	r3, [sp, #20]
 801854e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018624 <_vfiprintf_r+0x22c>
 8018552:	7821      	ldrb	r1, [r4, #0]
 8018554:	2203      	movs	r2, #3
 8018556:	4650      	mov	r0, sl
 8018558:	f7e7 fe52 	bl	8000200 <memchr>
 801855c:	b138      	cbz	r0, 801856e <_vfiprintf_r+0x176>
 801855e:	9b04      	ldr	r3, [sp, #16]
 8018560:	eba0 000a 	sub.w	r0, r0, sl
 8018564:	2240      	movs	r2, #64	@ 0x40
 8018566:	4082      	lsls	r2, r0
 8018568:	4313      	orrs	r3, r2
 801856a:	3401      	adds	r4, #1
 801856c:	9304      	str	r3, [sp, #16]
 801856e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018572:	4829      	ldr	r0, [pc, #164]	@ (8018618 <_vfiprintf_r+0x220>)
 8018574:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018578:	2206      	movs	r2, #6
 801857a:	f7e7 fe41 	bl	8000200 <memchr>
 801857e:	2800      	cmp	r0, #0
 8018580:	d03f      	beq.n	8018602 <_vfiprintf_r+0x20a>
 8018582:	4b26      	ldr	r3, [pc, #152]	@ (801861c <_vfiprintf_r+0x224>)
 8018584:	bb1b      	cbnz	r3, 80185ce <_vfiprintf_r+0x1d6>
 8018586:	9b03      	ldr	r3, [sp, #12]
 8018588:	3307      	adds	r3, #7
 801858a:	f023 0307 	bic.w	r3, r3, #7
 801858e:	3308      	adds	r3, #8
 8018590:	9303      	str	r3, [sp, #12]
 8018592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018594:	443b      	add	r3, r7
 8018596:	9309      	str	r3, [sp, #36]	@ 0x24
 8018598:	e76a      	b.n	8018470 <_vfiprintf_r+0x78>
 801859a:	fb0c 3202 	mla	r2, ip, r2, r3
 801859e:	460c      	mov	r4, r1
 80185a0:	2001      	movs	r0, #1
 80185a2:	e7a8      	b.n	80184f6 <_vfiprintf_r+0xfe>
 80185a4:	2300      	movs	r3, #0
 80185a6:	3401      	adds	r4, #1
 80185a8:	9305      	str	r3, [sp, #20]
 80185aa:	4619      	mov	r1, r3
 80185ac:	f04f 0c0a 	mov.w	ip, #10
 80185b0:	4620      	mov	r0, r4
 80185b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80185b6:	3a30      	subs	r2, #48	@ 0x30
 80185b8:	2a09      	cmp	r2, #9
 80185ba:	d903      	bls.n	80185c4 <_vfiprintf_r+0x1cc>
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d0c6      	beq.n	801854e <_vfiprintf_r+0x156>
 80185c0:	9105      	str	r1, [sp, #20]
 80185c2:	e7c4      	b.n	801854e <_vfiprintf_r+0x156>
 80185c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80185c8:	4604      	mov	r4, r0
 80185ca:	2301      	movs	r3, #1
 80185cc:	e7f0      	b.n	80185b0 <_vfiprintf_r+0x1b8>
 80185ce:	ab03      	add	r3, sp, #12
 80185d0:	9300      	str	r3, [sp, #0]
 80185d2:	462a      	mov	r2, r5
 80185d4:	4b12      	ldr	r3, [pc, #72]	@ (8018620 <_vfiprintf_r+0x228>)
 80185d6:	a904      	add	r1, sp, #16
 80185d8:	4630      	mov	r0, r6
 80185da:	f3af 8000 	nop.w
 80185de:	4607      	mov	r7, r0
 80185e0:	1c78      	adds	r0, r7, #1
 80185e2:	d1d6      	bne.n	8018592 <_vfiprintf_r+0x19a>
 80185e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80185e6:	07d9      	lsls	r1, r3, #31
 80185e8:	d405      	bmi.n	80185f6 <_vfiprintf_r+0x1fe>
 80185ea:	89ab      	ldrh	r3, [r5, #12]
 80185ec:	059a      	lsls	r2, r3, #22
 80185ee:	d402      	bmi.n	80185f6 <_vfiprintf_r+0x1fe>
 80185f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80185f2:	f7ff fceb 	bl	8017fcc <__retarget_lock_release_recursive>
 80185f6:	89ab      	ldrh	r3, [r5, #12]
 80185f8:	065b      	lsls	r3, r3, #25
 80185fa:	f53f af1f 	bmi.w	801843c <_vfiprintf_r+0x44>
 80185fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018600:	e71e      	b.n	8018440 <_vfiprintf_r+0x48>
 8018602:	ab03      	add	r3, sp, #12
 8018604:	9300      	str	r3, [sp, #0]
 8018606:	462a      	mov	r2, r5
 8018608:	4b05      	ldr	r3, [pc, #20]	@ (8018620 <_vfiprintf_r+0x228>)
 801860a:	a904      	add	r1, sp, #16
 801860c:	4630      	mov	r0, r6
 801860e:	f000 f879 	bl	8018704 <_printf_i>
 8018612:	e7e4      	b.n	80185de <_vfiprintf_r+0x1e6>
 8018614:	0801a5b3 	.word	0x0801a5b3
 8018618:	0801a5bd 	.word	0x0801a5bd
 801861c:	00000000 	.word	0x00000000
 8018620:	080183d3 	.word	0x080183d3
 8018624:	0801a5b9 	.word	0x0801a5b9

08018628 <_printf_common>:
 8018628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801862c:	4616      	mov	r6, r2
 801862e:	4698      	mov	r8, r3
 8018630:	688a      	ldr	r2, [r1, #8]
 8018632:	690b      	ldr	r3, [r1, #16]
 8018634:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018638:	4293      	cmp	r3, r2
 801863a:	bfb8      	it	lt
 801863c:	4613      	movlt	r3, r2
 801863e:	6033      	str	r3, [r6, #0]
 8018640:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018644:	4607      	mov	r7, r0
 8018646:	460c      	mov	r4, r1
 8018648:	b10a      	cbz	r2, 801864e <_printf_common+0x26>
 801864a:	3301      	adds	r3, #1
 801864c:	6033      	str	r3, [r6, #0]
 801864e:	6823      	ldr	r3, [r4, #0]
 8018650:	0699      	lsls	r1, r3, #26
 8018652:	bf42      	ittt	mi
 8018654:	6833      	ldrmi	r3, [r6, #0]
 8018656:	3302      	addmi	r3, #2
 8018658:	6033      	strmi	r3, [r6, #0]
 801865a:	6825      	ldr	r5, [r4, #0]
 801865c:	f015 0506 	ands.w	r5, r5, #6
 8018660:	d106      	bne.n	8018670 <_printf_common+0x48>
 8018662:	f104 0a19 	add.w	sl, r4, #25
 8018666:	68e3      	ldr	r3, [r4, #12]
 8018668:	6832      	ldr	r2, [r6, #0]
 801866a:	1a9b      	subs	r3, r3, r2
 801866c:	42ab      	cmp	r3, r5
 801866e:	dc26      	bgt.n	80186be <_printf_common+0x96>
 8018670:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018674:	6822      	ldr	r2, [r4, #0]
 8018676:	3b00      	subs	r3, #0
 8018678:	bf18      	it	ne
 801867a:	2301      	movne	r3, #1
 801867c:	0692      	lsls	r2, r2, #26
 801867e:	d42b      	bmi.n	80186d8 <_printf_common+0xb0>
 8018680:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018684:	4641      	mov	r1, r8
 8018686:	4638      	mov	r0, r7
 8018688:	47c8      	blx	r9
 801868a:	3001      	adds	r0, #1
 801868c:	d01e      	beq.n	80186cc <_printf_common+0xa4>
 801868e:	6823      	ldr	r3, [r4, #0]
 8018690:	6922      	ldr	r2, [r4, #16]
 8018692:	f003 0306 	and.w	r3, r3, #6
 8018696:	2b04      	cmp	r3, #4
 8018698:	bf02      	ittt	eq
 801869a:	68e5      	ldreq	r5, [r4, #12]
 801869c:	6833      	ldreq	r3, [r6, #0]
 801869e:	1aed      	subeq	r5, r5, r3
 80186a0:	68a3      	ldr	r3, [r4, #8]
 80186a2:	bf0c      	ite	eq
 80186a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80186a8:	2500      	movne	r5, #0
 80186aa:	4293      	cmp	r3, r2
 80186ac:	bfc4      	itt	gt
 80186ae:	1a9b      	subgt	r3, r3, r2
 80186b0:	18ed      	addgt	r5, r5, r3
 80186b2:	2600      	movs	r6, #0
 80186b4:	341a      	adds	r4, #26
 80186b6:	42b5      	cmp	r5, r6
 80186b8:	d11a      	bne.n	80186f0 <_printf_common+0xc8>
 80186ba:	2000      	movs	r0, #0
 80186bc:	e008      	b.n	80186d0 <_printf_common+0xa8>
 80186be:	2301      	movs	r3, #1
 80186c0:	4652      	mov	r2, sl
 80186c2:	4641      	mov	r1, r8
 80186c4:	4638      	mov	r0, r7
 80186c6:	47c8      	blx	r9
 80186c8:	3001      	adds	r0, #1
 80186ca:	d103      	bne.n	80186d4 <_printf_common+0xac>
 80186cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80186d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186d4:	3501      	adds	r5, #1
 80186d6:	e7c6      	b.n	8018666 <_printf_common+0x3e>
 80186d8:	18e1      	adds	r1, r4, r3
 80186da:	1c5a      	adds	r2, r3, #1
 80186dc:	2030      	movs	r0, #48	@ 0x30
 80186de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80186e2:	4422      	add	r2, r4
 80186e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80186e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80186ec:	3302      	adds	r3, #2
 80186ee:	e7c7      	b.n	8018680 <_printf_common+0x58>
 80186f0:	2301      	movs	r3, #1
 80186f2:	4622      	mov	r2, r4
 80186f4:	4641      	mov	r1, r8
 80186f6:	4638      	mov	r0, r7
 80186f8:	47c8      	blx	r9
 80186fa:	3001      	adds	r0, #1
 80186fc:	d0e6      	beq.n	80186cc <_printf_common+0xa4>
 80186fe:	3601      	adds	r6, #1
 8018700:	e7d9      	b.n	80186b6 <_printf_common+0x8e>
	...

08018704 <_printf_i>:
 8018704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018708:	7e0f      	ldrb	r7, [r1, #24]
 801870a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801870c:	2f78      	cmp	r7, #120	@ 0x78
 801870e:	4691      	mov	r9, r2
 8018710:	4680      	mov	r8, r0
 8018712:	460c      	mov	r4, r1
 8018714:	469a      	mov	sl, r3
 8018716:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801871a:	d807      	bhi.n	801872c <_printf_i+0x28>
 801871c:	2f62      	cmp	r7, #98	@ 0x62
 801871e:	d80a      	bhi.n	8018736 <_printf_i+0x32>
 8018720:	2f00      	cmp	r7, #0
 8018722:	f000 80d1 	beq.w	80188c8 <_printf_i+0x1c4>
 8018726:	2f58      	cmp	r7, #88	@ 0x58
 8018728:	f000 80b8 	beq.w	801889c <_printf_i+0x198>
 801872c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018730:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018734:	e03a      	b.n	80187ac <_printf_i+0xa8>
 8018736:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801873a:	2b15      	cmp	r3, #21
 801873c:	d8f6      	bhi.n	801872c <_printf_i+0x28>
 801873e:	a101      	add	r1, pc, #4	@ (adr r1, 8018744 <_printf_i+0x40>)
 8018740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018744:	0801879d 	.word	0x0801879d
 8018748:	080187b1 	.word	0x080187b1
 801874c:	0801872d 	.word	0x0801872d
 8018750:	0801872d 	.word	0x0801872d
 8018754:	0801872d 	.word	0x0801872d
 8018758:	0801872d 	.word	0x0801872d
 801875c:	080187b1 	.word	0x080187b1
 8018760:	0801872d 	.word	0x0801872d
 8018764:	0801872d 	.word	0x0801872d
 8018768:	0801872d 	.word	0x0801872d
 801876c:	0801872d 	.word	0x0801872d
 8018770:	080188af 	.word	0x080188af
 8018774:	080187db 	.word	0x080187db
 8018778:	08018869 	.word	0x08018869
 801877c:	0801872d 	.word	0x0801872d
 8018780:	0801872d 	.word	0x0801872d
 8018784:	080188d1 	.word	0x080188d1
 8018788:	0801872d 	.word	0x0801872d
 801878c:	080187db 	.word	0x080187db
 8018790:	0801872d 	.word	0x0801872d
 8018794:	0801872d 	.word	0x0801872d
 8018798:	08018871 	.word	0x08018871
 801879c:	6833      	ldr	r3, [r6, #0]
 801879e:	1d1a      	adds	r2, r3, #4
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	6032      	str	r2, [r6, #0]
 80187a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80187a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80187ac:	2301      	movs	r3, #1
 80187ae:	e09c      	b.n	80188ea <_printf_i+0x1e6>
 80187b0:	6833      	ldr	r3, [r6, #0]
 80187b2:	6820      	ldr	r0, [r4, #0]
 80187b4:	1d19      	adds	r1, r3, #4
 80187b6:	6031      	str	r1, [r6, #0]
 80187b8:	0606      	lsls	r6, r0, #24
 80187ba:	d501      	bpl.n	80187c0 <_printf_i+0xbc>
 80187bc:	681d      	ldr	r5, [r3, #0]
 80187be:	e003      	b.n	80187c8 <_printf_i+0xc4>
 80187c0:	0645      	lsls	r5, r0, #25
 80187c2:	d5fb      	bpl.n	80187bc <_printf_i+0xb8>
 80187c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80187c8:	2d00      	cmp	r5, #0
 80187ca:	da03      	bge.n	80187d4 <_printf_i+0xd0>
 80187cc:	232d      	movs	r3, #45	@ 0x2d
 80187ce:	426d      	negs	r5, r5
 80187d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80187d4:	4858      	ldr	r0, [pc, #352]	@ (8018938 <_printf_i+0x234>)
 80187d6:	230a      	movs	r3, #10
 80187d8:	e011      	b.n	80187fe <_printf_i+0xfa>
 80187da:	6821      	ldr	r1, [r4, #0]
 80187dc:	6833      	ldr	r3, [r6, #0]
 80187de:	0608      	lsls	r0, r1, #24
 80187e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80187e4:	d402      	bmi.n	80187ec <_printf_i+0xe8>
 80187e6:	0649      	lsls	r1, r1, #25
 80187e8:	bf48      	it	mi
 80187ea:	b2ad      	uxthmi	r5, r5
 80187ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80187ee:	4852      	ldr	r0, [pc, #328]	@ (8018938 <_printf_i+0x234>)
 80187f0:	6033      	str	r3, [r6, #0]
 80187f2:	bf14      	ite	ne
 80187f4:	230a      	movne	r3, #10
 80187f6:	2308      	moveq	r3, #8
 80187f8:	2100      	movs	r1, #0
 80187fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80187fe:	6866      	ldr	r6, [r4, #4]
 8018800:	60a6      	str	r6, [r4, #8]
 8018802:	2e00      	cmp	r6, #0
 8018804:	db05      	blt.n	8018812 <_printf_i+0x10e>
 8018806:	6821      	ldr	r1, [r4, #0]
 8018808:	432e      	orrs	r6, r5
 801880a:	f021 0104 	bic.w	r1, r1, #4
 801880e:	6021      	str	r1, [r4, #0]
 8018810:	d04b      	beq.n	80188aa <_printf_i+0x1a6>
 8018812:	4616      	mov	r6, r2
 8018814:	fbb5 f1f3 	udiv	r1, r5, r3
 8018818:	fb03 5711 	mls	r7, r3, r1, r5
 801881c:	5dc7      	ldrb	r7, [r0, r7]
 801881e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018822:	462f      	mov	r7, r5
 8018824:	42bb      	cmp	r3, r7
 8018826:	460d      	mov	r5, r1
 8018828:	d9f4      	bls.n	8018814 <_printf_i+0x110>
 801882a:	2b08      	cmp	r3, #8
 801882c:	d10b      	bne.n	8018846 <_printf_i+0x142>
 801882e:	6823      	ldr	r3, [r4, #0]
 8018830:	07df      	lsls	r7, r3, #31
 8018832:	d508      	bpl.n	8018846 <_printf_i+0x142>
 8018834:	6923      	ldr	r3, [r4, #16]
 8018836:	6861      	ldr	r1, [r4, #4]
 8018838:	4299      	cmp	r1, r3
 801883a:	bfde      	ittt	le
 801883c:	2330      	movle	r3, #48	@ 0x30
 801883e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018842:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8018846:	1b92      	subs	r2, r2, r6
 8018848:	6122      	str	r2, [r4, #16]
 801884a:	f8cd a000 	str.w	sl, [sp]
 801884e:	464b      	mov	r3, r9
 8018850:	aa03      	add	r2, sp, #12
 8018852:	4621      	mov	r1, r4
 8018854:	4640      	mov	r0, r8
 8018856:	f7ff fee7 	bl	8018628 <_printf_common>
 801885a:	3001      	adds	r0, #1
 801885c:	d14a      	bne.n	80188f4 <_printf_i+0x1f0>
 801885e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018862:	b004      	add	sp, #16
 8018864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018868:	6823      	ldr	r3, [r4, #0]
 801886a:	f043 0320 	orr.w	r3, r3, #32
 801886e:	6023      	str	r3, [r4, #0]
 8018870:	4832      	ldr	r0, [pc, #200]	@ (801893c <_printf_i+0x238>)
 8018872:	2778      	movs	r7, #120	@ 0x78
 8018874:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018878:	6823      	ldr	r3, [r4, #0]
 801887a:	6831      	ldr	r1, [r6, #0]
 801887c:	061f      	lsls	r7, r3, #24
 801887e:	f851 5b04 	ldr.w	r5, [r1], #4
 8018882:	d402      	bmi.n	801888a <_printf_i+0x186>
 8018884:	065f      	lsls	r7, r3, #25
 8018886:	bf48      	it	mi
 8018888:	b2ad      	uxthmi	r5, r5
 801888a:	6031      	str	r1, [r6, #0]
 801888c:	07d9      	lsls	r1, r3, #31
 801888e:	bf44      	itt	mi
 8018890:	f043 0320 	orrmi.w	r3, r3, #32
 8018894:	6023      	strmi	r3, [r4, #0]
 8018896:	b11d      	cbz	r5, 80188a0 <_printf_i+0x19c>
 8018898:	2310      	movs	r3, #16
 801889a:	e7ad      	b.n	80187f8 <_printf_i+0xf4>
 801889c:	4826      	ldr	r0, [pc, #152]	@ (8018938 <_printf_i+0x234>)
 801889e:	e7e9      	b.n	8018874 <_printf_i+0x170>
 80188a0:	6823      	ldr	r3, [r4, #0]
 80188a2:	f023 0320 	bic.w	r3, r3, #32
 80188a6:	6023      	str	r3, [r4, #0]
 80188a8:	e7f6      	b.n	8018898 <_printf_i+0x194>
 80188aa:	4616      	mov	r6, r2
 80188ac:	e7bd      	b.n	801882a <_printf_i+0x126>
 80188ae:	6833      	ldr	r3, [r6, #0]
 80188b0:	6825      	ldr	r5, [r4, #0]
 80188b2:	6961      	ldr	r1, [r4, #20]
 80188b4:	1d18      	adds	r0, r3, #4
 80188b6:	6030      	str	r0, [r6, #0]
 80188b8:	062e      	lsls	r6, r5, #24
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	d501      	bpl.n	80188c2 <_printf_i+0x1be>
 80188be:	6019      	str	r1, [r3, #0]
 80188c0:	e002      	b.n	80188c8 <_printf_i+0x1c4>
 80188c2:	0668      	lsls	r0, r5, #25
 80188c4:	d5fb      	bpl.n	80188be <_printf_i+0x1ba>
 80188c6:	8019      	strh	r1, [r3, #0]
 80188c8:	2300      	movs	r3, #0
 80188ca:	6123      	str	r3, [r4, #16]
 80188cc:	4616      	mov	r6, r2
 80188ce:	e7bc      	b.n	801884a <_printf_i+0x146>
 80188d0:	6833      	ldr	r3, [r6, #0]
 80188d2:	1d1a      	adds	r2, r3, #4
 80188d4:	6032      	str	r2, [r6, #0]
 80188d6:	681e      	ldr	r6, [r3, #0]
 80188d8:	6862      	ldr	r2, [r4, #4]
 80188da:	2100      	movs	r1, #0
 80188dc:	4630      	mov	r0, r6
 80188de:	f7e7 fc8f 	bl	8000200 <memchr>
 80188e2:	b108      	cbz	r0, 80188e8 <_printf_i+0x1e4>
 80188e4:	1b80      	subs	r0, r0, r6
 80188e6:	6060      	str	r0, [r4, #4]
 80188e8:	6863      	ldr	r3, [r4, #4]
 80188ea:	6123      	str	r3, [r4, #16]
 80188ec:	2300      	movs	r3, #0
 80188ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80188f2:	e7aa      	b.n	801884a <_printf_i+0x146>
 80188f4:	6923      	ldr	r3, [r4, #16]
 80188f6:	4632      	mov	r2, r6
 80188f8:	4649      	mov	r1, r9
 80188fa:	4640      	mov	r0, r8
 80188fc:	47d0      	blx	sl
 80188fe:	3001      	adds	r0, #1
 8018900:	d0ad      	beq.n	801885e <_printf_i+0x15a>
 8018902:	6823      	ldr	r3, [r4, #0]
 8018904:	079b      	lsls	r3, r3, #30
 8018906:	d413      	bmi.n	8018930 <_printf_i+0x22c>
 8018908:	68e0      	ldr	r0, [r4, #12]
 801890a:	9b03      	ldr	r3, [sp, #12]
 801890c:	4298      	cmp	r0, r3
 801890e:	bfb8      	it	lt
 8018910:	4618      	movlt	r0, r3
 8018912:	e7a6      	b.n	8018862 <_printf_i+0x15e>
 8018914:	2301      	movs	r3, #1
 8018916:	4632      	mov	r2, r6
 8018918:	4649      	mov	r1, r9
 801891a:	4640      	mov	r0, r8
 801891c:	47d0      	blx	sl
 801891e:	3001      	adds	r0, #1
 8018920:	d09d      	beq.n	801885e <_printf_i+0x15a>
 8018922:	3501      	adds	r5, #1
 8018924:	68e3      	ldr	r3, [r4, #12]
 8018926:	9903      	ldr	r1, [sp, #12]
 8018928:	1a5b      	subs	r3, r3, r1
 801892a:	42ab      	cmp	r3, r5
 801892c:	dcf2      	bgt.n	8018914 <_printf_i+0x210>
 801892e:	e7eb      	b.n	8018908 <_printf_i+0x204>
 8018930:	2500      	movs	r5, #0
 8018932:	f104 0619 	add.w	r6, r4, #25
 8018936:	e7f5      	b.n	8018924 <_printf_i+0x220>
 8018938:	0801a5c4 	.word	0x0801a5c4
 801893c:	0801a5d5 	.word	0x0801a5d5

08018940 <__sflush_r>:
 8018940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018948:	0716      	lsls	r6, r2, #28
 801894a:	4605      	mov	r5, r0
 801894c:	460c      	mov	r4, r1
 801894e:	d454      	bmi.n	80189fa <__sflush_r+0xba>
 8018950:	684b      	ldr	r3, [r1, #4]
 8018952:	2b00      	cmp	r3, #0
 8018954:	dc02      	bgt.n	801895c <__sflush_r+0x1c>
 8018956:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018958:	2b00      	cmp	r3, #0
 801895a:	dd48      	ble.n	80189ee <__sflush_r+0xae>
 801895c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801895e:	2e00      	cmp	r6, #0
 8018960:	d045      	beq.n	80189ee <__sflush_r+0xae>
 8018962:	2300      	movs	r3, #0
 8018964:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018968:	682f      	ldr	r7, [r5, #0]
 801896a:	6a21      	ldr	r1, [r4, #32]
 801896c:	602b      	str	r3, [r5, #0]
 801896e:	d030      	beq.n	80189d2 <__sflush_r+0x92>
 8018970:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018972:	89a3      	ldrh	r3, [r4, #12]
 8018974:	0759      	lsls	r1, r3, #29
 8018976:	d505      	bpl.n	8018984 <__sflush_r+0x44>
 8018978:	6863      	ldr	r3, [r4, #4]
 801897a:	1ad2      	subs	r2, r2, r3
 801897c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801897e:	b10b      	cbz	r3, 8018984 <__sflush_r+0x44>
 8018980:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018982:	1ad2      	subs	r2, r2, r3
 8018984:	2300      	movs	r3, #0
 8018986:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018988:	6a21      	ldr	r1, [r4, #32]
 801898a:	4628      	mov	r0, r5
 801898c:	47b0      	blx	r6
 801898e:	1c43      	adds	r3, r0, #1
 8018990:	89a3      	ldrh	r3, [r4, #12]
 8018992:	d106      	bne.n	80189a2 <__sflush_r+0x62>
 8018994:	6829      	ldr	r1, [r5, #0]
 8018996:	291d      	cmp	r1, #29
 8018998:	d82b      	bhi.n	80189f2 <__sflush_r+0xb2>
 801899a:	4a2a      	ldr	r2, [pc, #168]	@ (8018a44 <__sflush_r+0x104>)
 801899c:	40ca      	lsrs	r2, r1
 801899e:	07d6      	lsls	r6, r2, #31
 80189a0:	d527      	bpl.n	80189f2 <__sflush_r+0xb2>
 80189a2:	2200      	movs	r2, #0
 80189a4:	6062      	str	r2, [r4, #4]
 80189a6:	04d9      	lsls	r1, r3, #19
 80189a8:	6922      	ldr	r2, [r4, #16]
 80189aa:	6022      	str	r2, [r4, #0]
 80189ac:	d504      	bpl.n	80189b8 <__sflush_r+0x78>
 80189ae:	1c42      	adds	r2, r0, #1
 80189b0:	d101      	bne.n	80189b6 <__sflush_r+0x76>
 80189b2:	682b      	ldr	r3, [r5, #0]
 80189b4:	b903      	cbnz	r3, 80189b8 <__sflush_r+0x78>
 80189b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80189b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80189ba:	602f      	str	r7, [r5, #0]
 80189bc:	b1b9      	cbz	r1, 80189ee <__sflush_r+0xae>
 80189be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80189c2:	4299      	cmp	r1, r3
 80189c4:	d002      	beq.n	80189cc <__sflush_r+0x8c>
 80189c6:	4628      	mov	r0, r5
 80189c8:	f7ff fb42 	bl	8018050 <_free_r>
 80189cc:	2300      	movs	r3, #0
 80189ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80189d0:	e00d      	b.n	80189ee <__sflush_r+0xae>
 80189d2:	2301      	movs	r3, #1
 80189d4:	4628      	mov	r0, r5
 80189d6:	47b0      	blx	r6
 80189d8:	4602      	mov	r2, r0
 80189da:	1c50      	adds	r0, r2, #1
 80189dc:	d1c9      	bne.n	8018972 <__sflush_r+0x32>
 80189de:	682b      	ldr	r3, [r5, #0]
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d0c6      	beq.n	8018972 <__sflush_r+0x32>
 80189e4:	2b1d      	cmp	r3, #29
 80189e6:	d001      	beq.n	80189ec <__sflush_r+0xac>
 80189e8:	2b16      	cmp	r3, #22
 80189ea:	d11e      	bne.n	8018a2a <__sflush_r+0xea>
 80189ec:	602f      	str	r7, [r5, #0]
 80189ee:	2000      	movs	r0, #0
 80189f0:	e022      	b.n	8018a38 <__sflush_r+0xf8>
 80189f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80189f6:	b21b      	sxth	r3, r3
 80189f8:	e01b      	b.n	8018a32 <__sflush_r+0xf2>
 80189fa:	690f      	ldr	r7, [r1, #16]
 80189fc:	2f00      	cmp	r7, #0
 80189fe:	d0f6      	beq.n	80189ee <__sflush_r+0xae>
 8018a00:	0793      	lsls	r3, r2, #30
 8018a02:	680e      	ldr	r6, [r1, #0]
 8018a04:	bf08      	it	eq
 8018a06:	694b      	ldreq	r3, [r1, #20]
 8018a08:	600f      	str	r7, [r1, #0]
 8018a0a:	bf18      	it	ne
 8018a0c:	2300      	movne	r3, #0
 8018a0e:	eba6 0807 	sub.w	r8, r6, r7
 8018a12:	608b      	str	r3, [r1, #8]
 8018a14:	f1b8 0f00 	cmp.w	r8, #0
 8018a18:	dde9      	ble.n	80189ee <__sflush_r+0xae>
 8018a1a:	6a21      	ldr	r1, [r4, #32]
 8018a1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018a1e:	4643      	mov	r3, r8
 8018a20:	463a      	mov	r2, r7
 8018a22:	4628      	mov	r0, r5
 8018a24:	47b0      	blx	r6
 8018a26:	2800      	cmp	r0, #0
 8018a28:	dc08      	bgt.n	8018a3c <__sflush_r+0xfc>
 8018a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018a32:	81a3      	strh	r3, [r4, #12]
 8018a34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a3c:	4407      	add	r7, r0
 8018a3e:	eba8 0800 	sub.w	r8, r8, r0
 8018a42:	e7e7      	b.n	8018a14 <__sflush_r+0xd4>
 8018a44:	20400001 	.word	0x20400001

08018a48 <_fflush_r>:
 8018a48:	b538      	push	{r3, r4, r5, lr}
 8018a4a:	690b      	ldr	r3, [r1, #16]
 8018a4c:	4605      	mov	r5, r0
 8018a4e:	460c      	mov	r4, r1
 8018a50:	b913      	cbnz	r3, 8018a58 <_fflush_r+0x10>
 8018a52:	2500      	movs	r5, #0
 8018a54:	4628      	mov	r0, r5
 8018a56:	bd38      	pop	{r3, r4, r5, pc}
 8018a58:	b118      	cbz	r0, 8018a62 <_fflush_r+0x1a>
 8018a5a:	6a03      	ldr	r3, [r0, #32]
 8018a5c:	b90b      	cbnz	r3, 8018a62 <_fflush_r+0x1a>
 8018a5e:	f7fe ff6f 	bl	8017940 <__sinit>
 8018a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d0f3      	beq.n	8018a52 <_fflush_r+0xa>
 8018a6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018a6c:	07d0      	lsls	r0, r2, #31
 8018a6e:	d404      	bmi.n	8018a7a <_fflush_r+0x32>
 8018a70:	0599      	lsls	r1, r3, #22
 8018a72:	d402      	bmi.n	8018a7a <_fflush_r+0x32>
 8018a74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018a76:	f7ff faa8 	bl	8017fca <__retarget_lock_acquire_recursive>
 8018a7a:	4628      	mov	r0, r5
 8018a7c:	4621      	mov	r1, r4
 8018a7e:	f7ff ff5f 	bl	8018940 <__sflush_r>
 8018a82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018a84:	07da      	lsls	r2, r3, #31
 8018a86:	4605      	mov	r5, r0
 8018a88:	d4e4      	bmi.n	8018a54 <_fflush_r+0xc>
 8018a8a:	89a3      	ldrh	r3, [r4, #12]
 8018a8c:	059b      	lsls	r3, r3, #22
 8018a8e:	d4e1      	bmi.n	8018a54 <_fflush_r+0xc>
 8018a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018a92:	f7ff fa9b 	bl	8017fcc <__retarget_lock_release_recursive>
 8018a96:	e7dd      	b.n	8018a54 <_fflush_r+0xc>

08018a98 <fiprintf>:
 8018a98:	b40e      	push	{r1, r2, r3}
 8018a9a:	b503      	push	{r0, r1, lr}
 8018a9c:	4601      	mov	r1, r0
 8018a9e:	ab03      	add	r3, sp, #12
 8018aa0:	4805      	ldr	r0, [pc, #20]	@ (8018ab8 <fiprintf+0x20>)
 8018aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8018aa6:	6800      	ldr	r0, [r0, #0]
 8018aa8:	9301      	str	r3, [sp, #4]
 8018aaa:	f7ff fca5 	bl	80183f8 <_vfiprintf_r>
 8018aae:	b002      	add	sp, #8
 8018ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8018ab4:	b003      	add	sp, #12
 8018ab6:	4770      	bx	lr
 8018ab8:	20002e40 	.word	0x20002e40

08018abc <__swhatbuf_r>:
 8018abc:	b570      	push	{r4, r5, r6, lr}
 8018abe:	460c      	mov	r4, r1
 8018ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ac4:	2900      	cmp	r1, #0
 8018ac6:	b096      	sub	sp, #88	@ 0x58
 8018ac8:	4615      	mov	r5, r2
 8018aca:	461e      	mov	r6, r3
 8018acc:	da0d      	bge.n	8018aea <__swhatbuf_r+0x2e>
 8018ace:	89a3      	ldrh	r3, [r4, #12]
 8018ad0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018ad4:	f04f 0100 	mov.w	r1, #0
 8018ad8:	bf14      	ite	ne
 8018ada:	2340      	movne	r3, #64	@ 0x40
 8018adc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018ae0:	2000      	movs	r0, #0
 8018ae2:	6031      	str	r1, [r6, #0]
 8018ae4:	602b      	str	r3, [r5, #0]
 8018ae6:	b016      	add	sp, #88	@ 0x58
 8018ae8:	bd70      	pop	{r4, r5, r6, pc}
 8018aea:	466a      	mov	r2, sp
 8018aec:	f000 f848 	bl	8018b80 <_fstat_r>
 8018af0:	2800      	cmp	r0, #0
 8018af2:	dbec      	blt.n	8018ace <__swhatbuf_r+0x12>
 8018af4:	9901      	ldr	r1, [sp, #4]
 8018af6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018afa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018afe:	4259      	negs	r1, r3
 8018b00:	4159      	adcs	r1, r3
 8018b02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018b06:	e7eb      	b.n	8018ae0 <__swhatbuf_r+0x24>

08018b08 <__smakebuf_r>:
 8018b08:	898b      	ldrh	r3, [r1, #12]
 8018b0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018b0c:	079d      	lsls	r5, r3, #30
 8018b0e:	4606      	mov	r6, r0
 8018b10:	460c      	mov	r4, r1
 8018b12:	d507      	bpl.n	8018b24 <__smakebuf_r+0x1c>
 8018b14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018b18:	6023      	str	r3, [r4, #0]
 8018b1a:	6123      	str	r3, [r4, #16]
 8018b1c:	2301      	movs	r3, #1
 8018b1e:	6163      	str	r3, [r4, #20]
 8018b20:	b003      	add	sp, #12
 8018b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b24:	ab01      	add	r3, sp, #4
 8018b26:	466a      	mov	r2, sp
 8018b28:	f7ff ffc8 	bl	8018abc <__swhatbuf_r>
 8018b2c:	9f00      	ldr	r7, [sp, #0]
 8018b2e:	4605      	mov	r5, r0
 8018b30:	4639      	mov	r1, r7
 8018b32:	4630      	mov	r0, r6
 8018b34:	f7fe fcd2 	bl	80174dc <_malloc_r>
 8018b38:	b948      	cbnz	r0, 8018b4e <__smakebuf_r+0x46>
 8018b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b3e:	059a      	lsls	r2, r3, #22
 8018b40:	d4ee      	bmi.n	8018b20 <__smakebuf_r+0x18>
 8018b42:	f023 0303 	bic.w	r3, r3, #3
 8018b46:	f043 0302 	orr.w	r3, r3, #2
 8018b4a:	81a3      	strh	r3, [r4, #12]
 8018b4c:	e7e2      	b.n	8018b14 <__smakebuf_r+0xc>
 8018b4e:	89a3      	ldrh	r3, [r4, #12]
 8018b50:	6020      	str	r0, [r4, #0]
 8018b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018b56:	81a3      	strh	r3, [r4, #12]
 8018b58:	9b01      	ldr	r3, [sp, #4]
 8018b5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018b5e:	b15b      	cbz	r3, 8018b78 <__smakebuf_r+0x70>
 8018b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018b64:	4630      	mov	r0, r6
 8018b66:	f000 f81d 	bl	8018ba4 <_isatty_r>
 8018b6a:	b128      	cbz	r0, 8018b78 <__smakebuf_r+0x70>
 8018b6c:	89a3      	ldrh	r3, [r4, #12]
 8018b6e:	f023 0303 	bic.w	r3, r3, #3
 8018b72:	f043 0301 	orr.w	r3, r3, #1
 8018b76:	81a3      	strh	r3, [r4, #12]
 8018b78:	89a3      	ldrh	r3, [r4, #12]
 8018b7a:	431d      	orrs	r5, r3
 8018b7c:	81a5      	strh	r5, [r4, #12]
 8018b7e:	e7cf      	b.n	8018b20 <__smakebuf_r+0x18>

08018b80 <_fstat_r>:
 8018b80:	b538      	push	{r3, r4, r5, lr}
 8018b82:	4d07      	ldr	r5, [pc, #28]	@ (8018ba0 <_fstat_r+0x20>)
 8018b84:	2300      	movs	r3, #0
 8018b86:	4604      	mov	r4, r0
 8018b88:	4608      	mov	r0, r1
 8018b8a:	4611      	mov	r1, r2
 8018b8c:	602b      	str	r3, [r5, #0]
 8018b8e:	f7e9 fa81 	bl	8002094 <_fstat>
 8018b92:	1c43      	adds	r3, r0, #1
 8018b94:	d102      	bne.n	8018b9c <_fstat_r+0x1c>
 8018b96:	682b      	ldr	r3, [r5, #0]
 8018b98:	b103      	cbz	r3, 8018b9c <_fstat_r+0x1c>
 8018b9a:	6023      	str	r3, [r4, #0]
 8018b9c:	bd38      	pop	{r3, r4, r5, pc}
 8018b9e:	bf00      	nop
 8018ba0:	20011360 	.word	0x20011360

08018ba4 <_isatty_r>:
 8018ba4:	b538      	push	{r3, r4, r5, lr}
 8018ba6:	4d06      	ldr	r5, [pc, #24]	@ (8018bc0 <_isatty_r+0x1c>)
 8018ba8:	2300      	movs	r3, #0
 8018baa:	4604      	mov	r4, r0
 8018bac:	4608      	mov	r0, r1
 8018bae:	602b      	str	r3, [r5, #0]
 8018bb0:	f7e9 fa80 	bl	80020b4 <_isatty>
 8018bb4:	1c43      	adds	r3, r0, #1
 8018bb6:	d102      	bne.n	8018bbe <_isatty_r+0x1a>
 8018bb8:	682b      	ldr	r3, [r5, #0]
 8018bba:	b103      	cbz	r3, 8018bbe <_isatty_r+0x1a>
 8018bbc:	6023      	str	r3, [r4, #0]
 8018bbe:	bd38      	pop	{r3, r4, r5, pc}
 8018bc0:	20011360 	.word	0x20011360

08018bc4 <abort>:
 8018bc4:	b508      	push	{r3, lr}
 8018bc6:	2006      	movs	r0, #6
 8018bc8:	f000 f82c 	bl	8018c24 <raise>
 8018bcc:	2001      	movs	r0, #1
 8018bce:	f7e9 fa11 	bl	8001ff4 <_exit>

08018bd2 <_raise_r>:
 8018bd2:	291f      	cmp	r1, #31
 8018bd4:	b538      	push	{r3, r4, r5, lr}
 8018bd6:	4605      	mov	r5, r0
 8018bd8:	460c      	mov	r4, r1
 8018bda:	d904      	bls.n	8018be6 <_raise_r+0x14>
 8018bdc:	2316      	movs	r3, #22
 8018bde:	6003      	str	r3, [r0, #0]
 8018be0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018be4:	bd38      	pop	{r3, r4, r5, pc}
 8018be6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018be8:	b112      	cbz	r2, 8018bf0 <_raise_r+0x1e>
 8018bea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018bee:	b94b      	cbnz	r3, 8018c04 <_raise_r+0x32>
 8018bf0:	4628      	mov	r0, r5
 8018bf2:	f000 f831 	bl	8018c58 <_getpid_r>
 8018bf6:	4622      	mov	r2, r4
 8018bf8:	4601      	mov	r1, r0
 8018bfa:	4628      	mov	r0, r5
 8018bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c00:	f000 b818 	b.w	8018c34 <_kill_r>
 8018c04:	2b01      	cmp	r3, #1
 8018c06:	d00a      	beq.n	8018c1e <_raise_r+0x4c>
 8018c08:	1c59      	adds	r1, r3, #1
 8018c0a:	d103      	bne.n	8018c14 <_raise_r+0x42>
 8018c0c:	2316      	movs	r3, #22
 8018c0e:	6003      	str	r3, [r0, #0]
 8018c10:	2001      	movs	r0, #1
 8018c12:	e7e7      	b.n	8018be4 <_raise_r+0x12>
 8018c14:	2100      	movs	r1, #0
 8018c16:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018c1a:	4620      	mov	r0, r4
 8018c1c:	4798      	blx	r3
 8018c1e:	2000      	movs	r0, #0
 8018c20:	e7e0      	b.n	8018be4 <_raise_r+0x12>
	...

08018c24 <raise>:
 8018c24:	4b02      	ldr	r3, [pc, #8]	@ (8018c30 <raise+0xc>)
 8018c26:	4601      	mov	r1, r0
 8018c28:	6818      	ldr	r0, [r3, #0]
 8018c2a:	f7ff bfd2 	b.w	8018bd2 <_raise_r>
 8018c2e:	bf00      	nop
 8018c30:	20002e40 	.word	0x20002e40

08018c34 <_kill_r>:
 8018c34:	b538      	push	{r3, r4, r5, lr}
 8018c36:	4d07      	ldr	r5, [pc, #28]	@ (8018c54 <_kill_r+0x20>)
 8018c38:	2300      	movs	r3, #0
 8018c3a:	4604      	mov	r4, r0
 8018c3c:	4608      	mov	r0, r1
 8018c3e:	4611      	mov	r1, r2
 8018c40:	602b      	str	r3, [r5, #0]
 8018c42:	f7e9 f9c7 	bl	8001fd4 <_kill>
 8018c46:	1c43      	adds	r3, r0, #1
 8018c48:	d102      	bne.n	8018c50 <_kill_r+0x1c>
 8018c4a:	682b      	ldr	r3, [r5, #0]
 8018c4c:	b103      	cbz	r3, 8018c50 <_kill_r+0x1c>
 8018c4e:	6023      	str	r3, [r4, #0]
 8018c50:	bd38      	pop	{r3, r4, r5, pc}
 8018c52:	bf00      	nop
 8018c54:	20011360 	.word	0x20011360

08018c58 <_getpid_r>:
 8018c58:	f7e9 b9b4 	b.w	8001fc4 <_getpid>

08018c5c <_init>:
 8018c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c5e:	bf00      	nop
 8018c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c62:	bc08      	pop	{r3}
 8018c64:	469e      	mov	lr, r3
 8018c66:	4770      	bx	lr

08018c68 <_fini>:
 8018c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c6a:	bf00      	nop
 8018c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c6e:	bc08      	pop	{r3}
 8018c70:	469e      	mov	lr, r3
 8018c72:	4770      	bx	lr
