
micro_ros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014748  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f28  080148e8  080148e8  000158e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015810  08015810  000172c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08015810  08015810  00016810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015818  08015818  000172c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015818  08015818  00016818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015820  08015820  00016820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  08015824  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000daac  200002c8  08015aec  000172c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000dd74  08015aec  00017d74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000172c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159cd  00000000  00000000  000172f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000361d  00000000  00000000  0002ccc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  000302e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb2  00000000  00000000  00031398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000088c9  00000000  00000000  0003204a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148cb  00000000  00000000  0003a913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0523  00000000  00000000  0004f1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000069  00000000  00000000  000ef701  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005204  00000000  00000000  000ef76c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f4970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080148d0 	.word	0x080148d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	080148d0 	.word	0x080148d0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ce:	f000 b9d3 	b.w	8000678 <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000364:	f000 b988 	b.w	8000678 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	468e      	mov	lr, r1
 8000388:	4604      	mov	r4, r0
 800038a:	4688      	mov	r8, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4617      	mov	r7, r2
 8000394:	d962      	bls.n	800045c <__udivmoddi4+0xdc>
 8000396:	fab2 f682 	clz	r6, r2
 800039a:	b14e      	cbz	r6, 80003b0 <__udivmoddi4+0x30>
 800039c:	f1c6 0320 	rsb	r3, r6, #32
 80003a0:	fa01 f806 	lsl.w	r8, r1, r6
 80003a4:	fa20 f303 	lsr.w	r3, r0, r3
 80003a8:	40b7      	lsls	r7, r6
 80003aa:	ea43 0808 	orr.w	r8, r3, r8
 80003ae:	40b4      	lsls	r4, r6
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003bc:	0c23      	lsrs	r3, r4, #16
 80003be:	fb0e 8811 	mls	r8, lr, r1, r8
 80003c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003c6:	fb01 f20c 	mul.w	r2, r1, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80003d4:	f080 80ea 	bcs.w	80005ac <__udivmoddi4+0x22c>
 80003d8:	429a      	cmp	r2, r3
 80003da:	f240 80e7 	bls.w	80005ac <__udivmoddi4+0x22c>
 80003de:	3902      	subs	r1, #2
 80003e0:	443b      	add	r3, r7
 80003e2:	1a9a      	subs	r2, r3, r2
 80003e4:	b2a3      	uxth	r3, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003f6:	459c      	cmp	ip, r3
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x8e>
 80003fa:	18fb      	adds	r3, r7, r3
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000400:	f080 80d6 	bcs.w	80005b0 <__udivmoddi4+0x230>
 8000404:	459c      	cmp	ip, r3
 8000406:	f240 80d3 	bls.w	80005b0 <__udivmoddi4+0x230>
 800040a:	443b      	add	r3, r7
 800040c:	3802      	subs	r0, #2
 800040e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000412:	eba3 030c 	sub.w	r3, r3, ip
 8000416:	2100      	movs	r1, #0
 8000418:	b11d      	cbz	r5, 8000422 <__udivmoddi4+0xa2>
 800041a:	40f3      	lsrs	r3, r6
 800041c:	2200      	movs	r2, #0
 800041e:	e9c5 3200 	strd	r3, r2, [r5]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d905      	bls.n	8000436 <__udivmoddi4+0xb6>
 800042a:	b10d      	cbz	r5, 8000430 <__udivmoddi4+0xb0>
 800042c:	e9c5 0100 	strd	r0, r1, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	4608      	mov	r0, r1
 8000434:	e7f5      	b.n	8000422 <__udivmoddi4+0xa2>
 8000436:	fab3 f183 	clz	r1, r3
 800043a:	2900      	cmp	r1, #0
 800043c:	d146      	bne.n	80004cc <__udivmoddi4+0x14c>
 800043e:	4573      	cmp	r3, lr
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0xc8>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 8105 	bhi.w	8000652 <__udivmoddi4+0x2d2>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb6e 0203 	sbc.w	r2, lr, r3
 800044e:	2001      	movs	r0, #1
 8000450:	4690      	mov	r8, r2
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0e5      	beq.n	8000422 <__udivmoddi4+0xa2>
 8000456:	e9c5 4800 	strd	r4, r8, [r5]
 800045a:	e7e2      	b.n	8000422 <__udivmoddi4+0xa2>
 800045c:	2a00      	cmp	r2, #0
 800045e:	f000 8090 	beq.w	8000582 <__udivmoddi4+0x202>
 8000462:	fab2 f682 	clz	r6, r2
 8000466:	2e00      	cmp	r6, #0
 8000468:	f040 80a4 	bne.w	80005b4 <__udivmoddi4+0x234>
 800046c:	1a8a      	subs	r2, r1, r2
 800046e:	0c03      	lsrs	r3, r0, #16
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	b280      	uxth	r0, r0
 8000476:	b2bc      	uxth	r4, r7
 8000478:	2101      	movs	r1, #1
 800047a:	fbb2 fcfe 	udiv	ip, r2, lr
 800047e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000486:	fb04 f20c 	mul.w	r2, r4, ip
 800048a:	429a      	cmp	r2, r3
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x11e>
 800048e:	18fb      	adds	r3, r7, r3
 8000490:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000494:	d202      	bcs.n	800049c <__udivmoddi4+0x11c>
 8000496:	429a      	cmp	r2, r3
 8000498:	f200 80e0 	bhi.w	800065c <__udivmoddi4+0x2dc>
 800049c:	46c4      	mov	ip, r8
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004a4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004a8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ac:	fb02 f404 	mul.w	r4, r2, r4
 80004b0:	429c      	cmp	r4, r3
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x144>
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0x142>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f200 80ca 	bhi.w	8000656 <__udivmoddi4+0x2d6>
 80004c2:	4602      	mov	r2, r0
 80004c4:	1b1b      	subs	r3, r3, r4
 80004c6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004ca:	e7a5      	b.n	8000418 <__udivmoddi4+0x98>
 80004cc:	f1c1 0620 	rsb	r6, r1, #32
 80004d0:	408b      	lsls	r3, r1
 80004d2:	fa22 f706 	lsr.w	r7, r2, r6
 80004d6:	431f      	orrs	r7, r3
 80004d8:	fa0e f401 	lsl.w	r4, lr, r1
 80004dc:	fa20 f306 	lsr.w	r3, r0, r6
 80004e0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004e4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004e8:	4323      	orrs	r3, r4
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	fa1f fc87 	uxth.w	ip, r7
 80004f2:	fbbe f0f9 	udiv	r0, lr, r9
 80004f6:	0c1c      	lsrs	r4, r3, #16
 80004f8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004fc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000500:	fb00 fe0c 	mul.w	lr, r0, ip
 8000504:	45a6      	cmp	lr, r4
 8000506:	fa02 f201 	lsl.w	r2, r2, r1
 800050a:	d909      	bls.n	8000520 <__udivmoddi4+0x1a0>
 800050c:	193c      	adds	r4, r7, r4
 800050e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000512:	f080 809c 	bcs.w	800064e <__udivmoddi4+0x2ce>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f240 8099 	bls.w	800064e <__udivmoddi4+0x2ce>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	eba4 040e 	sub.w	r4, r4, lr
 8000524:	fa1f fe83 	uxth.w	lr, r3
 8000528:	fbb4 f3f9 	udiv	r3, r4, r9
 800052c:	fb09 4413 	mls	r4, r9, r3, r4
 8000530:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000534:	fb03 fc0c 	mul.w	ip, r3, ip
 8000538:	45a4      	cmp	ip, r4
 800053a:	d908      	bls.n	800054e <__udivmoddi4+0x1ce>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000542:	f080 8082 	bcs.w	800064a <__udivmoddi4+0x2ca>
 8000546:	45a4      	cmp	ip, r4
 8000548:	d97f      	bls.n	800064a <__udivmoddi4+0x2ca>
 800054a:	3b02      	subs	r3, #2
 800054c:	443c      	add	r4, r7
 800054e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000552:	eba4 040c 	sub.w	r4, r4, ip
 8000556:	fba0 ec02 	umull	lr, ip, r0, r2
 800055a:	4564      	cmp	r4, ip
 800055c:	4673      	mov	r3, lr
 800055e:	46e1      	mov	r9, ip
 8000560:	d362      	bcc.n	8000628 <__udivmoddi4+0x2a8>
 8000562:	d05f      	beq.n	8000624 <__udivmoddi4+0x2a4>
 8000564:	b15d      	cbz	r5, 800057e <__udivmoddi4+0x1fe>
 8000566:	ebb8 0203 	subs.w	r2, r8, r3
 800056a:	eb64 0409 	sbc.w	r4, r4, r9
 800056e:	fa04 f606 	lsl.w	r6, r4, r6
 8000572:	fa22 f301 	lsr.w	r3, r2, r1
 8000576:	431e      	orrs	r6, r3
 8000578:	40cc      	lsrs	r4, r1
 800057a:	e9c5 6400 	strd	r6, r4, [r5]
 800057e:	2100      	movs	r1, #0
 8000580:	e74f      	b.n	8000422 <__udivmoddi4+0xa2>
 8000582:	fbb1 fcf2 	udiv	ip, r1, r2
 8000586:	0c01      	lsrs	r1, r0, #16
 8000588:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800058c:	b280      	uxth	r0, r0
 800058e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000592:	463b      	mov	r3, r7
 8000594:	4638      	mov	r0, r7
 8000596:	463c      	mov	r4, r7
 8000598:	46b8      	mov	r8, r7
 800059a:	46be      	mov	lr, r7
 800059c:	2620      	movs	r6, #32
 800059e:	fbb1 f1f7 	udiv	r1, r1, r7
 80005a2:	eba2 0208 	sub.w	r2, r2, r8
 80005a6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005aa:	e766      	b.n	800047a <__udivmoddi4+0xfa>
 80005ac:	4601      	mov	r1, r0
 80005ae:	e718      	b.n	80003e2 <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e72c      	b.n	800040e <__udivmoddi4+0x8e>
 80005b4:	f1c6 0220 	rsb	r2, r6, #32
 80005b8:	fa2e f302 	lsr.w	r3, lr, r2
 80005bc:	40b7      	lsls	r7, r6
 80005be:	40b1      	lsls	r1, r6
 80005c0:	fa20 f202 	lsr.w	r2, r0, r2
 80005c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005c8:	430a      	orrs	r2, r1
 80005ca:	fbb3 f8fe 	udiv	r8, r3, lr
 80005ce:	b2bc      	uxth	r4, r7
 80005d0:	fb0e 3318 	mls	r3, lr, r8, r3
 80005d4:	0c11      	lsrs	r1, r2, #16
 80005d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005da:	fb08 f904 	mul.w	r9, r8, r4
 80005de:	40b0      	lsls	r0, r6
 80005e0:	4589      	cmp	r9, r1
 80005e2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005e6:	b280      	uxth	r0, r0
 80005e8:	d93e      	bls.n	8000668 <__udivmoddi4+0x2e8>
 80005ea:	1879      	adds	r1, r7, r1
 80005ec:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80005f0:	d201      	bcs.n	80005f6 <__udivmoddi4+0x276>
 80005f2:	4589      	cmp	r9, r1
 80005f4:	d81f      	bhi.n	8000636 <__udivmoddi4+0x2b6>
 80005f6:	eba1 0109 	sub.w	r1, r1, r9
 80005fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fe:	fb09 f804 	mul.w	r8, r9, r4
 8000602:	fb0e 1119 	mls	r1, lr, r9, r1
 8000606:	b292      	uxth	r2, r2
 8000608:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800060c:	4542      	cmp	r2, r8
 800060e:	d229      	bcs.n	8000664 <__udivmoddi4+0x2e4>
 8000610:	18ba      	adds	r2, r7, r2
 8000612:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000616:	d2c4      	bcs.n	80005a2 <__udivmoddi4+0x222>
 8000618:	4542      	cmp	r2, r8
 800061a:	d2c2      	bcs.n	80005a2 <__udivmoddi4+0x222>
 800061c:	f1a9 0102 	sub.w	r1, r9, #2
 8000620:	443a      	add	r2, r7
 8000622:	e7be      	b.n	80005a2 <__udivmoddi4+0x222>
 8000624:	45f0      	cmp	r8, lr
 8000626:	d29d      	bcs.n	8000564 <__udivmoddi4+0x1e4>
 8000628:	ebbe 0302 	subs.w	r3, lr, r2
 800062c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000630:	3801      	subs	r0, #1
 8000632:	46e1      	mov	r9, ip
 8000634:	e796      	b.n	8000564 <__udivmoddi4+0x1e4>
 8000636:	eba7 0909 	sub.w	r9, r7, r9
 800063a:	4449      	add	r1, r9
 800063c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000640:	fbb1 f9fe 	udiv	r9, r1, lr
 8000644:	fb09 f804 	mul.w	r8, r9, r4
 8000648:	e7db      	b.n	8000602 <__udivmoddi4+0x282>
 800064a:	4673      	mov	r3, lr
 800064c:	e77f      	b.n	800054e <__udivmoddi4+0x1ce>
 800064e:	4650      	mov	r0, sl
 8000650:	e766      	b.n	8000520 <__udivmoddi4+0x1a0>
 8000652:	4608      	mov	r0, r1
 8000654:	e6fd      	b.n	8000452 <__udivmoddi4+0xd2>
 8000656:	443b      	add	r3, r7
 8000658:	3a02      	subs	r2, #2
 800065a:	e733      	b.n	80004c4 <__udivmoddi4+0x144>
 800065c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000660:	443b      	add	r3, r7
 8000662:	e71c      	b.n	800049e <__udivmoddi4+0x11e>
 8000664:	4649      	mov	r1, r9
 8000666:	e79c      	b.n	80005a2 <__udivmoddi4+0x222>
 8000668:	eba1 0109 	sub.w	r1, r1, r9
 800066c:	46c4      	mov	ip, r8
 800066e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000672:	fb09 f804 	mul.w	r8, r9, r4
 8000676:	e7c4      	b.n	8000602 <__udivmoddi4+0x282>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	@ 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000688:	f004 ffde 	bl	8005648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800068c:	4b5a      	ldr	r3, [pc, #360]	@ (80007f8 <pvPortMallocMicroROS+0x17c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d101      	bne.n	8000698 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000694:	f000 f986 	bl	80009a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000698:	4b58      	ldr	r3, [pc, #352]	@ (80007fc <pvPortMallocMicroROS+0x180>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4013      	ands	r3, r2
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	f040 8090 	bne.w	80007c6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d01e      	beq.n	80006ea <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80006ac:	2208      	movs	r2, #8
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d015      	beq.n	80006ea <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f023 0307 	bic.w	r3, r3, #7
 80006c4:	3308      	adds	r3, #8
 80006c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00b      	beq.n	80006ea <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006d6:	f383 8811 	msr	BASEPRI, r3
 80006da:	f3bf 8f6f 	isb	sy
 80006de:	f3bf 8f4f 	dsb	sy
 80006e2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	e7fd      	b.n	80006e6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d06a      	beq.n	80007c6 <pvPortMallocMicroROS+0x14a>
 80006f0:	4b43      	ldr	r3, [pc, #268]	@ (8000800 <pvPortMallocMicroROS+0x184>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d865      	bhi.n	80007c6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006fa:	4b42      	ldr	r3, [pc, #264]	@ (8000804 <pvPortMallocMicroROS+0x188>)
 80006fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006fe:	4b41      	ldr	r3, [pc, #260]	@ (8000804 <pvPortMallocMicroROS+0x188>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000704:	e004      	b.n	8000710 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000708:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800070a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	429a      	cmp	r2, r3
 8000718:	d903      	bls.n	8000722 <pvPortMallocMicroROS+0xa6>
 800071a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d1f1      	bne.n	8000706 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000722:	4b35      	ldr	r3, [pc, #212]	@ (80007f8 <pvPortMallocMicroROS+0x17c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000728:	429a      	cmp	r2, r3
 800072a:	d04c      	beq.n	80007c6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800072c:	6a3b      	ldr	r3, [r7, #32]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2208      	movs	r2, #8
 8000732:	4413      	add	r3, r2
 8000734:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	6a3b      	ldr	r3, [r7, #32]
 800073c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800073e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000740:	685a      	ldr	r2, [r3, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	1ad2      	subs	r2, r2, r3
 8000746:	2308      	movs	r3, #8
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	429a      	cmp	r2, r3
 800074c:	d920      	bls.n	8000790 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800074e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4413      	add	r3, r2
 8000754:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	f003 0307 	and.w	r3, r3, #7
 800075c:	2b00      	cmp	r3, #0
 800075e:	d00b      	beq.n	8000778 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000764:	f383 8811 	msr	BASEPRI, r3
 8000768:	f3bf 8f6f 	isb	sy
 800076c:	f3bf 8f4f 	dsb	sy
 8000770:	613b      	str	r3, [r7, #16]
}
 8000772:	bf00      	nop
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800077a:	685a      	ldr	r2, [r3, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	1ad2      	subs	r2, r2, r3
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800078a:	69b8      	ldr	r0, [r7, #24]
 800078c:	f000 f96c 	bl	8000a68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <pvPortMallocMicroROS+0x184>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	4a19      	ldr	r2, [pc, #100]	@ (8000800 <pvPortMallocMicroROS+0x184>)
 800079c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800079e:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <pvPortMallocMicroROS+0x184>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <pvPortMallocMicroROS+0x18c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d203      	bcs.n	80007b2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <pvPortMallocMicroROS+0x184>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a16      	ldr	r2, [pc, #88]	@ (8000808 <pvPortMallocMicroROS+0x18c>)
 80007b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b4:	685a      	ldr	r2, [r3, #4]
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <pvPortMallocMicroROS+0x180>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	431a      	orrs	r2, r3
 80007bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007c6:	f004 ff4d 	bl	8005664 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	f003 0307 	and.w	r3, r3, #7
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00b      	beq.n	80007ec <pvPortMallocMicroROS+0x170>
	__asm volatile
 80007d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007d8:	f383 8811 	msr	BASEPRI, r3
 80007dc:	f3bf 8f6f 	isb	sy
 80007e0:	f3bf 8f4f 	dsb	sy
 80007e4:	60fb      	str	r3, [r7, #12]
}
 80007e6:	bf00      	nop
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80007ec:	69fb      	ldr	r3, [r7, #28]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3728      	adds	r7, #40	@ 0x28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20003eec 	.word	0x20003eec
 80007fc:	20003ef8 	.word	0x20003ef8
 8000800:	20003ef0 	.word	0x20003ef0
 8000804:	20003ee4 	.word	0x20003ee4
 8000808:	20003ef4 	.word	0x20003ef4

0800080c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d04a      	beq.n	80008b4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800081e:	2308      	movs	r3, #8
 8000820:	425b      	negs	r3, r3
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	4413      	add	r3, r2
 8000826:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <vPortFreeMicroROS+0xb0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4013      	ands	r3, r2
 8000836:	2b00      	cmp	r3, #0
 8000838:	d10b      	bne.n	8000852 <vPortFreeMicroROS+0x46>
	__asm volatile
 800083a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800083e:	f383 8811 	msr	BASEPRI, r3
 8000842:	f3bf 8f6f 	isb	sy
 8000846:	f3bf 8f4f 	dsb	sy
 800084a:	60fb      	str	r3, [r7, #12]
}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	e7fd      	b.n	800084e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00b      	beq.n	8000872 <vPortFreeMicroROS+0x66>
	__asm volatile
 800085a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800085e:	f383 8811 	msr	BASEPRI, r3
 8000862:	f3bf 8f6f 	isb	sy
 8000866:	f3bf 8f4f 	dsb	sy
 800086a:	60bb      	str	r3, [r7, #8]
}
 800086c:	bf00      	nop
 800086e:	bf00      	nop
 8000870:	e7fd      	b.n	800086e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	685a      	ldr	r2, [r3, #4]
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <vPortFreeMicroROS+0xb0>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4013      	ands	r3, r2
 800087c:	2b00      	cmp	r3, #0
 800087e:	d019      	beq.n	80008b4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d115      	bne.n	80008b4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <vPortFreeMicroROS+0xb0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	43db      	mvns	r3, r3
 8000892:	401a      	ands	r2, r3
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000898:	f004 fed6 	bl	8005648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	685a      	ldr	r2, [r3, #4]
 80008a0:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <vPortFreeMicroROS+0xb4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4413      	add	r3, r2
 80008a6:	4a06      	ldr	r2, [pc, #24]	@ (80008c0 <vPortFreeMicroROS+0xb4>)
 80008a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008aa:	6938      	ldr	r0, [r7, #16]
 80008ac:	f000 f8dc 	bl	8000a68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008b0:	f004 fed8 	bl	8005664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008b4:	bf00      	nop
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20003ef8 	.word	0x20003ef8
 80008c0:	20003ef0 	.word	0x20003ef0

080008c4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008c4:	b480      	push	{r7}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80008d0:	2308      	movs	r3, #8
 80008d2:	425b      	negs	r3, r3
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	4413      	add	r3, r2
 80008d8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	685a      	ldr	r2, [r3, #4]
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <getBlockSize+0x38>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	43db      	mvns	r3, r3
 80008e8:	4013      	ands	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]

	return count;
 80008ec:	68fb      	ldr	r3, [r7, #12]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	371c      	adds	r7, #28
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20003ef8 	.word	0x20003ef8

08000900 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800090a:	f004 fe9d 	bl	8005648 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800090e:	6838      	ldr	r0, [r7, #0]
 8000910:	f7ff feb4 	bl	800067c <pvPortMallocMicroROS>
 8000914:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d017      	beq.n	800094c <pvPortReallocMicroROS+0x4c>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d014      	beq.n	800094c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ffce 	bl	80008c4 <getBlockSize>
 8000928:	4603      	mov	r3, r0
 800092a:	2208      	movs	r2, #8
 800092c:	1a9b      	subs	r3, r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	429a      	cmp	r2, r3
 8000936:	d201      	bcs.n	800093c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	68b8      	ldr	r0, [r7, #8]
 8000942:	f013 f8f2 	bl	8013b2a <memcpy>

		vPortFreeMicroROS(pv);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ff60 	bl	800080c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800094c:	f004 fe8a 	bl	8005664 <xTaskResumeAll>

	return newmem;
 8000950:	68bb      	ldr	r3, [r7, #8]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b086      	sub	sp, #24
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000964:	f004 fe70 	bl	8005648 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	fb02 f303 	mul.w	r3, r2, r3
 8000970:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000972:	6978      	ldr	r0, [r7, #20]
 8000974:	f7ff fe82 	bl	800067c <pvPortMallocMicroROS>
 8000978:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800097e:	e004      	b.n	800098a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	613a      	str	r2, [r7, #16]
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	1e5a      	subs	r2, r3, #1
 800098e:	617a      	str	r2, [r7, #20]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1f5      	bne.n	8000980 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000994:	f004 fe66 	bl	8005664 <xTaskResumeAll>
  	return mem;
 8000998:	68fb      	ldr	r3, [r7, #12]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009aa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80009ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009b0:	4b27      	ldr	r3, [pc, #156]	@ (8000a50 <prvHeapInit+0xac>)
 80009b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d00c      	beq.n	80009d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	3307      	adds	r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f023 0307 	bic.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009cc:	68ba      	ldr	r2, [r7, #8]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a50 <prvHeapInit+0xac>)
 80009d4:	4413      	add	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a54 <prvHeapInit+0xb0>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <prvHeapInit+0xb0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	4413      	add	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009f0:	2208      	movs	r2, #8
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	1a9b      	subs	r3, r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f023 0307 	bic.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4a15      	ldr	r2, [pc, #84]	@ (8000a58 <prvHeapInit+0xb4>)
 8000a04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <prvHeapInit+0xb4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <prvHeapInit+0xb4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	1ad2      	subs	r2, r2, r3
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <prvHeapInit+0xb4>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <prvHeapInit+0xb8>)
 8000a32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	4a09      	ldr	r2, [pc, #36]	@ (8000a60 <prvHeapInit+0xbc>)
 8000a3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <prvHeapInit+0xc0>)
 8000a3e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a42:	601a      	str	r2, [r3, #0]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	200002e4 	.word	0x200002e4
 8000a54:	20003ee4 	.word	0x20003ee4
 8000a58:	20003eec 	.word	0x20003eec
 8000a5c:	20003ef4 	.word	0x20003ef4
 8000a60:	20003ef0 	.word	0x20003ef0
 8000a64:	20003ef8 	.word	0x20003ef8

08000a68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a70:	4b28      	ldr	r3, [pc, #160]	@ (8000b14 <prvInsertBlockIntoFreeList+0xac>)
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	e002      	b.n	8000a7c <prvInsertBlockIntoFreeList+0x14>
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d8f7      	bhi.n	8000a76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	4413      	add	r3, r2
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d108      	bne.n	8000aaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	441a      	add	r2, r3
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	441a      	add	r2, r3
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d118      	bne.n	8000af0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <prvInsertBlockIntoFreeList+0xb0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d00d      	beq.n	8000ae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	441a      	add	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	e008      	b.n	8000af8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <prvInsertBlockIntoFreeList+0xb0>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	e003      	b.n	8000af8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d002      	beq.n	8000b06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20003ee4 	.word	0x20003ee4
 8000b18:	20003eec 	.word	0x20003eec

08000b1c <subscription_callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int count = 0;
std_msgs__msg__Int32 msg;
void subscription_callback(const void * msgin)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  // Cast received message to used type
  const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000b28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b2c:	4806      	ldr	r0, [pc, #24]	@ (8000b48 <subscription_callback+0x2c>)
 8000b2e:	f001 fd38 	bl	80025a2 <HAL_GPIO_TogglePin>

  // Process message
  printf("Received: %ld\n", msg->data);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4619      	mov	r1, r3
 8000b38:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <subscription_callback+0x30>)
 8000b3a:	f012 fe29 	bl	8013790 <iprintf>
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40020800 	.word	0x40020800
 8000b4c:	080148f4 	.word	0x080148f4

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b54:	f000 fe02 	bl	800175c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b58:	f000 f820 	bl	8000b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5c:	f000 f8ce 	bl	8000cfc <MX_GPIO_Init>
  MX_DMA_Init();
 8000b60:	f000 f8a4 	bl	8000cac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b64:	f000 f878 	bl	8000c58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b68:	f003 fc50 	bl	800440c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b6c:	4a07      	ldr	r2, [pc, #28]	@ (8000b8c <main+0x3c>)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4807      	ldr	r0, [pc, #28]	@ (8000b90 <main+0x40>)
 8000b72:	f003 fc95 	bl	80044a0 <osThreadNew>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4a06      	ldr	r2, [pc, #24]	@ (8000b94 <main+0x44>)
 8000b7a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b7c:	f003 fc6a 	bl	8004454 <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  count++;
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <main+0x48>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	4a04      	ldr	r2, [pc, #16]	@ (8000b98 <main+0x48>)
 8000b88:	6013      	str	r3, [r2, #0]
 8000b8a:	e7f9      	b.n	8000b80 <main+0x30>
 8000b8c:	0801498c 	.word	0x0801498c
 8000b90:	08000da1 	.word	0x08000da1
 8000b94:	20004004 	.word	0x20004004
 8000b98:	20004008 	.word	0x20004008

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b094      	sub	sp, #80	@ 0x50
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0320 	add.w	r3, r7, #32
 8000ba6:	2230      	movs	r2, #48	@ 0x30
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f012 fee2 	bl	8013974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <SystemClock_Config+0xb4>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc8:	4a21      	ldr	r2, [pc, #132]	@ (8000c50 <SystemClock_Config+0xb4>)
 8000bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bce:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <SystemClock_Config+0xb4>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c54 <SystemClock_Config+0xb8>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c54 <SystemClock_Config+0xb8>)
 8000be6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <SystemClock_Config+0xb8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c00:	2310      	movs	r3, #16
 8000c02:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c08:	f107 0320 	add.w	r3, r7, #32
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fce3 	bl	80025d8 <HAL_RCC_OscConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000c18:	f000 f95a 	bl	8000ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 ff46 	bl	8002ac8 <HAL_RCC_ClockConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c42:	f000 f945 	bl	8000ed0 <Error_Handler>
  }
}
 8000c46:	bf00      	nop
 8000c48:	3750      	adds	r7, #80	@ 0x50
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40007000 	.word	0x40007000

08000c58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ca8 <MX_USART2_UART_Init+0x50>)
 8000c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c7e:	220c      	movs	r2, #12
 8000c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c82:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c8e:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c90:	f002 f8fa 	bl	8002e88 <HAL_UART_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c9a:	f000 f919 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20003efc 	.word	0x20003efc
 8000ca8:	40004400 	.word	0x40004400

08000cac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <MX_DMA_Init+0x4c>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf8 <MX_DMA_Init+0x4c>)
 8000cbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <MX_DMA_Init+0x4c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2105      	movs	r1, #5
 8000cd2:	2010      	movs	r0, #16
 8000cd4:	f000 fe8f 	bl	80019f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000cd8:	2010      	movs	r0, #16
 8000cda:	f000 fea8 	bl	8001a2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2105      	movs	r1, #5
 8000ce2:	2011      	movs	r0, #17
 8000ce4:	f000 fe87 	bl	80019f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ce8:	2011      	movs	r0, #17
 8000cea:	f000 fea0 	bl	8001a2e <HAL_NVIC_EnableIRQ>

}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800

08000cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	4b20      	ldr	r3, [pc, #128]	@ (8000d98 <MX_GPIO_Init+0x9c>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000d98 <MX_GPIO_Init+0x9c>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b1d      	ldr	r3, [pc, #116]	@ (8000d98 <MX_GPIO_Init+0x9c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	4b19      	ldr	r3, [pc, #100]	@ (8000d98 <MX_GPIO_Init+0x9c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a18      	ldr	r2, [pc, #96]	@ (8000d98 <MX_GPIO_Init+0x9c>)
 8000d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <MX_GPIO_Init+0x9c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <MX_GPIO_Init+0x9c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a11      	ldr	r2, [pc, #68]	@ (8000d98 <MX_GPIO_Init+0x9c>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <MX_GPIO_Init+0x9c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d6c:	480b      	ldr	r0, [pc, #44]	@ (8000d9c <MX_GPIO_Init+0xa0>)
 8000d6e:	f001 fbff 	bl	8002570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4804      	ldr	r0, [pc, #16]	@ (8000d9c <MX_GPIO_Init+0xa0>)
 8000d8c:	f001 fa6c 	bl	8002268 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d90:	bf00      	nop
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020800 	.word	0x40020800

08000da0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b0c8      	sub	sp, #288	@ 0x120
 8000da4:	af02      	add	r7, sp, #8
 8000da6:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */

	  // micro-ROS configuration

	  rmw_uros_set_custom_transport(
 8000da8:	4b3a      	ldr	r3, [pc, #232]	@ (8000e94 <StartDefaultTask+0xf4>)
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	4b3a      	ldr	r3, [pc, #232]	@ (8000e98 <StartDefaultTask+0xf8>)
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	4b3a      	ldr	r3, [pc, #232]	@ (8000e9c <StartDefaultTask+0xfc>)
 8000db2:	4a3b      	ldr	r2, [pc, #236]	@ (8000ea0 <StartDefaultTask+0x100>)
 8000db4:	493b      	ldr	r1, [pc, #236]	@ (8000ea4 <StartDefaultTask+0x104>)
 8000db6:	2001      	movs	r0, #1
 8000db8:	f007 f832 	bl	8007e20 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000dbc:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f006 ff59 	bl	8007c78 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8000dc6:	4b38      	ldr	r3, [pc, #224]	@ (8000ea8 <StartDefaultTask+0x108>)
 8000dc8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8000dcc:	4b37      	ldr	r3, [pc, #220]	@ (8000eac <StartDefaultTask+0x10c>)
 8000dce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8000dd2:	4b37      	ldr	r3, [pc, #220]	@ (8000eb0 <StartDefaultTask+0x110>)
 8000dd4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000dd8:	4b36      	ldr	r3, [pc, #216]	@ (8000eb4 <StartDefaultTask+0x114>)
 8000dda:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000dde:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000de2:	4618      	mov	r0, r3
 8000de4:	f006 ff64 	bl	8007cb0 <rcutils_set_default_allocator>
 8000de8:	4603      	mov	r3, r0
 8000dea:	f083 0301 	eor.w	r3, r3, #1
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d004      	beq.n	8000dfe <StartDefaultTask+0x5e>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8000df4:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 8000df8:	482f      	ldr	r0, [pc, #188]	@ (8000eb8 <StartDefaultTask+0x118>)
 8000dfa:	f012 fcc9 	bl	8013790 <iprintf>
//	    msg.data++;
//	    osDelay(1);
//	  }


	 allocator = rcl_get_default_allocator();
 8000dfe:	463b      	mov	r3, r7
 8000e00:	4618      	mov	r0, r3
 8000e02:	f006 ff47 	bl	8007c94 <rcutils_get_default_allocator>
 8000e06:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e0a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e0e:	f107 04b8 	add.w	r4, r7, #184	@ 0xb8
 8000e12:	461d      	mov	r5, r3
 8000e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e18:	682b      	ldr	r3, [r5, #0]
 8000e1a:	6023      	str	r3, [r4, #0]
	// create init_options
	rclc_support_init(&support, 0, NULL, &allocator);
 8000e1c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8000e20:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8000e24:	2200      	movs	r2, #0
 8000e26:	2100      	movs	r1, #0
 8000e28:	f006 fe64 	bl	8007af4 <rclc_support_init>

	//create node
	rclc_node_init_default(&node, "subscriber_node","", &support);
 8000e2c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e30:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 8000e34:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <StartDefaultTask+0x11c>)
 8000e36:	4922      	ldr	r1, [pc, #136]	@ (8000ec0 <StartDefaultTask+0x120>)
 8000e38:	f006 fea6 	bl	8007b88 <rclc_node_init_default>

	//create subscriber
	rclc_subscription_init_default(
 8000e3c:	f007 f806 	bl	8007e4c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000e40:	4602      	mov	r2, r0
 8000e42:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8000e46:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <StartDefaultTask+0x124>)
 8000e4c:	f006 fed8 	bl	8007c00 <rclc_subscription_init_default>
		&node,
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		"cubemx_subscriber");

	// create executor
	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8000e50:	f107 0320 	add.w	r3, r7, #32
 8000e54:	4618      	mov	r0, r3
 8000e56:	f006 fbe3 	bl	8007620 <rclc_executor_get_zero_initialized_executor>
	rclc_executor_init(&executor, &support.context, 1, &allocator);
 8000e5a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8000e5e:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8000e62:	f107 0020 	add.w	r0, r7, #32
 8000e66:	2201      	movs	r2, #1
 8000e68:	f006 fbe6 	bl	8007638 <rclc_executor_init>

	rclc_executor_add_subscription(
 8000e6c:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8000e70:	f107 0020 	add.w	r0, r7, #32
 8000e74:	2300      	movs	r3, #0
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <StartDefaultTask+0x128>)
 8000e7a:	4a14      	ldr	r2, [pc, #80]	@ (8000ecc <StartDefaultTask+0x12c>)
 8000e7c:	f006 fc48 	bl	8007710 <rclc_executor_add_subscription>
	  &executor, &subscriber, &msg,
	  &subscription_callback, ON_NEW_DATA);
	while(1) {
		rclc_executor_spin(&executor);
 8000e80:	f107 0320 	add.w	r3, r7, #32
 8000e84:	4618      	mov	r0, r3
 8000e86:	f006 fe0d 	bl	8007aa4 <rclc_executor_spin>
		vTaskDelay(pdMS_TO_TICKS(10));
 8000e8a:	200a      	movs	r0, #10
 8000e8c:	f004 fb3e 	bl	800550c <vTaskDelay>
		rclc_executor_spin(&executor);
 8000e90:	bf00      	nop
 8000e92:	e7f5      	b.n	8000e80 <StartDefaultTask+0xe0>
 8000e94:	08001661 	.word	0x08001661
 8000e98:	080015f9 	.word	0x080015f9
 8000e9c:	080015d9 	.word	0x080015d9
 8000ea0:	080015ad 	.word	0x080015ad
 8000ea4:	20003efc 	.word	0x20003efc
 8000ea8:	08000edd 	.word	0x08000edd
 8000eac:	08000f21 	.word	0x08000f21
 8000eb0:	08000f59 	.word	0x08000f59
 8000eb4:	08000fc5 	.word	0x08000fc5
 8000eb8:	08014904 	.word	0x08014904
 8000ebc:	0801492c 	.word	0x0801492c
 8000ec0:	08014930 	.word	0x08014930
 8000ec4:	08014940 	.word	0x08014940
 8000ec8:	08000b1d 	.word	0x08000b1d
 8000ecc:	2000400c 	.word	0x2000400c

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <Error_Handler+0x8>

08000edc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <microros_allocate+0x3c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <microros_allocate+0x3c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000ef6:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <microros_allocate+0x40>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4413      	add	r3, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <microros_allocate+0x40>)
 8000f04:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff fbb8 	bl	800067c <pvPortMallocMicroROS>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20004010 	.word	0x20004010
 8000f1c:	20004014 	.word	0x20004014

08000f20 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00c      	beq.n	8000f4a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff fcc7 	bl	80008c4 <getBlockSize>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a06      	ldr	r2, [pc, #24]	@ (8000f54 <microros_deallocate+0x34>)
 8000f3a:	6812      	ldr	r2, [r2, #0]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <microros_deallocate+0x34>)
 8000f42:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff fc61 	bl	800080c <vPortFreeMicroROS>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20004014 	.word	0x20004014

08000f58 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000f64:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <microros_reallocate+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <microros_reallocate+0x64>)
 8000f72:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <microros_reallocate+0x68>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <microros_reallocate+0x68>)
 8000f82:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d104      	bne.n	8000f94 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8000f8a:	68b8      	ldr	r0, [r7, #8]
 8000f8c:	f7ff fb76 	bl	800067c <pvPortMallocMicroROS>
 8000f90:	4603      	mov	r3, r0
 8000f92:	e00e      	b.n	8000fb2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f7ff fc95 	bl	80008c4 <getBlockSize>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a08      	ldr	r2, [pc, #32]	@ (8000fc0 <microros_reallocate+0x68>)
 8000f9e:	6812      	ldr	r2, [r2, #0]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <microros_reallocate+0x68>)
 8000fa6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	68f8      	ldr	r0, [r7, #12]
 8000fac:	f7ff fca8 	bl	8000900 <pvPortReallocMicroROS>
 8000fb0:	4603      	mov	r3, r0
  }
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20004010 	.word	0x20004010
 8000fc0:	20004014 	.word	0x20004014

08000fc4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	fb02 f303 	mul.w	r3, r2, r3
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800100c <microros_zero_allocate+0x48>)
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <microros_zero_allocate+0x48>)
 8000fe2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	fb02 f303 	mul.w	r3, r2, r3
 8000fec:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <microros_zero_allocate+0x4c>)
 8000fee:	6812      	ldr	r2, [r2, #0]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <microros_zero_allocate+0x4c>)
 8000ff6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff fcad 	bl	800095a <pvPortCallocMicroROS>
 8001000:	4603      	mov	r3, r0
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20004010 	.word	0x20004010
 8001010:	20004014 	.word	0x20004014
 8001014:	00000000 	.word	0x00000000

08001018 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001018:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800102a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800102e:	a320      	add	r3, pc, #128	@ (adr r3, 80010b0 <UTILS_NanosecondsToTimespec+0x98>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff f93c 	bl	80002b0 <__aeabi_ldivmod>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001042:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001046:	a31a      	add	r3, pc, #104	@ (adr r3, 80010b0 <UTILS_NanosecondsToTimespec+0x98>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff f930 	bl	80002b0 <__aeabi_ldivmod>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2b00      	cmp	r3, #0
 800105a:	da20      	bge.n	800109e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	4a11      	ldr	r2, [pc, #68]	@ (80010a8 <UTILS_NanosecondsToTimespec+0x90>)
 8001062:	fb82 1203 	smull	r1, r2, r2, r3
 8001066:	1712      	asrs	r2, r2, #28
 8001068:	17db      	asrs	r3, r3, #31
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	6979      	ldr	r1, [r7, #20]
 8001078:	17c8      	asrs	r0, r1, #31
 800107a:	460c      	mov	r4, r1
 800107c:	4605      	mov	r5, r0
 800107e:	ebb2 0804 	subs.w	r8, r2, r4
 8001082:	eb63 0905 	sbc.w	r9, r3, r5
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	4906      	ldr	r1, [pc, #24]	@ (80010ac <UTILS_NanosecondsToTimespec+0x94>)
 8001094:	fb01 f303 	mul.w	r3, r1, r3
 8001098:	441a      	add	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	609a      	str	r2, [r3, #8]
    }
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010a8:	44b82fa1 	.word	0x44b82fa1
 80010ac:	3b9aca00 	.word	0x3b9aca00
 80010b0:	3b9aca00 	.word	0x3b9aca00
 80010b4:	00000000 	.word	0x00000000

080010b8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80010b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010bc:	b08e      	sub	sp, #56	@ 0x38
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80010c2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80010c4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80010c8:	2300      	movs	r3, #0
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80010da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010de:	4618      	mov	r0, r3
 80010e0:	f004 fd3c 	bl	8005b5c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80010e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010e6:	17da      	asrs	r2, r3, #31
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	61fa      	str	r2, [r7, #28]
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	69b9      	ldr	r1, [r7, #24]
 80010f6:	000b      	movs	r3, r1
 80010f8:	2200      	movs	r2, #0
 80010fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80010fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001100:	2200      	movs	r2, #0
 8001102:	461c      	mov	r4, r3
 8001104:	4615      	mov	r5, r2
 8001106:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800110a:	1911      	adds	r1, r2, r4
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	416b      	adcs	r3, r5
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001116:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800111a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	f04f 0400 	mov.w	r4, #0
 8001126:	f04f 0500 	mov.w	r5, #0
 800112a:	015d      	lsls	r5, r3, #5
 800112c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001130:	0154      	lsls	r4, r2, #5
 8001132:	4622      	mov	r2, r4
 8001134:	462b      	mov	r3, r5
 8001136:	ebb2 0800 	subs.w	r8, r2, r0
 800113a:	eb63 0901 	sbc.w	r9, r3, r1
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800114a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800114e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001152:	4690      	mov	r8, r2
 8001154:	4699      	mov	r9, r3
 8001156:	eb18 0a00 	adds.w	sl, r8, r0
 800115a:	eb49 0b01 	adc.w	fp, r9, r1
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800116a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800116e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001172:	ebb2 040a 	subs.w	r4, r2, sl
 8001176:	603c      	str	r4, [r7, #0]
 8001178:	eb63 030b 	sbc.w	r3, r3, fp
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001182:	4623      	mov	r3, r4
 8001184:	181b      	adds	r3, r3, r0
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	462b      	mov	r3, r5
 800118a:	eb41 0303 	adc.w	r3, r1, r3
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	6a3a      	ldr	r2, [r7, #32]
 8001192:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001196:	f7ff ff3f 	bl	8001018 <UTILS_NanosecondsToTimespec>

    return 0;
 800119a:	2300      	movs	r3, #0
 800119c:	4618      	mov	r0, r3
 800119e:	3738      	adds	r7, #56	@ 0x38
 80011a0:	46bd      	mov	sp, r7
 80011a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_MspInit+0x54>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	4a11      	ldr	r2, [pc, #68]	@ (80011fc <HAL_MspInit+0x54>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011be:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <HAL_MspInit+0x54>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <HAL_MspInit+0x54>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <HAL_MspInit+0x54>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <HAL_MspInit+0x54>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	210f      	movs	r1, #15
 80011ea:	f06f 0001 	mvn.w	r0, #1
 80011ee:	f000 fc02 	bl	80019f6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	@ 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a4d      	ldr	r2, [pc, #308]	@ (8001354 <HAL_UART_MspInit+0x154>)
 800121e:	4293      	cmp	r3, r2
 8001220:	f040 8093 	bne.w	800134a <HAL_UART_MspInit+0x14a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	4b4b      	ldr	r3, [pc, #300]	@ (8001358 <HAL_UART_MspInit+0x158>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122c:	4a4a      	ldr	r2, [pc, #296]	@ (8001358 <HAL_UART_MspInit+0x158>)
 800122e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001232:	6413      	str	r3, [r2, #64]	@ 0x40
 8001234:	4b48      	ldr	r3, [pc, #288]	@ (8001358 <HAL_UART_MspInit+0x158>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	4b44      	ldr	r3, [pc, #272]	@ (8001358 <HAL_UART_MspInit+0x158>)
 8001246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001248:	4a43      	ldr	r2, [pc, #268]	@ (8001358 <HAL_UART_MspInit+0x158>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001250:	4b41      	ldr	r3, [pc, #260]	@ (8001358 <HAL_UART_MspInit+0x158>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800125c:	230c      	movs	r3, #12
 800125e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800126c:	2307      	movs	r3, #7
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	4839      	ldr	r0, [pc, #228]	@ (800135c <HAL_UART_MspInit+0x15c>)
 8001278:	f000 fff6 	bl	8002268 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800127c:	4b38      	ldr	r3, [pc, #224]	@ (8001360 <HAL_UART_MspInit+0x160>)
 800127e:	4a39      	ldr	r2, [pc, #228]	@ (8001364 <HAL_UART_MspInit+0x164>)
 8001280:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001282:	4b37      	ldr	r3, [pc, #220]	@ (8001360 <HAL_UART_MspInit+0x160>)
 8001284:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001288:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800128a:	4b35      	ldr	r3, [pc, #212]	@ (8001360 <HAL_UART_MspInit+0x160>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001290:	4b33      	ldr	r3, [pc, #204]	@ (8001360 <HAL_UART_MspInit+0x160>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001296:	4b32      	ldr	r3, [pc, #200]	@ (8001360 <HAL_UART_MspInit+0x160>)
 8001298:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800129c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800129e:	4b30      	ldr	r3, [pc, #192]	@ (8001360 <HAL_UART_MspInit+0x160>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001360 <HAL_UART_MspInit+0x160>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80012aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001360 <HAL_UART_MspInit+0x160>)
 80012ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001360 <HAL_UART_MspInit+0x160>)
 80012b4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012b8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ba:	4b29      	ldr	r3, [pc, #164]	@ (8001360 <HAL_UART_MspInit+0x160>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80012c0:	4827      	ldr	r0, [pc, #156]	@ (8001360 <HAL_UART_MspInit+0x160>)
 80012c2:	f000 fbcf 	bl	8001a64 <HAL_DMA_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80012cc:	f7ff fe00 	bl	8000ed0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a23      	ldr	r2, [pc, #140]	@ (8001360 <HAL_UART_MspInit+0x160>)
 80012d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012d6:	4a22      	ldr	r2, [pc, #136]	@ (8001360 <HAL_UART_MspInit+0x160>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80012dc:	4b22      	ldr	r3, [pc, #136]	@ (8001368 <HAL_UART_MspInit+0x168>)
 80012de:	4a23      	ldr	r2, [pc, #140]	@ (800136c <HAL_UART_MspInit+0x16c>)
 80012e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80012e2:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <HAL_UART_MspInit+0x168>)
 80012e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001368 <HAL_UART_MspInit+0x168>)
 80012ec:	2240      	movs	r2, #64	@ 0x40
 80012ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001368 <HAL_UART_MspInit+0x168>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <HAL_UART_MspInit+0x168>)
 80012f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <HAL_UART_MspInit+0x168>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001304:	4b18      	ldr	r3, [pc, #96]	@ (8001368 <HAL_UART_MspInit+0x168>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800130a:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <HAL_UART_MspInit+0x168>)
 800130c:	2200      	movs	r2, #0
 800130e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001310:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <HAL_UART_MspInit+0x168>)
 8001312:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001316:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <HAL_UART_MspInit+0x168>)
 800131a:	2200      	movs	r2, #0
 800131c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800131e:	4812      	ldr	r0, [pc, #72]	@ (8001368 <HAL_UART_MspInit+0x168>)
 8001320:	f000 fba0 	bl	8001a64 <HAL_DMA_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800132a:	f7ff fdd1 	bl	8000ed0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a0d      	ldr	r2, [pc, #52]	@ (8001368 <HAL_UART_MspInit+0x168>)
 8001332:	639a      	str	r2, [r3, #56]	@ 0x38
 8001334:	4a0c      	ldr	r2, [pc, #48]	@ (8001368 <HAL_UART_MspInit+0x168>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2105      	movs	r1, #5
 800133e:	2026      	movs	r0, #38	@ 0x26
 8001340:	f000 fb59 	bl	80019f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001344:	2026      	movs	r0, #38	@ 0x26
 8001346:	f000 fb72 	bl	8001a2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	@ 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40004400 	.word	0x40004400
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000
 8001360:	20003f44 	.word	0x20003f44
 8001364:	40026088 	.word	0x40026088
 8001368:	20003fa4 	.word	0x20003fa4
 800136c:	400260a0 	.word	0x400260a0

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <NMI_Handler+0x4>

08001378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <MemManage_Handler+0x4>

08001388 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <UsageFault_Handler+0x4>

08001398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013aa:	f000 fa29 	bl	8001800 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013ae:	f004 fd59 	bl	8005e64 <xTaskGetSchedulerState>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d001      	beq.n	80013bc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013b8:	f005 fb4e 	bl	8006a58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <DMA1_Stream5_IRQHandler+0x10>)
 80013c6:	f000 fce5 	bl	8001d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20003f44 	.word	0x20003f44

080013d4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <DMA1_Stream6_IRQHandler+0x10>)
 80013da:	f000 fcdb 	bl	8001d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20003fa4 	.word	0x20003fa4

080013e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013ec:	4802      	ldr	r0, [pc, #8]	@ (80013f8 <USART2_IRQHandler+0x10>)
 80013ee:	f001 febb 	bl	8003168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20003efc 	.word	0x20003efc

080013fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return 1;
 8001400:	2301      	movs	r3, #1
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_kill>:

int _kill(int pid, int sig)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001416:	f012 fb53 	bl	8013ac0 <__errno>
 800141a:	4603      	mov	r3, r0
 800141c:	2216      	movs	r2, #22
 800141e:	601a      	str	r2, [r3, #0]
  return -1;
 8001420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <_exit>:

void _exit (int status)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001434:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ffe7 	bl	800140c <_kill>
  while (1) {}    /* Make sure we hang here */
 800143e:	bf00      	nop
 8001440:	e7fd      	b.n	800143e <_exit+0x12>

08001442 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	e00a      	b.n	800146a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001454:	f3af 8000 	nop.w
 8001458:	4601      	mov	r1, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	60ba      	str	r2, [r7, #8]
 8001460:	b2ca      	uxtb	r2, r1
 8001462:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	3301      	adds	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	429a      	cmp	r2, r3
 8001470:	dbf0      	blt.n	8001454 <_read+0x12>
  }

  return len;
 8001472:	687b      	ldr	r3, [r7, #4]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	e009      	b.n	80014a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	60ba      	str	r2, [r7, #8]
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3301      	adds	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	dbf1      	blt.n	800148e <_write+0x12>
  }
  return len;
 80014aa:	687b      	ldr	r3, [r7, #4]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_close>:

int _close(int file)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014dc:	605a      	str	r2, [r3, #4]
  return 0;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_isatty>:

int _isatty(int file)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014f4:	2301      	movs	r3, #1
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001502:	b480      	push	{r7}
 8001504:	b085      	sub	sp, #20
 8001506:	af00      	add	r7, sp, #0
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001524:	4a14      	ldr	r2, [pc, #80]	@ (8001578 <_sbrk+0x5c>)
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <_sbrk+0x60>)
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001530:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001538:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <_sbrk+0x64>)
 800153a:	4a12      	ldr	r2, [pc, #72]	@ (8001584 <_sbrk+0x68>)
 800153c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153e:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	429a      	cmp	r2, r3
 800154a:	d207      	bcs.n	800155c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800154c:	f012 fab8 	bl	8013ac0 <__errno>
 8001550:	4603      	mov	r3, r0
 8001552:	220c      	movs	r2, #12
 8001554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800155a:	e009      	b.n	8001570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800155c:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001562:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <_sbrk+0x64>)
 800156c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156e:	68fb      	ldr	r3, [r7, #12]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20020000 	.word	0x20020000
 800157c:	00000400 	.word	0x00000400
 8001580:	2000401c 	.word	0x2000401c
 8001584:	2000dd78 	.word	0x2000dd78

08001588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <SystemInit+0x20>)
 800158e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001592:	4a05      	ldr	r2, [pc, #20]	@ (80015a8 <SystemInit+0x20>)
 8001594:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001598:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015ba:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80015bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015c0:	4904      	ldr	r1, [pc, #16]	@ (80015d4 <cubemx_transport_open+0x28>)
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f001 fd2c 	bl	8003020 <HAL_UART_Receive_DMA>
    return true;
 80015c8:	2301      	movs	r3, #1
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20004020 	.word	0x20004020

080015d8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015e6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f001 fd3e 	bl	800306a <HAL_UART_DMAStop>
    return true;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800160c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b20      	cmp	r3, #32
 8001618:	d11c      	bne.n	8001654 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	b29b      	uxth	r3, r3
 800161e:	461a      	mov	r2, r3
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f001 fc80 	bl	8002f28 <HAL_UART_Transmit_DMA>
 8001628:	4603      	mov	r3, r0
 800162a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800162c:	e002      	b.n	8001634 <cubemx_transport_write+0x3c>
            osDelay(1);
 800162e:	2001      	movs	r0, #1
 8001630:	f002 ffc8 	bl	80045c4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001634:	7cfb      	ldrb	r3, [r7, #19]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d105      	bne.n	8001646 <cubemx_transport_write+0x4e>
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b20      	cmp	r3, #32
 8001644:	d1f3      	bne.n	800162e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001646:	7cfb      	ldrb	r3, [r7, #19]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <cubemx_transport_write+0x58>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	e002      	b.n	8001656 <cubemx_transport_write+0x5e>
 8001650:	2300      	movs	r3, #0
 8001652:	e000      	b.n	8001656 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001654:	2300      	movs	r3, #0
    }
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001674:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800167a:	b672      	cpsid	i
}
 800167c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800168a:	4a1c      	ldr	r2, [pc, #112]	@ (80016fc <cubemx_transport_read+0x9c>)
 800168c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800168e:	b662      	cpsie	i
}
 8001690:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3301      	adds	r3, #1
 8001696:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001698:	2001      	movs	r0, #1
 800169a:	f002 ff93 	bl	80045c4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800169e:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <cubemx_transport_read+0xa0>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <cubemx_transport_read+0x9c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d103      	bne.n	80016b2 <cubemx_transport_read+0x52>
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dbe3      	blt.n	800167a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80016b6:	e011      	b.n	80016dc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <cubemx_transport_read+0xa0>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	440b      	add	r3, r1
 80016c2:	4910      	ldr	r1, [pc, #64]	@ (8001704 <cubemx_transport_read+0xa4>)
 80016c4:	5c8a      	ldrb	r2, [r1, r2]
 80016c6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80016c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <cubemx_transport_read+0xa0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001700 <cubemx_transport_read+0xa0>)
 80016d4:	6013      	str	r3, [r2, #0]
        wrote++;
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	3301      	adds	r3, #1
 80016da:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <cubemx_transport_read+0xa0>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <cubemx_transport_read+0x9c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d003      	beq.n	80016f0 <cubemx_transport_read+0x90>
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d3e3      	bcc.n	80016b8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80016f0:	69bb      	ldr	r3, [r7, #24]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20004824 	.word	0x20004824
 8001700:	20004820 	.word	0x20004820
 8001704:	20004020 	.word	0x20004020

08001708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001708:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001740 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800170c:	f7ff ff3c 	bl	8001588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001712:	490d      	ldr	r1, [pc, #52]	@ (8001748 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001714:	4a0d      	ldr	r2, [pc, #52]	@ (800174c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001718:	e002      	b.n	8001720 <LoopCopyDataInit>

0800171a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800171c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171e:	3304      	adds	r3, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001724:	d3f9      	bcc.n	800171a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001726:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001728:	4c0a      	ldr	r4, [pc, #40]	@ (8001754 <LoopFillZerobss+0x22>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800172c:	e001      	b.n	8001732 <LoopFillZerobss>

0800172e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001730:	3204      	adds	r2, #4

08001732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001734:	d3fb      	bcc.n	800172e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001736:	f012 f9c9 	bl	8013acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173a:	f7ff fa09 	bl	8000b50 <main>
  bx  lr    
 800173e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001740:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001748:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 800174c:	08015824 	.word	0x08015824
  ldr r2, =_sbss
 8001750:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8001754:	2000dd74 	.word	0x2000dd74

08001758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001758:	e7fe      	b.n	8001758 <ADC_IRQHandler>
	...

0800175c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001760:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0d      	ldr	r2, [pc, #52]	@ (800179c <HAL_Init+0x40>)
 8001766:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800176a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800176c:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <HAL_Init+0x40>)
 8001772:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001778:	4b08      	ldr	r3, [pc, #32]	@ (800179c <HAL_Init+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a07      	ldr	r2, [pc, #28]	@ (800179c <HAL_Init+0x40>)
 800177e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001784:	2003      	movs	r0, #3
 8001786:	f000 f92b 	bl	80019e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800178a:	200f      	movs	r0, #15
 800178c:	f000 f808 	bl	80017a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001790:	f7ff fd0a 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023c00 	.word	0x40023c00

080017a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <HAL_InitTick+0x54>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <HAL_InitTick+0x58>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4619      	mov	r1, r3
 80017b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f943 	bl	8001a4a <HAL_SYSTICK_Config>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00e      	b.n	80017ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	d80a      	bhi.n	80017ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d4:	2200      	movs	r2, #0
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017dc:	f000 f90b 	bl	80019f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e0:	4a06      	ldr	r2, [pc, #24]	@ (80017fc <HAL_InitTick+0x5c>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e000      	b.n	80017ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000004 	.word	0x20000004
 80017f8:	2000000c 	.word	0x2000000c
 80017fc:	20000008 	.word	0x20000008

08001800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_IncTick+0x20>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_IncTick+0x24>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4413      	add	r3, r2
 8001810:	4a04      	ldr	r2, [pc, #16]	@ (8001824 <HAL_IncTick+0x24>)
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	2000000c 	.word	0x2000000c
 8001824:	20004828 	.word	0x20004828

08001828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return uwTick;
 800182c:	4b03      	ldr	r3, [pc, #12]	@ (800183c <HAL_GetTick+0x14>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20004828 	.word	0x20004828

08001840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001868:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800186c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	@ (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800188c:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <__NVIC_GetPriorityGrouping+0x18>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	f003 0307 	and.w	r3, r3, #7
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	db0b      	blt.n	80018ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	f003 021f 	and.w	r2, r3, #31
 80018bc:	4907      	ldr	r1, [pc, #28]	@ (80018dc <__NVIC_EnableIRQ+0x38>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	2001      	movs	r0, #1
 80018c6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000e100 	.word	0xe000e100

080018e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	db0a      	blt.n	800190a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	490c      	ldr	r1, [pc, #48]	@ (800192c <__NVIC_SetPriority+0x4c>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	0112      	lsls	r2, r2, #4
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	440b      	add	r3, r1
 8001904:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001908:	e00a      	b.n	8001920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4908      	ldr	r1, [pc, #32]	@ (8001930 <__NVIC_SetPriority+0x50>)
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	3b04      	subs	r3, #4
 8001918:	0112      	lsls	r2, r2, #4
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	440b      	add	r3, r1
 800191e:	761a      	strb	r2, [r3, #24]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000e100 	.word	0xe000e100
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	@ 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f1c3 0307 	rsb	r3, r3, #7
 800194e:	2b04      	cmp	r3, #4
 8001950:	bf28      	it	cs
 8001952:	2304      	movcs	r3, #4
 8001954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3304      	adds	r3, #4
 800195a:	2b06      	cmp	r3, #6
 800195c:	d902      	bls.n	8001964 <NVIC_EncodePriority+0x30>
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3b03      	subs	r3, #3
 8001962:	e000      	b.n	8001966 <NVIC_EncodePriority+0x32>
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	401a      	ands	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800197c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	43d9      	mvns	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	4313      	orrs	r3, r2
         );
}
 800198e:	4618      	mov	r0, r3
 8001990:	3724      	adds	r7, #36	@ 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019ac:	d301      	bcc.n	80019b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00f      	b.n	80019d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b2:	4a0a      	ldr	r2, [pc, #40]	@ (80019dc <SysTick_Config+0x40>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ba:	210f      	movs	r1, #15
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019c0:	f7ff ff8e 	bl	80018e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <SysTick_Config+0x40>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ca:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <SysTick_Config+0x40>)
 80019cc:	2207      	movs	r2, #7
 80019ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	e000e010 	.word	0xe000e010

080019e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff29 	bl	8001840 <__NVIC_SetPriorityGrouping>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a08:	f7ff ff3e 	bl	8001888 <__NVIC_GetPriorityGrouping>
 8001a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	6978      	ldr	r0, [r7, #20]
 8001a14:	f7ff ff8e 	bl	8001934 <NVIC_EncodePriority>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff5d 	bl	80018e0 <__NVIC_SetPriority>
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff31 	bl	80018a4 <__NVIC_EnableIRQ>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffa2 	bl	800199c <SysTick_Config>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff feda 	bl	8001828 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e099      	b.n	8001bb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0201 	bic.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa0:	e00f      	b.n	8001ac2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aa2:	f7ff fec1 	bl	8001828 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b05      	cmp	r3, #5
 8001aae:	d908      	bls.n	8001ac2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2203      	movs	r2, #3
 8001aba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e078      	b.n	8001bb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1e8      	bne.n	8001aa2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	4b38      	ldr	r3, [pc, #224]	@ (8001bbc <HAL_DMA_Init+0x158>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d107      	bne.n	8001b2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b24:	4313      	orrs	r3, r2
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f023 0307 	bic.w	r3, r3, #7
 8001b42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d117      	bne.n	8001b86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00e      	beq.n	8001b86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 fb01 	bl	8002170 <DMA_CheckFifoParam>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2240      	movs	r2, #64	@ 0x40
 8001b78:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b82:	2301      	movs	r3, #1
 8001b84:	e016      	b.n	8001bb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 fab8 	bl	8002104 <DMA_CalcBaseAndBitshift>
 8001b94:	4603      	mov	r3, r0
 8001b96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b9c:	223f      	movs	r2, #63	@ 0x3f
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	f010803f 	.word	0xf010803f

08001bc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_DMA_Start_IT+0x26>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e040      	b.n	8001c68 <HAL_DMA_Start_IT+0xa8>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d12f      	bne.n	8001c5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 fa4a 	bl	80020a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c18:	223f      	movs	r2, #63	@ 0x3f
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0216 	orr.w	r2, r2, #22
 8001c2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0208 	orr.w	r2, r2, #8
 8001c46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	e005      	b.n	8001c66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c62:	2302      	movs	r3, #2
 8001c64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c7e:	f7ff fdd3 	bl	8001828 <HAL_GetTick>
 8001c82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d008      	beq.n	8001ca2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2280      	movs	r2, #128	@ 0x80
 8001c94:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e052      	b.n	8001d48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0216 	bic.w	r2, r2, #22
 8001cb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d103      	bne.n	8001cd2 <HAL_DMA_Abort+0x62>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0208 	bic.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf2:	e013      	b.n	8001d1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cf4:	f7ff fd98 	bl	8001828 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d90c      	bls.n	8001d1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2220      	movs	r2, #32
 8001d06:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e015      	b.n	8001d48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1e4      	bne.n	8001cf4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2e:	223f      	movs	r2, #63	@ 0x3f
 8001d30:	409a      	lsls	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d004      	beq.n	8001d6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2280      	movs	r2, #128	@ 0x80
 8001d68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00c      	b.n	8001d88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2205      	movs	r2, #5
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0201 	bic.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001da0:	4b8e      	ldr	r3, [pc, #568]	@ (8001fdc <HAL_DMA_IRQHandler+0x248>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a8e      	ldr	r2, [pc, #568]	@ (8001fe0 <HAL_DMA_IRQHandler+0x24c>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	0a9b      	lsrs	r3, r3, #10
 8001dac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d01a      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d013      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0204 	bic.w	r2, r2, #4
 8001de6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dec:	2208      	movs	r2, #8
 8001dee:	409a      	lsls	r2, r3
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e04:	2201      	movs	r2, #1
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d012      	beq.n	8001e36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00b      	beq.n	8001e36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e22:	2201      	movs	r2, #1
 8001e24:	409a      	lsls	r2, r3
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2e:	f043 0202 	orr.w	r2, r3, #2
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d012      	beq.n	8001e6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00b      	beq.n	8001e6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e58:	2204      	movs	r2, #4
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e64:	f043 0204 	orr.w	r2, r3, #4
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e70:	2210      	movs	r2, #16
 8001e72:	409a      	lsls	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d043      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d03c      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8e:	2210      	movs	r2, #16
 8001e90:	409a      	lsls	r2, r3
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d018      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d108      	bne.n	8001ec4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d024      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	4798      	blx	r3
 8001ec2:	e01f      	b.n	8001f04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01b      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
 8001ed4:	e016      	b.n	8001f04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d107      	bne.n	8001ef4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0208 	bic.w	r2, r2, #8
 8001ef2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f08:	2220      	movs	r2, #32
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 808f 	beq.w	8002034 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 8087 	beq.w	8002034 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d136      	bne.n	8001fac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0216 	bic.w	r2, r2, #22
 8001f4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d103      	bne.n	8001f6e <HAL_DMA_IRQHandler+0x1da>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0208 	bic.w	r2, r2, #8
 8001f7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f82:	223f      	movs	r2, #63	@ 0x3f
 8001f84:	409a      	lsls	r2, r3
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d07e      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	4798      	blx	r3
        }
        return;
 8001faa:	e079      	b.n	80020a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d01d      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10d      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d031      	beq.n	8002034 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	4798      	blx	r3
 8001fd8:	e02c      	b.n	8002034 <HAL_DMA_IRQHandler+0x2a0>
 8001fda:	bf00      	nop
 8001fdc:	20000004 	.word	0x20000004
 8001fe0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d023      	beq.n	8002034 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
 8001ff4:	e01e      	b.n	8002034 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10f      	bne.n	8002024 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0210 	bic.w	r2, r2, #16
 8002012:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002038:	2b00      	cmp	r3, #0
 800203a:	d032      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d022      	beq.n	800208e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2205      	movs	r2, #5
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	3301      	adds	r3, #1
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	429a      	cmp	r2, r3
 800206a:	d307      	bcc.n	800207c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f2      	bne.n	8002060 <HAL_DMA_IRQHandler+0x2cc>
 800207a:	e000      	b.n	800207e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800207c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	4798      	blx	r3
 800209e:	e000      	b.n	80020a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020a0:	bf00      	nop
    }
  }
}
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b40      	cmp	r3, #64	@ 0x40
 80020d4:	d108      	bne.n	80020e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020e6:	e007      	b.n	80020f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	60da      	str	r2, [r3, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	3b10      	subs	r3, #16
 8002114:	4a14      	ldr	r2, [pc, #80]	@ (8002168 <DMA_CalcBaseAndBitshift+0x64>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800211e:	4a13      	ldr	r2, [pc, #76]	@ (800216c <DMA_CalcBaseAndBitshift+0x68>)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d909      	bls.n	8002146 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	1d1a      	adds	r2, r3, #4
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	659a      	str	r2, [r3, #88]	@ 0x58
 8002144:	e007      	b.n	8002156 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800214e:	f023 0303 	bic.w	r3, r3, #3
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	aaaaaaab 	.word	0xaaaaaaab
 800216c:	080149c8 	.word	0x080149c8

08002170 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002180:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d11f      	bne.n	80021ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d856      	bhi.n	800223e <DMA_CheckFifoParam+0xce>
 8002190:	a201      	add	r2, pc, #4	@ (adr r2, 8002198 <DMA_CheckFifoParam+0x28>)
 8002192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002196:	bf00      	nop
 8002198:	080021a9 	.word	0x080021a9
 800219c:	080021bb 	.word	0x080021bb
 80021a0:	080021a9 	.word	0x080021a9
 80021a4:	0800223f 	.word	0x0800223f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d046      	beq.n	8002242 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b8:	e043      	b.n	8002242 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021c2:	d140      	bne.n	8002246 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c8:	e03d      	b.n	8002246 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021d2:	d121      	bne.n	8002218 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d837      	bhi.n	800224a <DMA_CheckFifoParam+0xda>
 80021da:	a201      	add	r2, pc, #4	@ (adr r2, 80021e0 <DMA_CheckFifoParam+0x70>)
 80021dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e0:	080021f1 	.word	0x080021f1
 80021e4:	080021f7 	.word	0x080021f7
 80021e8:	080021f1 	.word	0x080021f1
 80021ec:	08002209 	.word	0x08002209
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
      break;
 80021f4:	e030      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d025      	beq.n	800224e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002206:	e022      	b.n	800224e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002210:	d11f      	bne.n	8002252 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002216:	e01c      	b.n	8002252 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d903      	bls.n	8002226 <DMA_CheckFifoParam+0xb6>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d003      	beq.n	800222c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002224:	e018      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
      break;
 800222a:	e015      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002230:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00e      	beq.n	8002256 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
      break;
 800223c:	e00b      	b.n	8002256 <DMA_CheckFifoParam+0xe6>
      break;
 800223e:	bf00      	nop
 8002240:	e00a      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      break;
 8002242:	bf00      	nop
 8002244:	e008      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      break;
 8002246:	bf00      	nop
 8002248:	e006      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      break;
 800224a:	bf00      	nop
 800224c:	e004      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      break;
 800224e:	bf00      	nop
 8002250:	e002      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      break;   
 8002252:	bf00      	nop
 8002254:	e000      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      break;
 8002256:	bf00      	nop
    }
  } 
  
  return status; 
 8002258:	7bfb      	ldrb	r3, [r7, #15]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop

08002268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	@ 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	e159      	b.n	8002538 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002284:	2201      	movs	r2, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	429a      	cmp	r2, r3
 800229e:	f040 8148 	bne.w	8002532 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d005      	beq.n	80022ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d130      	bne.n	800231c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022f0:	2201      	movs	r2, #1
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 0201 	and.w	r2, r3, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b03      	cmp	r3, #3
 8002326:	d017      	beq.n	8002358 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d123      	bne.n	80023ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	08da      	lsrs	r2, r3, #3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3208      	adds	r2, #8
 800236c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	220f      	movs	r2, #15
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	08da      	lsrs	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3208      	adds	r2, #8
 80023a6:	69b9      	ldr	r1, [r7, #24]
 80023a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0203 	and.w	r2, r3, #3
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80a2 	beq.w	8002532 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	4b57      	ldr	r3, [pc, #348]	@ (8002550 <HAL_GPIO_Init+0x2e8>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	4a56      	ldr	r2, [pc, #344]	@ (8002550 <HAL_GPIO_Init+0x2e8>)
 80023f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023fe:	4b54      	ldr	r3, [pc, #336]	@ (8002550 <HAL_GPIO_Init+0x2e8>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800240a:	4a52      	ldr	r2, [pc, #328]	@ (8002554 <HAL_GPIO_Init+0x2ec>)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	3302      	adds	r3, #2
 8002412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	220f      	movs	r2, #15
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a49      	ldr	r2, [pc, #292]	@ (8002558 <HAL_GPIO_Init+0x2f0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d019      	beq.n	800246a <HAL_GPIO_Init+0x202>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a48      	ldr	r2, [pc, #288]	@ (800255c <HAL_GPIO_Init+0x2f4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d013      	beq.n	8002466 <HAL_GPIO_Init+0x1fe>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a47      	ldr	r2, [pc, #284]	@ (8002560 <HAL_GPIO_Init+0x2f8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00d      	beq.n	8002462 <HAL_GPIO_Init+0x1fa>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a46      	ldr	r2, [pc, #280]	@ (8002564 <HAL_GPIO_Init+0x2fc>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d007      	beq.n	800245e <HAL_GPIO_Init+0x1f6>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a45      	ldr	r2, [pc, #276]	@ (8002568 <HAL_GPIO_Init+0x300>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d101      	bne.n	800245a <HAL_GPIO_Init+0x1f2>
 8002456:	2304      	movs	r3, #4
 8002458:	e008      	b.n	800246c <HAL_GPIO_Init+0x204>
 800245a:	2307      	movs	r3, #7
 800245c:	e006      	b.n	800246c <HAL_GPIO_Init+0x204>
 800245e:	2303      	movs	r3, #3
 8002460:	e004      	b.n	800246c <HAL_GPIO_Init+0x204>
 8002462:	2302      	movs	r3, #2
 8002464:	e002      	b.n	800246c <HAL_GPIO_Init+0x204>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_GPIO_Init+0x204>
 800246a:	2300      	movs	r3, #0
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	f002 0203 	and.w	r2, r2, #3
 8002472:	0092      	lsls	r2, r2, #2
 8002474:	4093      	lsls	r3, r2
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800247c:	4935      	ldr	r1, [pc, #212]	@ (8002554 <HAL_GPIO_Init+0x2ec>)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	3302      	adds	r3, #2
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248a:	4b38      	ldr	r3, [pc, #224]	@ (800256c <HAL_GPIO_Init+0x304>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ae:	4a2f      	ldr	r2, [pc, #188]	@ (800256c <HAL_GPIO_Init+0x304>)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b4:	4b2d      	ldr	r3, [pc, #180]	@ (800256c <HAL_GPIO_Init+0x304>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d8:	4a24      	ldr	r2, [pc, #144]	@ (800256c <HAL_GPIO_Init+0x304>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024de:	4b23      	ldr	r3, [pc, #140]	@ (800256c <HAL_GPIO_Init+0x304>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002502:	4a1a      	ldr	r2, [pc, #104]	@ (800256c <HAL_GPIO_Init+0x304>)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002508:	4b18      	ldr	r3, [pc, #96]	@ (800256c <HAL_GPIO_Init+0x304>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800252c:	4a0f      	ldr	r2, [pc, #60]	@ (800256c <HAL_GPIO_Init+0x304>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3301      	adds	r3, #1
 8002536:	61fb      	str	r3, [r7, #28]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	2b0f      	cmp	r3, #15
 800253c:	f67f aea2 	bls.w	8002284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3724      	adds	r7, #36	@ 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	40013800 	.word	0x40013800
 8002558:	40020000 	.word	0x40020000
 800255c:	40020400 	.word	0x40020400
 8002560:	40020800 	.word	0x40020800
 8002564:	40020c00 	.word	0x40020c00
 8002568:	40021000 	.word	0x40021000
 800256c:	40013c00 	.word	0x40013c00

08002570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
 800257c:	4613      	mov	r3, r2
 800257e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002580:	787b      	ldrb	r3, [r7, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800258c:	e003      	b.n	8002596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800258e:	887b      	ldrh	r3, [r7, #2]
 8002590:	041a      	lsls	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	619a      	str	r2, [r3, #24]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b085      	sub	sp, #20
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	460b      	mov	r3, r1
 80025ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025b4:	887a      	ldrh	r2, [r7, #2]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4013      	ands	r3, r2
 80025ba:	041a      	lsls	r2, r3, #16
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	43d9      	mvns	r1, r3
 80025c0:	887b      	ldrh	r3, [r7, #2]
 80025c2:	400b      	ands	r3, r1
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	619a      	str	r2, [r3, #24]
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
	...

080025d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e267      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d075      	beq.n	80026e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025f6:	4b88      	ldr	r3, [pc, #544]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d00c      	beq.n	800261c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002602:	4b85      	ldr	r3, [pc, #532]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800260a:	2b08      	cmp	r3, #8
 800260c:	d112      	bne.n	8002634 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800260e:	4b82      	ldr	r3, [pc, #520]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002616:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800261a:	d10b      	bne.n	8002634 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261c:	4b7e      	ldr	r3, [pc, #504]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d05b      	beq.n	80026e0 <HAL_RCC_OscConfig+0x108>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d157      	bne.n	80026e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e242      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800263c:	d106      	bne.n	800264c <HAL_RCC_OscConfig+0x74>
 800263e:	4b76      	ldr	r3, [pc, #472]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a75      	ldr	r2, [pc, #468]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e01d      	b.n	8002688 <HAL_RCC_OscConfig+0xb0>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x98>
 8002656:	4b70      	ldr	r3, [pc, #448]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a6f      	ldr	r2, [pc, #444]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 800265c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	4b6d      	ldr	r3, [pc, #436]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a6c      	ldr	r2, [pc, #432]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	e00b      	b.n	8002688 <HAL_RCC_OscConfig+0xb0>
 8002670:	4b69      	ldr	r3, [pc, #420]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a68      	ldr	r2, [pc, #416]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4b66      	ldr	r3, [pc, #408]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a65      	ldr	r2, [pc, #404]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002682:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d013      	beq.n	80026b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7ff f8ca 	bl	8001828 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002698:	f7ff f8c6 	bl	8001828 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b64      	cmp	r3, #100	@ 0x64
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e207      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0xc0>
 80026b6:	e014      	b.n	80026e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff f8b6 	bl	8001828 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c0:	f7ff f8b2 	bl	8001828 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	@ 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e1f3      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d2:	4b51      	ldr	r3, [pc, #324]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0xe8>
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d063      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00b      	beq.n	8002712 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fa:	4b47      	ldr	r3, [pc, #284]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002702:	2b08      	cmp	r3, #8
 8002704:	d11c      	bne.n	8002740 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002706:	4b44      	ldr	r3, [pc, #272]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d116      	bne.n	8002740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002712:	4b41      	ldr	r3, [pc, #260]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_RCC_OscConfig+0x152>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d001      	beq.n	800272a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e1c7      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272a:	4b3b      	ldr	r3, [pc, #236]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4937      	ldr	r1, [pc, #220]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273e:	e03a      	b.n	80027b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d020      	beq.n	800278a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002748:	4b34      	ldr	r3, [pc, #208]	@ (800281c <HAL_RCC_OscConfig+0x244>)
 800274a:	2201      	movs	r2, #1
 800274c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7ff f86b 	bl	8001828 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002756:	f7ff f867 	bl	8001828 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e1a8      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002768:	4b2b      	ldr	r3, [pc, #172]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002774:	4b28      	ldr	r3, [pc, #160]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4925      	ldr	r1, [pc, #148]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002784:	4313      	orrs	r3, r2
 8002786:	600b      	str	r3, [r1, #0]
 8002788:	e015      	b.n	80027b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278a:	4b24      	ldr	r3, [pc, #144]	@ (800281c <HAL_RCC_OscConfig+0x244>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7ff f84a 	bl	8001828 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002798:	f7ff f846 	bl	8001828 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e187      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d036      	beq.n	8002830 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d016      	beq.n	80027f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ca:	4b15      	ldr	r3, [pc, #84]	@ (8002820 <HAL_RCC_OscConfig+0x248>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7ff f82a 	bl	8001828 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d8:	f7ff f826 	bl	8001828 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e167      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 80027ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0x200>
 80027f6:	e01b      	b.n	8002830 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f8:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <HAL_RCC_OscConfig+0x248>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fe:	f7ff f813 	bl	8001828 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002804:	e00e      	b.n	8002824 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002806:	f7ff f80f 	bl	8001828 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d907      	bls.n	8002824 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e150      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
 8002818:	40023800 	.word	0x40023800
 800281c:	42470000 	.word	0x42470000
 8002820:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	4b88      	ldr	r3, [pc, #544]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ea      	bne.n	8002806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8097 	beq.w	800296c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002842:	4b81      	ldr	r3, [pc, #516]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10f      	bne.n	800286e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	4b7d      	ldr	r3, [pc, #500]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	4a7c      	ldr	r2, [pc, #496]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800285c:	6413      	str	r3, [r2, #64]	@ 0x40
 800285e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800286a:	2301      	movs	r3, #1
 800286c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286e:	4b77      	ldr	r3, [pc, #476]	@ (8002a4c <HAL_RCC_OscConfig+0x474>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d118      	bne.n	80028ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287a:	4b74      	ldr	r3, [pc, #464]	@ (8002a4c <HAL_RCC_OscConfig+0x474>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a73      	ldr	r2, [pc, #460]	@ (8002a4c <HAL_RCC_OscConfig+0x474>)
 8002880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002886:	f7fe ffcf 	bl	8001828 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288e:	f7fe ffcb 	bl	8001828 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e10c      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a4c <HAL_RCC_OscConfig+0x474>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d106      	bne.n	80028c2 <HAL_RCC_OscConfig+0x2ea>
 80028b4:	4b64      	ldr	r3, [pc, #400]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b8:	4a63      	ldr	r2, [pc, #396]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c0:	e01c      	b.n	80028fc <HAL_RCC_OscConfig+0x324>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b05      	cmp	r3, #5
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x30c>
 80028ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ce:	4a5e      	ldr	r2, [pc, #376]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028da:	4a5b      	ldr	r2, [pc, #364]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0x324>
 80028e4:	4b58      	ldr	r3, [pc, #352]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e8:	4a57      	ldr	r2, [pc, #348]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f0:	4b55      	ldr	r3, [pc, #340]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f4:	4a54      	ldr	r2, [pc, #336]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028f6:	f023 0304 	bic.w	r3, r3, #4
 80028fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d015      	beq.n	8002930 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002904:	f7fe ff90 	bl	8001828 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290a:	e00a      	b.n	8002922 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290c:	f7fe ff8c 	bl	8001828 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e0cb      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002922:	4b49      	ldr	r3, [pc, #292]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0ee      	beq.n	800290c <HAL_RCC_OscConfig+0x334>
 800292e:	e014      	b.n	800295a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002930:	f7fe ff7a 	bl	8001828 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002938:	f7fe ff76 	bl	8001828 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e0b5      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1ee      	bne.n	8002938 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800295a:	7dfb      	ldrb	r3, [r7, #23]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d105      	bne.n	800296c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002960:	4b39      	ldr	r3, [pc, #228]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002964:	4a38      	ldr	r2, [pc, #224]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800296a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80a1 	beq.w	8002ab8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002976:	4b34      	ldr	r3, [pc, #208]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b08      	cmp	r3, #8
 8002980:	d05c      	beq.n	8002a3c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d141      	bne.n	8002a0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298a:	4b31      	ldr	r3, [pc, #196]	@ (8002a50 <HAL_RCC_OscConfig+0x478>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7fe ff4a 	bl	8001828 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002998:	f7fe ff46 	bl	8001828 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e087      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	4b27      	ldr	r3, [pc, #156]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69da      	ldr	r2, [r3, #28]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	019b      	lsls	r3, r3, #6
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	3b01      	subs	r3, #1
 80029d0:	041b      	lsls	r3, r3, #16
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d8:	061b      	lsls	r3, r3, #24
 80029da:	491b      	ldr	r1, [pc, #108]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a50 <HAL_RCC_OscConfig+0x478>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e6:	f7fe ff1f 	bl	8001828 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ee:	f7fe ff1b 	bl	8001828 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e05c      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a00:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x416>
 8002a0c:	e054      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0e:	4b10      	ldr	r3, [pc, #64]	@ (8002a50 <HAL_RCC_OscConfig+0x478>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe ff08 	bl	8001828 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe ff04 	bl	8001828 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e045      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2e:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x444>
 8002a3a:	e03d      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e038      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <HAL_RCC_OscConfig+0x4ec>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d028      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d121      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d11a      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a84:	4013      	ands	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d111      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9a:	085b      	lsrs	r3, r3, #1
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d107      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800

08002ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0cc      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002adc:	4b68      	ldr	r3, [pc, #416]	@ (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d90c      	bls.n	8002b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b65      	ldr	r3, [pc, #404]	@ (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b63      	ldr	r3, [pc, #396]	@ (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0b8      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d020      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b1c:	4b59      	ldr	r3, [pc, #356]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4a58      	ldr	r2, [pc, #352]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b34:	4b53      	ldr	r3, [pc, #332]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a52      	ldr	r2, [pc, #328]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b40:	4b50      	ldr	r3, [pc, #320]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	494d      	ldr	r1, [pc, #308]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d044      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d107      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b47      	ldr	r3, [pc, #284]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d119      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e07f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b86:	4b3f      	ldr	r3, [pc, #252]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e06f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b96:	4b3b      	ldr	r3, [pc, #236]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e067      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba6:	4b37      	ldr	r3, [pc, #220]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f023 0203 	bic.w	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4934      	ldr	r1, [pc, #208]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb8:	f7fe fe36 	bl	8001828 <HAL_GetTick>
 8002bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc0:	f7fe fe32 	bl	8001828 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e04f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 020c 	and.w	r2, r3, #12
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d1eb      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002be8:	4b25      	ldr	r3, [pc, #148]	@ (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d20c      	bcs.n	8002c10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b22      	ldr	r3, [pc, #136]	@ (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b20      	ldr	r3, [pc, #128]	@ (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e032      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c1c:	4b19      	ldr	r3, [pc, #100]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4916      	ldr	r1, [pc, #88]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d009      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c3a:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	490e      	ldr	r1, [pc, #56]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c4e:	f000 f821 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002c52:	4602      	mov	r2, r0
 8002c54:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	490a      	ldr	r1, [pc, #40]	@ (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002c60:	5ccb      	ldrb	r3, [r1, r3]
 8002c62:	fa22 f303 	lsr.w	r3, r2, r3
 8002c66:	4a09      	ldr	r2, [pc, #36]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c6a:	4b09      	ldr	r3, [pc, #36]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe fd96 	bl	80017a0 <HAL_InitTick>

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023c00 	.word	0x40023c00
 8002c84:	40023800 	.word	0x40023800
 8002c88:	080149b0 	.word	0x080149b0
 8002c8c:	20000004 	.word	0x20000004
 8002c90:	20000008 	.word	0x20000008

08002c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c98:	b090      	sub	sp, #64	@ 0x40
 8002c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cac:	4b59      	ldr	r3, [pc, #356]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	f200 80a1 	bhi.w	8002e00 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d003      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0x3a>
 8002cc6:	e09b      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc8:	4b53      	ldr	r3, [pc, #332]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ccc:	e09b      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cce:	4b53      	ldr	r3, [pc, #332]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cd2:	e098      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd4:	4b4f      	ldr	r3, [pc, #316]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cdc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cde:	4b4d      	ldr	r3, [pc, #308]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d028      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cea:	4b4a      	ldr	r3, [pc, #296]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	099b      	lsrs	r3, r3, #6
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	623b      	str	r3, [r7, #32]
 8002cf4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4b47      	ldr	r3, [pc, #284]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d00:	fb03 f201 	mul.w	r2, r3, r1
 8002d04:	2300      	movs	r3, #0
 8002d06:	fb00 f303 	mul.w	r3, r0, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4a43      	ldr	r2, [pc, #268]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d0e:	fba0 1202 	umull	r1, r2, r0, r2
 8002d12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d14:	460a      	mov	r2, r1
 8002d16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d1a:	4413      	add	r3, r2
 8002d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d20:	2200      	movs	r2, #0
 8002d22:	61bb      	str	r3, [r7, #24]
 8002d24:	61fa      	str	r2, [r7, #28]
 8002d26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d2e:	f7fd fb0f 	bl	8000350 <__aeabi_uldivmod>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4613      	mov	r3, r2
 8002d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d3a:	e053      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3c:	4b35      	ldr	r3, [pc, #212]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	099b      	lsrs	r3, r3, #6
 8002d42:	2200      	movs	r2, #0
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	617a      	str	r2, [r7, #20]
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d4e:	f04f 0b00 	mov.w	fp, #0
 8002d52:	4652      	mov	r2, sl
 8002d54:	465b      	mov	r3, fp
 8002d56:	f04f 0000 	mov.w	r0, #0
 8002d5a:	f04f 0100 	mov.w	r1, #0
 8002d5e:	0159      	lsls	r1, r3, #5
 8002d60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d64:	0150      	lsls	r0, r2, #5
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	ebb2 080a 	subs.w	r8, r2, sl
 8002d6e:	eb63 090b 	sbc.w	r9, r3, fp
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d86:	ebb2 0408 	subs.w	r4, r2, r8
 8002d8a:	eb63 0509 	sbc.w	r5, r3, r9
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	00eb      	lsls	r3, r5, #3
 8002d98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d9c:	00e2      	lsls	r2, r4, #3
 8002d9e:	4614      	mov	r4, r2
 8002da0:	461d      	mov	r5, r3
 8002da2:	eb14 030a 	adds.w	r3, r4, sl
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	eb45 030b 	adc.w	r3, r5, fp
 8002dac:	607b      	str	r3, [r7, #4]
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dba:	4629      	mov	r1, r5
 8002dbc:	028b      	lsls	r3, r1, #10
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	028a      	lsls	r2, r1, #10
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	60fa      	str	r2, [r7, #12]
 8002dd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dd8:	f7fd faba 	bl	8000350 <__aeabi_uldivmod>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4613      	mov	r3, r2
 8002de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	0c1b      	lsrs	r3, r3, #16
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	3301      	adds	r3, #1
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002df4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dfe:	e002      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e00:	4b05      	ldr	r3, [pc, #20]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3740      	adds	r7, #64	@ 0x40
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800
 8002e18:	00f42400 	.word	0x00f42400
 8002e1c:	017d7840 	.word	0x017d7840

08002e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e24:	4b03      	ldr	r3, [pc, #12]	@ (8002e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000004 	.word	0x20000004

08002e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e3c:	f7ff fff0 	bl	8002e20 <HAL_RCC_GetHCLKFreq>
 8002e40:	4602      	mov	r2, r0
 8002e42:	4b05      	ldr	r3, [pc, #20]	@ (8002e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	0a9b      	lsrs	r3, r3, #10
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	4903      	ldr	r1, [pc, #12]	@ (8002e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e4e:	5ccb      	ldrb	r3, [r1, r3]
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	080149c0 	.word	0x080149c0

08002e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e64:	f7ff ffdc 	bl	8002e20 <HAL_RCC_GetHCLKFreq>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	0b5b      	lsrs	r3, r3, #13
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	4903      	ldr	r1, [pc, #12]	@ (8002e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e76:	5ccb      	ldrb	r3, [r1, r3]
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40023800 	.word	0x40023800
 8002e84:	080149c0 	.word	0x080149c0

08002e88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e042      	b.n	8002f20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fe f9a6 	bl	8001200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2224      	movs	r2, #36	@ 0x24
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fff5 	bl	8003ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ef0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08c      	sub	sp, #48	@ 0x30
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	4613      	mov	r3, r2
 8002f34:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d162      	bne.n	8003008 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <HAL_UART_Transmit_DMA+0x26>
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e05b      	b.n	800300a <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	88fa      	ldrh	r2, [r7, #6]
 8002f5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	88fa      	ldrh	r2, [r7, #6]
 8002f62:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2221      	movs	r2, #33	@ 0x21
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f76:	4a27      	ldr	r2, [pc, #156]	@ (8003014 <HAL_UART_Transmit_DMA+0xec>)
 8002f78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7e:	4a26      	ldr	r2, [pc, #152]	@ (8003018 <HAL_UART_Transmit_DMA+0xf0>)
 8002f80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f86:	4a25      	ldr	r2, [pc, #148]	@ (800301c <HAL_UART_Transmit_DMA+0xf4>)
 8002f88:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8e:	2200      	movs	r2, #0
 8002f90:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8002f92:	f107 0308 	add.w	r3, r7, #8
 8002f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9e:	6819      	ldr	r1, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	f7fe fe09 	bl	8001bc0 <HAL_DMA_Start_IT>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2210      	movs	r2, #16
 8002fb8:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e021      	b.n	800300a <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002fce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3314      	adds	r3, #20
 8002fd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	e853 3f00 	ldrex	r3, [r3]
 8002fde:	617b      	str	r3, [r7, #20]
   return(result);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3314      	adds	r3, #20
 8002fee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ff0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff4:	6a39      	ldr	r1, [r7, #32]
 8002ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff8:	e841 2300 	strex	r3, r2, [r1]
 8002ffc:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1e5      	bne.n	8002fd0 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	e000      	b.n	800300a <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8003008:	2302      	movs	r3, #2
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	3730      	adds	r7, #48	@ 0x30
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	08003739 	.word	0x08003739
 8003018:	080037d3 	.word	0x080037d3
 800301c:	08003957 	.word	0x08003957

08003020 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	4613      	mov	r3, r2
 800302c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b20      	cmp	r3, #32
 8003038:	d112      	bne.n	8003060 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_UART_Receive_DMA+0x26>
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e00b      	b.n	8003062 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	461a      	mov	r2, r3
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 fcc8 	bl	80039ec <UART_Start_Receive_DMA>
 800305c:	4603      	mov	r3, r0
 800305e:	e000      	b.n	8003062 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003060:	2302      	movs	r3, #2
  }
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b090      	sub	sp, #64	@ 0x40
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003072:	2300      	movs	r3, #0
 8003074:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003080:	2b80      	cmp	r3, #128	@ 0x80
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b21      	cmp	r3, #33	@ 0x21
 8003096:	d128      	bne.n	80030ea <HAL_UART_DMAStop+0x80>
 8003098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800309a:	2b00      	cmp	r3, #0
 800309c:	d025      	beq.n	80030ea <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3314      	adds	r3, #20
 80030a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	e853 3f00 	ldrex	r3, [r3]
 80030ac:	623b      	str	r3, [r7, #32]
   return(result);
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3314      	adds	r3, #20
 80030bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030be:	633a      	str	r2, [r7, #48]	@ 0x30
 80030c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030c6:	e841 2300 	strex	r3, r2, [r1]
 80030ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1e5      	bne.n	800309e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d004      	beq.n	80030e4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe fdc6 	bl	8001c70 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fd27 	bl	8003b38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f4:	2b40      	cmp	r3, #64	@ 0x40
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b22      	cmp	r3, #34	@ 0x22
 800310a:	d128      	bne.n	800315e <HAL_UART_DMAStop+0xf4>
 800310c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800310e:	2b00      	cmp	r3, #0
 8003110:	d025      	beq.n	800315e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3314      	adds	r3, #20
 8003118:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	e853 3f00 	ldrex	r3, [r3]
 8003120:	60fb      	str	r3, [r7, #12]
   return(result);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003128:	637b      	str	r3, [r7, #52]	@ 0x34
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3314      	adds	r3, #20
 8003130:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003132:	61fa      	str	r2, [r7, #28]
 8003134:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003136:	69b9      	ldr	r1, [r7, #24]
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	e841 2300 	strex	r3, r2, [r1]
 800313e:	617b      	str	r3, [r7, #20]
   return(result);
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1e5      	bne.n	8003112 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d004      	beq.n	8003158 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe fd8c 	bl	8001c70 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fd15 	bl	8003b88 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3740      	adds	r7, #64	@ 0x40
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b0ba      	sub	sp, #232	@ 0xe8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800318e:	2300      	movs	r3, #0
 8003190:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003194:	2300      	movs	r3, #0
 8003196:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800319a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80031a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10f      	bne.n	80031ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <HAL_UART_IRQHandler+0x66>
 80031ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fdba 	bl	8003d40 <UART_Receive_IT>
      return;
 80031cc:	e273      	b.n	80036b6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 80de 	beq.w	8003394 <HAL_UART_IRQHandler+0x22c>
 80031d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d106      	bne.n	80031f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80d1 	beq.w	8003394 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00b      	beq.n	8003216 <HAL_UART_IRQHandler+0xae>
 80031fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d005      	beq.n	8003216 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320e:	f043 0201 	orr.w	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00b      	beq.n	800323a <HAL_UART_IRQHandler+0xd2>
 8003222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003232:	f043 0202 	orr.w	r2, r3, #2
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800323a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00b      	beq.n	800325e <HAL_UART_IRQHandler+0xf6>
 8003246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003256:	f043 0204 	orr.w	r2, r3, #4
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800325e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d011      	beq.n	800328e <HAL_UART_IRQHandler+0x126>
 800326a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	d105      	bne.n	8003282 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003286:	f043 0208 	orr.w	r2, r3, #8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 820a 	beq.w	80036ac <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_UART_IRQHandler+0x14e>
 80032a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fd45 	bl	8003d40 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c0:	2b40      	cmp	r3, #64	@ 0x40
 80032c2:	bf0c      	ite	eq
 80032c4:	2301      	moveq	r3, #1
 80032c6:	2300      	movne	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d103      	bne.n	80032e2 <HAL_UART_IRQHandler+0x17a>
 80032da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d04f      	beq.n	8003382 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fc50 	bl	8003b88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f2:	2b40      	cmp	r3, #64	@ 0x40
 80032f4:	d141      	bne.n	800337a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	3314      	adds	r3, #20
 80032fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003304:	e853 3f00 	ldrex	r3, [r3]
 8003308:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800330c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003310:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003314:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3314      	adds	r3, #20
 800331e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003322:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003326:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800332e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003332:	e841 2300 	strex	r3, r2, [r1]
 8003336:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800333a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1d9      	bne.n	80032f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d013      	beq.n	8003372 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800334e:	4a8a      	ldr	r2, [pc, #552]	@ (8003578 <HAL_UART_IRQHandler+0x410>)
 8003350:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe fcfa 	bl	8001d50 <HAL_DMA_Abort_IT>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d016      	beq.n	8003390 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800336c:	4610      	mov	r0, r2
 800336e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003370:	e00e      	b.n	8003390 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f9ca 	bl	800370c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003378:	e00a      	b.n	8003390 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f9c6 	bl	800370c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003380:	e006      	b.n	8003390 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f9c2 	bl	800370c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800338e:	e18d      	b.n	80036ac <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003390:	bf00      	nop
    return;
 8003392:	e18b      	b.n	80036ac <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003398:	2b01      	cmp	r3, #1
 800339a:	f040 8167 	bne.w	800366c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800339e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8160 	beq.w	800366c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80033ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 8159 	beq.w	800366c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033da:	2b40      	cmp	r3, #64	@ 0x40
 80033dc:	f040 80ce 	bne.w	800357c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80a9 	beq.w	8003548 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033fe:	429a      	cmp	r2, r3
 8003400:	f080 80a2 	bcs.w	8003548 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800340a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003416:	f000 8088 	beq.w	800352a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	330c      	adds	r3, #12
 8003420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003430:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003438:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	330c      	adds	r3, #12
 8003442:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003446:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800344a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003452:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003456:	e841 2300 	strex	r3, r2, [r1]
 800345a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800345e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1d9      	bne.n	800341a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3314      	adds	r3, #20
 800346c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003470:	e853 3f00 	ldrex	r3, [r3]
 8003474:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003476:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3314      	adds	r3, #20
 8003486:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800348a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800348e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003492:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800349c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e1      	bne.n	8003466 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3314      	adds	r3, #20
 80034a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80034b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3314      	adds	r3, #20
 80034c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80034c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80034c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80034cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80034ce:	e841 2300 	strex	r3, r2, [r1]
 80034d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80034d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1e3      	bne.n	80034a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	330c      	adds	r3, #12
 80034ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80034f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034fa:	f023 0310 	bic.w	r3, r3, #16
 80034fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	330c      	adds	r3, #12
 8003508:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800350c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800350e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003512:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800351a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e3      	bne.n	80034e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003524:	4618      	mov	r0, r3
 8003526:	f7fe fba3 	bl	8001c70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2202      	movs	r2, #2
 800352e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003538:	b29b      	uxth	r3, r3
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	b29b      	uxth	r3, r3
 800353e:	4619      	mov	r1, r3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f8ed 	bl	8003720 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003546:	e0b3      	b.n	80036b0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800354c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003550:	429a      	cmp	r2, r3
 8003552:	f040 80ad 	bne.w	80036b0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003560:	f040 80a6 	bne.w	80036b0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800356e:	4619      	mov	r1, r3
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f8d5 	bl	8003720 <HAL_UARTEx_RxEventCallback>
      return;
 8003576:	e09b      	b.n	80036b0 <HAL_UART_IRQHandler+0x548>
 8003578:	08003c4f 	.word	0x08003c4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003584:	b29b      	uxth	r3, r3
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 808e 	beq.w	80036b4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8089 	beq.w	80036b4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	330c      	adds	r3, #12
 80035a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	330c      	adds	r3, #12
 80035c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80035c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80035c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e3      	bne.n	80035a2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3314      	adds	r3, #20
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	623b      	str	r3, [r7, #32]
   return(result);
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3314      	adds	r3, #20
 80035fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8003600:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800360c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e3      	bne.n	80035da <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	330c      	adds	r3, #12
 8003626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	e853 3f00 	ldrex	r3, [r3]
 800362e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0310 	bic.w	r3, r3, #16
 8003636:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003644:	61fa      	str	r2, [r7, #28]
 8003646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	69b9      	ldr	r1, [r7, #24]
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	617b      	str	r3, [r7, #20]
   return(result);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e3      	bne.n	8003620 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800365e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003662:	4619      	mov	r1, r3
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f85b 	bl	8003720 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800366a:	e023      	b.n	80036b4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800366c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003674:	2b00      	cmp	r3, #0
 8003676:	d009      	beq.n	800368c <HAL_UART_IRQHandler+0x524>
 8003678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800367c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 faf3 	bl	8003c70 <UART_Transmit_IT>
    return;
 800368a:	e014      	b.n	80036b6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800368c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00e      	beq.n	80036b6 <HAL_UART_IRQHandler+0x54e>
 8003698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800369c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fb33 	bl	8003d10 <UART_EndTransmit_IT>
    return;
 80036aa:	e004      	b.n	80036b6 <HAL_UART_IRQHandler+0x54e>
    return;
 80036ac:	bf00      	nop
 80036ae:	e002      	b.n	80036b6 <HAL_UART_IRQHandler+0x54e>
      return;
 80036b0:	bf00      	nop
 80036b2:	e000      	b.n	80036b6 <HAL_UART_IRQHandler+0x54e>
      return;
 80036b4:	bf00      	nop
  }
}
 80036b6:	37e8      	adds	r7, #232	@ 0xe8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b090      	sub	sp, #64	@ 0x40
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003744:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d137      	bne.n	80037c4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003756:	2200      	movs	r2, #0
 8003758:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800375a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3314      	adds	r3, #20
 8003760:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	623b      	str	r3, [r7, #32]
   return(result);
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003770:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3314      	adds	r3, #20
 8003778:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800377a:	633a      	str	r2, [r7, #48]	@ 0x30
 800377c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003782:	e841 2300 	strex	r3, r2, [r1]
 8003786:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1e5      	bne.n	800375a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800378e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	330c      	adds	r3, #12
 8003794:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	e853 3f00 	ldrex	r3, [r3]
 800379c:	60fb      	str	r3, [r7, #12]
   return(result);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80037a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	330c      	adds	r3, #12
 80037ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037ae:	61fa      	str	r2, [r7, #28]
 80037b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b2:	69b9      	ldr	r1, [r7, #24]
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	e841 2300 	strex	r3, r2, [r1]
 80037ba:	617b      	str	r3, [r7, #20]
   return(result);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1e5      	bne.n	800378e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80037c2:	e002      	b.n	80037ca <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80037c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80037c6:	f7ff ff79 	bl	80036bc <HAL_UART_TxCpltCallback>
}
 80037ca:	bf00      	nop
 80037cc:	3740      	adds	r7, #64	@ 0x40
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f7ff ff75 	bl	80036d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037e6:	bf00      	nop
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b09c      	sub	sp, #112	@ 0x70
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d172      	bne.n	80038f0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800380a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800380c:	2200      	movs	r2, #0
 800380e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003810:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	330c      	adds	r3, #12
 8003816:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003822:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003826:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003828:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	330c      	adds	r3, #12
 800382e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003830:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003832:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003834:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003836:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003838:	e841 2300 	strex	r3, r2, [r1]
 800383c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800383e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1e5      	bne.n	8003810 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003844:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3314      	adds	r3, #20
 800384a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800384e:	e853 3f00 	ldrex	r3, [r3]
 8003852:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003856:	f023 0301 	bic.w	r3, r3, #1
 800385a:	667b      	str	r3, [r7, #100]	@ 0x64
 800385c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3314      	adds	r3, #20
 8003862:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003864:	647a      	str	r2, [r7, #68]	@ 0x44
 8003866:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003868:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800386a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800386c:	e841 2300 	strex	r3, r2, [r1]
 8003870:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e5      	bne.n	8003844 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3314      	adds	r3, #20
 800387e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003882:	e853 3f00 	ldrex	r3, [r3]
 8003886:	623b      	str	r3, [r7, #32]
   return(result);
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800388e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3314      	adds	r3, #20
 8003896:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003898:	633a      	str	r2, [r7, #48]	@ 0x30
 800389a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800389e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038a0:	e841 2300 	strex	r3, r2, [r1]
 80038a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e5      	bne.n	8003878 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d119      	bne.n	80038f0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	330c      	adds	r3, #12
 80038c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	e853 3f00 	ldrex	r3, [r3]
 80038ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0310 	bic.w	r3, r3, #16
 80038d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330c      	adds	r3, #12
 80038da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80038dc:	61fa      	str	r2, [r7, #28]
 80038de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e0:	69b9      	ldr	r1, [r7, #24]
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	e841 2300 	strex	r3, r2, [r1]
 80038e8:	617b      	str	r3, [r7, #20]
   return(result);
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1e5      	bne.n	80038bc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038f2:	2200      	movs	r2, #0
 80038f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d106      	bne.n	800390c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003900:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003902:	4619      	mov	r1, r3
 8003904:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003906:	f7ff ff0b 	bl	8003720 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800390a:	e002      	b.n	8003912 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800390c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800390e:	f7ff fee9 	bl	80036e4 <HAL_UART_RxCpltCallback>
}
 8003912:	bf00      	nop
 8003914:	3770      	adds	r7, #112	@ 0x70
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003926:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003932:	2b01      	cmp	r3, #1
 8003934:	d108      	bne.n	8003948 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800393a:	085b      	lsrs	r3, r3, #1
 800393c:	b29b      	uxth	r3, r3
 800393e:	4619      	mov	r1, r3
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7ff feed 	bl	8003720 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003946:	e002      	b.n	800394e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f7ff fed5 	bl	80036f8 <HAL_UART_RxHalfCpltCallback>
}
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003966:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003972:	2b80      	cmp	r3, #128	@ 0x80
 8003974:	bf0c      	ite	eq
 8003976:	2301      	moveq	r3, #1
 8003978:	2300      	movne	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b21      	cmp	r3, #33	@ 0x21
 8003988:	d108      	bne.n	800399c <UART_DMAError+0x46>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2200      	movs	r2, #0
 8003994:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003996:	68b8      	ldr	r0, [r7, #8]
 8003998:	f000 f8ce 	bl	8003b38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a6:	2b40      	cmp	r3, #64	@ 0x40
 80039a8:	bf0c      	ite	eq
 80039aa:	2301      	moveq	r3, #1
 80039ac:	2300      	movne	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b22      	cmp	r3, #34	@ 0x22
 80039bc:	d108      	bne.n	80039d0 <UART_DMAError+0x7a>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2200      	movs	r2, #0
 80039c8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80039ca:	68b8      	ldr	r0, [r7, #8]
 80039cc:	f000 f8dc 	bl	8003b88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d4:	f043 0210 	orr.w	r2, r3, #16
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039dc:	68b8      	ldr	r0, [r7, #8]
 80039de:	f7ff fe95 	bl	800370c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039e2:	bf00      	nop
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b098      	sub	sp, #96	@ 0x60
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	4613      	mov	r3, r2
 80039f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	88fa      	ldrh	r2, [r7, #6]
 8003a04:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2222      	movs	r2, #34	@ 0x22
 8003a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a18:	4a44      	ldr	r2, [pc, #272]	@ (8003b2c <UART_Start_Receive_DMA+0x140>)
 8003a1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a20:	4a43      	ldr	r2, [pc, #268]	@ (8003b30 <UART_Start_Receive_DMA+0x144>)
 8003a22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a28:	4a42      	ldr	r2, [pc, #264]	@ (8003b34 <UART_Start_Receive_DMA+0x148>)
 8003a2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a30:	2200      	movs	r2, #0
 8003a32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003a34:	f107 0308 	add.w	r3, r7, #8
 8003a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3304      	adds	r3, #4
 8003a44:	4619      	mov	r1, r3
 8003a46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	f7fe f8b8 	bl	8001bc0 <HAL_DMA_Start_IT>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2210      	movs	r2, #16
 8003a5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e05d      	b.n	8003b24 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003a68:	2300      	movs	r3, #0
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d019      	beq.n	8003aba <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	330c      	adds	r3, #12
 8003a8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	330c      	adds	r3, #12
 8003aa4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003aa6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003aac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e5      	bne.n	8003a86 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3314      	adds	r3, #20
 8003ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3314      	adds	r3, #20
 8003ad8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ada:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003adc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003ae0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ae2:	e841 2300 	strex	r3, r2, [r1]
 8003ae6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1e5      	bne.n	8003aba <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3314      	adds	r3, #20
 8003af4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	e853 3f00 	ldrex	r3, [r3]
 8003afc:	617b      	str	r3, [r7, #20]
   return(result);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b04:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3314      	adds	r3, #20
 8003b0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003b0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	6a39      	ldr	r1, [r7, #32]
 8003b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e5      	bne.n	8003aee <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3760      	adds	r7, #96	@ 0x60
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	080037ef 	.word	0x080037ef
 8003b30:	0800391b 	.word	0x0800391b
 8003b34:	08003957 	.word	0x08003957

08003b38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	@ 0x24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003b56:	61fb      	str	r3, [r7, #28]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	61ba      	str	r2, [r7, #24]
 8003b62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	6979      	ldr	r1, [r7, #20]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e5      	bne.n	8003b40 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003b7c:	bf00      	nop
 8003b7e:	3724      	adds	r7, #36	@ 0x24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b095      	sub	sp, #84	@ 0x54
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	330c      	adds	r3, #12
 8003b96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b9a:	e853 3f00 	ldrex	r3, [r3]
 8003b9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	330c      	adds	r3, #12
 8003bae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bb0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bb8:	e841 2300 	strex	r3, r2, [r1]
 8003bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e5      	bne.n	8003b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3314      	adds	r3, #20
 8003bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3314      	adds	r3, #20
 8003be2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003be4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e5      	bne.n	8003bc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d119      	bne.n	8003c34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	e853 3f00 	ldrex	r3, [r3]
 8003c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f023 0310 	bic.w	r3, r3, #16
 8003c16:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c20:	61ba      	str	r2, [r7, #24]
 8003c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c24:	6979      	ldr	r1, [r7, #20]
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	e841 2300 	strex	r3, r2, [r1]
 8003c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e5      	bne.n	8003c00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c42:	bf00      	nop
 8003c44:	3754      	adds	r7, #84	@ 0x54
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f7ff fd52 	bl	800370c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b21      	cmp	r3, #33	@ 0x21
 8003c82:	d13e      	bne.n	8003d02 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c8c:	d114      	bne.n	8003cb8 <UART_Transmit_IT+0x48>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d110      	bne.n	8003cb8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003caa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	1c9a      	adds	r2, r3, #2
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	621a      	str	r2, [r3, #32]
 8003cb6:	e008      	b.n	8003cca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	1c59      	adds	r1, r3, #1
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6211      	str	r1, [r2, #32]
 8003cc2:	781a      	ldrb	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10f      	bne.n	8003cfe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cfc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e000      	b.n	8003d04 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d02:	2302      	movs	r3, #2
  }
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d26:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff fcc3 	bl	80036bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08c      	sub	sp, #48	@ 0x30
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b22      	cmp	r3, #34	@ 0x22
 8003d5a:	f040 80aa 	bne.w	8003eb2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d66:	d115      	bne.n	8003d94 <UART_Receive_IT+0x54>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d111      	bne.n	8003d94 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d74:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8c:	1c9a      	adds	r2, r3, #2
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d92:	e024      	b.n	8003dde <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003da2:	d007      	beq.n	8003db4 <UART_Receive_IT+0x74>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <UART_Receive_IT+0x82>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d106      	bne.n	8003dc2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dbe:	701a      	strb	r2, [r3, #0]
 8003dc0:	e008      	b.n	8003dd4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	4619      	mov	r1, r3
 8003dec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d15d      	bne.n	8003eae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0220 	bic.w	r2, r2, #32
 8003e00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695a      	ldr	r2, [r3, #20]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0201 	bic.w	r2, r2, #1
 8003e20:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d135      	bne.n	8003ea4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	330c      	adds	r3, #12
 8003e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f023 0310 	bic.w	r3, r3, #16
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	330c      	adds	r3, #12
 8003e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e5e:	623a      	str	r2, [r7, #32]
 8003e60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	69f9      	ldr	r1, [r7, #28]
 8003e64:	6a3a      	ldr	r2, [r7, #32]
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e5      	bne.n	8003e3e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d10a      	bne.n	8003e96 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff fc3f 	bl	8003720 <HAL_UARTEx_RxEventCallback>
 8003ea2:	e002      	b.n	8003eaa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff fc1d 	bl	80036e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e002      	b.n	8003eb4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e000      	b.n	8003eb4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003eb2:	2302      	movs	r3, #2
  }
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3730      	adds	r7, #48	@ 0x30
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec0:	b0c0      	sub	sp, #256	@ 0x100
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed8:	68d9      	ldr	r1, [r3, #12]
 8003eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	ea40 0301 	orr.w	r3, r0, r1
 8003ee4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f14:	f021 010c 	bic.w	r1, r1, #12
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f22:	430b      	orrs	r3, r1
 8003f24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f36:	6999      	ldr	r1, [r3, #24]
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	ea40 0301 	orr.w	r3, r0, r1
 8003f42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4b8f      	ldr	r3, [pc, #572]	@ (8004188 <UART_SetConfig+0x2cc>)
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d005      	beq.n	8003f5c <UART_SetConfig+0xa0>
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	4b8d      	ldr	r3, [pc, #564]	@ (800418c <UART_SetConfig+0x2d0>)
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d104      	bne.n	8003f66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f5c:	f7fe ff80 	bl	8002e60 <HAL_RCC_GetPCLK2Freq>
 8003f60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f64:	e003      	b.n	8003f6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f66:	f7fe ff67 	bl	8002e38 <HAL_RCC_GetPCLK1Freq>
 8003f6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f78:	f040 810c 	bne.w	8004194 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f80:	2200      	movs	r2, #0
 8003f82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f8e:	4622      	mov	r2, r4
 8003f90:	462b      	mov	r3, r5
 8003f92:	1891      	adds	r1, r2, r2
 8003f94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f96:	415b      	adcs	r3, r3
 8003f98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	eb12 0801 	adds.w	r8, r2, r1
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	eb43 0901 	adc.w	r9, r3, r1
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fbe:	4690      	mov	r8, r2
 8003fc0:	4699      	mov	r9, r3
 8003fc2:	4623      	mov	r3, r4
 8003fc4:	eb18 0303 	adds.w	r3, r8, r3
 8003fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fcc:	462b      	mov	r3, r5
 8003fce:	eb49 0303 	adc.w	r3, r9, r3
 8003fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fe2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003fe6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fea:	460b      	mov	r3, r1
 8003fec:	18db      	adds	r3, r3, r3
 8003fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	eb42 0303 	adc.w	r3, r2, r3
 8003ff6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ff8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ffc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004000:	f7fc f9a6 	bl	8000350 <__aeabi_uldivmod>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4b61      	ldr	r3, [pc, #388]	@ (8004190 <UART_SetConfig+0x2d4>)
 800400a:	fba3 2302 	umull	r2, r3, r3, r2
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	011c      	lsls	r4, r3, #4
 8004012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004016:	2200      	movs	r2, #0
 8004018:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800401c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004020:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004024:	4642      	mov	r2, r8
 8004026:	464b      	mov	r3, r9
 8004028:	1891      	adds	r1, r2, r2
 800402a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800402c:	415b      	adcs	r3, r3
 800402e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004030:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004034:	4641      	mov	r1, r8
 8004036:	eb12 0a01 	adds.w	sl, r2, r1
 800403a:	4649      	mov	r1, r9
 800403c:	eb43 0b01 	adc.w	fp, r3, r1
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800404c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004050:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004054:	4692      	mov	sl, r2
 8004056:	469b      	mov	fp, r3
 8004058:	4643      	mov	r3, r8
 800405a:	eb1a 0303 	adds.w	r3, sl, r3
 800405e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004062:	464b      	mov	r3, r9
 8004064:	eb4b 0303 	adc.w	r3, fp, r3
 8004068:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004078:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800407c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004080:	460b      	mov	r3, r1
 8004082:	18db      	adds	r3, r3, r3
 8004084:	643b      	str	r3, [r7, #64]	@ 0x40
 8004086:	4613      	mov	r3, r2
 8004088:	eb42 0303 	adc.w	r3, r2, r3
 800408c:	647b      	str	r3, [r7, #68]	@ 0x44
 800408e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004092:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004096:	f7fc f95b 	bl	8000350 <__aeabi_uldivmod>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4611      	mov	r1, r2
 80040a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004190 <UART_SetConfig+0x2d4>)
 80040a2:	fba3 2301 	umull	r2, r3, r3, r1
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	2264      	movs	r2, #100	@ 0x64
 80040aa:	fb02 f303 	mul.w	r3, r2, r3
 80040ae:	1acb      	subs	r3, r1, r3
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80040b6:	4b36      	ldr	r3, [pc, #216]	@ (8004190 <UART_SetConfig+0x2d4>)
 80040b8:	fba3 2302 	umull	r2, r3, r3, r2
 80040bc:	095b      	lsrs	r3, r3, #5
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040c4:	441c      	add	r4, r3
 80040c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80040d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80040d8:	4642      	mov	r2, r8
 80040da:	464b      	mov	r3, r9
 80040dc:	1891      	adds	r1, r2, r2
 80040de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040e0:	415b      	adcs	r3, r3
 80040e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040e8:	4641      	mov	r1, r8
 80040ea:	1851      	adds	r1, r2, r1
 80040ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80040ee:	4649      	mov	r1, r9
 80040f0:	414b      	adcs	r3, r1
 80040f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004100:	4659      	mov	r1, fp
 8004102:	00cb      	lsls	r3, r1, #3
 8004104:	4651      	mov	r1, sl
 8004106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800410a:	4651      	mov	r1, sl
 800410c:	00ca      	lsls	r2, r1, #3
 800410e:	4610      	mov	r0, r2
 8004110:	4619      	mov	r1, r3
 8004112:	4603      	mov	r3, r0
 8004114:	4642      	mov	r2, r8
 8004116:	189b      	adds	r3, r3, r2
 8004118:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800411c:	464b      	mov	r3, r9
 800411e:	460a      	mov	r2, r1
 8004120:	eb42 0303 	adc.w	r3, r2, r3
 8004124:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004134:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004138:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800413c:	460b      	mov	r3, r1
 800413e:	18db      	adds	r3, r3, r3
 8004140:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004142:	4613      	mov	r3, r2
 8004144:	eb42 0303 	adc.w	r3, r2, r3
 8004148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800414a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800414e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004152:	f7fc f8fd 	bl	8000350 <__aeabi_uldivmod>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4b0d      	ldr	r3, [pc, #52]	@ (8004190 <UART_SetConfig+0x2d4>)
 800415c:	fba3 1302 	umull	r1, r3, r3, r2
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	2164      	movs	r1, #100	@ 0x64
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	3332      	adds	r3, #50	@ 0x32
 800416e:	4a08      	ldr	r2, [pc, #32]	@ (8004190 <UART_SetConfig+0x2d4>)
 8004170:	fba2 2303 	umull	r2, r3, r2, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	f003 0207 	and.w	r2, r3, #7
 800417a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4422      	add	r2, r4
 8004182:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004184:	e106      	b.n	8004394 <UART_SetConfig+0x4d8>
 8004186:	bf00      	nop
 8004188:	40011000 	.word	0x40011000
 800418c:	40011400 	.word	0x40011400
 8004190:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004198:	2200      	movs	r2, #0
 800419a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800419e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80041a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80041a6:	4642      	mov	r2, r8
 80041a8:	464b      	mov	r3, r9
 80041aa:	1891      	adds	r1, r2, r2
 80041ac:	6239      	str	r1, [r7, #32]
 80041ae:	415b      	adcs	r3, r3
 80041b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041b6:	4641      	mov	r1, r8
 80041b8:	1854      	adds	r4, r2, r1
 80041ba:	4649      	mov	r1, r9
 80041bc:	eb43 0501 	adc.w	r5, r3, r1
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	00eb      	lsls	r3, r5, #3
 80041ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ce:	00e2      	lsls	r2, r4, #3
 80041d0:	4614      	mov	r4, r2
 80041d2:	461d      	mov	r5, r3
 80041d4:	4643      	mov	r3, r8
 80041d6:	18e3      	adds	r3, r4, r3
 80041d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041dc:	464b      	mov	r3, r9
 80041de:	eb45 0303 	adc.w	r3, r5, r3
 80041e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004202:	4629      	mov	r1, r5
 8004204:	008b      	lsls	r3, r1, #2
 8004206:	4621      	mov	r1, r4
 8004208:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800420c:	4621      	mov	r1, r4
 800420e:	008a      	lsls	r2, r1, #2
 8004210:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004214:	f7fc f89c 	bl	8000350 <__aeabi_uldivmod>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4b60      	ldr	r3, [pc, #384]	@ (80043a0 <UART_SetConfig+0x4e4>)
 800421e:	fba3 2302 	umull	r2, r3, r3, r2
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	011c      	lsls	r4, r3, #4
 8004226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800422a:	2200      	movs	r2, #0
 800422c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004230:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004234:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004238:	4642      	mov	r2, r8
 800423a:	464b      	mov	r3, r9
 800423c:	1891      	adds	r1, r2, r2
 800423e:	61b9      	str	r1, [r7, #24]
 8004240:	415b      	adcs	r3, r3
 8004242:	61fb      	str	r3, [r7, #28]
 8004244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004248:	4641      	mov	r1, r8
 800424a:	1851      	adds	r1, r2, r1
 800424c:	6139      	str	r1, [r7, #16]
 800424e:	4649      	mov	r1, r9
 8004250:	414b      	adcs	r3, r1
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004260:	4659      	mov	r1, fp
 8004262:	00cb      	lsls	r3, r1, #3
 8004264:	4651      	mov	r1, sl
 8004266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800426a:	4651      	mov	r1, sl
 800426c:	00ca      	lsls	r2, r1, #3
 800426e:	4610      	mov	r0, r2
 8004270:	4619      	mov	r1, r3
 8004272:	4603      	mov	r3, r0
 8004274:	4642      	mov	r2, r8
 8004276:	189b      	adds	r3, r3, r2
 8004278:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800427c:	464b      	mov	r3, r9
 800427e:	460a      	mov	r2, r1
 8004280:	eb42 0303 	adc.w	r3, r2, r3
 8004284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004292:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80042a0:	4649      	mov	r1, r9
 80042a2:	008b      	lsls	r3, r1, #2
 80042a4:	4641      	mov	r1, r8
 80042a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042aa:	4641      	mov	r1, r8
 80042ac:	008a      	lsls	r2, r1, #2
 80042ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80042b2:	f7fc f84d 	bl	8000350 <__aeabi_uldivmod>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4611      	mov	r1, r2
 80042bc:	4b38      	ldr	r3, [pc, #224]	@ (80043a0 <UART_SetConfig+0x4e4>)
 80042be:	fba3 2301 	umull	r2, r3, r3, r1
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	2264      	movs	r2, #100	@ 0x64
 80042c6:	fb02 f303 	mul.w	r3, r2, r3
 80042ca:	1acb      	subs	r3, r1, r3
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	3332      	adds	r3, #50	@ 0x32
 80042d0:	4a33      	ldr	r2, [pc, #204]	@ (80043a0 <UART_SetConfig+0x4e4>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042dc:	441c      	add	r4, r3
 80042de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e2:	2200      	movs	r2, #0
 80042e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80042e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80042e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042ec:	4642      	mov	r2, r8
 80042ee:	464b      	mov	r3, r9
 80042f0:	1891      	adds	r1, r2, r2
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	415b      	adcs	r3, r3
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042fc:	4641      	mov	r1, r8
 80042fe:	1851      	adds	r1, r2, r1
 8004300:	6039      	str	r1, [r7, #0]
 8004302:	4649      	mov	r1, r9
 8004304:	414b      	adcs	r3, r1
 8004306:	607b      	str	r3, [r7, #4]
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004314:	4659      	mov	r1, fp
 8004316:	00cb      	lsls	r3, r1, #3
 8004318:	4651      	mov	r1, sl
 800431a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800431e:	4651      	mov	r1, sl
 8004320:	00ca      	lsls	r2, r1, #3
 8004322:	4610      	mov	r0, r2
 8004324:	4619      	mov	r1, r3
 8004326:	4603      	mov	r3, r0
 8004328:	4642      	mov	r2, r8
 800432a:	189b      	adds	r3, r3, r2
 800432c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800432e:	464b      	mov	r3, r9
 8004330:	460a      	mov	r2, r1
 8004332:	eb42 0303 	adc.w	r3, r2, r3
 8004336:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	663b      	str	r3, [r7, #96]	@ 0x60
 8004342:	667a      	str	r2, [r7, #100]	@ 0x64
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004350:	4649      	mov	r1, r9
 8004352:	008b      	lsls	r3, r1, #2
 8004354:	4641      	mov	r1, r8
 8004356:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800435a:	4641      	mov	r1, r8
 800435c:	008a      	lsls	r2, r1, #2
 800435e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004362:	f7fb fff5 	bl	8000350 <__aeabi_uldivmod>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4b0d      	ldr	r3, [pc, #52]	@ (80043a0 <UART_SetConfig+0x4e4>)
 800436c:	fba3 1302 	umull	r1, r3, r3, r2
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	2164      	movs	r1, #100	@ 0x64
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	3332      	adds	r3, #50	@ 0x32
 800437e:	4a08      	ldr	r2, [pc, #32]	@ (80043a0 <UART_SetConfig+0x4e4>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	f003 020f 	and.w	r2, r3, #15
 800438a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4422      	add	r2, r4
 8004392:	609a      	str	r2, [r3, #8]
}
 8004394:	bf00      	nop
 8004396:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800439a:	46bd      	mov	sp, r7
 800439c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a0:	51eb851f 	.word	0x51eb851f

080043a4 <__NVIC_SetPriority>:
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	6039      	str	r1, [r7, #0]
 80043ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	db0a      	blt.n	80043ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	490c      	ldr	r1, [pc, #48]	@ (80043f0 <__NVIC_SetPriority+0x4c>)
 80043be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c2:	0112      	lsls	r2, r2, #4
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	440b      	add	r3, r1
 80043c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80043cc:	e00a      	b.n	80043e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	4908      	ldr	r1, [pc, #32]	@ (80043f4 <__NVIC_SetPriority+0x50>)
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	3b04      	subs	r3, #4
 80043dc:	0112      	lsls	r2, r2, #4
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	440b      	add	r3, r1
 80043e2:	761a      	strb	r2, [r3, #24]
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	e000e100 	.word	0xe000e100
 80043f4:	e000ed00 	.word	0xe000ed00

080043f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80043fc:	2100      	movs	r1, #0
 80043fe:	f06f 0004 	mvn.w	r0, #4
 8004402:	f7ff ffcf 	bl	80043a4 <__NVIC_SetPriority>
#endif
}
 8004406:	bf00      	nop
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004412:	f3ef 8305 	mrs	r3, IPSR
 8004416:	603b      	str	r3, [r7, #0]
  return(result);
 8004418:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800441e:	f06f 0305 	mvn.w	r3, #5
 8004422:	607b      	str	r3, [r7, #4]
 8004424:	e00c      	b.n	8004440 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004426:	4b0a      	ldr	r3, [pc, #40]	@ (8004450 <osKernelInitialize+0x44>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d105      	bne.n	800443a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800442e:	4b08      	ldr	r3, [pc, #32]	@ (8004450 <osKernelInitialize+0x44>)
 8004430:	2201      	movs	r2, #1
 8004432:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004434:	2300      	movs	r3, #0
 8004436:	607b      	str	r3, [r7, #4]
 8004438:	e002      	b.n	8004440 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800443a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800443e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004440:	687b      	ldr	r3, [r7, #4]
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	2000482c 	.word	0x2000482c

08004454 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800445a:	f3ef 8305 	mrs	r3, IPSR
 800445e:	603b      	str	r3, [r7, #0]
  return(result);
 8004460:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004466:	f06f 0305 	mvn.w	r3, #5
 800446a:	607b      	str	r3, [r7, #4]
 800446c:	e010      	b.n	8004490 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800446e:	4b0b      	ldr	r3, [pc, #44]	@ (800449c <osKernelStart+0x48>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d109      	bne.n	800448a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004476:	f7ff ffbf 	bl	80043f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800447a:	4b08      	ldr	r3, [pc, #32]	@ (800449c <osKernelStart+0x48>)
 800447c:	2202      	movs	r2, #2
 800447e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004480:	f001 f87a 	bl	8005578 <vTaskStartScheduler>
      stat = osOK;
 8004484:	2300      	movs	r3, #0
 8004486:	607b      	str	r3, [r7, #4]
 8004488:	e002      	b.n	8004490 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800448a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800448e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004490:	687b      	ldr	r3, [r7, #4]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	2000482c 	.word	0x2000482c

080044a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08e      	sub	sp, #56	@ 0x38
 80044a4:	af04      	add	r7, sp, #16
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044b0:	f3ef 8305 	mrs	r3, IPSR
 80044b4:	617b      	str	r3, [r7, #20]
  return(result);
 80044b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d17e      	bne.n	80045ba <osThreadNew+0x11a>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d07b      	beq.n	80045ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80044c2:	2380      	movs	r3, #128	@ 0x80
 80044c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80044c6:	2318      	movs	r3, #24
 80044c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80044ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d045      	beq.n	8004566 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <osThreadNew+0x48>
        name = attr->name;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d008      	beq.n	800450e <osThreadNew+0x6e>
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	2b38      	cmp	r3, #56	@ 0x38
 8004500:	d805      	bhi.n	800450e <osThreadNew+0x6e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <osThreadNew+0x72>
        return (NULL);
 800450e:	2300      	movs	r3, #0
 8004510:	e054      	b.n	80045bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	089b      	lsrs	r3, r3, #2
 8004520:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00e      	beq.n	8004548 <osThreadNew+0xa8>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	2b5b      	cmp	r3, #91	@ 0x5b
 8004530:	d90a      	bls.n	8004548 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004536:	2b00      	cmp	r3, #0
 8004538:	d006      	beq.n	8004548 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <osThreadNew+0xa8>
        mem = 1;
 8004542:	2301      	movs	r3, #1
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	e010      	b.n	800456a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10c      	bne.n	800456a <osThreadNew+0xca>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d108      	bne.n	800456a <osThreadNew+0xca>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d104      	bne.n	800456a <osThreadNew+0xca>
          mem = 0;
 8004560:	2300      	movs	r3, #0
 8004562:	61bb      	str	r3, [r7, #24]
 8004564:	e001      	b.n	800456a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004566:	2300      	movs	r3, #0
 8004568:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d110      	bne.n	8004592 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004578:	9202      	str	r2, [sp, #8]
 800457a:	9301      	str	r3, [sp, #4]
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6a3a      	ldr	r2, [r7, #32]
 8004584:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fe1a 	bl	80051c0 <xTaskCreateStatic>
 800458c:	4603      	mov	r3, r0
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	e013      	b.n	80045ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d110      	bne.n	80045ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	b29a      	uxth	r2, r3
 800459c:	f107 0310 	add.w	r3, r7, #16
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 fe68 	bl	8005280 <xTaskCreate>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d001      	beq.n	80045ba <osThreadNew+0x11a>
            hTask = NULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80045ba:	693b      	ldr	r3, [r7, #16]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3728      	adds	r7, #40	@ 0x28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045cc:	f3ef 8305 	mrs	r3, IPSR
 80045d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80045d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <osDelay+0x1c>
    stat = osErrorISR;
 80045d8:	f06f 0305 	mvn.w	r3, #5
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	e007      	b.n	80045f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 ff8e 	bl	800550c <vTaskDelay>
    }
  }

  return (stat);
 80045f0:	68fb      	ldr	r3, [r7, #12]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4a07      	ldr	r2, [pc, #28]	@ (8004628 <vApplicationGetIdleTaskMemory+0x2c>)
 800460c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	4a06      	ldr	r2, [pc, #24]	@ (800462c <vApplicationGetIdleTaskMemory+0x30>)
 8004612:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2280      	movs	r2, #128	@ 0x80
 8004618:	601a      	str	r2, [r3, #0]
}
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20004830 	.word	0x20004830
 800462c:	2000488c 	.word	0x2000488c

08004630 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4a07      	ldr	r2, [pc, #28]	@ (800465c <vApplicationGetTimerTaskMemory+0x2c>)
 8004640:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	4a06      	ldr	r2, [pc, #24]	@ (8004660 <vApplicationGetTimerTaskMemory+0x30>)
 8004646:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800464e:	601a      	str	r2, [r3, #0]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	20004a8c 	.word	0x20004a8c
 8004660:	20004ae8 	.word	0x20004ae8

08004664 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f103 0208 	add.w	r2, r3, #8
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800467c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f103 0208 	add.w	r2, r3, #8
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f103 0208 	add.w	r2, r3, #8
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	601a      	str	r2, [r3, #0]
}
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800471c:	d103      	bne.n	8004726 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	e00c      	b.n	8004740 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3308      	adds	r3, #8
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	e002      	b.n	8004734 <vListInsert+0x2e>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	429a      	cmp	r2, r3
 800473e:	d2f6      	bcs.n	800472e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	601a      	str	r2, [r3, #0]
}
 800476c:	bf00      	nop
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6892      	ldr	r2, [r2, #8]
 800478e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6852      	ldr	r2, [r2, #4]
 8004798:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d103      	bne.n	80047ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	1e5a      	subs	r2, r3, #1
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10b      	bne.n	80047f8 <xQueueGenericReset+0x2c>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	60bb      	str	r3, [r7, #8]
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	e7fd      	b.n	80047f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80047f8:	f002 f89e 	bl	8006938 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004804:	68f9      	ldr	r1, [r7, #12]
 8004806:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004808:	fb01 f303 	mul.w	r3, r1, r3
 800480c:	441a      	add	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004828:	3b01      	subs	r3, #1
 800482a:	68f9      	ldr	r1, [r7, #12]
 800482c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800482e:	fb01 f303 	mul.w	r3, r1, r3
 8004832:	441a      	add	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	22ff      	movs	r2, #255	@ 0xff
 800483c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	22ff      	movs	r2, #255	@ 0xff
 8004844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d114      	bne.n	8004878 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d01a      	beq.n	800488c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3310      	adds	r3, #16
 800485a:	4618      	mov	r0, r3
 800485c:	f001 f91a 	bl	8005a94 <xTaskRemoveFromEventList>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d012      	beq.n	800488c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004866:	4b0d      	ldr	r3, [pc, #52]	@ (800489c <xQueueGenericReset+0xd0>)
 8004868:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	e009      	b.n	800488c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3310      	adds	r3, #16
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff fef1 	bl	8004664 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3324      	adds	r3, #36	@ 0x24
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff feec 	bl	8004664 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800488c:	f002 f886 	bl	800699c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004890:	2301      	movs	r3, #1
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	e000ed04 	.word	0xe000ed04

080048a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08e      	sub	sp, #56	@ 0x38
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10b      	bne.n	80048cc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048c6:	bf00      	nop
 80048c8:	bf00      	nop
 80048ca:	e7fd      	b.n	80048c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10b      	bne.n	80048ea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop
 80048e8:	e7fd      	b.n	80048e6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <xQueueGenericCreateStatic+0x56>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <xQueueGenericCreateStatic+0x5a>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <xQueueGenericCreateStatic+0x5c>
 80048fa:	2300      	movs	r3, #0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10b      	bne.n	8004918 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	623b      	str	r3, [r7, #32]
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d102      	bne.n	8004924 <xQueueGenericCreateStatic+0x84>
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <xQueueGenericCreateStatic+0x88>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <xQueueGenericCreateStatic+0x8a>
 8004928:	2300      	movs	r3, #0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10b      	bne.n	8004946 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	61fb      	str	r3, [r7, #28]
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	e7fd      	b.n	8004942 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004946:	2350      	movs	r3, #80	@ 0x50
 8004948:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2b50      	cmp	r3, #80	@ 0x50
 800494e:	d00b      	beq.n	8004968 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	61bb      	str	r3, [r7, #24]
}
 8004962:	bf00      	nop
 8004964:	bf00      	nop
 8004966:	e7fd      	b.n	8004964 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004968:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800496e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00d      	beq.n	8004990 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800497c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	4613      	mov	r3, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	68b9      	ldr	r1, [r7, #8]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 f805 	bl	800499a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004992:	4618      	mov	r0, r3
 8004994:	3730      	adds	r7, #48	@ 0x30
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
 80049a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d103      	bne.n	80049b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	e002      	b.n	80049bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049c8:	2101      	movs	r1, #1
 80049ca:	69b8      	ldr	r0, [r7, #24]
 80049cc:	f7ff fefe 	bl	80047cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	78fa      	ldrb	r2, [r7, #3]
 80049d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049d8:	bf00      	nop
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08e      	sub	sp, #56	@ 0x38
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049ee:	2300      	movs	r3, #0
 80049f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80049f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10b      	bne.n	8004a14 <xQueueGenericSend+0x34>
	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a0e:	bf00      	nop
 8004a10:	bf00      	nop
 8004a12:	e7fd      	b.n	8004a10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d103      	bne.n	8004a22 <xQueueGenericSend+0x42>
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <xQueueGenericSend+0x46>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <xQueueGenericSend+0x48>
 8004a26:	2300      	movs	r3, #0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10b      	bne.n	8004a44 <xQueueGenericSend+0x64>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a3e:	bf00      	nop
 8004a40:	bf00      	nop
 8004a42:	e7fd      	b.n	8004a40 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d103      	bne.n	8004a52 <xQueueGenericSend+0x72>
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d101      	bne.n	8004a56 <xQueueGenericSend+0x76>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <xQueueGenericSend+0x78>
 8004a56:	2300      	movs	r3, #0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10b      	bne.n	8004a74 <xQueueGenericSend+0x94>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	623b      	str	r3, [r7, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	bf00      	nop
 8004a72:	e7fd      	b.n	8004a70 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a74:	f001 f9f6 	bl	8005e64 <xTaskGetSchedulerState>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d102      	bne.n	8004a84 <xQueueGenericSend+0xa4>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <xQueueGenericSend+0xa8>
 8004a84:	2301      	movs	r3, #1
 8004a86:	e000      	b.n	8004a8a <xQueueGenericSend+0xaa>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10b      	bne.n	8004aa6 <xQueueGenericSend+0xc6>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	61fb      	str	r3, [r7, #28]
}
 8004aa0:	bf00      	nop
 8004aa2:	bf00      	nop
 8004aa4:	e7fd      	b.n	8004aa2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004aa6:	f001 ff47 	bl	8006938 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d302      	bcc.n	8004abc <xQueueGenericSend+0xdc>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d129      	bne.n	8004b10 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ac2:	f000 fa0f 	bl	8004ee4 <prvCopyDataToQueue>
 8004ac6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d010      	beq.n	8004af2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad2:	3324      	adds	r3, #36	@ 0x24
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 ffdd 	bl	8005a94 <xTaskRemoveFromEventList>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d013      	beq.n	8004b08 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ae0:	4b3f      	ldr	r3, [pc, #252]	@ (8004be0 <xQueueGenericSend+0x200>)
 8004ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	e00a      	b.n	8004b08 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004af8:	4b39      	ldr	r3, [pc, #228]	@ (8004be0 <xQueueGenericSend+0x200>)
 8004afa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b08:	f001 ff48 	bl	800699c <vPortExitCritical>
				return pdPASS;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e063      	b.n	8004bd8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b16:	f001 ff41 	bl	800699c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e05c      	b.n	8004bd8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d106      	bne.n	8004b32 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b24:	f107 0314 	add.w	r3, r7, #20
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f001 f83f 	bl	8005bac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b32:	f001 ff33 	bl	800699c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b36:	f000 fd87 	bl	8005648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b3a:	f001 fefd 	bl	8006938 <vPortEnterCritical>
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b44:	b25b      	sxtb	r3, r3
 8004b46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b4a:	d103      	bne.n	8004b54 <xQueueGenericSend+0x174>
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b5a:	b25b      	sxtb	r3, r3
 8004b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b60:	d103      	bne.n	8004b6a <xQueueGenericSend+0x18a>
 8004b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b6a:	f001 ff17 	bl	800699c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b6e:	1d3a      	adds	r2, r7, #4
 8004b70:	f107 0314 	add.w	r3, r7, #20
 8004b74:	4611      	mov	r1, r2
 8004b76:	4618      	mov	r0, r3
 8004b78:	f001 f82e 	bl	8005bd8 <xTaskCheckForTimeOut>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d124      	bne.n	8004bcc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b84:	f000 faa6 	bl	80050d4 <prvIsQueueFull>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d018      	beq.n	8004bc0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b90:	3310      	adds	r3, #16
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	4611      	mov	r1, r2
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 ff2a 	bl	80059f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b9e:	f000 fa31 	bl	8005004 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ba2:	f000 fd5f 	bl	8005664 <xTaskResumeAll>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f47f af7c 	bne.w	8004aa6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004bae:	4b0c      	ldr	r3, [pc, #48]	@ (8004be0 <xQueueGenericSend+0x200>)
 8004bb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	e772      	b.n	8004aa6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004bc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bc2:	f000 fa1f 	bl	8005004 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bc6:	f000 fd4d 	bl	8005664 <xTaskResumeAll>
 8004bca:	e76c      	b.n	8004aa6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004bcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bce:	f000 fa19 	bl	8005004 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bd2:	f000 fd47 	bl	8005664 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004bd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3738      	adds	r7, #56	@ 0x38
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	e000ed04 	.word	0xe000ed04

08004be4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b090      	sub	sp, #64	@ 0x40
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10b      	bne.n	8004c14 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c0e:	bf00      	nop
 8004c10:	bf00      	nop
 8004c12:	e7fd      	b.n	8004c10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d103      	bne.n	8004c22 <xQueueGenericSendFromISR+0x3e>
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <xQueueGenericSendFromISR+0x42>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <xQueueGenericSendFromISR+0x44>
 8004c26:	2300      	movs	r3, #0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10b      	bne.n	8004c44 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c3e:	bf00      	nop
 8004c40:	bf00      	nop
 8004c42:	e7fd      	b.n	8004c40 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d103      	bne.n	8004c52 <xQueueGenericSendFromISR+0x6e>
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <xQueueGenericSendFromISR+0x72>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <xQueueGenericSendFromISR+0x74>
 8004c56:	2300      	movs	r3, #0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10b      	bne.n	8004c74 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	623b      	str	r3, [r7, #32]
}
 8004c6e:	bf00      	nop
 8004c70:	bf00      	nop
 8004c72:	e7fd      	b.n	8004c70 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c74:	f001 ff40 	bl	8006af8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c78:	f3ef 8211 	mrs	r2, BASEPRI
 8004c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	61fa      	str	r2, [r7, #28]
 8004c8e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c90:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c92:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d302      	bcc.n	8004ca6 <xQueueGenericSendFromISR+0xc2>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d12f      	bne.n	8004d06 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004cbc:	f000 f912 	bl	8004ee4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004cc0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cc8:	d112      	bne.n	8004cf0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d016      	beq.n	8004d00 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd4:	3324      	adds	r3, #36	@ 0x24
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fedc 	bl	8005a94 <xTaskRemoveFromEventList>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00e      	beq.n	8004d00 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00b      	beq.n	8004d00 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	e007      	b.n	8004d00 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cf0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	b25a      	sxtb	r2, r3
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004d00:	2301      	movs	r3, #1
 8004d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004d04:	e001      	b.n	8004d0a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d0c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3740      	adds	r7, #64	@ 0x40
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08c      	sub	sp, #48	@ 0x30
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10b      	bne.n	8004d52 <xQueueReceive+0x32>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	623b      	str	r3, [r7, #32]
}
 8004d4c:	bf00      	nop
 8004d4e:	bf00      	nop
 8004d50:	e7fd      	b.n	8004d4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d103      	bne.n	8004d60 <xQueueReceive+0x40>
 8004d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <xQueueReceive+0x44>
 8004d60:	2301      	movs	r3, #1
 8004d62:	e000      	b.n	8004d66 <xQueueReceive+0x46>
 8004d64:	2300      	movs	r3, #0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10b      	bne.n	8004d82 <xQueueReceive+0x62>
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	61fb      	str	r3, [r7, #28]
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	e7fd      	b.n	8004d7e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d82:	f001 f86f 	bl	8005e64 <xTaskGetSchedulerState>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d102      	bne.n	8004d92 <xQueueReceive+0x72>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <xQueueReceive+0x76>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <xQueueReceive+0x78>
 8004d96:	2300      	movs	r3, #0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10b      	bne.n	8004db4 <xQueueReceive+0x94>
	__asm volatile
 8004d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	61bb      	str	r3, [r7, #24]
}
 8004dae:	bf00      	nop
 8004db0:	bf00      	nop
 8004db2:	e7fd      	b.n	8004db0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004db4:	f001 fdc0 	bl	8006938 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01f      	beq.n	8004e04 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dc8:	f000 f8f6 	bl	8004fb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dce:	1e5a      	subs	r2, r3, #1
 8004dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00f      	beq.n	8004dfc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dde:	3310      	adds	r3, #16
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fe57 	bl	8005a94 <xTaskRemoveFromEventList>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d007      	beq.n	8004dfc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004dec:	4b3c      	ldr	r3, [pc, #240]	@ (8004ee0 <xQueueReceive+0x1c0>)
 8004dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004dfc:	f001 fdce 	bl	800699c <vPortExitCritical>
				return pdPASS;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e069      	b.n	8004ed8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d103      	bne.n	8004e12 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e0a:	f001 fdc7 	bl	800699c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e062      	b.n	8004ed8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d106      	bne.n	8004e26 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e18:	f107 0310 	add.w	r3, r7, #16
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fec5 	bl	8005bac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e22:	2301      	movs	r3, #1
 8004e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e26:	f001 fdb9 	bl	800699c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e2a:	f000 fc0d 	bl	8005648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e2e:	f001 fd83 	bl	8006938 <vPortEnterCritical>
 8004e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e38:	b25b      	sxtb	r3, r3
 8004e3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e3e:	d103      	bne.n	8004e48 <xQueueReceive+0x128>
 8004e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e4e:	b25b      	sxtb	r3, r3
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e54:	d103      	bne.n	8004e5e <xQueueReceive+0x13e>
 8004e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e5e:	f001 fd9d 	bl	800699c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e62:	1d3a      	adds	r2, r7, #4
 8004e64:	f107 0310 	add.w	r3, r7, #16
 8004e68:	4611      	mov	r1, r2
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 feb4 	bl	8005bd8 <xTaskCheckForTimeOut>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d123      	bne.n	8004ebe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e78:	f000 f916 	bl	80050a8 <prvIsQueueEmpty>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d017      	beq.n	8004eb2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e84:	3324      	adds	r3, #36	@ 0x24
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	4611      	mov	r1, r2
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fdb0 	bl	80059f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e92:	f000 f8b7 	bl	8005004 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e96:	f000 fbe5 	bl	8005664 <xTaskResumeAll>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d189      	bne.n	8004db4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee0 <xQueueReceive+0x1c0>)
 8004ea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	e780      	b.n	8004db4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004eb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004eb4:	f000 f8a6 	bl	8005004 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004eb8:	f000 fbd4 	bl	8005664 <xTaskResumeAll>
 8004ebc:	e77a      	b.n	8004db4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ebe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ec0:	f000 f8a0 	bl	8005004 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ec4:	f000 fbce 	bl	8005664 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ec8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004eca:	f000 f8ed 	bl	80050a8 <prvIsQueueEmpty>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f43f af6f 	beq.w	8004db4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ed6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3730      	adds	r7, #48	@ 0x30
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	e000ed04 	.word	0xe000ed04

08004ee4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10d      	bne.n	8004f1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d14d      	bne.n	8004fa6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 ffc6 	bl	8005ea0 <xTaskPriorityDisinherit>
 8004f14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	609a      	str	r2, [r3, #8]
 8004f1c:	e043      	b.n	8004fa6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d119      	bne.n	8004f58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6858      	ldr	r0, [r3, #4]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	68b9      	ldr	r1, [r7, #8]
 8004f30:	f00e fdfb 	bl	8013b2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3c:	441a      	add	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d32b      	bcc.n	8004fa6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	605a      	str	r2, [r3, #4]
 8004f56:	e026      	b.n	8004fa6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	68d8      	ldr	r0, [r3, #12]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f60:	461a      	mov	r2, r3
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	f00e fde1 	bl	8013b2a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f70:	425b      	negs	r3, r3
 8004f72:	441a      	add	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d207      	bcs.n	8004f94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	425b      	negs	r3, r3
 8004f8e:	441a      	add	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d105      	bne.n	8004fa6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004fae:	697b      	ldr	r3, [r7, #20]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d018      	beq.n	8004ffc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd2:	441a      	add	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d303      	bcc.n	8004fec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68d9      	ldr	r1, [r3, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6838      	ldr	r0, [r7, #0]
 8004ff8:	f00e fd97 	bl	8013b2a <memcpy>
	}
}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800500c:	f001 fc94 	bl	8006938 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005016:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005018:	e011      	b.n	800503e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501e:	2b00      	cmp	r3, #0
 8005020:	d012      	beq.n	8005048 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3324      	adds	r3, #36	@ 0x24
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fd34 	bl	8005a94 <xTaskRemoveFromEventList>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005032:	f000 fe35 	bl	8005ca0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	3b01      	subs	r3, #1
 800503a:	b2db      	uxtb	r3, r3
 800503c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800503e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005042:	2b00      	cmp	r3, #0
 8005044:	dce9      	bgt.n	800501a <prvUnlockQueue+0x16>
 8005046:	e000      	b.n	800504a <prvUnlockQueue+0x46>
					break;
 8005048:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	22ff      	movs	r2, #255	@ 0xff
 800504e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005052:	f001 fca3 	bl	800699c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005056:	f001 fc6f 	bl	8006938 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005060:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005062:	e011      	b.n	8005088 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d012      	beq.n	8005092 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3310      	adds	r3, #16
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fd0f 	bl	8005a94 <xTaskRemoveFromEventList>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800507c:	f000 fe10 	bl	8005ca0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005080:	7bbb      	ldrb	r3, [r7, #14]
 8005082:	3b01      	subs	r3, #1
 8005084:	b2db      	uxtb	r3, r3
 8005086:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800508c:	2b00      	cmp	r3, #0
 800508e:	dce9      	bgt.n	8005064 <prvUnlockQueue+0x60>
 8005090:	e000      	b.n	8005094 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005092:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	22ff      	movs	r2, #255	@ 0xff
 8005098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800509c:	f001 fc7e 	bl	800699c <vPortExitCritical>
}
 80050a0:	bf00      	nop
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050b0:	f001 fc42 	bl	8006938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d102      	bne.n	80050c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050bc:	2301      	movs	r3, #1
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	e001      	b.n	80050c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050c6:	f001 fc69 	bl	800699c <vPortExitCritical>

	return xReturn;
 80050ca:	68fb      	ldr	r3, [r7, #12]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050dc:	f001 fc2c 	bl	8006938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d102      	bne.n	80050f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050ec:	2301      	movs	r3, #1
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	e001      	b.n	80050f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050f6:	f001 fc51 	bl	800699c <vPortExitCritical>

	return xReturn;
 80050fa:	68fb      	ldr	r3, [r7, #12]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	e014      	b.n	800513e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005114:	4a0f      	ldr	r2, [pc, #60]	@ (8005154 <vQueueAddToRegistry+0x50>)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10b      	bne.n	8005138 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005120:	490c      	ldr	r1, [pc, #48]	@ (8005154 <vQueueAddToRegistry+0x50>)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800512a:	4a0a      	ldr	r2, [pc, #40]	@ (8005154 <vQueueAddToRegistry+0x50>)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	4413      	add	r3, r2
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005136:	e006      	b.n	8005146 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	3301      	adds	r3, #1
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b07      	cmp	r3, #7
 8005142:	d9e7      	bls.n	8005114 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20004ee8 	.word	0x20004ee8

08005158 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005168:	f001 fbe6 	bl	8006938 <vPortEnterCritical>
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005172:	b25b      	sxtb	r3, r3
 8005174:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005178:	d103      	bne.n	8005182 <vQueueWaitForMessageRestricted+0x2a>
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005188:	b25b      	sxtb	r3, r3
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800518e:	d103      	bne.n	8005198 <vQueueWaitForMessageRestricted+0x40>
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005198:	f001 fc00 	bl	800699c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	3324      	adds	r3, #36	@ 0x24
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	68b9      	ldr	r1, [r7, #8]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fc45 	bl	8005a3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80051b2:	6978      	ldr	r0, [r7, #20]
 80051b4:	f7ff ff26 	bl	8005004 <prvUnlockQueue>
	}
 80051b8:	bf00      	nop
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08e      	sub	sp, #56	@ 0x38
 80051c4:	af04      	add	r7, sp, #16
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10b      	bne.n	80051ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	623b      	str	r3, [r7, #32]
}
 80051e6:	bf00      	nop
 80051e8:	bf00      	nop
 80051ea:	e7fd      	b.n	80051e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10b      	bne.n	800520a <xTaskCreateStatic+0x4a>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	61fb      	str	r3, [r7, #28]
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop
 8005208:	e7fd      	b.n	8005206 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800520a:	235c      	movs	r3, #92	@ 0x5c
 800520c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b5c      	cmp	r3, #92	@ 0x5c
 8005212:	d00b      	beq.n	800522c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	61bb      	str	r3, [r7, #24]
}
 8005226:	bf00      	nop
 8005228:	bf00      	nop
 800522a:	e7fd      	b.n	8005228 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800522c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800522e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01e      	beq.n	8005272 <xTaskCreateStatic+0xb2>
 8005234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005236:	2b00      	cmp	r3, #0
 8005238:	d01b      	beq.n	8005272 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800523a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005242:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005246:	2202      	movs	r2, #2
 8005248:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800524c:	2300      	movs	r3, #0
 800524e:	9303      	str	r3, [sp, #12]
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	9302      	str	r3, [sp, #8]
 8005254:	f107 0314 	add.w	r3, r7, #20
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	68b9      	ldr	r1, [r7, #8]
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 f850 	bl	800530a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800526a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800526c:	f000 f8de 	bl	800542c <prvAddNewTaskToReadyList>
 8005270:	e001      	b.n	8005276 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005272:	2300      	movs	r3, #0
 8005274:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005276:	697b      	ldr	r3, [r7, #20]
	}
 8005278:	4618      	mov	r0, r3
 800527a:	3728      	adds	r7, #40	@ 0x28
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005280:	b580      	push	{r7, lr}
 8005282:	b08c      	sub	sp, #48	@ 0x30
 8005284:	af04      	add	r7, sp, #16
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	4613      	mov	r3, r2
 800528e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005290:	88fb      	ldrh	r3, [r7, #6]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4618      	mov	r0, r3
 8005296:	f001 fc71 	bl	8006b7c <pvPortMalloc>
 800529a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00e      	beq.n	80052c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052a2:	205c      	movs	r0, #92	@ 0x5c
 80052a4:	f001 fc6a 	bl	8006b7c <pvPortMalloc>
 80052a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80052b6:	e005      	b.n	80052c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052b8:	6978      	ldr	r0, [r7, #20]
 80052ba:	f001 fd2d 	bl	8006d18 <vPortFree>
 80052be:	e001      	b.n	80052c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052c0:	2300      	movs	r3, #0
 80052c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d017      	beq.n	80052fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052d2:	88fa      	ldrh	r2, [r7, #6]
 80052d4:	2300      	movs	r3, #0
 80052d6:	9303      	str	r3, [sp, #12]
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	9302      	str	r3, [sp, #8]
 80052dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052de:	9301      	str	r3, [sp, #4]
 80052e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	68b9      	ldr	r1, [r7, #8]
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 f80e 	bl	800530a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052ee:	69f8      	ldr	r0, [r7, #28]
 80052f0:	f000 f89c 	bl	800542c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052f4:	2301      	movs	r3, #1
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	e002      	b.n	8005300 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005300:	69bb      	ldr	r3, [r7, #24]
	}
 8005302:	4618      	mov	r0, r3
 8005304:	3720      	adds	r7, #32
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b088      	sub	sp, #32
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	461a      	mov	r2, r3
 8005322:	21a5      	movs	r1, #165	@ 0xa5
 8005324:	f00e fb26 	bl	8013974 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005332:	3b01      	subs	r3, #1
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	f023 0307 	bic.w	r3, r3, #7
 8005340:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00b      	beq.n	8005364 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	617b      	str	r3, [r7, #20]
}
 800535e:	bf00      	nop
 8005360:	bf00      	nop
 8005362:	e7fd      	b.n	8005360 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d01f      	beq.n	80053aa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800536a:	2300      	movs	r3, #0
 800536c:	61fb      	str	r3, [r7, #28]
 800536e:	e012      	b.n	8005396 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	4413      	add	r3, r2
 8005376:	7819      	ldrb	r1, [r3, #0]
 8005378:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	3334      	adds	r3, #52	@ 0x34
 8005380:	460a      	mov	r2, r1
 8005382:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d006      	beq.n	800539e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	3301      	adds	r3, #1
 8005394:	61fb      	str	r3, [r7, #28]
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	2b0f      	cmp	r3, #15
 800539a:	d9e9      	bls.n	8005370 <prvInitialiseNewTask+0x66>
 800539c:	e000      	b.n	80053a0 <prvInitialiseNewTask+0x96>
			{
				break;
 800539e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053a8:	e003      	b.n	80053b2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b4:	2b37      	cmp	r3, #55	@ 0x37
 80053b6:	d901      	bls.n	80053bc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053b8:	2337      	movs	r3, #55	@ 0x37
 80053ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053c6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80053c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ca:	2200      	movs	r2, #0
 80053cc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d0:	3304      	adds	r3, #4
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff f966 	bl	80046a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053da:	3318      	adds	r3, #24
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff f961 	bl	80046a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80053ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053f6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fa:	2200      	movs	r2, #0
 80053fc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	68f9      	ldr	r1, [r7, #12]
 800540a:	69b8      	ldr	r0, [r7, #24]
 800540c:	f001 f966 	bl	80066dc <pxPortInitialiseStack>
 8005410:	4602      	mov	r2, r0
 8005412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005414:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800541c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800541e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005420:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005422:	bf00      	nop
 8005424:	3720      	adds	r7, #32
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005434:	f001 fa80 	bl	8006938 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005438:	4b2d      	ldr	r3, [pc, #180]	@ (80054f0 <prvAddNewTaskToReadyList+0xc4>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	4a2c      	ldr	r2, [pc, #176]	@ (80054f0 <prvAddNewTaskToReadyList+0xc4>)
 8005440:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005442:	4b2c      	ldr	r3, [pc, #176]	@ (80054f4 <prvAddNewTaskToReadyList+0xc8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800544a:	4a2a      	ldr	r2, [pc, #168]	@ (80054f4 <prvAddNewTaskToReadyList+0xc8>)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005450:	4b27      	ldr	r3, [pc, #156]	@ (80054f0 <prvAddNewTaskToReadyList+0xc4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d110      	bne.n	800547a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005458:	f000 fc46 	bl	8005ce8 <prvInitialiseTaskLists>
 800545c:	e00d      	b.n	800547a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800545e:	4b26      	ldr	r3, [pc, #152]	@ (80054f8 <prvAddNewTaskToReadyList+0xcc>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d109      	bne.n	800547a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005466:	4b23      	ldr	r3, [pc, #140]	@ (80054f4 <prvAddNewTaskToReadyList+0xc8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005470:	429a      	cmp	r2, r3
 8005472:	d802      	bhi.n	800547a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005474:	4a1f      	ldr	r2, [pc, #124]	@ (80054f4 <prvAddNewTaskToReadyList+0xc8>)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800547a:	4b20      	ldr	r3, [pc, #128]	@ (80054fc <prvAddNewTaskToReadyList+0xd0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3301      	adds	r3, #1
 8005480:	4a1e      	ldr	r2, [pc, #120]	@ (80054fc <prvAddNewTaskToReadyList+0xd0>)
 8005482:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005484:	4b1d      	ldr	r3, [pc, #116]	@ (80054fc <prvAddNewTaskToReadyList+0xd0>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005490:	4b1b      	ldr	r3, [pc, #108]	@ (8005500 <prvAddNewTaskToReadyList+0xd4>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d903      	bls.n	80054a0 <prvAddNewTaskToReadyList+0x74>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549c:	4a18      	ldr	r2, [pc, #96]	@ (8005500 <prvAddNewTaskToReadyList+0xd4>)
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4a15      	ldr	r2, [pc, #84]	@ (8005504 <prvAddNewTaskToReadyList+0xd8>)
 80054ae:	441a      	add	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4619      	mov	r1, r3
 80054b6:	4610      	mov	r0, r2
 80054b8:	f7ff f901 	bl	80046be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054bc:	f001 fa6e 	bl	800699c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054c0:	4b0d      	ldr	r3, [pc, #52]	@ (80054f8 <prvAddNewTaskToReadyList+0xcc>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00e      	beq.n	80054e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054c8:	4b0a      	ldr	r3, [pc, #40]	@ (80054f4 <prvAddNewTaskToReadyList+0xc8>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d207      	bcs.n	80054e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005508 <prvAddNewTaskToReadyList+0xdc>)
 80054d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054e6:	bf00      	nop
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	200053fc 	.word	0x200053fc
 80054f4:	20004f28 	.word	0x20004f28
 80054f8:	20005408 	.word	0x20005408
 80054fc:	20005418 	.word	0x20005418
 8005500:	20005404 	.word	0x20005404
 8005504:	20004f2c 	.word	0x20004f2c
 8005508:	e000ed04 	.word	0xe000ed04

0800550c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d018      	beq.n	8005550 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800551e:	4b14      	ldr	r3, [pc, #80]	@ (8005570 <vTaskDelay+0x64>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00b      	beq.n	800553e <vTaskDelay+0x32>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	60bb      	str	r3, [r7, #8]
}
 8005538:	bf00      	nop
 800553a:	bf00      	nop
 800553c:	e7fd      	b.n	800553a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800553e:	f000 f883 	bl	8005648 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005542:	2100      	movs	r1, #0
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fd1b 	bl	8005f80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800554a:	f000 f88b 	bl	8005664 <xTaskResumeAll>
 800554e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d107      	bne.n	8005566 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005556:	4b07      	ldr	r3, [pc, #28]	@ (8005574 <vTaskDelay+0x68>)
 8005558:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005566:	bf00      	nop
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20005424 	.word	0x20005424
 8005574:	e000ed04 	.word	0xe000ed04

08005578 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08a      	sub	sp, #40	@ 0x28
 800557c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800557e:	2300      	movs	r3, #0
 8005580:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005582:	2300      	movs	r3, #0
 8005584:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005586:	463a      	mov	r2, r7
 8005588:	1d39      	adds	r1, r7, #4
 800558a:	f107 0308 	add.w	r3, r7, #8
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff f834 	bl	80045fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005594:	6839      	ldr	r1, [r7, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	9202      	str	r2, [sp, #8]
 800559c:	9301      	str	r3, [sp, #4]
 800559e:	2300      	movs	r3, #0
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	2300      	movs	r3, #0
 80055a4:	460a      	mov	r2, r1
 80055a6:	4922      	ldr	r1, [pc, #136]	@ (8005630 <vTaskStartScheduler+0xb8>)
 80055a8:	4822      	ldr	r0, [pc, #136]	@ (8005634 <vTaskStartScheduler+0xbc>)
 80055aa:	f7ff fe09 	bl	80051c0 <xTaskCreateStatic>
 80055ae:	4603      	mov	r3, r0
 80055b0:	4a21      	ldr	r2, [pc, #132]	@ (8005638 <vTaskStartScheduler+0xc0>)
 80055b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055b4:	4b20      	ldr	r3, [pc, #128]	@ (8005638 <vTaskStartScheduler+0xc0>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055bc:	2301      	movs	r3, #1
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	e001      	b.n	80055c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d102      	bne.n	80055d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80055cc:	f000 fd2c 	bl	8006028 <xTimerCreateTimerTask>
 80055d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d116      	bne.n	8005606 <vTaskStartScheduler+0x8e>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	613b      	str	r3, [r7, #16]
}
 80055ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055ec:	4b13      	ldr	r3, [pc, #76]	@ (800563c <vTaskStartScheduler+0xc4>)
 80055ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055f4:	4b12      	ldr	r3, [pc, #72]	@ (8005640 <vTaskStartScheduler+0xc8>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055fa:	4b12      	ldr	r3, [pc, #72]	@ (8005644 <vTaskStartScheduler+0xcc>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005600:	f001 f8f6 	bl	80067f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005604:	e00f      	b.n	8005626 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800560c:	d10b      	bne.n	8005626 <vTaskStartScheduler+0xae>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	60fb      	str	r3, [r7, #12]
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop
 8005624:	e7fd      	b.n	8005622 <vTaskStartScheduler+0xaa>
}
 8005626:	bf00      	nop
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	08014954 	.word	0x08014954
 8005634:	08005cb9 	.word	0x08005cb9
 8005638:	20005420 	.word	0x20005420
 800563c:	2000541c 	.word	0x2000541c
 8005640:	20005408 	.word	0x20005408
 8005644:	20005400 	.word	0x20005400

08005648 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800564c:	4b04      	ldr	r3, [pc, #16]	@ (8005660 <vTaskSuspendAll+0x18>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3301      	adds	r3, #1
 8005652:	4a03      	ldr	r2, [pc, #12]	@ (8005660 <vTaskSuspendAll+0x18>)
 8005654:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005656:	bf00      	nop
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	20005424 	.word	0x20005424

08005664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800566e:	2300      	movs	r3, #0
 8005670:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005672:	4b42      	ldr	r3, [pc, #264]	@ (800577c <xTaskResumeAll+0x118>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10b      	bne.n	8005692 <xTaskResumeAll+0x2e>
	__asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	603b      	str	r3, [r7, #0]
}
 800568c:	bf00      	nop
 800568e:	bf00      	nop
 8005690:	e7fd      	b.n	800568e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005692:	f001 f951 	bl	8006938 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005696:	4b39      	ldr	r3, [pc, #228]	@ (800577c <xTaskResumeAll+0x118>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3b01      	subs	r3, #1
 800569c:	4a37      	ldr	r2, [pc, #220]	@ (800577c <xTaskResumeAll+0x118>)
 800569e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056a0:	4b36      	ldr	r3, [pc, #216]	@ (800577c <xTaskResumeAll+0x118>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d162      	bne.n	800576e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056a8:	4b35      	ldr	r3, [pc, #212]	@ (8005780 <xTaskResumeAll+0x11c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d05e      	beq.n	800576e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056b0:	e02f      	b.n	8005712 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056b2:	4b34      	ldr	r3, [pc, #208]	@ (8005784 <xTaskResumeAll+0x120>)
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3318      	adds	r3, #24
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff f85a 	bl	8004778 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3304      	adds	r3, #4
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff f855 	bl	8004778 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d2:	4b2d      	ldr	r3, [pc, #180]	@ (8005788 <xTaskResumeAll+0x124>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d903      	bls.n	80056e2 <xTaskResumeAll+0x7e>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056de:	4a2a      	ldr	r2, [pc, #168]	@ (8005788 <xTaskResumeAll+0x124>)
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e6:	4613      	mov	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4a27      	ldr	r2, [pc, #156]	@ (800578c <xTaskResumeAll+0x128>)
 80056f0:	441a      	add	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3304      	adds	r3, #4
 80056f6:	4619      	mov	r1, r3
 80056f8:	4610      	mov	r0, r2
 80056fa:	f7fe ffe0 	bl	80046be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005702:	4b23      	ldr	r3, [pc, #140]	@ (8005790 <xTaskResumeAll+0x12c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005708:	429a      	cmp	r2, r3
 800570a:	d302      	bcc.n	8005712 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800570c:	4b21      	ldr	r3, [pc, #132]	@ (8005794 <xTaskResumeAll+0x130>)
 800570e:	2201      	movs	r2, #1
 8005710:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005712:	4b1c      	ldr	r3, [pc, #112]	@ (8005784 <xTaskResumeAll+0x120>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1cb      	bne.n	80056b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005720:	f000 fb80 	bl	8005e24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005724:	4b1c      	ldr	r3, [pc, #112]	@ (8005798 <xTaskResumeAll+0x134>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d010      	beq.n	8005752 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005730:	f000 f846 	bl	80057c0 <xTaskIncrementTick>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800573a:	4b16      	ldr	r3, [pc, #88]	@ (8005794 <xTaskResumeAll+0x130>)
 800573c:	2201      	movs	r2, #1
 800573e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3b01      	subs	r3, #1
 8005744:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f1      	bne.n	8005730 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800574c:	4b12      	ldr	r3, [pc, #72]	@ (8005798 <xTaskResumeAll+0x134>)
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005752:	4b10      	ldr	r3, [pc, #64]	@ (8005794 <xTaskResumeAll+0x130>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d009      	beq.n	800576e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800575a:	2301      	movs	r3, #1
 800575c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800575e:	4b0f      	ldr	r3, [pc, #60]	@ (800579c <xTaskResumeAll+0x138>)
 8005760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800576e:	f001 f915 	bl	800699c <vPortExitCritical>

	return xAlreadyYielded;
 8005772:	68bb      	ldr	r3, [r7, #8]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	20005424 	.word	0x20005424
 8005780:	200053fc 	.word	0x200053fc
 8005784:	200053bc 	.word	0x200053bc
 8005788:	20005404 	.word	0x20005404
 800578c:	20004f2c 	.word	0x20004f2c
 8005790:	20004f28 	.word	0x20004f28
 8005794:	20005410 	.word	0x20005410
 8005798:	2000540c 	.word	0x2000540c
 800579c:	e000ed04 	.word	0xe000ed04

080057a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80057a6:	4b05      	ldr	r3, [pc, #20]	@ (80057bc <xTaskGetTickCount+0x1c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80057ac:	687b      	ldr	r3, [r7, #4]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	20005400 	.word	0x20005400

080057c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ca:	4b4f      	ldr	r3, [pc, #316]	@ (8005908 <xTaskIncrementTick+0x148>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f040 8090 	bne.w	80058f4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057d4:	4b4d      	ldr	r3, [pc, #308]	@ (800590c <xTaskIncrementTick+0x14c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3301      	adds	r3, #1
 80057da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057dc:	4a4b      	ldr	r2, [pc, #300]	@ (800590c <xTaskIncrementTick+0x14c>)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d121      	bne.n	800582c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80057e8:	4b49      	ldr	r3, [pc, #292]	@ (8005910 <xTaskIncrementTick+0x150>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00b      	beq.n	800580a <xTaskIncrementTick+0x4a>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	603b      	str	r3, [r7, #0]
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop
 8005808:	e7fd      	b.n	8005806 <xTaskIncrementTick+0x46>
 800580a:	4b41      	ldr	r3, [pc, #260]	@ (8005910 <xTaskIncrementTick+0x150>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	4b40      	ldr	r3, [pc, #256]	@ (8005914 <xTaskIncrementTick+0x154>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a3e      	ldr	r2, [pc, #248]	@ (8005910 <xTaskIncrementTick+0x150>)
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	4a3e      	ldr	r2, [pc, #248]	@ (8005914 <xTaskIncrementTick+0x154>)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	4b3e      	ldr	r3, [pc, #248]	@ (8005918 <xTaskIncrementTick+0x158>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3301      	adds	r3, #1
 8005824:	4a3c      	ldr	r2, [pc, #240]	@ (8005918 <xTaskIncrementTick+0x158>)
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	f000 fafc 	bl	8005e24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800582c:	4b3b      	ldr	r3, [pc, #236]	@ (800591c <xTaskIncrementTick+0x15c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	429a      	cmp	r2, r3
 8005834:	d349      	bcc.n	80058ca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005836:	4b36      	ldr	r3, [pc, #216]	@ (8005910 <xTaskIncrementTick+0x150>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d104      	bne.n	800584a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005840:	4b36      	ldr	r3, [pc, #216]	@ (800591c <xTaskIncrementTick+0x15c>)
 8005842:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005846:	601a      	str	r2, [r3, #0]
					break;
 8005848:	e03f      	b.n	80058ca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800584a:	4b31      	ldr	r3, [pc, #196]	@ (8005910 <xTaskIncrementTick+0x150>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	429a      	cmp	r2, r3
 8005860:	d203      	bcs.n	800586a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005862:	4a2e      	ldr	r2, [pc, #184]	@ (800591c <xTaskIncrementTick+0x15c>)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005868:	e02f      	b.n	80058ca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	3304      	adds	r3, #4
 800586e:	4618      	mov	r0, r3
 8005870:	f7fe ff82 	bl	8004778 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005878:	2b00      	cmp	r3, #0
 800587a:	d004      	beq.n	8005886 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	3318      	adds	r3, #24
 8005880:	4618      	mov	r0, r3
 8005882:	f7fe ff79 	bl	8004778 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800588a:	4b25      	ldr	r3, [pc, #148]	@ (8005920 <xTaskIncrementTick+0x160>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d903      	bls.n	800589a <xTaskIncrementTick+0xda>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005896:	4a22      	ldr	r2, [pc, #136]	@ (8005920 <xTaskIncrementTick+0x160>)
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4a1f      	ldr	r2, [pc, #124]	@ (8005924 <xTaskIncrementTick+0x164>)
 80058a8:	441a      	add	r2, r3
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	3304      	adds	r3, #4
 80058ae:	4619      	mov	r1, r3
 80058b0:	4610      	mov	r0, r2
 80058b2:	f7fe ff04 	bl	80046be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005928 <xTaskIncrementTick+0x168>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d3b8      	bcc.n	8005836 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80058c4:	2301      	movs	r3, #1
 80058c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058c8:	e7b5      	b.n	8005836 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058ca:	4b17      	ldr	r3, [pc, #92]	@ (8005928 <xTaskIncrementTick+0x168>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d0:	4914      	ldr	r1, [pc, #80]	@ (8005924 <xTaskIncrementTick+0x164>)
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	440b      	add	r3, r1
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d901      	bls.n	80058e6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80058e2:	2301      	movs	r3, #1
 80058e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058e6:	4b11      	ldr	r3, [pc, #68]	@ (800592c <xTaskIncrementTick+0x16c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d007      	beq.n	80058fe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80058ee:	2301      	movs	r3, #1
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	e004      	b.n	80058fe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005930 <xTaskIncrementTick+0x170>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3301      	adds	r3, #1
 80058fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005930 <xTaskIncrementTick+0x170>)
 80058fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058fe:	697b      	ldr	r3, [r7, #20]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20005424 	.word	0x20005424
 800590c:	20005400 	.word	0x20005400
 8005910:	200053b4 	.word	0x200053b4
 8005914:	200053b8 	.word	0x200053b8
 8005918:	20005414 	.word	0x20005414
 800591c:	2000541c 	.word	0x2000541c
 8005920:	20005404 	.word	0x20005404
 8005924:	20004f2c 	.word	0x20004f2c
 8005928:	20004f28 	.word	0x20004f28
 800592c:	20005410 	.word	0x20005410
 8005930:	2000540c 	.word	0x2000540c

08005934 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800593a:	4b28      	ldr	r3, [pc, #160]	@ (80059dc <vTaskSwitchContext+0xa8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005942:	4b27      	ldr	r3, [pc, #156]	@ (80059e0 <vTaskSwitchContext+0xac>)
 8005944:	2201      	movs	r2, #1
 8005946:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005948:	e042      	b.n	80059d0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800594a:	4b25      	ldr	r3, [pc, #148]	@ (80059e0 <vTaskSwitchContext+0xac>)
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005950:	4b24      	ldr	r3, [pc, #144]	@ (80059e4 <vTaskSwitchContext+0xb0>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	e011      	b.n	800597c <vTaskSwitchContext+0x48>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10b      	bne.n	8005976 <vTaskSwitchContext+0x42>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	607b      	str	r3, [r7, #4]
}
 8005970:	bf00      	nop
 8005972:	bf00      	nop
 8005974:	e7fd      	b.n	8005972 <vTaskSwitchContext+0x3e>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3b01      	subs	r3, #1
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	491a      	ldr	r1, [pc, #104]	@ (80059e8 <vTaskSwitchContext+0xb4>)
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	440b      	add	r3, r1
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0e3      	beq.n	8005958 <vTaskSwitchContext+0x24>
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4a13      	ldr	r2, [pc, #76]	@ (80059e8 <vTaskSwitchContext+0xb4>)
 800599c:	4413      	add	r3, r2
 800599e:	60bb      	str	r3, [r7, #8]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	605a      	str	r2, [r3, #4]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	3308      	adds	r3, #8
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d104      	bne.n	80059c0 <vTaskSwitchContext+0x8c>
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	605a      	str	r2, [r3, #4]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	4a09      	ldr	r2, [pc, #36]	@ (80059ec <vTaskSwitchContext+0xb8>)
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	4a06      	ldr	r2, [pc, #24]	@ (80059e4 <vTaskSwitchContext+0xb0>)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6013      	str	r3, [r2, #0]
}
 80059d0:	bf00      	nop
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	20005424 	.word	0x20005424
 80059e0:	20005410 	.word	0x20005410
 80059e4:	20005404 	.word	0x20005404
 80059e8:	20004f2c 	.word	0x20004f2c
 80059ec:	20004f28 	.word	0x20004f28

080059f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10b      	bne.n	8005a18 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	60fb      	str	r3, [r7, #12]
}
 8005a12:	bf00      	nop
 8005a14:	bf00      	nop
 8005a16:	e7fd      	b.n	8005a14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a18:	4b07      	ldr	r3, [pc, #28]	@ (8005a38 <vTaskPlaceOnEventList+0x48>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3318      	adds	r3, #24
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7fe fe70 	bl	8004706 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a26:	2101      	movs	r1, #1
 8005a28:	6838      	ldr	r0, [r7, #0]
 8005a2a:	f000 faa9 	bl	8005f80 <prvAddCurrentTaskToDelayedList>
}
 8005a2e:	bf00      	nop
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20004f28 	.word	0x20004f28

08005a3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10b      	bne.n	8005a66 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	617b      	str	r3, [r7, #20]
}
 8005a60:	bf00      	nop
 8005a62:	bf00      	nop
 8005a64:	e7fd      	b.n	8005a62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a66:	4b0a      	ldr	r3, [pc, #40]	@ (8005a90 <vTaskPlaceOnEventListRestricted+0x54>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3318      	adds	r3, #24
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f7fe fe25 	bl	80046be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a7e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	68b8      	ldr	r0, [r7, #8]
 8005a84:	f000 fa7c 	bl	8005f80 <prvAddCurrentTaskToDelayedList>
	}
 8005a88:	bf00      	nop
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20004f28 	.word	0x20004f28

08005a94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10b      	bne.n	8005ac2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	60fb      	str	r3, [r7, #12]
}
 8005abc:	bf00      	nop
 8005abe:	bf00      	nop
 8005ac0:	e7fd      	b.n	8005abe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	3318      	adds	r3, #24
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fe fe56 	bl	8004778 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005acc:	4b1d      	ldr	r3, [pc, #116]	@ (8005b44 <xTaskRemoveFromEventList+0xb0>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d11d      	bne.n	8005b10 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fe fe4d 	bl	8004778 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae2:	4b19      	ldr	r3, [pc, #100]	@ (8005b48 <xTaskRemoveFromEventList+0xb4>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d903      	bls.n	8005af2 <xTaskRemoveFromEventList+0x5e>
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aee:	4a16      	ldr	r2, [pc, #88]	@ (8005b48 <xTaskRemoveFromEventList+0xb4>)
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4a13      	ldr	r2, [pc, #76]	@ (8005b4c <xTaskRemoveFromEventList+0xb8>)
 8005b00:	441a      	add	r2, r3
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	3304      	adds	r3, #4
 8005b06:	4619      	mov	r1, r3
 8005b08:	4610      	mov	r0, r2
 8005b0a:	f7fe fdd8 	bl	80046be <vListInsertEnd>
 8005b0e:	e005      	b.n	8005b1c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	3318      	adds	r3, #24
 8005b14:	4619      	mov	r1, r3
 8005b16:	480e      	ldr	r0, [pc, #56]	@ (8005b50 <xTaskRemoveFromEventList+0xbc>)
 8005b18:	f7fe fdd1 	bl	80046be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b20:	4b0c      	ldr	r3, [pc, #48]	@ (8005b54 <xTaskRemoveFromEventList+0xc0>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d905      	bls.n	8005b36 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b58 <xTaskRemoveFromEventList+0xc4>)
 8005b30:	2201      	movs	r2, #1
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	e001      	b.n	8005b3a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b3a:	697b      	ldr	r3, [r7, #20]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20005424 	.word	0x20005424
 8005b48:	20005404 	.word	0x20005404
 8005b4c:	20004f2c 	.word	0x20004f2c
 8005b50:	200053bc 	.word	0x200053bc
 8005b54:	20004f28 	.word	0x20004f28
 8005b58:	20005410 	.word	0x20005410

08005b5c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10b      	bne.n	8005b82 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	60fb      	str	r3, [r7, #12]
}
 8005b7c:	bf00      	nop
 8005b7e:	bf00      	nop
 8005b80:	e7fd      	b.n	8005b7e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8005b82:	f000 fed9 	bl	8006938 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b86:	4b07      	ldr	r3, [pc, #28]	@ (8005ba4 <vTaskSetTimeOutState+0x48>)
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8005b8e:	4b06      	ldr	r3, [pc, #24]	@ (8005ba8 <vTaskSetTimeOutState+0x4c>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8005b96:	f000 ff01 	bl	800699c <vPortExitCritical>
}
 8005b9a:	bf00      	nop
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20005414 	.word	0x20005414
 8005ba8:	20005400 	.word	0x20005400

08005bac <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005bb4:	4b06      	ldr	r3, [pc, #24]	@ (8005bd0 <vTaskInternalSetTimeOutState+0x24>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005bbc:	4b05      	ldr	r3, [pc, #20]	@ (8005bd4 <vTaskInternalSetTimeOutState+0x28>)
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	605a      	str	r2, [r3, #4]
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	20005414 	.word	0x20005414
 8005bd4:	20005400 	.word	0x20005400

08005bd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10b      	bne.n	8005c00 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	613b      	str	r3, [r7, #16]
}
 8005bfa:	bf00      	nop
 8005bfc:	bf00      	nop
 8005bfe:	e7fd      	b.n	8005bfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10b      	bne.n	8005c1e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	60fb      	str	r3, [r7, #12]
}
 8005c18:	bf00      	nop
 8005c1a:	bf00      	nop
 8005c1c:	e7fd      	b.n	8005c1a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005c1e:	f000 fe8b 	bl	8006938 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c22:	4b1d      	ldr	r3, [pc, #116]	@ (8005c98 <xTaskCheckForTimeOut+0xc0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c3a:	d102      	bne.n	8005c42 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61fb      	str	r3, [r7, #28]
 8005c40:	e023      	b.n	8005c8a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	4b15      	ldr	r3, [pc, #84]	@ (8005c9c <xTaskCheckForTimeOut+0xc4>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d007      	beq.n	8005c5e <xTaskCheckForTimeOut+0x86>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d302      	bcc.n	8005c5e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	61fb      	str	r3, [r7, #28]
 8005c5c:	e015      	b.n	8005c8a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d20b      	bcs.n	8005c80 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	1ad2      	subs	r2, r2, r3
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7ff ff99 	bl	8005bac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61fb      	str	r3, [r7, #28]
 8005c7e:	e004      	b.n	8005c8a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c86:	2301      	movs	r3, #1
 8005c88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c8a:	f000 fe87 	bl	800699c <vPortExitCritical>

	return xReturn;
 8005c8e:	69fb      	ldr	r3, [r7, #28]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3720      	adds	r7, #32
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20005400 	.word	0x20005400
 8005c9c:	20005414 	.word	0x20005414

08005ca0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ca4:	4b03      	ldr	r3, [pc, #12]	@ (8005cb4 <vTaskMissedYield+0x14>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]
}
 8005caa:	bf00      	nop
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	20005410 	.word	0x20005410

08005cb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005cc0:	f000 f852 	bl	8005d68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005cc4:	4b06      	ldr	r3, [pc, #24]	@ (8005ce0 <prvIdleTask+0x28>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d9f9      	bls.n	8005cc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ccc:	4b05      	ldr	r3, [pc, #20]	@ (8005ce4 <prvIdleTask+0x2c>)
 8005cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005cdc:	e7f0      	b.n	8005cc0 <prvIdleTask+0x8>
 8005cde:	bf00      	nop
 8005ce0:	20004f2c 	.word	0x20004f2c
 8005ce4:	e000ed04 	.word	0xe000ed04

08005ce8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cee:	2300      	movs	r3, #0
 8005cf0:	607b      	str	r3, [r7, #4]
 8005cf2:	e00c      	b.n	8005d0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4a12      	ldr	r2, [pc, #72]	@ (8005d48 <prvInitialiseTaskLists+0x60>)
 8005d00:	4413      	add	r3, r2
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fe fcae 	bl	8004664 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	607b      	str	r3, [r7, #4]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b37      	cmp	r3, #55	@ 0x37
 8005d12:	d9ef      	bls.n	8005cf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d14:	480d      	ldr	r0, [pc, #52]	@ (8005d4c <prvInitialiseTaskLists+0x64>)
 8005d16:	f7fe fca5 	bl	8004664 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d1a:	480d      	ldr	r0, [pc, #52]	@ (8005d50 <prvInitialiseTaskLists+0x68>)
 8005d1c:	f7fe fca2 	bl	8004664 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d20:	480c      	ldr	r0, [pc, #48]	@ (8005d54 <prvInitialiseTaskLists+0x6c>)
 8005d22:	f7fe fc9f 	bl	8004664 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d26:	480c      	ldr	r0, [pc, #48]	@ (8005d58 <prvInitialiseTaskLists+0x70>)
 8005d28:	f7fe fc9c 	bl	8004664 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d2c:	480b      	ldr	r0, [pc, #44]	@ (8005d5c <prvInitialiseTaskLists+0x74>)
 8005d2e:	f7fe fc99 	bl	8004664 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d32:	4b0b      	ldr	r3, [pc, #44]	@ (8005d60 <prvInitialiseTaskLists+0x78>)
 8005d34:	4a05      	ldr	r2, [pc, #20]	@ (8005d4c <prvInitialiseTaskLists+0x64>)
 8005d36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d38:	4b0a      	ldr	r3, [pc, #40]	@ (8005d64 <prvInitialiseTaskLists+0x7c>)
 8005d3a:	4a05      	ldr	r2, [pc, #20]	@ (8005d50 <prvInitialiseTaskLists+0x68>)
 8005d3c:	601a      	str	r2, [r3, #0]
}
 8005d3e:	bf00      	nop
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20004f2c 	.word	0x20004f2c
 8005d4c:	2000538c 	.word	0x2000538c
 8005d50:	200053a0 	.word	0x200053a0
 8005d54:	200053bc 	.word	0x200053bc
 8005d58:	200053d0 	.word	0x200053d0
 8005d5c:	200053e8 	.word	0x200053e8
 8005d60:	200053b4 	.word	0x200053b4
 8005d64:	200053b8 	.word	0x200053b8

08005d68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d6e:	e019      	b.n	8005da4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d70:	f000 fde2 	bl	8006938 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d74:	4b10      	ldr	r3, [pc, #64]	@ (8005db8 <prvCheckTasksWaitingTermination+0x50>)
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fe fcf9 	bl	8004778 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d86:	4b0d      	ldr	r3, [pc, #52]	@ (8005dbc <prvCheckTasksWaitingTermination+0x54>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8005dbc <prvCheckTasksWaitingTermination+0x54>)
 8005d8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d90:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc0 <prvCheckTasksWaitingTermination+0x58>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3b01      	subs	r3, #1
 8005d96:	4a0a      	ldr	r2, [pc, #40]	@ (8005dc0 <prvCheckTasksWaitingTermination+0x58>)
 8005d98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d9a:	f000 fdff 	bl	800699c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f810 	bl	8005dc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005da4:	4b06      	ldr	r3, [pc, #24]	@ (8005dc0 <prvCheckTasksWaitingTermination+0x58>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e1      	bne.n	8005d70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005dac:	bf00      	nop
 8005dae:	bf00      	nop
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	200053d0 	.word	0x200053d0
 8005dbc:	200053fc 	.word	0x200053fc
 8005dc0:	200053e4 	.word	0x200053e4

08005dc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d108      	bne.n	8005de8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 ff9c 	bl	8006d18 <vPortFree>
				vPortFree( pxTCB );
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 ff99 	bl	8006d18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005de6:	e019      	b.n	8005e1c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d103      	bne.n	8005dfa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 ff90 	bl	8006d18 <vPortFree>
	}
 8005df8:	e010      	b.n	8005e1c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d00b      	beq.n	8005e1c <prvDeleteTCB+0x58>
	__asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	60fb      	str	r3, [r7, #12]
}
 8005e16:	bf00      	nop
 8005e18:	bf00      	nop
 8005e1a:	e7fd      	b.n	8005e18 <prvDeleteTCB+0x54>
	}
 8005e1c:	bf00      	nop
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e5c <prvResetNextTaskUnblockTime+0x38>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d104      	bne.n	8005e3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e34:	4b0a      	ldr	r3, [pc, #40]	@ (8005e60 <prvResetNextTaskUnblockTime+0x3c>)
 8005e36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e3c:	e008      	b.n	8005e50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e3e:	4b07      	ldr	r3, [pc, #28]	@ (8005e5c <prvResetNextTaskUnblockTime+0x38>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	4a04      	ldr	r2, [pc, #16]	@ (8005e60 <prvResetNextTaskUnblockTime+0x3c>)
 8005e4e:	6013      	str	r3, [r2, #0]
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	200053b4 	.word	0x200053b4
 8005e60:	2000541c 	.word	0x2000541c

08005e64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e98 <xTaskGetSchedulerState+0x34>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d102      	bne.n	8005e78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e72:	2301      	movs	r3, #1
 8005e74:	607b      	str	r3, [r7, #4]
 8005e76:	e008      	b.n	8005e8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e78:	4b08      	ldr	r3, [pc, #32]	@ (8005e9c <xTaskGetSchedulerState+0x38>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d102      	bne.n	8005e86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e80:	2302      	movs	r3, #2
 8005e82:	607b      	str	r3, [r7, #4]
 8005e84:	e001      	b.n	8005e8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e86:	2300      	movs	r3, #0
 8005e88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e8a:	687b      	ldr	r3, [r7, #4]
	}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	20005408 	.word	0x20005408
 8005e9c:	20005424 	.word	0x20005424

08005ea0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d058      	beq.n	8005f68 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8005f74 <xTaskPriorityDisinherit+0xd4>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d00b      	beq.n	8005ed8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	60fb      	str	r3, [r7, #12]
}
 8005ed2:	bf00      	nop
 8005ed4:	bf00      	nop
 8005ed6:	e7fd      	b.n	8005ed4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10b      	bne.n	8005ef8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	60bb      	str	r3, [r7, #8]
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	e7fd      	b.n	8005ef4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005efc:	1e5a      	subs	r2, r3, #1
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d02c      	beq.n	8005f68 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d128      	bne.n	8005f68 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	3304      	adds	r3, #4
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fe fc2c 	bl	8004778 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f38:	4b0f      	ldr	r3, [pc, #60]	@ (8005f78 <xTaskPriorityDisinherit+0xd8>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d903      	bls.n	8005f48 <xTaskPriorityDisinherit+0xa8>
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f44:	4a0c      	ldr	r2, [pc, #48]	@ (8005f78 <xTaskPriorityDisinherit+0xd8>)
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4a09      	ldr	r2, [pc, #36]	@ (8005f7c <xTaskPriorityDisinherit+0xdc>)
 8005f56:	441a      	add	r2, r3
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4610      	mov	r0, r2
 8005f60:	f7fe fbad 	bl	80046be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f64:	2301      	movs	r3, #1
 8005f66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f68:	697b      	ldr	r3, [r7, #20]
	}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20004f28 	.word	0x20004f28
 8005f78:	20005404 	.word	0x20005404
 8005f7c:	20004f2c 	.word	0x20004f2c

08005f80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f8a:	4b21      	ldr	r3, [pc, #132]	@ (8006010 <prvAddCurrentTaskToDelayedList+0x90>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f90:	4b20      	ldr	r3, [pc, #128]	@ (8006014 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3304      	adds	r3, #4
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fe fbee 	bl	8004778 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fa2:	d10a      	bne.n	8005fba <prvAddCurrentTaskToDelayedList+0x3a>
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d007      	beq.n	8005fba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005faa:	4b1a      	ldr	r3, [pc, #104]	@ (8006014 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4819      	ldr	r0, [pc, #100]	@ (8006018 <prvAddCurrentTaskToDelayedList+0x98>)
 8005fb4:	f7fe fb83 	bl	80046be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005fb8:	e026      	b.n	8006008 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005fc2:	4b14      	ldr	r3, [pc, #80]	@ (8006014 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d209      	bcs.n	8005fe6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fd2:	4b12      	ldr	r3, [pc, #72]	@ (800601c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8006014 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3304      	adds	r3, #4
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4610      	mov	r0, r2
 8005fe0:	f7fe fb91 	bl	8004706 <vListInsert>
}
 8005fe4:	e010      	b.n	8006008 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8006020 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4b0a      	ldr	r3, [pc, #40]	@ (8006014 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	f7fe fb87 	bl	8004706 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8006024 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d202      	bcs.n	8006008 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006002:	4a08      	ldr	r2, [pc, #32]	@ (8006024 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	6013      	str	r3, [r2, #0]
}
 8006008:	bf00      	nop
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20005400 	.word	0x20005400
 8006014:	20004f28 	.word	0x20004f28
 8006018:	200053e8 	.word	0x200053e8
 800601c:	200053b8 	.word	0x200053b8
 8006020:	200053b4 	.word	0x200053b4
 8006024:	2000541c 	.word	0x2000541c

08006028 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08a      	sub	sp, #40	@ 0x28
 800602c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800602e:	2300      	movs	r3, #0
 8006030:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006032:	f000 fb13 	bl	800665c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006036:	4b1d      	ldr	r3, [pc, #116]	@ (80060ac <xTimerCreateTimerTask+0x84>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d021      	beq.n	8006082 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800603e:	2300      	movs	r3, #0
 8006040:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006042:	2300      	movs	r3, #0
 8006044:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006046:	1d3a      	adds	r2, r7, #4
 8006048:	f107 0108 	add.w	r1, r7, #8
 800604c:	f107 030c 	add.w	r3, r7, #12
 8006050:	4618      	mov	r0, r3
 8006052:	f7fe faed 	bl	8004630 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	9202      	str	r2, [sp, #8]
 800605e:	9301      	str	r3, [sp, #4]
 8006060:	2302      	movs	r3, #2
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	2300      	movs	r3, #0
 8006066:	460a      	mov	r2, r1
 8006068:	4911      	ldr	r1, [pc, #68]	@ (80060b0 <xTimerCreateTimerTask+0x88>)
 800606a:	4812      	ldr	r0, [pc, #72]	@ (80060b4 <xTimerCreateTimerTask+0x8c>)
 800606c:	f7ff f8a8 	bl	80051c0 <xTaskCreateStatic>
 8006070:	4603      	mov	r3, r0
 8006072:	4a11      	ldr	r2, [pc, #68]	@ (80060b8 <xTimerCreateTimerTask+0x90>)
 8006074:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006076:	4b10      	ldr	r3, [pc, #64]	@ (80060b8 <xTimerCreateTimerTask+0x90>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800607e:	2301      	movs	r3, #1
 8006080:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10b      	bne.n	80060a0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	613b      	str	r3, [r7, #16]
}
 800609a:	bf00      	nop
 800609c:	bf00      	nop
 800609e:	e7fd      	b.n	800609c <xTimerCreateTimerTask+0x74>
	return xReturn;
 80060a0:	697b      	ldr	r3, [r7, #20]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3718      	adds	r7, #24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20005458 	.word	0x20005458
 80060b0:	0801495c 	.word	0x0801495c
 80060b4:	080061f5 	.word	0x080061f5
 80060b8:	2000545c 	.word	0x2000545c

080060bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08a      	sub	sp, #40	@ 0x28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10b      	bne.n	80060ec <xTimerGenericCommand+0x30>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	623b      	str	r3, [r7, #32]
}
 80060e6:	bf00      	nop
 80060e8:	bf00      	nop
 80060ea:	e7fd      	b.n	80060e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80060ec:	4b19      	ldr	r3, [pc, #100]	@ (8006154 <xTimerGenericCommand+0x98>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d02a      	beq.n	800614a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b05      	cmp	r3, #5
 8006104:	dc18      	bgt.n	8006138 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006106:	f7ff fead 	bl	8005e64 <xTaskGetSchedulerState>
 800610a:	4603      	mov	r3, r0
 800610c:	2b02      	cmp	r3, #2
 800610e:	d109      	bne.n	8006124 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006110:	4b10      	ldr	r3, [pc, #64]	@ (8006154 <xTimerGenericCommand+0x98>)
 8006112:	6818      	ldr	r0, [r3, #0]
 8006114:	f107 0110 	add.w	r1, r7, #16
 8006118:	2300      	movs	r3, #0
 800611a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800611c:	f7fe fc60 	bl	80049e0 <xQueueGenericSend>
 8006120:	6278      	str	r0, [r7, #36]	@ 0x24
 8006122:	e012      	b.n	800614a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006124:	4b0b      	ldr	r3, [pc, #44]	@ (8006154 <xTimerGenericCommand+0x98>)
 8006126:	6818      	ldr	r0, [r3, #0]
 8006128:	f107 0110 	add.w	r1, r7, #16
 800612c:	2300      	movs	r3, #0
 800612e:	2200      	movs	r2, #0
 8006130:	f7fe fc56 	bl	80049e0 <xQueueGenericSend>
 8006134:	6278      	str	r0, [r7, #36]	@ 0x24
 8006136:	e008      	b.n	800614a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006138:	4b06      	ldr	r3, [pc, #24]	@ (8006154 <xTimerGenericCommand+0x98>)
 800613a:	6818      	ldr	r0, [r3, #0]
 800613c:	f107 0110 	add.w	r1, r7, #16
 8006140:	2300      	movs	r3, #0
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	f7fe fd4e 	bl	8004be4 <xQueueGenericSendFromISR>
 8006148:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800614c:	4618      	mov	r0, r3
 800614e:	3728      	adds	r7, #40	@ 0x28
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20005458 	.word	0x20005458

08006158 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b088      	sub	sp, #32
 800615c:	af02      	add	r7, sp, #8
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006162:	4b23      	ldr	r3, [pc, #140]	@ (80061f0 <prvProcessExpiredTimer+0x98>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	3304      	adds	r3, #4
 8006170:	4618      	mov	r0, r3
 8006172:	f7fe fb01 	bl	8004778 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d023      	beq.n	80061cc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	699a      	ldr	r2, [r3, #24]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	18d1      	adds	r1, r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	6978      	ldr	r0, [r7, #20]
 8006192:	f000 f8d5 	bl	8006340 <prvInsertTimerInActiveList>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d020      	beq.n	80061de <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800619c:	2300      	movs	r3, #0
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	2300      	movs	r3, #0
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	2100      	movs	r1, #0
 80061a6:	6978      	ldr	r0, [r7, #20]
 80061a8:	f7ff ff88 	bl	80060bc <xTimerGenericCommand>
 80061ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d114      	bne.n	80061de <prvProcessExpiredTimer+0x86>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	60fb      	str	r3, [r7, #12]
}
 80061c6:	bf00      	nop
 80061c8:	bf00      	nop
 80061ca:	e7fd      	b.n	80061c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061d2:	f023 0301 	bic.w	r3, r3, #1
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	6978      	ldr	r0, [r7, #20]
 80061e4:	4798      	blx	r3
}
 80061e6:	bf00      	nop
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20005450 	.word	0x20005450

080061f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061fc:	f107 0308 	add.w	r3, r7, #8
 8006200:	4618      	mov	r0, r3
 8006202:	f000 f859 	bl	80062b8 <prvGetNextExpireTime>
 8006206:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	4619      	mov	r1, r3
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 f805 	bl	800621c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006212:	f000 f8d7 	bl	80063c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006216:	bf00      	nop
 8006218:	e7f0      	b.n	80061fc <prvTimerTask+0x8>
	...

0800621c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006226:	f7ff fa0f 	bl	8005648 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800622a:	f107 0308 	add.w	r3, r7, #8
 800622e:	4618      	mov	r0, r3
 8006230:	f000 f866 	bl	8006300 <prvSampleTimeNow>
 8006234:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d130      	bne.n	800629e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10a      	bne.n	8006258 <prvProcessTimerOrBlockTask+0x3c>
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	429a      	cmp	r2, r3
 8006248:	d806      	bhi.n	8006258 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800624a:	f7ff fa0b 	bl	8005664 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800624e:	68f9      	ldr	r1, [r7, #12]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7ff ff81 	bl	8006158 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006256:	e024      	b.n	80062a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d008      	beq.n	8006270 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800625e:	4b13      	ldr	r3, [pc, #76]	@ (80062ac <prvProcessTimerOrBlockTask+0x90>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <prvProcessTimerOrBlockTask+0x50>
 8006268:	2301      	movs	r3, #1
 800626a:	e000      	b.n	800626e <prvProcessTimerOrBlockTask+0x52>
 800626c:	2300      	movs	r3, #0
 800626e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006270:	4b0f      	ldr	r3, [pc, #60]	@ (80062b0 <prvProcessTimerOrBlockTask+0x94>)
 8006272:	6818      	ldr	r0, [r3, #0]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	4619      	mov	r1, r3
 800627e:	f7fe ff6b 	bl	8005158 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006282:	f7ff f9ef 	bl	8005664 <xTaskResumeAll>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10a      	bne.n	80062a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800628c:	4b09      	ldr	r3, [pc, #36]	@ (80062b4 <prvProcessTimerOrBlockTask+0x98>)
 800628e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	f3bf 8f6f 	isb	sy
}
 800629c:	e001      	b.n	80062a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800629e:	f7ff f9e1 	bl	8005664 <xTaskResumeAll>
}
 80062a2:	bf00      	nop
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20005454 	.word	0x20005454
 80062b0:	20005458 	.word	0x20005458
 80062b4:	e000ed04 	.word	0xe000ed04

080062b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80062c0:	4b0e      	ldr	r3, [pc, #56]	@ (80062fc <prvGetNextExpireTime+0x44>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <prvGetNextExpireTime+0x16>
 80062ca:	2201      	movs	r2, #1
 80062cc:	e000      	b.n	80062d0 <prvGetNextExpireTime+0x18>
 80062ce:	2200      	movs	r2, #0
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d105      	bne.n	80062e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062dc:	4b07      	ldr	r3, [pc, #28]	@ (80062fc <prvGetNextExpireTime+0x44>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	e001      	b.n	80062ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80062ec:	68fb      	ldr	r3, [r7, #12]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	20005450 	.word	0x20005450

08006300 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006308:	f7ff fa4a 	bl	80057a0 <xTaskGetTickCount>
 800630c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800630e:	4b0b      	ldr	r3, [pc, #44]	@ (800633c <prvSampleTimeNow+0x3c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	429a      	cmp	r2, r3
 8006316:	d205      	bcs.n	8006324 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006318:	f000 f93a 	bl	8006590 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	e002      	b.n	800632a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800632a:	4a04      	ldr	r2, [pc, #16]	@ (800633c <prvSampleTimeNow+0x3c>)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006330:	68fb      	ldr	r3, [r7, #12]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20005460 	.word	0x20005460

08006340 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800634e:	2300      	movs	r3, #0
 8006350:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	429a      	cmp	r2, r3
 8006364:	d812      	bhi.n	800638c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	1ad2      	subs	r2, r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	429a      	cmp	r2, r3
 8006372:	d302      	bcc.n	800637a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006374:	2301      	movs	r3, #1
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	e01b      	b.n	80063b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800637a:	4b10      	ldr	r3, [pc, #64]	@ (80063bc <prvInsertTimerInActiveList+0x7c>)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3304      	adds	r3, #4
 8006382:	4619      	mov	r1, r3
 8006384:	4610      	mov	r0, r2
 8006386:	f7fe f9be 	bl	8004706 <vListInsert>
 800638a:	e012      	b.n	80063b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d206      	bcs.n	80063a2 <prvInsertTimerInActiveList+0x62>
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d302      	bcc.n	80063a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800639c:	2301      	movs	r3, #1
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	e007      	b.n	80063b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063a2:	4b07      	ldr	r3, [pc, #28]	@ (80063c0 <prvInsertTimerInActiveList+0x80>)
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3304      	adds	r3, #4
 80063aa:	4619      	mov	r1, r3
 80063ac:	4610      	mov	r0, r2
 80063ae:	f7fe f9aa 	bl	8004706 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80063b2:	697b      	ldr	r3, [r7, #20]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	20005454 	.word	0x20005454
 80063c0:	20005450 	.word	0x20005450

080063c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08e      	sub	sp, #56	@ 0x38
 80063c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063ca:	e0ce      	b.n	800656a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	da19      	bge.n	8006406 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80063d2:	1d3b      	adds	r3, r7, #4
 80063d4:	3304      	adds	r3, #4
 80063d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80063d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10b      	bne.n	80063f6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	61fb      	str	r3, [r7, #28]
}
 80063f0:	bf00      	nop
 80063f2:	bf00      	nop
 80063f4:	e7fd      	b.n	80063f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80063f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063fc:	6850      	ldr	r0, [r2, #4]
 80063fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006400:	6892      	ldr	r2, [r2, #8]
 8006402:	4611      	mov	r1, r2
 8006404:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	f2c0 80ae 	blt.w	800656a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d004      	beq.n	8006424 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800641a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641c:	3304      	adds	r3, #4
 800641e:	4618      	mov	r0, r3
 8006420:	f7fe f9aa 	bl	8004778 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006424:	463b      	mov	r3, r7
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff ff6a 	bl	8006300 <prvSampleTimeNow>
 800642c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b09      	cmp	r3, #9
 8006432:	f200 8097 	bhi.w	8006564 <prvProcessReceivedCommands+0x1a0>
 8006436:	a201      	add	r2, pc, #4	@ (adr r2, 800643c <prvProcessReceivedCommands+0x78>)
 8006438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643c:	08006465 	.word	0x08006465
 8006440:	08006465 	.word	0x08006465
 8006444:	08006465 	.word	0x08006465
 8006448:	080064db 	.word	0x080064db
 800644c:	080064ef 	.word	0x080064ef
 8006450:	0800653b 	.word	0x0800653b
 8006454:	08006465 	.word	0x08006465
 8006458:	08006465 	.word	0x08006465
 800645c:	080064db 	.word	0x080064db
 8006460:	080064ef 	.word	0x080064ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006466:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800646a:	f043 0301 	orr.w	r3, r3, #1
 800646e:	b2da      	uxtb	r2, r3
 8006470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006472:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	18d1      	adds	r1, r2, r3
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006484:	f7ff ff5c 	bl	8006340 <prvInsertTimerInActiveList>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d06c      	beq.n	8006568 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800648e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006494:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006498:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d061      	beq.n	8006568 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	441a      	add	r2, r3
 80064ac:	2300      	movs	r3, #0
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	2300      	movs	r3, #0
 80064b2:	2100      	movs	r1, #0
 80064b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064b6:	f7ff fe01 	bl	80060bc <xTimerGenericCommand>
 80064ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d152      	bne.n	8006568 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80064c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	61bb      	str	r3, [r7, #24]
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop
 80064d8:	e7fd      	b.n	80064d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064e0:	f023 0301 	bic.w	r3, r3, #1
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80064ec:	e03d      	b.n	800656a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064f4:	f043 0301 	orr.w	r3, r3, #1
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006504:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10b      	bne.n	8006526 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	617b      	str	r3, [r7, #20]
}
 8006520:	bf00      	nop
 8006522:	bf00      	nop
 8006524:	e7fd      	b.n	8006522 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652c:	18d1      	adds	r1, r2, r3
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006534:	f7ff ff04 	bl	8006340 <prvInsertTimerInActiveList>
					break;
 8006538:	e017      	b.n	800656a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800653a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d103      	bne.n	8006550 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006548:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800654a:	f000 fbe5 	bl	8006d18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800654e:	e00c      	b.n	800656a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006552:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006556:	f023 0301 	bic.w	r3, r3, #1
 800655a:	b2da      	uxtb	r2, r3
 800655c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006562:	e002      	b.n	800656a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006564:	bf00      	nop
 8006566:	e000      	b.n	800656a <prvProcessReceivedCommands+0x1a6>
					break;
 8006568:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800656a:	4b08      	ldr	r3, [pc, #32]	@ (800658c <prvProcessReceivedCommands+0x1c8>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	1d39      	adds	r1, r7, #4
 8006570:	2200      	movs	r2, #0
 8006572:	4618      	mov	r0, r3
 8006574:	f7fe fbd4 	bl	8004d20 <xQueueReceive>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	f47f af26 	bne.w	80063cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006580:	bf00      	nop
 8006582:	bf00      	nop
 8006584:	3730      	adds	r7, #48	@ 0x30
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	20005458 	.word	0x20005458

08006590 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b088      	sub	sp, #32
 8006594:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006596:	e049      	b.n	800662c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006598:	4b2e      	ldr	r3, [pc, #184]	@ (8006654 <prvSwitchTimerLists+0xc4>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065a2:	4b2c      	ldr	r3, [pc, #176]	@ (8006654 <prvSwitchTimerLists+0xc4>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3304      	adds	r3, #4
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fe f8e1 	bl	8004778 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d02f      	beq.n	800662c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	4413      	add	r3, r2
 80065d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d90e      	bls.n	80065fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006654 <prvSwitchTimerLists+0xc4>)
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3304      	adds	r3, #4
 80065f2:	4619      	mov	r1, r3
 80065f4:	4610      	mov	r0, r2
 80065f6:	f7fe f886 	bl	8004706 <vListInsert>
 80065fa:	e017      	b.n	800662c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065fc:	2300      	movs	r3, #0
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	2300      	movs	r3, #0
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	2100      	movs	r1, #0
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f7ff fd58 	bl	80060bc <xTimerGenericCommand>
 800660c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10b      	bne.n	800662c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	603b      	str	r3, [r7, #0]
}
 8006626:	bf00      	nop
 8006628:	bf00      	nop
 800662a:	e7fd      	b.n	8006628 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800662c:	4b09      	ldr	r3, [pc, #36]	@ (8006654 <prvSwitchTimerLists+0xc4>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1b0      	bne.n	8006598 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006636:	4b07      	ldr	r3, [pc, #28]	@ (8006654 <prvSwitchTimerLists+0xc4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800663c:	4b06      	ldr	r3, [pc, #24]	@ (8006658 <prvSwitchTimerLists+0xc8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a04      	ldr	r2, [pc, #16]	@ (8006654 <prvSwitchTimerLists+0xc4>)
 8006642:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006644:	4a04      	ldr	r2, [pc, #16]	@ (8006658 <prvSwitchTimerLists+0xc8>)
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	6013      	str	r3, [r2, #0]
}
 800664a:	bf00      	nop
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20005450 	.word	0x20005450
 8006658:	20005454 	.word	0x20005454

0800665c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006662:	f000 f969 	bl	8006938 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006666:	4b15      	ldr	r3, [pc, #84]	@ (80066bc <prvCheckForValidListAndQueue+0x60>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d120      	bne.n	80066b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800666e:	4814      	ldr	r0, [pc, #80]	@ (80066c0 <prvCheckForValidListAndQueue+0x64>)
 8006670:	f7fd fff8 	bl	8004664 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006674:	4813      	ldr	r0, [pc, #76]	@ (80066c4 <prvCheckForValidListAndQueue+0x68>)
 8006676:	f7fd fff5 	bl	8004664 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800667a:	4b13      	ldr	r3, [pc, #76]	@ (80066c8 <prvCheckForValidListAndQueue+0x6c>)
 800667c:	4a10      	ldr	r2, [pc, #64]	@ (80066c0 <prvCheckForValidListAndQueue+0x64>)
 800667e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006680:	4b12      	ldr	r3, [pc, #72]	@ (80066cc <prvCheckForValidListAndQueue+0x70>)
 8006682:	4a10      	ldr	r2, [pc, #64]	@ (80066c4 <prvCheckForValidListAndQueue+0x68>)
 8006684:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006686:	2300      	movs	r3, #0
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	4b11      	ldr	r3, [pc, #68]	@ (80066d0 <prvCheckForValidListAndQueue+0x74>)
 800668c:	4a11      	ldr	r2, [pc, #68]	@ (80066d4 <prvCheckForValidListAndQueue+0x78>)
 800668e:	2110      	movs	r1, #16
 8006690:	200a      	movs	r0, #10
 8006692:	f7fe f905 	bl	80048a0 <xQueueGenericCreateStatic>
 8006696:	4603      	mov	r3, r0
 8006698:	4a08      	ldr	r2, [pc, #32]	@ (80066bc <prvCheckForValidListAndQueue+0x60>)
 800669a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800669c:	4b07      	ldr	r3, [pc, #28]	@ (80066bc <prvCheckForValidListAndQueue+0x60>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d005      	beq.n	80066b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80066a4:	4b05      	ldr	r3, [pc, #20]	@ (80066bc <prvCheckForValidListAndQueue+0x60>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	490b      	ldr	r1, [pc, #44]	@ (80066d8 <prvCheckForValidListAndQueue+0x7c>)
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fe fd2a 	bl	8005104 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066b0:	f000 f974 	bl	800699c <vPortExitCritical>
}
 80066b4:	bf00      	nop
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20005458 	.word	0x20005458
 80066c0:	20005428 	.word	0x20005428
 80066c4:	2000543c 	.word	0x2000543c
 80066c8:	20005450 	.word	0x20005450
 80066cc:	20005454 	.word	0x20005454
 80066d0:	20005504 	.word	0x20005504
 80066d4:	20005464 	.word	0x20005464
 80066d8:	08014964 	.word	0x08014964

080066dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3b04      	subs	r3, #4
 80066ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3b04      	subs	r3, #4
 80066fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f023 0201 	bic.w	r2, r3, #1
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	3b04      	subs	r3, #4
 800670a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800670c:	4a0c      	ldr	r2, [pc, #48]	@ (8006740 <pxPortInitialiseStack+0x64>)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3b14      	subs	r3, #20
 8006716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3b04      	subs	r3, #4
 8006722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f06f 0202 	mvn.w	r2, #2
 800672a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3b20      	subs	r3, #32
 8006730:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006732:	68fb      	ldr	r3, [r7, #12]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	08006745 	.word	0x08006745

08006744 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800674a:	2300      	movs	r3, #0
 800674c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800674e:	4b13      	ldr	r3, [pc, #76]	@ (800679c <prvTaskExitError+0x58>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006756:	d00b      	beq.n	8006770 <prvTaskExitError+0x2c>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	60fb      	str	r3, [r7, #12]
}
 800676a:	bf00      	nop
 800676c:	bf00      	nop
 800676e:	e7fd      	b.n	800676c <prvTaskExitError+0x28>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	60bb      	str	r3, [r7, #8]
}
 8006782:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006784:	bf00      	nop
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0fc      	beq.n	8006786 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800678c:	bf00      	nop
 800678e:	bf00      	nop
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	20000010 	.word	0x20000010

080067a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067a0:	4b07      	ldr	r3, [pc, #28]	@ (80067c0 <pxCurrentTCBConst2>)
 80067a2:	6819      	ldr	r1, [r3, #0]
 80067a4:	6808      	ldr	r0, [r1, #0]
 80067a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067aa:	f380 8809 	msr	PSP, r0
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f04f 0000 	mov.w	r0, #0
 80067b6:	f380 8811 	msr	BASEPRI, r0
 80067ba:	4770      	bx	lr
 80067bc:	f3af 8000 	nop.w

080067c0 <pxCurrentTCBConst2>:
 80067c0:	20004f28 	.word	0x20004f28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop

080067c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067c8:	4808      	ldr	r0, [pc, #32]	@ (80067ec <prvPortStartFirstTask+0x24>)
 80067ca:	6800      	ldr	r0, [r0, #0]
 80067cc:	6800      	ldr	r0, [r0, #0]
 80067ce:	f380 8808 	msr	MSP, r0
 80067d2:	f04f 0000 	mov.w	r0, #0
 80067d6:	f380 8814 	msr	CONTROL, r0
 80067da:	b662      	cpsie	i
 80067dc:	b661      	cpsie	f
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	df00      	svc	0
 80067e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067ea:	bf00      	nop
 80067ec:	e000ed08 	.word	0xe000ed08

080067f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067f6:	4b47      	ldr	r3, [pc, #284]	@ (8006914 <xPortStartScheduler+0x124>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a47      	ldr	r2, [pc, #284]	@ (8006918 <xPortStartScheduler+0x128>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d10b      	bne.n	8006818 <xPortStartScheduler+0x28>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	60fb      	str	r3, [r7, #12]
}
 8006812:	bf00      	nop
 8006814:	bf00      	nop
 8006816:	e7fd      	b.n	8006814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006818:	4b3e      	ldr	r3, [pc, #248]	@ (8006914 <xPortStartScheduler+0x124>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a3f      	ldr	r2, [pc, #252]	@ (800691c <xPortStartScheduler+0x12c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d10b      	bne.n	800683a <xPortStartScheduler+0x4a>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	613b      	str	r3, [r7, #16]
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop
 8006838:	e7fd      	b.n	8006836 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800683a:	4b39      	ldr	r3, [pc, #228]	@ (8006920 <xPortStartScheduler+0x130>)
 800683c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	22ff      	movs	r2, #255	@ 0xff
 800684a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	b2db      	uxtb	r3, r3
 8006852:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006854:	78fb      	ldrb	r3, [r7, #3]
 8006856:	b2db      	uxtb	r3, r3
 8006858:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800685c:	b2da      	uxtb	r2, r3
 800685e:	4b31      	ldr	r3, [pc, #196]	@ (8006924 <xPortStartScheduler+0x134>)
 8006860:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006862:	4b31      	ldr	r3, [pc, #196]	@ (8006928 <xPortStartScheduler+0x138>)
 8006864:	2207      	movs	r2, #7
 8006866:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006868:	e009      	b.n	800687e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800686a:	4b2f      	ldr	r3, [pc, #188]	@ (8006928 <xPortStartScheduler+0x138>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3b01      	subs	r3, #1
 8006870:	4a2d      	ldr	r2, [pc, #180]	@ (8006928 <xPortStartScheduler+0x138>)
 8006872:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	b2db      	uxtb	r3, r3
 800687c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800687e:	78fb      	ldrb	r3, [r7, #3]
 8006880:	b2db      	uxtb	r3, r3
 8006882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006886:	2b80      	cmp	r3, #128	@ 0x80
 8006888:	d0ef      	beq.n	800686a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800688a:	4b27      	ldr	r3, [pc, #156]	@ (8006928 <xPortStartScheduler+0x138>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f1c3 0307 	rsb	r3, r3, #7
 8006892:	2b04      	cmp	r3, #4
 8006894:	d00b      	beq.n	80068ae <xPortStartScheduler+0xbe>
	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	60bb      	str	r3, [r7, #8]
}
 80068a8:	bf00      	nop
 80068aa:	bf00      	nop
 80068ac:	e7fd      	b.n	80068aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006928 <xPortStartScheduler+0x138>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006928 <xPortStartScheduler+0x138>)
 80068b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006928 <xPortStartScheduler+0x138>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068c0:	4a19      	ldr	r2, [pc, #100]	@ (8006928 <xPortStartScheduler+0x138>)
 80068c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068cc:	4b17      	ldr	r3, [pc, #92]	@ (800692c <xPortStartScheduler+0x13c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a16      	ldr	r2, [pc, #88]	@ (800692c <xPortStartScheduler+0x13c>)
 80068d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80068d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068d8:	4b14      	ldr	r3, [pc, #80]	@ (800692c <xPortStartScheduler+0x13c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a13      	ldr	r2, [pc, #76]	@ (800692c <xPortStartScheduler+0x13c>)
 80068de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80068e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068e4:	f000 f8da 	bl	8006a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068e8:	4b11      	ldr	r3, [pc, #68]	@ (8006930 <xPortStartScheduler+0x140>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068ee:	f000 f8f9 	bl	8006ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068f2:	4b10      	ldr	r3, [pc, #64]	@ (8006934 <xPortStartScheduler+0x144>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a0f      	ldr	r2, [pc, #60]	@ (8006934 <xPortStartScheduler+0x144>)
 80068f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80068fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068fe:	f7ff ff63 	bl	80067c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006902:	f7ff f817 	bl	8005934 <vTaskSwitchContext>
	prvTaskExitError();
 8006906:	f7ff ff1d 	bl	8006744 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3718      	adds	r7, #24
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	e000ed00 	.word	0xe000ed00
 8006918:	410fc271 	.word	0x410fc271
 800691c:	410fc270 	.word	0x410fc270
 8006920:	e000e400 	.word	0xe000e400
 8006924:	20005554 	.word	0x20005554
 8006928:	20005558 	.word	0x20005558
 800692c:	e000ed20 	.word	0xe000ed20
 8006930:	20000010 	.word	0x20000010
 8006934:	e000ef34 	.word	0xe000ef34

08006938 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	607b      	str	r3, [r7, #4]
}
 8006950:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006952:	4b10      	ldr	r3, [pc, #64]	@ (8006994 <vPortEnterCritical+0x5c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3301      	adds	r3, #1
 8006958:	4a0e      	ldr	r2, [pc, #56]	@ (8006994 <vPortEnterCritical+0x5c>)
 800695a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800695c:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <vPortEnterCritical+0x5c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d110      	bne.n	8006986 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006964:	4b0c      	ldr	r3, [pc, #48]	@ (8006998 <vPortEnterCritical+0x60>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <vPortEnterCritical+0x4e>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	603b      	str	r3, [r7, #0]
}
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	e7fd      	b.n	8006982 <vPortEnterCritical+0x4a>
	}
}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	20000010 	.word	0x20000010
 8006998:	e000ed04 	.word	0xe000ed04

0800699c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069a2:	4b12      	ldr	r3, [pc, #72]	@ (80069ec <vPortExitCritical+0x50>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10b      	bne.n	80069c2 <vPortExitCritical+0x26>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	607b      	str	r3, [r7, #4]
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	e7fd      	b.n	80069be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80069c2:	4b0a      	ldr	r3, [pc, #40]	@ (80069ec <vPortExitCritical+0x50>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	4a08      	ldr	r2, [pc, #32]	@ (80069ec <vPortExitCritical+0x50>)
 80069ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069cc:	4b07      	ldr	r3, [pc, #28]	@ (80069ec <vPortExitCritical+0x50>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d105      	bne.n	80069e0 <vPortExitCritical+0x44>
 80069d4:	2300      	movs	r3, #0
 80069d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	f383 8811 	msr	BASEPRI, r3
}
 80069de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	20000010 	.word	0x20000010

080069f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069f0:	f3ef 8009 	mrs	r0, PSP
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	4b15      	ldr	r3, [pc, #84]	@ (8006a50 <pxCurrentTCBConst>)
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	f01e 0f10 	tst.w	lr, #16
 8006a00:	bf08      	it	eq
 8006a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0a:	6010      	str	r0, [r2, #0]
 8006a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a14:	f380 8811 	msr	BASEPRI, r0
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f7fe ff88 	bl	8005934 <vTaskSwitchContext>
 8006a24:	f04f 0000 	mov.w	r0, #0
 8006a28:	f380 8811 	msr	BASEPRI, r0
 8006a2c:	bc09      	pop	{r0, r3}
 8006a2e:	6819      	ldr	r1, [r3, #0]
 8006a30:	6808      	ldr	r0, [r1, #0]
 8006a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a36:	f01e 0f10 	tst.w	lr, #16
 8006a3a:	bf08      	it	eq
 8006a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a40:	f380 8809 	msr	PSP, r0
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	f3af 8000 	nop.w

08006a50 <pxCurrentTCBConst>:
 8006a50:	20004f28 	.word	0x20004f28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop

08006a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	607b      	str	r3, [r7, #4]
}
 8006a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a72:	f7fe fea5 	bl	80057c0 <xTaskIncrementTick>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a7c:	4b06      	ldr	r3, [pc, #24]	@ (8006a98 <xPortSysTickHandler+0x40>)
 8006a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	2300      	movs	r3, #0
 8006a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	f383 8811 	msr	BASEPRI, r3
}
 8006a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a90:	bf00      	nop
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	e000ed04 	.word	0xe000ed04

08006a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <vPortSetupTimerInterrupt+0x34>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad4 <vPortSetupTimerInterrupt+0x38>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006aac:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad8 <vPortSetupTimerInterrupt+0x3c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8006adc <vPortSetupTimerInterrupt+0x40>)
 8006ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab6:	099b      	lsrs	r3, r3, #6
 8006ab8:	4a09      	ldr	r2, [pc, #36]	@ (8006ae0 <vPortSetupTimerInterrupt+0x44>)
 8006aba:	3b01      	subs	r3, #1
 8006abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006abe:	4b04      	ldr	r3, [pc, #16]	@ (8006ad0 <vPortSetupTimerInterrupt+0x34>)
 8006ac0:	2207      	movs	r2, #7
 8006ac2:	601a      	str	r2, [r3, #0]
}
 8006ac4:	bf00      	nop
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	e000e010 	.word	0xe000e010
 8006ad4:	e000e018 	.word	0xe000e018
 8006ad8:	20000004 	.word	0x20000004
 8006adc:	10624dd3 	.word	0x10624dd3
 8006ae0:	e000e014 	.word	0xe000e014

08006ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006af4 <vPortEnableVFP+0x10>
 8006ae8:	6801      	ldr	r1, [r0, #0]
 8006aea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006aee:	6001      	str	r1, [r0, #0]
 8006af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006af2:	bf00      	nop
 8006af4:	e000ed88 	.word	0xe000ed88

08006af8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006afe:	f3ef 8305 	mrs	r3, IPSR
 8006b02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b0f      	cmp	r3, #15
 8006b08:	d915      	bls.n	8006b36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b0a:	4a18      	ldr	r2, [pc, #96]	@ (8006b6c <vPortValidateInterruptPriority+0x74>)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b14:	4b16      	ldr	r3, [pc, #88]	@ (8006b70 <vPortValidateInterruptPriority+0x78>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	7afa      	ldrb	r2, [r7, #11]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d20b      	bcs.n	8006b36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	607b      	str	r3, [r7, #4]
}
 8006b30:	bf00      	nop
 8006b32:	bf00      	nop
 8006b34:	e7fd      	b.n	8006b32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b36:	4b0f      	ldr	r3, [pc, #60]	@ (8006b74 <vPortValidateInterruptPriority+0x7c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b78 <vPortValidateInterruptPriority+0x80>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d90b      	bls.n	8006b5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	603b      	str	r3, [r7, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	bf00      	nop
 8006b5c:	e7fd      	b.n	8006b5a <vPortValidateInterruptPriority+0x62>
	}
 8006b5e:	bf00      	nop
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	e000e3f0 	.word	0xe000e3f0
 8006b70:	20005554 	.word	0x20005554
 8006b74:	e000ed0c 	.word	0xe000ed0c
 8006b78:	20005558 	.word	0x20005558

08006b7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08a      	sub	sp, #40	@ 0x28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b88:	f7fe fd5e 	bl	8005648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b8c:	4b5c      	ldr	r3, [pc, #368]	@ (8006d00 <pvPortMalloc+0x184>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b94:	f000 f924 	bl	8006de0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b98:	4b5a      	ldr	r3, [pc, #360]	@ (8006d04 <pvPortMalloc+0x188>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f040 8095 	bne.w	8006cd0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01e      	beq.n	8006bea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006bac:	2208      	movs	r2, #8
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d015      	beq.n	8006bea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f023 0307 	bic.w	r3, r3, #7
 8006bc4:	3308      	adds	r3, #8
 8006bc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f003 0307 	and.w	r3, r3, #7
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00b      	beq.n	8006bea <pvPortMalloc+0x6e>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	617b      	str	r3, [r7, #20]
}
 8006be4:	bf00      	nop
 8006be6:	bf00      	nop
 8006be8:	e7fd      	b.n	8006be6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d06f      	beq.n	8006cd0 <pvPortMalloc+0x154>
 8006bf0:	4b45      	ldr	r3, [pc, #276]	@ (8006d08 <pvPortMalloc+0x18c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d86a      	bhi.n	8006cd0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006bfa:	4b44      	ldr	r3, [pc, #272]	@ (8006d0c <pvPortMalloc+0x190>)
 8006bfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006bfe:	4b43      	ldr	r3, [pc, #268]	@ (8006d0c <pvPortMalloc+0x190>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c04:	e004      	b.n	8006c10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d903      	bls.n	8006c22 <pvPortMalloc+0xa6>
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1f1      	bne.n	8006c06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c22:	4b37      	ldr	r3, [pc, #220]	@ (8006d00 <pvPortMalloc+0x184>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d051      	beq.n	8006cd0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2208      	movs	r2, #8
 8006c32:	4413      	add	r3, r2
 8006c34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	1ad2      	subs	r2, r2, r3
 8006c46:	2308      	movs	r3, #8
 8006c48:	005b      	lsls	r3, r3, #1
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d920      	bls.n	8006c90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4413      	add	r3, r2
 8006c54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <pvPortMalloc+0xfc>
	__asm volatile
 8006c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	613b      	str	r3, [r7, #16]
}
 8006c72:	bf00      	nop
 8006c74:	bf00      	nop
 8006c76:	e7fd      	b.n	8006c74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	1ad2      	subs	r2, r2, r3
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c8a:	69b8      	ldr	r0, [r7, #24]
 8006c8c:	f000 f90a 	bl	8006ea4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c90:	4b1d      	ldr	r3, [pc, #116]	@ (8006d08 <pvPortMalloc+0x18c>)
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006d08 <pvPortMalloc+0x18c>)
 8006c9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006d08 <pvPortMalloc+0x18c>)
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8006d10 <pvPortMalloc+0x194>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d203      	bcs.n	8006cb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006caa:	4b17      	ldr	r3, [pc, #92]	@ (8006d08 <pvPortMalloc+0x18c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a18      	ldr	r2, [pc, #96]	@ (8006d10 <pvPortMalloc+0x194>)
 8006cb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	4b13      	ldr	r3, [pc, #76]	@ (8006d04 <pvPortMalloc+0x188>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006cc6:	4b13      	ldr	r3, [pc, #76]	@ (8006d14 <pvPortMalloc+0x198>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	4a11      	ldr	r2, [pc, #68]	@ (8006d14 <pvPortMalloc+0x198>)
 8006cce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006cd0:	f7fe fcc8 	bl	8005664 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00b      	beq.n	8006cf6 <pvPortMalloc+0x17a>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	60fb      	str	r3, [r7, #12]
}
 8006cf0:	bf00      	nop
 8006cf2:	bf00      	nop
 8006cf4:	e7fd      	b.n	8006cf2 <pvPortMalloc+0x176>
	return pvReturn;
 8006cf6:	69fb      	ldr	r3, [r7, #28]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3728      	adds	r7, #40	@ 0x28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	20009164 	.word	0x20009164
 8006d04:	20009178 	.word	0x20009178
 8006d08:	20009168 	.word	0x20009168
 8006d0c:	2000915c 	.word	0x2000915c
 8006d10:	2000916c 	.word	0x2000916c
 8006d14:	20009170 	.word	0x20009170

08006d18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d04f      	beq.n	8006dca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d2a:	2308      	movs	r3, #8
 8006d2c:	425b      	negs	r3, r3
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	4413      	add	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	4b25      	ldr	r3, [pc, #148]	@ (8006dd4 <vPortFree+0xbc>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4013      	ands	r3, r2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10b      	bne.n	8006d5e <vPortFree+0x46>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	60fb      	str	r3, [r7, #12]
}
 8006d58:	bf00      	nop
 8006d5a:	bf00      	nop
 8006d5c:	e7fd      	b.n	8006d5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00b      	beq.n	8006d7e <vPortFree+0x66>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	60bb      	str	r3, [r7, #8]
}
 8006d78:	bf00      	nop
 8006d7a:	bf00      	nop
 8006d7c:	e7fd      	b.n	8006d7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	4b14      	ldr	r3, [pc, #80]	@ (8006dd4 <vPortFree+0xbc>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4013      	ands	r3, r2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01e      	beq.n	8006dca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d11a      	bne.n	8006dca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	4b0e      	ldr	r3, [pc, #56]	@ (8006dd4 <vPortFree+0xbc>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	43db      	mvns	r3, r3
 8006d9e:	401a      	ands	r2, r3
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006da4:	f7fe fc50 	bl	8005648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd8 <vPortFree+0xc0>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4413      	add	r3, r2
 8006db2:	4a09      	ldr	r2, [pc, #36]	@ (8006dd8 <vPortFree+0xc0>)
 8006db4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006db6:	6938      	ldr	r0, [r7, #16]
 8006db8:	f000 f874 	bl	8006ea4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006dbc:	4b07      	ldr	r3, [pc, #28]	@ (8006ddc <vPortFree+0xc4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	4a06      	ldr	r2, [pc, #24]	@ (8006ddc <vPortFree+0xc4>)
 8006dc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006dc6:	f7fe fc4d 	bl	8005664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dca:	bf00      	nop
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20009178 	.word	0x20009178
 8006dd8:	20009168 	.word	0x20009168
 8006ddc:	20009174 	.word	0x20009174

08006de0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006de6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006dea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006dec:	4b27      	ldr	r3, [pc, #156]	@ (8006e8c <prvHeapInit+0xac>)
 8006dee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00c      	beq.n	8006e14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3307      	adds	r3, #7
 8006dfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 0307 	bic.w	r3, r3, #7
 8006e06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8006e8c <prvHeapInit+0xac>)
 8006e10:	4413      	add	r3, r2
 8006e12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e18:	4a1d      	ldr	r2, [pc, #116]	@ (8006e90 <prvHeapInit+0xb0>)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8006e90 <prvHeapInit+0xb0>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	4413      	add	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e2c:	2208      	movs	r2, #8
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	1a9b      	subs	r3, r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0307 	bic.w	r3, r3, #7
 8006e3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4a15      	ldr	r2, [pc, #84]	@ (8006e94 <prvHeapInit+0xb4>)
 8006e40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e42:	4b14      	ldr	r3, [pc, #80]	@ (8006e94 <prvHeapInit+0xb4>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2200      	movs	r2, #0
 8006e48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e4a:	4b12      	ldr	r3, [pc, #72]	@ (8006e94 <prvHeapInit+0xb4>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	1ad2      	subs	r2, r2, r3
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e60:	4b0c      	ldr	r3, [pc, #48]	@ (8006e94 <prvHeapInit+0xb4>)
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8006e98 <prvHeapInit+0xb8>)
 8006e6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	4a09      	ldr	r2, [pc, #36]	@ (8006e9c <prvHeapInit+0xbc>)
 8006e76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e78:	4b09      	ldr	r3, [pc, #36]	@ (8006ea0 <prvHeapInit+0xc0>)
 8006e7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006e7e:	601a      	str	r2, [r3, #0]
}
 8006e80:	bf00      	nop
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	2000555c 	.word	0x2000555c
 8006e90:	2000915c 	.word	0x2000915c
 8006e94:	20009164 	.word	0x20009164
 8006e98:	2000916c 	.word	0x2000916c
 8006e9c:	20009168 	.word	0x20009168
 8006ea0:	20009178 	.word	0x20009178

08006ea4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006eac:	4b28      	ldr	r3, [pc, #160]	@ (8006f50 <prvInsertBlockIntoFreeList+0xac>)
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	e002      	b.n	8006eb8 <prvInsertBlockIntoFreeList+0x14>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d8f7      	bhi.n	8006eb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	4413      	add	r3, r2
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d108      	bne.n	8006ee6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	441a      	add	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	441a      	add	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d118      	bne.n	8006f2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	4b15      	ldr	r3, [pc, #84]	@ (8006f54 <prvInsertBlockIntoFreeList+0xb0>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d00d      	beq.n	8006f22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	441a      	add	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	e008      	b.n	8006f34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f22:	4b0c      	ldr	r3, [pc, #48]	@ (8006f54 <prvInsertBlockIntoFreeList+0xb0>)
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	e003      	b.n	8006f34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d002      	beq.n	8006f42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f42:	bf00      	nop
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	2000915c 	.word	0x2000915c
 8006f54:	20009164 	.word	0x20009164

08006f58 <_rclc_check_for_new_data>:
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d046      	beq.n	8006fea <_rclc_check_for_new_data+0x92>
 8006f5c:	b510      	push	{r4, lr}
 8006f5e:	7802      	ldrb	r2, [r0, #0]
 8006f60:	b084      	sub	sp, #16
 8006f62:	4603      	mov	r3, r0
 8006f64:	2a0a      	cmp	r2, #10
 8006f66:	d842      	bhi.n	8006fee <_rclc_check_for_new_data+0x96>
 8006f68:	e8df f002 	tbb	[pc, r2]
 8006f6c:	14181212 	.word	0x14181212
 8006f70:	06060614 	.word	0x06060614
 8006f74:	2e1a      	.short	0x2e1a
 8006f76:	16          	.byte	0x16
 8006f77:	00          	.byte	0x00
 8006f78:	6a0a      	ldr	r2, [r1, #32]
 8006f7a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006f7c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006f80:	3a00      	subs	r2, #0
 8006f82:	bf18      	it	ne
 8006f84:	2201      	movne	r2, #1
 8006f86:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	b004      	add	sp, #16
 8006f8e:	bd10      	pop	{r4, pc}
 8006f90:	680a      	ldr	r2, [r1, #0]
 8006f92:	e7f2      	b.n	8006f7a <_rclc_check_for_new_data+0x22>
 8006f94:	698a      	ldr	r2, [r1, #24]
 8006f96:	e7f0      	b.n	8006f7a <_rclc_check_for_new_data+0x22>
 8006f98:	688a      	ldr	r2, [r1, #8]
 8006f9a:	e7ee      	b.n	8006f7a <_rclc_check_for_new_data+0x22>
 8006f9c:	690a      	ldr	r2, [r1, #16]
 8006f9e:	e7ec      	b.n	8006f7a <_rclc_check_for_new_data+0x22>
 8006fa0:	685c      	ldr	r4, [r3, #4]
 8006fa2:	4608      	mov	r0, r1
 8006fa4:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8006fa8:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 8006fac:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 8006fb0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8006fba:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8006fbe:	f104 0110 	add.w	r1, r4, #16
 8006fc2:	f004 f96d 	bl	800b2a0 <rcl_action_client_wait_set_get_entities_ready>
 8006fc6:	e7e1      	b.n	8006f8c <_rclc_check_for_new_data+0x34>
 8006fc8:	685c      	ldr	r4, [r3, #4]
 8006fca:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 8006fce:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 8006fd2:	e9cd 3200 	strd	r3, r2, [sp]
 8006fd6:	4608      	mov	r0, r1
 8006fd8:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8006fdc:	f104 0220 	add.w	r2, r4, #32
 8006fe0:	f104 0110 	add.w	r1, r4, #16
 8006fe4:	f004 fb5e 	bl	800b6a4 <rcl_action_server_wait_set_get_entities_ready>
 8006fe8:	e7d0      	b.n	8006f8c <_rclc_check_for_new_data+0x34>
 8006fea:	200b      	movs	r0, #11
 8006fec:	4770      	bx	lr
 8006fee:	2001      	movs	r0, #1
 8006ff0:	e7cc      	b.n	8006f8c <_rclc_check_for_new_data+0x34>
 8006ff2:	bf00      	nop

08006ff4 <_rclc_take_new_data>:
 8006ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ff6:	b099      	sub	sp, #100	@ 0x64
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	f000 8082 	beq.w	8007102 <_rclc_take_new_data+0x10e>
 8006ffe:	7803      	ldrb	r3, [r0, #0]
 8007000:	4604      	mov	r4, r0
 8007002:	2b0a      	cmp	r3, #10
 8007004:	f200 815d 	bhi.w	80072c2 <_rclc_take_new_data+0x2ce>
 8007008:	e8df f003 	tbb	[pc, r3]
 800700c:	31531f1f 	.word	0x31531f1f
 8007010:	06060631 	.word	0x06060631
 8007014:	4555      	.short	0x4555
 8007016:	53          	.byte	0x53
 8007017:	00          	.byte	0x00
 8007018:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800701a:	6a0b      	ldr	r3, [r1, #32]
 800701c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d046      	beq.n	80070b2 <_rclc_take_new_data+0xbe>
 8007024:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8007028:	f104 0110 	add.w	r1, r4, #16
 800702c:	f002 fd60 	bl	8009af0 <rcl_take_request>
 8007030:	4605      	mov	r5, r0
 8007032:	2800      	cmp	r0, #0
 8007034:	d03d      	beq.n	80070b2 <_rclc_take_new_data+0xbe>
 8007036:	f240 2359 	movw	r3, #601	@ 0x259
 800703a:	4298      	cmp	r0, r3
 800703c:	d128      	bne.n	8007090 <_rclc_take_new_data+0x9c>
 800703e:	2300      	movs	r3, #0
 8007040:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8007044:	4628      	mov	r0, r5
 8007046:	b019      	add	sp, #100	@ 0x64
 8007048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800704a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800704c:	680b      	ldr	r3, [r1, #0]
 800704e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007052:	b373      	cbz	r3, 80070b2 <_rclc_take_new_data+0xbe>
 8007054:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8007058:	2300      	movs	r3, #0
 800705a:	aa0a      	add	r2, sp, #40	@ 0x28
 800705c:	f002 ff1c 	bl	8009e98 <rcl_take>
 8007060:	4605      	mov	r5, r0
 8007062:	b330      	cbz	r0, 80070b2 <_rclc_take_new_data+0xbe>
 8007064:	f240 1391 	movw	r3, #401	@ 0x191
 8007068:	4298      	cmp	r0, r3
 800706a:	d0e8      	beq.n	800703e <_rclc_take_new_data+0x4a>
 800706c:	e010      	b.n	8007090 <_rclc_take_new_data+0x9c>
 800706e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8007070:	698b      	ldr	r3, [r1, #24]
 8007072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007076:	b1e3      	cbz	r3, 80070b2 <_rclc_take_new_data+0xbe>
 8007078:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800707c:	f104 0110 	add.w	r1, r4, #16
 8007080:	f001 ffda 	bl	8009038 <rcl_take_response>
 8007084:	4605      	mov	r5, r0
 8007086:	b1a0      	cbz	r0, 80070b2 <_rclc_take_new_data+0xbe>
 8007088:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800708c:	4298      	cmp	r0, r3
 800708e:	d0d9      	beq.n	8007044 <_rclc_take_new_data+0x50>
 8007090:	f000 fe56 	bl	8007d40 <rcutils_reset_error>
 8007094:	e7d6      	b.n	8007044 <_rclc_take_new_data+0x50>
 8007096:	6840      	ldr	r0, [r0, #4]
 8007098:	f890 3020 	ldrb.w	r3, [r0, #32]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d15f      	bne.n	8007160 <_rclc_take_new_data+0x16c>
 80070a0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d179      	bne.n	800719c <_rclc_take_new_data+0x1a8>
 80070a8:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f040 8096 	bne.w	80071de <_rclc_take_new_data+0x1ea>
 80070b2:	2500      	movs	r5, #0
 80070b4:	e7c6      	b.n	8007044 <_rclc_take_new_data+0x50>
 80070b6:	6840      	ldr	r0, [r0, #4]
 80070b8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d138      	bne.n	8007132 <_rclc_take_new_data+0x13e>
 80070c0:	69c3      	ldr	r3, [r0, #28]
 80070c2:	b113      	cbz	r3, 80070ca <_rclc_take_new_data+0xd6>
 80070c4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80070c8:	b9fb      	cbnz	r3, 800710a <_rclc_take_new_data+0x116>
 80070ca:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f040 80a8 	bne.w	8007224 <_rclc_take_new_data+0x230>
 80070d4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0ea      	beq.n	80070b2 <_rclc_take_new_data+0xbe>
 80070dc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80070de:	a90a      	add	r1, sp, #40	@ 0x28
 80070e0:	3010      	adds	r0, #16
 80070e2:	f003 ffc1 	bl	800b068 <rcl_action_take_result_response>
 80070e6:	4605      	mov	r5, r0
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d1d1      	bne.n	8007090 <_rclc_take_new_data+0x9c>
 80070ec:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80070f0:	6860      	ldr	r0, [r4, #4]
 80070f2:	f004 fc01 	bl	800b8f8 <rclc_action_find_handle_by_result_request_sequence_number>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d0db      	beq.n	80070b2 <_rclc_take_new_data+0xbe>
 80070fa:	2301      	movs	r3, #1
 80070fc:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8007100:	e7d7      	b.n	80070b2 <_rclc_take_new_data+0xbe>
 8007102:	250b      	movs	r5, #11
 8007104:	4628      	mov	r0, r5
 8007106:	b019      	add	sp, #100	@ 0x64
 8007108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800710a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800710c:	3010      	adds	r0, #16
 800710e:	f004 f827 	bl	800b160 <rcl_action_take_feedback>
 8007112:	4605      	mov	r5, r0
 8007114:	2800      	cmp	r0, #0
 8007116:	d1bb      	bne.n	8007090 <_rclc_take_new_data+0x9c>
 8007118:	6860      	ldr	r0, [r4, #4]
 800711a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800711c:	f004 fbaa 	bl	800b874 <rclc_action_find_goal_handle_by_uuid>
 8007120:	4603      	mov	r3, r0
 8007122:	2800      	cmp	r0, #0
 8007124:	f000 80c4 	beq.w	80072b0 <_rclc_take_new_data+0x2bc>
 8007128:	2201      	movs	r2, #1
 800712a:	6860      	ldr	r0, [r4, #4]
 800712c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8007130:	e7cb      	b.n	80070ca <_rclc_take_new_data+0xd6>
 8007132:	aa04      	add	r2, sp, #16
 8007134:	a90a      	add	r1, sp, #40	@ 0x28
 8007136:	3010      	adds	r0, #16
 8007138:	f003 ff26 	bl	800af88 <rcl_action_take_goal_response>
 800713c:	4605      	mov	r5, r0
 800713e:	2800      	cmp	r0, #0
 8007140:	d1a6      	bne.n	8007090 <_rclc_take_new_data+0x9c>
 8007142:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007146:	6860      	ldr	r0, [r4, #4]
 8007148:	f004 fbc4 	bl	800b8d4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800714c:	b130      	cbz	r0, 800715c <_rclc_take_new_data+0x168>
 800714e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8007152:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8007156:	2201      	movs	r2, #1
 8007158:	f880 2020 	strb.w	r2, [r0, #32]
 800715c:	6860      	ldr	r0, [r4, #4]
 800715e:	e7af      	b.n	80070c0 <_rclc_take_new_data+0xcc>
 8007160:	f004 fb62 	bl	800b828 <rclc_action_take_goal_handle>
 8007164:	4606      	mov	r6, r0
 8007166:	6860      	ldr	r0, [r4, #4]
 8007168:	2e00      	cmp	r6, #0
 800716a:	d099      	beq.n	80070a0 <_rclc_take_new_data+0xac>
 800716c:	6070      	str	r0, [r6, #4]
 800716e:	69f2      	ldr	r2, [r6, #28]
 8007170:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8007174:	3010      	adds	r0, #16
 8007176:	f004 f923 	bl	800b3c0 <rcl_action_take_goal_request>
 800717a:	4605      	mov	r5, r0
 800717c:	2800      	cmp	r0, #0
 800717e:	f040 8099 	bne.w	80072b4 <_rclc_take_new_data+0x2c0>
 8007182:	69f7      	ldr	r7, [r6, #28]
 8007184:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007186:	7235      	strb	r5, [r6, #8]
 8007188:	f8c6 0009 	str.w	r0, [r6, #9]
 800718c:	f8c6 100d 	str.w	r1, [r6, #13]
 8007190:	6860      	ldr	r0, [r4, #4]
 8007192:	f8c6 2011 	str.w	r2, [r6, #17]
 8007196:	f8c6 3015 	str.w	r3, [r6, #21]
 800719a:	e781      	b.n	80070a0 <_rclc_take_new_data+0xac>
 800719c:	aa04      	add	r2, sp, #16
 800719e:	3010      	adds	r0, #16
 80071a0:	a90a      	add	r1, sp, #40	@ 0x28
 80071a2:	f004 f97d 	bl	800b4a0 <rcl_action_take_result_request>
 80071a6:	4605      	mov	r5, r0
 80071a8:	2800      	cmp	r0, #0
 80071aa:	f47f af71 	bne.w	8007090 <_rclc_take_new_data+0x9c>
 80071ae:	6860      	ldr	r0, [r4, #4]
 80071b0:	a904      	add	r1, sp, #16
 80071b2:	f004 fb5f 	bl	800b874 <rclc_action_find_goal_handle_by_uuid>
 80071b6:	4607      	mov	r7, r0
 80071b8:	b160      	cbz	r0, 80071d4 <_rclc_take_new_data+0x1e0>
 80071ba:	ad0a      	add	r5, sp, #40	@ 0x28
 80071bc:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 80071c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80071c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80071c8:	f04f 0c02 	mov.w	ip, #2
 80071cc:	e886 0003 	stmia.w	r6, {r0, r1}
 80071d0:	f887 c008 	strb.w	ip, [r7, #8]
 80071d4:	6860      	ldr	r0, [r4, #4]
 80071d6:	2300      	movs	r3, #0
 80071d8:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 80071dc:	e764      	b.n	80070a8 <_rclc_take_new_data+0xb4>
 80071de:	ae04      	add	r6, sp, #16
 80071e0:	aa0a      	add	r2, sp, #40	@ 0x28
 80071e2:	3010      	adds	r0, #16
 80071e4:	4631      	mov	r1, r6
 80071e6:	f004 f999 	bl	800b51c <rcl_action_take_cancel_request>
 80071ea:	4605      	mov	r5, r0
 80071ec:	2800      	cmp	r0, #0
 80071ee:	f47f af4f 	bne.w	8007090 <_rclc_take_new_data+0x9c>
 80071f2:	6860      	ldr	r0, [r4, #4]
 80071f4:	a90a      	add	r1, sp, #40	@ 0x28
 80071f6:	f004 fb3d 	bl	800b874 <rclc_action_find_goal_handle_by_uuid>
 80071fa:	4605      	mov	r5, r0
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d04c      	beq.n	800729a <_rclc_take_new_data+0x2a6>
 8007200:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8007204:	2101      	movs	r1, #1
 8007206:	f004 fabd 	bl	800b784 <rcl_action_transition_goal_state>
 800720a:	2803      	cmp	r0, #3
 800720c:	4607      	mov	r7, r0
 800720e:	d139      	bne.n	8007284 <_rclc_take_new_data+0x290>
 8007210:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007212:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 8007216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007218:	e896 0003 	ldmia.w	r6, {r0, r1}
 800721c:	e884 0003 	stmia.w	r4, {r0, r1}
 8007220:	722f      	strb	r7, [r5, #8]
 8007222:	e746      	b.n	80070b2 <_rclc_take_new_data+0xbe>
 8007224:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8007228:	a90a      	add	r1, sp, #40	@ 0x28
 800722a:	3010      	adds	r0, #16
 800722c:	f003 ff5a 	bl	800b0e4 <rcl_action_take_cancel_response>
 8007230:	4605      	mov	r5, r0
 8007232:	2800      	cmp	r0, #0
 8007234:	f47f af2c 	bne.w	8007090 <_rclc_take_new_data+0x9c>
 8007238:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800723c:	6860      	ldr	r0, [r4, #4]
 800723e:	f004 fb6d 	bl	800b91c <rclc_action_find_handle_by_cancel_request_sequence_number>
 8007242:	4606      	mov	r6, r0
 8007244:	6860      	ldr	r0, [r4, #4]
 8007246:	2e00      	cmp	r6, #0
 8007248:	f43f af44 	beq.w	80070d4 <_rclc_take_new_data+0xe0>
 800724c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800724e:	2701      	movs	r7, #1
 8007250:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8007252:	2b00      	cmp	r3, #0
 8007254:	f43f af3e 	beq.w	80070d4 <_rclc_take_new_data+0xe0>
 8007258:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800725a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800725e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007262:	f004 fb07 	bl	800b874 <rclc_action_find_goal_handle_by_uuid>
 8007266:	b138      	cbz	r0, 8007278 <_rclc_take_new_data+0x284>
 8007268:	6860      	ldr	r0, [r4, #4]
 800726a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800726c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8007270:	3501      	adds	r5, #1
 8007272:	42ab      	cmp	r3, r5
 8007274:	d8f0      	bhi.n	8007258 <_rclc_take_new_data+0x264>
 8007276:	e72d      	b.n	80070d4 <_rclc_take_new_data+0xe0>
 8007278:	6860      	ldr	r0, [r4, #4]
 800727a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800727c:	3501      	adds	r5, #1
 800727e:	42ab      	cmp	r3, r5
 8007280:	d8ea      	bhi.n	8007258 <_rclc_take_new_data+0x264>
 8007282:	e727      	b.n	80070d4 <_rclc_take_new_data+0xe0>
 8007284:	ab06      	add	r3, sp, #24
 8007286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007288:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800728c:	2103      	movs	r1, #3
 800728e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8007292:	6860      	ldr	r0, [r4, #4]
 8007294:	f004 fbb8 	bl	800ba08 <rclc_action_server_goal_cancel_reject>
 8007298:	e70b      	b.n	80070b2 <_rclc_take_new_data+0xbe>
 800729a:	ab06      	add	r3, sp, #24
 800729c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800729e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80072a2:	2102      	movs	r1, #2
 80072a4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80072a8:	6860      	ldr	r0, [r4, #4]
 80072aa:	f004 fbad 	bl	800ba08 <rclc_action_server_goal_cancel_reject>
 80072ae:	e700      	b.n	80070b2 <_rclc_take_new_data+0xbe>
 80072b0:	6860      	ldr	r0, [r4, #4]
 80072b2:	e70a      	b.n	80070ca <_rclc_take_new_data+0xd6>
 80072b4:	6860      	ldr	r0, [r4, #4]
 80072b6:	4631      	mov	r1, r6
 80072b8:	f004 fac6 	bl	800b848 <rclc_action_remove_used_goal_handle>
 80072bc:	f000 fd40 	bl	8007d40 <rcutils_reset_error>
 80072c0:	e6c0      	b.n	8007044 <_rclc_take_new_data+0x50>
 80072c2:	2501      	movs	r5, #1
 80072c4:	e6be      	b.n	8007044 <_rclc_take_new_data+0x50>
 80072c6:	bf00      	nop

080072c8 <rclc_executor_trigger_any>:
 80072c8:	4603      	mov	r3, r0
 80072ca:	b370      	cbz	r0, 800732a <rclc_executor_trigger_any+0x62>
 80072cc:	b379      	cbz	r1, 800732e <rclc_executor_trigger_any+0x66>
 80072ce:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 80072d2:	2200      	movs	r2, #0
 80072d4:	b350      	cbz	r0, 800732c <rclc_executor_trigger_any+0x64>
 80072d6:	b430      	push	{r4, r5}
 80072d8:	f893 c000 	ldrb.w	ip, [r3]
 80072dc:	f1bc 0f08 	cmp.w	ip, #8
 80072e0:	d017      	beq.n	8007312 <rclc_executor_trigger_any+0x4a>
 80072e2:	f1bc 0f09 	cmp.w	ip, #9
 80072e6:	d00d      	beq.n	8007304 <rclc_executor_trigger_any+0x3c>
 80072e8:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 80072ec:	b940      	cbnz	r0, 8007300 <rclc_executor_trigger_any+0x38>
 80072ee:	3201      	adds	r2, #1
 80072f0:	4291      	cmp	r1, r2
 80072f2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80072f6:	d003      	beq.n	8007300 <rclc_executor_trigger_any+0x38>
 80072f8:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d1eb      	bne.n	80072d8 <rclc_executor_trigger_any+0x10>
 8007300:	bc30      	pop	{r4, r5}
 8007302:	4770      	bx	lr
 8007304:	685c      	ldr	r4, [r3, #4]
 8007306:	6a25      	ldr	r5, [r4, #32]
 8007308:	2d00      	cmp	r5, #0
 800730a:	d1f9      	bne.n	8007300 <rclc_executor_trigger_any+0x38>
 800730c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8007310:	e7ec      	b.n	80072ec <rclc_executor_trigger_any+0x24>
 8007312:	685c      	ldr	r4, [r3, #4]
 8007314:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8007316:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800731a:	d1f1      	bne.n	8007300 <rclc_executor_trigger_any+0x38>
 800731c:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8007320:	2800      	cmp	r0, #0
 8007322:	d1ed      	bne.n	8007300 <rclc_executor_trigger_any+0x38>
 8007324:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8007328:	e7e0      	b.n	80072ec <rclc_executor_trigger_any+0x24>
 800732a:	4770      	bx	lr
 800732c:	4770      	bx	lr
 800732e:	4608      	mov	r0, r1
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop

08007334 <_rclc_execute>:
 8007334:	2800      	cmp	r0, #0
 8007336:	f000 80dc 	beq.w	80074f2 <_rclc_execute+0x1be>
 800733a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800733c:	7843      	ldrb	r3, [r0, #1]
 800733e:	b087      	sub	sp, #28
 8007340:	4604      	mov	r4, r0
 8007342:	b123      	cbz	r3, 800734e <_rclc_execute+0x1a>
 8007344:	2b01      	cmp	r3, #1
 8007346:	d01c      	beq.n	8007382 <_rclc_execute+0x4e>
 8007348:	2000      	movs	r0, #0
 800734a:	b007      	add	sp, #28
 800734c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800734e:	7803      	ldrb	r3, [r0, #0]
 8007350:	2b08      	cmp	r3, #8
 8007352:	f000 80a0 	beq.w	8007496 <_rclc_execute+0x162>
 8007356:	2b09      	cmp	r3, #9
 8007358:	d024      	beq.n	80073a4 <_rclc_execute+0x70>
 800735a:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800735e:	2800      	cmp	r0, #0
 8007360:	d0f2      	beq.n	8007348 <_rclc_execute+0x14>
 8007362:	2b0a      	cmp	r3, #10
 8007364:	f200 815a 	bhi.w	800761c <_rclc_execute+0x2e8>
 8007368:	e8df f013 	tbh	[pc, r3, lsl #1]
 800736c:	008e006f 	.word	0x008e006f
 8007370:	006f007c 	.word	0x006f007c
 8007374:	00590073 	.word	0x00590073
 8007378:	00590059 	.word	0x00590059
 800737c:	01580158 	.word	0x01580158
 8007380:	0079      	.short	0x0079
 8007382:	7803      	ldrb	r3, [r0, #0]
 8007384:	2b0a      	cmp	r3, #10
 8007386:	f200 8149 	bhi.w	800761c <_rclc_execute+0x2e8>
 800738a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800738e:	00f9      	.short	0x00f9
 8007390:	006b007b 	.word	0x006b007b
 8007394:	0062005e 	.word	0x0062005e
 8007398:	00480048 	.word	0x00480048
 800739c:	01000048 	.word	0x01000048
 80073a0:	00680102 	.word	0x00680102
 80073a4:	6840      	ldr	r0, [r0, #4]
 80073a6:	6a02      	ldr	r2, [r0, #32]
 80073a8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80073ac:	2a00      	cmp	r2, #0
 80073ae:	f040 80f3 	bne.w	8007598 <_rclc_execute+0x264>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0c8      	beq.n	8007348 <_rclc_execute+0x14>
 80073b6:	e003      	b.n	80073c0 <_rclc_execute+0x8c>
 80073b8:	6858      	ldr	r0, [r3, #4]
 80073ba:	f004 fa45 	bl	800b848 <rclc_action_remove_used_goal_handle>
 80073be:	6860      	ldr	r0, [r4, #4]
 80073c0:	f004 fa7c 	bl	800b8bc <rclc_action_find_first_terminated_handle>
 80073c4:	4603      	mov	r3, r0
 80073c6:	4601      	mov	r1, r0
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d1f5      	bne.n	80073b8 <_rclc_execute+0x84>
 80073cc:	6860      	ldr	r0, [r4, #4]
 80073ce:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 80073d2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 80eb 	beq.w	80075b2 <_rclc_execute+0x27e>
 80073dc:	f241 0604 	movw	r6, #4100	@ 0x1004
 80073e0:	2701      	movs	r7, #1
 80073e2:	e007      	b.n	80073f4 <_rclc_execute+0xc0>
 80073e4:	4628      	mov	r0, r5
 80073e6:	f004 fac3 	bl	800b970 <rclc_action_server_response_goal_request>
 80073ea:	6860      	ldr	r0, [r4, #4]
 80073ec:	4629      	mov	r1, r5
 80073ee:	f004 fa2b 	bl	800b848 <rclc_action_remove_used_goal_handle>
 80073f2:	6860      	ldr	r0, [r4, #4]
 80073f4:	2100      	movs	r1, #0
 80073f6:	f004 fa55 	bl	800b8a4 <rclc_action_find_first_handle_by_status>
 80073fa:	4605      	mov	r5, r0
 80073fc:	2800      	cmp	r0, #0
 80073fe:	f000 80d5 	beq.w	80075ac <_rclc_execute+0x278>
 8007402:	6863      	ldr	r3, [r4, #4]
 8007404:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	4798      	blx	r3
 800740a:	42b0      	cmp	r0, r6
 800740c:	f04f 0100 	mov.w	r1, #0
 8007410:	d1e8      	bne.n	80073e4 <_rclc_execute+0xb0>
 8007412:	2101      	movs	r1, #1
 8007414:	4628      	mov	r0, r5
 8007416:	f004 faab 	bl	800b970 <rclc_action_server_response_goal_request>
 800741a:	722f      	strb	r7, [r5, #8]
 800741c:	e7e9      	b.n	80073f2 <_rclc_execute+0xbe>
 800741e:	2b06      	cmp	r3, #6
 8007420:	68a0      	ldr	r0, [r4, #8]
 8007422:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007424:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8007426:	f000 80bb 	beq.w	80075a0 <_rclc_execute+0x26c>
 800742a:	2b07      	cmp	r3, #7
 800742c:	f000 80f1 	beq.w	8007612 <_rclc_execute+0x2de>
 8007430:	47b0      	blx	r6
 8007432:	f104 0510 	add.w	r5, r4, #16
 8007436:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007438:	6860      	ldr	r0, [r4, #4]
 800743a:	4629      	mov	r1, r5
 800743c:	f002 fba8 	bl	8009b90 <rcl_send_response>
 8007440:	2802      	cmp	r0, #2
 8007442:	d117      	bne.n	8007474 <_rclc_execute+0x140>
 8007444:	f000 fc7c 	bl	8007d40 <rcutils_reset_error>
 8007448:	e77e      	b.n	8007348 <_rclc_execute+0x14>
 800744a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800744c:	68a0      	ldr	r0, [r4, #8]
 800744e:	4798      	blx	r3
 8007450:	e77a      	b.n	8007348 <_rclc_execute+0x14>
 8007452:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007454:	68a0      	ldr	r0, [r4, #8]
 8007456:	f104 0110 	add.w	r1, r4, #16
 800745a:	4798      	blx	r3
 800745c:	e774      	b.n	8007348 <_rclc_execute+0x14>
 800745e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007460:	4798      	blx	r3
 8007462:	e771      	b.n	8007348 <_rclc_execute+0x14>
 8007464:	6860      	ldr	r0, [r4, #4]
 8007466:	f002 fe3b 	bl	800a0e0 <rcl_timer_call>
 800746a:	f240 3321 	movw	r3, #801	@ 0x321
 800746e:	4298      	cmp	r0, r3
 8007470:	f43f af6a 	beq.w	8007348 <_rclc_execute+0x14>
 8007474:	2800      	cmp	r0, #0
 8007476:	f43f af68 	beq.w	800734a <_rclc_execute+0x16>
 800747a:	9005      	str	r0, [sp, #20]
 800747c:	f000 fc60 	bl	8007d40 <rcutils_reset_error>
 8007480:	9805      	ldr	r0, [sp, #20]
 8007482:	e762      	b.n	800734a <_rclc_execute+0x16>
 8007484:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8007488:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800748c:	2800      	cmp	r0, #0
 800748e:	d0e4      	beq.n	800745a <_rclc_execute+0x126>
 8007490:	68a0      	ldr	r0, [r4, #8]
 8007492:	4798      	blx	r3
 8007494:	e758      	b.n	8007348 <_rclc_execute+0x14>
 8007496:	6840      	ldr	r0, [r0, #4]
 8007498:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800749a:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 800749e:	d107      	bne.n	80074b0 <_rclc_execute+0x17c>
 80074a0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80074a4:	b923      	cbnz	r3, 80074b0 <_rclc_execute+0x17c>
 80074a6:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f43f af4c 	beq.w	8007348 <_rclc_execute+0x14>
 80074b0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80074b4:	b303      	cbz	r3, 80074f8 <_rclc_execute+0x1c4>
 80074b6:	2600      	movs	r6, #0
 80074b8:	2701      	movs	r7, #1
 80074ba:	e004      	b.n	80074c6 <_rclc_execute+0x192>
 80074bc:	f004 f98e 	bl	800b7dc <rclc_action_send_result_request>
 80074c0:	b990      	cbnz	r0, 80074e8 <_rclc_execute+0x1b4>
 80074c2:	722f      	strb	r7, [r5, #8]
 80074c4:	6860      	ldr	r0, [r4, #4]
 80074c6:	f004 fa3b 	bl	800b940 <rclc_action_find_first_handle_with_goal_response>
 80074ca:	4605      	mov	r5, r0
 80074cc:	b198      	cbz	r0, 80074f6 <_rclc_execute+0x1c2>
 80074ce:	6863      	ldr	r3, [r4, #4]
 80074d0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 80074d8:	f885 6020 	strb.w	r6, [r5, #32]
 80074dc:	4798      	blx	r3
 80074de:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 80074e2:	4628      	mov	r0, r5
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1e9      	bne.n	80074bc <_rclc_execute+0x188>
 80074e8:	6860      	ldr	r0, [r4, #4]
 80074ea:	4629      	mov	r1, r5
 80074ec:	f004 f9ac 	bl	800b848 <rclc_action_remove_used_goal_handle>
 80074f0:	e7e8      	b.n	80074c4 <_rclc_execute+0x190>
 80074f2:	200b      	movs	r0, #11
 80074f4:	4770      	bx	lr
 80074f6:	6860      	ldr	r0, [r4, #4]
 80074f8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80074fc:	b18b      	cbz	r3, 8007522 <_rclc_execute+0x1ee>
 80074fe:	68c5      	ldr	r5, [r0, #12]
 8007500:	b32d      	cbz	r5, 800754e <_rclc_execute+0x21a>
 8007502:	2600      	movs	r6, #0
 8007504:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8007508:	b143      	cbz	r3, 800751c <_rclc_execute+0x1e8>
 800750a:	69c3      	ldr	r3, [r0, #28]
 800750c:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8007510:	b123      	cbz	r3, 800751c <_rclc_execute+0x1e8>
 8007512:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8007514:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007516:	4628      	mov	r0, r5
 8007518:	4798      	blx	r3
 800751a:	6860      	ldr	r0, [r4, #4]
 800751c:	682d      	ldr	r5, [r5, #0]
 800751e:	2d00      	cmp	r5, #0
 8007520:	d1f0      	bne.n	8007504 <_rclc_execute+0x1d0>
 8007522:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8007526:	b193      	cbz	r3, 800754e <_rclc_execute+0x21a>
 8007528:	68c5      	ldr	r5, [r0, #12]
 800752a:	b185      	cbz	r5, 800754e <_rclc_execute+0x21a>
 800752c:	2600      	movs	r6, #0
 800752e:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8007532:	b14b      	cbz	r3, 8007548 <_rclc_execute+0x214>
 8007534:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007536:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800753a:	b12b      	cbz	r3, 8007548 <_rclc_execute+0x214>
 800753c:	4628      	mov	r0, r5
 800753e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007540:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8007544:	4798      	blx	r3
 8007546:	6860      	ldr	r0, [r4, #4]
 8007548:	682d      	ldr	r5, [r5, #0]
 800754a:	2d00      	cmp	r5, #0
 800754c:	d1ef      	bne.n	800752e <_rclc_execute+0x1fa>
 800754e:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8007552:	2b00      	cmp	r3, #0
 8007554:	f43f aef8 	beq.w	8007348 <_rclc_execute+0x14>
 8007558:	2700      	movs	r7, #0
 800755a:	e00b      	b.n	8007574 <_rclc_execute+0x240>
 800755c:	6863      	ldr	r3, [r4, #4]
 800755e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007560:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007562:	6a1e      	ldr	r6, [r3, #32]
 8007564:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8007568:	47b0      	blx	r6
 800756a:	6860      	ldr	r0, [r4, #4]
 800756c:	4629      	mov	r1, r5
 800756e:	f004 f96b 	bl	800b848 <rclc_action_remove_used_goal_handle>
 8007572:	6860      	ldr	r0, [r4, #4]
 8007574:	f004 f9f0 	bl	800b958 <rclc_action_find_first_handle_with_result_response>
 8007578:	4605      	mov	r5, r0
 800757a:	2800      	cmp	r0, #0
 800757c:	d1ee      	bne.n	800755c <_rclc_execute+0x228>
 800757e:	e6e3      	b.n	8007348 <_rclc_execute+0x14>
 8007580:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8007584:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007586:	2800      	cmp	r0, #0
 8007588:	f43f af61 	beq.w	800744e <_rclc_execute+0x11a>
 800758c:	e75e      	b.n	800744c <_rclc_execute+0x118>
 800758e:	6840      	ldr	r0, [r0, #4]
 8007590:	e78e      	b.n	80074b0 <_rclc_execute+0x17c>
 8007592:	6840      	ldr	r0, [r0, #4]
 8007594:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8007598:	2b00      	cmp	r3, #0
 800759a:	f43f af1a 	beq.w	80073d2 <_rclc_execute+0x9e>
 800759e:	e70f      	b.n	80073c0 <_rclc_execute+0x8c>
 80075a0:	f104 0510 	add.w	r5, r4, #16
 80075a4:	460a      	mov	r2, r1
 80075a6:	4629      	mov	r1, r5
 80075a8:	47b0      	blx	r6
 80075aa:	e744      	b.n	8007436 <_rclc_execute+0x102>
 80075ac:	6860      	ldr	r0, [r4, #4]
 80075ae:	f880 5020 	strb.w	r5, [r0, #32]
 80075b2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f43f aec6 	beq.w	8007348 <_rclc_execute+0x14>
 80075bc:	68c5      	ldr	r5, [r0, #12]
 80075be:	b325      	cbz	r5, 800760a <_rclc_execute+0x2d6>
 80075c0:	2602      	movs	r6, #2
 80075c2:	e001      	b.n	80075c8 <_rclc_execute+0x294>
 80075c4:	682d      	ldr	r5, [r5, #0]
 80075c6:	b305      	cbz	r5, 800760a <_rclc_execute+0x2d6>
 80075c8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d1f9      	bne.n	80075c4 <_rclc_execute+0x290>
 80075d0:	69c3      	ldr	r3, [r0, #28]
 80075d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80075d4:	4628      	mov	r0, r5
 80075d6:	4798      	blx	r3
 80075d8:	4603      	mov	r3, r0
 80075da:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 80075de:	4628      	mov	r0, r5
 80075e0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80075e4:	b11b      	cbz	r3, 80075ee <_rclc_execute+0x2ba>
 80075e6:	f004 f9e3 	bl	800b9b0 <rclc_action_server_goal_cancel_accept>
 80075ea:	6860      	ldr	r0, [r4, #4]
 80075ec:	e7ea      	b.n	80075c4 <_rclc_execute+0x290>
 80075ee:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80075f0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80075f4:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 80075f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075fc:	6860      	ldr	r0, [r4, #4]
 80075fe:	2101      	movs	r1, #1
 8007600:	f004 fa02 	bl	800ba08 <rclc_action_server_goal_cancel_reject>
 8007604:	722e      	strb	r6, [r5, #8]
 8007606:	6860      	ldr	r0, [r4, #4]
 8007608:	e7dc      	b.n	80075c4 <_rclc_execute+0x290>
 800760a:	2300      	movs	r3, #0
 800760c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8007610:	e69a      	b.n	8007348 <_rclc_execute+0x14>
 8007612:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007614:	47b0      	blx	r6
 8007616:	f104 0510 	add.w	r5, r4, #16
 800761a:	e70c      	b.n	8007436 <_rclc_execute+0x102>
 800761c:	2001      	movs	r0, #1
 800761e:	e694      	b.n	800734a <_rclc_execute+0x16>

08007620 <rclc_executor_get_zero_initialized_executor>:
 8007620:	b510      	push	{r4, lr}
 8007622:	4903      	ldr	r1, [pc, #12]	@ (8007630 <rclc_executor_get_zero_initialized_executor+0x10>)
 8007624:	4604      	mov	r4, r0
 8007626:	2290      	movs	r2, #144	@ 0x90
 8007628:	f00c fa7f 	bl	8013b2a <memcpy>
 800762c:	4620      	mov	r0, r4
 800762e:	bd10      	pop	{r4, pc}
 8007630:	080149d0 	.word	0x080149d0
 8007634:	00000000 	.word	0x00000000

08007638 <rclc_executor_init>:
 8007638:	2800      	cmp	r0, #0
 800763a:	d05a      	beq.n	80076f2 <rclc_executor_init+0xba>
 800763c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007640:	460d      	mov	r5, r1
 8007642:	b0b2      	sub	sp, #200	@ 0xc8
 8007644:	2900      	cmp	r1, #0
 8007646:	d050      	beq.n	80076ea <rclc_executor_init+0xb2>
 8007648:	4604      	mov	r4, r0
 800764a:	4618      	mov	r0, r3
 800764c:	4616      	mov	r6, r2
 800764e:	461f      	mov	r7, r3
 8007650:	f000 fb4c 	bl	8007cec <rcutils_allocator_is_valid>
 8007654:	2800      	cmp	r0, #0
 8007656:	d048      	beq.n	80076ea <rclc_executor_init+0xb2>
 8007658:	2e00      	cmp	r6, #0
 800765a:	d046      	beq.n	80076ea <rclc_executor_init+0xb2>
 800765c:	492a      	ldr	r1, [pc, #168]	@ (8007708 <rclc_executor_init+0xd0>)
 800765e:	2290      	movs	r2, #144	@ 0x90
 8007660:	a80e      	add	r0, sp, #56	@ 0x38
 8007662:	f00c fa62 	bl	8013b2a <memcpy>
 8007666:	a90e      	add	r1, sp, #56	@ 0x38
 8007668:	2290      	movs	r2, #144	@ 0x90
 800766a:	4620      	mov	r0, r4
 800766c:	f00c fa5d 	bl	8013b2a <memcpy>
 8007670:	6065      	str	r5, [r4, #4]
 8007672:	4668      	mov	r0, sp
 8007674:	60e6      	str	r6, [r4, #12]
 8007676:	466d      	mov	r5, sp
 8007678:	f002 fe24 	bl	800a2c4 <rcl_get_zero_initialized_wait_set>
 800767c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800767e:	f104 0c18 	add.w	ip, r4, #24
 8007682:	f8d7 8000 	ldr.w	r8, [r7]
 8007686:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800768a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800768c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007692:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007696:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8007700 <rclc_executor_init+0xc8>
 800769a:	682b      	ldr	r3, [r5, #0]
 800769c:	f8cc 3000 	str.w	r3, [ip]
 80076a0:	6939      	ldr	r1, [r7, #16]
 80076a2:	6167      	str	r7, [r4, #20]
 80076a4:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 80076a8:	01b0      	lsls	r0, r6, #6
 80076aa:	47c0      	blx	r8
 80076ac:	60a0      	str	r0, [r4, #8]
 80076ae:	b310      	cbz	r0, 80076f6 <rclc_executor_init+0xbe>
 80076b0:	2500      	movs	r5, #0
 80076b2:	e000      	b.n	80076b6 <rclc_executor_init+0x7e>
 80076b4:	68a0      	ldr	r0, [r4, #8]
 80076b6:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 80076ba:	4631      	mov	r1, r6
 80076bc:	3501      	adds	r5, #1
 80076be:	f000 fa09 	bl	8007ad4 <rclc_executor_handle_init>
 80076c2:	42ae      	cmp	r6, r5
 80076c4:	d1f6      	bne.n	80076b4 <rclc_executor_init+0x7c>
 80076c6:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 80076ca:	f000 f9f9 	bl	8007ac0 <rclc_executor_handle_counters_zero_init>
 80076ce:	490f      	ldr	r1, [pc, #60]	@ (800770c <rclc_executor_init+0xd4>)
 80076d0:	68a2      	ldr	r2, [r4, #8]
 80076d2:	2300      	movs	r3, #0
 80076d4:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 80076d8:	b12a      	cbz	r2, 80076e6 <rclc_executor_init+0xae>
 80076da:	6962      	ldr	r2, [r4, #20]
 80076dc:	b11a      	cbz	r2, 80076e6 <rclc_executor_init+0xae>
 80076de:	68e2      	ldr	r2, [r4, #12]
 80076e0:	b10a      	cbz	r2, 80076e6 <rclc_executor_init+0xae>
 80076e2:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 80076e6:	2000      	movs	r0, #0
 80076e8:	e000      	b.n	80076ec <rclc_executor_init+0xb4>
 80076ea:	200b      	movs	r0, #11
 80076ec:	b032      	add	sp, #200	@ 0xc8
 80076ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f2:	200b      	movs	r0, #11
 80076f4:	4770      	bx	lr
 80076f6:	200a      	movs	r0, #10
 80076f8:	e7f8      	b.n	80076ec <rclc_executor_init+0xb4>
 80076fa:	bf00      	nop
 80076fc:	f3af 8000 	nop.w
 8007700:	3b9aca00 	.word	0x3b9aca00
 8007704:	00000000 	.word	0x00000000
 8007708:	080149d0 	.word	0x080149d0
 800770c:	080072c9 	.word	0x080072c9

08007710 <rclc_executor_add_subscription>:
 8007710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007712:	f89d e018 	ldrb.w	lr, [sp, #24]
 8007716:	b338      	cbz	r0, 8007768 <rclc_executor_add_subscription+0x58>
 8007718:	b331      	cbz	r1, 8007768 <rclc_executor_add_subscription+0x58>
 800771a:	b32a      	cbz	r2, 8007768 <rclc_executor_add_subscription+0x58>
 800771c:	b323      	cbz	r3, 8007768 <rclc_executor_add_subscription+0x58>
 800771e:	4604      	mov	r4, r0
 8007720:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 8007724:	42a8      	cmp	r0, r5
 8007726:	d301      	bcc.n	800772c <rclc_executor_add_subscription+0x1c>
 8007728:	2001      	movs	r0, #1
 800772a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800772c:	68a6      	ldr	r6, [r4, #8]
 800772e:	0187      	lsls	r7, r0, #6
 8007730:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8007734:	2500      	movs	r5, #0
 8007736:	55f5      	strb	r5, [r6, r7]
 8007738:	3001      	adds	r0, #1
 800773a:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800773e:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 8007742:	2301      	movs	r3, #1
 8007744:	f104 0518 	add.w	r5, r4, #24
 8007748:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800774c:	f88c e001 	strb.w	lr, [ip, #1]
 8007750:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 8007754:	6120      	str	r0, [r4, #16]
 8007756:	4628      	mov	r0, r5
 8007758:	f002 fdc8 	bl	800a2ec <rcl_wait_set_is_valid>
 800775c:	b930      	cbnz	r0, 800776c <rclc_executor_add_subscription+0x5c>
 800775e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007760:	3301      	adds	r3, #1
 8007762:	2000      	movs	r0, #0
 8007764:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8007766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007768:	200b      	movs	r0, #11
 800776a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800776c:	4628      	mov	r0, r5
 800776e:	f002 fdc3 	bl	800a2f8 <rcl_wait_set_fini>
 8007772:	2800      	cmp	r0, #0
 8007774:	d0f3      	beq.n	800775e <rclc_executor_add_subscription+0x4e>
 8007776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007778 <rclc_executor_prepare>:
 8007778:	2800      	cmp	r0, #0
 800777a:	d044      	beq.n	8007806 <rclc_executor_prepare+0x8e>
 800777c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800777e:	f100 0518 	add.w	r5, r0, #24
 8007782:	b09b      	sub	sp, #108	@ 0x6c
 8007784:	4604      	mov	r4, r0
 8007786:	4628      	mov	r0, r5
 8007788:	f002 fdb0 	bl	800a2ec <rcl_wait_set_is_valid>
 800778c:	b110      	cbz	r0, 8007794 <rclc_executor_prepare+0x1c>
 800778e:	2000      	movs	r0, #0
 8007790:	b01b      	add	sp, #108	@ 0x6c
 8007792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007794:	4628      	mov	r0, r5
 8007796:	f002 fdaf 	bl	800a2f8 <rcl_wait_set_fini>
 800779a:	2800      	cmp	r0, #0
 800779c:	d130      	bne.n	8007800 <rclc_executor_prepare+0x88>
 800779e:	a80c      	add	r0, sp, #48	@ 0x30
 80077a0:	f002 fd90 	bl	800a2c4 <rcl_get_zero_initialized_wait_set>
 80077a4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80077a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80077ac:	46ae      	mov	lr, r5
 80077ae:	6967      	ldr	r7, [r4, #20]
 80077b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80077b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80077b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80077bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80077c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80077c4:	f8dc 3000 	ldr.w	r3, [ip]
 80077c8:	f8ce 3000 	str.w	r3, [lr]
 80077cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80077ce:	ae04      	add	r6, sp, #16
 80077d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	6862      	ldr	r2, [r4, #4]
 80077d6:	6033      	str	r3, [r6, #0]
 80077d8:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80077da:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80077dc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80077e0:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 80077e4:	e9cd 2100 	strd	r2, r1, [sp]
 80077e8:	4628      	mov	r0, r5
 80077ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80077ec:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80077ee:	f003 f8b3 	bl	800a958 <rcl_wait_set_init>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	d0cc      	beq.n	8007790 <rclc_executor_prepare+0x18>
 80077f6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80077f8:	f000 faa2 	bl	8007d40 <rcutils_reset_error>
 80077fc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80077fe:	e7c7      	b.n	8007790 <rclc_executor_prepare+0x18>
 8007800:	f000 fa9e 	bl	8007d40 <rcutils_reset_error>
 8007804:	e7cb      	b.n	800779e <rclc_executor_prepare+0x26>
 8007806:	200b      	movs	r0, #11
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop

0800780c <rclc_executor_spin_some>:
 800780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007810:	b083      	sub	sp, #12
 8007812:	2800      	cmp	r0, #0
 8007814:	f000 8091 	beq.w	800793a <rclc_executor_spin_some+0x12e>
 8007818:	4604      	mov	r4, r0
 800781a:	6840      	ldr	r0, [r0, #4]
 800781c:	4690      	mov	r8, r2
 800781e:	4699      	mov	r9, r3
 8007820:	f001 fc9a 	bl	8009158 <rcl_context_is_valid>
 8007824:	2800      	cmp	r0, #0
 8007826:	d037      	beq.n	8007898 <rclc_executor_spin_some+0x8c>
 8007828:	4620      	mov	r0, r4
 800782a:	f104 0718 	add.w	r7, r4, #24
 800782e:	f7ff ffa3 	bl	8007778 <rclc_executor_prepare>
 8007832:	4638      	mov	r0, r7
 8007834:	f002 fe44 	bl	800a4c0 <rcl_wait_set_clear>
 8007838:	4606      	mov	r6, r0
 800783a:	2800      	cmp	r0, #0
 800783c:	d177      	bne.n	800792e <rclc_executor_spin_some+0x122>
 800783e:	68e3      	ldr	r3, [r4, #12]
 8007840:	4605      	mov	r5, r0
 8007842:	b1eb      	cbz	r3, 8007880 <rclc_executor_spin_some+0x74>
 8007844:	68a1      	ldr	r1, [r4, #8]
 8007846:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 800784a:	01aa      	lsls	r2, r5, #6
 800784c:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8007850:	b1b3      	cbz	r3, 8007880 <rclc_executor_spin_some+0x74>
 8007852:	5c8b      	ldrb	r3, [r1, r2]
 8007854:	2b0a      	cmp	r3, #10
 8007856:	d81f      	bhi.n	8007898 <rclc_executor_spin_some+0x8c>
 8007858:	e8df f003 	tbb	[pc, r3]
 800785c:	253e3434 	.word	0x253e3434
 8007860:	06060625 	.word	0x06060625
 8007864:	525d      	.short	0x525d
 8007866:	48          	.byte	0x48
 8007867:	00          	.byte	0x00
 8007868:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800786c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8007870:	4638      	mov	r0, r7
 8007872:	f003 f97b 	bl	800ab6c <rcl_wait_set_add_service>
 8007876:	b9f8      	cbnz	r0, 80078b8 <rclc_executor_spin_some+0xac>
 8007878:	68e3      	ldr	r3, [r4, #12]
 800787a:	3501      	adds	r5, #1
 800787c:	42ab      	cmp	r3, r5
 800787e:	d8e1      	bhi.n	8007844 <rclc_executor_spin_some+0x38>
 8007880:	4642      	mov	r2, r8
 8007882:	464b      	mov	r3, r9
 8007884:	4638      	mov	r0, r7
 8007886:	f003 f99f 	bl	800abc8 <rcl_wait>
 800788a:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 800788e:	2d00      	cmp	r5, #0
 8007890:	f000 80ab 	beq.w	80079ea <rclc_executor_spin_some+0x1de>
 8007894:	2d01      	cmp	r5, #1
 8007896:	d055      	beq.n	8007944 <rclc_executor_spin_some+0x138>
 8007898:	f000 fa52 	bl	8007d40 <rcutils_reset_error>
 800789c:	2601      	movs	r6, #1
 800789e:	4630      	mov	r0, r6
 80078a0:	b003      	add	sp, #12
 80078a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80078aa:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80078ae:	4638      	mov	r0, r7
 80078b0:	f003 f930 	bl	800ab14 <rcl_wait_set_add_client>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	d0df      	beq.n	8007878 <rclc_executor_spin_some+0x6c>
 80078b8:	9001      	str	r0, [sp, #4]
 80078ba:	f000 fa41 	bl	8007d40 <rcutils_reset_error>
 80078be:	9801      	ldr	r0, [sp, #4]
 80078c0:	4606      	mov	r6, r0
 80078c2:	e7ec      	b.n	800789e <rclc_executor_spin_some+0x92>
 80078c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80078c8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80078cc:	4638      	mov	r0, r7
 80078ce:	f002 fdcb 	bl	800a468 <rcl_wait_set_add_subscription>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d0d0      	beq.n	8007878 <rclc_executor_spin_some+0x6c>
 80078d6:	e7ef      	b.n	80078b8 <rclc_executor_spin_some+0xac>
 80078d8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80078dc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80078e0:	4638      	mov	r0, r7
 80078e2:	f003 f8e7 	bl	800aab4 <rcl_wait_set_add_timer>
 80078e6:	2800      	cmp	r0, #0
 80078e8:	d0c6      	beq.n	8007878 <rclc_executor_spin_some+0x6c>
 80078ea:	e7e5      	b.n	80078b8 <rclc_executor_spin_some+0xac>
 80078ec:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80078f0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80078f4:	4638      	mov	r0, r7
 80078f6:	f003 f8b1 	bl	800aa5c <rcl_wait_set_add_guard_condition>
 80078fa:	2800      	cmp	r0, #0
 80078fc:	d0bc      	beq.n	8007878 <rclc_executor_spin_some+0x6c>
 80078fe:	e7db      	b.n	80078b8 <rclc_executor_spin_some+0xac>
 8007900:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007904:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8007908:	3110      	adds	r1, #16
 800790a:	4638      	mov	r0, r7
 800790c:	f003 fe7a 	bl	800b604 <rcl_action_wait_set_add_action_server>
 8007910:	2800      	cmp	r0, #0
 8007912:	d0b1      	beq.n	8007878 <rclc_executor_spin_some+0x6c>
 8007914:	e7d0      	b.n	80078b8 <rclc_executor_spin_some+0xac>
 8007916:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800791a:	2300      	movs	r3, #0
 800791c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8007920:	3110      	adds	r1, #16
 8007922:	4638      	mov	r0, r7
 8007924:	f003 fc5c 	bl	800b1e0 <rcl_action_wait_set_add_action_client>
 8007928:	2800      	cmp	r0, #0
 800792a:	d0a5      	beq.n	8007878 <rclc_executor_spin_some+0x6c>
 800792c:	e7c4      	b.n	80078b8 <rclc_executor_spin_some+0xac>
 800792e:	f000 fa07 	bl	8007d40 <rcutils_reset_error>
 8007932:	4630      	mov	r0, r6
 8007934:	b003      	add	sp, #12
 8007936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800793a:	260b      	movs	r6, #11
 800793c:	4630      	mov	r0, r6
 800793e:	b003      	add	sp, #12
 8007940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007944:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 8007948:	4663      	mov	r3, ip
 800794a:	4615      	mov	r5, r2
 800794c:	b1ca      	cbz	r2, 8007982 <rclc_executor_spin_some+0x176>
 800794e:	2500      	movs	r5, #0
 8007950:	46a8      	mov	r8, r5
 8007952:	f240 1991 	movw	r9, #401	@ 0x191
 8007956:	e00c      	b.n	8007972 <rclc_executor_spin_some+0x166>
 8007958:	f7ff fafe 	bl	8006f58 <_rclc_check_for_new_data>
 800795c:	f108 0801 	add.w	r8, r8, #1
 8007960:	4605      	mov	r5, r0
 8007962:	b108      	cbz	r0, 8007968 <rclc_executor_spin_some+0x15c>
 8007964:	4548      	cmp	r0, r9
 8007966:	d13e      	bne.n	80079e6 <rclc_executor_spin_some+0x1da>
 8007968:	68e2      	ldr	r2, [r4, #12]
 800796a:	4590      	cmp	r8, r2
 800796c:	f080 808b 	bcs.w	8007a86 <rclc_executor_spin_some+0x27a>
 8007970:	68a3      	ldr	r3, [r4, #8]
 8007972:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 8007976:	469c      	mov	ip, r3
 8007978:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800797c:	4639      	mov	r1, r7
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1ea      	bne.n	8007958 <rclc_executor_spin_some+0x14c>
 8007982:	4611      	mov	r1, r2
 8007984:	4660      	mov	r0, ip
 8007986:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800798a:	4798      	blx	r3
 800798c:	b358      	cbz	r0, 80079e6 <rclc_executor_spin_some+0x1da>
 800798e:	68e3      	ldr	r3, [r4, #12]
 8007990:	b34b      	cbz	r3, 80079e6 <rclc_executor_spin_some+0x1da>
 8007992:	f04f 0800 	mov.w	r8, #0
 8007996:	f240 1991 	movw	r9, #401	@ 0x191
 800799a:	e00a      	b.n	80079b2 <rclc_executor_spin_some+0x1a6>
 800799c:	f7ff fb2a 	bl	8006ff4 <_rclc_take_new_data>
 80079a0:	f108 0801 	add.w	r8, r8, #1
 80079a4:	4605      	mov	r5, r0
 80079a6:	b108      	cbz	r0, 80079ac <rclc_executor_spin_some+0x1a0>
 80079a8:	4548      	cmp	r0, r9
 80079aa:	d11c      	bne.n	80079e6 <rclc_executor_spin_some+0x1da>
 80079ac:	68e3      	ldr	r3, [r4, #12]
 80079ae:	4598      	cmp	r8, r3
 80079b0:	d26f      	bcs.n	8007a92 <rclc_executor_spin_some+0x286>
 80079b2:	68a3      	ldr	r3, [r4, #8]
 80079b4:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 80079b8:	4639      	mov	r1, r7
 80079ba:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 80079be:	2a00      	cmp	r2, #0
 80079c0:	d1ec      	bne.n	800799c <rclc_executor_spin_some+0x190>
 80079c2:	2700      	movs	r7, #0
 80079c4:	e009      	b.n	80079da <rclc_executor_spin_some+0x1ce>
 80079c6:	f7ff fcb5 	bl	8007334 <_rclc_execute>
 80079ca:	3701      	adds	r7, #1
 80079cc:	4605      	mov	r5, r0
 80079ce:	b950      	cbnz	r0, 80079e6 <rclc_executor_spin_some+0x1da>
 80079d0:	68e3      	ldr	r3, [r4, #12]
 80079d2:	429f      	cmp	r7, r3
 80079d4:	f4bf af63 	bcs.w	800789e <rclc_executor_spin_some+0x92>
 80079d8:	68a3      	ldr	r3, [r4, #8]
 80079da:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 80079de:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1ef      	bne.n	80079c6 <rclc_executor_spin_some+0x1ba>
 80079e6:	462e      	mov	r6, r5
 80079e8:	e759      	b.n	800789e <rclc_executor_spin_some+0x92>
 80079ea:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 80079ee:	4663      	mov	r3, ip
 80079f0:	2a00      	cmp	r2, #0
 80079f2:	d054      	beq.n	8007a9e <rclc_executor_spin_some+0x292>
 80079f4:	46a8      	mov	r8, r5
 80079f6:	f240 1991 	movw	r9, #401	@ 0x191
 80079fa:	e00b      	b.n	8007a14 <rclc_executor_spin_some+0x208>
 80079fc:	f7ff faac 	bl	8006f58 <_rclc_check_for_new_data>
 8007a00:	f108 0801 	add.w	r8, r8, #1
 8007a04:	4605      	mov	r5, r0
 8007a06:	b108      	cbz	r0, 8007a0c <rclc_executor_spin_some+0x200>
 8007a08:	4548      	cmp	r0, r9
 8007a0a:	d1ec      	bne.n	80079e6 <rclc_executor_spin_some+0x1da>
 8007a0c:	68e2      	ldr	r2, [r4, #12]
 8007a0e:	4590      	cmp	r8, r2
 8007a10:	d23c      	bcs.n	8007a8c <rclc_executor_spin_some+0x280>
 8007a12:	68a3      	ldr	r3, [r4, #8]
 8007a14:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 8007a18:	469c      	mov	ip, r3
 8007a1a:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8007a1e:	4639      	mov	r1, r7
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1eb      	bne.n	80079fc <rclc_executor_spin_some+0x1f0>
 8007a24:	4611      	mov	r1, r2
 8007a26:	4660      	mov	r0, ip
 8007a28:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 8007a2c:	4798      	blx	r3
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d0d9      	beq.n	80079e6 <rclc_executor_spin_some+0x1da>
 8007a32:	68e3      	ldr	r3, [r4, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d0d6      	beq.n	80079e6 <rclc_executor_spin_some+0x1da>
 8007a38:	f04f 0a00 	mov.w	sl, #0
 8007a3c:	f240 1891 	movw	r8, #401	@ 0x191
 8007a40:	f240 2959 	movw	r9, #601	@ 0x259
 8007a44:	e013      	b.n	8007a6e <rclc_executor_spin_some+0x262>
 8007a46:	f7ff fad5 	bl	8006ff4 <_rclc_take_new_data>
 8007a4a:	b118      	cbz	r0, 8007a54 <rclc_executor_spin_some+0x248>
 8007a4c:	4540      	cmp	r0, r8
 8007a4e:	d001      	beq.n	8007a54 <rclc_executor_spin_some+0x248>
 8007a50:	4548      	cmp	r0, r9
 8007a52:	d122      	bne.n	8007a9a <rclc_executor_spin_some+0x28e>
 8007a54:	68a0      	ldr	r0, [r4, #8]
 8007a56:	4458      	add	r0, fp
 8007a58:	f7ff fc6c 	bl	8007334 <_rclc_execute>
 8007a5c:	f10a 0a01 	add.w	sl, sl, #1
 8007a60:	4605      	mov	r5, r0
 8007a62:	2800      	cmp	r0, #0
 8007a64:	d1bf      	bne.n	80079e6 <rclc_executor_spin_some+0x1da>
 8007a66:	68e3      	ldr	r3, [r4, #12]
 8007a68:	459a      	cmp	sl, r3
 8007a6a:	f4bf af18 	bcs.w	800789e <rclc_executor_spin_some+0x92>
 8007a6e:	68a0      	ldr	r0, [r4, #8]
 8007a70:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8007a74:	4639      	mov	r1, r7
 8007a76:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8007a7a:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e1      	bne.n	8007a46 <rclc_executor_spin_some+0x23a>
 8007a82:	462e      	mov	r6, r5
 8007a84:	e70b      	b.n	800789e <rclc_executor_spin_some+0x92>
 8007a86:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8007a8a:	e77a      	b.n	8007982 <rclc_executor_spin_some+0x176>
 8007a8c:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8007a90:	e7c8      	b.n	8007a24 <rclc_executor_spin_some+0x218>
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d0a7      	beq.n	80079e6 <rclc_executor_spin_some+0x1da>
 8007a96:	68a3      	ldr	r3, [r4, #8]
 8007a98:	e793      	b.n	80079c2 <rclc_executor_spin_some+0x1b6>
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	e6ff      	b.n	800789e <rclc_executor_spin_some+0x92>
 8007a9e:	4615      	mov	r5, r2
 8007aa0:	e7c0      	b.n	8007a24 <rclc_executor_spin_some+0x218>
 8007aa2:	bf00      	nop

08007aa4 <rclc_executor_spin>:
 8007aa4:	b150      	cbz	r0, 8007abc <rclc_executor_spin+0x18>
 8007aa6:	b510      	push	{r4, lr}
 8007aa8:	4604      	mov	r4, r0
 8007aaa:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	@ 0x70
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f7ff feac 	bl	800780c <rclc_executor_spin_some>
 8007ab4:	f030 0302 	bics.w	r3, r0, #2
 8007ab8:	d0f7      	beq.n	8007aaa <rclc_executor_spin+0x6>
 8007aba:	bd10      	pop	{r4, pc}
 8007abc:	200b      	movs	r0, #11
 8007abe:	4770      	bx	lr

08007ac0 <rclc_executor_handle_counters_zero_init>:
 8007ac0:	b130      	cbz	r0, 8007ad0 <rclc_executor_handle_counters_zero_init+0x10>
 8007ac2:	b508      	push	{r3, lr}
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	f00b ff54 	bl	8013974 <memset>
 8007acc:	2000      	movs	r0, #0
 8007ace:	bd08      	pop	{r3, pc}
 8007ad0:	200b      	movs	r0, #11
 8007ad2:	4770      	bx	lr

08007ad4 <rclc_executor_handle_init>:
 8007ad4:	b158      	cbz	r0, 8007aee <rclc_executor_handle_init+0x1a>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	220b      	movs	r2, #11
 8007ada:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8007ade:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8007ae2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 8007ae6:	8002      	strh	r2, [r0, #0]
 8007ae8:	8703      	strh	r3, [r0, #56]	@ 0x38
 8007aea:	4618      	mov	r0, r3
 8007aec:	4770      	bx	lr
 8007aee:	200b      	movs	r0, #11
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop

08007af4 <rclc_support_init>:
 8007af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af8:	b086      	sub	sp, #24
 8007afa:	b3b8      	cbz	r0, 8007b6c <rclc_support_init+0x78>
 8007afc:	461c      	mov	r4, r3
 8007afe:	b3ab      	cbz	r3, 8007b6c <rclc_support_init+0x78>
 8007b00:	460f      	mov	r7, r1
 8007b02:	4690      	mov	r8, r2
 8007b04:	4606      	mov	r6, r0
 8007b06:	f001 fc91 	bl	800942c <rcl_get_zero_initialized_init_options>
 8007b0a:	f104 030c 	add.w	r3, r4, #12
 8007b0e:	9005      	str	r0, [sp, #20]
 8007b10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007b14:	e88d 0003 	stmia.w	sp, {r0, r1}
 8007b18:	a805      	add	r0, sp, #20
 8007b1a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8007b1e:	f001 fc87 	bl	8009430 <rcl_init_options_init>
 8007b22:	4605      	mov	r5, r0
 8007b24:	b9e0      	cbnz	r0, 8007b60 <rclc_support_init+0x6c>
 8007b26:	ad02      	add	r5, sp, #8
 8007b28:	4628      	mov	r0, r5
 8007b2a:	f001 fb11 	bl	8009150 <rcl_get_zero_initialized_context>
 8007b2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007b32:	4633      	mov	r3, r6
 8007b34:	e886 0003 	stmia.w	r6, {r0, r1}
 8007b38:	aa05      	add	r2, sp, #20
 8007b3a:	4641      	mov	r1, r8
 8007b3c:	4638      	mov	r0, r7
 8007b3e:	f001 fb71 	bl	8009224 <rcl_init>
 8007b42:	4605      	mov	r5, r0
 8007b44:	b9b8      	cbnz	r0, 8007b76 <rclc_support_init+0x82>
 8007b46:	60b4      	str	r4, [r6, #8]
 8007b48:	4622      	mov	r2, r4
 8007b4a:	f106 010c 	add.w	r1, r6, #12
 8007b4e:	2003      	movs	r0, #3
 8007b50:	f002 fa2e 	bl	8009fb0 <rcl_clock_init>
 8007b54:	4605      	mov	r5, r0
 8007b56:	b970      	cbnz	r0, 8007b76 <rclc_support_init+0x82>
 8007b58:	a805      	add	r0, sp, #20
 8007b5a:	f001 fcc5 	bl	80094e8 <rcl_init_options_fini>
 8007b5e:	b108      	cbz	r0, 8007b64 <rclc_support_init+0x70>
 8007b60:	f000 f8ee 	bl	8007d40 <rcutils_reset_error>
 8007b64:	4628      	mov	r0, r5
 8007b66:	b006      	add	sp, #24
 8007b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b6c:	250b      	movs	r5, #11
 8007b6e:	4628      	mov	r0, r5
 8007b70:	b006      	add	sp, #24
 8007b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b76:	f000 f8e3 	bl	8007d40 <rcutils_reset_error>
 8007b7a:	a805      	add	r0, sp, #20
 8007b7c:	f001 fcb4 	bl	80094e8 <rcl_init_options_fini>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d0ef      	beq.n	8007b64 <rclc_support_init+0x70>
 8007b84:	e7ec      	b.n	8007b60 <rclc_support_init+0x6c>
 8007b86:	bf00      	nop

08007b88 <rclc_node_init_default>:
 8007b88:	b3b8      	cbz	r0, 8007bfa <rclc_node_init_default+0x72>
 8007b8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b8e:	460d      	mov	r5, r1
 8007b90:	b0a1      	sub	sp, #132	@ 0x84
 8007b92:	b329      	cbz	r1, 8007be0 <rclc_node_init_default+0x58>
 8007b94:	4616      	mov	r6, r2
 8007b96:	b31a      	cbz	r2, 8007be0 <rclc_node_init_default+0x58>
 8007b98:	461f      	mov	r7, r3
 8007b9a:	b30b      	cbz	r3, 8007be0 <rclc_node_init_default+0x58>
 8007b9c:	f10d 0810 	add.w	r8, sp, #16
 8007ba0:	4604      	mov	r4, r0
 8007ba2:	4640      	mov	r0, r8
 8007ba4:	f001 fd26 	bl	80095f4 <rcl_get_zero_initialized_node>
 8007ba8:	e898 0003 	ldmia.w	r8, {r0, r1}
 8007bac:	f10d 0918 	add.w	r9, sp, #24
 8007bb0:	e884 0003 	stmia.w	r4, {r0, r1}
 8007bb4:	4648      	mov	r0, r9
 8007bb6:	f001 fea5 	bl	8009904 <rcl_node_get_default_options>
 8007bba:	4640      	mov	r0, r8
 8007bbc:	f001 fd1a 	bl	80095f4 <rcl_get_zero_initialized_node>
 8007bc0:	f8cd 9000 	str.w	r9, [sp]
 8007bc4:	e898 0003 	ldmia.w	r8, {r0, r1}
 8007bc8:	463b      	mov	r3, r7
 8007bca:	e884 0003 	stmia.w	r4, {r0, r1}
 8007bce:	4632      	mov	r2, r6
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f001 fd18 	bl	8009608 <rcl_node_init>
 8007bd8:	b930      	cbnz	r0, 8007be8 <rclc_node_init_default+0x60>
 8007bda:	b021      	add	sp, #132	@ 0x84
 8007bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007be0:	200b      	movs	r0, #11
 8007be2:	b021      	add	sp, #132	@ 0x84
 8007be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007be8:	9003      	str	r0, [sp, #12]
 8007bea:	f000 f8a9 	bl	8007d40 <rcutils_reset_error>
 8007bee:	f000 f8a7 	bl	8007d40 <rcutils_reset_error>
 8007bf2:	9803      	ldr	r0, [sp, #12]
 8007bf4:	b021      	add	sp, #132	@ 0x84
 8007bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bfa:	200b      	movs	r0, #11
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop

08007c00 <rclc_subscription_init_default>:
 8007c00:	b368      	cbz	r0, 8007c5e <rclc_subscription_init_default+0x5e>
 8007c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c06:	460d      	mov	r5, r1
 8007c08:	b0a2      	sub	sp, #136	@ 0x88
 8007c0a:	b321      	cbz	r1, 8007c56 <rclc_subscription_init_default+0x56>
 8007c0c:	4616      	mov	r6, r2
 8007c0e:	b312      	cbz	r2, 8007c56 <rclc_subscription_init_default+0x56>
 8007c10:	461f      	mov	r7, r3
 8007c12:	b303      	cbz	r3, 8007c56 <rclc_subscription_init_default+0x56>
 8007c14:	4604      	mov	r4, r0
 8007c16:	f002 f87f 	bl	8009d18 <rcl_get_zero_initialized_subscription>
 8007c1a:	f10d 0810 	add.w	r8, sp, #16
 8007c1e:	6020      	str	r0, [r4, #0]
 8007c20:	4640      	mov	r0, r8
 8007c22:	f002 f927 	bl	8009e74 <rcl_subscription_get_default_options>
 8007c26:	490f      	ldr	r1, [pc, #60]	@ (8007c64 <rclc_subscription_init_default+0x64>)
 8007c28:	2250      	movs	r2, #80	@ 0x50
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	f00b ff7d 	bl	8013b2a <memcpy>
 8007c30:	f8cd 8000 	str.w	r8, [sp]
 8007c34:	463b      	mov	r3, r7
 8007c36:	4632      	mov	r2, r6
 8007c38:	4629      	mov	r1, r5
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f002 f872 	bl	8009d24 <rcl_subscription_init>
 8007c40:	b910      	cbnz	r0, 8007c48 <rclc_subscription_init_default+0x48>
 8007c42:	b022      	add	sp, #136	@ 0x88
 8007c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c48:	9003      	str	r0, [sp, #12]
 8007c4a:	f000 f879 	bl	8007d40 <rcutils_reset_error>
 8007c4e:	9803      	ldr	r0, [sp, #12]
 8007c50:	b022      	add	sp, #136	@ 0x88
 8007c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c56:	200b      	movs	r0, #11
 8007c58:	b022      	add	sp, #136	@ 0x88
 8007c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c5e:	200b      	movs	r0, #11
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	08014a60 	.word	0x08014a60

08007c68 <__default_zero_allocate>:
 8007c68:	f00b ba94 	b.w	8013194 <calloc>

08007c6c <__default_reallocate>:
 8007c6c:	f00b bc20 	b.w	80134b0 <realloc>

08007c70 <__default_deallocate>:
 8007c70:	f00b bafc 	b.w	801326c <free>

08007c74 <__default_allocate>:
 8007c74:	f00b baf2 	b.w	801325c <malloc>

08007c78 <rcutils_get_zero_initialized_allocator>:
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	4c05      	ldr	r4, [pc, #20]	@ (8007c90 <rcutils_get_zero_initialized_allocator+0x18>)
 8007c7c:	4686      	mov	lr, r0
 8007c7e:	4684      	mov	ip, r0
 8007c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	f8cc 3000 	str.w	r3, [ip]
 8007c8c:	4670      	mov	r0, lr
 8007c8e:	bd10      	pop	{r4, pc}
 8007c90:	08014ab0 	.word	0x08014ab0

08007c94 <rcutils_get_default_allocator>:
 8007c94:	b510      	push	{r4, lr}
 8007c96:	4c05      	ldr	r4, [pc, #20]	@ (8007cac <rcutils_get_default_allocator+0x18>)
 8007c98:	4686      	mov	lr, r0
 8007c9a:	4684      	mov	ip, r0
 8007c9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	f8cc 3000 	str.w	r3, [ip]
 8007ca8:	4670      	mov	r0, lr
 8007caa:	bd10      	pop	{r4, pc}
 8007cac:	20000014 	.word	0x20000014

08007cb0 <rcutils_set_default_allocator>:
 8007cb0:	b1a8      	cbz	r0, 8007cde <rcutils_set_default_allocator+0x2e>
 8007cb2:	6802      	ldr	r2, [r0, #0]
 8007cb4:	b1a2      	cbz	r2, 8007ce0 <rcutils_set_default_allocator+0x30>
 8007cb6:	6841      	ldr	r1, [r0, #4]
 8007cb8:	b1a1      	cbz	r1, 8007ce4 <rcutils_set_default_allocator+0x34>
 8007cba:	b410      	push	{r4}
 8007cbc:	68c4      	ldr	r4, [r0, #12]
 8007cbe:	b164      	cbz	r4, 8007cda <rcutils_set_default_allocator+0x2a>
 8007cc0:	6880      	ldr	r0, [r0, #8]
 8007cc2:	b138      	cbz	r0, 8007cd4 <rcutils_set_default_allocator+0x24>
 8007cc4:	4b08      	ldr	r3, [pc, #32]	@ (8007ce8 <rcutils_set_default_allocator+0x38>)
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8007cce:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8007cd2:	2001      	movs	r0, #1
 8007cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	4620      	mov	r0, r4
 8007cdc:	e7fa      	b.n	8007cd4 <rcutils_set_default_allocator+0x24>
 8007cde:	4770      	bx	lr
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	4770      	bx	lr
 8007ce4:	4608      	mov	r0, r1
 8007ce6:	4770      	bx	lr
 8007ce8:	20000014 	.word	0x20000014

08007cec <rcutils_allocator_is_valid>:
 8007cec:	b158      	cbz	r0, 8007d06 <rcutils_allocator_is_valid+0x1a>
 8007cee:	6803      	ldr	r3, [r0, #0]
 8007cf0:	b143      	cbz	r3, 8007d04 <rcutils_allocator_is_valid+0x18>
 8007cf2:	6843      	ldr	r3, [r0, #4]
 8007cf4:	b133      	cbz	r3, 8007d04 <rcutils_allocator_is_valid+0x18>
 8007cf6:	68c3      	ldr	r3, [r0, #12]
 8007cf8:	b123      	cbz	r3, 8007d04 <rcutils_allocator_is_valid+0x18>
 8007cfa:	6880      	ldr	r0, [r0, #8]
 8007cfc:	3800      	subs	r0, #0
 8007cfe:	bf18      	it	ne
 8007d00:	2001      	movne	r0, #1
 8007d02:	4770      	bx	lr
 8007d04:	4618      	mov	r0, r3
 8007d06:	4770      	bx	lr

08007d08 <rcutils_error_is_set>:
 8007d08:	4b01      	ldr	r3, [pc, #4]	@ (8007d10 <rcutils_error_is_set+0x8>)
 8007d0a:	7818      	ldrb	r0, [r3, #0]
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	2000917c 	.word	0x2000917c

08007d14 <rcutils_get_error_string>:
 8007d14:	4b06      	ldr	r3, [pc, #24]	@ (8007d30 <rcutils_get_error_string+0x1c>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	b13b      	cbz	r3, 8007d2a <rcutils_get_error_string+0x16>
 8007d1a:	4b06      	ldr	r3, [pc, #24]	@ (8007d34 <rcutils_get_error_string+0x20>)
 8007d1c:	781a      	ldrb	r2, [r3, #0]
 8007d1e:	b90a      	cbnz	r2, 8007d24 <rcutils_get_error_string+0x10>
 8007d20:	2201      	movs	r2, #1
 8007d22:	701a      	strb	r2, [r3, #0]
 8007d24:	4b04      	ldr	r3, [pc, #16]	@ (8007d38 <rcutils_get_error_string+0x24>)
 8007d26:	7818      	ldrb	r0, [r3, #0]
 8007d28:	4770      	bx	lr
 8007d2a:	4b04      	ldr	r3, [pc, #16]	@ (8007d3c <rcutils_get_error_string+0x28>)
 8007d2c:	7818      	ldrb	r0, [r3, #0]
 8007d2e:	4770      	bx	lr
 8007d30:	2000917c 	.word	0x2000917c
 8007d34:	20009181 	.word	0x20009181
 8007d38:	20009180 	.word	0x20009180
 8007d3c:	08014ac4 	.word	0x08014ac4

08007d40 <rcutils_reset_error>:
 8007d40:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8007d60 <rcutils_reset_error+0x20>
 8007d44:	4a08      	ldr	r2, [pc, #32]	@ (8007d68 <rcutils_reset_error+0x28>)
 8007d46:	4809      	ldr	r0, [pc, #36]	@ (8007d6c <rcutils_reset_error+0x2c>)
 8007d48:	4909      	ldr	r1, [pc, #36]	@ (8007d70 <rcutils_reset_error+0x30>)
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	8013      	strh	r3, [r2, #0]
 8007d4e:	ed82 7b02 	vstr	d7, [r2, #8]
 8007d52:	4a08      	ldr	r2, [pc, #32]	@ (8007d74 <rcutils_reset_error+0x34>)
 8007d54:	7003      	strb	r3, [r0, #0]
 8007d56:	700b      	strb	r3, [r1, #0]
 8007d58:	7013      	strb	r3, [r2, #0]
 8007d5a:	4770      	bx	lr
 8007d5c:	f3af 8000 	nop.w
	...
 8007d68:	20009188 	.word	0x20009188
 8007d6c:	20009181 	.word	0x20009181
 8007d70:	20009180 	.word	0x20009180
 8007d74:	2000917c 	.word	0x2000917c

08007d78 <rcutils_system_time_now>:
 8007d78:	b318      	cbz	r0, 8007dc2 <rcutils_system_time_now+0x4a>
 8007d7a:	b570      	push	{r4, r5, r6, lr}
 8007d7c:	b084      	sub	sp, #16
 8007d7e:	4604      	mov	r4, r0
 8007d80:	4669      	mov	r1, sp
 8007d82:	2001      	movs	r0, #1
 8007d84:	f7f9 f998 	bl	80010b8 <clock_gettime>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	db17      	blt.n	8007dbc <rcutils_system_time_now+0x44>
 8007d8c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8007d90:	2900      	cmp	r1, #0
 8007d92:	db13      	blt.n	8007dbc <rcutils_system_time_now+0x44>
 8007d94:	9d02      	ldr	r5, [sp, #8]
 8007d96:	2d00      	cmp	r5, #0
 8007d98:	db0d      	blt.n	8007db6 <rcutils_system_time_now+0x3e>
 8007d9a:	4e0b      	ldr	r6, [pc, #44]	@ (8007dc8 <rcutils_system_time_now+0x50>)
 8007d9c:	fba3 3206 	umull	r3, r2, r3, r6
 8007da0:	195b      	adds	r3, r3, r5
 8007da2:	fb06 2201 	mla	r2, r6, r1, r2
 8007da6:	f04f 0000 	mov.w	r0, #0
 8007daa:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8007dae:	e9c4 3200 	strd	r3, r2, [r4]
 8007db2:	b004      	add	sp, #16
 8007db4:	bd70      	pop	{r4, r5, r6, pc}
 8007db6:	ea53 0201 	orrs.w	r2, r3, r1
 8007dba:	d1ee      	bne.n	8007d9a <rcutils_system_time_now+0x22>
 8007dbc:	2002      	movs	r0, #2
 8007dbe:	b004      	add	sp, #16
 8007dc0:	bd70      	pop	{r4, r5, r6, pc}
 8007dc2:	200b      	movs	r0, #11
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	3b9aca00 	.word	0x3b9aca00

08007dcc <rcutils_steady_time_now>:
 8007dcc:	b318      	cbz	r0, 8007e16 <rcutils_steady_time_now+0x4a>
 8007dce:	b570      	push	{r4, r5, r6, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	4669      	mov	r1, sp
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	f7f9 f96e 	bl	80010b8 <clock_gettime>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	db17      	blt.n	8007e10 <rcutils_steady_time_now+0x44>
 8007de0:	e9dd 3100 	ldrd	r3, r1, [sp]
 8007de4:	2900      	cmp	r1, #0
 8007de6:	db13      	blt.n	8007e10 <rcutils_steady_time_now+0x44>
 8007de8:	9d02      	ldr	r5, [sp, #8]
 8007dea:	2d00      	cmp	r5, #0
 8007dec:	db0d      	blt.n	8007e0a <rcutils_steady_time_now+0x3e>
 8007dee:	4e0b      	ldr	r6, [pc, #44]	@ (8007e1c <rcutils_steady_time_now+0x50>)
 8007df0:	fba3 3206 	umull	r3, r2, r3, r6
 8007df4:	195b      	adds	r3, r3, r5
 8007df6:	fb06 2201 	mla	r2, r6, r1, r2
 8007dfa:	f04f 0000 	mov.w	r0, #0
 8007dfe:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8007e02:	e9c4 3200 	strd	r3, r2, [r4]
 8007e06:	b004      	add	sp, #16
 8007e08:	bd70      	pop	{r4, r5, r6, pc}
 8007e0a:	ea53 0201 	orrs.w	r2, r3, r1
 8007e0e:	d1ee      	bne.n	8007dee <rcutils_steady_time_now+0x22>
 8007e10:	2002      	movs	r0, #2
 8007e12:	b004      	add	sp, #16
 8007e14:	bd70      	pop	{r4, r5, r6, pc}
 8007e16:	200b      	movs	r0, #11
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	3b9aca00 	.word	0x3b9aca00

08007e20 <rmw_uros_set_custom_transport>:
 8007e20:	b470      	push	{r4, r5, r6}
 8007e22:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8007e26:	b162      	cbz	r2, 8007e42 <rmw_uros_set_custom_transport+0x22>
 8007e28:	b15b      	cbz	r3, 8007e42 <rmw_uros_set_custom_transport+0x22>
 8007e2a:	b155      	cbz	r5, 8007e42 <rmw_uros_set_custom_transport+0x22>
 8007e2c:	b14e      	cbz	r6, 8007e42 <rmw_uros_set_custom_transport+0x22>
 8007e2e:	4c06      	ldr	r4, [pc, #24]	@ (8007e48 <rmw_uros_set_custom_transport+0x28>)
 8007e30:	7020      	strb	r0, [r4, #0]
 8007e32:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8007e36:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007e3a:	6166      	str	r6, [r4, #20]
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	bc70      	pop	{r4, r5, r6}
 8007e40:	4770      	bx	lr
 8007e42:	200b      	movs	r0, #11
 8007e44:	bc70      	pop	{r4, r5, r6}
 8007e46:	4770      	bx	lr
 8007e48:	20009198 	.word	0x20009198

08007e4c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8007e4c:	4b04      	ldr	r3, [pc, #16]	@ (8007e60 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	b10a      	cbz	r2, 8007e56 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8007e52:	4803      	ldr	r0, [pc, #12]	@ (8007e60 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007e54:	4770      	bx	lr
 8007e56:	4a03      	ldr	r2, [pc, #12]	@ (8007e64 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8007e58:	4801      	ldr	r0, [pc, #4]	@ (8007e60 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007e5a:	6812      	ldr	r2, [r2, #0]
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	4770      	bx	lr
 8007e60:	20000028 	.word	0x20000028
 8007e64:	200000d0 	.word	0x200000d0

08007e68 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8007e68:	4a02      	ldr	r2, [pc, #8]	@ (8007e74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8007e6a:	4b03      	ldr	r3, [pc, #12]	@ (8007e78 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8007e6c:	6812      	ldr	r2, [r2, #0]
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	200000d0 	.word	0x200000d0
 8007e78:	20000028 	.word	0x20000028

08007e7c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8007e7c:	f005 bf9a 	b.w	800ddb4 <std_msgs__msg__Int32__init>

08007e80 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8007e80:	f005 bf9c 	b.w	800ddbc <std_msgs__msg__Int32__fini>

08007e84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8007e84:	4b04      	ldr	r3, [pc, #16]	@ (8007e98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	b10a      	cbz	r2, 8007e8e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8007e8a:	4803      	ldr	r0, [pc, #12]	@ (8007e98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007e8c:	4770      	bx	lr
 8007e8e:	4a03      	ldr	r2, [pc, #12]	@ (8007e9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8007e90:	4801      	ldr	r0, [pc, #4]	@ (8007e98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007e92:	6812      	ldr	r2, [r2, #0]
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	4770      	bx	lr
 8007e98:	20000048 	.word	0x20000048
 8007e9c:	200000d4 	.word	0x200000d4

08007ea0 <_Int32__max_serialized_size>:
 8007ea0:	b508      	push	{r3, lr}
 8007ea2:	2104      	movs	r1, #4
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	f001 f803 	bl	8008eb0 <ucdr_alignment>
 8007eaa:	3004      	adds	r0, #4
 8007eac:	bd08      	pop	{r3, pc}
 8007eae:	bf00      	nop

08007eb0 <_Int32__cdr_deserialize>:
 8007eb0:	b109      	cbz	r1, 8007eb6 <_Int32__cdr_deserialize+0x6>
 8007eb2:	f000 bf17 	b.w	8008ce4 <ucdr_deserialize_int32_t>
 8007eb6:	4608      	mov	r0, r1
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop

08007ebc <get_serialized_size_std_msgs__msg__Int32>:
 8007ebc:	b508      	push	{r3, lr}
 8007ebe:	b120      	cbz	r0, 8007eca <get_serialized_size_std_msgs__msg__Int32+0xe>
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	2104      	movs	r1, #4
 8007ec4:	f000 fff4 	bl	8008eb0 <ucdr_alignment>
 8007ec8:	3004      	adds	r0, #4
 8007eca:	bd08      	pop	{r3, pc}

08007ecc <_Int32__cdr_serialize>:
 8007ecc:	460a      	mov	r2, r1
 8007ece:	b118      	cbz	r0, 8007ed8 <_Int32__cdr_serialize+0xc>
 8007ed0:	6801      	ldr	r1, [r0, #0]
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	f000 be6c 	b.w	8008bb0 <ucdr_serialize_int32_t>
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop

08007edc <_Int32__get_serialized_size>:
 8007edc:	b130      	cbz	r0, 8007eec <_Int32__get_serialized_size+0x10>
 8007ede:	b508      	push	{r3, lr}
 8007ee0:	2104      	movs	r1, #4
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	f000 ffe4 	bl	8008eb0 <ucdr_alignment>
 8007ee8:	3004      	adds	r0, #4
 8007eea:	bd08      	pop	{r3, pc}
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop

08007ef0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8007ef0:	4800      	ldr	r0, [pc, #0]	@ (8007ef4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8007ef2:	4770      	bx	lr
 8007ef4:	2000009c 	.word	0x2000009c

08007ef8 <ucdr_serialize_bool>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	460d      	mov	r5, r1
 8007efc:	2101      	movs	r1, #1
 8007efe:	4604      	mov	r4, r0
 8007f00:	f000 ff8a 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8007f04:	b148      	cbz	r0, 8007f1a <ucdr_serialize_bool+0x22>
 8007f06:	68a3      	ldr	r3, [r4, #8]
 8007f08:	701d      	strb	r5, [r3, #0]
 8007f0a:	68a2      	ldr	r2, [r4, #8]
 8007f0c:	6923      	ldr	r3, [r4, #16]
 8007f0e:	2101      	movs	r1, #1
 8007f10:	440a      	add	r2, r1
 8007f12:	440b      	add	r3, r1
 8007f14:	60a2      	str	r2, [r4, #8]
 8007f16:	6123      	str	r3, [r4, #16]
 8007f18:	7561      	strb	r1, [r4, #21]
 8007f1a:	7da0      	ldrb	r0, [r4, #22]
 8007f1c:	f080 0001 	eor.w	r0, r0, #1
 8007f20:	bd38      	pop	{r3, r4, r5, pc}
 8007f22:	bf00      	nop

08007f24 <ucdr_deserialize_bool>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	460d      	mov	r5, r1
 8007f28:	2101      	movs	r1, #1
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	f000 ff74 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8007f30:	b160      	cbz	r0, 8007f4c <ucdr_deserialize_bool+0x28>
 8007f32:	68a2      	ldr	r2, [r4, #8]
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007f3a:	3900      	subs	r1, #0
 8007f3c:	bf18      	it	ne
 8007f3e:	2101      	movne	r1, #1
 8007f40:	7029      	strb	r1, [r5, #0]
 8007f42:	3301      	adds	r3, #1
 8007f44:	2101      	movs	r1, #1
 8007f46:	60a2      	str	r2, [r4, #8]
 8007f48:	6123      	str	r3, [r4, #16]
 8007f4a:	7561      	strb	r1, [r4, #21]
 8007f4c:	7da0      	ldrb	r0, [r4, #22]
 8007f4e:	f080 0001 	eor.w	r0, r0, #1
 8007f52:	bd38      	pop	{r3, r4, r5, pc}

08007f54 <ucdr_serialize_uint8_t>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	460d      	mov	r5, r1
 8007f58:	2101      	movs	r1, #1
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	f000 ff5c 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8007f60:	b148      	cbz	r0, 8007f76 <ucdr_serialize_uint8_t+0x22>
 8007f62:	68a3      	ldr	r3, [r4, #8]
 8007f64:	701d      	strb	r5, [r3, #0]
 8007f66:	68a2      	ldr	r2, [r4, #8]
 8007f68:	6923      	ldr	r3, [r4, #16]
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	440a      	add	r2, r1
 8007f6e:	440b      	add	r3, r1
 8007f70:	60a2      	str	r2, [r4, #8]
 8007f72:	6123      	str	r3, [r4, #16]
 8007f74:	7561      	strb	r1, [r4, #21]
 8007f76:	7da0      	ldrb	r0, [r4, #22]
 8007f78:	f080 0001 	eor.w	r0, r0, #1
 8007f7c:	bd38      	pop	{r3, r4, r5, pc}
 8007f7e:	bf00      	nop

08007f80 <ucdr_deserialize_uint8_t>:
 8007f80:	b538      	push	{r3, r4, r5, lr}
 8007f82:	460d      	mov	r5, r1
 8007f84:	2101      	movs	r1, #1
 8007f86:	4604      	mov	r4, r0
 8007f88:	f000 ff46 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8007f8c:	b150      	cbz	r0, 8007fa4 <ucdr_deserialize_uint8_t+0x24>
 8007f8e:	68a3      	ldr	r3, [r4, #8]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	702b      	strb	r3, [r5, #0]
 8007f94:	68a2      	ldr	r2, [r4, #8]
 8007f96:	6923      	ldr	r3, [r4, #16]
 8007f98:	2101      	movs	r1, #1
 8007f9a:	440a      	add	r2, r1
 8007f9c:	440b      	add	r3, r1
 8007f9e:	60a2      	str	r2, [r4, #8]
 8007fa0:	6123      	str	r3, [r4, #16]
 8007fa2:	7561      	strb	r1, [r4, #21]
 8007fa4:	7da0      	ldrb	r0, [r4, #22]
 8007fa6:	f080 0001 	eor.w	r0, r0, #1
 8007faa:	bd38      	pop	{r3, r4, r5, pc}

08007fac <ucdr_serialize_uint16_t>:
 8007fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb0:	b082      	sub	sp, #8
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	2102      	movs	r1, #2
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007fbc:	f000 ff80 	bl	8008ec0 <ucdr_buffer_alignment>
 8007fc0:	4601      	mov	r1, r0
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	7d67      	ldrb	r7, [r4, #21]
 8007fc6:	f000 ffbf 	bl	8008f48 <ucdr_advance_buffer>
 8007fca:	2102      	movs	r1, #2
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f000 ff17 	bl	8008e00 <ucdr_check_buffer_available_for>
 8007fd2:	b1c0      	cbz	r0, 8008006 <ucdr_serialize_uint16_t+0x5a>
 8007fd4:	7d22      	ldrb	r2, [r4, #20]
 8007fd6:	68a3      	ldr	r3, [r4, #8]
 8007fd8:	2a01      	cmp	r2, #1
 8007fda:	d04e      	beq.n	800807a <ucdr_serialize_uint16_t+0xce>
 8007fdc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007fe0:	701a      	strb	r2, [r3, #0]
 8007fe2:	68a3      	ldr	r3, [r4, #8]
 8007fe4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007fe8:	705a      	strb	r2, [r3, #1]
 8007fea:	68a2      	ldr	r2, [r4, #8]
 8007fec:	6923      	ldr	r3, [r4, #16]
 8007fee:	3202      	adds	r2, #2
 8007ff0:	3302      	adds	r3, #2
 8007ff2:	2102      	movs	r1, #2
 8007ff4:	60a2      	str	r2, [r4, #8]
 8007ff6:	6123      	str	r3, [r4, #16]
 8007ff8:	7561      	strb	r1, [r4, #21]
 8007ffa:	7da0      	ldrb	r0, [r4, #22]
 8007ffc:	f080 0001 	eor.w	r0, r0, #1
 8008000:	b002      	add	sp, #8
 8008002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008006:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800800a:	42ab      	cmp	r3, r5
 800800c:	d923      	bls.n	8008056 <ucdr_serialize_uint16_t+0xaa>
 800800e:	1b5e      	subs	r6, r3, r5
 8008010:	60a3      	str	r3, [r4, #8]
 8008012:	6923      	ldr	r3, [r4, #16]
 8008014:	f1c6 0802 	rsb	r8, r6, #2
 8008018:	4433      	add	r3, r6
 800801a:	6123      	str	r3, [r4, #16]
 800801c:	4641      	mov	r1, r8
 800801e:	4620      	mov	r0, r4
 8008020:	f000 fefa 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008024:	b368      	cbz	r0, 8008082 <ucdr_serialize_uint16_t+0xd6>
 8008026:	7d23      	ldrb	r3, [r4, #20]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d03b      	beq.n	80080a4 <ucdr_serialize_uint16_t+0xf8>
 800802c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008030:	702b      	strb	r3, [r5, #0]
 8008032:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008036:	706b      	strb	r3, [r5, #1]
 8008038:	6923      	ldr	r3, [r4, #16]
 800803a:	68a2      	ldr	r2, [r4, #8]
 800803c:	7da0      	ldrb	r0, [r4, #22]
 800803e:	3302      	adds	r3, #2
 8008040:	4442      	add	r2, r8
 8008042:	1b9b      	subs	r3, r3, r6
 8008044:	2102      	movs	r1, #2
 8008046:	f080 0001 	eor.w	r0, r0, #1
 800804a:	60a2      	str	r2, [r4, #8]
 800804c:	6123      	str	r3, [r4, #16]
 800804e:	7561      	strb	r1, [r4, #21]
 8008050:	b002      	add	sp, #8
 8008052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008056:	2102      	movs	r1, #2
 8008058:	4620      	mov	r0, r4
 800805a:	f000 fedd 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 800805e:	2800      	cmp	r0, #0
 8008060:	d0cb      	beq.n	8007ffa <ucdr_serialize_uint16_t+0x4e>
 8008062:	7d23      	ldrb	r3, [r4, #20]
 8008064:	68a2      	ldr	r2, [r4, #8]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d018      	beq.n	800809c <ucdr_serialize_uint16_t+0xf0>
 800806a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800806e:	7013      	strb	r3, [r2, #0]
 8008070:	68a3      	ldr	r3, [r4, #8]
 8008072:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008076:	705a      	strb	r2, [r3, #1]
 8008078:	e7b7      	b.n	8007fea <ucdr_serialize_uint16_t+0x3e>
 800807a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800807e:	801a      	strh	r2, [r3, #0]
 8008080:	e7b3      	b.n	8007fea <ucdr_serialize_uint16_t+0x3e>
 8008082:	68a2      	ldr	r2, [r4, #8]
 8008084:	6923      	ldr	r3, [r4, #16]
 8008086:	7da0      	ldrb	r0, [r4, #22]
 8008088:	7567      	strb	r7, [r4, #21]
 800808a:	1b92      	subs	r2, r2, r6
 800808c:	1b9b      	subs	r3, r3, r6
 800808e:	f080 0001 	eor.w	r0, r0, #1
 8008092:	60a2      	str	r2, [r4, #8]
 8008094:	6123      	str	r3, [r4, #16]
 8008096:	b002      	add	sp, #8
 8008098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800809c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80080a0:	8013      	strh	r3, [r2, #0]
 80080a2:	e7a2      	b.n	8007fea <ucdr_serialize_uint16_t+0x3e>
 80080a4:	4628      	mov	r0, r5
 80080a6:	f10d 0506 	add.w	r5, sp, #6
 80080aa:	4632      	mov	r2, r6
 80080ac:	4629      	mov	r1, r5
 80080ae:	f00b fd3c 	bl	8013b2a <memcpy>
 80080b2:	68a0      	ldr	r0, [r4, #8]
 80080b4:	4642      	mov	r2, r8
 80080b6:	19a9      	adds	r1, r5, r6
 80080b8:	f00b fd37 	bl	8013b2a <memcpy>
 80080bc:	e7bc      	b.n	8008038 <ucdr_serialize_uint16_t+0x8c>
 80080be:	bf00      	nop

080080c0 <ucdr_serialize_endian_uint16_t>:
 80080c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080c4:	b083      	sub	sp, #12
 80080c6:	460d      	mov	r5, r1
 80080c8:	2102      	movs	r1, #2
 80080ca:	4604      	mov	r4, r0
 80080cc:	f8ad 2006 	strh.w	r2, [sp, #6]
 80080d0:	f000 fef6 	bl	8008ec0 <ucdr_buffer_alignment>
 80080d4:	4601      	mov	r1, r0
 80080d6:	4620      	mov	r0, r4
 80080d8:	f894 8015 	ldrb.w	r8, [r4, #21]
 80080dc:	f000 ff34 	bl	8008f48 <ucdr_advance_buffer>
 80080e0:	2102      	movs	r1, #2
 80080e2:	4620      	mov	r0, r4
 80080e4:	f000 fe8c 	bl	8008e00 <ucdr_check_buffer_available_for>
 80080e8:	bb60      	cbnz	r0, 8008144 <ucdr_serialize_endian_uint16_t+0x84>
 80080ea:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80080ee:	42be      	cmp	r6, r7
 80080f0:	d923      	bls.n	800813a <ucdr_serialize_endian_uint16_t+0x7a>
 80080f2:	6923      	ldr	r3, [r4, #16]
 80080f4:	60a6      	str	r6, [r4, #8]
 80080f6:	1bf6      	subs	r6, r6, r7
 80080f8:	4433      	add	r3, r6
 80080fa:	f1c6 0902 	rsb	r9, r6, #2
 80080fe:	6123      	str	r3, [r4, #16]
 8008100:	4649      	mov	r1, r9
 8008102:	4620      	mov	r0, r4
 8008104:	f000 fe88 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008108:	2800      	cmp	r0, #0
 800810a:	d037      	beq.n	800817c <ucdr_serialize_endian_uint16_t+0xbc>
 800810c:	2d01      	cmp	r5, #1
 800810e:	d043      	beq.n	8008198 <ucdr_serialize_endian_uint16_t+0xd8>
 8008110:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008114:	703b      	strb	r3, [r7, #0]
 8008116:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800811a:	707b      	strb	r3, [r7, #1]
 800811c:	6923      	ldr	r3, [r4, #16]
 800811e:	68a2      	ldr	r2, [r4, #8]
 8008120:	7da0      	ldrb	r0, [r4, #22]
 8008122:	3302      	adds	r3, #2
 8008124:	444a      	add	r2, r9
 8008126:	1b9b      	subs	r3, r3, r6
 8008128:	2102      	movs	r1, #2
 800812a:	f080 0001 	eor.w	r0, r0, #1
 800812e:	60a2      	str	r2, [r4, #8]
 8008130:	6123      	str	r3, [r4, #16]
 8008132:	7561      	strb	r1, [r4, #21]
 8008134:	b003      	add	sp, #12
 8008136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800813a:	2102      	movs	r1, #2
 800813c:	4620      	mov	r0, r4
 800813e:	f000 fe6b 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008142:	b188      	cbz	r0, 8008168 <ucdr_serialize_endian_uint16_t+0xa8>
 8008144:	2d01      	cmp	r5, #1
 8008146:	68a3      	ldr	r3, [r4, #8]
 8008148:	d014      	beq.n	8008174 <ucdr_serialize_endian_uint16_t+0xb4>
 800814a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800814e:	701a      	strb	r2, [r3, #0]
 8008150:	68a3      	ldr	r3, [r4, #8]
 8008152:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008156:	705a      	strb	r2, [r3, #1]
 8008158:	68a2      	ldr	r2, [r4, #8]
 800815a:	6923      	ldr	r3, [r4, #16]
 800815c:	3202      	adds	r2, #2
 800815e:	3302      	adds	r3, #2
 8008160:	2102      	movs	r1, #2
 8008162:	60a2      	str	r2, [r4, #8]
 8008164:	6123      	str	r3, [r4, #16]
 8008166:	7561      	strb	r1, [r4, #21]
 8008168:	7da0      	ldrb	r0, [r4, #22]
 800816a:	f080 0001 	eor.w	r0, r0, #1
 800816e:	b003      	add	sp, #12
 8008170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008174:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008178:	801a      	strh	r2, [r3, #0]
 800817a:	e7ed      	b.n	8008158 <ucdr_serialize_endian_uint16_t+0x98>
 800817c:	68a2      	ldr	r2, [r4, #8]
 800817e:	6923      	ldr	r3, [r4, #16]
 8008180:	7da0      	ldrb	r0, [r4, #22]
 8008182:	f884 8015 	strb.w	r8, [r4, #21]
 8008186:	1b92      	subs	r2, r2, r6
 8008188:	1b9b      	subs	r3, r3, r6
 800818a:	f080 0001 	eor.w	r0, r0, #1
 800818e:	60a2      	str	r2, [r4, #8]
 8008190:	6123      	str	r3, [r4, #16]
 8008192:	b003      	add	sp, #12
 8008194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008198:	f10d 0506 	add.w	r5, sp, #6
 800819c:	4632      	mov	r2, r6
 800819e:	4629      	mov	r1, r5
 80081a0:	4638      	mov	r0, r7
 80081a2:	f00b fcc2 	bl	8013b2a <memcpy>
 80081a6:	68a0      	ldr	r0, [r4, #8]
 80081a8:	464a      	mov	r2, r9
 80081aa:	19a9      	adds	r1, r5, r6
 80081ac:	f00b fcbd 	bl	8013b2a <memcpy>
 80081b0:	e7b4      	b.n	800811c <ucdr_serialize_endian_uint16_t+0x5c>
 80081b2:	bf00      	nop

080081b4 <ucdr_deserialize_uint16_t>:
 80081b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b8:	460d      	mov	r5, r1
 80081ba:	2102      	movs	r1, #2
 80081bc:	4604      	mov	r4, r0
 80081be:	f000 fe7f 	bl	8008ec0 <ucdr_buffer_alignment>
 80081c2:	4601      	mov	r1, r0
 80081c4:	4620      	mov	r0, r4
 80081c6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80081ca:	f000 febd 	bl	8008f48 <ucdr_advance_buffer>
 80081ce:	2102      	movs	r1, #2
 80081d0:	4620      	mov	r0, r4
 80081d2:	f000 fe15 	bl	8008e00 <ucdr_check_buffer_available_for>
 80081d6:	b1a8      	cbz	r0, 8008204 <ucdr_deserialize_uint16_t+0x50>
 80081d8:	7d22      	ldrb	r2, [r4, #20]
 80081da:	68a3      	ldr	r3, [r4, #8]
 80081dc:	2a01      	cmp	r2, #1
 80081de:	d046      	beq.n	800826e <ucdr_deserialize_uint16_t+0xba>
 80081e0:	785b      	ldrb	r3, [r3, #1]
 80081e2:	702b      	strb	r3, [r5, #0]
 80081e4:	68a3      	ldr	r3, [r4, #8]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	706b      	strb	r3, [r5, #1]
 80081ea:	68a2      	ldr	r2, [r4, #8]
 80081ec:	6923      	ldr	r3, [r4, #16]
 80081ee:	3202      	adds	r2, #2
 80081f0:	3302      	adds	r3, #2
 80081f2:	2102      	movs	r1, #2
 80081f4:	60a2      	str	r2, [r4, #8]
 80081f6:	6123      	str	r3, [r4, #16]
 80081f8:	7561      	strb	r1, [r4, #21]
 80081fa:	7da0      	ldrb	r0, [r4, #22]
 80081fc:	f080 0001 	eor.w	r0, r0, #1
 8008200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008204:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008208:	42be      	cmp	r6, r7
 800820a:	d920      	bls.n	800824e <ucdr_deserialize_uint16_t+0x9a>
 800820c:	6923      	ldr	r3, [r4, #16]
 800820e:	60a6      	str	r6, [r4, #8]
 8008210:	1bf6      	subs	r6, r6, r7
 8008212:	4433      	add	r3, r6
 8008214:	f1c6 0902 	rsb	r9, r6, #2
 8008218:	6123      	str	r3, [r4, #16]
 800821a:	4649      	mov	r1, r9
 800821c:	4620      	mov	r0, r4
 800821e:	f000 fdfb 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008222:	b338      	cbz	r0, 8008274 <ucdr_deserialize_uint16_t+0xc0>
 8008224:	7d23      	ldrb	r3, [r4, #20]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d034      	beq.n	8008294 <ucdr_deserialize_uint16_t+0xe0>
 800822a:	787b      	ldrb	r3, [r7, #1]
 800822c:	702b      	strb	r3, [r5, #0]
 800822e:	783b      	ldrb	r3, [r7, #0]
 8008230:	706b      	strb	r3, [r5, #1]
 8008232:	6923      	ldr	r3, [r4, #16]
 8008234:	68a2      	ldr	r2, [r4, #8]
 8008236:	7da0      	ldrb	r0, [r4, #22]
 8008238:	2102      	movs	r1, #2
 800823a:	3302      	adds	r3, #2
 800823c:	444a      	add	r2, r9
 800823e:	1b9b      	subs	r3, r3, r6
 8008240:	7561      	strb	r1, [r4, #21]
 8008242:	60a2      	str	r2, [r4, #8]
 8008244:	6123      	str	r3, [r4, #16]
 8008246:	f080 0001 	eor.w	r0, r0, #1
 800824a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800824e:	2102      	movs	r1, #2
 8008250:	4620      	mov	r0, r4
 8008252:	f000 fde1 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008256:	2800      	cmp	r0, #0
 8008258:	d0cf      	beq.n	80081fa <ucdr_deserialize_uint16_t+0x46>
 800825a:	7d23      	ldrb	r3, [r4, #20]
 800825c:	68a2      	ldr	r2, [r4, #8]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d015      	beq.n	800828e <ucdr_deserialize_uint16_t+0xda>
 8008262:	7853      	ldrb	r3, [r2, #1]
 8008264:	702b      	strb	r3, [r5, #0]
 8008266:	68a3      	ldr	r3, [r4, #8]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	706b      	strb	r3, [r5, #1]
 800826c:	e7bd      	b.n	80081ea <ucdr_deserialize_uint16_t+0x36>
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	802b      	strh	r3, [r5, #0]
 8008272:	e7ba      	b.n	80081ea <ucdr_deserialize_uint16_t+0x36>
 8008274:	68a2      	ldr	r2, [r4, #8]
 8008276:	6923      	ldr	r3, [r4, #16]
 8008278:	7da0      	ldrb	r0, [r4, #22]
 800827a:	f884 8015 	strb.w	r8, [r4, #21]
 800827e:	1b92      	subs	r2, r2, r6
 8008280:	1b9b      	subs	r3, r3, r6
 8008282:	60a2      	str	r2, [r4, #8]
 8008284:	6123      	str	r3, [r4, #16]
 8008286:	f080 0001 	eor.w	r0, r0, #1
 800828a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800828e:	8813      	ldrh	r3, [r2, #0]
 8008290:	802b      	strh	r3, [r5, #0]
 8008292:	e7aa      	b.n	80081ea <ucdr_deserialize_uint16_t+0x36>
 8008294:	4639      	mov	r1, r7
 8008296:	4632      	mov	r2, r6
 8008298:	4628      	mov	r0, r5
 800829a:	f00b fc46 	bl	8013b2a <memcpy>
 800829e:	68a1      	ldr	r1, [r4, #8]
 80082a0:	464a      	mov	r2, r9
 80082a2:	19a8      	adds	r0, r5, r6
 80082a4:	f00b fc41 	bl	8013b2a <memcpy>
 80082a8:	e7c3      	b.n	8008232 <ucdr_deserialize_uint16_t+0x7e>
 80082aa:	bf00      	nop

080082ac <ucdr_deserialize_endian_uint16_t>:
 80082ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b0:	460e      	mov	r6, r1
 80082b2:	2102      	movs	r1, #2
 80082b4:	4604      	mov	r4, r0
 80082b6:	4615      	mov	r5, r2
 80082b8:	f000 fe02 	bl	8008ec0 <ucdr_buffer_alignment>
 80082bc:	4601      	mov	r1, r0
 80082be:	4620      	mov	r0, r4
 80082c0:	f894 9015 	ldrb.w	r9, [r4, #21]
 80082c4:	f000 fe40 	bl	8008f48 <ucdr_advance_buffer>
 80082c8:	2102      	movs	r1, #2
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 fd98 	bl	8008e00 <ucdr_check_buffer_available_for>
 80082d0:	bb60      	cbnz	r0, 800832c <ucdr_deserialize_endian_uint16_t+0x80>
 80082d2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 80082d6:	4547      	cmp	r7, r8
 80082d8:	d923      	bls.n	8008322 <ucdr_deserialize_endian_uint16_t+0x76>
 80082da:	6923      	ldr	r3, [r4, #16]
 80082dc:	60a7      	str	r7, [r4, #8]
 80082de:	eba7 0708 	sub.w	r7, r7, r8
 80082e2:	443b      	add	r3, r7
 80082e4:	f1c7 0a02 	rsb	sl, r7, #2
 80082e8:	6123      	str	r3, [r4, #16]
 80082ea:	4651      	mov	r1, sl
 80082ec:	4620      	mov	r0, r4
 80082ee:	f000 fd93 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d032      	beq.n	800835c <ucdr_deserialize_endian_uint16_t+0xb0>
 80082f6:	2e01      	cmp	r6, #1
 80082f8:	d03d      	beq.n	8008376 <ucdr_deserialize_endian_uint16_t+0xca>
 80082fa:	f898 3001 	ldrb.w	r3, [r8, #1]
 80082fe:	702b      	strb	r3, [r5, #0]
 8008300:	f898 3000 	ldrb.w	r3, [r8]
 8008304:	706b      	strb	r3, [r5, #1]
 8008306:	6923      	ldr	r3, [r4, #16]
 8008308:	68a2      	ldr	r2, [r4, #8]
 800830a:	7da0      	ldrb	r0, [r4, #22]
 800830c:	2102      	movs	r1, #2
 800830e:	3302      	adds	r3, #2
 8008310:	4452      	add	r2, sl
 8008312:	1bdb      	subs	r3, r3, r7
 8008314:	7561      	strb	r1, [r4, #21]
 8008316:	60a2      	str	r2, [r4, #8]
 8008318:	6123      	str	r3, [r4, #16]
 800831a:	f080 0001 	eor.w	r0, r0, #1
 800831e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008322:	2102      	movs	r1, #2
 8008324:	4620      	mov	r0, r4
 8008326:	f000 fd77 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 800832a:	b178      	cbz	r0, 800834c <ucdr_deserialize_endian_uint16_t+0xa0>
 800832c:	2e01      	cmp	r6, #1
 800832e:	68a3      	ldr	r3, [r4, #8]
 8008330:	d011      	beq.n	8008356 <ucdr_deserialize_endian_uint16_t+0xaa>
 8008332:	785b      	ldrb	r3, [r3, #1]
 8008334:	702b      	strb	r3, [r5, #0]
 8008336:	68a3      	ldr	r3, [r4, #8]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	706b      	strb	r3, [r5, #1]
 800833c:	68a2      	ldr	r2, [r4, #8]
 800833e:	6923      	ldr	r3, [r4, #16]
 8008340:	3202      	adds	r2, #2
 8008342:	3302      	adds	r3, #2
 8008344:	2102      	movs	r1, #2
 8008346:	60a2      	str	r2, [r4, #8]
 8008348:	6123      	str	r3, [r4, #16]
 800834a:	7561      	strb	r1, [r4, #21]
 800834c:	7da0      	ldrb	r0, [r4, #22]
 800834e:	f080 0001 	eor.w	r0, r0, #1
 8008352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	802b      	strh	r3, [r5, #0]
 800835a:	e7ef      	b.n	800833c <ucdr_deserialize_endian_uint16_t+0x90>
 800835c:	68a2      	ldr	r2, [r4, #8]
 800835e:	6923      	ldr	r3, [r4, #16]
 8008360:	7da0      	ldrb	r0, [r4, #22]
 8008362:	f884 9015 	strb.w	r9, [r4, #21]
 8008366:	1bd2      	subs	r2, r2, r7
 8008368:	1bdb      	subs	r3, r3, r7
 800836a:	60a2      	str	r2, [r4, #8]
 800836c:	6123      	str	r3, [r4, #16]
 800836e:	f080 0001 	eor.w	r0, r0, #1
 8008372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008376:	4641      	mov	r1, r8
 8008378:	463a      	mov	r2, r7
 800837a:	4628      	mov	r0, r5
 800837c:	f00b fbd5 	bl	8013b2a <memcpy>
 8008380:	68a1      	ldr	r1, [r4, #8]
 8008382:	4652      	mov	r2, sl
 8008384:	19e8      	adds	r0, r5, r7
 8008386:	f00b fbd0 	bl	8013b2a <memcpy>
 800838a:	e7bc      	b.n	8008306 <ucdr_deserialize_endian_uint16_t+0x5a>

0800838c <ucdr_serialize_uint32_t>:
 800838c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008390:	b082      	sub	sp, #8
 8008392:	4604      	mov	r4, r0
 8008394:	9101      	str	r1, [sp, #4]
 8008396:	2104      	movs	r1, #4
 8008398:	f000 fd92 	bl	8008ec0 <ucdr_buffer_alignment>
 800839c:	4601      	mov	r1, r0
 800839e:	4620      	mov	r0, r4
 80083a0:	7d67      	ldrb	r7, [r4, #21]
 80083a2:	f000 fdd1 	bl	8008f48 <ucdr_advance_buffer>
 80083a6:	2104      	movs	r1, #4
 80083a8:	4620      	mov	r0, r4
 80083aa:	f000 fd29 	bl	8008e00 <ucdr_check_buffer_available_for>
 80083ae:	b300      	cbz	r0, 80083f2 <ucdr_serialize_uint32_t+0x66>
 80083b0:	7d22      	ldrb	r2, [r4, #20]
 80083b2:	68a3      	ldr	r3, [r4, #8]
 80083b4:	2a01      	cmp	r2, #1
 80083b6:	d05d      	beq.n	8008474 <ucdr_serialize_uint32_t+0xe8>
 80083b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80083bc:	701a      	strb	r2, [r3, #0]
 80083be:	68a3      	ldr	r3, [r4, #8]
 80083c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80083c4:	705a      	strb	r2, [r3, #1]
 80083c6:	68a3      	ldr	r3, [r4, #8]
 80083c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80083cc:	709a      	strb	r2, [r3, #2]
 80083ce:	68a3      	ldr	r3, [r4, #8]
 80083d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80083d4:	70da      	strb	r2, [r3, #3]
 80083d6:	68a2      	ldr	r2, [r4, #8]
 80083d8:	6923      	ldr	r3, [r4, #16]
 80083da:	3204      	adds	r2, #4
 80083dc:	3304      	adds	r3, #4
 80083de:	2104      	movs	r1, #4
 80083e0:	60a2      	str	r2, [r4, #8]
 80083e2:	6123      	str	r3, [r4, #16]
 80083e4:	7561      	strb	r1, [r4, #21]
 80083e6:	7da0      	ldrb	r0, [r4, #22]
 80083e8:	f080 0001 	eor.w	r0, r0, #1
 80083ec:	b002      	add	sp, #8
 80083ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80083f6:	42ab      	cmp	r3, r5
 80083f8:	d92e      	bls.n	8008458 <ucdr_serialize_uint32_t+0xcc>
 80083fa:	1b5e      	subs	r6, r3, r5
 80083fc:	60a3      	str	r3, [r4, #8]
 80083fe:	6923      	ldr	r3, [r4, #16]
 8008400:	f1c6 0804 	rsb	r8, r6, #4
 8008404:	4433      	add	r3, r6
 8008406:	6123      	str	r3, [r4, #16]
 8008408:	4641      	mov	r1, r8
 800840a:	4620      	mov	r0, r4
 800840c:	f000 fd04 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008410:	b398      	cbz	r0, 800847a <ucdr_serialize_uint32_t+0xee>
 8008412:	7d23      	ldrb	r3, [r4, #20]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d046      	beq.n	80084a6 <ucdr_serialize_uint32_t+0x11a>
 8008418:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800841c:	702b      	strb	r3, [r5, #0]
 800841e:	2e01      	cmp	r6, #1
 8008420:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008424:	706b      	strb	r3, [r5, #1]
 8008426:	d035      	beq.n	8008494 <ucdr_serialize_uint32_t+0x108>
 8008428:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800842c:	70ab      	strb	r3, [r5, #2]
 800842e:	2e02      	cmp	r6, #2
 8008430:	d034      	beq.n	800849c <ucdr_serialize_uint32_t+0x110>
 8008432:	3503      	adds	r5, #3
 8008434:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008438:	702b      	strb	r3, [r5, #0]
 800843a:	6923      	ldr	r3, [r4, #16]
 800843c:	68a2      	ldr	r2, [r4, #8]
 800843e:	7da0      	ldrb	r0, [r4, #22]
 8008440:	3304      	adds	r3, #4
 8008442:	4442      	add	r2, r8
 8008444:	1b9b      	subs	r3, r3, r6
 8008446:	2104      	movs	r1, #4
 8008448:	f080 0001 	eor.w	r0, r0, #1
 800844c:	60a2      	str	r2, [r4, #8]
 800844e:	6123      	str	r3, [r4, #16]
 8008450:	7561      	strb	r1, [r4, #21]
 8008452:	b002      	add	sp, #8
 8008454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008458:	2104      	movs	r1, #4
 800845a:	4620      	mov	r0, r4
 800845c:	f000 fcdc 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008460:	2800      	cmp	r0, #0
 8008462:	d0c0      	beq.n	80083e6 <ucdr_serialize_uint32_t+0x5a>
 8008464:	7d23      	ldrb	r3, [r4, #20]
 8008466:	68a2      	ldr	r2, [r4, #8]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d019      	beq.n	80084a0 <ucdr_serialize_uint32_t+0x114>
 800846c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008470:	7013      	strb	r3, [r2, #0]
 8008472:	e7a4      	b.n	80083be <ucdr_serialize_uint32_t+0x32>
 8008474:	9a01      	ldr	r2, [sp, #4]
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	e7ad      	b.n	80083d6 <ucdr_serialize_uint32_t+0x4a>
 800847a:	68a2      	ldr	r2, [r4, #8]
 800847c:	6923      	ldr	r3, [r4, #16]
 800847e:	7da0      	ldrb	r0, [r4, #22]
 8008480:	7567      	strb	r7, [r4, #21]
 8008482:	1b92      	subs	r2, r2, r6
 8008484:	1b9b      	subs	r3, r3, r6
 8008486:	f080 0001 	eor.w	r0, r0, #1
 800848a:	60a2      	str	r2, [r4, #8]
 800848c:	6123      	str	r3, [r4, #16]
 800848e:	b002      	add	sp, #8
 8008490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008494:	68a3      	ldr	r3, [r4, #8]
 8008496:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800849a:	701a      	strb	r2, [r3, #0]
 800849c:	68a5      	ldr	r5, [r4, #8]
 800849e:	e7c9      	b.n	8008434 <ucdr_serialize_uint32_t+0xa8>
 80084a0:	9b01      	ldr	r3, [sp, #4]
 80084a2:	6013      	str	r3, [r2, #0]
 80084a4:	e797      	b.n	80083d6 <ucdr_serialize_uint32_t+0x4a>
 80084a6:	4628      	mov	r0, r5
 80084a8:	ad01      	add	r5, sp, #4
 80084aa:	4632      	mov	r2, r6
 80084ac:	4629      	mov	r1, r5
 80084ae:	f00b fb3c 	bl	8013b2a <memcpy>
 80084b2:	68a0      	ldr	r0, [r4, #8]
 80084b4:	4642      	mov	r2, r8
 80084b6:	19a9      	adds	r1, r5, r6
 80084b8:	f00b fb37 	bl	8013b2a <memcpy>
 80084bc:	e7bd      	b.n	800843a <ucdr_serialize_uint32_t+0xae>
 80084be:	bf00      	nop

080084c0 <ucdr_serialize_endian_uint32_t>:
 80084c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084c4:	b083      	sub	sp, #12
 80084c6:	460d      	mov	r5, r1
 80084c8:	2104      	movs	r1, #4
 80084ca:	4604      	mov	r4, r0
 80084cc:	9201      	str	r2, [sp, #4]
 80084ce:	f000 fcf7 	bl	8008ec0 <ucdr_buffer_alignment>
 80084d2:	4601      	mov	r1, r0
 80084d4:	4620      	mov	r0, r4
 80084d6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80084da:	f000 fd35 	bl	8008f48 <ucdr_advance_buffer>
 80084de:	2104      	movs	r1, #4
 80084e0:	4620      	mov	r0, r4
 80084e2:	f000 fc8d 	bl	8008e00 <ucdr_check_buffer_available_for>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	d137      	bne.n	800855a <ucdr_serialize_endian_uint32_t+0x9a>
 80084ea:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80084ee:	42b7      	cmp	r7, r6
 80084f0:	d92e      	bls.n	8008550 <ucdr_serialize_endian_uint32_t+0x90>
 80084f2:	6923      	ldr	r3, [r4, #16]
 80084f4:	60a7      	str	r7, [r4, #8]
 80084f6:	1bbf      	subs	r7, r7, r6
 80084f8:	443b      	add	r3, r7
 80084fa:	f1c7 0904 	rsb	r9, r7, #4
 80084fe:	6123      	str	r3, [r4, #16]
 8008500:	4649      	mov	r1, r9
 8008502:	4620      	mov	r0, r4
 8008504:	f000 fc88 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008508:	2800      	cmp	r0, #0
 800850a:	d049      	beq.n	80085a0 <ucdr_serialize_endian_uint32_t+0xe0>
 800850c:	2d01      	cmp	r5, #1
 800850e:	d05b      	beq.n	80085c8 <ucdr_serialize_endian_uint32_t+0x108>
 8008510:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008514:	7033      	strb	r3, [r6, #0]
 8008516:	2f01      	cmp	r7, #1
 8008518:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800851c:	7073      	strb	r3, [r6, #1]
 800851e:	d04d      	beq.n	80085bc <ucdr_serialize_endian_uint32_t+0xfc>
 8008520:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008524:	70b3      	strb	r3, [r6, #2]
 8008526:	2f02      	cmp	r7, #2
 8008528:	d04c      	beq.n	80085c4 <ucdr_serialize_endian_uint32_t+0x104>
 800852a:	3603      	adds	r6, #3
 800852c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008530:	7033      	strb	r3, [r6, #0]
 8008532:	6923      	ldr	r3, [r4, #16]
 8008534:	68a2      	ldr	r2, [r4, #8]
 8008536:	7da0      	ldrb	r0, [r4, #22]
 8008538:	3304      	adds	r3, #4
 800853a:	444a      	add	r2, r9
 800853c:	1bdb      	subs	r3, r3, r7
 800853e:	2104      	movs	r1, #4
 8008540:	f080 0001 	eor.w	r0, r0, #1
 8008544:	60a2      	str	r2, [r4, #8]
 8008546:	6123      	str	r3, [r4, #16]
 8008548:	7561      	strb	r1, [r4, #21]
 800854a:	b003      	add	sp, #12
 800854c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008550:	2104      	movs	r1, #4
 8008552:	4620      	mov	r0, r4
 8008554:	f000 fc60 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008558:	b1c8      	cbz	r0, 800858e <ucdr_serialize_endian_uint32_t+0xce>
 800855a:	2d01      	cmp	r5, #1
 800855c:	68a3      	ldr	r3, [r4, #8]
 800855e:	d01c      	beq.n	800859a <ucdr_serialize_endian_uint32_t+0xda>
 8008560:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008564:	701a      	strb	r2, [r3, #0]
 8008566:	68a3      	ldr	r3, [r4, #8]
 8008568:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800856c:	705a      	strb	r2, [r3, #1]
 800856e:	68a3      	ldr	r3, [r4, #8]
 8008570:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008574:	709a      	strb	r2, [r3, #2]
 8008576:	68a3      	ldr	r3, [r4, #8]
 8008578:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800857c:	70da      	strb	r2, [r3, #3]
 800857e:	68a2      	ldr	r2, [r4, #8]
 8008580:	6923      	ldr	r3, [r4, #16]
 8008582:	3204      	adds	r2, #4
 8008584:	3304      	adds	r3, #4
 8008586:	2104      	movs	r1, #4
 8008588:	60a2      	str	r2, [r4, #8]
 800858a:	6123      	str	r3, [r4, #16]
 800858c:	7561      	strb	r1, [r4, #21]
 800858e:	7da0      	ldrb	r0, [r4, #22]
 8008590:	f080 0001 	eor.w	r0, r0, #1
 8008594:	b003      	add	sp, #12
 8008596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800859a:	9a01      	ldr	r2, [sp, #4]
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	e7ee      	b.n	800857e <ucdr_serialize_endian_uint32_t+0xbe>
 80085a0:	68a2      	ldr	r2, [r4, #8]
 80085a2:	6923      	ldr	r3, [r4, #16]
 80085a4:	7da0      	ldrb	r0, [r4, #22]
 80085a6:	f884 8015 	strb.w	r8, [r4, #21]
 80085aa:	1bd2      	subs	r2, r2, r7
 80085ac:	1bdb      	subs	r3, r3, r7
 80085ae:	f080 0001 	eor.w	r0, r0, #1
 80085b2:	60a2      	str	r2, [r4, #8]
 80085b4:	6123      	str	r3, [r4, #16]
 80085b6:	b003      	add	sp, #12
 80085b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085bc:	68a3      	ldr	r3, [r4, #8]
 80085be:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80085c2:	701a      	strb	r2, [r3, #0]
 80085c4:	68a6      	ldr	r6, [r4, #8]
 80085c6:	e7b1      	b.n	800852c <ucdr_serialize_endian_uint32_t+0x6c>
 80085c8:	ad01      	add	r5, sp, #4
 80085ca:	463a      	mov	r2, r7
 80085cc:	4629      	mov	r1, r5
 80085ce:	4630      	mov	r0, r6
 80085d0:	f00b faab 	bl	8013b2a <memcpy>
 80085d4:	68a0      	ldr	r0, [r4, #8]
 80085d6:	464a      	mov	r2, r9
 80085d8:	19e9      	adds	r1, r5, r7
 80085da:	f00b faa6 	bl	8013b2a <memcpy>
 80085de:	e7a8      	b.n	8008532 <ucdr_serialize_endian_uint32_t+0x72>

080085e0 <ucdr_deserialize_uint32_t>:
 80085e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e4:	460d      	mov	r5, r1
 80085e6:	2104      	movs	r1, #4
 80085e8:	4604      	mov	r4, r0
 80085ea:	f000 fc69 	bl	8008ec0 <ucdr_buffer_alignment>
 80085ee:	4601      	mov	r1, r0
 80085f0:	4620      	mov	r0, r4
 80085f2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80085f6:	f000 fca7 	bl	8008f48 <ucdr_advance_buffer>
 80085fa:	2104      	movs	r1, #4
 80085fc:	4620      	mov	r0, r4
 80085fe:	f000 fbff 	bl	8008e00 <ucdr_check_buffer_available_for>
 8008602:	b1d8      	cbz	r0, 800863c <ucdr_deserialize_uint32_t+0x5c>
 8008604:	7d22      	ldrb	r2, [r4, #20]
 8008606:	68a3      	ldr	r3, [r4, #8]
 8008608:	2a01      	cmp	r2, #1
 800860a:	d052      	beq.n	80086b2 <ucdr_deserialize_uint32_t+0xd2>
 800860c:	78db      	ldrb	r3, [r3, #3]
 800860e:	702b      	strb	r3, [r5, #0]
 8008610:	68a3      	ldr	r3, [r4, #8]
 8008612:	789b      	ldrb	r3, [r3, #2]
 8008614:	706b      	strb	r3, [r5, #1]
 8008616:	68a3      	ldr	r3, [r4, #8]
 8008618:	785b      	ldrb	r3, [r3, #1]
 800861a:	70ab      	strb	r3, [r5, #2]
 800861c:	68a3      	ldr	r3, [r4, #8]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	70eb      	strb	r3, [r5, #3]
 8008622:	68a2      	ldr	r2, [r4, #8]
 8008624:	6923      	ldr	r3, [r4, #16]
 8008626:	3204      	adds	r2, #4
 8008628:	3304      	adds	r3, #4
 800862a:	2104      	movs	r1, #4
 800862c:	60a2      	str	r2, [r4, #8]
 800862e:	6123      	str	r3, [r4, #16]
 8008630:	7561      	strb	r1, [r4, #21]
 8008632:	7da0      	ldrb	r0, [r4, #22]
 8008634:	f080 0001 	eor.w	r0, r0, #1
 8008638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800863c:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008640:	42b7      	cmp	r7, r6
 8008642:	d92a      	bls.n	800869a <ucdr_deserialize_uint32_t+0xba>
 8008644:	6923      	ldr	r3, [r4, #16]
 8008646:	60a7      	str	r7, [r4, #8]
 8008648:	1bbf      	subs	r7, r7, r6
 800864a:	443b      	add	r3, r7
 800864c:	f1c7 0904 	rsb	r9, r7, #4
 8008650:	6123      	str	r3, [r4, #16]
 8008652:	4649      	mov	r1, r9
 8008654:	4620      	mov	r0, r4
 8008656:	f000 fbdf 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 800865a:	b368      	cbz	r0, 80086b8 <ucdr_deserialize_uint32_t+0xd8>
 800865c:	7d23      	ldrb	r3, [r4, #20]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d040      	beq.n	80086e4 <ucdr_deserialize_uint32_t+0x104>
 8008662:	78f3      	ldrb	r3, [r6, #3]
 8008664:	702b      	strb	r3, [r5, #0]
 8008666:	78b3      	ldrb	r3, [r6, #2]
 8008668:	706b      	strb	r3, [r5, #1]
 800866a:	2f01      	cmp	r7, #1
 800866c:	d031      	beq.n	80086d2 <ucdr_deserialize_uint32_t+0xf2>
 800866e:	7873      	ldrb	r3, [r6, #1]
 8008670:	70ab      	strb	r3, [r5, #2]
 8008672:	2f02      	cmp	r7, #2
 8008674:	f105 0503 	add.w	r5, r5, #3
 8008678:	d02f      	beq.n	80086da <ucdr_deserialize_uint32_t+0xfa>
 800867a:	7833      	ldrb	r3, [r6, #0]
 800867c:	702b      	strb	r3, [r5, #0]
 800867e:	6923      	ldr	r3, [r4, #16]
 8008680:	68a2      	ldr	r2, [r4, #8]
 8008682:	7da0      	ldrb	r0, [r4, #22]
 8008684:	2104      	movs	r1, #4
 8008686:	3304      	adds	r3, #4
 8008688:	444a      	add	r2, r9
 800868a:	1bdb      	subs	r3, r3, r7
 800868c:	7561      	strb	r1, [r4, #21]
 800868e:	60a2      	str	r2, [r4, #8]
 8008690:	6123      	str	r3, [r4, #16]
 8008692:	f080 0001 	eor.w	r0, r0, #1
 8008696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800869a:	2104      	movs	r1, #4
 800869c:	4620      	mov	r0, r4
 800869e:	f000 fbbb 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d0c5      	beq.n	8008632 <ucdr_deserialize_uint32_t+0x52>
 80086a6:	7d23      	ldrb	r3, [r4, #20]
 80086a8:	68a2      	ldr	r2, [r4, #8]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d017      	beq.n	80086de <ucdr_deserialize_uint32_t+0xfe>
 80086ae:	78d3      	ldrb	r3, [r2, #3]
 80086b0:	e7ad      	b.n	800860e <ucdr_deserialize_uint32_t+0x2e>
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	602b      	str	r3, [r5, #0]
 80086b6:	e7b4      	b.n	8008622 <ucdr_deserialize_uint32_t+0x42>
 80086b8:	68a2      	ldr	r2, [r4, #8]
 80086ba:	6923      	ldr	r3, [r4, #16]
 80086bc:	7da0      	ldrb	r0, [r4, #22]
 80086be:	f884 8015 	strb.w	r8, [r4, #21]
 80086c2:	1bd2      	subs	r2, r2, r7
 80086c4:	1bdb      	subs	r3, r3, r7
 80086c6:	60a2      	str	r2, [r4, #8]
 80086c8:	6123      	str	r3, [r4, #16]
 80086ca:	f080 0001 	eor.w	r0, r0, #1
 80086ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086d2:	68a3      	ldr	r3, [r4, #8]
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	70ab      	strb	r3, [r5, #2]
 80086d8:	3503      	adds	r5, #3
 80086da:	68a6      	ldr	r6, [r4, #8]
 80086dc:	e7cd      	b.n	800867a <ucdr_deserialize_uint32_t+0x9a>
 80086de:	6813      	ldr	r3, [r2, #0]
 80086e0:	602b      	str	r3, [r5, #0]
 80086e2:	e79e      	b.n	8008622 <ucdr_deserialize_uint32_t+0x42>
 80086e4:	4631      	mov	r1, r6
 80086e6:	463a      	mov	r2, r7
 80086e8:	4628      	mov	r0, r5
 80086ea:	f00b fa1e 	bl	8013b2a <memcpy>
 80086ee:	68a1      	ldr	r1, [r4, #8]
 80086f0:	464a      	mov	r2, r9
 80086f2:	19e8      	adds	r0, r5, r7
 80086f4:	f00b fa19 	bl	8013b2a <memcpy>
 80086f8:	e7c1      	b.n	800867e <ucdr_deserialize_uint32_t+0x9e>
 80086fa:	bf00      	nop

080086fc <ucdr_deserialize_endian_uint32_t>:
 80086fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008700:	460e      	mov	r6, r1
 8008702:	2104      	movs	r1, #4
 8008704:	4604      	mov	r4, r0
 8008706:	4615      	mov	r5, r2
 8008708:	f000 fbda 	bl	8008ec0 <ucdr_buffer_alignment>
 800870c:	4601      	mov	r1, r0
 800870e:	4620      	mov	r0, r4
 8008710:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008714:	f000 fc18 	bl	8008f48 <ucdr_advance_buffer>
 8008718:	2104      	movs	r1, #4
 800871a:	4620      	mov	r0, r4
 800871c:	f000 fb70 	bl	8008e00 <ucdr_check_buffer_available_for>
 8008720:	2800      	cmp	r0, #0
 8008722:	d137      	bne.n	8008794 <ucdr_deserialize_endian_uint32_t+0x98>
 8008724:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8008728:	42bb      	cmp	r3, r7
 800872a:	d92e      	bls.n	800878a <ucdr_deserialize_endian_uint32_t+0x8e>
 800872c:	eba3 0807 	sub.w	r8, r3, r7
 8008730:	60a3      	str	r3, [r4, #8]
 8008732:	6923      	ldr	r3, [r4, #16]
 8008734:	f1c8 0a04 	rsb	sl, r8, #4
 8008738:	4443      	add	r3, r8
 800873a:	6123      	str	r3, [r4, #16]
 800873c:	4651      	mov	r1, sl
 800873e:	4620      	mov	r0, r4
 8008740:	f000 fb6a 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008744:	2800      	cmp	r0, #0
 8008746:	d043      	beq.n	80087d0 <ucdr_deserialize_endian_uint32_t+0xd4>
 8008748:	2e01      	cmp	r6, #1
 800874a:	d056      	beq.n	80087fa <ucdr_deserialize_endian_uint32_t+0xfe>
 800874c:	78fb      	ldrb	r3, [r7, #3]
 800874e:	702b      	strb	r3, [r5, #0]
 8008750:	78bb      	ldrb	r3, [r7, #2]
 8008752:	706b      	strb	r3, [r5, #1]
 8008754:	f1b8 0f01 	cmp.w	r8, #1
 8008758:	d049      	beq.n	80087ee <ucdr_deserialize_endian_uint32_t+0xf2>
 800875a:	787b      	ldrb	r3, [r7, #1]
 800875c:	70ab      	strb	r3, [r5, #2]
 800875e:	f1b8 0f02 	cmp.w	r8, #2
 8008762:	f105 0503 	add.w	r5, r5, #3
 8008766:	d046      	beq.n	80087f6 <ucdr_deserialize_endian_uint32_t+0xfa>
 8008768:	783b      	ldrb	r3, [r7, #0]
 800876a:	702b      	strb	r3, [r5, #0]
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	68a2      	ldr	r2, [r4, #8]
 8008770:	7da0      	ldrb	r0, [r4, #22]
 8008772:	2104      	movs	r1, #4
 8008774:	3304      	adds	r3, #4
 8008776:	4452      	add	r2, sl
 8008778:	eba3 0308 	sub.w	r3, r3, r8
 800877c:	7561      	strb	r1, [r4, #21]
 800877e:	60a2      	str	r2, [r4, #8]
 8008780:	6123      	str	r3, [r4, #16]
 8008782:	f080 0001 	eor.w	r0, r0, #1
 8008786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800878a:	2104      	movs	r1, #4
 800878c:	4620      	mov	r0, r4
 800878e:	f000 fb43 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008792:	b1a8      	cbz	r0, 80087c0 <ucdr_deserialize_endian_uint32_t+0xc4>
 8008794:	2e01      	cmp	r6, #1
 8008796:	68a3      	ldr	r3, [r4, #8]
 8008798:	d017      	beq.n	80087ca <ucdr_deserialize_endian_uint32_t+0xce>
 800879a:	78db      	ldrb	r3, [r3, #3]
 800879c:	702b      	strb	r3, [r5, #0]
 800879e:	68a3      	ldr	r3, [r4, #8]
 80087a0:	789b      	ldrb	r3, [r3, #2]
 80087a2:	706b      	strb	r3, [r5, #1]
 80087a4:	68a3      	ldr	r3, [r4, #8]
 80087a6:	785b      	ldrb	r3, [r3, #1]
 80087a8:	70ab      	strb	r3, [r5, #2]
 80087aa:	68a3      	ldr	r3, [r4, #8]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	70eb      	strb	r3, [r5, #3]
 80087b0:	68a2      	ldr	r2, [r4, #8]
 80087b2:	6923      	ldr	r3, [r4, #16]
 80087b4:	3204      	adds	r2, #4
 80087b6:	3304      	adds	r3, #4
 80087b8:	2104      	movs	r1, #4
 80087ba:	60a2      	str	r2, [r4, #8]
 80087bc:	6123      	str	r3, [r4, #16]
 80087be:	7561      	strb	r1, [r4, #21]
 80087c0:	7da0      	ldrb	r0, [r4, #22]
 80087c2:	f080 0001 	eor.w	r0, r0, #1
 80087c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	602b      	str	r3, [r5, #0]
 80087ce:	e7ef      	b.n	80087b0 <ucdr_deserialize_endian_uint32_t+0xb4>
 80087d0:	68a2      	ldr	r2, [r4, #8]
 80087d2:	6923      	ldr	r3, [r4, #16]
 80087d4:	7da0      	ldrb	r0, [r4, #22]
 80087d6:	f884 9015 	strb.w	r9, [r4, #21]
 80087da:	eba2 0208 	sub.w	r2, r2, r8
 80087de:	eba3 0308 	sub.w	r3, r3, r8
 80087e2:	60a2      	str	r2, [r4, #8]
 80087e4:	6123      	str	r3, [r4, #16]
 80087e6:	f080 0001 	eor.w	r0, r0, #1
 80087ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ee:	68a3      	ldr	r3, [r4, #8]
 80087f0:	785b      	ldrb	r3, [r3, #1]
 80087f2:	70ab      	strb	r3, [r5, #2]
 80087f4:	3503      	adds	r5, #3
 80087f6:	68a7      	ldr	r7, [r4, #8]
 80087f8:	e7b6      	b.n	8008768 <ucdr_deserialize_endian_uint32_t+0x6c>
 80087fa:	4639      	mov	r1, r7
 80087fc:	4642      	mov	r2, r8
 80087fe:	4628      	mov	r0, r5
 8008800:	f00b f993 	bl	8013b2a <memcpy>
 8008804:	68a1      	ldr	r1, [r4, #8]
 8008806:	4652      	mov	r2, sl
 8008808:	eb05 0008 	add.w	r0, r5, r8
 800880c:	f00b f98d 	bl	8013b2a <memcpy>
 8008810:	e7ac      	b.n	800876c <ucdr_deserialize_endian_uint32_t+0x70>
 8008812:	bf00      	nop

08008814 <ucdr_serialize_uint64_t>:
 8008814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008818:	2108      	movs	r1, #8
 800881a:	b082      	sub	sp, #8
 800881c:	4604      	mov	r4, r0
 800881e:	e9cd 2300 	strd	r2, r3, [sp]
 8008822:	f000 fb4d 	bl	8008ec0 <ucdr_buffer_alignment>
 8008826:	4601      	mov	r1, r0
 8008828:	4620      	mov	r0, r4
 800882a:	7d67      	ldrb	r7, [r4, #21]
 800882c:	f000 fb8c 	bl	8008f48 <ucdr_advance_buffer>
 8008830:	2108      	movs	r1, #8
 8008832:	4620      	mov	r0, r4
 8008834:	f000 fae4 	bl	8008e00 <ucdr_check_buffer_available_for>
 8008838:	2800      	cmp	r0, #0
 800883a:	d14d      	bne.n	80088d8 <ucdr_serialize_uint64_t+0xc4>
 800883c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008840:	42ab      	cmp	r3, r5
 8008842:	d944      	bls.n	80088ce <ucdr_serialize_uint64_t+0xba>
 8008844:	1b5e      	subs	r6, r3, r5
 8008846:	60a3      	str	r3, [r4, #8]
 8008848:	6923      	ldr	r3, [r4, #16]
 800884a:	f1c6 0808 	rsb	r8, r6, #8
 800884e:	4433      	add	r3, r6
 8008850:	6123      	str	r3, [r4, #16]
 8008852:	4641      	mov	r1, r8
 8008854:	4620      	mov	r0, r4
 8008856:	f000 fadf 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 800885a:	2800      	cmp	r0, #0
 800885c:	d072      	beq.n	8008944 <ucdr_serialize_uint64_t+0x130>
 800885e:	7d23      	ldrb	r3, [r4, #20]
 8008860:	2b01      	cmp	r3, #1
 8008862:	f000 8092 	beq.w	800898a <ucdr_serialize_uint64_t+0x176>
 8008866:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800886a:	702b      	strb	r3, [r5, #0]
 800886c:	2e01      	cmp	r6, #1
 800886e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008872:	706b      	strb	r3, [r5, #1]
 8008874:	d073      	beq.n	800895e <ucdr_serialize_uint64_t+0x14a>
 8008876:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800887a:	70ab      	strb	r3, [r5, #2]
 800887c:	2e02      	cmp	r6, #2
 800887e:	d072      	beq.n	8008966 <ucdr_serialize_uint64_t+0x152>
 8008880:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008884:	70eb      	strb	r3, [r5, #3]
 8008886:	2e03      	cmp	r6, #3
 8008888:	d071      	beq.n	800896e <ucdr_serialize_uint64_t+0x15a>
 800888a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800888e:	712b      	strb	r3, [r5, #4]
 8008890:	2e04      	cmp	r6, #4
 8008892:	d070      	beq.n	8008976 <ucdr_serialize_uint64_t+0x162>
 8008894:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8008898:	716b      	strb	r3, [r5, #5]
 800889a:	2e05      	cmp	r6, #5
 800889c:	d06f      	beq.n	800897e <ucdr_serialize_uint64_t+0x16a>
 800889e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80088a2:	71ab      	strb	r3, [r5, #6]
 80088a4:	2e06      	cmp	r6, #6
 80088a6:	d06e      	beq.n	8008986 <ucdr_serialize_uint64_t+0x172>
 80088a8:	3507      	adds	r5, #7
 80088aa:	f89d 3000 	ldrb.w	r3, [sp]
 80088ae:	702b      	strb	r3, [r5, #0]
 80088b0:	6923      	ldr	r3, [r4, #16]
 80088b2:	68a2      	ldr	r2, [r4, #8]
 80088b4:	7da0      	ldrb	r0, [r4, #22]
 80088b6:	3308      	adds	r3, #8
 80088b8:	4442      	add	r2, r8
 80088ba:	1b9b      	subs	r3, r3, r6
 80088bc:	2108      	movs	r1, #8
 80088be:	f080 0001 	eor.w	r0, r0, #1
 80088c2:	60a2      	str	r2, [r4, #8]
 80088c4:	6123      	str	r3, [r4, #16]
 80088c6:	7561      	strb	r1, [r4, #21]
 80088c8:	b002      	add	sp, #8
 80088ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088ce:	2108      	movs	r1, #8
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 faa1 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 80088d6:	b350      	cbz	r0, 800892e <ucdr_serialize_uint64_t+0x11a>
 80088d8:	7d22      	ldrb	r2, [r4, #20]
 80088da:	68a3      	ldr	r3, [r4, #8]
 80088dc:	2a01      	cmp	r2, #1
 80088de:	d02c      	beq.n	800893a <ucdr_serialize_uint64_t+0x126>
 80088e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80088e4:	701a      	strb	r2, [r3, #0]
 80088e6:	68a3      	ldr	r3, [r4, #8]
 80088e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80088ec:	705a      	strb	r2, [r3, #1]
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80088f4:	709a      	strb	r2, [r3, #2]
 80088f6:	68a3      	ldr	r3, [r4, #8]
 80088f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80088fc:	70da      	strb	r2, [r3, #3]
 80088fe:	68a3      	ldr	r3, [r4, #8]
 8008900:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008904:	711a      	strb	r2, [r3, #4]
 8008906:	68a3      	ldr	r3, [r4, #8]
 8008908:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800890c:	715a      	strb	r2, [r3, #5]
 800890e:	68a3      	ldr	r3, [r4, #8]
 8008910:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008914:	719a      	strb	r2, [r3, #6]
 8008916:	68a3      	ldr	r3, [r4, #8]
 8008918:	f89d 2000 	ldrb.w	r2, [sp]
 800891c:	71da      	strb	r2, [r3, #7]
 800891e:	68a2      	ldr	r2, [r4, #8]
 8008920:	6923      	ldr	r3, [r4, #16]
 8008922:	3208      	adds	r2, #8
 8008924:	3308      	adds	r3, #8
 8008926:	2108      	movs	r1, #8
 8008928:	60a2      	str	r2, [r4, #8]
 800892a:	6123      	str	r3, [r4, #16]
 800892c:	7561      	strb	r1, [r4, #21]
 800892e:	7da0      	ldrb	r0, [r4, #22]
 8008930:	f080 0001 	eor.w	r0, r0, #1
 8008934:	b002      	add	sp, #8
 8008936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800893a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800893e:	6019      	str	r1, [r3, #0]
 8008940:	605a      	str	r2, [r3, #4]
 8008942:	e7ec      	b.n	800891e <ucdr_serialize_uint64_t+0x10a>
 8008944:	68a2      	ldr	r2, [r4, #8]
 8008946:	6923      	ldr	r3, [r4, #16]
 8008948:	7da0      	ldrb	r0, [r4, #22]
 800894a:	7567      	strb	r7, [r4, #21]
 800894c:	1b92      	subs	r2, r2, r6
 800894e:	1b9b      	subs	r3, r3, r6
 8008950:	f080 0001 	eor.w	r0, r0, #1
 8008954:	60a2      	str	r2, [r4, #8]
 8008956:	6123      	str	r3, [r4, #16]
 8008958:	b002      	add	sp, #8
 800895a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800895e:	68a3      	ldr	r3, [r4, #8]
 8008960:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008964:	701a      	strb	r2, [r3, #0]
 8008966:	68a3      	ldr	r3, [r4, #8]
 8008968:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800896c:	701a      	strb	r2, [r3, #0]
 800896e:	68a3      	ldr	r3, [r4, #8]
 8008970:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008974:	701a      	strb	r2, [r3, #0]
 8008976:	68a3      	ldr	r3, [r4, #8]
 8008978:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800897c:	701a      	strb	r2, [r3, #0]
 800897e:	68a3      	ldr	r3, [r4, #8]
 8008980:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008984:	701a      	strb	r2, [r3, #0]
 8008986:	68a5      	ldr	r5, [r4, #8]
 8008988:	e78f      	b.n	80088aa <ucdr_serialize_uint64_t+0x96>
 800898a:	4628      	mov	r0, r5
 800898c:	466d      	mov	r5, sp
 800898e:	4632      	mov	r2, r6
 8008990:	4629      	mov	r1, r5
 8008992:	f00b f8ca 	bl	8013b2a <memcpy>
 8008996:	68a0      	ldr	r0, [r4, #8]
 8008998:	4642      	mov	r2, r8
 800899a:	19a9      	adds	r1, r5, r6
 800899c:	f00b f8c5 	bl	8013b2a <memcpy>
 80089a0:	e786      	b.n	80088b0 <ucdr_serialize_uint64_t+0x9c>
 80089a2:	bf00      	nop

080089a4 <ucdr_serialize_int16_t>:
 80089a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	460b      	mov	r3, r1
 80089ac:	2102      	movs	r1, #2
 80089ae:	4604      	mov	r4, r0
 80089b0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80089b4:	f000 fa84 	bl	8008ec0 <ucdr_buffer_alignment>
 80089b8:	4601      	mov	r1, r0
 80089ba:	4620      	mov	r0, r4
 80089bc:	7d67      	ldrb	r7, [r4, #21]
 80089be:	f000 fac3 	bl	8008f48 <ucdr_advance_buffer>
 80089c2:	2102      	movs	r1, #2
 80089c4:	4620      	mov	r0, r4
 80089c6:	f000 fa1b 	bl	8008e00 <ucdr_check_buffer_available_for>
 80089ca:	b1c0      	cbz	r0, 80089fe <ucdr_serialize_int16_t+0x5a>
 80089cc:	7d22      	ldrb	r2, [r4, #20]
 80089ce:	68a3      	ldr	r3, [r4, #8]
 80089d0:	2a01      	cmp	r2, #1
 80089d2:	d04e      	beq.n	8008a72 <ucdr_serialize_int16_t+0xce>
 80089d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80089d8:	701a      	strb	r2, [r3, #0]
 80089da:	68a3      	ldr	r3, [r4, #8]
 80089dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80089e0:	705a      	strb	r2, [r3, #1]
 80089e2:	68a2      	ldr	r2, [r4, #8]
 80089e4:	6923      	ldr	r3, [r4, #16]
 80089e6:	3202      	adds	r2, #2
 80089e8:	3302      	adds	r3, #2
 80089ea:	2102      	movs	r1, #2
 80089ec:	60a2      	str	r2, [r4, #8]
 80089ee:	6123      	str	r3, [r4, #16]
 80089f0:	7561      	strb	r1, [r4, #21]
 80089f2:	7da0      	ldrb	r0, [r4, #22]
 80089f4:	f080 0001 	eor.w	r0, r0, #1
 80089f8:	b002      	add	sp, #8
 80089fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089fe:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008a02:	42ab      	cmp	r3, r5
 8008a04:	d923      	bls.n	8008a4e <ucdr_serialize_int16_t+0xaa>
 8008a06:	1b5e      	subs	r6, r3, r5
 8008a08:	60a3      	str	r3, [r4, #8]
 8008a0a:	6923      	ldr	r3, [r4, #16]
 8008a0c:	f1c6 0802 	rsb	r8, r6, #2
 8008a10:	4433      	add	r3, r6
 8008a12:	6123      	str	r3, [r4, #16]
 8008a14:	4641      	mov	r1, r8
 8008a16:	4620      	mov	r0, r4
 8008a18:	f000 f9fe 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008a1c:	b368      	cbz	r0, 8008a7a <ucdr_serialize_int16_t+0xd6>
 8008a1e:	7d23      	ldrb	r3, [r4, #20]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d03b      	beq.n	8008a9c <ucdr_serialize_int16_t+0xf8>
 8008a24:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008a28:	702b      	strb	r3, [r5, #0]
 8008a2a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008a2e:	706b      	strb	r3, [r5, #1]
 8008a30:	6923      	ldr	r3, [r4, #16]
 8008a32:	68a2      	ldr	r2, [r4, #8]
 8008a34:	7da0      	ldrb	r0, [r4, #22]
 8008a36:	3302      	adds	r3, #2
 8008a38:	4442      	add	r2, r8
 8008a3a:	1b9b      	subs	r3, r3, r6
 8008a3c:	2102      	movs	r1, #2
 8008a3e:	f080 0001 	eor.w	r0, r0, #1
 8008a42:	60a2      	str	r2, [r4, #8]
 8008a44:	6123      	str	r3, [r4, #16]
 8008a46:	7561      	strb	r1, [r4, #21]
 8008a48:	b002      	add	sp, #8
 8008a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a4e:	2102      	movs	r1, #2
 8008a50:	4620      	mov	r0, r4
 8008a52:	f000 f9e1 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d0cb      	beq.n	80089f2 <ucdr_serialize_int16_t+0x4e>
 8008a5a:	7d23      	ldrb	r3, [r4, #20]
 8008a5c:	68a2      	ldr	r2, [r4, #8]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d018      	beq.n	8008a94 <ucdr_serialize_int16_t+0xf0>
 8008a62:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008a66:	7013      	strb	r3, [r2, #0]
 8008a68:	68a3      	ldr	r3, [r4, #8]
 8008a6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008a6e:	705a      	strb	r2, [r3, #1]
 8008a70:	e7b7      	b.n	80089e2 <ucdr_serialize_int16_t+0x3e>
 8008a72:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008a76:	801a      	strh	r2, [r3, #0]
 8008a78:	e7b3      	b.n	80089e2 <ucdr_serialize_int16_t+0x3e>
 8008a7a:	68a2      	ldr	r2, [r4, #8]
 8008a7c:	6923      	ldr	r3, [r4, #16]
 8008a7e:	7da0      	ldrb	r0, [r4, #22]
 8008a80:	7567      	strb	r7, [r4, #21]
 8008a82:	1b92      	subs	r2, r2, r6
 8008a84:	1b9b      	subs	r3, r3, r6
 8008a86:	f080 0001 	eor.w	r0, r0, #1
 8008a8a:	60a2      	str	r2, [r4, #8]
 8008a8c:	6123      	str	r3, [r4, #16]
 8008a8e:	b002      	add	sp, #8
 8008a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a94:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008a98:	8013      	strh	r3, [r2, #0]
 8008a9a:	e7a2      	b.n	80089e2 <ucdr_serialize_int16_t+0x3e>
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	f10d 0506 	add.w	r5, sp, #6
 8008aa2:	4632      	mov	r2, r6
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	f00b f840 	bl	8013b2a <memcpy>
 8008aaa:	68a0      	ldr	r0, [r4, #8]
 8008aac:	4642      	mov	r2, r8
 8008aae:	19a9      	adds	r1, r5, r6
 8008ab0:	f00b f83b 	bl	8013b2a <memcpy>
 8008ab4:	e7bc      	b.n	8008a30 <ucdr_serialize_int16_t+0x8c>
 8008ab6:	bf00      	nop

08008ab8 <ucdr_deserialize_int16_t>:
 8008ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008abc:	460d      	mov	r5, r1
 8008abe:	2102      	movs	r1, #2
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	f000 f9fd 	bl	8008ec0 <ucdr_buffer_alignment>
 8008ac6:	4601      	mov	r1, r0
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008ace:	f000 fa3b 	bl	8008f48 <ucdr_advance_buffer>
 8008ad2:	2102      	movs	r1, #2
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f000 f993 	bl	8008e00 <ucdr_check_buffer_available_for>
 8008ada:	b1a8      	cbz	r0, 8008b08 <ucdr_deserialize_int16_t+0x50>
 8008adc:	7d22      	ldrb	r2, [r4, #20]
 8008ade:	68a3      	ldr	r3, [r4, #8]
 8008ae0:	2a01      	cmp	r2, #1
 8008ae2:	d046      	beq.n	8008b72 <ucdr_deserialize_int16_t+0xba>
 8008ae4:	785b      	ldrb	r3, [r3, #1]
 8008ae6:	702b      	strb	r3, [r5, #0]
 8008ae8:	68a3      	ldr	r3, [r4, #8]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	706b      	strb	r3, [r5, #1]
 8008aee:	68a2      	ldr	r2, [r4, #8]
 8008af0:	6923      	ldr	r3, [r4, #16]
 8008af2:	3202      	adds	r2, #2
 8008af4:	3302      	adds	r3, #2
 8008af6:	2102      	movs	r1, #2
 8008af8:	60a2      	str	r2, [r4, #8]
 8008afa:	6123      	str	r3, [r4, #16]
 8008afc:	7561      	strb	r1, [r4, #21]
 8008afe:	7da0      	ldrb	r0, [r4, #22]
 8008b00:	f080 0001 	eor.w	r0, r0, #1
 8008b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b08:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008b0c:	42be      	cmp	r6, r7
 8008b0e:	d920      	bls.n	8008b52 <ucdr_deserialize_int16_t+0x9a>
 8008b10:	6923      	ldr	r3, [r4, #16]
 8008b12:	60a6      	str	r6, [r4, #8]
 8008b14:	1bf6      	subs	r6, r6, r7
 8008b16:	4433      	add	r3, r6
 8008b18:	f1c6 0902 	rsb	r9, r6, #2
 8008b1c:	6123      	str	r3, [r4, #16]
 8008b1e:	4649      	mov	r1, r9
 8008b20:	4620      	mov	r0, r4
 8008b22:	f000 f979 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008b26:	b338      	cbz	r0, 8008b78 <ucdr_deserialize_int16_t+0xc0>
 8008b28:	7d23      	ldrb	r3, [r4, #20]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d034      	beq.n	8008b98 <ucdr_deserialize_int16_t+0xe0>
 8008b2e:	787b      	ldrb	r3, [r7, #1]
 8008b30:	702b      	strb	r3, [r5, #0]
 8008b32:	783b      	ldrb	r3, [r7, #0]
 8008b34:	706b      	strb	r3, [r5, #1]
 8008b36:	6923      	ldr	r3, [r4, #16]
 8008b38:	68a2      	ldr	r2, [r4, #8]
 8008b3a:	7da0      	ldrb	r0, [r4, #22]
 8008b3c:	2102      	movs	r1, #2
 8008b3e:	3302      	adds	r3, #2
 8008b40:	444a      	add	r2, r9
 8008b42:	1b9b      	subs	r3, r3, r6
 8008b44:	7561      	strb	r1, [r4, #21]
 8008b46:	60a2      	str	r2, [r4, #8]
 8008b48:	6123      	str	r3, [r4, #16]
 8008b4a:	f080 0001 	eor.w	r0, r0, #1
 8008b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b52:	2102      	movs	r1, #2
 8008b54:	4620      	mov	r0, r4
 8008b56:	f000 f95f 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d0cf      	beq.n	8008afe <ucdr_deserialize_int16_t+0x46>
 8008b5e:	7d23      	ldrb	r3, [r4, #20]
 8008b60:	68a2      	ldr	r2, [r4, #8]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d015      	beq.n	8008b92 <ucdr_deserialize_int16_t+0xda>
 8008b66:	7853      	ldrb	r3, [r2, #1]
 8008b68:	702b      	strb	r3, [r5, #0]
 8008b6a:	68a3      	ldr	r3, [r4, #8]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	706b      	strb	r3, [r5, #1]
 8008b70:	e7bd      	b.n	8008aee <ucdr_deserialize_int16_t+0x36>
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	802b      	strh	r3, [r5, #0]
 8008b76:	e7ba      	b.n	8008aee <ucdr_deserialize_int16_t+0x36>
 8008b78:	68a2      	ldr	r2, [r4, #8]
 8008b7a:	6923      	ldr	r3, [r4, #16]
 8008b7c:	7da0      	ldrb	r0, [r4, #22]
 8008b7e:	f884 8015 	strb.w	r8, [r4, #21]
 8008b82:	1b92      	subs	r2, r2, r6
 8008b84:	1b9b      	subs	r3, r3, r6
 8008b86:	60a2      	str	r2, [r4, #8]
 8008b88:	6123      	str	r3, [r4, #16]
 8008b8a:	f080 0001 	eor.w	r0, r0, #1
 8008b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b92:	8813      	ldrh	r3, [r2, #0]
 8008b94:	802b      	strh	r3, [r5, #0]
 8008b96:	e7aa      	b.n	8008aee <ucdr_deserialize_int16_t+0x36>
 8008b98:	4639      	mov	r1, r7
 8008b9a:	4632      	mov	r2, r6
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	f00a ffc4 	bl	8013b2a <memcpy>
 8008ba2:	68a1      	ldr	r1, [r4, #8]
 8008ba4:	464a      	mov	r2, r9
 8008ba6:	19a8      	adds	r0, r5, r6
 8008ba8:	f00a ffbf 	bl	8013b2a <memcpy>
 8008bac:	e7c3      	b.n	8008b36 <ucdr_deserialize_int16_t+0x7e>
 8008bae:	bf00      	nop

08008bb0 <ucdr_serialize_int32_t>:
 8008bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb4:	b082      	sub	sp, #8
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	9101      	str	r1, [sp, #4]
 8008bba:	2104      	movs	r1, #4
 8008bbc:	f000 f980 	bl	8008ec0 <ucdr_buffer_alignment>
 8008bc0:	4601      	mov	r1, r0
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	7d67      	ldrb	r7, [r4, #21]
 8008bc6:	f000 f9bf 	bl	8008f48 <ucdr_advance_buffer>
 8008bca:	2104      	movs	r1, #4
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f000 f917 	bl	8008e00 <ucdr_check_buffer_available_for>
 8008bd2:	b300      	cbz	r0, 8008c16 <ucdr_serialize_int32_t+0x66>
 8008bd4:	7d22      	ldrb	r2, [r4, #20]
 8008bd6:	68a3      	ldr	r3, [r4, #8]
 8008bd8:	2a01      	cmp	r2, #1
 8008bda:	d05d      	beq.n	8008c98 <ucdr_serialize_int32_t+0xe8>
 8008bdc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008be0:	701a      	strb	r2, [r3, #0]
 8008be2:	68a3      	ldr	r3, [r4, #8]
 8008be4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008be8:	705a      	strb	r2, [r3, #1]
 8008bea:	68a3      	ldr	r3, [r4, #8]
 8008bec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008bf0:	709a      	strb	r2, [r3, #2]
 8008bf2:	68a3      	ldr	r3, [r4, #8]
 8008bf4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008bf8:	70da      	strb	r2, [r3, #3]
 8008bfa:	68a2      	ldr	r2, [r4, #8]
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	3204      	adds	r2, #4
 8008c00:	3304      	adds	r3, #4
 8008c02:	2104      	movs	r1, #4
 8008c04:	60a2      	str	r2, [r4, #8]
 8008c06:	6123      	str	r3, [r4, #16]
 8008c08:	7561      	strb	r1, [r4, #21]
 8008c0a:	7da0      	ldrb	r0, [r4, #22]
 8008c0c:	f080 0001 	eor.w	r0, r0, #1
 8008c10:	b002      	add	sp, #8
 8008c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c16:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008c1a:	42ab      	cmp	r3, r5
 8008c1c:	d92e      	bls.n	8008c7c <ucdr_serialize_int32_t+0xcc>
 8008c1e:	1b5e      	subs	r6, r3, r5
 8008c20:	60a3      	str	r3, [r4, #8]
 8008c22:	6923      	ldr	r3, [r4, #16]
 8008c24:	f1c6 0804 	rsb	r8, r6, #4
 8008c28:	4433      	add	r3, r6
 8008c2a:	6123      	str	r3, [r4, #16]
 8008c2c:	4641      	mov	r1, r8
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 f8f2 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008c34:	b398      	cbz	r0, 8008c9e <ucdr_serialize_int32_t+0xee>
 8008c36:	7d23      	ldrb	r3, [r4, #20]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d046      	beq.n	8008cca <ucdr_serialize_int32_t+0x11a>
 8008c3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008c40:	702b      	strb	r3, [r5, #0]
 8008c42:	2e01      	cmp	r6, #1
 8008c44:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008c48:	706b      	strb	r3, [r5, #1]
 8008c4a:	d035      	beq.n	8008cb8 <ucdr_serialize_int32_t+0x108>
 8008c4c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008c50:	70ab      	strb	r3, [r5, #2]
 8008c52:	2e02      	cmp	r6, #2
 8008c54:	d034      	beq.n	8008cc0 <ucdr_serialize_int32_t+0x110>
 8008c56:	3503      	adds	r5, #3
 8008c58:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008c5c:	702b      	strb	r3, [r5, #0]
 8008c5e:	6923      	ldr	r3, [r4, #16]
 8008c60:	68a2      	ldr	r2, [r4, #8]
 8008c62:	7da0      	ldrb	r0, [r4, #22]
 8008c64:	3304      	adds	r3, #4
 8008c66:	4442      	add	r2, r8
 8008c68:	1b9b      	subs	r3, r3, r6
 8008c6a:	2104      	movs	r1, #4
 8008c6c:	f080 0001 	eor.w	r0, r0, #1
 8008c70:	60a2      	str	r2, [r4, #8]
 8008c72:	6123      	str	r3, [r4, #16]
 8008c74:	7561      	strb	r1, [r4, #21]
 8008c76:	b002      	add	sp, #8
 8008c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c7c:	2104      	movs	r1, #4
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f000 f8ca 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d0c0      	beq.n	8008c0a <ucdr_serialize_int32_t+0x5a>
 8008c88:	7d23      	ldrb	r3, [r4, #20]
 8008c8a:	68a2      	ldr	r2, [r4, #8]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d019      	beq.n	8008cc4 <ucdr_serialize_int32_t+0x114>
 8008c90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008c94:	7013      	strb	r3, [r2, #0]
 8008c96:	e7a4      	b.n	8008be2 <ucdr_serialize_int32_t+0x32>
 8008c98:	9a01      	ldr	r2, [sp, #4]
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	e7ad      	b.n	8008bfa <ucdr_serialize_int32_t+0x4a>
 8008c9e:	68a2      	ldr	r2, [r4, #8]
 8008ca0:	6923      	ldr	r3, [r4, #16]
 8008ca2:	7da0      	ldrb	r0, [r4, #22]
 8008ca4:	7567      	strb	r7, [r4, #21]
 8008ca6:	1b92      	subs	r2, r2, r6
 8008ca8:	1b9b      	subs	r3, r3, r6
 8008caa:	f080 0001 	eor.w	r0, r0, #1
 8008cae:	60a2      	str	r2, [r4, #8]
 8008cb0:	6123      	str	r3, [r4, #16]
 8008cb2:	b002      	add	sp, #8
 8008cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb8:	68a3      	ldr	r3, [r4, #8]
 8008cba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008cbe:	701a      	strb	r2, [r3, #0]
 8008cc0:	68a5      	ldr	r5, [r4, #8]
 8008cc2:	e7c9      	b.n	8008c58 <ucdr_serialize_int32_t+0xa8>
 8008cc4:	9b01      	ldr	r3, [sp, #4]
 8008cc6:	6013      	str	r3, [r2, #0]
 8008cc8:	e797      	b.n	8008bfa <ucdr_serialize_int32_t+0x4a>
 8008cca:	4628      	mov	r0, r5
 8008ccc:	ad01      	add	r5, sp, #4
 8008cce:	4632      	mov	r2, r6
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	f00a ff2a 	bl	8013b2a <memcpy>
 8008cd6:	68a0      	ldr	r0, [r4, #8]
 8008cd8:	4642      	mov	r2, r8
 8008cda:	19a9      	adds	r1, r5, r6
 8008cdc:	f00a ff25 	bl	8013b2a <memcpy>
 8008ce0:	e7bd      	b.n	8008c5e <ucdr_serialize_int32_t+0xae>
 8008ce2:	bf00      	nop

08008ce4 <ucdr_deserialize_int32_t>:
 8008ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ce8:	460d      	mov	r5, r1
 8008cea:	2104      	movs	r1, #4
 8008cec:	4604      	mov	r4, r0
 8008cee:	f000 f8e7 	bl	8008ec0 <ucdr_buffer_alignment>
 8008cf2:	4601      	mov	r1, r0
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008cfa:	f000 f925 	bl	8008f48 <ucdr_advance_buffer>
 8008cfe:	2104      	movs	r1, #4
 8008d00:	4620      	mov	r0, r4
 8008d02:	f000 f87d 	bl	8008e00 <ucdr_check_buffer_available_for>
 8008d06:	b1d8      	cbz	r0, 8008d40 <ucdr_deserialize_int32_t+0x5c>
 8008d08:	7d22      	ldrb	r2, [r4, #20]
 8008d0a:	68a3      	ldr	r3, [r4, #8]
 8008d0c:	2a01      	cmp	r2, #1
 8008d0e:	d052      	beq.n	8008db6 <ucdr_deserialize_int32_t+0xd2>
 8008d10:	78db      	ldrb	r3, [r3, #3]
 8008d12:	702b      	strb	r3, [r5, #0]
 8008d14:	68a3      	ldr	r3, [r4, #8]
 8008d16:	789b      	ldrb	r3, [r3, #2]
 8008d18:	706b      	strb	r3, [r5, #1]
 8008d1a:	68a3      	ldr	r3, [r4, #8]
 8008d1c:	785b      	ldrb	r3, [r3, #1]
 8008d1e:	70ab      	strb	r3, [r5, #2]
 8008d20:	68a3      	ldr	r3, [r4, #8]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	70eb      	strb	r3, [r5, #3]
 8008d26:	68a2      	ldr	r2, [r4, #8]
 8008d28:	6923      	ldr	r3, [r4, #16]
 8008d2a:	3204      	adds	r2, #4
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	2104      	movs	r1, #4
 8008d30:	60a2      	str	r2, [r4, #8]
 8008d32:	6123      	str	r3, [r4, #16]
 8008d34:	7561      	strb	r1, [r4, #21]
 8008d36:	7da0      	ldrb	r0, [r4, #22]
 8008d38:	f080 0001 	eor.w	r0, r0, #1
 8008d3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d40:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008d44:	42b7      	cmp	r7, r6
 8008d46:	d92a      	bls.n	8008d9e <ucdr_deserialize_int32_t+0xba>
 8008d48:	6923      	ldr	r3, [r4, #16]
 8008d4a:	60a7      	str	r7, [r4, #8]
 8008d4c:	1bbf      	subs	r7, r7, r6
 8008d4e:	443b      	add	r3, r7
 8008d50:	f1c7 0904 	rsb	r9, r7, #4
 8008d54:	6123      	str	r3, [r4, #16]
 8008d56:	4649      	mov	r1, r9
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f000 f85d 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008d5e:	b368      	cbz	r0, 8008dbc <ucdr_deserialize_int32_t+0xd8>
 8008d60:	7d23      	ldrb	r3, [r4, #20]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d040      	beq.n	8008de8 <ucdr_deserialize_int32_t+0x104>
 8008d66:	78f3      	ldrb	r3, [r6, #3]
 8008d68:	702b      	strb	r3, [r5, #0]
 8008d6a:	78b3      	ldrb	r3, [r6, #2]
 8008d6c:	706b      	strb	r3, [r5, #1]
 8008d6e:	2f01      	cmp	r7, #1
 8008d70:	d031      	beq.n	8008dd6 <ucdr_deserialize_int32_t+0xf2>
 8008d72:	7873      	ldrb	r3, [r6, #1]
 8008d74:	70ab      	strb	r3, [r5, #2]
 8008d76:	2f02      	cmp	r7, #2
 8008d78:	f105 0503 	add.w	r5, r5, #3
 8008d7c:	d02f      	beq.n	8008dde <ucdr_deserialize_int32_t+0xfa>
 8008d7e:	7833      	ldrb	r3, [r6, #0]
 8008d80:	702b      	strb	r3, [r5, #0]
 8008d82:	6923      	ldr	r3, [r4, #16]
 8008d84:	68a2      	ldr	r2, [r4, #8]
 8008d86:	7da0      	ldrb	r0, [r4, #22]
 8008d88:	2104      	movs	r1, #4
 8008d8a:	3304      	adds	r3, #4
 8008d8c:	444a      	add	r2, r9
 8008d8e:	1bdb      	subs	r3, r3, r7
 8008d90:	7561      	strb	r1, [r4, #21]
 8008d92:	60a2      	str	r2, [r4, #8]
 8008d94:	6123      	str	r3, [r4, #16]
 8008d96:	f080 0001 	eor.w	r0, r0, #1
 8008d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d9e:	2104      	movs	r1, #4
 8008da0:	4620      	mov	r0, r4
 8008da2:	f000 f839 	bl	8008e18 <ucdr_check_final_buffer_behavior>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d0c5      	beq.n	8008d36 <ucdr_deserialize_int32_t+0x52>
 8008daa:	7d23      	ldrb	r3, [r4, #20]
 8008dac:	68a2      	ldr	r2, [r4, #8]
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d017      	beq.n	8008de2 <ucdr_deserialize_int32_t+0xfe>
 8008db2:	78d3      	ldrb	r3, [r2, #3]
 8008db4:	e7ad      	b.n	8008d12 <ucdr_deserialize_int32_t+0x2e>
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	602b      	str	r3, [r5, #0]
 8008dba:	e7b4      	b.n	8008d26 <ucdr_deserialize_int32_t+0x42>
 8008dbc:	68a2      	ldr	r2, [r4, #8]
 8008dbe:	6923      	ldr	r3, [r4, #16]
 8008dc0:	7da0      	ldrb	r0, [r4, #22]
 8008dc2:	f884 8015 	strb.w	r8, [r4, #21]
 8008dc6:	1bd2      	subs	r2, r2, r7
 8008dc8:	1bdb      	subs	r3, r3, r7
 8008dca:	60a2      	str	r2, [r4, #8]
 8008dcc:	6123      	str	r3, [r4, #16]
 8008dce:	f080 0001 	eor.w	r0, r0, #1
 8008dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd6:	68a3      	ldr	r3, [r4, #8]
 8008dd8:	785b      	ldrb	r3, [r3, #1]
 8008dda:	70ab      	strb	r3, [r5, #2]
 8008ddc:	3503      	adds	r5, #3
 8008dde:	68a6      	ldr	r6, [r4, #8]
 8008de0:	e7cd      	b.n	8008d7e <ucdr_deserialize_int32_t+0x9a>
 8008de2:	6813      	ldr	r3, [r2, #0]
 8008de4:	602b      	str	r3, [r5, #0]
 8008de6:	e79e      	b.n	8008d26 <ucdr_deserialize_int32_t+0x42>
 8008de8:	4631      	mov	r1, r6
 8008dea:	463a      	mov	r2, r7
 8008dec:	4628      	mov	r0, r5
 8008dee:	f00a fe9c 	bl	8013b2a <memcpy>
 8008df2:	68a1      	ldr	r1, [r4, #8]
 8008df4:	464a      	mov	r2, r9
 8008df6:	19e8      	adds	r0, r5, r7
 8008df8:	f00a fe97 	bl	8013b2a <memcpy>
 8008dfc:	e7c1      	b.n	8008d82 <ucdr_deserialize_int32_t+0x9e>
 8008dfe:	bf00      	nop

08008e00 <ucdr_check_buffer_available_for>:
 8008e00:	7d83      	ldrb	r3, [r0, #22]
 8008e02:	b93b      	cbnz	r3, 8008e14 <ucdr_check_buffer_available_for+0x14>
 8008e04:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8008e08:	440b      	add	r3, r1
 8008e0a:	4298      	cmp	r0, r3
 8008e0c:	bf34      	ite	cc
 8008e0e:	2000      	movcc	r0, #0
 8008e10:	2001      	movcs	r0, #1
 8008e12:	4770      	bx	lr
 8008e14:	2000      	movs	r0, #0
 8008e16:	4770      	bx	lr

08008e18 <ucdr_check_final_buffer_behavior>:
 8008e18:	7d83      	ldrb	r3, [r0, #22]
 8008e1a:	b943      	cbnz	r3, 8008e2e <ucdr_check_final_buffer_behavior+0x16>
 8008e1c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8008e20:	4291      	cmp	r1, r2
 8008e22:	b510      	push	{r4, lr}
 8008e24:	4604      	mov	r4, r0
 8008e26:	d205      	bcs.n	8008e34 <ucdr_check_final_buffer_behavior+0x1c>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	bd10      	pop	{r4, pc}
 8008e2e:	2300      	movs	r3, #0
 8008e30:	4618      	mov	r0, r3
 8008e32:	4770      	bx	lr
 8008e34:	6982      	ldr	r2, [r0, #24]
 8008e36:	b13a      	cbz	r2, 8008e48 <ucdr_check_final_buffer_behavior+0x30>
 8008e38:	69c1      	ldr	r1, [r0, #28]
 8008e3a:	4790      	blx	r2
 8008e3c:	f080 0301 	eor.w	r3, r0, #1
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	75a0      	strb	r0, [r4, #22]
 8008e44:	4618      	mov	r0, r3
 8008e46:	bd10      	pop	{r4, pc}
 8008e48:	2001      	movs	r0, #1
 8008e4a:	75a0      	strb	r0, [r4, #22]
 8008e4c:	e7fa      	b.n	8008e44 <ucdr_check_final_buffer_behavior+0x2c>
 8008e4e:	bf00      	nop

08008e50 <ucdr_set_on_full_buffer_callback>:
 8008e50:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop

08008e58 <ucdr_init_buffer_origin_offset_endian>:
 8008e58:	b410      	push	{r4}
 8008e5a:	9c01      	ldr	r4, [sp, #4]
 8008e5c:	6001      	str	r1, [r0, #0]
 8008e5e:	440a      	add	r2, r1
 8008e60:	6042      	str	r2, [r0, #4]
 8008e62:	190a      	adds	r2, r1, r4
 8008e64:	441c      	add	r4, r3
 8008e66:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8008e6a:	6082      	str	r2, [r0, #8]
 8008e6c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008e70:	7503      	strb	r3, [r0, #20]
 8008e72:	2200      	movs	r2, #0
 8008e74:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8008e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e7c:	7542      	strb	r2, [r0, #21]
 8008e7e:	7582      	strb	r2, [r0, #22]
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop

08008e84 <ucdr_init_buffer_origin_offset>:
 8008e84:	b510      	push	{r4, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	9c04      	ldr	r4, [sp, #16]
 8008e8a:	9400      	str	r4, [sp, #0]
 8008e8c:	2401      	movs	r4, #1
 8008e8e:	9401      	str	r4, [sp, #4]
 8008e90:	f7ff ffe2 	bl	8008e58 <ucdr_init_buffer_origin_offset_endian>
 8008e94:	b002      	add	sp, #8
 8008e96:	bd10      	pop	{r4, pc}

08008e98 <ucdr_init_buffer_origin>:
 8008e98:	b510      	push	{r4, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	2400      	movs	r4, #0
 8008e9e:	9400      	str	r4, [sp, #0]
 8008ea0:	f7ff fff0 	bl	8008e84 <ucdr_init_buffer_origin_offset>
 8008ea4:	b002      	add	sp, #8
 8008ea6:	bd10      	pop	{r4, pc}

08008ea8 <ucdr_init_buffer>:
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	f7ff bff5 	b.w	8008e98 <ucdr_init_buffer_origin>
 8008eae:	bf00      	nop

08008eb0 <ucdr_alignment>:
 8008eb0:	fbb0 f3f1 	udiv	r3, r0, r1
 8008eb4:	fb03 0011 	mls	r0, r3, r1, r0
 8008eb8:	1a08      	subs	r0, r1, r0
 8008eba:	3901      	subs	r1, #1
 8008ebc:	4008      	ands	r0, r1
 8008ebe:	4770      	bx	lr

08008ec0 <ucdr_buffer_alignment>:
 8008ec0:	7d43      	ldrb	r3, [r0, #21]
 8008ec2:	428b      	cmp	r3, r1
 8008ec4:	d208      	bcs.n	8008ed8 <ucdr_buffer_alignment+0x18>
 8008ec6:	6900      	ldr	r0, [r0, #16]
 8008ec8:	fbb0 f3f1 	udiv	r3, r0, r1
 8008ecc:	fb01 0013 	mls	r0, r1, r3, r0
 8008ed0:	1a08      	subs	r0, r1, r0
 8008ed2:	3901      	subs	r1, #1
 8008ed4:	4008      	ands	r0, r1
 8008ed6:	4770      	bx	lr
 8008ed8:	2000      	movs	r0, #0
 8008eda:	4770      	bx	lr

08008edc <ucdr_align_to>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4604      	mov	r4, r0
 8008ee0:	460d      	mov	r5, r1
 8008ee2:	f7ff ffed 	bl	8008ec0 <ucdr_buffer_alignment>
 8008ee6:	68a3      	ldr	r3, [r4, #8]
 8008ee8:	6861      	ldr	r1, [r4, #4]
 8008eea:	6922      	ldr	r2, [r4, #16]
 8008eec:	7565      	strb	r5, [r4, #21]
 8008eee:	4403      	add	r3, r0
 8008ef0:	428b      	cmp	r3, r1
 8008ef2:	bf28      	it	cs
 8008ef4:	460b      	movcs	r3, r1
 8008ef6:	4402      	add	r2, r0
 8008ef8:	60a3      	str	r3, [r4, #8]
 8008efa:	6122      	str	r2, [r4, #16]
 8008efc:	bd38      	pop	{r3, r4, r5, pc}
 8008efe:	bf00      	nop

08008f00 <ucdr_buffer_length>:
 8008f00:	6882      	ldr	r2, [r0, #8]
 8008f02:	6800      	ldr	r0, [r0, #0]
 8008f04:	1a10      	subs	r0, r2, r0
 8008f06:	4770      	bx	lr

08008f08 <ucdr_buffer_remaining>:
 8008f08:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8008f0c:	1a10      	subs	r0, r2, r0
 8008f0e:	4770      	bx	lr

08008f10 <ucdr_check_final_buffer_behavior_array>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	7d83      	ldrb	r3, [r0, #22]
 8008f14:	b963      	cbnz	r3, 8008f30 <ucdr_check_final_buffer_behavior_array+0x20>
 8008f16:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	4604      	mov	r4, r0
 8008f1e:	460d      	mov	r5, r1
 8008f20:	d308      	bcc.n	8008f34 <ucdr_check_final_buffer_behavior_array+0x24>
 8008f22:	b139      	cbz	r1, 8008f34 <ucdr_check_final_buffer_behavior_array+0x24>
 8008f24:	6983      	ldr	r3, [r0, #24]
 8008f26:	b163      	cbz	r3, 8008f42 <ucdr_check_final_buffer_behavior_array+0x32>
 8008f28:	69c1      	ldr	r1, [r0, #28]
 8008f2a:	4798      	blx	r3
 8008f2c:	75a0      	strb	r0, [r4, #22]
 8008f2e:	b108      	cbz	r0, 8008f34 <ucdr_check_final_buffer_behavior_array+0x24>
 8008f30:	2000      	movs	r0, #0
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	4620      	mov	r0, r4
 8008f36:	f7ff ffe7 	bl	8008f08 <ucdr_buffer_remaining>
 8008f3a:	42a8      	cmp	r0, r5
 8008f3c:	bf28      	it	cs
 8008f3e:	4628      	movcs	r0, r5
 8008f40:	bd38      	pop	{r3, r4, r5, pc}
 8008f42:	2301      	movs	r3, #1
 8008f44:	7583      	strb	r3, [r0, #22]
 8008f46:	e7f3      	b.n	8008f30 <ucdr_check_final_buffer_behavior_array+0x20>

08008f48 <ucdr_advance_buffer>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	460d      	mov	r5, r1
 8008f4e:	f7ff ff57 	bl	8008e00 <ucdr_check_buffer_available_for>
 8008f52:	b178      	cbz	r0, 8008f74 <ucdr_advance_buffer+0x2c>
 8008f54:	6923      	ldr	r3, [r4, #16]
 8008f56:	68a2      	ldr	r2, [r4, #8]
 8008f58:	442b      	add	r3, r5
 8008f5a:	6123      	str	r3, [r4, #16]
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	442a      	add	r2, r5
 8008f60:	7563      	strb	r3, [r4, #21]
 8008f62:	60a2      	str	r2, [r4, #8]
 8008f64:	bd38      	pop	{r3, r4, r5, pc}
 8008f66:	68a2      	ldr	r2, [r4, #8]
 8008f68:	6923      	ldr	r3, [r4, #16]
 8008f6a:	4402      	add	r2, r0
 8008f6c:	4403      	add	r3, r0
 8008f6e:	1a2d      	subs	r5, r5, r0
 8008f70:	60a2      	str	r2, [r4, #8]
 8008f72:	6123      	str	r3, [r4, #16]
 8008f74:	2201      	movs	r2, #1
 8008f76:	4629      	mov	r1, r5
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f7ff ffc9 	bl	8008f10 <ucdr_check_final_buffer_behavior_array>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d1f1      	bne.n	8008f66 <ucdr_advance_buffer+0x1e>
 8008f82:	2301      	movs	r3, #1
 8008f84:	7563      	strb	r3, [r4, #21]
 8008f86:	bd38      	pop	{r3, r4, r5, pc}

08008f88 <rcl_client_get_rmw_handle>:
 8008f88:	b118      	cbz	r0, 8008f92 <rcl_client_get_rmw_handle+0xa>
 8008f8a:	6800      	ldr	r0, [r0, #0]
 8008f8c:	b108      	cbz	r0, 8008f92 <rcl_client_get_rmw_handle+0xa>
 8008f8e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8008f92:	4770      	bx	lr

08008f94 <rcl_send_request>:
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d048      	beq.n	800902a <rcl_send_request+0x96>
 8008f98:	b570      	push	{r4, r5, r6, lr}
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	6800      	ldr	r0, [r0, #0]
 8008f9e:	b08a      	sub	sp, #40	@ 0x28
 8008fa0:	b1c0      	cbz	r0, 8008fd4 <rcl_send_request+0x40>
 8008fa2:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8008fa6:	b1ab      	cbz	r3, 8008fd4 <rcl_send_request+0x40>
 8008fa8:	460e      	mov	r6, r1
 8008faa:	b1b9      	cbz	r1, 8008fdc <rcl_send_request+0x48>
 8008fac:	4615      	mov	r5, r2
 8008fae:	b1aa      	cbz	r2, 8008fdc <rcl_send_request+0x48>
 8008fb0:	2105      	movs	r1, #5
 8008fb2:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8008fb6:	f002 fd47 	bl	800ba48 <__atomic_load_8>
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	e9c5 0100 	strd	r0, r1, [r5]
 8008fc0:	462a      	mov	r2, r5
 8008fc2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	f003 fe32 	bl	800cc30 <rmw_send_request>
 8008fcc:	b148      	cbz	r0, 8008fe2 <rcl_send_request+0x4e>
 8008fce:	2001      	movs	r0, #1
 8008fd0:	b00a      	add	sp, #40	@ 0x28
 8008fd2:	bd70      	pop	{r4, r5, r6, pc}
 8008fd4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008fd8:	b00a      	add	sp, #40	@ 0x28
 8008fda:	bd70      	pop	{r4, r5, r6, pc}
 8008fdc:	200b      	movs	r0, #11
 8008fde:	b00a      	add	sp, #40	@ 0x28
 8008fe0:	bd70      	pop	{r4, r5, r6, pc}
 8008fe2:	6820      	ldr	r0, [r4, #0]
 8008fe4:	2305      	movs	r3, #5
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008fec:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8008ff0:	f002 fd96 	bl	800bb20 <__atomic_exchange_8>
 8008ff4:	6823      	ldr	r3, [r4, #0]
 8008ff6:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8008ffa:	b1a2      	cbz	r2, 8009026 <rcl_send_request+0x92>
 8008ffc:	a905      	add	r1, sp, #20
 8008ffe:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8009002:	f003 fa35 	bl	800c470 <rmw_get_gid_for_client>
 8009006:	4601      	mov	r1, r0
 8009008:	b990      	cbnz	r0, 8009030 <rcl_send_request+0x9c>
 800900a:	6822      	ldr	r2, [r4, #0]
 800900c:	ab06      	add	r3, sp, #24
 800900e:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 8009012:	9302      	str	r3, [sp, #8]
 8009014:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009018:	4632      	mov	r2, r6
 800901a:	e9cd 4500 	strd	r4, r5, [sp]
 800901e:	f000 fdf3 	bl	8009c08 <rcl_send_service_event_message>
 8009022:	2800      	cmp	r0, #0
 8009024:	d1d4      	bne.n	8008fd0 <rcl_send_request+0x3c>
 8009026:	2000      	movs	r0, #0
 8009028:	e7d2      	b.n	8008fd0 <rcl_send_request+0x3c>
 800902a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800902e:	4770      	bx	lr
 8009030:	f000 f878 	bl	8009124 <rcl_convert_rmw_ret_to_rcl_ret>
 8009034:	e7cc      	b.n	8008fd0 <rcl_send_request+0x3c>
 8009036:	bf00      	nop

08009038 <rcl_take_response>:
 8009038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800903a:	468e      	mov	lr, r1
 800903c:	460c      	mov	r4, r1
 800903e:	4617      	mov	r7, r2
 8009040:	4605      	mov	r5, r0
 8009042:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009046:	b095      	sub	sp, #84	@ 0x54
 8009048:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 800904c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009050:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8009054:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009058:	2d00      	cmp	r5, #0
 800905a:	d044      	beq.n	80090e6 <rcl_take_response+0xae>
 800905c:	682b      	ldr	r3, [r5, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d041      	beq.n	80090e6 <rcl_take_response+0xae>
 8009062:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8009066:	2800      	cmp	r0, #0
 8009068:	d03d      	beq.n	80090e6 <rcl_take_response+0xae>
 800906a:	2f00      	cmp	r7, #0
 800906c:	d03e      	beq.n	80090ec <rcl_take_response+0xb4>
 800906e:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 8009108 <rcl_take_response+0xd0>
 8009072:	2300      	movs	r3, #0
 8009074:	f88d 3013 	strb.w	r3, [sp, #19]
 8009078:	463a      	mov	r2, r7
 800907a:	f10d 0313 	add.w	r3, sp, #19
 800907e:	a90a      	add	r1, sp, #40	@ 0x28
 8009080:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009084:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009088:	f003 fed2 	bl	800ce30 <rmw_take_response>
 800908c:	4606      	mov	r6, r0
 800908e:	bb78      	cbnz	r0, 80090f0 <rcl_take_response+0xb8>
 8009090:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8009094:	b373      	cbz	r3, 80090f4 <rcl_take_response+0xbc>
 8009096:	682b      	ldr	r3, [r5, #0]
 8009098:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800909c:	b1aa      	cbz	r2, 80090ca <rcl_take_response+0x92>
 800909e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80090a2:	a905      	add	r1, sp, #20
 80090a4:	f003 f9e4 	bl	800c470 <rmw_get_gid_for_client>
 80090a8:	bb38      	cbnz	r0, 80090fa <rcl_take_response+0xc2>
 80090aa:	682b      	ldr	r3, [r5, #0]
 80090ac:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 80090b0:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 80090b4:	ab06      	add	r3, sp, #24
 80090b6:	ed8d 7b00 	vstr	d7, [sp]
 80090ba:	463a      	mov	r2, r7
 80090bc:	9302      	str	r3, [sp, #8]
 80090be:	2103      	movs	r1, #3
 80090c0:	f000 fda2 	bl	8009c08 <rcl_send_service_event_message>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	bf18      	it	ne
 80090c8:	4606      	movne	r6, r0
 80090ca:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 80090ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80090d2:	46a4      	mov	ip, r4
 80090d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80090d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80090dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80090e0:	4630      	mov	r0, r6
 80090e2:	b015      	add	sp, #84	@ 0x54
 80090e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090e6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80090ea:	e7ee      	b.n	80090ca <rcl_take_response+0x92>
 80090ec:	260b      	movs	r6, #11
 80090ee:	e7ec      	b.n	80090ca <rcl_take_response+0x92>
 80090f0:	2601      	movs	r6, #1
 80090f2:	e7ea      	b.n	80090ca <rcl_take_response+0x92>
 80090f4:	f240 16f5 	movw	r6, #501	@ 0x1f5
 80090f8:	e7e7      	b.n	80090ca <rcl_take_response+0x92>
 80090fa:	f000 f813 	bl	8009124 <rcl_convert_rmw_ret_to_rcl_ret>
 80090fe:	4606      	mov	r6, r0
 8009100:	e7e3      	b.n	80090ca <rcl_take_response+0x92>
 8009102:	bf00      	nop
 8009104:	f3af 8000 	nop.w
	...

08009110 <rcl_client_is_valid>:
 8009110:	b130      	cbz	r0, 8009120 <rcl_client_is_valid+0x10>
 8009112:	6800      	ldr	r0, [r0, #0]
 8009114:	b120      	cbz	r0, 8009120 <rcl_client_is_valid+0x10>
 8009116:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800911a:	3800      	subs	r0, #0
 800911c:	bf18      	it	ne
 800911e:	2001      	movne	r0, #1
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop

08009124 <rcl_convert_rmw_ret_to_rcl_ret>:
 8009124:	280b      	cmp	r0, #11
 8009126:	dc0d      	bgt.n	8009144 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8009128:	2800      	cmp	r0, #0
 800912a:	db09      	blt.n	8009140 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800912c:	280b      	cmp	r0, #11
 800912e:	d807      	bhi.n	8009140 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8009130:	e8df f000 	tbb	[pc, r0]
 8009134:	07060607 	.word	0x07060607
 8009138:	06060606 	.word	0x06060606
 800913c:	07070606 	.word	0x07070606
 8009140:	2001      	movs	r0, #1
 8009142:	4770      	bx	lr
 8009144:	28cb      	cmp	r0, #203	@ 0xcb
 8009146:	bf14      	ite	ne
 8009148:	2001      	movne	r0, #1
 800914a:	20cb      	moveq	r0, #203	@ 0xcb
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop

08009150 <rcl_get_zero_initialized_context>:
 8009150:	2200      	movs	r2, #0
 8009152:	e9c0 2200 	strd	r2, r2, [r0]
 8009156:	4770      	bx	lr

08009158 <rcl_context_is_valid>:
 8009158:	b118      	cbz	r0, 8009162 <rcl_context_is_valid+0xa>
 800915a:	6840      	ldr	r0, [r0, #4]
 800915c:	3800      	subs	r0, #0
 800915e:	bf18      	it	ne
 8009160:	2001      	movne	r0, #1
 8009162:	4770      	bx	lr

08009164 <__cleanup_context>:
 8009164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009168:	4606      	mov	r6, r0
 800916a:	6800      	ldr	r0, [r0, #0]
 800916c:	2300      	movs	r3, #0
 800916e:	6073      	str	r3, [r6, #4]
 8009170:	2800      	cmp	r0, #0
 8009172:	d042      	beq.n	80091fa <__cleanup_context+0x96>
 8009174:	6943      	ldr	r3, [r0, #20]
 8009176:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800917a:	6907      	ldr	r7, [r0, #16]
 800917c:	b39b      	cbz	r3, 80091e6 <__cleanup_context+0x82>
 800917e:	3014      	adds	r0, #20
 8009180:	f000 f9b2 	bl	80094e8 <rcl_init_options_fini>
 8009184:	4680      	mov	r8, r0
 8009186:	2800      	cmp	r0, #0
 8009188:	d144      	bne.n	8009214 <__cleanup_context+0xb0>
 800918a:	6830      	ldr	r0, [r6, #0]
 800918c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800918e:	b123      	cbz	r3, 800919a <__cleanup_context+0x36>
 8009190:	3028      	adds	r0, #40	@ 0x28
 8009192:	f003 fbb5 	bl	800c900 <rmw_context_fini>
 8009196:	bbb8      	cbnz	r0, 8009208 <__cleanup_context+0xa4>
 8009198:	6830      	ldr	r0, [r6, #0]
 800919a:	6a03      	ldr	r3, [r0, #32]
 800919c:	b1db      	cbz	r3, 80091d6 <__cleanup_context+0x72>
 800919e:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80091a2:	2a01      	cmp	r2, #1
 80091a4:	f17c 0100 	sbcs.w	r1, ip, #0
 80091a8:	db11      	blt.n	80091ce <__cleanup_context+0x6a>
 80091aa:	2400      	movs	r4, #0
 80091ac:	4625      	mov	r5, r4
 80091ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80091b2:	4639      	mov	r1, r7
 80091b4:	b1c8      	cbz	r0, 80091ea <__cleanup_context+0x86>
 80091b6:	47c8      	blx	r9
 80091b8:	6833      	ldr	r3, [r6, #0]
 80091ba:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80091be:	3401      	adds	r4, #1
 80091c0:	f145 0500 	adc.w	r5, r5, #0
 80091c4:	4294      	cmp	r4, r2
 80091c6:	eb75 010c 	sbcs.w	r1, r5, ip
 80091ca:	6a1b      	ldr	r3, [r3, #32]
 80091cc:	dbef      	blt.n	80091ae <__cleanup_context+0x4a>
 80091ce:	4618      	mov	r0, r3
 80091d0:	4639      	mov	r1, r7
 80091d2:	47c8      	blx	r9
 80091d4:	6830      	ldr	r0, [r6, #0]
 80091d6:	4639      	mov	r1, r7
 80091d8:	47c8      	blx	r9
 80091da:	2300      	movs	r3, #0
 80091dc:	e9c6 3300 	strd	r3, r3, [r6]
 80091e0:	4640      	mov	r0, r8
 80091e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091e6:	4698      	mov	r8, r3
 80091e8:	e7d0      	b.n	800918c <__cleanup_context+0x28>
 80091ea:	3401      	adds	r4, #1
 80091ec:	f145 0500 	adc.w	r5, r5, #0
 80091f0:	4294      	cmp	r4, r2
 80091f2:	eb75 010c 	sbcs.w	r1, r5, ip
 80091f6:	dbda      	blt.n	80091ae <__cleanup_context+0x4a>
 80091f8:	e7e9      	b.n	80091ce <__cleanup_context+0x6a>
 80091fa:	4680      	mov	r8, r0
 80091fc:	2300      	movs	r3, #0
 80091fe:	e9c6 3300 	strd	r3, r3, [r6]
 8009202:	4640      	mov	r0, r8
 8009204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009208:	f1b8 0f00 	cmp.w	r8, #0
 800920c:	d005      	beq.n	800921a <__cleanup_context+0xb6>
 800920e:	f7fe fd97 	bl	8007d40 <rcutils_reset_error>
 8009212:	e7c1      	b.n	8009198 <__cleanup_context+0x34>
 8009214:	f7fe fd94 	bl	8007d40 <rcutils_reset_error>
 8009218:	e7b7      	b.n	800918a <__cleanup_context+0x26>
 800921a:	f7ff ff83 	bl	8009124 <rcl_convert_rmw_ret_to_rcl_ret>
 800921e:	4680      	mov	r8, r0
 8009220:	e7f5      	b.n	800920e <__cleanup_context+0xaa>
 8009222:	bf00      	nop

08009224 <rcl_init>:
 8009224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009228:	1e04      	subs	r4, r0, #0
 800922a:	b0a5      	sub	sp, #148	@ 0x94
 800922c:	460d      	mov	r5, r1
 800922e:	4617      	mov	r7, r2
 8009230:	461e      	mov	r6, r3
 8009232:	dd13      	ble.n	800925c <rcl_init+0x38>
 8009234:	b161      	cbz	r1, 8009250 <rcl_init+0x2c>
 8009236:	f1a1 0e04 	sub.w	lr, r1, #4
 800923a:	f04f 0c00 	mov.w	ip, #0
 800923e:	e001      	b.n	8009244 <rcl_init+0x20>
 8009240:	4564      	cmp	r4, ip
 8009242:	d00d      	beq.n	8009260 <rcl_init+0x3c>
 8009244:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 8009248:	f10c 0c01 	add.w	ip, ip, #1
 800924c:	2800      	cmp	r0, #0
 800924e:	d1f7      	bne.n	8009240 <rcl_init+0x1c>
 8009250:	f04f 080b 	mov.w	r8, #11
 8009254:	4640      	mov	r0, r8
 8009256:	b025      	add	sp, #148	@ 0x94
 8009258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800925c:	2900      	cmp	r1, #0
 800925e:	d1f7      	bne.n	8009250 <rcl_init+0x2c>
 8009260:	2f00      	cmp	r7, #0
 8009262:	d0f5      	beq.n	8009250 <rcl_init+0x2c>
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0f2      	beq.n	8009250 <rcl_init+0x2c>
 800926a:	469c      	mov	ip, r3
 800926c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009270:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 8009274:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009278:	f8dc 3000 	ldr.w	r3, [ip]
 800927c:	f8ce 3000 	str.w	r3, [lr]
 8009280:	a81f      	add	r0, sp, #124	@ 0x7c
 8009282:	f7fe fd33 	bl	8007cec <rcutils_allocator_is_valid>
 8009286:	2800      	cmp	r0, #0
 8009288:	d0e2      	beq.n	8009250 <rcl_init+0x2c>
 800928a:	2e00      	cmp	r6, #0
 800928c:	d0e0      	beq.n	8009250 <rcl_init+0x2c>
 800928e:	6833      	ldr	r3, [r6, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d173      	bne.n	800937c <rcl_init+0x158>
 8009294:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 8009298:	2198      	movs	r1, #152	@ 0x98
 800929a:	2001      	movs	r0, #1
 800929c:	4798      	blx	r3
 800929e:	4680      	mov	r8, r0
 80092a0:	6030      	str	r0, [r6, #0]
 80092a2:	2800      	cmp	r0, #0
 80092a4:	f000 80ac 	beq.w	8009400 <rcl_init+0x1dc>
 80092a8:	a802      	add	r0, sp, #8
 80092aa:	f002 ff25 	bl	800c0f8 <rmw_get_zero_initialized_context>
 80092ae:	a902      	add	r1, sp, #8
 80092b0:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 80092b4:	2270      	movs	r2, #112	@ 0x70
 80092b6:	f00a fc38 	bl	8013b2a <memcpy>
 80092ba:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 80092be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80092c2:	f8d6 8000 	ldr.w	r8, [r6]
 80092c6:	46c4      	mov	ip, r8
 80092c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80092cc:	f8de 3000 	ldr.w	r3, [lr]
 80092d0:	f8cc 3000 	str.w	r3, [ip]
 80092d4:	f108 0114 	add.w	r1, r8, #20
 80092d8:	4638      	mov	r0, r7
 80092da:	f000 f92f 	bl	800953c <rcl_init_options_copy>
 80092de:	4680      	mov	r8, r0
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d147      	bne.n	8009374 <rcl_init+0x150>
 80092e4:	f8d6 9000 	ldr.w	r9, [r6]
 80092e8:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 80092ec:	f8c9 0020 	str.w	r0, [r9, #32]
 80092f0:	f8c9 4018 	str.w	r4, [r9, #24]
 80092f4:	f8c9 a01c 	str.w	sl, [r9, #28]
 80092f8:	2c00      	cmp	r4, #0
 80092fa:	d047      	beq.n	800938c <rcl_init+0x168>
 80092fc:	2d00      	cmp	r5, #0
 80092fe:	d045      	beq.n	800938c <rcl_init+0x168>
 8009300:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 8009304:	2104      	movs	r1, #4
 8009306:	4620      	mov	r0, r4
 8009308:	4798      	blx	r3
 800930a:	f8c9 0020 	str.w	r0, [r9, #32]
 800930e:	f8d6 9000 	ldr.w	r9, [r6]
 8009312:	f8d9 b020 	ldr.w	fp, [r9, #32]
 8009316:	f1bb 0f00 	cmp.w	fp, #0
 800931a:	d029      	beq.n	8009370 <rcl_init+0x14c>
 800931c:	2c01      	cmp	r4, #1
 800931e:	f17a 0300 	sbcs.w	r3, sl, #0
 8009322:	db33      	blt.n	800938c <rcl_init+0x168>
 8009324:	f04f 0800 	mov.w	r8, #0
 8009328:	3d04      	subs	r5, #4
 800932a:	46c1      	mov	r9, r8
 800932c:	e00d      	b.n	800934a <rcl_init+0x126>
 800932e:	6829      	ldr	r1, [r5, #0]
 8009330:	f00a fbfb 	bl	8013b2a <memcpy>
 8009334:	f118 0801 	adds.w	r8, r8, #1
 8009338:	f149 0900 	adc.w	r9, r9, #0
 800933c:	45ca      	cmp	sl, r9
 800933e:	bf08      	it	eq
 8009340:	4544      	cmpeq	r4, r8
 8009342:	d021      	beq.n	8009388 <rcl_init+0x164>
 8009344:	6833      	ldr	r3, [r6, #0]
 8009346:	f8d3 b020 	ldr.w	fp, [r3, #32]
 800934a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800934e:	f7f6 ffa7 	bl	80002a0 <strlen>
 8009352:	1c42      	adds	r2, r0, #1
 8009354:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009356:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8009358:	9201      	str	r2, [sp, #4]
 800935a:	4610      	mov	r0, r2
 800935c:	4798      	blx	r3
 800935e:	6833      	ldr	r3, [r6, #0]
 8009360:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 8009364:	6a1b      	ldr	r3, [r3, #32]
 8009366:	9a01      	ldr	r2, [sp, #4]
 8009368:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800936c:	2800      	cmp	r0, #0
 800936e:	d1de      	bne.n	800932e <rcl_init+0x10a>
 8009370:	f04f 080a 	mov.w	r8, #10
 8009374:	4630      	mov	r0, r6
 8009376:	f7ff fef5 	bl	8009164 <__cleanup_context>
 800937a:	e76b      	b.n	8009254 <rcl_init+0x30>
 800937c:	f04f 0864 	mov.w	r8, #100	@ 0x64
 8009380:	4640      	mov	r0, r8
 8009382:	b025      	add	sp, #148	@ 0x94
 8009384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009388:	f8d6 9000 	ldr.w	r9, [r6]
 800938c:	4a26      	ldr	r2, [pc, #152]	@ (8009428 <rcl_init+0x204>)
 800938e:	6813      	ldr	r3, [r2, #0]
 8009390:	3301      	adds	r3, #1
 8009392:	d030      	beq.n	80093f6 <rcl_init+0x1d2>
 8009394:	461d      	mov	r5, r3
 8009396:	2000      	movs	r0, #0
 8009398:	4619      	mov	r1, r3
 800939a:	f8d9 4014 	ldr.w	r4, [r9, #20]
 800939e:	6073      	str	r3, [r6, #4]
 80093a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80093a2:	6011      	str	r1, [r2, #0]
 80093a4:	3301      	adds	r3, #1
 80093a6:	e9c4 5006 	strd	r5, r0, [r4, #24]
 80093aa:	d033      	beq.n	8009414 <rcl_init+0x1f0>
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80093b2:	f104 0530 	add.w	r5, r4, #48	@ 0x30
 80093b6:	b333      	cbz	r3, 8009406 <rcl_init+0x1e2>
 80093b8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80093ba:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 80093be:	b953      	cbnz	r3, 80093d6 <rcl_init+0x1b2>
 80093c0:	2801      	cmp	r0, #1
 80093c2:	d008      	beq.n	80093d6 <rcl_init+0x1b2>
 80093c4:	a91f      	add	r1, sp, #124	@ 0x7c
 80093c6:	4628      	mov	r0, r5
 80093c8:	f008 f814 	bl	80113f4 <rcl_get_discovery_static_peers>
 80093cc:	4680      	mov	r8, r0
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d1d0      	bne.n	8009374 <rcl_init+0x150>
 80093d2:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 80093d6:	f008 f803 	bl	80113e0 <rcl_automatic_discovery_range_to_string>
 80093da:	6831      	ldr	r1, [r6, #0]
 80093dc:	6948      	ldr	r0, [r1, #20]
 80093de:	3128      	adds	r1, #40	@ 0x28
 80093e0:	3018      	adds	r0, #24
 80093e2:	f003 f959 	bl	800c698 <rmw_init>
 80093e6:	4680      	mov	r8, r0
 80093e8:	2800      	cmp	r0, #0
 80093ea:	f43f af33 	beq.w	8009254 <rcl_init+0x30>
 80093ee:	f7ff fe99 	bl	8009124 <rcl_convert_rmw_ret_to_rcl_ret>
 80093f2:	4680      	mov	r8, r0
 80093f4:	e7be      	b.n	8009374 <rcl_init+0x150>
 80093f6:	2101      	movs	r1, #1
 80093f8:	4618      	mov	r0, r3
 80093fa:	460d      	mov	r5, r1
 80093fc:	460b      	mov	r3, r1
 80093fe:	e7cc      	b.n	800939a <rcl_init+0x176>
 8009400:	f04f 080a 	mov.w	r8, #10
 8009404:	e726      	b.n	8009254 <rcl_init+0x30>
 8009406:	4628      	mov	r0, r5
 8009408:	f007 ffa8 	bl	801135c <rcl_get_automatic_discovery_range>
 800940c:	4680      	mov	r8, r0
 800940e:	2800      	cmp	r0, #0
 8009410:	d0d2      	beq.n	80093b8 <rcl_init+0x194>
 8009412:	e7af      	b.n	8009374 <rcl_init+0x150>
 8009414:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009418:	f008 f856 	bl	80114c8 <rcl_get_default_domain_id>
 800941c:	4680      	mov	r8, r0
 800941e:	2800      	cmp	r0, #0
 8009420:	d1a8      	bne.n	8009374 <rcl_init+0x150>
 8009422:	6833      	ldr	r3, [r6, #0]
 8009424:	695c      	ldr	r4, [r3, #20]
 8009426:	e7c1      	b.n	80093ac <rcl_init+0x188>
 8009428:	200091b4 	.word	0x200091b4

0800942c <rcl_get_zero_initialized_init_options>:
 800942c:	2000      	movs	r0, #0
 800942e:	4770      	bx	lr

08009430 <rcl_init_options_init>:
 8009430:	b084      	sub	sp, #16
 8009432:	b570      	push	{r4, r5, r6, lr}
 8009434:	b09e      	sub	sp, #120	@ 0x78
 8009436:	ad23      	add	r5, sp, #140	@ 0x8c
 8009438:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800943c:	2800      	cmp	r0, #0
 800943e:	d046      	beq.n	80094ce <rcl_init_options_init+0x9e>
 8009440:	6803      	ldr	r3, [r0, #0]
 8009442:	4604      	mov	r4, r0
 8009444:	b133      	cbz	r3, 8009454 <rcl_init_options_init+0x24>
 8009446:	2564      	movs	r5, #100	@ 0x64
 8009448:	4628      	mov	r0, r5
 800944a:	b01e      	add	sp, #120	@ 0x78
 800944c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009450:	b004      	add	sp, #16
 8009452:	4770      	bx	lr
 8009454:	4628      	mov	r0, r5
 8009456:	f7fe fc49 	bl	8007cec <rcutils_allocator_is_valid>
 800945a:	2800      	cmp	r0, #0
 800945c:	d037      	beq.n	80094ce <rcl_init_options_init+0x9e>
 800945e:	46ae      	mov	lr, r5
 8009460:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009464:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8009468:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800946c:	f8de 3000 	ldr.w	r3, [lr]
 8009470:	f8cc 3000 	str.w	r3, [ip]
 8009474:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8009476:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009478:	2070      	movs	r0, #112	@ 0x70
 800947a:	4798      	blx	r3
 800947c:	4606      	mov	r6, r0
 800947e:	6020      	str	r0, [r4, #0]
 8009480:	b338      	cbz	r0, 80094d2 <rcl_init_options_init+0xa2>
 8009482:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8009486:	4686      	mov	lr, r0
 8009488:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800948c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009490:	f8dc 3000 	ldr.w	r3, [ip]
 8009494:	f8ce 3000 	str.w	r3, [lr]
 8009498:	a802      	add	r0, sp, #8
 800949a:	f002 fe37 	bl	800c10c <rmw_get_zero_initialized_init_options>
 800949e:	2258      	movs	r2, #88	@ 0x58
 80094a0:	a902      	add	r1, sp, #8
 80094a2:	f106 0018 	add.w	r0, r6, #24
 80094a6:	f00a fb40 	bl	8013b2a <memcpy>
 80094aa:	ab26      	add	r3, sp, #152	@ 0x98
 80094ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80094b0:	6826      	ldr	r6, [r4, #0]
 80094b2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80094b6:	f106 0018 	add.w	r0, r6, #24
 80094ba:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80094be:	f002 fffb 	bl	800c4b8 <rmw_init_options_init>
 80094c2:	4605      	mov	r5, r0
 80094c4:	b938      	cbnz	r0, 80094d6 <rcl_init_options_init+0xa6>
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	f883 0030 	strb.w	r0, [r3, #48]	@ 0x30
 80094cc:	e7bc      	b.n	8009448 <rcl_init_options_init+0x18>
 80094ce:	250b      	movs	r5, #11
 80094d0:	e7ba      	b.n	8009448 <rcl_init_options_init+0x18>
 80094d2:	250a      	movs	r5, #10
 80094d4:	e7b8      	b.n	8009448 <rcl_init_options_init+0x18>
 80094d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80094d8:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 80094da:	6820      	ldr	r0, [r4, #0]
 80094dc:	4798      	blx	r3
 80094de:	4628      	mov	r0, r5
 80094e0:	f7ff fe20 	bl	8009124 <rcl_convert_rmw_ret_to_rcl_ret>
 80094e4:	4605      	mov	r5, r0
 80094e6:	e7af      	b.n	8009448 <rcl_init_options_init+0x18>

080094e8 <rcl_init_options_fini>:
 80094e8:	b530      	push	{r4, r5, lr}
 80094ea:	b087      	sub	sp, #28
 80094ec:	b1f0      	cbz	r0, 800952c <rcl_init_options_fini+0x44>
 80094ee:	6803      	ldr	r3, [r0, #0]
 80094f0:	4604      	mov	r4, r0
 80094f2:	b1db      	cbz	r3, 800952c <rcl_init_options_fini+0x44>
 80094f4:	469c      	mov	ip, r3
 80094f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80094fa:	f10d 0e04 	add.w	lr, sp, #4
 80094fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009502:	f8dc 3000 	ldr.w	r3, [ip]
 8009506:	f8ce 3000 	str.w	r3, [lr]
 800950a:	a801      	add	r0, sp, #4
 800950c:	f7fe fbee 	bl	8007cec <rcutils_allocator_is_valid>
 8009510:	b160      	cbz	r0, 800952c <rcl_init_options_fini+0x44>
 8009512:	6820      	ldr	r0, [r4, #0]
 8009514:	3018      	adds	r0, #24
 8009516:	f003 f881 	bl	800c61c <rmw_init_options_fini>
 800951a:	4605      	mov	r5, r0
 800951c:	b950      	cbnz	r0, 8009534 <rcl_init_options_fini+0x4c>
 800951e:	6820      	ldr	r0, [r4, #0]
 8009520:	9b02      	ldr	r3, [sp, #8]
 8009522:	9905      	ldr	r1, [sp, #20]
 8009524:	4798      	blx	r3
 8009526:	4628      	mov	r0, r5
 8009528:	b007      	add	sp, #28
 800952a:	bd30      	pop	{r4, r5, pc}
 800952c:	250b      	movs	r5, #11
 800952e:	4628      	mov	r0, r5
 8009530:	b007      	add	sp, #28
 8009532:	bd30      	pop	{r4, r5, pc}
 8009534:	f7ff fdf6 	bl	8009124 <rcl_convert_rmw_ret_to_rcl_ret>
 8009538:	4605      	mov	r5, r0
 800953a:	e7f8      	b.n	800952e <rcl_init_options_fini+0x46>

0800953c <rcl_init_options_copy>:
 800953c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800953e:	b09d      	sub	sp, #116	@ 0x74
 8009540:	2800      	cmp	r0, #0
 8009542:	d04a      	beq.n	80095da <rcl_init_options_copy+0x9e>
 8009544:	4604      	mov	r4, r0
 8009546:	6800      	ldr	r0, [r0, #0]
 8009548:	2800      	cmp	r0, #0
 800954a:	d046      	beq.n	80095da <rcl_init_options_copy+0x9e>
 800954c:	460d      	mov	r5, r1
 800954e:	f7fe fbcd 	bl	8007cec <rcutils_allocator_is_valid>
 8009552:	2800      	cmp	r0, #0
 8009554:	d041      	beq.n	80095da <rcl_init_options_copy+0x9e>
 8009556:	2d00      	cmp	r5, #0
 8009558:	d03f      	beq.n	80095da <rcl_init_options_copy+0x9e>
 800955a:	682b      	ldr	r3, [r5, #0]
 800955c:	b11b      	cbz	r3, 8009566 <rcl_init_options_copy+0x2a>
 800955e:	2464      	movs	r4, #100	@ 0x64
 8009560:	4620      	mov	r0, r4
 8009562:	b01d      	add	sp, #116	@ 0x74
 8009564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009566:	6826      	ldr	r6, [r4, #0]
 8009568:	46b6      	mov	lr, r6
 800956a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800956e:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8009572:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009576:	f8de 3000 	ldr.w	r3, [lr]
 800957a:	6837      	ldr	r7, [r6, #0]
 800957c:	f8cc 3000 	str.w	r3, [ip]
 8009580:	4619      	mov	r1, r3
 8009582:	2070      	movs	r0, #112	@ 0x70
 8009584:	47b8      	blx	r7
 8009586:	4606      	mov	r6, r0
 8009588:	6028      	str	r0, [r5, #0]
 800958a:	b350      	cbz	r0, 80095e2 <rcl_init_options_copy+0xa6>
 800958c:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8009590:	4686      	mov	lr, r0
 8009592:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009596:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800959a:	f8dc 3000 	ldr.w	r3, [ip]
 800959e:	f8ce 3000 	str.w	r3, [lr]
 80095a2:	4668      	mov	r0, sp
 80095a4:	f002 fdb2 	bl	800c10c <rmw_get_zero_initialized_init_options>
 80095a8:	2258      	movs	r2, #88	@ 0x58
 80095aa:	4669      	mov	r1, sp
 80095ac:	f106 0018 	add.w	r0, r6, #24
 80095b0:	f00a fabb 	bl	8013b2a <memcpy>
 80095b4:	6820      	ldr	r0, [r4, #0]
 80095b6:	6829      	ldr	r1, [r5, #0]
 80095b8:	3018      	adds	r0, #24
 80095ba:	3118      	adds	r1, #24
 80095bc:	f002 ffde 	bl	800c57c <rmw_init_options_copy>
 80095c0:	4604      	mov	r4, r0
 80095c2:	2800      	cmp	r0, #0
 80095c4:	d0cc      	beq.n	8009560 <rcl_init_options_copy+0x24>
 80095c6:	f7fe fba5 	bl	8007d14 <rcutils_get_error_string>
 80095ca:	f7fe fbb9 	bl	8007d40 <rcutils_reset_error>
 80095ce:	4628      	mov	r0, r5
 80095d0:	f7ff ff8a 	bl	80094e8 <rcl_init_options_fini>
 80095d4:	b138      	cbz	r0, 80095e6 <rcl_init_options_copy+0xaa>
 80095d6:	4604      	mov	r4, r0
 80095d8:	e7c2      	b.n	8009560 <rcl_init_options_copy+0x24>
 80095da:	240b      	movs	r4, #11
 80095dc:	4620      	mov	r0, r4
 80095de:	b01d      	add	sp, #116	@ 0x74
 80095e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095e2:	240a      	movs	r4, #10
 80095e4:	e7bc      	b.n	8009560 <rcl_init_options_copy+0x24>
 80095e6:	4620      	mov	r0, r4
 80095e8:	b01d      	add	sp, #116	@ 0x74
 80095ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80095ee:	f7ff bd99 	b.w	8009124 <rcl_convert_rmw_ret_to_rcl_ret>
 80095f2:	bf00      	nop

080095f4 <rcl_get_zero_initialized_node>:
 80095f4:	4a03      	ldr	r2, [pc, #12]	@ (8009604 <rcl_get_zero_initialized_node+0x10>)
 80095f6:	4603      	mov	r3, r0
 80095f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80095fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8009600:	4618      	mov	r0, r3
 8009602:	4770      	bx	lr
 8009604:	08015120 	.word	0x08015120

08009608 <rcl_node_init>:
 8009608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960c:	b0ab      	sub	sp, #172	@ 0xac
 800960e:	4604      	mov	r4, r0
 8009610:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 8009612:	a825      	add	r0, sp, #148	@ 0x94
 8009614:	4689      	mov	r9, r1
 8009616:	4690      	mov	r8, r2
 8009618:	461f      	mov	r7, r3
 800961a:	f008 f97b 	bl	8011914 <rcl_guard_condition_get_default_options>
 800961e:	2d00      	cmp	r5, #0
 8009620:	f000 80d8 	beq.w	80097d4 <rcl_node_init+0x1cc>
 8009624:	4628      	mov	r0, r5
 8009626:	f7fe fb61 	bl	8007cec <rcutils_allocator_is_valid>
 800962a:	2800      	cmp	r0, #0
 800962c:	f000 80d2 	beq.w	80097d4 <rcl_node_init+0x1cc>
 8009630:	f1b9 0f00 	cmp.w	r9, #0
 8009634:	f000 80ce 	beq.w	80097d4 <rcl_node_init+0x1cc>
 8009638:	f1b8 0f00 	cmp.w	r8, #0
 800963c:	f000 80ca 	beq.w	80097d4 <rcl_node_init+0x1cc>
 8009640:	2c00      	cmp	r4, #0
 8009642:	f000 80c7 	beq.w	80097d4 <rcl_node_init+0x1cc>
 8009646:	6866      	ldr	r6, [r4, #4]
 8009648:	2e00      	cmp	r6, #0
 800964a:	f040 80ca 	bne.w	80097e2 <rcl_node_init+0x1da>
 800964e:	2f00      	cmp	r7, #0
 8009650:	f000 80c0 	beq.w	80097d4 <rcl_node_init+0x1cc>
 8009654:	4638      	mov	r0, r7
 8009656:	f7ff fd7f 	bl	8009158 <rcl_context_is_valid>
 800965a:	2800      	cmp	r0, #0
 800965c:	f000 80bf 	beq.w	80097de <rcl_node_init+0x1d6>
 8009660:	4632      	mov	r2, r6
 8009662:	a924      	add	r1, sp, #144	@ 0x90
 8009664:	4648      	mov	r0, r9
 8009666:	9624      	str	r6, [sp, #144]	@ 0x90
 8009668:	f002 fe66 	bl	800c338 <rmw_validate_node_name>
 800966c:	4606      	mov	r6, r0
 800966e:	2800      	cmp	r0, #0
 8009670:	f040 80b1 	bne.w	80097d6 <rcl_node_init+0x1ce>
 8009674:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8009676:	2800      	cmp	r0, #0
 8009678:	f040 8104 	bne.w	8009884 <rcl_node_init+0x27c>
 800967c:	f898 3000 	ldrb.w	r3, [r8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	f000 80f0 	beq.w	8009866 <rcl_node_init+0x25e>
 8009686:	2b2f      	cmp	r3, #47	@ 0x2f
 8009688:	f000 80b0 	beq.w	80097ec <rcl_node_init+0x1e4>
 800968c:	4b85      	ldr	r3, [pc, #532]	@ (80098a4 <rcl_node_init+0x29c>)
 800968e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009692:	9302      	str	r3, [sp, #8]
 8009694:	692b      	ldr	r3, [r5, #16]
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800969c:	9301      	str	r3, [sp, #4]
 800969e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80096a2:	f002 fa8f 	bl	800bbc4 <rcutils_format_string_limit>
 80096a6:	4680      	mov	r8, r0
 80096a8:	f1b8 0f00 	cmp.w	r8, #0
 80096ac:	f000 80e8 	beq.w	8009880 <rcl_node_init+0x278>
 80096b0:	2200      	movs	r2, #0
 80096b2:	a924      	add	r1, sp, #144	@ 0x90
 80096b4:	4640      	mov	r0, r8
 80096b6:	9224      	str	r2, [sp, #144]	@ 0x90
 80096b8:	f002 fe20 	bl	800c2fc <rmw_validate_namespace>
 80096bc:	4606      	mov	r6, r0
 80096be:	2800      	cmp	r0, #0
 80096c0:	f040 80a4 	bne.w	800980c <rcl_node_init+0x204>
 80096c4:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80096c6:	2800      	cmp	r0, #0
 80096c8:	f040 809d 	bne.w	8009806 <rcl_node_init+0x1fe>
 80096cc:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 80096d0:	2178      	movs	r1, #120	@ 0x78
 80096d2:	2001      	movs	r0, #1
 80096d4:	4798      	blx	r3
 80096d6:	4606      	mov	r6, r0
 80096d8:	6060      	str	r0, [r4, #4]
 80096da:	2800      	cmp	r0, #0
 80096dc:	f000 80d6 	beq.w	800988c <rcl_node_init+0x284>
 80096e0:	a80a      	add	r0, sp, #40	@ 0x28
 80096e2:	f000 f90f 	bl	8009904 <rcl_node_get_default_options>
 80096e6:	a90a      	add	r1, sp, #40	@ 0x28
 80096e8:	4630      	mov	r0, r6
 80096ea:	2268      	movs	r2, #104	@ 0x68
 80096ec:	f00a fa1d 	bl	8013b2a <memcpy>
 80096f0:	6861      	ldr	r1, [r4, #4]
 80096f2:	6027      	str	r7, [r4, #0]
 80096f4:	4628      	mov	r0, r5
 80096f6:	f000 f913 	bl	8009920 <rcl_node_options_copy>
 80096fa:	4606      	mov	r6, r0
 80096fc:	2800      	cmp	r0, #0
 80096fe:	f040 8085 	bne.w	800980c <rcl_node_init+0x204>
 8009702:	4640      	mov	r0, r8
 8009704:	f7f6 fdcc 	bl	80002a0 <strlen>
 8009708:	eb08 0300 	add.w	r3, r8, r0
 800970c:	6866      	ldr	r6, [r4, #4]
 800970e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009712:	e9cd 8903 	strd	r8, r9, [sp, #12]
 8009716:	2b2f      	cmp	r3, #47	@ 0x2f
 8009718:	bf0c      	ite	eq
 800971a:	4b63      	ldreq	r3, [pc, #396]	@ (80098a8 <rcl_node_init+0x2a0>)
 800971c:	4b63      	ldrne	r3, [pc, #396]	@ (80098ac <rcl_node_init+0x2a4>)
 800971e:	9302      	str	r3, [sp, #8]
 8009720:	692b      	ldr	r3, [r5, #16]
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009728:	9301      	str	r3, [sp, #4]
 800972a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800972e:	f002 fa49 	bl	800bbc4 <rcutils_format_string_limit>
 8009732:	6863      	ldr	r3, [r4, #4]
 8009734:	6770      	str	r0, [r6, #116]	@ 0x74
 8009736:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009738:	2a00      	cmp	r2, #0
 800973a:	f000 80a9 	beq.w	8009890 <rcl_node_init+0x288>
 800973e:	6822      	ldr	r2, [r4, #0]
 8009740:	9307      	str	r3, [sp, #28]
 8009742:	6810      	ldr	r0, [r2, #0]
 8009744:	4649      	mov	r1, r9
 8009746:	3028      	adds	r0, #40	@ 0x28
 8009748:	4642      	mov	r2, r8
 800974a:	f003 f987 	bl	800ca5c <rmw_create_node>
 800974e:	9b07      	ldr	r3, [sp, #28]
 8009750:	6698      	str	r0, [r3, #104]	@ 0x68
 8009752:	6863      	ldr	r3, [r4, #4]
 8009754:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8009756:	2800      	cmp	r0, #0
 8009758:	f000 809d 	beq.w	8009896 <rcl_node_init+0x28e>
 800975c:	f003 fa10 	bl	800cb80 <rmw_node_get_graph_guard_condition>
 8009760:	4681      	mov	r9, r0
 8009762:	2800      	cmp	r0, #0
 8009764:	f000 809c 	beq.w	80098a0 <rcl_node_init+0x298>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	6929      	ldr	r1, [r5, #16]
 800976c:	6866      	ldr	r6, [r4, #4]
 800976e:	2008      	movs	r0, #8
 8009770:	4798      	blx	r3
 8009772:	6863      	ldr	r3, [r4, #4]
 8009774:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8009776:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 800977a:	f1ba 0f00 	cmp.w	sl, #0
 800977e:	f000 808d 	beq.w	800989c <rcl_node_init+0x294>
 8009782:	f10d 0b20 	add.w	fp, sp, #32
 8009786:	4658      	mov	r0, fp
 8009788:	f008 f838 	bl	80117fc <rcl_get_zero_initialized_guard_condition>
 800978c:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8009790:	6863      	ldr	r3, [r4, #4]
 8009792:	46ac      	mov	ip, r5
 8009794:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8009798:	e88a 0003 	stmia.w	sl, {r0, r1}
 800979c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80097a0:	ae25      	add	r6, sp, #148	@ 0x94
 80097a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80097a4:	f8dc 3000 	ldr.w	r3, [ip]
 80097a8:	6033      	str	r3, [r6, #0]
 80097aa:	ab2a      	add	r3, sp, #168	@ 0xa8
 80097ac:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80097b0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80097b4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80097b6:	463a      	mov	r2, r7
 80097b8:	4649      	mov	r1, r9
 80097ba:	4670      	mov	r0, lr
 80097bc:	f008 f828 	bl	8011810 <rcl_guard_condition_init_from_rmw>
 80097c0:	4606      	mov	r6, r0
 80097c2:	bb18      	cbnz	r0, 800980c <rcl_node_init+0x204>
 80097c4:	686b      	ldr	r3, [r5, #4]
 80097c6:	6929      	ldr	r1, [r5, #16]
 80097c8:	4798      	blx	r3
 80097ca:	686b      	ldr	r3, [r5, #4]
 80097cc:	6929      	ldr	r1, [r5, #16]
 80097ce:	4640      	mov	r0, r8
 80097d0:	4798      	blx	r3
 80097d2:	e000      	b.n	80097d6 <rcl_node_init+0x1ce>
 80097d4:	260b      	movs	r6, #11
 80097d6:	4630      	mov	r0, r6
 80097d8:	b02b      	add	sp, #172	@ 0xac
 80097da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097de:	2665      	movs	r6, #101	@ 0x65
 80097e0:	e7f9      	b.n	80097d6 <rcl_node_init+0x1ce>
 80097e2:	2664      	movs	r6, #100	@ 0x64
 80097e4:	4630      	mov	r0, r6
 80097e6:	b02b      	add	sp, #172	@ 0xac
 80097e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ec:	f105 030c 	add.w	r3, r5, #12
 80097f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80097f4:	e88d 0003 	stmia.w	sp, {r0, r1}
 80097f8:	4640      	mov	r0, r8
 80097fa:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80097fe:	f002 faff 	bl	800be00 <rcutils_strdup>
 8009802:	4680      	mov	r8, r0
 8009804:	e750      	b.n	80096a8 <rcl_node_init+0xa0>
 8009806:	f002 fd8b 	bl	800c320 <rmw_namespace_validation_result_string>
 800980a:	26ca      	movs	r6, #202	@ 0xca
 800980c:	6863      	ldr	r3, [r4, #4]
 800980e:	b1f3      	cbz	r3, 800984e <rcl_node_init+0x246>
 8009810:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8009812:	b138      	cbz	r0, 8009824 <rcl_node_init+0x21c>
 8009814:	f008 f85c 	bl	80118d0 <rcl_guard_condition_fini>
 8009818:	6863      	ldr	r3, [r4, #4]
 800981a:	6929      	ldr	r1, [r5, #16]
 800981c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800981e:	686b      	ldr	r3, [r5, #4]
 8009820:	4798      	blx	r3
 8009822:	6863      	ldr	r3, [r4, #4]
 8009824:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8009826:	b110      	cbz	r0, 800982e <rcl_node_init+0x226>
 8009828:	f003 f92e 	bl	800ca88 <rmw_destroy_node>
 800982c:	6863      	ldr	r3, [r4, #4]
 800982e:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8009830:	6929      	ldr	r1, [r5, #16]
 8009832:	686b      	ldr	r3, [r5, #4]
 8009834:	4798      	blx	r3
 8009836:	6863      	ldr	r3, [r4, #4]
 8009838:	6929      	ldr	r1, [r5, #16]
 800983a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800983c:	686b      	ldr	r3, [r5, #4]
 800983e:	4798      	blx	r3
 8009840:	6860      	ldr	r0, [r4, #4]
 8009842:	f000 f88b 	bl	800995c <rcl_node_options_fini>
 8009846:	686b      	ldr	r3, [r5, #4]
 8009848:	6929      	ldr	r1, [r5, #16]
 800984a:	6860      	ldr	r0, [r4, #4]
 800984c:	4798      	blx	r3
 800984e:	686b      	ldr	r3, [r5, #4]
 8009850:	6929      	ldr	r1, [r5, #16]
 8009852:	2000      	movs	r0, #0
 8009854:	4798      	blx	r3
 8009856:	686b      	ldr	r3, [r5, #4]
 8009858:	6929      	ldr	r1, [r5, #16]
 800985a:	4640      	mov	r0, r8
 800985c:	4798      	blx	r3
 800985e:	2300      	movs	r3, #0
 8009860:	e9c4 3300 	strd	r3, r3, [r4]
 8009864:	e7b7      	b.n	80097d6 <rcl_node_init+0x1ce>
 8009866:	f105 030c 	add.w	r3, r5, #12
 800986a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800986e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009872:	480f      	ldr	r0, [pc, #60]	@ (80098b0 <rcl_node_init+0x2a8>)
 8009874:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8009878:	f002 fac2 	bl	800be00 <rcutils_strdup>
 800987c:	4680      	mov	r8, r0
 800987e:	e713      	b.n	80096a8 <rcl_node_init+0xa0>
 8009880:	260a      	movs	r6, #10
 8009882:	e7a8      	b.n	80097d6 <rcl_node_init+0x1ce>
 8009884:	f002 fda4 	bl	800c3d0 <rmw_node_name_validation_result_string>
 8009888:	26c9      	movs	r6, #201	@ 0xc9
 800988a:	e7a4      	b.n	80097d6 <rcl_node_init+0x1ce>
 800988c:	260a      	movs	r6, #10
 800988e:	e7de      	b.n	800984e <rcl_node_init+0x246>
 8009890:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8009892:	260a      	movs	r6, #10
 8009894:	e7bd      	b.n	8009812 <rcl_node_init+0x20a>
 8009896:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8009898:	2601      	movs	r6, #1
 800989a:	e7ba      	b.n	8009812 <rcl_node_init+0x20a>
 800989c:	260a      	movs	r6, #10
 800989e:	e7c1      	b.n	8009824 <rcl_node_init+0x21c>
 80098a0:	2601      	movs	r6, #1
 80098a2:	e7b3      	b.n	800980c <rcl_node_init+0x204>
 80098a4:	08014c04 	.word	0x08014c04
 80098a8:	08014c08 	.word	0x08014c08
 80098ac:	08014c10 	.word	0x08014c10
 80098b0:	08014c00 	.word	0x08014c00

080098b4 <rcl_node_is_valid>:
 80098b4:	b130      	cbz	r0, 80098c4 <rcl_node_is_valid+0x10>
 80098b6:	6843      	ldr	r3, [r0, #4]
 80098b8:	b123      	cbz	r3, 80098c4 <rcl_node_is_valid+0x10>
 80098ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098bc:	b113      	cbz	r3, 80098c4 <rcl_node_is_valid+0x10>
 80098be:	6800      	ldr	r0, [r0, #0]
 80098c0:	f7ff bc4a 	b.w	8009158 <rcl_context_is_valid>
 80098c4:	2000      	movs	r0, #0
 80098c6:	4770      	bx	lr

080098c8 <rcl_node_get_name>:
 80098c8:	b120      	cbz	r0, 80098d4 <rcl_node_get_name+0xc>
 80098ca:	6840      	ldr	r0, [r0, #4]
 80098cc:	b110      	cbz	r0, 80098d4 <rcl_node_get_name+0xc>
 80098ce:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80098d0:	b100      	cbz	r0, 80098d4 <rcl_node_get_name+0xc>
 80098d2:	6880      	ldr	r0, [r0, #8]
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop

080098d8 <rcl_node_get_namespace>:
 80098d8:	b120      	cbz	r0, 80098e4 <rcl_node_get_namespace+0xc>
 80098da:	6840      	ldr	r0, [r0, #4]
 80098dc:	b110      	cbz	r0, 80098e4 <rcl_node_get_namespace+0xc>
 80098de:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80098e0:	b100      	cbz	r0, 80098e4 <rcl_node_get_namespace+0xc>
 80098e2:	68c0      	ldr	r0, [r0, #12]
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop

080098e8 <rcl_node_get_options>:
 80098e8:	b128      	cbz	r0, 80098f6 <rcl_node_get_options+0xe>
 80098ea:	6840      	ldr	r0, [r0, #4]
 80098ec:	b118      	cbz	r0, 80098f6 <rcl_node_get_options+0xe>
 80098ee:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	bf08      	it	eq
 80098f4:	2000      	moveq	r0, #0
 80098f6:	4770      	bx	lr

080098f8 <rcl_node_get_rmw_handle>:
 80098f8:	b110      	cbz	r0, 8009900 <rcl_node_get_rmw_handle+0x8>
 80098fa:	6840      	ldr	r0, [r0, #4]
 80098fc:	b100      	cbz	r0, 8009900 <rcl_node_get_rmw_handle+0x8>
 80098fe:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop

08009904 <rcl_node_get_default_options>:
 8009904:	b510      	push	{r4, lr}
 8009906:	2253      	movs	r2, #83	@ 0x53
 8009908:	4604      	mov	r4, r0
 800990a:	2100      	movs	r1, #0
 800990c:	3015      	adds	r0, #21
 800990e:	f00a f831 	bl	8013974 <memset>
 8009912:	4620      	mov	r0, r4
 8009914:	f7fe f9be 	bl	8007c94 <rcutils_get_default_allocator>
 8009918:	2301      	movs	r3, #1
 800991a:	7523      	strb	r3, [r4, #20]
 800991c:	4620      	mov	r0, r4
 800991e:	bd10      	pop	{r4, pc}

08009920 <rcl_node_options_copy>:
 8009920:	b1d0      	cbz	r0, 8009958 <rcl_node_options_copy+0x38>
 8009922:	b570      	push	{r4, r5, r6, lr}
 8009924:	460c      	mov	r4, r1
 8009926:	b1a9      	cbz	r1, 8009954 <rcl_node_options_copy+0x34>
 8009928:	4288      	cmp	r0, r1
 800992a:	4684      	mov	ip, r0
 800992c:	d012      	beq.n	8009954 <rcl_node_options_copy+0x34>
 800992e:	4605      	mov	r5, r0
 8009930:	8a86      	ldrh	r6, [r0, #20]
 8009932:	468e      	mov	lr, r1
 8009934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009936:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800993a:	682b      	ldr	r3, [r5, #0]
 800993c:	f8ce 3000 	str.w	r3, [lr]
 8009940:	f10c 0118 	add.w	r1, ip, #24
 8009944:	2250      	movs	r2, #80	@ 0x50
 8009946:	82a6      	strh	r6, [r4, #20]
 8009948:	f104 0018 	add.w	r0, r4, #24
 800994c:	f00a f8ed 	bl	8013b2a <memcpy>
 8009950:	2000      	movs	r0, #0
 8009952:	bd70      	pop	{r4, r5, r6, pc}
 8009954:	200b      	movs	r0, #11
 8009956:	bd70      	pop	{r4, r5, r6, pc}
 8009958:	200b      	movs	r0, #11
 800995a:	4770      	bx	lr

0800995c <rcl_node_options_fini>:
 800995c:	b1c0      	cbz	r0, 8009990 <rcl_node_options_fini+0x34>
 800995e:	b500      	push	{lr}
 8009960:	4684      	mov	ip, r0
 8009962:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009966:	b087      	sub	sp, #28
 8009968:	f10d 0e04 	add.w	lr, sp, #4
 800996c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009970:	f8dc 3000 	ldr.w	r3, [ip]
 8009974:	f8ce 3000 	str.w	r3, [lr]
 8009978:	a801      	add	r0, sp, #4
 800997a:	f7fe f9b7 	bl	8007cec <rcutils_allocator_is_valid>
 800997e:	b118      	cbz	r0, 8009988 <rcl_node_options_fini+0x2c>
 8009980:	2000      	movs	r0, #0
 8009982:	b007      	add	sp, #28
 8009984:	f85d fb04 	ldr.w	pc, [sp], #4
 8009988:	200b      	movs	r0, #11
 800998a:	b007      	add	sp, #28
 800998c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009990:	200b      	movs	r0, #11
 8009992:	4770      	bx	lr

08009994 <rcl_node_resolve_name>:
 8009994:	b082      	sub	sp, #8
 8009996:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999a:	b091      	sub	sp, #68	@ 0x44
 800999c:	ac1a      	add	r4, sp, #104	@ 0x68
 800999e:	e884 000c 	stmia.w	r4, {r2, r3}
 80099a2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d03a      	beq.n	8009a20 <rcl_node_resolve_name+0x8c>
 80099aa:	460c      	mov	r4, r1
 80099ac:	4605      	mov	r5, r0
 80099ae:	f7ff ff9b 	bl	80098e8 <rcl_node_get_options>
 80099b2:	b370      	cbz	r0, 8009a12 <rcl_node_resolve_name+0x7e>
 80099b4:	4628      	mov	r0, r5
 80099b6:	f7ff ff87 	bl	80098c8 <rcl_node_get_name>
 80099ba:	4681      	mov	r9, r0
 80099bc:	4628      	mov	r0, r5
 80099be:	f7ff ff8b 	bl	80098d8 <rcl_node_get_namespace>
 80099c2:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80099c6:	4607      	mov	r7, r0
 80099c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80099cc:	ad0b      	add	r5, sp, #44	@ 0x2c
 80099ce:	46ac      	mov	ip, r5
 80099d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80099d4:	f8de 3000 	ldr.w	r3, [lr]
 80099d8:	f8cc 3000 	str.w	r3, [ip]
 80099dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80099de:	b1fb      	cbz	r3, 8009a20 <rcl_node_resolve_name+0x8c>
 80099e0:	468a      	mov	sl, r1
 80099e2:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 80099e6:	f002 fa6b 	bl	800bec0 <rcutils_get_zero_initialized_string_map>
 80099ea:	ab10      	add	r3, sp, #64	@ 0x40
 80099ec:	9008      	str	r0, [sp, #32]
 80099ee:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80099f2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80099f6:	2100      	movs	r1, #0
 80099f8:	e895 000c 	ldmia.w	r5, {r2, r3}
 80099fc:	a808      	add	r0, sp, #32
 80099fe:	f002 fab9 	bl	800bf74 <rcutils_string_map_init>
 8009a02:	4606      	mov	r6, r0
 8009a04:	b170      	cbz	r0, 8009a24 <rcl_node_resolve_name+0x90>
 8009a06:	f7fe f985 	bl	8007d14 <rcutils_get_error_string>
 8009a0a:	f7fe f999 	bl	8007d40 <rcutils_reset_error>
 8009a0e:	2e0a      	cmp	r6, #10
 8009a10:	d000      	beq.n	8009a14 <rcl_node_resolve_name+0x80>
 8009a12:	2601      	movs	r6, #1
 8009a14:	4630      	mov	r0, r6
 8009a16:	b011      	add	sp, #68	@ 0x44
 8009a18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	b002      	add	sp, #8
 8009a1e:	4770      	bx	lr
 8009a20:	260b      	movs	r6, #11
 8009a22:	e7f7      	b.n	8009a14 <rcl_node_resolve_name+0x80>
 8009a24:	9009      	str	r0, [sp, #36]	@ 0x24
 8009a26:	9007      	str	r0, [sp, #28]
 8009a28:	a808      	add	r0, sp, #32
 8009a2a:	f007 fee1 	bl	80117f0 <rcl_get_default_topic_name_substitutions>
 8009a2e:	4606      	mov	r6, r0
 8009a30:	b1b0      	cbz	r0, 8009a60 <rcl_node_resolve_name+0xcc>
 8009a32:	280a      	cmp	r0, #10
 8009a34:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8009a38:	d000      	beq.n	8009a3c <rcl_node_resolve_name+0xa8>
 8009a3a:	2601      	movs	r6, #1
 8009a3c:	a808      	add	r0, sp, #32
 8009a3e:	f002 fad7 	bl	800bff0 <rcutils_string_map_fini>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d132      	bne.n	8009aac <rcl_node_resolve_name+0x118>
 8009a46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a48:	4659      	mov	r1, fp
 8009a4a:	47d0      	blx	sl
 8009a4c:	4659      	mov	r1, fp
 8009a4e:	4648      	mov	r0, r9
 8009a50:	47d0      	blx	sl
 8009a52:	f1b8 0f00 	cmp.w	r8, #0
 8009a56:	d0dd      	beq.n	8009a14 <rcl_node_resolve_name+0x80>
 8009a58:	2e67      	cmp	r6, #103	@ 0x67
 8009a5a:	bf08      	it	eq
 8009a5c:	2668      	moveq	r6, #104	@ 0x68
 8009a5e:	e7d9      	b.n	8009a14 <rcl_node_resolve_name+0x80>
 8009a60:	ab09      	add	r3, sp, #36	@ 0x24
 8009a62:	9305      	str	r3, [sp, #20]
 8009a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a66:	46ec      	mov	ip, sp
 8009a68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009a6c:	682b      	ldr	r3, [r5, #0]
 8009a6e:	f8cc 3000 	str.w	r3, [ip]
 8009a72:	463a      	mov	r2, r7
 8009a74:	4649      	mov	r1, r9
 8009a76:	4620      	mov	r0, r4
 8009a78:	ab08      	add	r3, sp, #32
 8009a7a:	f007 fd53 	bl	8011524 <rcl_expand_topic_name>
 8009a7e:	4606      	mov	r6, r0
 8009a80:	b9c8      	cbnz	r0, 8009ab6 <rcl_node_resolve_name+0x122>
 8009a82:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8009a86:	9009      	str	r0, [sp, #36]	@ 0x24
 8009a88:	4602      	mov	r2, r0
 8009a8a:	a90a      	add	r1, sp, #40	@ 0x28
 8009a8c:	4648      	mov	r0, r9
 8009a8e:	f002 fb7d 	bl	800c18c <rmw_validate_full_topic_name>
 8009a92:	b998      	cbnz	r0, 8009abc <rcl_node_resolve_name+0x128>
 8009a94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a96:	bb14      	cbnz	r4, 8009ade <rcl_node_resolve_name+0x14a>
 8009a98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a9a:	a808      	add	r0, sp, #32
 8009a9c:	f8c3 9000 	str.w	r9, [r3]
 8009aa0:	f002 faa6 	bl	800bff0 <rcutils_string_map_fini>
 8009aa4:	4606      	mov	r6, r0
 8009aa6:	b978      	cbnz	r0, 8009ac8 <rcl_node_resolve_name+0x134>
 8009aa8:	4681      	mov	r9, r0
 8009aaa:	e7cc      	b.n	8009a46 <rcl_node_resolve_name+0xb2>
 8009aac:	f7fe f932 	bl	8007d14 <rcutils_get_error_string>
 8009ab0:	f7fe f946 	bl	8007d40 <rcutils_reset_error>
 8009ab4:	e7c7      	b.n	8009a46 <rcl_node_resolve_name+0xb2>
 8009ab6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8009aba:	e7bf      	b.n	8009a3c <rcl_node_resolve_name+0xa8>
 8009abc:	f7fe f92a 	bl	8007d14 <rcutils_get_error_string>
 8009ac0:	2601      	movs	r6, #1
 8009ac2:	f7fe f93d 	bl	8007d40 <rcutils_reset_error>
 8009ac6:	e7b9      	b.n	8009a3c <rcl_node_resolve_name+0xa8>
 8009ac8:	f7fe f924 	bl	8007d14 <rcutils_get_error_string>
 8009acc:	f7fe f938 	bl	8007d40 <rcutils_reset_error>
 8009ad0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ad2:	4659      	mov	r1, fp
 8009ad4:	47d0      	blx	sl
 8009ad6:	4659      	mov	r1, fp
 8009ad8:	4620      	mov	r0, r4
 8009ada:	47d0      	blx	sl
 8009adc:	e799      	b.n	8009a12 <rcl_node_resolve_name+0x7e>
 8009ade:	2667      	movs	r6, #103	@ 0x67
 8009ae0:	e7ac      	b.n	8009a3c <rcl_node_resolve_name+0xa8>
 8009ae2:	bf00      	nop

08009ae4 <rcl_service_get_rmw_handle>:
 8009ae4:	b118      	cbz	r0, 8009aee <rcl_service_get_rmw_handle+0xa>
 8009ae6:	6800      	ldr	r0, [r0, #0]
 8009ae8:	b108      	cbz	r0, 8009aee <rcl_service_get_rmw_handle+0xa>
 8009aea:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8009aee:	4770      	bx	lr

08009af0 <rcl_take_request>:
 8009af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009af2:	468e      	mov	lr, r1
 8009af4:	460c      	mov	r4, r1
 8009af6:	4617      	mov	r7, r2
 8009af8:	4605      	mov	r5, r0
 8009afa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009afe:	b091      	sub	sp, #68	@ 0x44
 8009b00:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8009b04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009b08:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8009b0c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009b10:	b30d      	cbz	r5, 8009b56 <rcl_take_request+0x66>
 8009b12:	682b      	ldr	r3, [r5, #0]
 8009b14:	b1fb      	cbz	r3, 8009b56 <rcl_take_request+0x66>
 8009b16:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8009b1a:	b1e0      	cbz	r0, 8009b56 <rcl_take_request+0x66>
 8009b1c:	b397      	cbz	r7, 8009b84 <rcl_take_request+0x94>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f88d 3017 	strb.w	r3, [sp, #23]
 8009b24:	463a      	mov	r2, r7
 8009b26:	f10d 0317 	add.w	r3, sp, #23
 8009b2a:	a906      	add	r1, sp, #24
 8009b2c:	f003 f8c8 	bl	800ccc0 <rmw_take_request>
 8009b30:	4606      	mov	r6, r0
 8009b32:	b198      	cbz	r0, 8009b5c <rcl_take_request+0x6c>
 8009b34:	280a      	cmp	r0, #10
 8009b36:	bf18      	it	ne
 8009b38:	2601      	movne	r6, #1
 8009b3a:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8009b3e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009b42:	46a6      	mov	lr, r4
 8009b44:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009b48:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009b4c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8009b50:	4630      	mov	r0, r6
 8009b52:	b011      	add	sp, #68	@ 0x44
 8009b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b56:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8009b5a:	e7ee      	b.n	8009b3a <rcl_take_request+0x4a>
 8009b5c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8009b60:	b193      	cbz	r3, 8009b88 <rcl_take_request+0x98>
 8009b62:	682b      	ldr	r3, [r5, #0]
 8009b64:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d0e6      	beq.n	8009b3a <rcl_take_request+0x4a>
 8009b6c:	463a      	mov	r2, r7
 8009b6e:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 8009b72:	ab0a      	add	r3, sp, #40	@ 0x28
 8009b74:	e9cd 6700 	strd	r6, r7, [sp]
 8009b78:	9302      	str	r3, [sp, #8]
 8009b7a:	2101      	movs	r1, #1
 8009b7c:	f000 f844 	bl	8009c08 <rcl_send_service_event_message>
 8009b80:	4606      	mov	r6, r0
 8009b82:	e7da      	b.n	8009b3a <rcl_take_request+0x4a>
 8009b84:	260b      	movs	r6, #11
 8009b86:	e7d8      	b.n	8009b3a <rcl_take_request+0x4a>
 8009b88:	f240 2659 	movw	r6, #601	@ 0x259
 8009b8c:	e7d5      	b.n	8009b3a <rcl_take_request+0x4a>
 8009b8e:	bf00      	nop

08009b90 <rcl_send_response>:
 8009b90:	b350      	cbz	r0, 8009be8 <rcl_send_response+0x58>
 8009b92:	b570      	push	{r4, r5, r6, lr}
 8009b94:	6803      	ldr	r3, [r0, #0]
 8009b96:	b084      	sub	sp, #16
 8009b98:	4604      	mov	r4, r0
 8009b9a:	b1cb      	cbz	r3, 8009bd0 <rcl_send_response+0x40>
 8009b9c:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8009ba0:	b1b0      	cbz	r0, 8009bd0 <rcl_send_response+0x40>
 8009ba2:	460e      	mov	r6, r1
 8009ba4:	b1e9      	cbz	r1, 8009be2 <rcl_send_response+0x52>
 8009ba6:	4615      	mov	r5, r2
 8009ba8:	b1da      	cbz	r2, 8009be2 <rcl_send_response+0x52>
 8009baa:	f003 f8e7 	bl	800cd7c <rmw_send_response>
 8009bae:	b998      	cbnz	r0, 8009bd8 <rcl_send_response+0x48>
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8009bb6:	b16b      	cbz	r3, 8009bd4 <rcl_send_response+0x44>
 8009bb8:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8009bbc:	462a      	mov	r2, r5
 8009bbe:	e9cd 0100 	strd	r0, r1, [sp]
 8009bc2:	9602      	str	r6, [sp, #8]
 8009bc4:	2102      	movs	r1, #2
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f000 f81e 	bl	8009c08 <rcl_send_service_event_message>
 8009bcc:	b004      	add	sp, #16
 8009bce:	bd70      	pop	{r4, r5, r6, pc}
 8009bd0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8009bd4:	b004      	add	sp, #16
 8009bd6:	bd70      	pop	{r4, r5, r6, pc}
 8009bd8:	2802      	cmp	r0, #2
 8009bda:	bf18      	it	ne
 8009bdc:	2001      	movne	r0, #1
 8009bde:	b004      	add	sp, #16
 8009be0:	bd70      	pop	{r4, r5, r6, pc}
 8009be2:	200b      	movs	r0, #11
 8009be4:	b004      	add	sp, #16
 8009be6:	bd70      	pop	{r4, r5, r6, pc}
 8009be8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop

08009bf0 <rcl_service_is_valid>:
 8009bf0:	b130      	cbz	r0, 8009c00 <rcl_service_is_valid+0x10>
 8009bf2:	6800      	ldr	r0, [r0, #0]
 8009bf4:	b120      	cbz	r0, 8009c00 <rcl_service_is_valid+0x10>
 8009bf6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8009bfa:	3800      	subs	r0, #0
 8009bfc:	bf18      	it	ne
 8009bfe:	2001      	movne	r0, #1
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	0000      	movs	r0, r0
	...

08009c08 <rcl_send_service_event_message>:
 8009c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c0a:	b093      	sub	sp, #76	@ 0x4c
 8009c0c:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8009c0e:	b17a      	cbz	r2, 8009c30 <rcl_send_service_event_message+0x28>
 8009c10:	b176      	cbz	r6, 8009c30 <rcl_send_service_event_message+0x28>
 8009c12:	4604      	mov	r4, r0
 8009c14:	b150      	cbz	r0, 8009c2c <rcl_send_service_event_message+0x24>
 8009c16:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8009c1a:	b13b      	cbz	r3, 8009c2c <rcl_send_service_event_message+0x24>
 8009c1c:	68c0      	ldr	r0, [r0, #12]
 8009c1e:	460f      	mov	r7, r1
 8009c20:	4615      	mov	r5, r2
 8009c22:	f000 f9bb 	bl	8009f9c <rcl_clock_valid>
 8009c26:	b108      	cbz	r0, 8009c2c <rcl_send_service_event_message+0x24>
 8009c28:	7a23      	ldrb	r3, [r4, #8]
 8009c2a:	b92b      	cbnz	r3, 8009c38 <rcl_send_service_event_message+0x30>
 8009c2c:	2501      	movs	r5, #1
 8009c2e:	e000      	b.n	8009c32 <rcl_send_service_event_message+0x2a>
 8009c30:	250b      	movs	r5, #11
 8009c32:	4628      	mov	r0, r5
 8009c34:	b013      	add	sp, #76	@ 0x4c
 8009c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c38:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 8009c3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009c40:	f10d 0c0c 	add.w	ip, sp, #12
 8009c44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c48:	f8de 3000 	ldr.w	r3, [lr]
 8009c4c:	f8cc 3000 	str.w	r3, [ip]
 8009c50:	a803      	add	r0, sp, #12
 8009c52:	f7fe f84b 	bl	8007cec <rcutils_allocator_is_valid>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d0ea      	beq.n	8009c30 <rcl_send_service_event_message+0x28>
 8009c5a:	6820      	ldr	r0, [r4, #0]
 8009c5c:	f007 fe8c 	bl	8011978 <rcl_publisher_is_valid>
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d045      	beq.n	8009cf0 <rcl_send_service_event_message+0xe8>
 8009c64:	4669      	mov	r1, sp
 8009c66:	68e0      	ldr	r0, [r4, #12]
 8009c68:	f000 fa10 	bl	800a08c <rcl_clock_get_now>
 8009c6c:	4601      	mov	r1, r0
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d13b      	bne.n	8009cea <rcl_send_service_event_message+0xe2>
 8009c72:	2220      	movs	r2, #32
 8009c74:	eb0d 0002 	add.w	r0, sp, r2
 8009c78:	f009 fe7c 	bl	8013974 <memset>
 8009c7c:	a324      	add	r3, pc, #144	@ (adr r3, 8009d10 <rcl_send_service_event_message+0x108>)
 8009c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c86:	f88d 7020 	strb.w	r7, [sp, #32]
 8009c8a:	f7f6 fb11 	bl	80002b0 <__aeabi_ldivmod>
 8009c8e:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 8009c92:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 8009c96:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c9a:	7a23      	ldrb	r3, [r4, #8]
 8009c9c:	6830      	ldr	r0, [r6, #0]
 8009c9e:	6871      	ldr	r1, [r6, #4]
 8009ca0:	68b2      	ldr	r2, [r6, #8]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	68f3      	ldr	r3, [r6, #12]
 8009ca6:	bf08      	it	eq
 8009ca8:	2500      	moveq	r5, #0
 8009caa:	ae0b      	add	r6, sp, #44	@ 0x2c
 8009cac:	2f01      	cmp	r7, #1
 8009cae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009cb0:	d821      	bhi.n	8009cf6 <rcl_send_service_event_message+0xee>
 8009cb2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8009cb6:	462a      	mov	r2, r5
 8009cb8:	a808      	add	r0, sp, #32
 8009cba:	699d      	ldr	r5, [r3, #24]
 8009cbc:	a903      	add	r1, sp, #12
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	47a8      	blx	r5
 8009cc2:	4606      	mov	r6, r0
 8009cc4:	2e00      	cmp	r6, #0
 8009cc6:	d0b1      	beq.n	8009c2c <rcl_send_service_event_message+0x24>
 8009cc8:	4631      	mov	r1, r6
 8009cca:	6820      	ldr	r0, [r4, #0]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f007 fe2d 	bl	801192c <rcl_publish>
 8009cd2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8009cd6:	4605      	mov	r5, r0
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	a903      	add	r1, sp, #12
 8009cdc:	4630      	mov	r0, r6
 8009cde:	4798      	blx	r3
 8009ce0:	2d00      	cmp	r5, #0
 8009ce2:	d0a6      	beq.n	8009c32 <rcl_send_service_event_message+0x2a>
 8009ce4:	f7fe f82c 	bl	8007d40 <rcutils_reset_error>
 8009ce8:	e7a3      	b.n	8009c32 <rcl_send_service_event_message+0x2a>
 8009cea:	f7fe f829 	bl	8007d40 <rcutils_reset_error>
 8009cee:	e79d      	b.n	8009c2c <rcl_send_service_event_message+0x24>
 8009cf0:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8009cf4:	e79d      	b.n	8009c32 <rcl_send_service_event_message+0x2a>
 8009cf6:	1eb9      	subs	r1, r7, #2
 8009cf8:	2901      	cmp	r1, #1
 8009cfa:	d8f6      	bhi.n	8009cea <rcl_send_service_event_message+0xe2>
 8009cfc:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8009d00:	462b      	mov	r3, r5
 8009d02:	a808      	add	r0, sp, #32
 8009d04:	6995      	ldr	r5, [r2, #24]
 8009d06:	a903      	add	r1, sp, #12
 8009d08:	2200      	movs	r2, #0
 8009d0a:	47a8      	blx	r5
 8009d0c:	4606      	mov	r6, r0
 8009d0e:	e7d9      	b.n	8009cc4 <rcl_send_service_event_message+0xbc>
 8009d10:	3b9aca00 	.word	0x3b9aca00
 8009d14:	00000000 	.word	0x00000000

08009d18 <rcl_get_zero_initialized_subscription>:
 8009d18:	4b01      	ldr	r3, [pc, #4]	@ (8009d20 <rcl_get_zero_initialized_subscription+0x8>)
 8009d1a:	6818      	ldr	r0, [r3, #0]
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	08015128 	.word	0x08015128

08009d24 <rcl_subscription_init>:
 8009d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d28:	b089      	sub	sp, #36	@ 0x24
 8009d2a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009d2c:	b1d6      	cbz	r6, 8009d64 <rcl_subscription_init+0x40>
 8009d2e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8009d32:	4604      	mov	r4, r0
 8009d34:	4648      	mov	r0, r9
 8009d36:	460d      	mov	r5, r1
 8009d38:	4690      	mov	r8, r2
 8009d3a:	461f      	mov	r7, r3
 8009d3c:	f7fd ffd6 	bl	8007cec <rcutils_allocator_is_valid>
 8009d40:	b180      	cbz	r0, 8009d64 <rcl_subscription_init+0x40>
 8009d42:	b17c      	cbz	r4, 8009d64 <rcl_subscription_init+0x40>
 8009d44:	4628      	mov	r0, r5
 8009d46:	f7ff fdb5 	bl	80098b4 <rcl_node_is_valid>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d054      	beq.n	8009df8 <rcl_subscription_init+0xd4>
 8009d4e:	f1b8 0f00 	cmp.w	r8, #0
 8009d52:	d007      	beq.n	8009d64 <rcl_subscription_init+0x40>
 8009d54:	b137      	cbz	r7, 8009d64 <rcl_subscription_init+0x40>
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	b14b      	cbz	r3, 8009d6e <rcl_subscription_init+0x4a>
 8009d5a:	2764      	movs	r7, #100	@ 0x64
 8009d5c:	4638      	mov	r0, r7
 8009d5e:	b009      	add	sp, #36	@ 0x24
 8009d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d64:	270b      	movs	r7, #11
 8009d66:	4638      	mov	r0, r7
 8009d68:	b009      	add	sp, #36	@ 0x24
 8009d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d6e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8009d72:	aa07      	add	r2, sp, #28
 8009d74:	9205      	str	r2, [sp, #20]
 8009d76:	9307      	str	r3, [sp, #28]
 8009d78:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8009d7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009d80:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009d84:	4639      	mov	r1, r7
 8009d86:	e899 000c 	ldmia.w	r9, {r2, r3}
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	f7ff fe02 	bl	8009994 <rcl_node_resolve_name>
 8009d90:	4607      	mov	r7, r0
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d15f      	bne.n	8009e56 <rcl_subscription_init+0x132>
 8009d96:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8009d9a:	21d0      	movs	r1, #208	@ 0xd0
 8009d9c:	2001      	movs	r0, #1
 8009d9e:	4798      	blx	r3
 8009da0:	6020      	str	r0, [r4, #0]
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d05d      	beq.n	8009e62 <rcl_subscription_init+0x13e>
 8009da6:	2278      	movs	r2, #120	@ 0x78
 8009da8:	4631      	mov	r1, r6
 8009daa:	f009 febe 	bl	8013b2a <memcpy>
 8009dae:	4628      	mov	r0, r5
 8009db0:	f7ff fda2 	bl	80098f8 <rcl_node_get_rmw_handle>
 8009db4:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8009db8:	9300      	str	r3, [sp, #0]
 8009dba:	9a07      	ldr	r2, [sp, #28]
 8009dbc:	6827      	ldr	r7, [r4, #0]
 8009dbe:	4641      	mov	r1, r8
 8009dc0:	4633      	mov	r3, r6
 8009dc2:	f003 f8c3 	bl	800cf4c <rmw_create_subscription>
 8009dc6:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 8009dca:	6827      	ldr	r7, [r4, #0]
 8009dcc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8009dd0:	b338      	cbz	r0, 8009e22 <rcl_subscription_init+0xfe>
 8009dd2:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8009dd6:	f003 f999 	bl	800d10c <rmw_subscription_get_actual_qos>
 8009dda:	4607      	mov	r7, r0
 8009ddc:	b988      	cbnz	r0, 8009e02 <rcl_subscription_init+0xde>
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 8009de4:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
 8009de8:	9807      	ldr	r0, [sp, #28]
 8009dea:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8009dec:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8009dee:	4798      	blx	r3
 8009df0:	4638      	mov	r0, r7
 8009df2:	b009      	add	sp, #36	@ 0x24
 8009df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009df8:	27c8      	movs	r7, #200	@ 0xc8
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	b009      	add	sp, #36	@ 0x24
 8009dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e02:	6827      	ldr	r7, [r4, #0]
 8009e04:	b32f      	cbz	r7, 8009e52 <rcl_subscription_init+0x12e>
 8009e06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e0a:	b153      	cbz	r3, 8009e22 <rcl_subscription_init+0xfe>
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	f7ff fd73 	bl	80098f8 <rcl_node_get_rmw_handle>
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8009e18:	f003 f986 	bl	800d128 <rmw_destroy_subscription>
 8009e1c:	6827      	ldr	r7, [r4, #0]
 8009e1e:	4638      	mov	r0, r7
 8009e20:	b197      	cbz	r7, 8009e48 <rcl_subscription_init+0x124>
 8009e22:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8009e26:	4628      	mov	r0, r5
 8009e28:	f7fd ff60 	bl	8007cec <rcutils_allocator_is_valid>
 8009e2c:	b1e8      	cbz	r0, 8009e6a <rcl_subscription_init+0x146>
 8009e2e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e30:	b1d8      	cbz	r0, 8009e6a <rcl_subscription_init+0x146>
 8009e32:	4629      	mov	r1, r5
 8009e34:	f002 f974 	bl	800c120 <rmw_subscription_content_filter_options_fini>
 8009e38:	4605      	mov	r5, r0
 8009e3a:	b9a0      	cbnz	r0, 8009e66 <rcl_subscription_init+0x142>
 8009e3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e40:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009e42:	4798      	blx	r3
 8009e44:	6820      	ldr	r0, [r4, #0]
 8009e46:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8009e48:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8009e4a:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8009e4c:	4798      	blx	r3
 8009e4e:	2300      	movs	r3, #0
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	2701      	movs	r7, #1
 8009e54:	e7c8      	b.n	8009de8 <rcl_subscription_init+0xc4>
 8009e56:	2867      	cmp	r0, #103	@ 0x67
 8009e58:	d0c6      	beq.n	8009de8 <rcl_subscription_init+0xc4>
 8009e5a:	2869      	cmp	r0, #105	@ 0x69
 8009e5c:	d007      	beq.n	8009e6e <rcl_subscription_init+0x14a>
 8009e5e:	280a      	cmp	r0, #10
 8009e60:	d1f7      	bne.n	8009e52 <rcl_subscription_init+0x12e>
 8009e62:	270a      	movs	r7, #10
 8009e64:	e7c0      	b.n	8009de8 <rcl_subscription_init+0xc4>
 8009e66:	f7ff f95d 	bl	8009124 <rcl_convert_rmw_ret_to_rcl_ret>
 8009e6a:	6820      	ldr	r0, [r4, #0]
 8009e6c:	e7ec      	b.n	8009e48 <rcl_subscription_init+0x124>
 8009e6e:	2767      	movs	r7, #103	@ 0x67
 8009e70:	e7ba      	b.n	8009de8 <rcl_subscription_init+0xc4>
 8009e72:	bf00      	nop

08009e74 <rcl_subscription_get_default_options>:
 8009e74:	b510      	push	{r4, lr}
 8009e76:	4907      	ldr	r1, [pc, #28]	@ (8009e94 <rcl_subscription_get_default_options+0x20>)
 8009e78:	4604      	mov	r4, r0
 8009e7a:	2250      	movs	r2, #80	@ 0x50
 8009e7c:	f009 fe55 	bl	8013b2a <memcpy>
 8009e80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009e84:	f7fd ff06 	bl	8007c94 <rcutils_get_default_allocator>
 8009e88:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8009e8c:	f002 f962 	bl	800c154 <rmw_get_default_subscription_options>
 8009e90:	4620      	mov	r0, r4
 8009e92:	bd10      	pop	{r4, pc}
 8009e94:	08015130 	.word	0x08015130

08009e98 <rcl_take>:
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d04b      	beq.n	8009f34 <rcl_take+0x9c>
 8009e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea0:	4615      	mov	r5, r2
 8009ea2:	6802      	ldr	r2, [r0, #0]
 8009ea4:	b0a0      	sub	sp, #128	@ 0x80
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	2a00      	cmp	r2, #0
 8009eaa:	d03b      	beq.n	8009f24 <rcl_take+0x8c>
 8009eac:	461f      	mov	r7, r3
 8009eae:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d036      	beq.n	8009f24 <rcl_take+0x8c>
 8009eb6:	460e      	mov	r6, r1
 8009eb8:	2900      	cmp	r1, #0
 8009eba:	d039      	beq.n	8009f30 <rcl_take+0x98>
 8009ebc:	2d00      	cmp	r5, #0
 8009ebe:	d03d      	beq.n	8009f3c <rcl_take+0xa4>
 8009ec0:	a802      	add	r0, sp, #8
 8009ec2:	f002 f94d 	bl	800c160 <rmw_get_zero_initialized_message_info>
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	f10d 0c08 	add.w	ip, sp, #8
 8009ecc:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 8009ed0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009ed4:	46ae      	mov	lr, r5
 8009ed6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009eda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009ede:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009ee2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009ee6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009eea:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009eee:	462b      	mov	r3, r5
 8009ef0:	e88e 0003 	stmia.w	lr, {r0, r1}
 8009ef4:	f04f 0800 	mov.w	r8, #0
 8009ef8:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 8009efc:	4631      	mov	r1, r6
 8009efe:	4620      	mov	r0, r4
 8009f00:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 8009f04:	9700      	str	r7, [sp, #0]
 8009f06:	f003 f96f 	bl	800d1e8 <rmw_take_with_info>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	b9c0      	cbnz	r0, 8009f40 <rcl_take+0xa8>
 8009f0e:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 8009f12:	f240 1291 	movw	r2, #401	@ 0x191
 8009f16:	2900      	cmp	r1, #0
 8009f18:	bf08      	it	eq
 8009f1a:	4613      	moveq	r3, r2
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	b020      	add	sp, #128	@ 0x80
 8009f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f24:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8009f28:	4618      	mov	r0, r3
 8009f2a:	b020      	add	sp, #128	@ 0x80
 8009f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f30:	230b      	movs	r3, #11
 8009f32:	e7f3      	b.n	8009f1c <rcl_take+0x84>
 8009f34:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8009f38:	4618      	mov	r0, r3
 8009f3a:	4770      	bx	lr
 8009f3c:	ad12      	add	r5, sp, #72	@ 0x48
 8009f3e:	e7bf      	b.n	8009ec0 <rcl_take+0x28>
 8009f40:	f7ff f8f0 	bl	8009124 <rcl_convert_rmw_ret_to_rcl_ret>
 8009f44:	4603      	mov	r3, r0
 8009f46:	e7e9      	b.n	8009f1c <rcl_take+0x84>

08009f48 <rcl_subscription_get_rmw_handle>:
 8009f48:	b118      	cbz	r0, 8009f52 <rcl_subscription_get_rmw_handle+0xa>
 8009f4a:	6800      	ldr	r0, [r0, #0]
 8009f4c:	b108      	cbz	r0, 8009f52 <rcl_subscription_get_rmw_handle+0xa>
 8009f4e:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8009f52:	4770      	bx	lr

08009f54 <rcl_subscription_is_valid>:
 8009f54:	b130      	cbz	r0, 8009f64 <rcl_subscription_is_valid+0x10>
 8009f56:	6800      	ldr	r0, [r0, #0]
 8009f58:	b120      	cbz	r0, 8009f64 <rcl_subscription_is_valid+0x10>
 8009f5a:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8009f5e:	3800      	subs	r0, #0
 8009f60:	bf18      	it	ne
 8009f62:	2001      	movne	r0, #1
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop

08009f68 <rcl_get_system_time>:
 8009f68:	4608      	mov	r0, r1
 8009f6a:	f7fd bf05 	b.w	8007d78 <rcutils_system_time_now>
 8009f6e:	bf00      	nop

08009f70 <rcl_get_steady_time>:
 8009f70:	4608      	mov	r0, r1
 8009f72:	f7fd bf2b 	b.w	8007dcc <rcutils_steady_time_now>
 8009f76:	bf00      	nop

08009f78 <rcl_get_ros_time>:
 8009f78:	7a03      	ldrb	r3, [r0, #8]
 8009f7a:	b510      	push	{r4, lr}
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	b143      	cbz	r3, 8009f92 <rcl_get_ros_time+0x1a>
 8009f80:	2105      	movs	r1, #5
 8009f82:	f001 fd61 	bl	800ba48 <__atomic_load_8>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	e9c4 2300 	strd	r2, r3, [r4]
 8009f8e:	2000      	movs	r0, #0
 8009f90:	bd10      	pop	{r4, pc}
 8009f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f96:	4608      	mov	r0, r1
 8009f98:	f7fd beee 	b.w	8007d78 <rcutils_system_time_now>

08009f9c <rcl_clock_valid>:
 8009f9c:	b138      	cbz	r0, 8009fae <rcl_clock_valid+0x12>
 8009f9e:	7803      	ldrb	r3, [r0, #0]
 8009fa0:	b123      	cbz	r3, 8009fac <rcl_clock_valid+0x10>
 8009fa2:	68c0      	ldr	r0, [r0, #12]
 8009fa4:	3800      	subs	r0, #0
 8009fa6:	bf18      	it	ne
 8009fa8:	2001      	movne	r0, #1
 8009faa:	4770      	bx	lr
 8009fac:	4618      	mov	r0, r3
 8009fae:	4770      	bx	lr

08009fb0 <rcl_clock_init>:
 8009fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb2:	4605      	mov	r5, r0
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	4614      	mov	r4, r2
 8009fb8:	460e      	mov	r6, r1
 8009fba:	f7fd fe97 	bl	8007cec <rcutils_allocator_is_valid>
 8009fbe:	b128      	cbz	r0, 8009fcc <rcl_clock_init+0x1c>
 8009fc0:	2d03      	cmp	r5, #3
 8009fc2:	d803      	bhi.n	8009fcc <rcl_clock_init+0x1c>
 8009fc4:	e8df f005 	tbb	[pc, r5]
 8009fc8:	044c291a 	.word	0x044c291a
 8009fcc:	200b      	movs	r0, #11
 8009fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fd0:	2e00      	cmp	r6, #0
 8009fd2:	d0fb      	beq.n	8009fcc <rcl_clock_init+0x1c>
 8009fd4:	2c00      	cmp	r4, #0
 8009fd6:	d0f9      	beq.n	8009fcc <rcl_clock_init+0x1c>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8009fde:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 800a084 <rcl_clock_init+0xd4>
 8009fe2:	6133      	str	r3, [r6, #16]
 8009fe4:	f106 0514 	add.w	r5, r6, #20
 8009fe8:	2703      	movs	r7, #3
 8009fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	602b      	str	r3, [r5, #0]
 8009ff2:	f8c6 c00c 	str.w	ip, [r6, #12]
 8009ff6:	7037      	strb	r7, [r6, #0]
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ffc:	2e00      	cmp	r6, #0
 8009ffe:	d0e5      	beq.n	8009fcc <rcl_clock_init+0x1c>
 800a000:	2300      	movs	r3, #0
 800a002:	7033      	strb	r3, [r6, #0]
 800a004:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800a008:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800a00c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a00e:	f106 0514 	add.w	r5, r6, #20
 800a012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	602b      	str	r3, [r5, #0]
 800a018:	e7ee      	b.n	8009ff8 <rcl_clock_init+0x48>
 800a01a:	2e00      	cmp	r6, #0
 800a01c:	d0d6      	beq.n	8009fcc <rcl_clock_init+0x1c>
 800a01e:	2c00      	cmp	r4, #0
 800a020:	d0d4      	beq.n	8009fcc <rcl_clock_init+0x1c>
 800a022:	2700      	movs	r7, #0
 800a024:	7037      	strb	r7, [r6, #0]
 800a026:	46a4      	mov	ip, r4
 800a028:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a02c:	f106 0514 	add.w	r5, r6, #20
 800a030:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800a034:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800a038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a03a:	f8dc 3000 	ldr.w	r3, [ip]
 800a03e:	602b      	str	r3, [r5, #0]
 800a040:	6921      	ldr	r1, [r4, #16]
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	2010      	movs	r0, #16
 800a046:	4798      	blx	r3
 800a048:	6130      	str	r0, [r6, #16]
 800a04a:	b1b8      	cbz	r0, 800a07c <rcl_clock_init+0xcc>
 800a04c:	2200      	movs	r2, #0
 800a04e:	2300      	movs	r3, #0
 800a050:	e9c0 2300 	strd	r2, r3, [r0]
 800a054:	4a0a      	ldr	r2, [pc, #40]	@ (800a080 <rcl_clock_init+0xd0>)
 800a056:	7207      	strb	r7, [r0, #8]
 800a058:	2301      	movs	r3, #1
 800a05a:	60f2      	str	r2, [r6, #12]
 800a05c:	7033      	strb	r3, [r6, #0]
 800a05e:	e7cb      	b.n	8009ff8 <rcl_clock_init+0x48>
 800a060:	2e00      	cmp	r6, #0
 800a062:	d0b3      	beq.n	8009fcc <rcl_clock_init+0x1c>
 800a064:	2c00      	cmp	r4, #0
 800a066:	d0b1      	beq.n	8009fcc <rcl_clock_init+0x1c>
 800a068:	2300      	movs	r3, #0
 800a06a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800a06e:	f8df c018 	ldr.w	ip, [pc, #24]	@ 800a088 <rcl_clock_init+0xd8>
 800a072:	6133      	str	r3, [r6, #16]
 800a074:	f106 0514 	add.w	r5, r6, #20
 800a078:	2702      	movs	r7, #2
 800a07a:	e7b6      	b.n	8009fea <rcl_clock_init+0x3a>
 800a07c:	200a      	movs	r0, #10
 800a07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a080:	08009f79 	.word	0x08009f79
 800a084:	08009f71 	.word	0x08009f71
 800a088:	08009f69 	.word	0x08009f69

0800a08c <rcl_clock_get_now>:
 800a08c:	b140      	cbz	r0, 800a0a0 <rcl_clock_get_now+0x14>
 800a08e:	b139      	cbz	r1, 800a0a0 <rcl_clock_get_now+0x14>
 800a090:	7803      	ldrb	r3, [r0, #0]
 800a092:	b11b      	cbz	r3, 800a09c <rcl_clock_get_now+0x10>
 800a094:	68c3      	ldr	r3, [r0, #12]
 800a096:	b10b      	cbz	r3, 800a09c <rcl_clock_get_now+0x10>
 800a098:	6900      	ldr	r0, [r0, #16]
 800a09a:	4718      	bx	r3
 800a09c:	2001      	movs	r0, #1
 800a09e:	4770      	bx	lr
 800a0a0:	200b      	movs	r0, #11
 800a0a2:	4770      	bx	lr

0800a0a4 <rcl_is_enabled_ros_time_override>:
 800a0a4:	b158      	cbz	r0, 800a0be <rcl_is_enabled_ros_time_override+0x1a>
 800a0a6:	b151      	cbz	r1, 800a0be <rcl_is_enabled_ros_time_override+0x1a>
 800a0a8:	7803      	ldrb	r3, [r0, #0]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d105      	bne.n	800a0ba <rcl_is_enabled_ros_time_override+0x16>
 800a0ae:	6902      	ldr	r2, [r0, #16]
 800a0b0:	b11a      	cbz	r2, 800a0ba <rcl_is_enabled_ros_time_override+0x16>
 800a0b2:	7a13      	ldrb	r3, [r2, #8]
 800a0b4:	700b      	strb	r3, [r1, #0]
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	4770      	bx	lr
 800a0ba:	2001      	movs	r0, #1
 800a0bc:	4770      	bx	lr
 800a0be:	200b      	movs	r0, #11
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop

0800a0c4 <rcl_timer_clock>:
 800a0c4:	b130      	cbz	r0, 800a0d4 <rcl_timer_clock+0x10>
 800a0c6:	b129      	cbz	r1, 800a0d4 <rcl_timer_clock+0x10>
 800a0c8:	6803      	ldr	r3, [r0, #0]
 800a0ca:	b12b      	cbz	r3, 800a0d8 <rcl_timer_clock+0x14>
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	600b      	str	r3, [r1, #0]
 800a0d0:	2000      	movs	r0, #0
 800a0d2:	4770      	bx	lr
 800a0d4:	200b      	movs	r0, #11
 800a0d6:	4770      	bx	lr
 800a0d8:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop

0800a0e0 <rcl_timer_call>:
 800a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e4:	b087      	sub	sp, #28
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d067      	beq.n	800a1ba <rcl_timer_call+0xda>
 800a0ea:	6803      	ldr	r3, [r0, #0]
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d068      	beq.n	800a1c4 <rcl_timer_call+0xe4>
 800a0f2:	f3bf 8f5b 	dmb	ish
 800a0f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a0fa:	f3bf 8f5b 	dmb	ish
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d150      	bne.n	800a1a4 <rcl_timer_call+0xc4>
 800a102:	6803      	ldr	r3, [r0, #0]
 800a104:	a904      	add	r1, sp, #16
 800a106:	6818      	ldr	r0, [r3, #0]
 800a108:	f7ff ffc0 	bl	800a08c <rcl_clock_get_now>
 800a10c:	4605      	mov	r5, r0
 800a10e:	2800      	cmp	r0, #0
 800a110:	d144      	bne.n	800a19c <rcl_timer_call+0xbc>
 800a112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a116:	2b00      	cmp	r3, #0
 800a118:	db4a      	blt.n	800a1b0 <rcl_timer_call+0xd0>
 800a11a:	6820      	ldr	r0, [r4, #0]
 800a11c:	f04f 0a05 	mov.w	sl, #5
 800a120:	f8cd a000 	str.w	sl, [sp]
 800a124:	3020      	adds	r0, #32
 800a126:	f001 fcfb 	bl	800bb20 <__atomic_exchange_8>
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	f3bf 8f5b 	dmb	ish
 800a130:	4680      	mov	r8, r0
 800a132:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800a136:	f3bf 8f5b 	dmb	ish
 800a13a:	6820      	ldr	r0, [r4, #0]
 800a13c:	4689      	mov	r9, r1
 800a13e:	3028      	adds	r0, #40	@ 0x28
 800a140:	4651      	mov	r1, sl
 800a142:	f001 fc81 	bl	800ba48 <__atomic_load_8>
 800a146:	4606      	mov	r6, r0
 800a148:	6820      	ldr	r0, [r4, #0]
 800a14a:	460f      	mov	r7, r1
 800a14c:	3018      	adds	r0, #24
 800a14e:	4651      	mov	r1, sl
 800a150:	f001 fc7a 	bl	800ba48 <__atomic_load_8>
 800a154:	1836      	adds	r6, r6, r0
 800a156:	eb41 0707 	adc.w	r7, r1, r7
 800a15a:	4602      	mov	r2, r0
 800a15c:	460b      	mov	r3, r1
 800a15e:	4682      	mov	sl, r0
 800a160:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a164:	42b0      	cmp	r0, r6
 800a166:	eb71 0c07 	sbcs.w	ip, r1, r7
 800a16a:	db04      	blt.n	800a176 <rcl_timer_call+0x96>
 800a16c:	ea53 0c02 	orrs.w	ip, r3, r2
 800a170:	d12b      	bne.n	800a1ca <rcl_timer_call+0xea>
 800a172:	4606      	mov	r6, r0
 800a174:	460f      	mov	r7, r1
 800a176:	6820      	ldr	r0, [r4, #0]
 800a178:	2105      	movs	r1, #5
 800a17a:	4632      	mov	r2, r6
 800a17c:	463b      	mov	r3, r7
 800a17e:	3028      	adds	r0, #40	@ 0x28
 800a180:	9100      	str	r1, [sp, #0]
 800a182:	f001 fc97 	bl	800bab4 <__atomic_store_8>
 800a186:	f1bb 0f00 	cmp.w	fp, #0
 800a18a:	d007      	beq.n	800a19c <rcl_timer_call+0xbc>
 800a18c:	9a04      	ldr	r2, [sp, #16]
 800a18e:	9b05      	ldr	r3, [sp, #20]
 800a190:	ebb2 0208 	subs.w	r2, r2, r8
 800a194:	4620      	mov	r0, r4
 800a196:	eb63 0309 	sbc.w	r3, r3, r9
 800a19a:	47d8      	blx	fp
 800a19c:	4628      	mov	r0, r5
 800a19e:	b007      	add	sp, #28
 800a1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a4:	f240 3521 	movw	r5, #801	@ 0x321
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	b007      	add	sp, #28
 800a1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b0:	2501      	movs	r5, #1
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	b007      	add	sp, #28
 800a1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ba:	250b      	movs	r5, #11
 800a1bc:	4628      	mov	r0, r5
 800a1be:	b007      	add	sp, #28
 800a1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c4:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800a1c8:	e7e8      	b.n	800a19c <rcl_timer_call+0xbc>
 800a1ca:	1b80      	subs	r0, r0, r6
 800a1cc:	eb61 0107 	sbc.w	r1, r1, r7
 800a1d0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800a1d4:	f7f6 f86c 	bl	80002b0 <__aeabi_ldivmod>
 800a1d8:	9b02      	ldr	r3, [sp, #8]
 800a1da:	3001      	adds	r0, #1
 800a1dc:	f141 0100 	adc.w	r1, r1, #0
 800a1e0:	fb00 f303 	mul.w	r3, r0, r3
 800a1e4:	fb01 330a 	mla	r3, r1, sl, r3
 800a1e8:	fba0 0a0a 	umull	r0, sl, r0, sl
 800a1ec:	1830      	adds	r0, r6, r0
 800a1ee:	4453      	add	r3, sl
 800a1f0:	eb43 0707 	adc.w	r7, r3, r7
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	e7be      	b.n	800a176 <rcl_timer_call+0x96>

0800a1f8 <rcl_timer_is_ready>:
 800a1f8:	b398      	cbz	r0, 800a262 <rcl_timer_is_ready+0x6a>
 800a1fa:	b530      	push	{r4, r5, lr}
 800a1fc:	6803      	ldr	r3, [r0, #0]
 800a1fe:	b083      	sub	sp, #12
 800a200:	4604      	mov	r4, r0
 800a202:	b383      	cbz	r3, 800a266 <rcl_timer_is_ready+0x6e>
 800a204:	460d      	mov	r5, r1
 800a206:	b349      	cbz	r1, 800a25c <rcl_timer_is_ready+0x64>
 800a208:	f3bf 8f5b 	dmb	ish
 800a20c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a210:	f3bf 8f5b 	dmb	ish
 800a214:	b9fb      	cbnz	r3, 800a256 <rcl_timer_is_ready+0x5e>
 800a216:	6803      	ldr	r3, [r0, #0]
 800a218:	4669      	mov	r1, sp
 800a21a:	6818      	ldr	r0, [r3, #0]
 800a21c:	f7ff ff36 	bl	800a08c <rcl_clock_get_now>
 800a220:	b128      	cbz	r0, 800a22e <rcl_timer_is_ready+0x36>
 800a222:	f240 3321 	movw	r3, #801	@ 0x321
 800a226:	4298      	cmp	r0, r3
 800a228:	d015      	beq.n	800a256 <rcl_timer_is_ready+0x5e>
 800a22a:	b003      	add	sp, #12
 800a22c:	bd30      	pop	{r4, r5, pc}
 800a22e:	6820      	ldr	r0, [r4, #0]
 800a230:	2105      	movs	r1, #5
 800a232:	3028      	adds	r0, #40	@ 0x28
 800a234:	f001 fc08 	bl	800ba48 <__atomic_load_8>
 800a238:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a23c:	1ac0      	subs	r0, r0, r3
 800a23e:	eb61 0102 	sbc.w	r1, r1, r2
 800a242:	2801      	cmp	r0, #1
 800a244:	f171 0100 	sbcs.w	r1, r1, #0
 800a248:	bfb4      	ite	lt
 800a24a:	2301      	movlt	r3, #1
 800a24c:	2300      	movge	r3, #0
 800a24e:	702b      	strb	r3, [r5, #0]
 800a250:	2000      	movs	r0, #0
 800a252:	b003      	add	sp, #12
 800a254:	bd30      	pop	{r4, r5, pc}
 800a256:	2300      	movs	r3, #0
 800a258:	702b      	strb	r3, [r5, #0]
 800a25a:	e7f9      	b.n	800a250 <rcl_timer_is_ready+0x58>
 800a25c:	200b      	movs	r0, #11
 800a25e:	b003      	add	sp, #12
 800a260:	bd30      	pop	{r4, r5, pc}
 800a262:	200b      	movs	r0, #11
 800a264:	4770      	bx	lr
 800a266:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800a26a:	e7de      	b.n	800a22a <rcl_timer_is_ready+0x32>

0800a26c <rcl_timer_get_next_call_time>:
 800a26c:	b1d8      	cbz	r0, 800a2a6 <rcl_timer_get_next_call_time+0x3a>
 800a26e:	b538      	push	{r3, r4, r5, lr}
 800a270:	6803      	ldr	r3, [r0, #0]
 800a272:	b1d3      	cbz	r3, 800a2aa <rcl_timer_get_next_call_time+0x3e>
 800a274:	460c      	mov	r4, r1
 800a276:	b1a1      	cbz	r1, 800a2a2 <rcl_timer_get_next_call_time+0x36>
 800a278:	f3bf 8f5b 	dmb	ish
 800a27c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a280:	f3bf 8f5b 	dmb	ish
 800a284:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 800a288:	b943      	cbnz	r3, 800a29c <rcl_timer_get_next_call_time+0x30>
 800a28a:	6800      	ldr	r0, [r0, #0]
 800a28c:	2105      	movs	r1, #5
 800a28e:	3028      	adds	r0, #40	@ 0x28
 800a290:	f001 fbda 	bl	800ba48 <__atomic_load_8>
 800a294:	e9c4 0100 	strd	r0, r1, [r4]
 800a298:	4628      	mov	r0, r5
 800a29a:	bd38      	pop	{r3, r4, r5, pc}
 800a29c:	f240 3021 	movw	r0, #801	@ 0x321
 800a2a0:	bd38      	pop	{r3, r4, r5, pc}
 800a2a2:	200b      	movs	r0, #11
 800a2a4:	bd38      	pop	{r3, r4, r5, pc}
 800a2a6:	200b      	movs	r0, #11
 800a2a8:	4770      	bx	lr
 800a2aa:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800a2ae:	bd38      	pop	{r3, r4, r5, pc}

0800a2b0 <rcl_timer_get_guard_condition>:
 800a2b0:	b130      	cbz	r0, 800a2c0 <rcl_timer_get_guard_condition+0x10>
 800a2b2:	6800      	ldr	r0, [r0, #0]
 800a2b4:	b120      	cbz	r0, 800a2c0 <rcl_timer_get_guard_condition+0x10>
 800a2b6:	68c3      	ldr	r3, [r0, #12]
 800a2b8:	b10b      	cbz	r3, 800a2be <rcl_timer_get_guard_condition+0xe>
 800a2ba:	3008      	adds	r0, #8
 800a2bc:	4770      	bx	lr
 800a2be:	4618      	mov	r0, r3
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop

0800a2c4 <rcl_get_zero_initialized_wait_set>:
 800a2c4:	b510      	push	{r4, lr}
 800a2c6:	4c08      	ldr	r4, [pc, #32]	@ (800a2e8 <rcl_get_zero_initialized_wait_set+0x24>)
 800a2c8:	4686      	mov	lr, r0
 800a2ca:	4684      	mov	ip, r0
 800a2cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a2d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a2d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	f8cc 3000 	str.w	r3, [ip]
 800a2e4:	4670      	mov	r0, lr
 800a2e6:	bd10      	pop	{r4, pc}
 800a2e8:	08015180 	.word	0x08015180

0800a2ec <rcl_wait_set_is_valid>:
 800a2ec:	b118      	cbz	r0, 800a2f6 <rcl_wait_set_is_valid+0xa>
 800a2ee:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800a2f0:	3800      	subs	r0, #0
 800a2f2:	bf18      	it	ne
 800a2f4:	2001      	movne	r0, #1
 800a2f6:	4770      	bx	lr

0800a2f8 <rcl_wait_set_fini>:
 800a2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	f000 80ab 	beq.w	800a458 <rcl_wait_set_fini+0x160>
 800a302:	4605      	mov	r5, r0
 800a304:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800a306:	2800      	cmp	r0, #0
 800a308:	f000 809c 	beq.w	800a444 <rcl_wait_set_fini+0x14c>
 800a30c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 800a30e:	f003 f961 	bl	800d5d4 <rmw_destroy_wait_set>
 800a312:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a314:	4680      	mov	r8, r0
 800a316:	2800      	cmp	r0, #0
 800a318:	f040 808e 	bne.w	800a438 <rcl_wait_set_fini+0x140>
 800a31c:	2c00      	cmp	r4, #0
 800a31e:	f000 80a0 	beq.w	800a462 <rcl_wait_set_fini+0x16a>
 800a322:	6828      	ldr	r0, [r5, #0]
 800a324:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 800a326:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800a32a:	2600      	movs	r6, #0
 800a32c:	606e      	str	r6, [r5, #4]
 800a32e:	6026      	str	r6, [r4, #0]
 800a330:	b118      	cbz	r0, 800a33a <rcl_wait_set_fini+0x42>
 800a332:	4649      	mov	r1, r9
 800a334:	47b8      	blx	r7
 800a336:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a338:	602e      	str	r6, [r5, #0]
 800a33a:	68a0      	ldr	r0, [r4, #8]
 800a33c:	b128      	cbz	r0, 800a34a <rcl_wait_set_fini+0x52>
 800a33e:	4649      	mov	r1, r9
 800a340:	47b8      	blx	r7
 800a342:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a344:	2300      	movs	r3, #0
 800a346:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800a34a:	68a8      	ldr	r0, [r5, #8]
 800a34c:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 800a34e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800a350:	f04f 0900 	mov.w	r9, #0
 800a354:	f8c5 900c 	str.w	r9, [r5, #12]
 800a358:	f8c4 900c 	str.w	r9, [r4, #12]
 800a35c:	b130      	cbz	r0, 800a36c <rcl_wait_set_fini+0x74>
 800a35e:	4639      	mov	r1, r7
 800a360:	47b0      	blx	r6
 800a362:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a364:	f8c5 9008 	str.w	r9, [r5, #8]
 800a368:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 800a36a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800a36c:	6960      	ldr	r0, [r4, #20]
 800a36e:	f04f 0900 	mov.w	r9, #0
 800a372:	f8c4 9010 	str.w	r9, [r4, #16]
 800a376:	b130      	cbz	r0, 800a386 <rcl_wait_set_fini+0x8e>
 800a378:	4639      	mov	r1, r7
 800a37a:	47b0      	blx	r6
 800a37c:	f8c4 9014 	str.w	r9, [r4, #20]
 800a380:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a382:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 800a384:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800a386:	6928      	ldr	r0, [r5, #16]
 800a388:	f04f 0900 	mov.w	r9, #0
 800a38c:	f8c5 9014 	str.w	r9, [r5, #20]
 800a390:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
 800a394:	b130      	cbz	r0, 800a3a4 <rcl_wait_set_fini+0xac>
 800a396:	4639      	mov	r1, r7
 800a398:	47b0      	blx	r6
 800a39a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a39c:	f8c5 9010 	str.w	r9, [r5, #16]
 800a3a0:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 800a3a2:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800a3a4:	69a8      	ldr	r0, [r5, #24]
 800a3a6:	f04f 0900 	mov.w	r9, #0
 800a3aa:	f8c5 901c 	str.w	r9, [r5, #28]
 800a3ae:	f8c4 9018 	str.w	r9, [r4, #24]
 800a3b2:	b120      	cbz	r0, 800a3be <rcl_wait_set_fini+0xc6>
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	47b0      	blx	r6
 800a3b8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a3ba:	f8c5 9018 	str.w	r9, [r5, #24]
 800a3be:	6a20      	ldr	r0, [r4, #32]
 800a3c0:	b128      	cbz	r0, 800a3ce <rcl_wait_set_fini+0xd6>
 800a3c2:	4639      	mov	r1, r7
 800a3c4:	47b0      	blx	r6
 800a3c6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a3ce:	6a28      	ldr	r0, [r5, #32]
 800a3d0:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 800a3d2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800a3d6:	2600      	movs	r6, #0
 800a3d8:	626e      	str	r6, [r5, #36]	@ 0x24
 800a3da:	6266      	str	r6, [r4, #36]	@ 0x24
 800a3dc:	b118      	cbz	r0, 800a3e6 <rcl_wait_set_fini+0xee>
 800a3de:	4649      	mov	r1, r9
 800a3e0:	47b8      	blx	r7
 800a3e2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a3e4:	622e      	str	r6, [r5, #32]
 800a3e6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800a3e8:	b128      	cbz	r0, 800a3f6 <rcl_wait_set_fini+0xfe>
 800a3ea:	4649      	mov	r1, r9
 800a3ec:	47b8      	blx	r7
 800a3ee:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 800a3f6:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800a3f8:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 800a3fa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800a3fe:	2600      	movs	r6, #0
 800a400:	62ee      	str	r6, [r5, #44]	@ 0x2c
 800a402:	6326      	str	r6, [r4, #48]	@ 0x30
 800a404:	b118      	cbz	r0, 800a40e <rcl_wait_set_fini+0x116>
 800a406:	4649      	mov	r1, r9
 800a408:	47b8      	blx	r7
 800a40a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a40c:	62ae      	str	r6, [r5, #40]	@ 0x28
 800a40e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800a410:	b1e0      	cbz	r0, 800a44c <rcl_wait_set_fini+0x154>
 800a412:	4649      	mov	r1, r9
 800a414:	47b8      	blx	r7
 800a416:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a418:	2300      	movs	r3, #0
 800a41a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800a41e:	4598      	cmp	r8, r3
 800a420:	bf18      	it	ne
 800a422:	f44f 7861 	movne.w	r8, #900	@ 0x384
 800a426:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a428:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800a42a:	4620      	mov	r0, r4
 800a42c:	4798      	blx	r3
 800a42e:	2300      	movs	r3, #0
 800a430:	632b      	str	r3, [r5, #48]	@ 0x30
 800a432:	4640      	mov	r0, r8
 800a434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a438:	f44f 7861 	mov.w	r8, #900	@ 0x384
 800a43c:	2c00      	cmp	r4, #0
 800a43e:	f47f af70 	bne.w	800a322 <rcl_wait_set_fini+0x2a>
 800a442:	e7f6      	b.n	800a432 <rcl_wait_set_fini+0x13a>
 800a444:	4680      	mov	r8, r0
 800a446:	4640      	mov	r0, r8
 800a448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a44c:	f1b8 0f00 	cmp.w	r8, #0
 800a450:	bf18      	it	ne
 800a452:	f44f 7861 	movne.w	r8, #900	@ 0x384
 800a456:	e7e6      	b.n	800a426 <rcl_wait_set_fini+0x12e>
 800a458:	f04f 080b 	mov.w	r8, #11
 800a45c:	4640      	mov	r0, r8
 800a45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a462:	f44f 7861 	mov.w	r8, #900	@ 0x384
 800a466:	e7e4      	b.n	800a432 <rcl_wait_set_fini+0x13a>

0800a468 <rcl_wait_set_add_subscription>:
 800a468:	b318      	cbz	r0, 800a4b2 <rcl_wait_set_add_subscription+0x4a>
 800a46a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a46c:	b570      	push	{r4, r5, r6, lr}
 800a46e:	4604      	mov	r4, r0
 800a470:	b30b      	cbz	r3, 800a4b6 <rcl_wait_set_add_subscription+0x4e>
 800a472:	b319      	cbz	r1, 800a4bc <rcl_wait_set_add_subscription+0x54>
 800a474:	681d      	ldr	r5, [r3, #0]
 800a476:	6840      	ldr	r0, [r0, #4]
 800a478:	4285      	cmp	r5, r0
 800a47a:	d217      	bcs.n	800a4ac <rcl_wait_set_add_subscription+0x44>
 800a47c:	6820      	ldr	r0, [r4, #0]
 800a47e:	1c6e      	adds	r6, r5, #1
 800a480:	601e      	str	r6, [r3, #0]
 800a482:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800a486:	b102      	cbz	r2, 800a48a <rcl_wait_set_add_subscription+0x22>
 800a488:	6015      	str	r5, [r2, #0]
 800a48a:	4608      	mov	r0, r1
 800a48c:	f7ff fd5c 	bl	8009f48 <rcl_subscription_get_rmw_handle>
 800a490:	b150      	cbz	r0, 800a4a8 <rcl_wait_set_add_subscription+0x40>
 800a492:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a494:	6842      	ldr	r2, [r0, #4]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a49c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a49e:	6853      	ldr	r3, [r2, #4]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	6053      	str	r3, [r2, #4]
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}
 800a4a8:	2001      	movs	r0, #1
 800a4aa:	bd70      	pop	{r4, r5, r6, pc}
 800a4ac:	f240 3086 	movw	r0, #902	@ 0x386
 800a4b0:	bd70      	pop	{r4, r5, r6, pc}
 800a4b2:	200b      	movs	r0, #11
 800a4b4:	4770      	bx	lr
 800a4b6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800a4ba:	bd70      	pop	{r4, r5, r6, pc}
 800a4bc:	200b      	movs	r0, #11
 800a4be:	bd70      	pop	{r4, r5, r6, pc}

0800a4c0 <rcl_wait_set_clear>:
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d074      	beq.n	800a5ae <rcl_wait_set_clear+0xee>
 800a4c4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a4c6:	b510      	push	{r4, lr}
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d071      	beq.n	800a5b2 <rcl_wait_set_clear+0xf2>
 800a4ce:	6800      	ldr	r0, [r0, #0]
 800a4d0:	b138      	cbz	r0, 800a4e2 <rcl_wait_set_clear+0x22>
 800a4d2:	6862      	ldr	r2, [r4, #4]
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	0092      	lsls	r2, r2, #2
 800a4d8:	f009 fa4c 	bl	8013974 <memset>
 800a4dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a4de:	2200      	movs	r2, #0
 800a4e0:	601a      	str	r2, [r3, #0]
 800a4e2:	68a0      	ldr	r0, [r4, #8]
 800a4e4:	b138      	cbz	r0, 800a4f6 <rcl_wait_set_clear+0x36>
 800a4e6:	68e2      	ldr	r2, [r4, #12]
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	0092      	lsls	r2, r2, #2
 800a4ec:	f009 fa42 	bl	8013974 <memset>
 800a4f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	60da      	str	r2, [r3, #12]
 800a4f6:	69a0      	ldr	r0, [r4, #24]
 800a4f8:	b138      	cbz	r0, 800a50a <rcl_wait_set_clear+0x4a>
 800a4fa:	69e2      	ldr	r2, [r4, #28]
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	0092      	lsls	r2, r2, #2
 800a500:	f009 fa38 	bl	8013974 <memset>
 800a504:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a506:	2200      	movs	r2, #0
 800a508:	619a      	str	r2, [r3, #24]
 800a50a:	6a20      	ldr	r0, [r4, #32]
 800a50c:	b138      	cbz	r0, 800a51e <rcl_wait_set_clear+0x5e>
 800a50e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a510:	2100      	movs	r1, #0
 800a512:	0092      	lsls	r2, r2, #2
 800a514:	f009 fa2e 	bl	8013974 <memset>
 800a518:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a51a:	2200      	movs	r2, #0
 800a51c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a51e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a520:	b138      	cbz	r0, 800a532 <rcl_wait_set_clear+0x72>
 800a522:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a524:	2100      	movs	r1, #0
 800a526:	0092      	lsls	r2, r2, #2
 800a528:	f009 fa24 	bl	8013974 <memset>
 800a52c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a52e:	2200      	movs	r2, #0
 800a530:	631a      	str	r2, [r3, #48]	@ 0x30
 800a532:	6920      	ldr	r0, [r4, #16]
 800a534:	b138      	cbz	r0, 800a546 <rcl_wait_set_clear+0x86>
 800a536:	6962      	ldr	r2, [r4, #20]
 800a538:	2100      	movs	r1, #0
 800a53a:	0092      	lsls	r2, r2, #2
 800a53c:	f009 fa1a 	bl	8013974 <memset>
 800a540:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a542:	2200      	movs	r2, #0
 800a544:	641a      	str	r2, [r3, #64]	@ 0x40
 800a546:	6898      	ldr	r0, [r3, #8]
 800a548:	b138      	cbz	r0, 800a55a <rcl_wait_set_clear+0x9a>
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	2100      	movs	r1, #0
 800a54e:	0092      	lsls	r2, r2, #2
 800a550:	f009 fa10 	bl	8013974 <memset>
 800a554:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a556:	2200      	movs	r2, #0
 800a558:	605a      	str	r2, [r3, #4]
 800a55a:	6958      	ldr	r0, [r3, #20]
 800a55c:	b138      	cbz	r0, 800a56e <rcl_wait_set_clear+0xae>
 800a55e:	691a      	ldr	r2, [r3, #16]
 800a560:	2100      	movs	r1, #0
 800a562:	0092      	lsls	r2, r2, #2
 800a564:	f009 fa06 	bl	8013974 <memset>
 800a568:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a56a:	2200      	movs	r2, #0
 800a56c:	611a      	str	r2, [r3, #16]
 800a56e:	6a18      	ldr	r0, [r3, #32]
 800a570:	b138      	cbz	r0, 800a582 <rcl_wait_set_clear+0xc2>
 800a572:	69da      	ldr	r2, [r3, #28]
 800a574:	2100      	movs	r1, #0
 800a576:	0092      	lsls	r2, r2, #2
 800a578:	f009 f9fc 	bl	8013974 <memset>
 800a57c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a57e:	2200      	movs	r2, #0
 800a580:	61da      	str	r2, [r3, #28]
 800a582:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a584:	b138      	cbz	r0, 800a596 <rcl_wait_set_clear+0xd6>
 800a586:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a588:	2100      	movs	r1, #0
 800a58a:	0092      	lsls	r2, r2, #2
 800a58c:	f009 f9f2 	bl	8013974 <memset>
 800a590:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a592:	2200      	movs	r2, #0
 800a594:	629a      	str	r2, [r3, #40]	@ 0x28
 800a596:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a598:	b138      	cbz	r0, 800a5aa <rcl_wait_set_clear+0xea>
 800a59a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a59c:	2100      	movs	r1, #0
 800a59e:	0092      	lsls	r2, r2, #2
 800a5a0:	f009 f9e8 	bl	8013974 <memset>
 800a5a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	635a      	str	r2, [r3, #52]	@ 0x34
 800a5aa:	2000      	movs	r0, #0
 800a5ac:	bd10      	pop	{r4, pc}
 800a5ae:	200b      	movs	r0, #11
 800a5b0:	4770      	bx	lr
 800a5b2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800a5b6:	bd10      	pop	{r4, pc}

0800a5b8 <rcl_wait_set_resize>:
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	f000 81a1 	beq.w	800a900 <rcl_wait_set_resize+0x348>
 800a5be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c2:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	f1ba 0f00 	cmp.w	sl, #0
 800a5ce:	f000 8199 	beq.w	800a904 <rcl_wait_set_resize+0x34c>
 800a5d2:	f04f 0800 	mov.w	r8, #0
 800a5d6:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 800a5da:	461e      	mov	r6, r3
 800a5dc:	460f      	mov	r7, r1
 800a5de:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 800a5e2:	4615      	mov	r5, r2
 800a5e4:	f8c0 8004 	str.w	r8, [r0, #4]
 800a5e8:	6800      	ldr	r0, [r0, #0]
 800a5ea:	f8ca 8000 	str.w	r8, [sl]
 800a5ee:	2900      	cmp	r1, #0
 800a5f0:	f000 80cf 	beq.w	800a792 <rcl_wait_set_resize+0x1da>
 800a5f4:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 800a5f8:	464a      	mov	r2, r9
 800a5fa:	4651      	mov	r1, sl
 800a5fc:	9301      	str	r3, [sp, #4]
 800a5fe:	4798      	blx	r3
 800a600:	9b01      	ldr	r3, [sp, #4]
 800a602:	6020      	str	r0, [r4, #0]
 800a604:	2800      	cmp	r0, #0
 800a606:	f000 8109 	beq.w	800a81c <rcl_wait_set_resize+0x264>
 800a60a:	4652      	mov	r2, sl
 800a60c:	4641      	mov	r1, r8
 800a60e:	9301      	str	r3, [sp, #4]
 800a610:	f009 f9b0 	bl	8013974 <memset>
 800a614:	6067      	str	r7, [r4, #4]
 800a616:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 800a618:	9b01      	ldr	r3, [sp, #4]
 800a61a:	68b8      	ldr	r0, [r7, #8]
 800a61c:	f8c7 8004 	str.w	r8, [r7, #4]
 800a620:	464a      	mov	r2, r9
 800a622:	4651      	mov	r1, sl
 800a624:	4798      	blx	r3
 800a626:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a628:	60b8      	str	r0, [r7, #8]
 800a62a:	689f      	ldr	r7, [r3, #8]
 800a62c:	2f00      	cmp	r7, #0
 800a62e:	f000 80f0 	beq.w	800a812 <rcl_wait_set_resize+0x25a>
 800a632:	4652      	mov	r2, sl
 800a634:	4641      	mov	r1, r8
 800a636:	4638      	mov	r0, r7
 800a638:	f009 f99c 	bl	8013974 <memset>
 800a63c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a640:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800a644:	68a0      	ldr	r0, [r4, #8]
 800a646:	2700      	movs	r7, #0
 800a648:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 800a64c:	60e7      	str	r7, [r4, #12]
 800a64e:	f8ca 700c 	str.w	r7, [sl, #12]
 800a652:	2d00      	cmp	r5, #0
 800a654:	f040 80b0 	bne.w	800a7b8 <rcl_wait_set_resize+0x200>
 800a658:	b130      	cbz	r0, 800a668 <rcl_wait_set_resize+0xb0>
 800a65a:	4641      	mov	r1, r8
 800a65c:	4790      	blx	r2
 800a65e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a662:	60a5      	str	r5, [r4, #8]
 800a664:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800a668:	f8da 0014 	ldr.w	r0, [sl, #20]
 800a66c:	2700      	movs	r7, #0
 800a66e:	19ad      	adds	r5, r5, r6
 800a670:	f8ca 7010 	str.w	r7, [sl, #16]
 800a674:	f040 80b8 	bne.w	800a7e8 <rcl_wait_set_resize+0x230>
 800a678:	b148      	cbz	r0, 800a68e <rcl_wait_set_resize+0xd6>
 800a67a:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 800a67e:	4641      	mov	r1, r8
 800a680:	4798      	blx	r3
 800a682:	f8ca 5014 	str.w	r5, [sl, #20]
 800a686:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a68a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800a68e:	6920      	ldr	r0, [r4, #16]
 800a690:	2500      	movs	r5, #0
 800a692:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 800a696:	6165      	str	r5, [r4, #20]
 800a698:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 800a69c:	2e00      	cmp	r6, #0
 800a69e:	f040 80c1 	bne.w	800a824 <rcl_wait_set_resize+0x26c>
 800a6a2:	b140      	cbz	r0, 800a6b6 <rcl_wait_set_resize+0xfe>
 800a6a4:	4641      	mov	r1, r8
 800a6a6:	47c8      	blx	r9
 800a6a8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a6ac:	6126      	str	r6, [r4, #16]
 800a6ae:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 800a6b2:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800a6b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6b8:	69a0      	ldr	r0, [r4, #24]
 800a6ba:	2500      	movs	r5, #0
 800a6bc:	61e5      	str	r5, [r4, #28]
 800a6be:	f8ca 5018 	str.w	r5, [sl, #24]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f040 80c2 	bne.w	800a84c <rcl_wait_set_resize+0x294>
 800a6c8:	b128      	cbz	r0, 800a6d6 <rcl_wait_set_resize+0x11e>
 800a6ca:	4641      	mov	r1, r8
 800a6cc:	47c8      	blx	r9
 800a6ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6d0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a6d4:	61a3      	str	r3, [r4, #24]
 800a6d6:	f8da 0020 	ldr.w	r0, [sl, #32]
 800a6da:	b130      	cbz	r0, 800a6ea <rcl_wait_set_resize+0x132>
 800a6dc:	4641      	mov	r1, r8
 800a6de:	47c8      	blx	r9
 800a6e0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	e9ca 3307 	strd	r3, r3, [sl, #28]
 800a6ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a6ec:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 800a6f0:	6a20      	ldr	r0, [r4, #32]
 800a6f2:	2500      	movs	r5, #0
 800a6f4:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 800a6f8:	6265      	str	r5, [r4, #36]	@ 0x24
 800a6fa:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f000 80c8 	beq.w	800a894 <rcl_wait_set_resize+0x2dc>
 800a704:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800a708:	4632      	mov	r2, r6
 800a70a:	4649      	mov	r1, r9
 800a70c:	47c0      	blx	r8
 800a70e:	6220      	str	r0, [r4, #32]
 800a710:	2800      	cmp	r0, #0
 800a712:	f000 8083 	beq.w	800a81c <rcl_wait_set_resize+0x264>
 800a716:	464a      	mov	r2, r9
 800a718:	4629      	mov	r1, r5
 800a71a:	f009 f92b 	bl	8013974 <memset>
 800a71e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a722:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a724:	6263      	str	r3, [r4, #36]	@ 0x24
 800a726:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 800a72a:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 800a72e:	4632      	mov	r2, r6
 800a730:	4649      	mov	r1, r9
 800a732:	47c0      	blx	r8
 800a734:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a736:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 800a73a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f000 80fb 	beq.w	800a938 <rcl_wait_set_resize+0x380>
 800a742:	464a      	mov	r2, r9
 800a744:	4629      	mov	r1, r5
 800a746:	4618      	mov	r0, r3
 800a748:	f009 f914 	bl	8013974 <memset>
 800a74c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a750:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a752:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 800a756:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a758:	2500      	movs	r5, #0
 800a75a:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 800a75e:	62e5      	str	r5, [r4, #44]	@ 0x2c
 800a760:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 800a764:	2b00      	cmp	r3, #0
 800a766:	f040 80a9 	bne.w	800a8bc <rcl_wait_set_resize+0x304>
 800a76a:	b128      	cbz	r0, 800a778 <rcl_wait_set_resize+0x1c0>
 800a76c:	4631      	mov	r1, r6
 800a76e:	47b8      	blx	r7
 800a770:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a772:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a776:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a778:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 800a77c:	b128      	cbz	r0, 800a78a <rcl_wait_set_resize+0x1d2>
 800a77e:	4631      	mov	r1, r6
 800a780:	47b8      	blx	r7
 800a782:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a784:	2200      	movs	r2, #0
 800a786:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 800a78a:	2000      	movs	r0, #0
 800a78c:	b003      	add	sp, #12
 800a78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a792:	b120      	cbz	r0, 800a79e <rcl_wait_set_resize+0x1e6>
 800a794:	4649      	mov	r1, r9
 800a796:	47d8      	blx	fp
 800a798:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a79c:	6027      	str	r7, [r4, #0]
 800a79e:	f8da 0008 	ldr.w	r0, [sl, #8]
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	f43f af4c 	beq.w	800a640 <rcl_wait_set_resize+0x88>
 800a7a8:	4649      	mov	r1, r9
 800a7aa:	47d8      	blx	fp
 800a7ac:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	e9ca 3301 	strd	r3, r3, [sl, #4]
 800a7b6:	e743      	b.n	800a640 <rcl_wait_set_resize+0x88>
 800a7b8:	4642      	mov	r2, r8
 800a7ba:	ea4f 0885 	mov.w	r8, r5, lsl #2
 800a7be:	4641      	mov	r1, r8
 800a7c0:	4798      	blx	r3
 800a7c2:	60a0      	str	r0, [r4, #8]
 800a7c4:	b350      	cbz	r0, 800a81c <rcl_wait_set_resize+0x264>
 800a7c6:	4642      	mov	r2, r8
 800a7c8:	4639      	mov	r1, r7
 800a7ca:	f009 f8d3 	bl	8013974 <memset>
 800a7ce:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a7d2:	60e5      	str	r5, [r4, #12]
 800a7d4:	2700      	movs	r7, #0
 800a7d6:	19ad      	adds	r5, r5, r6
 800a7d8:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800a7dc:	f8da 0014 	ldr.w	r0, [sl, #20]
 800a7e0:	f8ca 7010 	str.w	r7, [sl, #16]
 800a7e4:	f43f af48 	beq.w	800a678 <rcl_wait_set_resize+0xc0>
 800a7e8:	00ad      	lsls	r5, r5, #2
 800a7ea:	4642      	mov	r2, r8
 800a7ec:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	4798      	blx	r3
 800a7f4:	4680      	mov	r8, r0
 800a7f6:	f8ca 0014 	str.w	r0, [sl, #20]
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	f000 8085 	beq.w	800a90a <rcl_wait_set_resize+0x352>
 800a800:	462a      	mov	r2, r5
 800a802:	4639      	mov	r1, r7
 800a804:	f009 f8b6 	bl	8013974 <memset>
 800a808:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a80c:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800a810:	e73d      	b.n	800a68e <rcl_wait_set_resize+0xd6>
 800a812:	6820      	ldr	r0, [r4, #0]
 800a814:	4649      	mov	r1, r9
 800a816:	47d8      	blx	fp
 800a818:	e9c4 7700 	strd	r7, r7, [r4]
 800a81c:	200a      	movs	r0, #10
 800a81e:	b003      	add	sp, #12
 800a820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a824:	4642      	mov	r2, r8
 800a826:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800a82a:	4641      	mov	r1, r8
 800a82c:	47b8      	blx	r7
 800a82e:	6120      	str	r0, [r4, #16]
 800a830:	2800      	cmp	r0, #0
 800a832:	d0f3      	beq.n	800a81c <rcl_wait_set_resize+0x264>
 800a834:	4642      	mov	r2, r8
 800a836:	4629      	mov	r1, r5
 800a838:	f009 f89c 	bl	8013974 <memset>
 800a83c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a840:	6166      	str	r6, [r4, #20]
 800a842:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 800a846:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800a84a:	e734      	b.n	800a6b6 <rcl_wait_set_resize+0xfe>
 800a84c:	009e      	lsls	r6, r3, #2
 800a84e:	4642      	mov	r2, r8
 800a850:	4631      	mov	r1, r6
 800a852:	47b8      	blx	r7
 800a854:	61a0      	str	r0, [r4, #24]
 800a856:	2800      	cmp	r0, #0
 800a858:	d0e0      	beq.n	800a81c <rcl_wait_set_resize+0x264>
 800a85a:	4632      	mov	r2, r6
 800a85c:	4629      	mov	r1, r5
 800a85e:	f009 f889 	bl	8013974 <memset>
 800a862:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a866:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a868:	61e3      	str	r3, [r4, #28]
 800a86a:	f8da 0020 	ldr.w	r0, [sl, #32]
 800a86e:	f8ca 501c 	str.w	r5, [sl, #28]
 800a872:	4642      	mov	r2, r8
 800a874:	4631      	mov	r1, r6
 800a876:	47b8      	blx	r7
 800a878:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a87a:	f8ca 0020 	str.w	r0, [sl, #32]
 800a87e:	6a1f      	ldr	r7, [r3, #32]
 800a880:	2f00      	cmp	r7, #0
 800a882:	d053      	beq.n	800a92c <rcl_wait_set_resize+0x374>
 800a884:	4632      	mov	r2, r6
 800a886:	4629      	mov	r1, r5
 800a888:	4638      	mov	r0, r7
 800a88a:	f009 f873 	bl	8013974 <memset>
 800a88e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a892:	e72a      	b.n	800a6ea <rcl_wait_set_resize+0x132>
 800a894:	b128      	cbz	r0, 800a8a2 <rcl_wait_set_resize+0x2ea>
 800a896:	4631      	mov	r1, r6
 800a898:	47b8      	blx	r7
 800a89a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a89c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a8a0:	6223      	str	r3, [r4, #32]
 800a8a2:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	f43f af52 	beq.w	800a750 <rcl_wait_set_resize+0x198>
 800a8ac:	4631      	mov	r1, r6
 800a8ae:	47b8      	blx	r7
 800a8b0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 800a8ba:	e749      	b.n	800a750 <rcl_wait_set_resize+0x198>
 800a8bc:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800a8c0:	4632      	mov	r2, r6
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	47c0      	blx	r8
 800a8c6:	62a0      	str	r0, [r4, #40]	@ 0x28
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	d0a7      	beq.n	800a81c <rcl_wait_set_resize+0x264>
 800a8cc:	464a      	mov	r2, r9
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	f009 f850 	bl	8013974 <memset>
 800a8d4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800a8d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a8dc:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 800a8e0:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 800a8e4:	4632      	mov	r2, r6
 800a8e6:	4649      	mov	r1, r9
 800a8e8:	47c0      	blx	r8
 800a8ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a8ec:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 800a8f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f2:	b34b      	cbz	r3, 800a948 <rcl_wait_set_resize+0x390>
 800a8f4:	464a      	mov	r2, r9
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f009 f83b 	bl	8013974 <memset>
 800a8fe:	e744      	b.n	800a78a <rcl_wait_set_resize+0x1d2>
 800a900:	200b      	movs	r0, #11
 800a902:	4770      	bx	lr
 800a904:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800a908:	e789      	b.n	800a81e <rcl_wait_set_resize+0x266>
 800a90a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a90c:	68a0      	ldr	r0, [r4, #8]
 800a90e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a910:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800a912:	4790      	blx	r2
 800a914:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a916:	6920      	ldr	r0, [r4, #16]
 800a918:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a91a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800a91c:	f8c4 800c 	str.w	r8, [r4, #12]
 800a920:	f8c4 8008 	str.w	r8, [r4, #8]
 800a924:	4790      	blx	r2
 800a926:	e9c4 8804 	strd	r8, r8, [r4, #16]
 800a92a:	e777      	b.n	800a81c <rcl_wait_set_resize+0x264>
 800a92c:	69a0      	ldr	r0, [r4, #24]
 800a92e:	4641      	mov	r1, r8
 800a930:	47c8      	blx	r9
 800a932:	e9c4 7706 	strd	r7, r7, [r4, #24]
 800a936:	e771      	b.n	800a81c <rcl_wait_set_resize+0x264>
 800a938:	6a20      	ldr	r0, [r4, #32]
 800a93a:	9301      	str	r3, [sp, #4]
 800a93c:	4631      	mov	r1, r6
 800a93e:	47b8      	blx	r7
 800a940:	9b01      	ldr	r3, [sp, #4]
 800a942:	e9c4 3308 	strd	r3, r3, [r4, #32]
 800a946:	e769      	b.n	800a81c <rcl_wait_set_resize+0x264>
 800a948:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a94a:	9301      	str	r3, [sp, #4]
 800a94c:	4631      	mov	r1, r6
 800a94e:	47b8      	blx	r7
 800a950:	9b01      	ldr	r3, [sp, #4]
 800a952:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 800a956:	e761      	b.n	800a81c <rcl_wait_set_resize+0x264>

0800a958 <rcl_wait_set_init>:
 800a958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a95c:	b084      	sub	sp, #16
 800a95e:	4604      	mov	r4, r0
 800a960:	a810      	add	r0, sp, #64	@ 0x40
 800a962:	460d      	mov	r5, r1
 800a964:	4690      	mov	r8, r2
 800a966:	461f      	mov	r7, r3
 800a968:	f7fd f9c0 	bl	8007cec <rcutils_allocator_is_valid>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	d068      	beq.n	800aa42 <rcl_wait_set_init+0xea>
 800a970:	2c00      	cmp	r4, #0
 800a972:	d066      	beq.n	800aa42 <rcl_wait_set_init+0xea>
 800a974:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800a976:	b126      	cbz	r6, 800a982 <rcl_wait_set_init+0x2a>
 800a978:	2564      	movs	r5, #100	@ 0x64
 800a97a:	4628      	mov	r0, r5
 800a97c:	b004      	add	sp, #16
 800a97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a982:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a984:	2b00      	cmp	r3, #0
 800a986:	d05c      	beq.n	800aa42 <rcl_wait_set_init+0xea>
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fe fbe5 	bl	8009158 <rcl_context_is_valid>
 800a98e:	2800      	cmp	r0, #0
 800a990:	d05c      	beq.n	800aa4c <rcl_wait_set_init+0xf4>
 800a992:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a994:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800a996:	205c      	movs	r0, #92	@ 0x5c
 800a998:	4798      	blx	r3
 800a99a:	6320      	str	r0, [r4, #48]	@ 0x30
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d059      	beq.n	800aa54 <rcl_wait_set_init+0xfc>
 800a9a0:	4631      	mov	r1, r6
 800a9a2:	225c      	movs	r2, #92	@ 0x5c
 800a9a4:	f008 ffe6 	bl	8013974 <memset>
 800a9a8:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 800a9ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9ae:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 800a9b2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 800a9b6:	eb03 0e02 	add.w	lr, r3, r2
 800a9ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9bc:	449e      	add	lr, r3
 800a9be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9c0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800a9c4:	f8d3 a000 	ldr.w	sl, [r3]
 800a9c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a9cc:	e9c9 6601 	strd	r6, r6, [r9, #4]
 800a9d0:	e9c9 6604 	strd	r6, r6, [r9, #16]
 800a9d4:	e9c9 6607 	strd	r6, r6, [r9, #28]
 800a9d8:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 800a9dc:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 800a9e0:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 800a9e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a9e6:	44c6      	add	lr, r8
 800a9e8:	f8dc 3000 	ldr.w	r3, [ip]
 800a9ec:	6033      	str	r3, [r6, #0]
 800a9ee:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 800a9f2:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 800a9f6:	f002 fde3 	bl	800d5c0 <rmw_create_wait_set>
 800a9fa:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 800a9fe:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800aa00:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800aa02:	b32b      	cbz	r3, 800aa50 <rcl_wait_set_init+0xf8>
 800aa04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa06:	9302      	str	r3, [sp, #8]
 800aa08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa0a:	9301      	str	r3, [sp, #4]
 800aa0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa0e:	9300      	str	r3, [sp, #0]
 800aa10:	4629      	mov	r1, r5
 800aa12:	463b      	mov	r3, r7
 800aa14:	4642      	mov	r2, r8
 800aa16:	4620      	mov	r0, r4
 800aa18:	f7ff fdce 	bl	800a5b8 <rcl_wait_set_resize>
 800aa1c:	4605      	mov	r5, r0
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	d0ab      	beq.n	800a97a <rcl_wait_set_init+0x22>
 800aa22:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800aa24:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800aa26:	b133      	cbz	r3, 800aa36 <rcl_wait_set_init+0xde>
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f002 fdd3 	bl	800d5d4 <rmw_destroy_wait_set>
 800aa2e:	b198      	cbz	r0, 800aa58 <rcl_wait_set_init+0x100>
 800aa30:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800aa32:	f44f 7561 	mov.w	r5, #900	@ 0x384
 800aa36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aa38:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800aa3a:	4798      	blx	r3
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	6323      	str	r3, [r4, #48]	@ 0x30
 800aa40:	e79b      	b.n	800a97a <rcl_wait_set_init+0x22>
 800aa42:	250b      	movs	r5, #11
 800aa44:	4628      	mov	r0, r5
 800aa46:	b004      	add	sp, #16
 800aa48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa4c:	2565      	movs	r5, #101	@ 0x65
 800aa4e:	e794      	b.n	800a97a <rcl_wait_set_init+0x22>
 800aa50:	250a      	movs	r5, #10
 800aa52:	e7f0      	b.n	800aa36 <rcl_wait_set_init+0xde>
 800aa54:	250a      	movs	r5, #10
 800aa56:	e790      	b.n	800a97a <rcl_wait_set_init+0x22>
 800aa58:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800aa5a:	e7ec      	b.n	800aa36 <rcl_wait_set_init+0xde>

0800aa5c <rcl_wait_set_add_guard_condition>:
 800aa5c:	b318      	cbz	r0, 800aaa6 <rcl_wait_set_add_guard_condition+0x4a>
 800aa5e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	4604      	mov	r4, r0
 800aa64:	b30b      	cbz	r3, 800aaaa <rcl_wait_set_add_guard_condition+0x4e>
 800aa66:	b319      	cbz	r1, 800aab0 <rcl_wait_set_add_guard_condition+0x54>
 800aa68:	68dd      	ldr	r5, [r3, #12]
 800aa6a:	68c0      	ldr	r0, [r0, #12]
 800aa6c:	4285      	cmp	r5, r0
 800aa6e:	d217      	bcs.n	800aaa0 <rcl_wait_set_add_guard_condition+0x44>
 800aa70:	68a0      	ldr	r0, [r4, #8]
 800aa72:	1c6e      	adds	r6, r5, #1
 800aa74:	60de      	str	r6, [r3, #12]
 800aa76:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800aa7a:	b102      	cbz	r2, 800aa7e <rcl_wait_set_add_guard_condition+0x22>
 800aa7c:	6015      	str	r5, [r2, #0]
 800aa7e:	4608      	mov	r0, r1
 800aa80:	f006 ff4e 	bl	8011920 <rcl_guard_condition_get_rmw_handle>
 800aa84:	b150      	cbz	r0, 800aa9c <rcl_wait_set_add_guard_condition+0x40>
 800aa86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800aa88:	6842      	ldr	r2, [r0, #4]
 800aa8a:	695b      	ldr	r3, [r3, #20]
 800aa8c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa90:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800aa92:	6913      	ldr	r3, [r2, #16]
 800aa94:	3301      	adds	r3, #1
 800aa96:	2000      	movs	r0, #0
 800aa98:	6113      	str	r3, [r2, #16]
 800aa9a:	bd70      	pop	{r4, r5, r6, pc}
 800aa9c:	2001      	movs	r0, #1
 800aa9e:	bd70      	pop	{r4, r5, r6, pc}
 800aaa0:	f240 3086 	movw	r0, #902	@ 0x386
 800aaa4:	bd70      	pop	{r4, r5, r6, pc}
 800aaa6:	200b      	movs	r0, #11
 800aaa8:	4770      	bx	lr
 800aaaa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800aaae:	bd70      	pop	{r4, r5, r6, pc}
 800aab0:	200b      	movs	r0, #11
 800aab2:	bd70      	pop	{r4, r5, r6, pc}

0800aab4 <rcl_wait_set_add_timer>:
 800aab4:	b328      	cbz	r0, 800ab02 <rcl_wait_set_add_timer+0x4e>
 800aab6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aab8:	b570      	push	{r4, r5, r6, lr}
 800aaba:	4604      	mov	r4, r0
 800aabc:	b31b      	cbz	r3, 800ab06 <rcl_wait_set_add_timer+0x52>
 800aabe:	b329      	cbz	r1, 800ab0c <rcl_wait_set_add_timer+0x58>
 800aac0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800aac2:	6965      	ldr	r5, [r4, #20]
 800aac4:	42a8      	cmp	r0, r5
 800aac6:	d219      	bcs.n	800aafc <rcl_wait_set_add_timer+0x48>
 800aac8:	6925      	ldr	r5, [r4, #16]
 800aaca:	1c46      	adds	r6, r0, #1
 800aacc:	641e      	str	r6, [r3, #64]	@ 0x40
 800aace:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 800aad2:	b102      	cbz	r2, 800aad6 <rcl_wait_set_add_timer+0x22>
 800aad4:	6010      	str	r0, [r2, #0]
 800aad6:	4608      	mov	r0, r1
 800aad8:	f7ff fbea 	bl	800a2b0 <rcl_timer_get_guard_condition>
 800aadc:	b160      	cbz	r0, 800aaf8 <rcl_wait_set_add_timer+0x44>
 800aade:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800aae0:	68e3      	ldr	r3, [r4, #12]
 800aae2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800aae4:	3b01      	subs	r3, #1
 800aae6:	441d      	add	r5, r3
 800aae8:	f006 ff1a 	bl	8011920 <rcl_guard_condition_get_rmw_handle>
 800aaec:	b180      	cbz	r0, 800ab10 <rcl_wait_set_add_timer+0x5c>
 800aaee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800aaf0:	6842      	ldr	r2, [r0, #4]
 800aaf2:	695b      	ldr	r3, [r3, #20]
 800aaf4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aaf8:	2000      	movs	r0, #0
 800aafa:	bd70      	pop	{r4, r5, r6, pc}
 800aafc:	f240 3086 	movw	r0, #902	@ 0x386
 800ab00:	bd70      	pop	{r4, r5, r6, pc}
 800ab02:	200b      	movs	r0, #11
 800ab04:	4770      	bx	lr
 800ab06:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	200b      	movs	r0, #11
 800ab0e:	bd70      	pop	{r4, r5, r6, pc}
 800ab10:	2001      	movs	r0, #1
 800ab12:	bd70      	pop	{r4, r5, r6, pc}

0800ab14 <rcl_wait_set_add_client>:
 800ab14:	b318      	cbz	r0, 800ab5e <rcl_wait_set_add_client+0x4a>
 800ab16:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ab18:	b570      	push	{r4, r5, r6, lr}
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	b30b      	cbz	r3, 800ab62 <rcl_wait_set_add_client+0x4e>
 800ab1e:	b319      	cbz	r1, 800ab68 <rcl_wait_set_add_client+0x54>
 800ab20:	699d      	ldr	r5, [r3, #24]
 800ab22:	69c0      	ldr	r0, [r0, #28]
 800ab24:	4285      	cmp	r5, r0
 800ab26:	d217      	bcs.n	800ab58 <rcl_wait_set_add_client+0x44>
 800ab28:	69a0      	ldr	r0, [r4, #24]
 800ab2a:	1c6e      	adds	r6, r5, #1
 800ab2c:	619e      	str	r6, [r3, #24]
 800ab2e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800ab32:	b102      	cbz	r2, 800ab36 <rcl_wait_set_add_client+0x22>
 800ab34:	6015      	str	r5, [r2, #0]
 800ab36:	4608      	mov	r0, r1
 800ab38:	f7fe fa26 	bl	8008f88 <rcl_client_get_rmw_handle>
 800ab3c:	b150      	cbz	r0, 800ab54 <rcl_wait_set_add_client+0x40>
 800ab3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ab40:	6842      	ldr	r2, [r0, #4]
 800ab42:	6a1b      	ldr	r3, [r3, #32]
 800ab44:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab48:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ab4a:	69d3      	ldr	r3, [r2, #28]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	2000      	movs	r0, #0
 800ab50:	61d3      	str	r3, [r2, #28]
 800ab52:	bd70      	pop	{r4, r5, r6, pc}
 800ab54:	2001      	movs	r0, #1
 800ab56:	bd70      	pop	{r4, r5, r6, pc}
 800ab58:	f240 3086 	movw	r0, #902	@ 0x386
 800ab5c:	bd70      	pop	{r4, r5, r6, pc}
 800ab5e:	200b      	movs	r0, #11
 800ab60:	4770      	bx	lr
 800ab62:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800ab66:	bd70      	pop	{r4, r5, r6, pc}
 800ab68:	200b      	movs	r0, #11
 800ab6a:	bd70      	pop	{r4, r5, r6, pc}

0800ab6c <rcl_wait_set_add_service>:
 800ab6c:	b318      	cbz	r0, 800abb6 <rcl_wait_set_add_service+0x4a>
 800ab6e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ab70:	b570      	push	{r4, r5, r6, lr}
 800ab72:	4604      	mov	r4, r0
 800ab74:	b30b      	cbz	r3, 800abba <rcl_wait_set_add_service+0x4e>
 800ab76:	b319      	cbz	r1, 800abc0 <rcl_wait_set_add_service+0x54>
 800ab78:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800ab7a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800ab7c:	4285      	cmp	r5, r0
 800ab7e:	d217      	bcs.n	800abb0 <rcl_wait_set_add_service+0x44>
 800ab80:	6a20      	ldr	r0, [r4, #32]
 800ab82:	1c6e      	adds	r6, r5, #1
 800ab84:	625e      	str	r6, [r3, #36]	@ 0x24
 800ab86:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800ab8a:	b102      	cbz	r2, 800ab8e <rcl_wait_set_add_service+0x22>
 800ab8c:	6015      	str	r5, [r2, #0]
 800ab8e:	4608      	mov	r0, r1
 800ab90:	f7fe ffa8 	bl	8009ae4 <rcl_service_get_rmw_handle>
 800ab94:	b150      	cbz	r0, 800abac <rcl_wait_set_add_service+0x40>
 800ab96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ab98:	6842      	ldr	r2, [r0, #4]
 800ab9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab9c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aba0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800aba2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800aba4:	3301      	adds	r3, #1
 800aba6:	2000      	movs	r0, #0
 800aba8:	6293      	str	r3, [r2, #40]	@ 0x28
 800abaa:	bd70      	pop	{r4, r5, r6, pc}
 800abac:	2001      	movs	r0, #1
 800abae:	bd70      	pop	{r4, r5, r6, pc}
 800abb0:	f240 3086 	movw	r0, #902	@ 0x386
 800abb4:	bd70      	pop	{r4, r5, r6, pc}
 800abb6:	200b      	movs	r0, #11
 800abb8:	4770      	bx	lr
 800abba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800abbe:	bd70      	pop	{r4, r5, r6, pc}
 800abc0:	200b      	movs	r0, #11
 800abc2:	bd70      	pop	{r4, r5, r6, pc}
 800abc4:	0000      	movs	r0, r0
	...

0800abc8 <rcl_wait>:
 800abc8:	2800      	cmp	r0, #0
 800abca:	f000 81d4 	beq.w	800af76 <rcl_wait+0x3ae>
 800abce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd2:	ed2d 8b02 	vpush	{d8}
 800abd6:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 800abd8:	b099      	sub	sp, #100	@ 0x64
 800abda:	4604      	mov	r4, r0
 800abdc:	2d00      	cmp	r5, #0
 800abde:	f000 8178 	beq.w	800aed2 <rcl_wait+0x30a>
 800abe2:	461f      	mov	r7, r3
 800abe4:	6843      	ldr	r3, [r0, #4]
 800abe6:	4690      	mov	r8, r2
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f000 809b 	beq.w	800ad24 <rcl_wait+0x15c>
 800abee:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 800abf0:	2e00      	cmp	r6, #0
 800abf2:	f000 80b2 	beq.w	800ad5a <rcl_wait+0x192>
 800abf6:	2100      	movs	r1, #0
 800abf8:	468c      	mov	ip, r1
 800abfa:	460a      	mov	r2, r1
 800abfc:	46a6      	mov	lr, r4
 800abfe:	f8de 3010 	ldr.w	r3, [lr, #16]
 800ac02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac06:	b173      	cbz	r3, 800ac26 <rcl_wait+0x5e>
 800ac08:	f8de 300c 	ldr.w	r3, [lr, #12]
 800ac0c:	6968      	ldr	r0, [r5, #20]
 800ac0e:	440b      	add	r3, r1
 800ac10:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800ac14:	b13c      	cbz	r4, 800ac26 <rcl_wait+0x5e>
 800ac16:	692b      	ldr	r3, [r5, #16]
 800ac18:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	612b      	str	r3, [r5, #16]
 800ac20:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 800ac24:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 800ac26:	3101      	adds	r1, #1
 800ac28:	f14c 0c00 	adc.w	ip, ip, #0
 800ac2c:	42b1      	cmp	r1, r6
 800ac2e:	f17c 0300 	sbcs.w	r3, ip, #0
 800ac32:	d3e4      	bcc.n	800abfe <rcl_wait+0x36>
 800ac34:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 800aee0 <rcl_wait+0x318>
 800ac38:	ea58 0307 	orrs.w	r3, r8, r7
 800ac3c:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 800ac40:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 800ac44:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 800ac48:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 800ac4c:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 800ac50:	4674      	mov	r4, lr
 800ac52:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 800ac56:	f000 8094 	beq.w	800ad82 <rcl_wait+0x1ba>
 800ac5a:	2e00      	cmp	r6, #0
 800ac5c:	f000 8145 	beq.w	800aeea <rcl_wait+0x322>
 800ac60:	2500      	movs	r5, #0
 800ac62:	46bb      	mov	fp, r7
 800ac64:	e02c      	b.n	800acc0 <rcl_wait+0xf8>
 800ac66:	6923      	ldr	r3, [r4, #16]
 800ac68:	f853 0009 	ldr.w	r0, [r3, r9]
 800ac6c:	a908      	add	r1, sp, #32
 800ac6e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800ac72:	f7ff fafb 	bl	800a26c <rcl_timer_get_next_call_time>
 800ac76:	f240 3321 	movw	r3, #801	@ 0x321
 800ac7a:	4298      	cmp	r0, r3
 800ac7c:	f000 80bb 	beq.w	800adf6 <rcl_wait+0x22e>
 800ac80:	2800      	cmp	r0, #0
 800ac82:	d165      	bne.n	800ad50 <rcl_wait+0x188>
 800ac84:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 800ac88:	7830      	ldrb	r0, [r6, #0]
 800ac8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac8c:	ab18      	add	r3, sp, #96	@ 0x60
 800ac8e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800ac92:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800ac96:	9205      	str	r2, [sp, #20]
 800ac98:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800ac9c:	4297      	cmp	r7, r2
 800ac9e:	9a05      	ldr	r2, [sp, #20]
 800aca0:	eb71 0202 	sbcs.w	r2, r1, r2
 800aca4:	da06      	bge.n	800acb4 <rcl_wait+0xec>
 800aca6:	e943 7108 	strd	r7, r1, [r3, #-32]
 800acaa:	ab18      	add	r3, sp, #96	@ 0x60
 800acac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800acb0:	f840 6c30 	str.w	r6, [r0, #-48]
 800acb4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800acb6:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 800acb8:	3501      	adds	r5, #1
 800acba:	42b5      	cmp	r5, r6
 800acbc:	f080 8114 	bcs.w	800aee8 <rcl_wait+0x320>
 800acc0:	6923      	ldr	r3, [r4, #16]
 800acc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acc6:	ea4f 0985 	mov.w	r9, r5, lsl #2
 800acca:	2800      	cmp	r0, #0
 800accc:	d0f4      	beq.n	800acb8 <rcl_wait+0xf0>
 800acce:	a907      	add	r1, sp, #28
 800acd0:	f7ff f9f8 	bl	800a0c4 <rcl_timer_clock>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2800      	cmp	r0, #0
 800acd8:	f040 8141 	bne.w	800af5e <rcl_wait+0x396>
 800acdc:	9807      	ldr	r0, [sp, #28]
 800acde:	7802      	ldrb	r2, [r0, #0]
 800ace0:	2a01      	cmp	r2, #1
 800ace2:	d1c0      	bne.n	800ac66 <rcl_wait+0x9e>
 800ace4:	f10d 011b 	add.w	r1, sp, #27
 800ace8:	f88d 301b 	strb.w	r3, [sp, #27]
 800acec:	f7ff f9da 	bl	800a0a4 <rcl_is_enabled_ros_time_override>
 800acf0:	4602      	mov	r2, r0
 800acf2:	2800      	cmp	r0, #0
 800acf4:	f040 8133 	bne.w	800af5e <rcl_wait+0x396>
 800acf8:	6923      	ldr	r3, [r4, #16]
 800acfa:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800acfe:	f853 0009 	ldr.w	r0, [r3, r9]
 800ad02:	2900      	cmp	r1, #0
 800ad04:	d0b0      	beq.n	800ac68 <rcl_wait+0xa0>
 800ad06:	ae08      	add	r6, sp, #32
 800ad08:	4631      	mov	r1, r6
 800ad0a:	f88d 2020 	strb.w	r2, [sp, #32]
 800ad0e:	f7ff fa73 	bl	800a1f8 <rcl_timer_is_ready>
 800ad12:	2800      	cmp	r0, #0
 800ad14:	f040 8123 	bne.w	800af5e <rcl_wait+0x396>
 800ad18:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d0c9      	beq.n	800acb4 <rcl_wait+0xec>
 800ad20:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ad22:	e02f      	b.n	800ad84 <rcl_wait+0x1bc>
 800ad24:	68c3      	ldr	r3, [r0, #12]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	f47f af61 	bne.w	800abee <rcl_wait+0x26>
 800ad2c:	6943      	ldr	r3, [r0, #20]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f47f af5d 	bne.w	800abee <rcl_wait+0x26>
 800ad34:	69c3      	ldr	r3, [r0, #28]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f47f af59 	bne.w	800abee <rcl_wait+0x26>
 800ad3c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f47f af55 	bne.w	800abee <rcl_wait+0x26>
 800ad44:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f47f af51 	bne.w	800abee <rcl_wait+0x26>
 800ad4c:	f240 3085 	movw	r0, #901	@ 0x385
 800ad50:	b019      	add	sp, #100	@ 0x64
 800ad52:	ecbd 8b02 	vpop	{d8}
 800ad56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad5a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ad5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad62:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 800ad66:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 800ad6a:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 800ad6e:	ea58 0307 	orrs.w	r3, r8, r7
 800ad72:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 800ad76:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 800ad7a:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 800ad7e:	f040 80b4 	bne.w	800aeea <rcl_wait+0x322>
 800ad82:	ae08      	add	r6, sp, #32
 800ad84:	2200      	movs	r2, #0
 800ad86:	2300      	movs	r3, #0
 800ad88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ad8c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800ad90:	9602      	str	r6, [sp, #8]
 800ad92:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 800ad94:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 800ad98:	e9cd 3200 	strd	r3, r2, [sp]
 800ad9c:	f105 0110 	add.w	r1, r5, #16
 800ada0:	f105 031c 	add.w	r3, r5, #28
 800ada4:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 800ada8:	1d28      	adds	r0, r5, #4
 800adaa:	f002 fa87 	bl	800d2bc <rmw_wait>
 800adae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800adb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800adb2:	4680      	mov	r8, r0
 800adb4:	b332      	cbz	r2, 800ae04 <rcl_wait+0x23c>
 800adb6:	2500      	movs	r5, #0
 800adb8:	462f      	mov	r7, r5
 800adba:	462e      	mov	r6, r5
 800adbc:	e007      	b.n	800adce <rcl_wait+0x206>
 800adbe:	6922      	ldr	r2, [r4, #16]
 800adc0:	f842 3009 	str.w	r3, [r2, r9]
 800adc4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800adc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800adc8:	3501      	adds	r5, #1
 800adca:	4295      	cmp	r5, r2
 800adcc:	d21b      	bcs.n	800ae06 <rcl_wait+0x23e>
 800adce:	6920      	ldr	r0, [r4, #16]
 800add0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 800add4:	a907      	add	r1, sp, #28
 800add6:	ea4f 0985 	mov.w	r9, r5, lsl #2
 800adda:	2800      	cmp	r0, #0
 800addc:	d0f4      	beq.n	800adc8 <rcl_wait+0x200>
 800adde:	f88d 601c 	strb.w	r6, [sp, #28]
 800ade2:	f7ff fa09 	bl	800a1f8 <rcl_timer_is_ready>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	d1b2      	bne.n	800ad50 <rcl_wait+0x188>
 800adea:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d0e5      	beq.n	800adbe <rcl_wait+0x1f6>
 800adf2:	461f      	mov	r7, r3
 800adf4:	e7e6      	b.n	800adc4 <rcl_wait+0x1fc>
 800adf6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800adf8:	6923      	ldr	r3, [r4, #16]
 800adfa:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 800adfc:	2200      	movs	r2, #0
 800adfe:	f843 2009 	str.w	r2, [r3, r9]
 800ae02:	e759      	b.n	800acb8 <rcl_wait+0xf0>
 800ae04:	4617      	mov	r7, r2
 800ae06:	f038 0002 	bics.w	r0, r8, #2
 800ae0a:	f040 80a8 	bne.w	800af5e <rcl_wait+0x396>
 800ae0e:	6866      	ldr	r6, [r4, #4]
 800ae10:	4602      	mov	r2, r0
 800ae12:	b91e      	cbnz	r6, 800ae1c <rcl_wait+0x254>
 800ae14:	e00d      	b.n	800ae32 <rcl_wait+0x26a>
 800ae16:	3201      	adds	r2, #1
 800ae18:	4296      	cmp	r6, r2
 800ae1a:	d00a      	beq.n	800ae32 <rcl_wait+0x26a>
 800ae1c:	6899      	ldr	r1, [r3, #8]
 800ae1e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800ae22:	2900      	cmp	r1, #0
 800ae24:	d1f7      	bne.n	800ae16 <rcl_wait+0x24e>
 800ae26:	6825      	ldr	r5, [r4, #0]
 800ae28:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 800ae2c:	3201      	adds	r2, #1
 800ae2e:	4296      	cmp	r6, r2
 800ae30:	d1f4      	bne.n	800ae1c <rcl_wait+0x254>
 800ae32:	68e6      	ldr	r6, [r4, #12]
 800ae34:	2200      	movs	r2, #0
 800ae36:	b91e      	cbnz	r6, 800ae40 <rcl_wait+0x278>
 800ae38:	e00d      	b.n	800ae56 <rcl_wait+0x28e>
 800ae3a:	3201      	adds	r2, #1
 800ae3c:	42b2      	cmp	r2, r6
 800ae3e:	d00a      	beq.n	800ae56 <rcl_wait+0x28e>
 800ae40:	6959      	ldr	r1, [r3, #20]
 800ae42:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800ae46:	2900      	cmp	r1, #0
 800ae48:	d1f7      	bne.n	800ae3a <rcl_wait+0x272>
 800ae4a:	68a5      	ldr	r5, [r4, #8]
 800ae4c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 800ae50:	3201      	adds	r2, #1
 800ae52:	42b2      	cmp	r2, r6
 800ae54:	d1f4      	bne.n	800ae40 <rcl_wait+0x278>
 800ae56:	69e6      	ldr	r6, [r4, #28]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	b91e      	cbnz	r6, 800ae64 <rcl_wait+0x29c>
 800ae5c:	e00d      	b.n	800ae7a <rcl_wait+0x2b2>
 800ae5e:	3201      	adds	r2, #1
 800ae60:	4296      	cmp	r6, r2
 800ae62:	d00a      	beq.n	800ae7a <rcl_wait+0x2b2>
 800ae64:	6a19      	ldr	r1, [r3, #32]
 800ae66:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800ae6a:	2900      	cmp	r1, #0
 800ae6c:	d1f7      	bne.n	800ae5e <rcl_wait+0x296>
 800ae6e:	69a5      	ldr	r5, [r4, #24]
 800ae70:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 800ae74:	3201      	adds	r2, #1
 800ae76:	4296      	cmp	r6, r2
 800ae78:	d1f4      	bne.n	800ae64 <rcl_wait+0x29c>
 800ae7a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	b91e      	cbnz	r6, 800ae88 <rcl_wait+0x2c0>
 800ae80:	e00d      	b.n	800ae9e <rcl_wait+0x2d6>
 800ae82:	3201      	adds	r2, #1
 800ae84:	42b2      	cmp	r2, r6
 800ae86:	d00a      	beq.n	800ae9e <rcl_wait+0x2d6>
 800ae88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ae8a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800ae8e:	2900      	cmp	r1, #0
 800ae90:	d1f7      	bne.n	800ae82 <rcl_wait+0x2ba>
 800ae92:	6a25      	ldr	r5, [r4, #32]
 800ae94:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 800ae98:	3201      	adds	r2, #1
 800ae9a:	42b2      	cmp	r2, r6
 800ae9c:	d1f4      	bne.n	800ae88 <rcl_wait+0x2c0>
 800ae9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aea0:	2200      	movs	r2, #0
 800aea2:	b91e      	cbnz	r6, 800aeac <rcl_wait+0x2e4>
 800aea4:	e00d      	b.n	800aec2 <rcl_wait+0x2fa>
 800aea6:	3201      	adds	r2, #1
 800aea8:	42b2      	cmp	r2, r6
 800aeaa:	d00a      	beq.n	800aec2 <rcl_wait+0x2fa>
 800aeac:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800aeae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800aeb2:	2900      	cmp	r1, #0
 800aeb4:	d1f7      	bne.n	800aea6 <rcl_wait+0x2de>
 800aeb6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800aeb8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 800aebc:	3201      	adds	r2, #1
 800aebe:	42b2      	cmp	r2, r6
 800aec0:	d1f4      	bne.n	800aeac <rcl_wait+0x2e4>
 800aec2:	f1b8 0f02 	cmp.w	r8, #2
 800aec6:	f47f af43 	bne.w	800ad50 <rcl_wait+0x188>
 800aeca:	f087 0701 	eor.w	r7, r7, #1
 800aece:	0078      	lsls	r0, r7, #1
 800aed0:	e73e      	b.n	800ad50 <rcl_wait+0x188>
 800aed2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800aed6:	b019      	add	sp, #100	@ 0x64
 800aed8:	ecbd 8b02 	vpop	{d8}
 800aedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee0:	ffffffff 	.word	0xffffffff
 800aee4:	7fffffff 	.word	0x7fffffff
 800aee8:	465f      	mov	r7, fp
 800aeea:	f1b8 0f01 	cmp.w	r8, #1
 800aeee:	f177 0300 	sbcs.w	r3, r7, #0
 800aef2:	db3a      	blt.n	800af6a <rcl_wait+0x3a2>
 800aef4:	2601      	movs	r6, #1
 800aef6:	ad10      	add	r5, sp, #64	@ 0x40
 800aef8:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 800aefc:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 800af00:	a908      	add	r1, sp, #32
 800af02:	b1a0      	cbz	r0, 800af2e <rcl_wait+0x366>
 800af04:	f7ff f8c2 	bl	800a08c <rcl_clock_get_now>
 800af08:	2800      	cmp	r0, #0
 800af0a:	f47f af21 	bne.w	800ad50 <rcl_wait+0x188>
 800af0e:	9a08      	ldr	r2, [sp, #32]
 800af10:	68ab      	ldr	r3, [r5, #8]
 800af12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af14:	1a9b      	subs	r3, r3, r2
 800af16:	68ea      	ldr	r2, [r5, #12]
 800af18:	eb62 0201 	sbc.w	r2, r2, r1
 800af1c:	4598      	cmp	r8, r3
 800af1e:	eb77 0102 	sbcs.w	r1, r7, r2
 800af22:	bfba      	itte	lt
 800af24:	4643      	movlt	r3, r8
 800af26:	463a      	movlt	r2, r7
 800af28:	2601      	movge	r6, #1
 800af2a:	4698      	mov	r8, r3
 800af2c:	4617      	mov	r7, r2
 800af2e:	3508      	adds	r5, #8
 800af30:	45a9      	cmp	r9, r5
 800af32:	d1e3      	bne.n	800aefc <rcl_wait+0x334>
 800af34:	2f00      	cmp	r7, #0
 800af36:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800af38:	bfab      	itete	ge
 800af3a:	4640      	movge	r0, r8
 800af3c:	2000      	movlt	r0, #0
 800af3e:	4639      	movge	r1, r7
 800af40:	2100      	movlt	r1, #0
 800af42:	2e00      	cmp	r6, #0
 800af44:	f43f af24 	beq.w	800ad90 <rcl_wait+0x1c8>
 800af48:	a30d      	add	r3, pc, #52	@ (adr r3, 800af80 <rcl_wait+0x3b8>)
 800af4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4e:	f7f5 f9af 	bl	80002b0 <__aeabi_ldivmod>
 800af52:	ae08      	add	r6, sp, #32
 800af54:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800af58:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800af5c:	e718      	b.n	800ad90 <rcl_wait+0x1c8>
 800af5e:	2001      	movs	r0, #1
 800af60:	b019      	add	sp, #100	@ 0x64
 800af62:	ecbd 8b02 	vpop	{d8}
 800af66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af6a:	2600      	movs	r6, #0
 800af6c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800af70:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800af74:	e7bf      	b.n	800aef6 <rcl_wait+0x32e>
 800af76:	200b      	movs	r0, #11
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	f3af 8000 	nop.w
 800af80:	3b9aca00 	.word	0x3b9aca00
 800af84:	00000000 	.word	0x00000000

0800af88 <rcl_action_take_goal_response>:
 800af88:	b3b0      	cbz	r0, 800aff8 <rcl_action_take_goal_response+0x70>
 800af8a:	b570      	push	{r4, r5, r6, lr}
 800af8c:	4604      	mov	r4, r0
 800af8e:	6800      	ldr	r0, [r0, #0]
 800af90:	b368      	cbz	r0, 800afee <rcl_action_take_goal_response+0x66>
 800af92:	460d      	mov	r5, r1
 800af94:	4616      	mov	r6, r2
 800af96:	f7fe f8bb 	bl	8009110 <rcl_client_is_valid>
 800af9a:	b330      	cbz	r0, 800afea <rcl_action_take_goal_response+0x62>
 800af9c:	6820      	ldr	r0, [r4, #0]
 800af9e:	3004      	adds	r0, #4
 800afa0:	f7fe f8b6 	bl	8009110 <rcl_client_is_valid>
 800afa4:	b308      	cbz	r0, 800afea <rcl_action_take_goal_response+0x62>
 800afa6:	6820      	ldr	r0, [r4, #0]
 800afa8:	3008      	adds	r0, #8
 800afaa:	f7fe f8b1 	bl	8009110 <rcl_client_is_valid>
 800afae:	b1e0      	cbz	r0, 800afea <rcl_action_take_goal_response+0x62>
 800afb0:	6820      	ldr	r0, [r4, #0]
 800afb2:	300c      	adds	r0, #12
 800afb4:	f7fe ffce 	bl	8009f54 <rcl_subscription_is_valid>
 800afb8:	b1b8      	cbz	r0, 800afea <rcl_action_take_goal_response+0x62>
 800afba:	6820      	ldr	r0, [r4, #0]
 800afbc:	3010      	adds	r0, #16
 800afbe:	f7fe ffc9 	bl	8009f54 <rcl_subscription_is_valid>
 800afc2:	b190      	cbz	r0, 800afea <rcl_action_take_goal_response+0x62>
 800afc4:	b1b5      	cbz	r5, 800aff4 <rcl_action_take_goal_response+0x6c>
 800afc6:	b1ae      	cbz	r6, 800aff4 <rcl_action_take_goal_response+0x6c>
 800afc8:	6820      	ldr	r0, [r4, #0]
 800afca:	4632      	mov	r2, r6
 800afcc:	4629      	mov	r1, r5
 800afce:	f7fe f833 	bl	8009038 <rcl_take_response>
 800afd2:	b148      	cbz	r0, 800afe8 <rcl_action_take_goal_response+0x60>
 800afd4:	280a      	cmp	r0, #10
 800afd6:	d007      	beq.n	800afe8 <rcl_action_take_goal_response+0x60>
 800afd8:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800afdc:	f241 0307 	movw	r3, #4103	@ 0x1007
 800afe0:	4290      	cmp	r0, r2
 800afe2:	bf0c      	ite	eq
 800afe4:	4618      	moveq	r0, r3
 800afe6:	2001      	movne	r0, #1
 800afe8:	bd70      	pop	{r4, r5, r6, pc}
 800afea:	f7fc fea9 	bl	8007d40 <rcutils_reset_error>
 800afee:	f241 0006 	movw	r0, #4102	@ 0x1006
 800aff2:	bd70      	pop	{r4, r5, r6, pc}
 800aff4:	200b      	movs	r0, #11
 800aff6:	bd70      	pop	{r4, r5, r6, pc}
 800aff8:	f241 0006 	movw	r0, #4102	@ 0x1006
 800affc:	4770      	bx	lr
 800affe:	bf00      	nop

0800b000 <rcl_action_send_result_request>:
 800b000:	b378      	cbz	r0, 800b062 <rcl_action_send_result_request+0x62>
 800b002:	b570      	push	{r4, r5, r6, lr}
 800b004:	4604      	mov	r4, r0
 800b006:	6800      	ldr	r0, [r0, #0]
 800b008:	b330      	cbz	r0, 800b058 <rcl_action_send_result_request+0x58>
 800b00a:	460d      	mov	r5, r1
 800b00c:	4616      	mov	r6, r2
 800b00e:	f7fe f87f 	bl	8009110 <rcl_client_is_valid>
 800b012:	b1f8      	cbz	r0, 800b054 <rcl_action_send_result_request+0x54>
 800b014:	6820      	ldr	r0, [r4, #0]
 800b016:	3004      	adds	r0, #4
 800b018:	f7fe f87a 	bl	8009110 <rcl_client_is_valid>
 800b01c:	b1d0      	cbz	r0, 800b054 <rcl_action_send_result_request+0x54>
 800b01e:	6820      	ldr	r0, [r4, #0]
 800b020:	3008      	adds	r0, #8
 800b022:	f7fe f875 	bl	8009110 <rcl_client_is_valid>
 800b026:	b1a8      	cbz	r0, 800b054 <rcl_action_send_result_request+0x54>
 800b028:	6820      	ldr	r0, [r4, #0]
 800b02a:	300c      	adds	r0, #12
 800b02c:	f7fe ff92 	bl	8009f54 <rcl_subscription_is_valid>
 800b030:	b180      	cbz	r0, 800b054 <rcl_action_send_result_request+0x54>
 800b032:	6820      	ldr	r0, [r4, #0]
 800b034:	3010      	adds	r0, #16
 800b036:	f7fe ff8d 	bl	8009f54 <rcl_subscription_is_valid>
 800b03a:	b158      	cbz	r0, 800b054 <rcl_action_send_result_request+0x54>
 800b03c:	b17d      	cbz	r5, 800b05e <rcl_action_send_result_request+0x5e>
 800b03e:	b176      	cbz	r6, 800b05e <rcl_action_send_result_request+0x5e>
 800b040:	6820      	ldr	r0, [r4, #0]
 800b042:	4632      	mov	r2, r6
 800b044:	4629      	mov	r1, r5
 800b046:	3008      	adds	r0, #8
 800b048:	f7fd ffa4 	bl	8008f94 <rcl_send_request>
 800b04c:	3800      	subs	r0, #0
 800b04e:	bf18      	it	ne
 800b050:	2001      	movne	r0, #1
 800b052:	bd70      	pop	{r4, r5, r6, pc}
 800b054:	f7fc fe74 	bl	8007d40 <rcutils_reset_error>
 800b058:	f241 0006 	movw	r0, #4102	@ 0x1006
 800b05c:	bd70      	pop	{r4, r5, r6, pc}
 800b05e:	200b      	movs	r0, #11
 800b060:	bd70      	pop	{r4, r5, r6, pc}
 800b062:	f241 0006 	movw	r0, #4102	@ 0x1006
 800b066:	4770      	bx	lr

0800b068 <rcl_action_take_result_response>:
 800b068:	2800      	cmp	r0, #0
 800b06a:	d037      	beq.n	800b0dc <rcl_action_take_result_response+0x74>
 800b06c:	b570      	push	{r4, r5, r6, lr}
 800b06e:	4604      	mov	r4, r0
 800b070:	6800      	ldr	r0, [r0, #0]
 800b072:	b370      	cbz	r0, 800b0d2 <rcl_action_take_result_response+0x6a>
 800b074:	460d      	mov	r5, r1
 800b076:	4616      	mov	r6, r2
 800b078:	f7fe f84a 	bl	8009110 <rcl_client_is_valid>
 800b07c:	b338      	cbz	r0, 800b0ce <rcl_action_take_result_response+0x66>
 800b07e:	6820      	ldr	r0, [r4, #0]
 800b080:	3004      	adds	r0, #4
 800b082:	f7fe f845 	bl	8009110 <rcl_client_is_valid>
 800b086:	b310      	cbz	r0, 800b0ce <rcl_action_take_result_response+0x66>
 800b088:	6820      	ldr	r0, [r4, #0]
 800b08a:	3008      	adds	r0, #8
 800b08c:	f7fe f840 	bl	8009110 <rcl_client_is_valid>
 800b090:	b1e8      	cbz	r0, 800b0ce <rcl_action_take_result_response+0x66>
 800b092:	6820      	ldr	r0, [r4, #0]
 800b094:	300c      	adds	r0, #12
 800b096:	f7fe ff5d 	bl	8009f54 <rcl_subscription_is_valid>
 800b09a:	b1c0      	cbz	r0, 800b0ce <rcl_action_take_result_response+0x66>
 800b09c:	6820      	ldr	r0, [r4, #0]
 800b09e:	3010      	adds	r0, #16
 800b0a0:	f7fe ff58 	bl	8009f54 <rcl_subscription_is_valid>
 800b0a4:	b198      	cbz	r0, 800b0ce <rcl_action_take_result_response+0x66>
 800b0a6:	b1bd      	cbz	r5, 800b0d8 <rcl_action_take_result_response+0x70>
 800b0a8:	b1b6      	cbz	r6, 800b0d8 <rcl_action_take_result_response+0x70>
 800b0aa:	6820      	ldr	r0, [r4, #0]
 800b0ac:	4632      	mov	r2, r6
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	3008      	adds	r0, #8
 800b0b2:	f7fd ffc1 	bl	8009038 <rcl_take_response>
 800b0b6:	b148      	cbz	r0, 800b0cc <rcl_action_take_result_response+0x64>
 800b0b8:	280a      	cmp	r0, #10
 800b0ba:	d007      	beq.n	800b0cc <rcl_action_take_result_response+0x64>
 800b0bc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800b0c0:	f241 0307 	movw	r3, #4103	@ 0x1007
 800b0c4:	4290      	cmp	r0, r2
 800b0c6:	bf0c      	ite	eq
 800b0c8:	4618      	moveq	r0, r3
 800b0ca:	2001      	movne	r0, #1
 800b0cc:	bd70      	pop	{r4, r5, r6, pc}
 800b0ce:	f7fc fe37 	bl	8007d40 <rcutils_reset_error>
 800b0d2:	f241 0006 	movw	r0, #4102	@ 0x1006
 800b0d6:	bd70      	pop	{r4, r5, r6, pc}
 800b0d8:	200b      	movs	r0, #11
 800b0da:	bd70      	pop	{r4, r5, r6, pc}
 800b0dc:	f241 0006 	movw	r0, #4102	@ 0x1006
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop

0800b0e4 <rcl_action_take_cancel_response>:
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d037      	beq.n	800b158 <rcl_action_take_cancel_response+0x74>
 800b0e8:	b570      	push	{r4, r5, r6, lr}
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	6800      	ldr	r0, [r0, #0]
 800b0ee:	b370      	cbz	r0, 800b14e <rcl_action_take_cancel_response+0x6a>
 800b0f0:	460d      	mov	r5, r1
 800b0f2:	4616      	mov	r6, r2
 800b0f4:	f7fe f80c 	bl	8009110 <rcl_client_is_valid>
 800b0f8:	b338      	cbz	r0, 800b14a <rcl_action_take_cancel_response+0x66>
 800b0fa:	6820      	ldr	r0, [r4, #0]
 800b0fc:	3004      	adds	r0, #4
 800b0fe:	f7fe f807 	bl	8009110 <rcl_client_is_valid>
 800b102:	b310      	cbz	r0, 800b14a <rcl_action_take_cancel_response+0x66>
 800b104:	6820      	ldr	r0, [r4, #0]
 800b106:	3008      	adds	r0, #8
 800b108:	f7fe f802 	bl	8009110 <rcl_client_is_valid>
 800b10c:	b1e8      	cbz	r0, 800b14a <rcl_action_take_cancel_response+0x66>
 800b10e:	6820      	ldr	r0, [r4, #0]
 800b110:	300c      	adds	r0, #12
 800b112:	f7fe ff1f 	bl	8009f54 <rcl_subscription_is_valid>
 800b116:	b1c0      	cbz	r0, 800b14a <rcl_action_take_cancel_response+0x66>
 800b118:	6820      	ldr	r0, [r4, #0]
 800b11a:	3010      	adds	r0, #16
 800b11c:	f7fe ff1a 	bl	8009f54 <rcl_subscription_is_valid>
 800b120:	b198      	cbz	r0, 800b14a <rcl_action_take_cancel_response+0x66>
 800b122:	b1bd      	cbz	r5, 800b154 <rcl_action_take_cancel_response+0x70>
 800b124:	b1b6      	cbz	r6, 800b154 <rcl_action_take_cancel_response+0x70>
 800b126:	6820      	ldr	r0, [r4, #0]
 800b128:	4632      	mov	r2, r6
 800b12a:	4629      	mov	r1, r5
 800b12c:	3004      	adds	r0, #4
 800b12e:	f7fd ff83 	bl	8009038 <rcl_take_response>
 800b132:	b148      	cbz	r0, 800b148 <rcl_action_take_cancel_response+0x64>
 800b134:	280a      	cmp	r0, #10
 800b136:	d007      	beq.n	800b148 <rcl_action_take_cancel_response+0x64>
 800b138:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800b13c:	f241 0307 	movw	r3, #4103	@ 0x1007
 800b140:	4290      	cmp	r0, r2
 800b142:	bf0c      	ite	eq
 800b144:	4618      	moveq	r0, r3
 800b146:	2001      	movne	r0, #1
 800b148:	bd70      	pop	{r4, r5, r6, pc}
 800b14a:	f7fc fdf9 	bl	8007d40 <rcutils_reset_error>
 800b14e:	f241 0006 	movw	r0, #4102	@ 0x1006
 800b152:	bd70      	pop	{r4, r5, r6, pc}
 800b154:	200b      	movs	r0, #11
 800b156:	bd70      	pop	{r4, r5, r6, pc}
 800b158:	f241 0006 	movw	r0, #4102	@ 0x1006
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop

0800b160 <rcl_action_take_feedback>:
 800b160:	2800      	cmp	r0, #0
 800b162:	d037      	beq.n	800b1d4 <rcl_action_take_feedback+0x74>
 800b164:	b530      	push	{r4, r5, lr}
 800b166:	4604      	mov	r4, r0
 800b168:	6800      	ldr	r0, [r0, #0]
 800b16a:	b08f      	sub	sp, #60	@ 0x3c
 800b16c:	b358      	cbz	r0, 800b1c6 <rcl_action_take_feedback+0x66>
 800b16e:	460d      	mov	r5, r1
 800b170:	f7fd ffce 	bl	8009110 <rcl_client_is_valid>
 800b174:	b328      	cbz	r0, 800b1c2 <rcl_action_take_feedback+0x62>
 800b176:	6820      	ldr	r0, [r4, #0]
 800b178:	3004      	adds	r0, #4
 800b17a:	f7fd ffc9 	bl	8009110 <rcl_client_is_valid>
 800b17e:	b300      	cbz	r0, 800b1c2 <rcl_action_take_feedback+0x62>
 800b180:	6820      	ldr	r0, [r4, #0]
 800b182:	3008      	adds	r0, #8
 800b184:	f7fd ffc4 	bl	8009110 <rcl_client_is_valid>
 800b188:	b1d8      	cbz	r0, 800b1c2 <rcl_action_take_feedback+0x62>
 800b18a:	6820      	ldr	r0, [r4, #0]
 800b18c:	300c      	adds	r0, #12
 800b18e:	f7fe fee1 	bl	8009f54 <rcl_subscription_is_valid>
 800b192:	b1b0      	cbz	r0, 800b1c2 <rcl_action_take_feedback+0x62>
 800b194:	6820      	ldr	r0, [r4, #0]
 800b196:	3010      	adds	r0, #16
 800b198:	f7fe fedc 	bl	8009f54 <rcl_subscription_is_valid>
 800b19c:	b188      	cbz	r0, 800b1c2 <rcl_action_take_feedback+0x62>
 800b19e:	b1b5      	cbz	r5, 800b1ce <rcl_action_take_feedback+0x6e>
 800b1a0:	6820      	ldr	r0, [r4, #0]
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	466a      	mov	r2, sp
 800b1a6:	4629      	mov	r1, r5
 800b1a8:	300c      	adds	r0, #12
 800b1aa:	f7fe fe75 	bl	8009e98 <rcl_take>
 800b1ae:	b160      	cbz	r0, 800b1ca <rcl_action_take_feedback+0x6a>
 800b1b0:	f240 1391 	movw	r3, #401	@ 0x191
 800b1b4:	4298      	cmp	r0, r3
 800b1b6:	d010      	beq.n	800b1da <rcl_action_take_feedback+0x7a>
 800b1b8:	280a      	cmp	r0, #10
 800b1ba:	bf18      	it	ne
 800b1bc:	2001      	movne	r0, #1
 800b1be:	b00f      	add	sp, #60	@ 0x3c
 800b1c0:	bd30      	pop	{r4, r5, pc}
 800b1c2:	f7fc fdbd 	bl	8007d40 <rcutils_reset_error>
 800b1c6:	f241 0006 	movw	r0, #4102	@ 0x1006
 800b1ca:	b00f      	add	sp, #60	@ 0x3c
 800b1cc:	bd30      	pop	{r4, r5, pc}
 800b1ce:	200b      	movs	r0, #11
 800b1d0:	b00f      	add	sp, #60	@ 0x3c
 800b1d2:	bd30      	pop	{r4, r5, pc}
 800b1d4:	f241 0006 	movw	r0, #4102	@ 0x1006
 800b1d8:	4770      	bx	lr
 800b1da:	f241 0007 	movw	r0, #4103	@ 0x1007
 800b1de:	e7f4      	b.n	800b1ca <rcl_action_take_feedback+0x6a>

0800b1e0 <rcl_action_wait_set_add_action_client>:
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	d045      	beq.n	800b270 <rcl_action_wait_set_add_action_client+0x90>
 800b1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e6:	460c      	mov	r4, r1
 800b1e8:	2900      	cmp	r1, #0
 800b1ea:	d03e      	beq.n	800b26a <rcl_action_wait_set_add_action_client+0x8a>
 800b1ec:	4605      	mov	r5, r0
 800b1ee:	6808      	ldr	r0, [r1, #0]
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d03a      	beq.n	800b26a <rcl_action_wait_set_add_action_client+0x8a>
 800b1f4:	4617      	mov	r7, r2
 800b1f6:	461e      	mov	r6, r3
 800b1f8:	f7fd ff8a 	bl	8009110 <rcl_client_is_valid>
 800b1fc:	b398      	cbz	r0, 800b266 <rcl_action_wait_set_add_action_client+0x86>
 800b1fe:	6820      	ldr	r0, [r4, #0]
 800b200:	3004      	adds	r0, #4
 800b202:	f7fd ff85 	bl	8009110 <rcl_client_is_valid>
 800b206:	b370      	cbz	r0, 800b266 <rcl_action_wait_set_add_action_client+0x86>
 800b208:	6820      	ldr	r0, [r4, #0]
 800b20a:	3008      	adds	r0, #8
 800b20c:	f7fd ff80 	bl	8009110 <rcl_client_is_valid>
 800b210:	b348      	cbz	r0, 800b266 <rcl_action_wait_set_add_action_client+0x86>
 800b212:	6820      	ldr	r0, [r4, #0]
 800b214:	300c      	adds	r0, #12
 800b216:	f7fe fe9d 	bl	8009f54 <rcl_subscription_is_valid>
 800b21a:	b320      	cbz	r0, 800b266 <rcl_action_wait_set_add_action_client+0x86>
 800b21c:	6820      	ldr	r0, [r4, #0]
 800b21e:	3010      	adds	r0, #16
 800b220:	f7fe fe98 	bl	8009f54 <rcl_subscription_is_valid>
 800b224:	b1f8      	cbz	r0, 800b266 <rcl_action_wait_set_add_action_client+0x86>
 800b226:	6821      	ldr	r1, [r4, #0]
 800b228:	4628      	mov	r0, r5
 800b22a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 800b22e:	f7ff fc71 	bl	800ab14 <rcl_wait_set_add_client>
 800b232:	b9b8      	cbnz	r0, 800b264 <rcl_action_wait_set_add_action_client+0x84>
 800b234:	6821      	ldr	r1, [r4, #0]
 800b236:	4628      	mov	r0, r5
 800b238:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 800b23c:	3104      	adds	r1, #4
 800b23e:	f7ff fc69 	bl	800ab14 <rcl_wait_set_add_client>
 800b242:	b978      	cbnz	r0, 800b264 <rcl_action_wait_set_add_action_client+0x84>
 800b244:	6821      	ldr	r1, [r4, #0]
 800b246:	4628      	mov	r0, r5
 800b248:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 800b24c:	3108      	adds	r1, #8
 800b24e:	f7ff fc61 	bl	800ab14 <rcl_wait_set_add_client>
 800b252:	b938      	cbnz	r0, 800b264 <rcl_action_wait_set_add_action_client+0x84>
 800b254:	6821      	ldr	r1, [r4, #0]
 800b256:	4628      	mov	r0, r5
 800b258:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 800b25c:	310c      	adds	r1, #12
 800b25e:	f7ff f903 	bl	800a468 <rcl_wait_set_add_subscription>
 800b262:	b140      	cbz	r0, 800b276 <rcl_action_wait_set_add_action_client+0x96>
 800b264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b266:	f7fc fd6b 	bl	8007d40 <rcutils_reset_error>
 800b26a:	f241 0006 	movw	r0, #4102	@ 0x1006
 800b26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b270:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800b274:	4770      	bx	lr
 800b276:	6821      	ldr	r1, [r4, #0]
 800b278:	4628      	mov	r0, r5
 800b27a:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 800b27e:	3110      	adds	r1, #16
 800b280:	f7ff f8f2 	bl	800a468 <rcl_wait_set_add_subscription>
 800b284:	2800      	cmp	r0, #0
 800b286:	d1ed      	bne.n	800b264 <rcl_action_wait_set_add_action_client+0x84>
 800b288:	b11f      	cbz	r7, 800b292 <rcl_action_wait_set_add_action_client+0xb2>
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800b290:	603b      	str	r3, [r7, #0]
 800b292:	2e00      	cmp	r6, #0
 800b294:	d0e6      	beq.n	800b264 <rcl_action_wait_set_add_action_client+0x84>
 800b296:	6823      	ldr	r3, [r4, #0]
 800b298:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800b29c:	6033      	str	r3, [r6, #0]
 800b29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2a0 <rcl_action_client_wait_set_get_entities_ready>:
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	f000 8089 	beq.w	800b3b8 <rcl_action_client_wait_set_get_entities_ready+0x118>
 800b2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2aa:	460c      	mov	r4, r1
 800b2ac:	2900      	cmp	r1, #0
 800b2ae:	d079      	beq.n	800b3a4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 800b2b0:	4605      	mov	r5, r0
 800b2b2:	6808      	ldr	r0, [r1, #0]
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d075      	beq.n	800b3a4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 800b2b8:	4616      	mov	r6, r2
 800b2ba:	461f      	mov	r7, r3
 800b2bc:	f7fd ff28 	bl	8009110 <rcl_client_is_valid>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d06d      	beq.n	800b3a0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800b2c4:	6820      	ldr	r0, [r4, #0]
 800b2c6:	3004      	adds	r0, #4
 800b2c8:	f7fd ff22 	bl	8009110 <rcl_client_is_valid>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d067      	beq.n	800b3a0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800b2d0:	6820      	ldr	r0, [r4, #0]
 800b2d2:	3008      	adds	r0, #8
 800b2d4:	f7fd ff1c 	bl	8009110 <rcl_client_is_valid>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d061      	beq.n	800b3a0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800b2dc:	6820      	ldr	r0, [r4, #0]
 800b2de:	300c      	adds	r0, #12
 800b2e0:	f7fe fe38 	bl	8009f54 <rcl_subscription_is_valid>
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	d05b      	beq.n	800b3a0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800b2e8:	6820      	ldr	r0, [r4, #0]
 800b2ea:	3010      	adds	r0, #16
 800b2ec:	f7fe fe32 	bl	8009f54 <rcl_subscription_is_valid>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d055      	beq.n	800b3a0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800b2f4:	2e00      	cmp	r6, #0
 800b2f6:	d05c      	beq.n	800b3b2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 800b2f8:	2f00      	cmp	r7, #0
 800b2fa:	d05a      	beq.n	800b3b2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 800b2fc:	9b06      	ldr	r3, [sp, #24]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d057      	beq.n	800b3b2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 800b302:	9b07      	ldr	r3, [sp, #28]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d054      	beq.n	800b3b2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 800b308:	9b08      	ldr	r3, [sp, #32]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d051      	beq.n	800b3b2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 800b30e:	6823      	ldr	r3, [r4, #0]
 800b310:	686a      	ldr	r2, [r5, #4]
 800b312:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 800b316:	428a      	cmp	r2, r1
 800b318:	d948      	bls.n	800b3ac <rcl_action_client_wait_set_get_entities_ready+0x10c>
 800b31a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 800b31e:	4282      	cmp	r2, r0
 800b320:	d944      	bls.n	800b3ac <rcl_action_client_wait_set_get_entities_ready+0x10c>
 800b322:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 800b326:	69ea      	ldr	r2, [r5, #28]
 800b328:	42a2      	cmp	r2, r4
 800b32a:	d93f      	bls.n	800b3ac <rcl_action_client_wait_set_get_entities_ready+0x10c>
 800b32c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 800b330:	4562      	cmp	r2, ip
 800b332:	d93b      	bls.n	800b3ac <rcl_action_client_wait_set_get_entities_ready+0x10c>
 800b334:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 800b338:	4572      	cmp	r2, lr
 800b33a:	d937      	bls.n	800b3ac <rcl_action_client_wait_set_get_entities_ready+0x10c>
 800b33c:	69aa      	ldr	r2, [r5, #24]
 800b33e:	682d      	ldr	r5, [r5, #0]
 800b340:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 800b344:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800b348:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 800b34c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 800b350:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 800b354:	f103 0c0c 	add.w	ip, r3, #12
 800b358:	eba5 050c 	sub.w	r5, r5, ip
 800b35c:	fab5 f585 	clz	r5, r5
 800b360:	096d      	lsrs	r5, r5, #5
 800b362:	7035      	strb	r5, [r6, #0]
 800b364:	f103 0510 	add.w	r5, r3, #16
 800b368:	1b64      	subs	r4, r4, r5
 800b36a:	fab4 f484 	clz	r4, r4
 800b36e:	0964      	lsrs	r4, r4, #5
 800b370:	703c      	strb	r4, [r7, #0]
 800b372:	eba3 0008 	sub.w	r0, r3, r8
 800b376:	1d1c      	adds	r4, r3, #4
 800b378:	3308      	adds	r3, #8
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	fab0 f080 	clz	r0, r0
 800b380:	9a06      	ldr	r2, [sp, #24]
 800b382:	0940      	lsrs	r0, r0, #5
 800b384:	1b09      	subs	r1, r1, r4
 800b386:	7010      	strb	r0, [r2, #0]
 800b388:	fab1 f181 	clz	r1, r1
 800b38c:	9a07      	ldr	r2, [sp, #28]
 800b38e:	0949      	lsrs	r1, r1, #5
 800b390:	7011      	strb	r1, [r2, #0]
 800b392:	fab3 f383 	clz	r3, r3
 800b396:	9a08      	ldr	r2, [sp, #32]
 800b398:	095b      	lsrs	r3, r3, #5
 800b39a:	2000      	movs	r0, #0
 800b39c:	7013      	strb	r3, [r2, #0]
 800b39e:	e003      	b.n	800b3a8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800b3a0:	f7fc fcce 	bl	8007d40 <rcutils_reset_error>
 800b3a4:	f241 0006 	movw	r0, #4102	@ 0x1006
 800b3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ac:	2001      	movs	r0, #1
 800b3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3b2:	200b      	movs	r0, #11
 800b3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3b8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop

0800b3c0 <rcl_action_take_goal_request>:
 800b3c0:	b3b0      	cbz	r0, 800b430 <rcl_action_take_goal_request+0x70>
 800b3c2:	b570      	push	{r4, r5, r6, lr}
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	6800      	ldr	r0, [r0, #0]
 800b3c8:	b368      	cbz	r0, 800b426 <rcl_action_take_goal_request+0x66>
 800b3ca:	460d      	mov	r5, r1
 800b3cc:	4616      	mov	r6, r2
 800b3ce:	f7fe fc0f 	bl	8009bf0 <rcl_service_is_valid>
 800b3d2:	b330      	cbz	r0, 800b422 <rcl_action_take_goal_request+0x62>
 800b3d4:	6820      	ldr	r0, [r4, #0]
 800b3d6:	3004      	adds	r0, #4
 800b3d8:	f7fe fc0a 	bl	8009bf0 <rcl_service_is_valid>
 800b3dc:	b308      	cbz	r0, 800b422 <rcl_action_take_goal_request+0x62>
 800b3de:	6820      	ldr	r0, [r4, #0]
 800b3e0:	3008      	adds	r0, #8
 800b3e2:	f7fe fc05 	bl	8009bf0 <rcl_service_is_valid>
 800b3e6:	b1e0      	cbz	r0, 800b422 <rcl_action_take_goal_request+0x62>
 800b3e8:	6820      	ldr	r0, [r4, #0]
 800b3ea:	300c      	adds	r0, #12
 800b3ec:	f006 fac4 	bl	8011978 <rcl_publisher_is_valid>
 800b3f0:	b1b8      	cbz	r0, 800b422 <rcl_action_take_goal_request+0x62>
 800b3f2:	6820      	ldr	r0, [r4, #0]
 800b3f4:	3010      	adds	r0, #16
 800b3f6:	f006 fabf 	bl	8011978 <rcl_publisher_is_valid>
 800b3fa:	b190      	cbz	r0, 800b422 <rcl_action_take_goal_request+0x62>
 800b3fc:	b1b5      	cbz	r5, 800b42c <rcl_action_take_goal_request+0x6c>
 800b3fe:	b1ae      	cbz	r6, 800b42c <rcl_action_take_goal_request+0x6c>
 800b400:	6820      	ldr	r0, [r4, #0]
 800b402:	4632      	mov	r2, r6
 800b404:	4629      	mov	r1, r5
 800b406:	f7fe fb73 	bl	8009af0 <rcl_take_request>
 800b40a:	b148      	cbz	r0, 800b420 <rcl_action_take_goal_request+0x60>
 800b40c:	280a      	cmp	r0, #10
 800b40e:	d007      	beq.n	800b420 <rcl_action_take_goal_request+0x60>
 800b410:	f240 2259 	movw	r2, #601	@ 0x259
 800b414:	f241 0369 	movw	r3, #4201	@ 0x1069
 800b418:	4290      	cmp	r0, r2
 800b41a:	bf0c      	ite	eq
 800b41c:	4618      	moveq	r0, r3
 800b41e:	2001      	movne	r0, #1
 800b420:	bd70      	pop	{r4, r5, r6, pc}
 800b422:	f7fc fc8d 	bl	8007d40 <rcutils_reset_error>
 800b426:	f241 0068 	movw	r0, #4200	@ 0x1068
 800b42a:	bd70      	pop	{r4, r5, r6, pc}
 800b42c:	200b      	movs	r0, #11
 800b42e:	bd70      	pop	{r4, r5, r6, pc}
 800b430:	f241 0068 	movw	r0, #4200	@ 0x1068
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop

0800b438 <rcl_action_send_goal_response>:
 800b438:	b378      	cbz	r0, 800b49a <rcl_action_send_goal_response+0x62>
 800b43a:	b570      	push	{r4, r5, r6, lr}
 800b43c:	4604      	mov	r4, r0
 800b43e:	6800      	ldr	r0, [r0, #0]
 800b440:	b330      	cbz	r0, 800b490 <rcl_action_send_goal_response+0x58>
 800b442:	460d      	mov	r5, r1
 800b444:	4616      	mov	r6, r2
 800b446:	f7fe fbd3 	bl	8009bf0 <rcl_service_is_valid>
 800b44a:	b1f8      	cbz	r0, 800b48c <rcl_action_send_goal_response+0x54>
 800b44c:	6820      	ldr	r0, [r4, #0]
 800b44e:	3004      	adds	r0, #4
 800b450:	f7fe fbce 	bl	8009bf0 <rcl_service_is_valid>
 800b454:	b1d0      	cbz	r0, 800b48c <rcl_action_send_goal_response+0x54>
 800b456:	6820      	ldr	r0, [r4, #0]
 800b458:	3008      	adds	r0, #8
 800b45a:	f7fe fbc9 	bl	8009bf0 <rcl_service_is_valid>
 800b45e:	b1a8      	cbz	r0, 800b48c <rcl_action_send_goal_response+0x54>
 800b460:	6820      	ldr	r0, [r4, #0]
 800b462:	300c      	adds	r0, #12
 800b464:	f006 fa88 	bl	8011978 <rcl_publisher_is_valid>
 800b468:	b180      	cbz	r0, 800b48c <rcl_action_send_goal_response+0x54>
 800b46a:	6820      	ldr	r0, [r4, #0]
 800b46c:	3010      	adds	r0, #16
 800b46e:	f006 fa83 	bl	8011978 <rcl_publisher_is_valid>
 800b472:	b158      	cbz	r0, 800b48c <rcl_action_send_goal_response+0x54>
 800b474:	b17d      	cbz	r5, 800b496 <rcl_action_send_goal_response+0x5e>
 800b476:	b176      	cbz	r6, 800b496 <rcl_action_send_goal_response+0x5e>
 800b478:	6820      	ldr	r0, [r4, #0]
 800b47a:	4632      	mov	r2, r6
 800b47c:	4629      	mov	r1, r5
 800b47e:	f7fe fb87 	bl	8009b90 <rcl_send_response>
 800b482:	b110      	cbz	r0, 800b48a <rcl_action_send_goal_response+0x52>
 800b484:	2802      	cmp	r0, #2
 800b486:	bf18      	it	ne
 800b488:	2001      	movne	r0, #1
 800b48a:	bd70      	pop	{r4, r5, r6, pc}
 800b48c:	f7fc fc58 	bl	8007d40 <rcutils_reset_error>
 800b490:	f241 0068 	movw	r0, #4200	@ 0x1068
 800b494:	bd70      	pop	{r4, r5, r6, pc}
 800b496:	200b      	movs	r0, #11
 800b498:	bd70      	pop	{r4, r5, r6, pc}
 800b49a:	f241 0068 	movw	r0, #4200	@ 0x1068
 800b49e:	4770      	bx	lr

0800b4a0 <rcl_action_take_result_request>:
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d037      	beq.n	800b514 <rcl_action_take_result_request+0x74>
 800b4a4:	b570      	push	{r4, r5, r6, lr}
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	6800      	ldr	r0, [r0, #0]
 800b4aa:	b370      	cbz	r0, 800b50a <rcl_action_take_result_request+0x6a>
 800b4ac:	460d      	mov	r5, r1
 800b4ae:	4616      	mov	r6, r2
 800b4b0:	f7fe fb9e 	bl	8009bf0 <rcl_service_is_valid>
 800b4b4:	b338      	cbz	r0, 800b506 <rcl_action_take_result_request+0x66>
 800b4b6:	6820      	ldr	r0, [r4, #0]
 800b4b8:	3004      	adds	r0, #4
 800b4ba:	f7fe fb99 	bl	8009bf0 <rcl_service_is_valid>
 800b4be:	b310      	cbz	r0, 800b506 <rcl_action_take_result_request+0x66>
 800b4c0:	6820      	ldr	r0, [r4, #0]
 800b4c2:	3008      	adds	r0, #8
 800b4c4:	f7fe fb94 	bl	8009bf0 <rcl_service_is_valid>
 800b4c8:	b1e8      	cbz	r0, 800b506 <rcl_action_take_result_request+0x66>
 800b4ca:	6820      	ldr	r0, [r4, #0]
 800b4cc:	300c      	adds	r0, #12
 800b4ce:	f006 fa53 	bl	8011978 <rcl_publisher_is_valid>
 800b4d2:	b1c0      	cbz	r0, 800b506 <rcl_action_take_result_request+0x66>
 800b4d4:	6820      	ldr	r0, [r4, #0]
 800b4d6:	3010      	adds	r0, #16
 800b4d8:	f006 fa4e 	bl	8011978 <rcl_publisher_is_valid>
 800b4dc:	b198      	cbz	r0, 800b506 <rcl_action_take_result_request+0x66>
 800b4de:	b1bd      	cbz	r5, 800b510 <rcl_action_take_result_request+0x70>
 800b4e0:	b1b6      	cbz	r6, 800b510 <rcl_action_take_result_request+0x70>
 800b4e2:	6820      	ldr	r0, [r4, #0]
 800b4e4:	4632      	mov	r2, r6
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	3008      	adds	r0, #8
 800b4ea:	f7fe fb01 	bl	8009af0 <rcl_take_request>
 800b4ee:	b148      	cbz	r0, 800b504 <rcl_action_take_result_request+0x64>
 800b4f0:	280a      	cmp	r0, #10
 800b4f2:	d007      	beq.n	800b504 <rcl_action_take_result_request+0x64>
 800b4f4:	f240 2259 	movw	r2, #601	@ 0x259
 800b4f8:	f241 0369 	movw	r3, #4201	@ 0x1069
 800b4fc:	4290      	cmp	r0, r2
 800b4fe:	bf0c      	ite	eq
 800b500:	4618      	moveq	r0, r3
 800b502:	2001      	movne	r0, #1
 800b504:	bd70      	pop	{r4, r5, r6, pc}
 800b506:	f7fc fc1b 	bl	8007d40 <rcutils_reset_error>
 800b50a:	f241 0068 	movw	r0, #4200	@ 0x1068
 800b50e:	bd70      	pop	{r4, r5, r6, pc}
 800b510:	200b      	movs	r0, #11
 800b512:	bd70      	pop	{r4, r5, r6, pc}
 800b514:	f241 0068 	movw	r0, #4200	@ 0x1068
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop

0800b51c <rcl_action_take_cancel_request>:
 800b51c:	2800      	cmp	r0, #0
 800b51e:	d037      	beq.n	800b590 <rcl_action_take_cancel_request+0x74>
 800b520:	b570      	push	{r4, r5, r6, lr}
 800b522:	4604      	mov	r4, r0
 800b524:	6800      	ldr	r0, [r0, #0]
 800b526:	b370      	cbz	r0, 800b586 <rcl_action_take_cancel_request+0x6a>
 800b528:	460d      	mov	r5, r1
 800b52a:	4616      	mov	r6, r2
 800b52c:	f7fe fb60 	bl	8009bf0 <rcl_service_is_valid>
 800b530:	b338      	cbz	r0, 800b582 <rcl_action_take_cancel_request+0x66>
 800b532:	6820      	ldr	r0, [r4, #0]
 800b534:	3004      	adds	r0, #4
 800b536:	f7fe fb5b 	bl	8009bf0 <rcl_service_is_valid>
 800b53a:	b310      	cbz	r0, 800b582 <rcl_action_take_cancel_request+0x66>
 800b53c:	6820      	ldr	r0, [r4, #0]
 800b53e:	3008      	adds	r0, #8
 800b540:	f7fe fb56 	bl	8009bf0 <rcl_service_is_valid>
 800b544:	b1e8      	cbz	r0, 800b582 <rcl_action_take_cancel_request+0x66>
 800b546:	6820      	ldr	r0, [r4, #0]
 800b548:	300c      	adds	r0, #12
 800b54a:	f006 fa15 	bl	8011978 <rcl_publisher_is_valid>
 800b54e:	b1c0      	cbz	r0, 800b582 <rcl_action_take_cancel_request+0x66>
 800b550:	6820      	ldr	r0, [r4, #0]
 800b552:	3010      	adds	r0, #16
 800b554:	f006 fa10 	bl	8011978 <rcl_publisher_is_valid>
 800b558:	b198      	cbz	r0, 800b582 <rcl_action_take_cancel_request+0x66>
 800b55a:	b1bd      	cbz	r5, 800b58c <rcl_action_take_cancel_request+0x70>
 800b55c:	b1b6      	cbz	r6, 800b58c <rcl_action_take_cancel_request+0x70>
 800b55e:	6820      	ldr	r0, [r4, #0]
 800b560:	4632      	mov	r2, r6
 800b562:	4629      	mov	r1, r5
 800b564:	3004      	adds	r0, #4
 800b566:	f7fe fac3 	bl	8009af0 <rcl_take_request>
 800b56a:	b148      	cbz	r0, 800b580 <rcl_action_take_cancel_request+0x64>
 800b56c:	280a      	cmp	r0, #10
 800b56e:	d007      	beq.n	800b580 <rcl_action_take_cancel_request+0x64>
 800b570:	f240 2259 	movw	r2, #601	@ 0x259
 800b574:	f241 0369 	movw	r3, #4201	@ 0x1069
 800b578:	4290      	cmp	r0, r2
 800b57a:	bf0c      	ite	eq
 800b57c:	4618      	moveq	r0, r3
 800b57e:	2001      	movne	r0, #1
 800b580:	bd70      	pop	{r4, r5, r6, pc}
 800b582:	f7fc fbdd 	bl	8007d40 <rcutils_reset_error>
 800b586:	f241 0068 	movw	r0, #4200	@ 0x1068
 800b58a:	bd70      	pop	{r4, r5, r6, pc}
 800b58c:	200b      	movs	r0, #11
 800b58e:	bd70      	pop	{r4, r5, r6, pc}
 800b590:	f241 0068 	movw	r0, #4200	@ 0x1068
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop

0800b598 <rcl_action_send_cancel_response>:
 800b598:	b380      	cbz	r0, 800b5fc <rcl_action_send_cancel_response+0x64>
 800b59a:	b570      	push	{r4, r5, r6, lr}
 800b59c:	4604      	mov	r4, r0
 800b59e:	6800      	ldr	r0, [r0, #0]
 800b5a0:	b338      	cbz	r0, 800b5f2 <rcl_action_send_cancel_response+0x5a>
 800b5a2:	460d      	mov	r5, r1
 800b5a4:	4616      	mov	r6, r2
 800b5a6:	f7fe fb23 	bl	8009bf0 <rcl_service_is_valid>
 800b5aa:	b300      	cbz	r0, 800b5ee <rcl_action_send_cancel_response+0x56>
 800b5ac:	6820      	ldr	r0, [r4, #0]
 800b5ae:	3004      	adds	r0, #4
 800b5b0:	f7fe fb1e 	bl	8009bf0 <rcl_service_is_valid>
 800b5b4:	b1d8      	cbz	r0, 800b5ee <rcl_action_send_cancel_response+0x56>
 800b5b6:	6820      	ldr	r0, [r4, #0]
 800b5b8:	3008      	adds	r0, #8
 800b5ba:	f7fe fb19 	bl	8009bf0 <rcl_service_is_valid>
 800b5be:	b1b0      	cbz	r0, 800b5ee <rcl_action_send_cancel_response+0x56>
 800b5c0:	6820      	ldr	r0, [r4, #0]
 800b5c2:	300c      	adds	r0, #12
 800b5c4:	f006 f9d8 	bl	8011978 <rcl_publisher_is_valid>
 800b5c8:	b188      	cbz	r0, 800b5ee <rcl_action_send_cancel_response+0x56>
 800b5ca:	6820      	ldr	r0, [r4, #0]
 800b5cc:	3010      	adds	r0, #16
 800b5ce:	f006 f9d3 	bl	8011978 <rcl_publisher_is_valid>
 800b5d2:	b160      	cbz	r0, 800b5ee <rcl_action_send_cancel_response+0x56>
 800b5d4:	b185      	cbz	r5, 800b5f8 <rcl_action_send_cancel_response+0x60>
 800b5d6:	b17e      	cbz	r6, 800b5f8 <rcl_action_send_cancel_response+0x60>
 800b5d8:	6820      	ldr	r0, [r4, #0]
 800b5da:	4632      	mov	r2, r6
 800b5dc:	4629      	mov	r1, r5
 800b5de:	3004      	adds	r0, #4
 800b5e0:	f7fe fad6 	bl	8009b90 <rcl_send_response>
 800b5e4:	b110      	cbz	r0, 800b5ec <rcl_action_send_cancel_response+0x54>
 800b5e6:	2802      	cmp	r0, #2
 800b5e8:	bf18      	it	ne
 800b5ea:	2001      	movne	r0, #1
 800b5ec:	bd70      	pop	{r4, r5, r6, pc}
 800b5ee:	f7fc fba7 	bl	8007d40 <rcutils_reset_error>
 800b5f2:	f241 0068 	movw	r0, #4200	@ 0x1068
 800b5f6:	bd70      	pop	{r4, r5, r6, pc}
 800b5f8:	200b      	movs	r0, #11
 800b5fa:	bd70      	pop	{r4, r5, r6, pc}
 800b5fc:	f241 0068 	movw	r0, #4200	@ 0x1068
 800b600:	4770      	bx	lr
 800b602:	bf00      	nop

0800b604 <rcl_action_wait_set_add_action_server>:
 800b604:	2800      	cmp	r0, #0
 800b606:	d04a      	beq.n	800b69e <rcl_action_wait_set_add_action_server+0x9a>
 800b608:	b570      	push	{r4, r5, r6, lr}
 800b60a:	460c      	mov	r4, r1
 800b60c:	2900      	cmp	r1, #0
 800b60e:	d043      	beq.n	800b698 <rcl_action_wait_set_add_action_server+0x94>
 800b610:	4605      	mov	r5, r0
 800b612:	6808      	ldr	r0, [r1, #0]
 800b614:	2800      	cmp	r0, #0
 800b616:	d03f      	beq.n	800b698 <rcl_action_wait_set_add_action_server+0x94>
 800b618:	4616      	mov	r6, r2
 800b61a:	f7fe fae9 	bl	8009bf0 <rcl_service_is_valid>
 800b61e:	2800      	cmp	r0, #0
 800b620:	d038      	beq.n	800b694 <rcl_action_wait_set_add_action_server+0x90>
 800b622:	6820      	ldr	r0, [r4, #0]
 800b624:	3004      	adds	r0, #4
 800b626:	f7fe fae3 	bl	8009bf0 <rcl_service_is_valid>
 800b62a:	b398      	cbz	r0, 800b694 <rcl_action_wait_set_add_action_server+0x90>
 800b62c:	6820      	ldr	r0, [r4, #0]
 800b62e:	3008      	adds	r0, #8
 800b630:	f7fe fade 	bl	8009bf0 <rcl_service_is_valid>
 800b634:	b370      	cbz	r0, 800b694 <rcl_action_wait_set_add_action_server+0x90>
 800b636:	6820      	ldr	r0, [r4, #0]
 800b638:	300c      	adds	r0, #12
 800b63a:	f006 f9b7 	bl	80119ac <rcl_publisher_is_valid_except_context>
 800b63e:	b348      	cbz	r0, 800b694 <rcl_action_wait_set_add_action_server+0x90>
 800b640:	6820      	ldr	r0, [r4, #0]
 800b642:	3010      	adds	r0, #16
 800b644:	f006 f9b2 	bl	80119ac <rcl_publisher_is_valid_except_context>
 800b648:	b320      	cbz	r0, 800b694 <rcl_action_wait_set_add_action_server+0x90>
 800b64a:	6821      	ldr	r1, [r4, #0]
 800b64c:	4628      	mov	r0, r5
 800b64e:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 800b652:	f7ff fa8b 	bl	800ab6c <rcl_wait_set_add_service>
 800b656:	b9e0      	cbnz	r0, 800b692 <rcl_action_wait_set_add_action_server+0x8e>
 800b658:	6821      	ldr	r1, [r4, #0]
 800b65a:	4628      	mov	r0, r5
 800b65c:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 800b660:	3104      	adds	r1, #4
 800b662:	f7ff fa83 	bl	800ab6c <rcl_wait_set_add_service>
 800b666:	b9a0      	cbnz	r0, 800b692 <rcl_action_wait_set_add_action_server+0x8e>
 800b668:	6821      	ldr	r1, [r4, #0]
 800b66a:	4628      	mov	r0, r5
 800b66c:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 800b670:	3108      	adds	r1, #8
 800b672:	f7ff fa7b 	bl	800ab6c <rcl_wait_set_add_service>
 800b676:	b960      	cbnz	r0, 800b692 <rcl_action_wait_set_add_action_server+0x8e>
 800b678:	6821      	ldr	r1, [r4, #0]
 800b67a:	4628      	mov	r0, r5
 800b67c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 800b680:	3114      	adds	r1, #20
 800b682:	f7ff fa17 	bl	800aab4 <rcl_wait_set_add_timer>
 800b686:	b920      	cbnz	r0, 800b692 <rcl_action_wait_set_add_action_server+0x8e>
 800b688:	b11e      	cbz	r6, 800b692 <rcl_action_wait_set_add_action_server+0x8e>
 800b68a:	6823      	ldr	r3, [r4, #0]
 800b68c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800b690:	6033      	str	r3, [r6, #0]
 800b692:	bd70      	pop	{r4, r5, r6, pc}
 800b694:	f7fc fb54 	bl	8007d40 <rcutils_reset_error>
 800b698:	f241 0068 	movw	r0, #4200	@ 0x1068
 800b69c:	bd70      	pop	{r4, r5, r6, pc}
 800b69e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800b6a2:	4770      	bx	lr

0800b6a4 <rcl_action_server_wait_set_get_entities_ready>:
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d060      	beq.n	800b76a <rcl_action_server_wait_set_get_entities_ready+0xc6>
 800b6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	2900      	cmp	r1, #0
 800b6ae:	d057      	beq.n	800b760 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 800b6b0:	4605      	mov	r5, r0
 800b6b2:	6808      	ldr	r0, [r1, #0]
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	d053      	beq.n	800b760 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 800b6b8:	4616      	mov	r6, r2
 800b6ba:	461f      	mov	r7, r3
 800b6bc:	f7fe fa98 	bl	8009bf0 <rcl_service_is_valid>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d04b      	beq.n	800b75c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 800b6c4:	6820      	ldr	r0, [r4, #0]
 800b6c6:	3004      	adds	r0, #4
 800b6c8:	f7fe fa92 	bl	8009bf0 <rcl_service_is_valid>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d045      	beq.n	800b75c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 800b6d0:	6820      	ldr	r0, [r4, #0]
 800b6d2:	3008      	adds	r0, #8
 800b6d4:	f7fe fa8c 	bl	8009bf0 <rcl_service_is_valid>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d03f      	beq.n	800b75c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 800b6dc:	6820      	ldr	r0, [r4, #0]
 800b6de:	300c      	adds	r0, #12
 800b6e0:	f006 f964 	bl	80119ac <rcl_publisher_is_valid_except_context>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	d039      	beq.n	800b75c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 800b6e8:	6820      	ldr	r0, [r4, #0]
 800b6ea:	3010      	adds	r0, #16
 800b6ec:	f006 f95e 	bl	80119ac <rcl_publisher_is_valid_except_context>
 800b6f0:	b3a0      	cbz	r0, 800b75c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 800b6f2:	b3c6      	cbz	r6, 800b766 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 800b6f4:	b3bf      	cbz	r7, 800b766 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 800b6f6:	9b06      	ldr	r3, [sp, #24]
 800b6f8:	b3ab      	cbz	r3, 800b766 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 800b6fa:	9b07      	ldr	r3, [sp, #28]
 800b6fc:	b39b      	cbz	r3, 800b766 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 800b6fe:	6823      	ldr	r3, [r4, #0]
 800b700:	692a      	ldr	r2, [r5, #16]
 800b702:	6a2c      	ldr	r4, [r5, #32]
 800b704:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
 800b708:	f8d3 51e8 	ldr.w	r5, [r3, #488]	@ 0x1e8
 800b70c:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 800b710:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800b714:	f8d3 11e4 	ldr.w	r1, [r3, #484]	@ 0x1e4
 800b718:	f8d3 51dc 	ldr.w	r5, [r3, #476]	@ 0x1dc
 800b71c:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800b720:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 800b724:	1ae4      	subs	r4, r4, r3
 800b726:	fab4 f484 	clz	r4, r4
 800b72a:	0964      	lsrs	r4, r4, #5
 800b72c:	7034      	strb	r4, [r6, #0]
 800b72e:	1d1c      	adds	r4, r3, #4
 800b730:	1b00      	subs	r0, r0, r4
 800b732:	fab0 f080 	clz	r0, r0
 800b736:	0940      	lsrs	r0, r0, #5
 800b738:	7038      	strb	r0, [r7, #0]
 800b73a:	f103 0008 	add.w	r0, r3, #8
 800b73e:	1a09      	subs	r1, r1, r0
 800b740:	3314      	adds	r3, #20
 800b742:	1ad3      	subs	r3, r2, r3
 800b744:	fab1 f181 	clz	r1, r1
 800b748:	9a06      	ldr	r2, [sp, #24]
 800b74a:	0949      	lsrs	r1, r1, #5
 800b74c:	7011      	strb	r1, [r2, #0]
 800b74e:	fab3 f383 	clz	r3, r3
 800b752:	9a07      	ldr	r2, [sp, #28]
 800b754:	095b      	lsrs	r3, r3, #5
 800b756:	2000      	movs	r0, #0
 800b758:	7013      	strb	r3, [r2, #0]
 800b75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b75c:	f7fc faf0 	bl	8007d40 <rcutils_reset_error>
 800b760:	f241 0068 	movw	r0, #4200	@ 0x1068
 800b764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b766:	200b      	movs	r0, #11
 800b768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b76a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800b76e:	4770      	bx	lr

0800b770 <_execute_event_handler>:
 800b770:	2002      	movs	r0, #2
 800b772:	4770      	bx	lr

0800b774 <_cancel_goal_event_handler>:
 800b774:	2003      	movs	r0, #3
 800b776:	4770      	bx	lr

0800b778 <_succeed_event_handler>:
 800b778:	2004      	movs	r0, #4
 800b77a:	4770      	bx	lr

0800b77c <_abort_event_handler>:
 800b77c:	2006      	movs	r0, #6
 800b77e:	4770      	bx	lr

0800b780 <_canceled_event_handler>:
 800b780:	2005      	movs	r0, #5
 800b782:	4770      	bx	lr

0800b784 <rcl_action_transition_goal_state>:
 800b784:	fa5f fc80 	uxtb.w	ip, r0
 800b788:	f1bc 0f06 	cmp.w	ip, #6
 800b78c:	d80c      	bhi.n	800b7a8 <rcl_action_transition_goal_state+0x24>
 800b78e:	2904      	cmp	r1, #4
 800b790:	d80a      	bhi.n	800b7a8 <rcl_action_transition_goal_state+0x24>
 800b792:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800b796:	b410      	push	{r4}
 800b798:	440b      	add	r3, r1
 800b79a:	4c06      	ldr	r4, [pc, #24]	@ (800b7b4 <rcl_action_transition_goal_state+0x30>)
 800b79c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b7a0:	b123      	cbz	r3, 800b7ac <rcl_action_transition_goal_state+0x28>
 800b7a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7a6:	4718      	bx	r3
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	4770      	bx	lr
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7b2:	4770      	bx	lr
 800b7b4:	080151b4 	.word	0x080151b4

0800b7b8 <rcl_action_get_zero_initialized_cancel_response>:
 800b7b8:	b510      	push	{r4, lr}
 800b7ba:	4c07      	ldr	r4, [pc, #28]	@ (800b7d8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 800b7bc:	4686      	mov	lr, r0
 800b7be:	4684      	mov	ip, r0
 800b7c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b7c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b7c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b7c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	f8cc 3000 	str.w	r3, [ip]
 800b7d2:	4670      	mov	r0, lr
 800b7d4:	bd10      	pop	{r4, pc}
 800b7d6:	bf00      	nop
 800b7d8:	08015240 	.word	0x08015240

0800b7dc <rclc_action_send_result_request>:
 800b7dc:	b1d0      	cbz	r0, 800b814 <rclc_action_send_result_request+0x38>
 800b7de:	b500      	push	{lr}
 800b7e0:	4684      	mov	ip, r0
 800b7e2:	b087      	sub	sp, #28
 800b7e4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 800b7e8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 800b7ec:	f8dc 2011 	ldr.w	r2, [ip, #17]
 800b7f0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 800b7f4:	f10d 0e08 	add.w	lr, sp, #8
 800b7f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b7fc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800b800:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 800b804:	a902      	add	r1, sp, #8
 800b806:	3010      	adds	r0, #16
 800b808:	f7ff fbfa 	bl	800b000 <rcl_action_send_result_request>
 800b80c:	b920      	cbnz	r0, 800b818 <rclc_action_send_result_request+0x3c>
 800b80e:	b007      	add	sp, #28
 800b810:	f85d fb04 	ldr.w	pc, [sp], #4
 800b814:	200b      	movs	r0, #11
 800b816:	4770      	bx	lr
 800b818:	9001      	str	r0, [sp, #4]
 800b81a:	f7fc fa91 	bl	8007d40 <rcutils_reset_error>
 800b81e:	9801      	ldr	r0, [sp, #4]
 800b820:	b007      	add	sp, #28
 800b822:	f85d fb04 	ldr.w	pc, [sp], #4
 800b826:	bf00      	nop

0800b828 <rclc_action_take_goal_handle>:
 800b828:	4603      	mov	r3, r0
 800b82a:	b158      	cbz	r0, 800b844 <rclc_action_take_goal_handle+0x1c>
 800b82c:	6880      	ldr	r0, [r0, #8]
 800b82e:	b148      	cbz	r0, 800b844 <rclc_action_take_goal_handle+0x1c>
 800b830:	6801      	ldr	r1, [r0, #0]
 800b832:	6099      	str	r1, [r3, #8]
 800b834:	2200      	movs	r2, #0
 800b836:	7202      	strb	r2, [r0, #8]
 800b838:	68d9      	ldr	r1, [r3, #12]
 800b83a:	6001      	str	r1, [r0, #0]
 800b83c:	6202      	str	r2, [r0, #32]
 800b83e:	8482      	strh	r2, [r0, #36]	@ 0x24
 800b840:	60d8      	str	r0, [r3, #12]
 800b842:	4770      	bx	lr
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop

0800b848 <rclc_action_remove_used_goal_handle>:
 800b848:	b180      	cbz	r0, 800b86c <rclc_action_remove_used_goal_handle+0x24>
 800b84a:	b179      	cbz	r1, 800b86c <rclc_action_remove_used_goal_handle+0x24>
 800b84c:	68c3      	ldr	r3, [r0, #12]
 800b84e:	4299      	cmp	r1, r3
 800b850:	d00d      	beq.n	800b86e <rclc_action_remove_used_goal_handle+0x26>
 800b852:	b12b      	cbz	r3, 800b860 <rclc_action_remove_used_goal_handle+0x18>
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	4291      	cmp	r1, r2
 800b858:	d003      	beq.n	800b862 <rclc_action_remove_used_goal_handle+0x1a>
 800b85a:	4613      	mov	r3, r2
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1f9      	bne.n	800b854 <rclc_action_remove_used_goal_handle+0xc>
 800b860:	4770      	bx	lr
 800b862:	680a      	ldr	r2, [r1, #0]
 800b864:	601a      	str	r2, [r3, #0]
 800b866:	6883      	ldr	r3, [r0, #8]
 800b868:	600b      	str	r3, [r1, #0]
 800b86a:	6081      	str	r1, [r0, #8]
 800b86c:	4770      	bx	lr
 800b86e:	680b      	ldr	r3, [r1, #0]
 800b870:	60c3      	str	r3, [r0, #12]
 800b872:	e7f8      	b.n	800b866 <rclc_action_remove_used_goal_handle+0x1e>

0800b874 <rclc_action_find_goal_handle_by_uuid>:
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	b180      	cbz	r0, 800b89a <rclc_action_find_goal_handle_by_uuid+0x26>
 800b878:	460d      	mov	r5, r1
 800b87a:	b181      	cbz	r1, 800b89e <rclc_action_find_goal_handle_by_uuid+0x2a>
 800b87c:	68c4      	ldr	r4, [r0, #12]
 800b87e:	b914      	cbnz	r4, 800b886 <rclc_action_find_goal_handle_by_uuid+0x12>
 800b880:	e009      	b.n	800b896 <rclc_action_find_goal_handle_by_uuid+0x22>
 800b882:	6824      	ldr	r4, [r4, #0]
 800b884:	b13c      	cbz	r4, 800b896 <rclc_action_find_goal_handle_by_uuid+0x22>
 800b886:	2210      	movs	r2, #16
 800b888:	4629      	mov	r1, r5
 800b88a:	f104 0009 	add.w	r0, r4, #9
 800b88e:	f008 f847 	bl	8013920 <memcmp>
 800b892:	2800      	cmp	r0, #0
 800b894:	d1f5      	bne.n	800b882 <rclc_action_find_goal_handle_by_uuid+0xe>
 800b896:	4620      	mov	r0, r4
 800b898:	bd38      	pop	{r3, r4, r5, pc}
 800b89a:	4604      	mov	r4, r0
 800b89c:	e7fb      	b.n	800b896 <rclc_action_find_goal_handle_by_uuid+0x22>
 800b89e:	460c      	mov	r4, r1
 800b8a0:	e7f9      	b.n	800b896 <rclc_action_find_goal_handle_by_uuid+0x22>
 800b8a2:	bf00      	nop

0800b8a4 <rclc_action_find_first_handle_by_status>:
 800b8a4:	b140      	cbz	r0, 800b8b8 <rclc_action_find_first_handle_by_status+0x14>
 800b8a6:	68c0      	ldr	r0, [r0, #12]
 800b8a8:	b910      	cbnz	r0, 800b8b0 <rclc_action_find_first_handle_by_status+0xc>
 800b8aa:	e005      	b.n	800b8b8 <rclc_action_find_first_handle_by_status+0x14>
 800b8ac:	6800      	ldr	r0, [r0, #0]
 800b8ae:	b118      	cbz	r0, 800b8b8 <rclc_action_find_first_handle_by_status+0x14>
 800b8b0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b8b4:	428b      	cmp	r3, r1
 800b8b6:	d1f9      	bne.n	800b8ac <rclc_action_find_first_handle_by_status+0x8>
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop

0800b8bc <rclc_action_find_first_terminated_handle>:
 800b8bc:	b140      	cbz	r0, 800b8d0 <rclc_action_find_first_terminated_handle+0x14>
 800b8be:	68c0      	ldr	r0, [r0, #12]
 800b8c0:	b910      	cbnz	r0, 800b8c8 <rclc_action_find_first_terminated_handle+0xc>
 800b8c2:	e005      	b.n	800b8d0 <rclc_action_find_first_terminated_handle+0x14>
 800b8c4:	6800      	ldr	r0, [r0, #0]
 800b8c6:	b118      	cbz	r0, 800b8d0 <rclc_action_find_first_terminated_handle+0x14>
 800b8c8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b8cc:	2b03      	cmp	r3, #3
 800b8ce:	ddf9      	ble.n	800b8c4 <rclc_action_find_first_terminated_handle+0x8>
 800b8d0:	4770      	bx	lr
 800b8d2:	bf00      	nop

0800b8d4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 800b8d4:	b170      	cbz	r0, 800b8f4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 800b8d6:	68c0      	ldr	r0, [r0, #12]
 800b8d8:	b160      	cbz	r0, 800b8f4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 800b8da:	b410      	push	{r4}
 800b8dc:	e001      	b.n	800b8e2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 800b8de:	6800      	ldr	r0, [r0, #0]
 800b8e0:	b128      	cbz	r0, 800b8ee <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 800b8e2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 800b8e6:	4299      	cmp	r1, r3
 800b8e8:	bf08      	it	eq
 800b8ea:	4294      	cmpeq	r4, r2
 800b8ec:	d1f7      	bne.n	800b8de <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 800b8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8f2:	4770      	bx	lr
 800b8f4:	4770      	bx	lr
 800b8f6:	bf00      	nop

0800b8f8 <rclc_action_find_handle_by_result_request_sequence_number>:
 800b8f8:	b170      	cbz	r0, 800b918 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 800b8fa:	68c0      	ldr	r0, [r0, #12]
 800b8fc:	b160      	cbz	r0, 800b918 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 800b8fe:	b410      	push	{r4}
 800b900:	e001      	b.n	800b906 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 800b902:	6800      	ldr	r0, [r0, #0]
 800b904:	b128      	cbz	r0, 800b912 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 800b906:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 800b90a:	4299      	cmp	r1, r3
 800b90c:	bf08      	it	eq
 800b90e:	4294      	cmpeq	r4, r2
 800b910:	d1f7      	bne.n	800b902 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 800b912:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b916:	4770      	bx	lr
 800b918:	4770      	bx	lr
 800b91a:	bf00      	nop

0800b91c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 800b91c:	b170      	cbz	r0, 800b93c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 800b91e:	68c0      	ldr	r0, [r0, #12]
 800b920:	b160      	cbz	r0, 800b93c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 800b922:	b410      	push	{r4}
 800b924:	e001      	b.n	800b92a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 800b926:	6800      	ldr	r0, [r0, #0]
 800b928:	b128      	cbz	r0, 800b936 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 800b92a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 800b92e:	4299      	cmp	r1, r3
 800b930:	bf08      	it	eq
 800b932:	4294      	cmpeq	r4, r2
 800b934:	d1f7      	bne.n	800b926 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 800b936:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b93a:	4770      	bx	lr
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop

0800b940 <rclc_action_find_first_handle_with_goal_response>:
 800b940:	b140      	cbz	r0, 800b954 <rclc_action_find_first_handle_with_goal_response+0x14>
 800b942:	68c0      	ldr	r0, [r0, #12]
 800b944:	b910      	cbnz	r0, 800b94c <rclc_action_find_first_handle_with_goal_response+0xc>
 800b946:	e005      	b.n	800b954 <rclc_action_find_first_handle_with_goal_response+0x14>
 800b948:	6800      	ldr	r0, [r0, #0]
 800b94a:	b118      	cbz	r0, 800b954 <rclc_action_find_first_handle_with_goal_response+0x14>
 800b94c:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d0f9      	beq.n	800b948 <rclc_action_find_first_handle_with_goal_response+0x8>
 800b954:	4770      	bx	lr
 800b956:	bf00      	nop

0800b958 <rclc_action_find_first_handle_with_result_response>:
 800b958:	b140      	cbz	r0, 800b96c <rclc_action_find_first_handle_with_result_response+0x14>
 800b95a:	68c0      	ldr	r0, [r0, #12]
 800b95c:	b910      	cbnz	r0, 800b964 <rclc_action_find_first_handle_with_result_response+0xc>
 800b95e:	e005      	b.n	800b96c <rclc_action_find_first_handle_with_result_response+0x14>
 800b960:	6800      	ldr	r0, [r0, #0]
 800b962:	b118      	cbz	r0, 800b96c <rclc_action_find_first_handle_with_result_response+0x14>
 800b964:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d0f9      	beq.n	800b960 <rclc_action_find_first_handle_with_result_response+0x8>
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop

0800b970 <rclc_action_server_response_goal_request>:
 800b970:	b198      	cbz	r0, 800b99a <rclc_action_server_response_goal_request+0x2a>
 800b972:	b510      	push	{r4, lr}
 800b974:	6844      	ldr	r4, [r0, #4]
 800b976:	b086      	sub	sp, #24
 800b978:	2200      	movs	r2, #0
 800b97a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 800b97e:	460b      	mov	r3, r1
 800b980:	9205      	str	r2, [sp, #20]
 800b982:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 800b986:	aa03      	add	r2, sp, #12
 800b988:	f104 0010 	add.w	r0, r4, #16
 800b98c:	f88d 300c 	strb.w	r3, [sp, #12]
 800b990:	f7ff fd52 	bl	800b438 <rcl_action_send_goal_response>
 800b994:	b918      	cbnz	r0, 800b99e <rclc_action_server_response_goal_request+0x2e>
 800b996:	b006      	add	sp, #24
 800b998:	bd10      	pop	{r4, pc}
 800b99a:	200b      	movs	r0, #11
 800b99c:	4770      	bx	lr
 800b99e:	9001      	str	r0, [sp, #4]
 800b9a0:	f7fc f9ce 	bl	8007d40 <rcutils_reset_error>
 800b9a4:	9801      	ldr	r0, [sp, #4]
 800b9a6:	b006      	add	sp, #24
 800b9a8:	bd10      	pop	{r4, pc}
 800b9aa:	bf00      	nop
 800b9ac:	0000      	movs	r0, r0
	...

0800b9b0 <rclc_action_server_goal_cancel_accept>:
 800b9b0:	b310      	cbz	r0, 800b9f8 <rclc_action_server_goal_cancel_accept+0x48>
 800b9b2:	b510      	push	{r4, lr}
 800b9b4:	b090      	sub	sp, #64	@ 0x40
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	a806      	add	r0, sp, #24
 800b9ba:	f7ff fefd 	bl	800b7b8 <rcl_action_get_zero_initialized_cancel_response>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 800b9c4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 800b9c8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 800b9cc:	f88d 3018 	strb.w	r3, [sp, #24]
 800b9d0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 800b9d4:	f8cd d01c 	str.w	sp, [sp, #28]
 800b9d8:	46ec      	mov	ip, sp
 800b9da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b9de:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800ba00 <rclc_action_server_goal_cancel_accept+0x50>
 800b9e2:	6860      	ldr	r0, [r4, #4]
 800b9e4:	aa06      	add	r2, sp, #24
 800b9e6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 800b9ea:	3010      	adds	r0, #16
 800b9ec:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b9f0:	f7ff fdd2 	bl	800b598 <rcl_action_send_cancel_response>
 800b9f4:	b010      	add	sp, #64	@ 0x40
 800b9f6:	bd10      	pop	{r4, pc}
 800b9f8:	200b      	movs	r0, #11
 800b9fa:	4770      	bx	lr
 800b9fc:	f3af 8000 	nop.w
 800ba00:	00000001 	.word	0x00000001
 800ba04:	00000001 	.word	0x00000001

0800ba08 <rclc_action_server_goal_cancel_reject>:
 800ba08:	b082      	sub	sp, #8
 800ba0a:	b530      	push	{r4, r5, lr}
 800ba0c:	b08b      	sub	sp, #44	@ 0x2c
 800ba0e:	ac0e      	add	r4, sp, #56	@ 0x38
 800ba10:	e884 000c 	stmia.w	r4, {r2, r3}
 800ba14:	b188      	cbz	r0, 800ba3a <rclc_action_server_goal_cancel_reject+0x32>
 800ba16:	4604      	mov	r4, r0
 800ba18:	a801      	add	r0, sp, #4
 800ba1a:	460d      	mov	r5, r1
 800ba1c:	f7ff fecc 	bl	800b7b8 <rcl_action_get_zero_initialized_cancel_response>
 800ba20:	aa01      	add	r2, sp, #4
 800ba22:	a90e      	add	r1, sp, #56	@ 0x38
 800ba24:	f104 0010 	add.w	r0, r4, #16
 800ba28:	f88d 5004 	strb.w	r5, [sp, #4]
 800ba2c:	f7ff fdb4 	bl	800b598 <rcl_action_send_cancel_response>
 800ba30:	b00b      	add	sp, #44	@ 0x2c
 800ba32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba36:	b002      	add	sp, #8
 800ba38:	4770      	bx	lr
 800ba3a:	200b      	movs	r0, #11
 800ba3c:	b00b      	add	sp, #44	@ 0x2c
 800ba3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba42:	b002      	add	sp, #8
 800ba44:	4770      	bx	lr
 800ba46:	bf00      	nop

0800ba48 <__atomic_load_8>:
 800ba48:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800ba4c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800ba50:	4a15      	ldr	r2, [pc, #84]	@ (800baa8 <__atomic_load_8+0x60>)
 800ba52:	4b16      	ldr	r3, [pc, #88]	@ (800baac <__atomic_load_8+0x64>)
 800ba54:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800ba58:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800ba5c:	fb02 f101 	mul.w	r1, r2, r1
 800ba60:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800ba64:	fba3 2301 	umull	r2, r3, r3, r1
 800ba68:	091b      	lsrs	r3, r3, #4
 800ba6a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ba6e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800ba72:	b4f0      	push	{r4, r5, r6, r7}
 800ba74:	4d0e      	ldr	r5, [pc, #56]	@ (800bab0 <__atomic_load_8+0x68>)
 800ba76:	1ac9      	subs	r1, r1, r3
 800ba78:	194a      	adds	r2, r1, r5
 800ba7a:	f04f 0c01 	mov.w	ip, #1
 800ba7e:	e8d2 3f4f 	ldrexb	r3, [r2]
 800ba82:	e8c2 cf44 	strexb	r4, ip, [r2]
 800ba86:	2c00      	cmp	r4, #0
 800ba88:	d1f9      	bne.n	800ba7e <__atomic_load_8+0x36>
 800ba8a:	f3bf 8f5b 	dmb	ish
 800ba8e:	b2dc      	uxtb	r4, r3
 800ba90:	2c00      	cmp	r4, #0
 800ba92:	d1f4      	bne.n	800ba7e <__atomic_load_8+0x36>
 800ba94:	e9d0 6700 	ldrd	r6, r7, [r0]
 800ba98:	f3bf 8f5b 	dmb	ish
 800ba9c:	546b      	strb	r3, [r5, r1]
 800ba9e:	4630      	mov	r0, r6
 800baa0:	4639      	mov	r1, r7
 800baa2:	bcf0      	pop	{r4, r5, r6, r7}
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	27d4eb2d 	.word	0x27d4eb2d
 800baac:	b21642c9 	.word	0xb21642c9
 800bab0:	200091b8 	.word	0x200091b8

0800bab4 <__atomic_store_8>:
 800bab4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800bab8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800babc:	b570      	push	{r4, r5, r6, lr}
 800babe:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800bac2:	4c14      	ldr	r4, [pc, #80]	@ (800bb14 <__atomic_store_8+0x60>)
 800bac4:	4e14      	ldr	r6, [pc, #80]	@ (800bb18 <__atomic_store_8+0x64>)
 800bac6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800baca:	fb04 f101 	mul.w	r1, r4, r1
 800bace:	4c13      	ldr	r4, [pc, #76]	@ (800bb1c <__atomic_store_8+0x68>)
 800bad0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800bad4:	fba4 5401 	umull	r5, r4, r4, r1
 800bad8:	0924      	lsrs	r4, r4, #4
 800bada:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800bade:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 800bae2:	eba1 0e04 	sub.w	lr, r1, r4
 800bae6:	f04f 0501 	mov.w	r5, #1
 800baea:	eb0e 0c06 	add.w	ip, lr, r6
 800baee:	e8dc 1f4f 	ldrexb	r1, [ip]
 800baf2:	e8cc 5f44 	strexb	r4, r5, [ip]
 800baf6:	2c00      	cmp	r4, #0
 800baf8:	d1f9      	bne.n	800baee <__atomic_store_8+0x3a>
 800bafa:	f3bf 8f5b 	dmb	ish
 800bafe:	b2cc      	uxtb	r4, r1
 800bb00:	2c00      	cmp	r4, #0
 800bb02:	d1f4      	bne.n	800baee <__atomic_store_8+0x3a>
 800bb04:	e9c0 2300 	strd	r2, r3, [r0]
 800bb08:	f3bf 8f5b 	dmb	ish
 800bb0c:	f806 100e 	strb.w	r1, [r6, lr]
 800bb10:	bd70      	pop	{r4, r5, r6, pc}
 800bb12:	bf00      	nop
 800bb14:	27d4eb2d 	.word	0x27d4eb2d
 800bb18:	200091b8 	.word	0x200091b8
 800bb1c:	b21642c9 	.word	0xb21642c9

0800bb20 <__atomic_exchange_8>:
 800bb20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb22:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 800bb26:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 800bb2a:	4917      	ldr	r1, [pc, #92]	@ (800bb88 <__atomic_exchange_8+0x68>)
 800bb2c:	4f17      	ldr	r7, [pc, #92]	@ (800bb8c <__atomic_exchange_8+0x6c>)
 800bb2e:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 800bb32:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 800bb36:	fb01 fe0e 	mul.w	lr, r1, lr
 800bb3a:	4915      	ldr	r1, [pc, #84]	@ (800bb90 <__atomic_exchange_8+0x70>)
 800bb3c:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 800bb40:	4606      	mov	r6, r0
 800bb42:	fba1 010e 	umull	r0, r1, r1, lr
 800bb46:	0909      	lsrs	r1, r1, #4
 800bb48:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800bb4c:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800bb50:	ebae 0e01 	sub.w	lr, lr, r1
 800bb54:	f04f 0501 	mov.w	r5, #1
 800bb58:	eb0e 0107 	add.w	r1, lr, r7
 800bb5c:	e8d1 cf4f 	ldrexb	ip, [r1]
 800bb60:	e8c1 5f40 	strexb	r0, r5, [r1]
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d1f9      	bne.n	800bb5c <__atomic_exchange_8+0x3c>
 800bb68:	f3bf 8f5b 	dmb	ish
 800bb6c:	fa5f f48c 	uxtb.w	r4, ip
 800bb70:	2c00      	cmp	r4, #0
 800bb72:	d1f3      	bne.n	800bb5c <__atomic_exchange_8+0x3c>
 800bb74:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bb78:	e9c6 2300 	strd	r2, r3, [r6]
 800bb7c:	f3bf 8f5b 	dmb	ish
 800bb80:	f807 c00e 	strb.w	ip, [r7, lr]
 800bb84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb86:	bf00      	nop
 800bb88:	27d4eb2d 	.word	0x27d4eb2d
 800bb8c:	200091b8 	.word	0x200091b8
 800bb90:	b21642c9 	.word	0xb21642c9

0800bb94 <rcutils_get_env>:
 800bb94:	b150      	cbz	r0, 800bbac <rcutils_get_env+0x18>
 800bb96:	b510      	push	{r4, lr}
 800bb98:	460c      	mov	r4, r1
 800bb9a:	b909      	cbnz	r1, 800bba0 <rcutils_get_env+0xc>
 800bb9c:	4806      	ldr	r0, [pc, #24]	@ (800bbb8 <rcutils_get_env+0x24>)
 800bb9e:	bd10      	pop	{r4, pc}
 800bba0:	f007 fb14 	bl	80131cc <getenv>
 800bba4:	b120      	cbz	r0, 800bbb0 <rcutils_get_env+0x1c>
 800bba6:	6020      	str	r0, [r4, #0]
 800bba8:	2000      	movs	r0, #0
 800bbaa:	bd10      	pop	{r4, pc}
 800bbac:	4803      	ldr	r0, [pc, #12]	@ (800bbbc <rcutils_get_env+0x28>)
 800bbae:	4770      	bx	lr
 800bbb0:	4b03      	ldr	r3, [pc, #12]	@ (800bbc0 <rcutils_get_env+0x2c>)
 800bbb2:	6023      	str	r3, [r4, #0]
 800bbb4:	e7f8      	b.n	800bba8 <rcutils_get_env+0x14>
 800bbb6:	bf00      	nop
 800bbb8:	08014c34 	.word	0x08014c34
 800bbbc:	08014c18 	.word	0x08014c18
 800bbc0:	08014d58 	.word	0x08014d58

0800bbc4 <rcutils_format_string_limit>:
 800bbc4:	b40f      	push	{r0, r1, r2, r3}
 800bbc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbc8:	b083      	sub	sp, #12
 800bbca:	ac08      	add	r4, sp, #32
 800bbcc:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800bbce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bbd2:	b376      	cbz	r6, 800bc32 <rcutils_format_string_limit+0x6e>
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	f7fc f889 	bl	8007cec <rcutils_allocator_is_valid>
 800bbda:	b350      	cbz	r0, 800bc32 <rcutils_format_string_limit+0x6e>
 800bbdc:	2100      	movs	r1, #0
 800bbde:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bbe0:	4632      	mov	r2, r6
 800bbe2:	4608      	mov	r0, r1
 800bbe4:	e9cd 3300 	strd	r3, r3, [sp]
 800bbe8:	f000 f8f8 	bl	800bddc <rcutils_vsnprintf>
 800bbec:	1c43      	adds	r3, r0, #1
 800bbee:	4605      	mov	r5, r0
 800bbf0:	d01f      	beq.n	800bc32 <rcutils_format_string_limit+0x6e>
 800bbf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bbf4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bbf6:	1c47      	adds	r7, r0, #1
 800bbf8:	429f      	cmp	r7, r3
 800bbfa:	bf84      	itt	hi
 800bbfc:	461f      	movhi	r7, r3
 800bbfe:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800bc02:	4638      	mov	r0, r7
 800bc04:	9b08      	ldr	r3, [sp, #32]
 800bc06:	4798      	blx	r3
 800bc08:	4604      	mov	r4, r0
 800bc0a:	b190      	cbz	r0, 800bc32 <rcutils_format_string_limit+0x6e>
 800bc0c:	9b01      	ldr	r3, [sp, #4]
 800bc0e:	4632      	mov	r2, r6
 800bc10:	4639      	mov	r1, r7
 800bc12:	f000 f8e3 	bl	800bddc <rcutils_vsnprintf>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	db07      	blt.n	800bc2a <rcutils_format_string_limit+0x66>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	5563      	strb	r3, [r4, r5]
 800bc1e:	4620      	mov	r0, r4
 800bc20:	b003      	add	sp, #12
 800bc22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bc26:	b004      	add	sp, #16
 800bc28:	4770      	bx	lr
 800bc2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc2c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bc2e:	4620      	mov	r0, r4
 800bc30:	4798      	blx	r3
 800bc32:	2400      	movs	r4, #0
 800bc34:	e7f3      	b.n	800bc1e <rcutils_format_string_limit+0x5a>
 800bc36:	bf00      	nop

0800bc38 <rcutils_repl_str>:
 800bc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3c:	4699      	mov	r9, r3
 800bc3e:	b089      	sub	sp, #36	@ 0x24
 800bc40:	4603      	mov	r3, r0
 800bc42:	4648      	mov	r0, r9
 800bc44:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bc48:	4698      	mov	r8, r3
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	460c      	mov	r4, r1
 800bc4e:	f7fc f84d 	bl	8007cec <rcutils_allocator_is_valid>
 800bc52:	2800      	cmp	r0, #0
 800bc54:	f000 80a3 	beq.w	800bd9e <rcutils_repl_str+0x166>
 800bc58:	4620      	mov	r0, r4
 800bc5a:	f7f4 fb21 	bl	80002a0 <strlen>
 800bc5e:	f04f 0a00 	mov.w	sl, #0
 800bc62:	f8d9 b010 	ldr.w	fp, [r9, #16]
 800bc66:	9001      	str	r0, [sp, #4]
 800bc68:	4657      	mov	r7, sl
 800bc6a:	4655      	mov	r5, sl
 800bc6c:	2610      	movs	r6, #16
 800bc6e:	e01e      	b.n	800bcae <rcutils_repl_str+0x76>
 800bc70:	3501      	adds	r5, #1
 800bc72:	45aa      	cmp	sl, r5
 800bc74:	d212      	bcs.n	800bc9c <rcutils_repl_str+0x64>
 800bc76:	44b2      	add	sl, r6
 800bc78:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800bc7c:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800bc80:	4798      	blx	r3
 800bc82:	2800      	cmp	r0, #0
 800bc84:	f000 8088 	beq.w	800bd98 <rcutils_repl_str+0x160>
 800bc88:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800bc8c:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 800bc90:	f8d9 b010 	ldr.w	fp, [r9, #16]
 800bc94:	4607      	mov	r7, r0
 800bc96:	bf28      	it	cs
 800bc98:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 800bc9c:	9a00      	ldr	r2, [sp, #0]
 800bc9e:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 800bca2:	1aa2      	subs	r2, r4, r2
 800bca4:	f843 2c04 	str.w	r2, [r3, #-4]
 800bca8:	9b01      	ldr	r3, [sp, #4]
 800bcaa:	eb04 0803 	add.w	r8, r4, r3
 800bcae:	9902      	ldr	r1, [sp, #8]
 800bcb0:	4640      	mov	r0, r8
 800bcb2:	f007 fe99 	bl	80139e8 <strstr>
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	465a      	mov	r2, fp
 800bcba:	4638      	mov	r0, r7
 800bcbc:	2c00      	cmp	r4, #0
 800bcbe:	d1d7      	bne.n	800bc70 <rcutils_repl_str+0x38>
 800bcc0:	4640      	mov	r0, r8
 800bcc2:	f7f4 faed 	bl	80002a0 <strlen>
 800bcc6:	9b00      	ldr	r3, [sp, #0]
 800bcc8:	eba8 0803 	sub.w	r8, r8, r3
 800bccc:	eb08 0300 	add.w	r3, r8, r0
 800bcd0:	9304      	str	r3, [sp, #16]
 800bcd2:	f8d9 8000 	ldr.w	r8, [r9]
 800bcd6:	2d00      	cmp	r5, #0
 800bcd8:	d03f      	beq.n	800bd5a <rcutils_repl_str+0x122>
 800bcda:	9803      	ldr	r0, [sp, #12]
 800bcdc:	f7f4 fae0 	bl	80002a0 <strlen>
 800bce0:	4606      	mov	r6, r0
 800bce2:	9801      	ldr	r0, [sp, #4]
 800bce4:	9a04      	ldr	r2, [sp, #16]
 800bce6:	1a33      	subs	r3, r6, r0
 800bce8:	fb05 2a03 	mla	sl, r5, r3, r2
 800bcec:	4659      	mov	r1, fp
 800bcee:	f10a 0001 	add.w	r0, sl, #1
 800bcf2:	47c0      	blx	r8
 800bcf4:	4683      	mov	fp, r0
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d04e      	beq.n	800bd98 <rcutils_repl_str+0x160>
 800bcfa:	683a      	ldr	r2, [r7, #0]
 800bcfc:	9900      	ldr	r1, [sp, #0]
 800bcfe:	f007 ff14 	bl	8013b2a <memcpy>
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	9706      	str	r7, [sp, #24]
 800bd06:	1e6a      	subs	r2, r5, #1
 800bd08:	445b      	add	r3, fp
 800bd0a:	46a8      	mov	r8, r5
 800bd0c:	9202      	str	r2, [sp, #8]
 800bd0e:	4625      	mov	r5, r4
 800bd10:	f8cd 901c 	str.w	r9, [sp, #28]
 800bd14:	461c      	mov	r4, r3
 800bd16:	9903      	ldr	r1, [sp, #12]
 800bd18:	4632      	mov	r2, r6
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	f007 ff05 	bl	8013b2a <memcpy>
 800bd20:	9b01      	ldr	r3, [sp, #4]
 800bd22:	f857 2b04 	ldr.w	r2, [r7], #4
 800bd26:	eb02 0c03 	add.w	ip, r2, r3
 800bd2a:	9b00      	ldr	r3, [sp, #0]
 800bd2c:	eb03 010c 	add.w	r1, r3, ip
 800bd30:	9b02      	ldr	r3, [sp, #8]
 800bd32:	4434      	add	r4, r6
 800bd34:	429d      	cmp	r5, r3
 800bd36:	4620      	mov	r0, r4
 800bd38:	d022      	beq.n	800bd80 <rcutils_repl_str+0x148>
 800bd3a:	683a      	ldr	r2, [r7, #0]
 800bd3c:	eba2 090c 	sub.w	r9, r2, ip
 800bd40:	464a      	mov	r2, r9
 800bd42:	3501      	adds	r5, #1
 800bd44:	f007 fef1 	bl	8013b2a <memcpy>
 800bd48:	45a8      	cmp	r8, r5
 800bd4a:	444c      	add	r4, r9
 800bd4c:	d1e3      	bne.n	800bd16 <rcutils_repl_str+0xde>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 800bd54:	f80b 300a 	strb.w	r3, [fp, sl]
 800bd58:	e008      	b.n	800bd6c <rcutils_repl_str+0x134>
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	4659      	mov	r1, fp
 800bd5e:	3001      	adds	r0, #1
 800bd60:	47c0      	blx	r8
 800bd62:	4683      	mov	fp, r0
 800bd64:	b110      	cbz	r0, 800bd6c <rcutils_repl_str+0x134>
 800bd66:	9900      	ldr	r1, [sp, #0]
 800bd68:	f007 fed7 	bl	8013b1a <strcpy>
 800bd6c:	4638      	mov	r0, r7
 800bd6e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bd72:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800bd76:	4798      	blx	r3
 800bd78:	4658      	mov	r0, fp
 800bd7a:	b009      	add	sp, #36	@ 0x24
 800bd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd80:	9b04      	ldr	r3, [sp, #16]
 800bd82:	eba3 020c 	sub.w	r2, r3, ip
 800bd86:	9205      	str	r2, [sp, #20]
 800bd88:	3501      	adds	r5, #1
 800bd8a:	f007 fece 	bl	8013b2a <memcpy>
 800bd8e:	9a05      	ldr	r2, [sp, #20]
 800bd90:	45a8      	cmp	r8, r5
 800bd92:	4414      	add	r4, r2
 800bd94:	d1bf      	bne.n	800bd16 <rcutils_repl_str+0xde>
 800bd96:	e7da      	b.n	800bd4e <rcutils_repl_str+0x116>
 800bd98:	f04f 0b00 	mov.w	fp, #0
 800bd9c:	e7e6      	b.n	800bd6c <rcutils_repl_str+0x134>
 800bd9e:	4683      	mov	fp, r0
 800bda0:	4658      	mov	r0, fp
 800bda2:	b009      	add	sp, #36	@ 0x24
 800bda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bda8 <rcutils_snprintf>:
 800bda8:	b40c      	push	{r2, r3}
 800bdaa:	b530      	push	{r4, r5, lr}
 800bdac:	b083      	sub	sp, #12
 800bdae:	ab06      	add	r3, sp, #24
 800bdb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdb4:	9301      	str	r3, [sp, #4]
 800bdb6:	b152      	cbz	r2, 800bdce <rcutils_snprintf+0x26>
 800bdb8:	b138      	cbz	r0, 800bdca <rcutils_snprintf+0x22>
 800bdba:	b141      	cbz	r1, 800bdce <rcutils_snprintf+0x26>
 800bdbc:	f007 fda2 	bl	8013904 <vsniprintf>
 800bdc0:	b003      	add	sp, #12
 800bdc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdc6:	b002      	add	sp, #8
 800bdc8:	4770      	bx	lr
 800bdca:	2900      	cmp	r1, #0
 800bdcc:	d0f6      	beq.n	800bdbc <rcutils_snprintf+0x14>
 800bdce:	f007 fe77 	bl	8013ac0 <__errno>
 800bdd2:	2316      	movs	r3, #22
 800bdd4:	6003      	str	r3, [r0, #0]
 800bdd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdda:	e7f1      	b.n	800bdc0 <rcutils_snprintf+0x18>

0800bddc <rcutils_vsnprintf>:
 800bddc:	b570      	push	{r4, r5, r6, lr}
 800bdde:	b13a      	cbz	r2, 800bdf0 <rcutils_vsnprintf+0x14>
 800bde0:	b120      	cbz	r0, 800bdec <rcutils_vsnprintf+0x10>
 800bde2:	b129      	cbz	r1, 800bdf0 <rcutils_vsnprintf+0x14>
 800bde4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bde8:	f007 bd8c 	b.w	8013904 <vsniprintf>
 800bdec:	2900      	cmp	r1, #0
 800bdee:	d0f9      	beq.n	800bde4 <rcutils_vsnprintf+0x8>
 800bdf0:	f007 fe66 	bl	8013ac0 <__errno>
 800bdf4:	2316      	movs	r3, #22
 800bdf6:	6003      	str	r3, [r0, #0]
 800bdf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdfc:	bd70      	pop	{r4, r5, r6, pc}
 800bdfe:	bf00      	nop

0800be00 <rcutils_strdup>:
 800be00:	b084      	sub	sp, #16
 800be02:	b570      	push	{r4, r5, r6, lr}
 800be04:	b086      	sub	sp, #24
 800be06:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 800be0a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 800be0e:	4604      	mov	r4, r0
 800be10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800be14:	f10d 0e04 	add.w	lr, sp, #4
 800be18:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800be1c:	f8dc 3000 	ldr.w	r3, [ip]
 800be20:	f8ce 3000 	str.w	r3, [lr]
 800be24:	b304      	cbz	r4, 800be68 <rcutils_strdup+0x68>
 800be26:	a801      	add	r0, sp, #4
 800be28:	f7fb ff60 	bl	8007cec <rcutils_allocator_is_valid>
 800be2c:	b1e0      	cbz	r0, 800be68 <rcutils_strdup+0x68>
 800be2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be32:	2100      	movs	r1, #0
 800be34:	4620      	mov	r0, r4
 800be36:	f7f4 f9e3 	bl	8000200 <memchr>
 800be3a:	b190      	cbz	r0, 800be62 <rcutils_strdup+0x62>
 800be3c:	1b06      	subs	r6, r0, r4
 800be3e:	1c70      	adds	r0, r6, #1
 800be40:	9b01      	ldr	r3, [sp, #4]
 800be42:	9905      	ldr	r1, [sp, #20]
 800be44:	4798      	blx	r3
 800be46:	4605      	mov	r5, r0
 800be48:	b128      	cbz	r0, 800be56 <rcutils_strdup+0x56>
 800be4a:	4632      	mov	r2, r6
 800be4c:	4621      	mov	r1, r4
 800be4e:	f007 fe6c 	bl	8013b2a <memcpy>
 800be52:	2300      	movs	r3, #0
 800be54:	55ab      	strb	r3, [r5, r6]
 800be56:	4628      	mov	r0, r5
 800be58:	b006      	add	sp, #24
 800be5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be5e:	b004      	add	sp, #16
 800be60:	4770      	bx	lr
 800be62:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800be66:	e7eb      	b.n	800be40 <rcutils_strdup+0x40>
 800be68:	2500      	movs	r5, #0
 800be6a:	e7f4      	b.n	800be56 <rcutils_strdup+0x56>

0800be6c <rcutils_strndup>:
 800be6c:	b082      	sub	sp, #8
 800be6e:	b570      	push	{r4, r5, r6, lr}
 800be70:	ac04      	add	r4, sp, #16
 800be72:	e884 000c 	stmia.w	r4, {r2, r3}
 800be76:	b1e8      	cbz	r0, 800beb4 <rcutils_strndup+0x48>
 800be78:	4605      	mov	r5, r0
 800be7a:	a804      	add	r0, sp, #16
 800be7c:	460c      	mov	r4, r1
 800be7e:	f7fb ff35 	bl	8007cec <rcutils_allocator_is_valid>
 800be82:	b1b8      	cbz	r0, 800beb4 <rcutils_strndup+0x48>
 800be84:	4622      	mov	r2, r4
 800be86:	2100      	movs	r1, #0
 800be88:	4628      	mov	r0, r5
 800be8a:	f7f4 f9b9 	bl	8000200 <memchr>
 800be8e:	b100      	cbz	r0, 800be92 <rcutils_strndup+0x26>
 800be90:	1b44      	subs	r4, r0, r5
 800be92:	9b04      	ldr	r3, [sp, #16]
 800be94:	9908      	ldr	r1, [sp, #32]
 800be96:	1c60      	adds	r0, r4, #1
 800be98:	4798      	blx	r3
 800be9a:	4606      	mov	r6, r0
 800be9c:	b128      	cbz	r0, 800beaa <rcutils_strndup+0x3e>
 800be9e:	4622      	mov	r2, r4
 800bea0:	4629      	mov	r1, r5
 800bea2:	f007 fe42 	bl	8013b2a <memcpy>
 800bea6:	2300      	movs	r3, #0
 800bea8:	5533      	strb	r3, [r6, r4]
 800beaa:	4630      	mov	r0, r6
 800beac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800beb0:	b002      	add	sp, #8
 800beb2:	4770      	bx	lr
 800beb4:	2600      	movs	r6, #0
 800beb6:	4630      	mov	r0, r6
 800beb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bebc:	b002      	add	sp, #8
 800bebe:	4770      	bx	lr

0800bec0 <rcutils_get_zero_initialized_string_map>:
 800bec0:	4b01      	ldr	r3, [pc, #4]	@ (800bec8 <rcutils_get_zero_initialized_string_map+0x8>)
 800bec2:	6818      	ldr	r0, [r3, #0]
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	08015264 	.word	0x08015264

0800becc <rcutils_string_map_reserve>:
 800becc:	2800      	cmp	r0, #0
 800bece:	d04e      	beq.n	800bf6e <rcutils_string_map_reserve+0xa2>
 800bed0:	b530      	push	{r4, r5, lr}
 800bed2:	6803      	ldr	r3, [r0, #0]
 800bed4:	b087      	sub	sp, #28
 800bed6:	4604      	mov	r4, r0
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d043      	beq.n	800bf64 <rcutils_string_map_reserve+0x98>
 800bedc:	f103 0c0c 	add.w	ip, r3, #12
 800bee0:	460d      	mov	r5, r1
 800bee2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bee6:	f10d 0e04 	add.w	lr, sp, #4
 800beea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800beee:	f8dc 3000 	ldr.w	r3, [ip]
 800bef2:	f8ce 3000 	str.w	r3, [lr]
 800bef6:	a801      	add	r0, sp, #4
 800bef8:	f7fb fef8 	bl	8007cec <rcutils_allocator_is_valid>
 800befc:	b308      	cbz	r0, 800bf42 <rcutils_string_map_reserve+0x76>
 800befe:	6823      	ldr	r3, [r4, #0]
 800bf00:	6899      	ldr	r1, [r3, #8]
 800bf02:	42a9      	cmp	r1, r5
 800bf04:	d829      	bhi.n	800bf5a <rcutils_string_map_reserve+0x8e>
 800bf06:	685a      	ldr	r2, [r3, #4]
 800bf08:	42aa      	cmp	r2, r5
 800bf0a:	d024      	beq.n	800bf56 <rcutils_string_map_reserve+0x8a>
 800bf0c:	b1e5      	cbz	r5, 800bf48 <rcutils_string_map_reserve+0x7c>
 800bf0e:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 800bf12:	d22a      	bcs.n	800bf6a <rcutils_string_map_reserve+0x9e>
 800bf14:	6818      	ldr	r0, [r3, #0]
 800bf16:	9a05      	ldr	r2, [sp, #20]
 800bf18:	9b03      	ldr	r3, [sp, #12]
 800bf1a:	00e9      	lsls	r1, r5, #3
 800bf1c:	4798      	blx	r3
 800bf1e:	b320      	cbz	r0, 800bf6a <rcutils_string_map_reserve+0x9e>
 800bf20:	6824      	ldr	r4, [r4, #0]
 800bf22:	6861      	ldr	r1, [r4, #4]
 800bf24:	6020      	str	r0, [r4, #0]
 800bf26:	42a9      	cmp	r1, r5
 800bf28:	d214      	bcs.n	800bf54 <rcutils_string_map_reserve+0x88>
 800bf2a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 800bf2e:	1a69      	subs	r1, r5, r1
 800bf30:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800bf34:	2200      	movs	r2, #0
 800bf36:	e9c3 2200 	strd	r2, r2, [r3]
 800bf3a:	3308      	adds	r3, #8
 800bf3c:	428b      	cmp	r3, r1
 800bf3e:	d1fa      	bne.n	800bf36 <rcutils_string_map_reserve+0x6a>
 800bf40:	e008      	b.n	800bf54 <rcutils_string_map_reserve+0x88>
 800bf42:	200b      	movs	r0, #11
 800bf44:	b007      	add	sp, #28
 800bf46:	bd30      	pop	{r4, r5, pc}
 800bf48:	9a02      	ldr	r2, [sp, #8]
 800bf4a:	9905      	ldr	r1, [sp, #20]
 800bf4c:	6818      	ldr	r0, [r3, #0]
 800bf4e:	4790      	blx	r2
 800bf50:	6824      	ldr	r4, [r4, #0]
 800bf52:	6025      	str	r5, [r4, #0]
 800bf54:	6065      	str	r5, [r4, #4]
 800bf56:	2000      	movs	r0, #0
 800bf58:	e7f4      	b.n	800bf44 <rcutils_string_map_reserve+0x78>
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f7ff ffb6 	bl	800becc <rcutils_string_map_reserve>
 800bf60:	b007      	add	sp, #28
 800bf62:	bd30      	pop	{r4, r5, pc}
 800bf64:	201f      	movs	r0, #31
 800bf66:	b007      	add	sp, #28
 800bf68:	bd30      	pop	{r4, r5, pc}
 800bf6a:	200a      	movs	r0, #10
 800bf6c:	e7ea      	b.n	800bf44 <rcutils_string_map_reserve+0x78>
 800bf6e:	200b      	movs	r0, #11
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop

0800bf74 <rcutils_string_map_init>:
 800bf74:	b082      	sub	sp, #8
 800bf76:	b570      	push	{r4, r5, r6, lr}
 800bf78:	ac04      	add	r4, sp, #16
 800bf7a:	e884 000c 	stmia.w	r4, {r2, r3}
 800bf7e:	b378      	cbz	r0, 800bfe0 <rcutils_string_map_init+0x6c>
 800bf80:	6806      	ldr	r6, [r0, #0]
 800bf82:	4604      	mov	r4, r0
 800bf84:	b12e      	cbz	r6, 800bf92 <rcutils_string_map_init+0x1e>
 800bf86:	251e      	movs	r5, #30
 800bf88:	4628      	mov	r0, r5
 800bf8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf8e:	b002      	add	sp, #8
 800bf90:	4770      	bx	lr
 800bf92:	a804      	add	r0, sp, #16
 800bf94:	460d      	mov	r5, r1
 800bf96:	f7fb fea9 	bl	8007cec <rcutils_allocator_is_valid>
 800bf9a:	b308      	cbz	r0, 800bfe0 <rcutils_string_map_init+0x6c>
 800bf9c:	9b04      	ldr	r3, [sp, #16]
 800bf9e:	9908      	ldr	r1, [sp, #32]
 800bfa0:	2020      	movs	r0, #32
 800bfa2:	4798      	blx	r3
 800bfa4:	6020      	str	r0, [r4, #0]
 800bfa6:	b308      	cbz	r0, 800bfec <rcutils_string_map_init+0x78>
 800bfa8:	f10d 0e10 	add.w	lr, sp, #16
 800bfac:	e9c0 6600 	strd	r6, r6, [r0]
 800bfb0:	6086      	str	r6, [r0, #8]
 800bfb2:	f100 0c0c 	add.w	ip, r0, #12
 800bfb6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bfba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bfbe:	f8de 3000 	ldr.w	r3, [lr]
 800bfc2:	f8cc 3000 	str.w	r3, [ip]
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	4620      	mov	r0, r4
 800bfca:	f7ff ff7f 	bl	800becc <rcutils_string_map_reserve>
 800bfce:	4605      	mov	r5, r0
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	d0d9      	beq.n	800bf88 <rcutils_string_map_init+0x14>
 800bfd4:	9b05      	ldr	r3, [sp, #20]
 800bfd6:	9908      	ldr	r1, [sp, #32]
 800bfd8:	6820      	ldr	r0, [r4, #0]
 800bfda:	4798      	blx	r3
 800bfdc:	6026      	str	r6, [r4, #0]
 800bfde:	e7d3      	b.n	800bf88 <rcutils_string_map_init+0x14>
 800bfe0:	250b      	movs	r5, #11
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bfe8:	b002      	add	sp, #8
 800bfea:	4770      	bx	lr
 800bfec:	250a      	movs	r5, #10
 800bfee:	e7cb      	b.n	800bf88 <rcutils_string_map_init+0x14>

0800bff0 <rcutils_string_map_fini>:
 800bff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bff4:	b086      	sub	sp, #24
 800bff6:	2800      	cmp	r0, #0
 800bff8:	d04f      	beq.n	800c09a <rcutils_string_map_fini+0xaa>
 800bffa:	6805      	ldr	r5, [r0, #0]
 800bffc:	4606      	mov	r6, r0
 800bffe:	2d00      	cmp	r5, #0
 800c000:	d046      	beq.n	800c090 <rcutils_string_map_fini+0xa0>
 800c002:	686b      	ldr	r3, [r5, #4]
 800c004:	b353      	cbz	r3, 800c05c <rcutils_string_map_fini+0x6c>
 800c006:	2400      	movs	r4, #0
 800c008:	682a      	ldr	r2, [r5, #0]
 800c00a:	4627      	mov	r7, r4
 800c00c:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 800c010:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800c014:	b1f8      	cbz	r0, 800c056 <rcutils_string_map_fini+0x66>
 800c016:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 800c01a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c01e:	4651      	mov	r1, sl
 800c020:	47c8      	blx	r9
 800c022:	682b      	ldr	r3, [r5, #0]
 800c024:	eb03 0208 	add.w	r2, r3, r8
 800c028:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 800c02c:	6850      	ldr	r0, [r2, #4]
 800c02e:	4651      	mov	r1, sl
 800c030:	47c8      	blx	r9
 800c032:	682a      	ldr	r2, [r5, #0]
 800c034:	68ab      	ldr	r3, [r5, #8]
 800c036:	4442      	add	r2, r8
 800c038:	3b01      	subs	r3, #1
 800c03a:	6057      	str	r7, [r2, #4]
 800c03c:	60ab      	str	r3, [r5, #8]
 800c03e:	6835      	ldr	r5, [r6, #0]
 800c040:	686b      	ldr	r3, [r5, #4]
 800c042:	3401      	adds	r4, #1
 800c044:	429c      	cmp	r4, r3
 800c046:	d209      	bcs.n	800c05c <rcutils_string_map_fini+0x6c>
 800c048:	682a      	ldr	r2, [r5, #0]
 800c04a:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 800c04e:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800c052:	2800      	cmp	r0, #0
 800c054:	d1df      	bne.n	800c016 <rcutils_string_map_fini+0x26>
 800c056:	3401      	adds	r4, #1
 800c058:	42a3      	cmp	r3, r4
 800c05a:	d8d7      	bhi.n	800c00c <rcutils_string_map_fini+0x1c>
 800c05c:	2100      	movs	r1, #0
 800c05e:	4630      	mov	r0, r6
 800c060:	f7ff ff34 	bl	800becc <rcutils_string_map_reserve>
 800c064:	4604      	mov	r4, r0
 800c066:	b118      	cbz	r0, 800c070 <rcutils_string_map_fini+0x80>
 800c068:	4620      	mov	r0, r4
 800c06a:	b006      	add	sp, #24
 800c06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c070:	6835      	ldr	r5, [r6, #0]
 800c072:	350c      	adds	r5, #12
 800c074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c076:	af01      	add	r7, sp, #4
 800c078:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c07a:	682b      	ldr	r3, [r5, #0]
 800c07c:	603b      	str	r3, [r7, #0]
 800c07e:	a801      	add	r0, sp, #4
 800c080:	f7fb fe34 	bl	8007cec <rcutils_allocator_is_valid>
 800c084:	b148      	cbz	r0, 800c09a <rcutils_string_map_fini+0xaa>
 800c086:	9b02      	ldr	r3, [sp, #8]
 800c088:	9905      	ldr	r1, [sp, #20]
 800c08a:	6830      	ldr	r0, [r6, #0]
 800c08c:	4798      	blx	r3
 800c08e:	6034      	str	r4, [r6, #0]
 800c090:	2400      	movs	r4, #0
 800c092:	4620      	mov	r0, r4
 800c094:	b006      	add	sp, #24
 800c096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c09a:	240b      	movs	r4, #11
 800c09c:	4620      	mov	r0, r4
 800c09e:	b006      	add	sp, #24
 800c0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c0a4 <rcutils_string_map_getn>:
 800c0a4:	b338      	cbz	r0, 800c0f6 <rcutils_string_map_getn+0x52>
 800c0a6:	6800      	ldr	r0, [r0, #0]
 800c0a8:	b328      	cbz	r0, 800c0f6 <rcutils_string_map_getn+0x52>
 800c0aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0ae:	460e      	mov	r6, r1
 800c0b0:	b1c1      	cbz	r1, 800c0e4 <rcutils_string_map_getn+0x40>
 800c0b2:	e9d0 9800 	ldrd	r9, r8, [r0]
 800c0b6:	f1b8 0f00 	cmp.w	r8, #0
 800c0ba:	d013      	beq.n	800c0e4 <rcutils_string_map_getn+0x40>
 800c0bc:	4617      	mov	r7, r2
 800c0be:	2400      	movs	r4, #0
 800c0c0:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	b155      	cbz	r5, 800c0de <rcutils_string_map_getn+0x3a>
 800c0c8:	f7f4 f8ea 	bl	80002a0 <strlen>
 800c0cc:	42b8      	cmp	r0, r7
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	bf38      	it	cc
 800c0d4:	463a      	movcc	r2, r7
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	f007 fc61 	bl	801399e <strncmp>
 800c0dc:	b128      	cbz	r0, 800c0ea <rcutils_string_map_getn+0x46>
 800c0de:	3401      	adds	r4, #1
 800c0e0:	45a0      	cmp	r8, r4
 800c0e2:	d1ed      	bne.n	800c0c0 <rcutils_string_map_getn+0x1c>
 800c0e4:	2000      	movs	r0, #0
 800c0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ea:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 800c0ee:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0f6:	4770      	bx	lr

0800c0f8 <rmw_get_zero_initialized_context>:
 800c0f8:	b510      	push	{r4, lr}
 800c0fa:	4903      	ldr	r1, [pc, #12]	@ (800c108 <rmw_get_zero_initialized_context+0x10>)
 800c0fc:	4604      	mov	r4, r0
 800c0fe:	2270      	movs	r2, #112	@ 0x70
 800c100:	f007 fd13 	bl	8013b2a <memcpy>
 800c104:	4620      	mov	r0, r4
 800c106:	bd10      	pop	{r4, pc}
 800c108:	08015268 	.word	0x08015268

0800c10c <rmw_get_zero_initialized_init_options>:
 800c10c:	b510      	push	{r4, lr}
 800c10e:	4903      	ldr	r1, [pc, #12]	@ (800c11c <rmw_get_zero_initialized_init_options+0x10>)
 800c110:	4604      	mov	r4, r0
 800c112:	2258      	movs	r2, #88	@ 0x58
 800c114:	f007 fd09 	bl	8013b2a <memcpy>
 800c118:	4620      	mov	r0, r4
 800c11a:	bd10      	pop	{r4, pc}
 800c11c:	080152d8 	.word	0x080152d8

0800c120 <rmw_subscription_content_filter_options_fini>:
 800c120:	b1b0      	cbz	r0, 800c150 <rmw_subscription_content_filter_options_fini+0x30>
 800c122:	b538      	push	{r3, r4, r5, lr}
 800c124:	4604      	mov	r4, r0
 800c126:	4608      	mov	r0, r1
 800c128:	460d      	mov	r5, r1
 800c12a:	f7fb fddf 	bl	8007cec <rcutils_allocator_is_valid>
 800c12e:	b168      	cbz	r0, 800c14c <rmw_subscription_content_filter_options_fini+0x2c>
 800c130:	6820      	ldr	r0, [r4, #0]
 800c132:	b120      	cbz	r0, 800c13e <rmw_subscription_content_filter_options_fini+0x1e>
 800c134:	686b      	ldr	r3, [r5, #4]
 800c136:	6929      	ldr	r1, [r5, #16]
 800c138:	4798      	blx	r3
 800c13a:	2300      	movs	r3, #0
 800c13c:	6023      	str	r3, [r4, #0]
 800c13e:	1d20      	adds	r0, r4, #4
 800c140:	f005 fe12 	bl	8011d68 <rcutils_string_array_fini>
 800c144:	3800      	subs	r0, #0
 800c146:	bf18      	it	ne
 800c148:	2001      	movne	r0, #1
 800c14a:	bd38      	pop	{r3, r4, r5, pc}
 800c14c:	200b      	movs	r0, #11
 800c14e:	bd38      	pop	{r3, r4, r5, pc}
 800c150:	200b      	movs	r0, #11
 800c152:	4770      	bx	lr

0800c154 <rmw_get_default_subscription_options>:
 800c154:	2200      	movs	r2, #0
 800c156:	e9c0 2200 	strd	r2, r2, [r0]
 800c15a:	6082      	str	r2, [r0, #8]
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop

0800c160 <rmw_get_zero_initialized_message_info>:
 800c160:	b510      	push	{r4, lr}
 800c162:	4c09      	ldr	r4, [pc, #36]	@ (800c188 <rmw_get_zero_initialized_message_info+0x28>)
 800c164:	4686      	mov	lr, r0
 800c166:	4684      	mov	ip, r0
 800c168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c16a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c16e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c170:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c176:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c17a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c17e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c182:	4670      	mov	r0, lr
 800c184:	bd10      	pop	{r4, pc}
 800c186:	bf00      	nop
 800c188:	08015330 	.word	0x08015330

0800c18c <rmw_validate_full_topic_name>:
 800c18c:	2800      	cmp	r0, #0
 800c18e:	d049      	beq.n	800c224 <rmw_validate_full_topic_name+0x98>
 800c190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c194:	460e      	mov	r6, r1
 800c196:	2900      	cmp	r1, #0
 800c198:	d056      	beq.n	800c248 <rmw_validate_full_topic_name+0xbc>
 800c19a:	4615      	mov	r5, r2
 800c19c:	4604      	mov	r4, r0
 800c19e:	f7f4 f87f 	bl	80002a0 <strlen>
 800c1a2:	b150      	cbz	r0, 800c1ba <rmw_validate_full_topic_name+0x2e>
 800c1a4:	7823      	ldrb	r3, [r4, #0]
 800c1a6:	2b2f      	cmp	r3, #47	@ 0x2f
 800c1a8:	d00c      	beq.n	800c1c4 <rmw_validate_full_topic_name+0x38>
 800c1aa:	2302      	movs	r3, #2
 800c1ac:	6033      	str	r3, [r6, #0]
 800c1ae:	b10d      	cbz	r5, 800c1b4 <rmw_validate_full_topic_name+0x28>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	602b      	str	r3, [r5, #0]
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	6033      	str	r3, [r6, #0]
 800c1be:	2d00      	cmp	r5, #0
 800c1c0:	d1f6      	bne.n	800c1b0 <rmw_validate_full_topic_name+0x24>
 800c1c2:	e7f7      	b.n	800c1b4 <rmw_validate_full_topic_name+0x28>
 800c1c4:	1e47      	subs	r7, r0, #1
 800c1c6:	5de3      	ldrb	r3, [r4, r7]
 800c1c8:	2b2f      	cmp	r3, #47	@ 0x2f
 800c1ca:	d03f      	beq.n	800c24c <rmw_validate_full_topic_name+0xc0>
 800c1cc:	1e63      	subs	r3, r4, #1
 800c1ce:	4621      	mov	r1, r4
 800c1d0:	eb03 0e00 	add.w	lr, r3, r0
 800c1d4:	469c      	mov	ip, r3
 800c1d6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800c1da:	2a5f      	cmp	r2, #95	@ 0x5f
 800c1dc:	d006      	beq.n	800c1ec <rmw_validate_full_topic_name+0x60>
 800c1de:	d823      	bhi.n	800c228 <rmw_validate_full_topic_name+0x9c>
 800c1e0:	2a39      	cmp	r2, #57	@ 0x39
 800c1e2:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 800c1e6:	d82b      	bhi.n	800c240 <rmw_validate_full_topic_name+0xb4>
 800c1e8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c1ea:	d920      	bls.n	800c22e <rmw_validate_full_topic_name+0xa2>
 800c1ec:	4573      	cmp	r3, lr
 800c1ee:	d1f1      	bne.n	800c1d4 <rmw_validate_full_topic_name+0x48>
 800c1f0:	4c21      	ldr	r4, [pc, #132]	@ (800c278 <rmw_validate_full_topic_name+0xec>)
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	e003      	b.n	800c1fe <rmw_validate_full_topic_name+0x72>
 800c1f6:	4298      	cmp	r0, r3
 800c1f8:	f101 0101 	add.w	r1, r1, #1
 800c1fc:	d02c      	beq.n	800c258 <rmw_validate_full_topic_name+0xcc>
 800c1fe:	429f      	cmp	r7, r3
 800c200:	f103 0301 	add.w	r3, r3, #1
 800c204:	d0f7      	beq.n	800c1f6 <rmw_validate_full_topic_name+0x6a>
 800c206:	780a      	ldrb	r2, [r1, #0]
 800c208:	2a2f      	cmp	r2, #47	@ 0x2f
 800c20a:	d1f4      	bne.n	800c1f6 <rmw_validate_full_topic_name+0x6a>
 800c20c:	784a      	ldrb	r2, [r1, #1]
 800c20e:	2a2f      	cmp	r2, #47	@ 0x2f
 800c210:	d02d      	beq.n	800c26e <rmw_validate_full_topic_name+0xe2>
 800c212:	5ca2      	ldrb	r2, [r4, r2]
 800c214:	0752      	lsls	r2, r2, #29
 800c216:	d5ee      	bpl.n	800c1f6 <rmw_validate_full_topic_name+0x6a>
 800c218:	2206      	movs	r2, #6
 800c21a:	6032      	str	r2, [r6, #0]
 800c21c:	2d00      	cmp	r5, #0
 800c21e:	d0c9      	beq.n	800c1b4 <rmw_validate_full_topic_name+0x28>
 800c220:	602b      	str	r3, [r5, #0]
 800c222:	e7c7      	b.n	800c1b4 <rmw_validate_full_topic_name+0x28>
 800c224:	200b      	movs	r0, #11
 800c226:	4770      	bx	lr
 800c228:	3a61      	subs	r2, #97	@ 0x61
 800c22a:	2a19      	cmp	r2, #25
 800c22c:	d9de      	bls.n	800c1ec <rmw_validate_full_topic_name+0x60>
 800c22e:	2304      	movs	r3, #4
 800c230:	6033      	str	r3, [r6, #0]
 800c232:	2d00      	cmp	r5, #0
 800c234:	d0be      	beq.n	800c1b4 <rmw_validate_full_topic_name+0x28>
 800c236:	f1c4 0401 	rsb	r4, r4, #1
 800c23a:	4464      	add	r4, ip
 800c23c:	602c      	str	r4, [r5, #0]
 800c23e:	e7b9      	b.n	800c1b4 <rmw_validate_full_topic_name+0x28>
 800c240:	f1b8 0f19 	cmp.w	r8, #25
 800c244:	d9d2      	bls.n	800c1ec <rmw_validate_full_topic_name+0x60>
 800c246:	e7f2      	b.n	800c22e <rmw_validate_full_topic_name+0xa2>
 800c248:	200b      	movs	r0, #11
 800c24a:	e7b4      	b.n	800c1b6 <rmw_validate_full_topic_name+0x2a>
 800c24c:	2303      	movs	r3, #3
 800c24e:	6033      	str	r3, [r6, #0]
 800c250:	2d00      	cmp	r5, #0
 800c252:	d0af      	beq.n	800c1b4 <rmw_validate_full_topic_name+0x28>
 800c254:	602f      	str	r7, [r5, #0]
 800c256:	e7ad      	b.n	800c1b4 <rmw_validate_full_topic_name+0x28>
 800c258:	28f7      	cmp	r0, #247	@ 0xf7
 800c25a:	d802      	bhi.n	800c262 <rmw_validate_full_topic_name+0xd6>
 800c25c:	2300      	movs	r3, #0
 800c25e:	6033      	str	r3, [r6, #0]
 800c260:	e7a8      	b.n	800c1b4 <rmw_validate_full_topic_name+0x28>
 800c262:	2307      	movs	r3, #7
 800c264:	6033      	str	r3, [r6, #0]
 800c266:	2d00      	cmp	r5, #0
 800c268:	d0a4      	beq.n	800c1b4 <rmw_validate_full_topic_name+0x28>
 800c26a:	23f6      	movs	r3, #246	@ 0xf6
 800c26c:	e7d8      	b.n	800c220 <rmw_validate_full_topic_name+0x94>
 800c26e:	2205      	movs	r2, #5
 800c270:	6032      	str	r2, [r6, #0]
 800c272:	2d00      	cmp	r5, #0
 800c274:	d1d4      	bne.n	800c220 <rmw_validate_full_topic_name+0x94>
 800c276:	e79d      	b.n	800c1b4 <rmw_validate_full_topic_name+0x28>
 800c278:	0801570f 	.word	0x0801570f

0800c27c <rmw_validate_namespace_with_size>:
 800c27c:	2800      	cmp	r0, #0
 800c27e:	d031      	beq.n	800c2e4 <rmw_validate_namespace_with_size+0x68>
 800c280:	b570      	push	{r4, r5, r6, lr}
 800c282:	4614      	mov	r4, r2
 800c284:	b0c2      	sub	sp, #264	@ 0x108
 800c286:	b1ba      	cbz	r2, 800c2b8 <rmw_validate_namespace_with_size+0x3c>
 800c288:	2901      	cmp	r1, #1
 800c28a:	460e      	mov	r6, r1
 800c28c:	461d      	mov	r5, r3
 800c28e:	d102      	bne.n	800c296 <rmw_validate_namespace_with_size+0x1a>
 800c290:	7803      	ldrb	r3, [r0, #0]
 800c292:	2b2f      	cmp	r3, #47	@ 0x2f
 800c294:	d015      	beq.n	800c2c2 <rmw_validate_namespace_with_size+0x46>
 800c296:	aa01      	add	r2, sp, #4
 800c298:	4669      	mov	r1, sp
 800c29a:	f7ff ff77 	bl	800c18c <rmw_validate_full_topic_name>
 800c29e:	b960      	cbnz	r0, 800c2ba <rmw_validate_namespace_with_size+0x3e>
 800c2a0:	9b00      	ldr	r3, [sp, #0]
 800c2a2:	b163      	cbz	r3, 800c2be <rmw_validate_namespace_with_size+0x42>
 800c2a4:	2b07      	cmp	r3, #7
 800c2a6:	d00a      	beq.n	800c2be <rmw_validate_namespace_with_size+0x42>
 800c2a8:	1e5a      	subs	r2, r3, #1
 800c2aa:	2a05      	cmp	r2, #5
 800c2ac:	d81c      	bhi.n	800c2e8 <rmw_validate_namespace_with_size+0x6c>
 800c2ae:	e8df f002 	tbb	[pc, r2]
 800c2b2:	0c0c      	.short	0x0c0c
 800c2b4:	0c0c0c0c 	.word	0x0c0c0c0c
 800c2b8:	200b      	movs	r0, #11
 800c2ba:	b042      	add	sp, #264	@ 0x108
 800c2bc:	bd70      	pop	{r4, r5, r6, pc}
 800c2be:	2ef5      	cmp	r6, #245	@ 0xf5
 800c2c0:	d809      	bhi.n	800c2d6 <rmw_validate_namespace_with_size+0x5a>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	e7f7      	b.n	800c2ba <rmw_validate_namespace_with_size+0x3e>
 800c2ca:	6023      	str	r3, [r4, #0]
 800c2cc:	2d00      	cmp	r5, #0
 800c2ce:	d0fa      	beq.n	800c2c6 <rmw_validate_namespace_with_size+0x4a>
 800c2d0:	9b01      	ldr	r3, [sp, #4]
 800c2d2:	602b      	str	r3, [r5, #0]
 800c2d4:	e7f7      	b.n	800c2c6 <rmw_validate_namespace_with_size+0x4a>
 800c2d6:	2307      	movs	r3, #7
 800c2d8:	6023      	str	r3, [r4, #0]
 800c2da:	2d00      	cmp	r5, #0
 800c2dc:	d0f3      	beq.n	800c2c6 <rmw_validate_namespace_with_size+0x4a>
 800c2de:	23f4      	movs	r3, #244	@ 0xf4
 800c2e0:	602b      	str	r3, [r5, #0]
 800c2e2:	e7f0      	b.n	800c2c6 <rmw_validate_namespace_with_size+0x4a>
 800c2e4:	200b      	movs	r0, #11
 800c2e6:	4770      	bx	lr
 800c2e8:	4a03      	ldr	r2, [pc, #12]	@ (800c2f8 <rmw_validate_namespace_with_size+0x7c>)
 800c2ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c2ee:	a802      	add	r0, sp, #8
 800c2f0:	f7ff fd5a 	bl	800bda8 <rcutils_snprintf>
 800c2f4:	2001      	movs	r0, #1
 800c2f6:	e7e0      	b.n	800c2ba <rmw_validate_namespace_with_size+0x3e>
 800c2f8:	08014c50 	.word	0x08014c50

0800c2fc <rmw_validate_namespace>:
 800c2fc:	b168      	cbz	r0, 800c31a <rmw_validate_namespace+0x1e>
 800c2fe:	b570      	push	{r4, r5, r6, lr}
 800c300:	460d      	mov	r5, r1
 800c302:	4616      	mov	r6, r2
 800c304:	4604      	mov	r4, r0
 800c306:	f7f3 ffcb 	bl	80002a0 <strlen>
 800c30a:	4633      	mov	r3, r6
 800c30c:	4601      	mov	r1, r0
 800c30e:	462a      	mov	r2, r5
 800c310:	4620      	mov	r0, r4
 800c312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c316:	f7ff bfb1 	b.w	800c27c <rmw_validate_namespace_with_size>
 800c31a:	200b      	movs	r0, #11
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop

0800c320 <rmw_namespace_validation_result_string>:
 800c320:	2807      	cmp	r0, #7
 800c322:	bf9a      	itte	ls
 800c324:	4b02      	ldrls	r3, [pc, #8]	@ (800c330 <rmw_namespace_validation_result_string+0x10>)
 800c326:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800c32a:	4802      	ldrhi	r0, [pc, #8]	@ (800c334 <rmw_namespace_validation_result_string+0x14>)
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	08015368 	.word	0x08015368
 800c334:	08014ca0 	.word	0x08014ca0

0800c338 <rmw_validate_node_name>:
 800c338:	2800      	cmp	r0, #0
 800c33a:	d037      	beq.n	800c3ac <rmw_validate_node_name+0x74>
 800c33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33e:	460e      	mov	r6, r1
 800c340:	2900      	cmp	r1, #0
 800c342:	d035      	beq.n	800c3b0 <rmw_validate_node_name+0x78>
 800c344:	4617      	mov	r7, r2
 800c346:	4604      	mov	r4, r0
 800c348:	f7f3 ffaa 	bl	80002a0 <strlen>
 800c34c:	b1d8      	cbz	r0, 800c386 <rmw_validate_node_name+0x4e>
 800c34e:	1e63      	subs	r3, r4, #1
 800c350:	1819      	adds	r1, r3, r0
 800c352:	461a      	mov	r2, r3
 800c354:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800c358:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 800c35c:	f02e 0c20 	bic.w	ip, lr, #32
 800c360:	2d09      	cmp	r5, #9
 800c362:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800c366:	d915      	bls.n	800c394 <rmw_validate_node_name+0x5c>
 800c368:	f1bc 0f19 	cmp.w	ip, #25
 800c36c:	d912      	bls.n	800c394 <rmw_validate_node_name+0x5c>
 800c36e:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800c372:	d00f      	beq.n	800c394 <rmw_validate_node_name+0x5c>
 800c374:	2302      	movs	r3, #2
 800c376:	6033      	str	r3, [r6, #0]
 800c378:	b11f      	cbz	r7, 800c382 <rmw_validate_node_name+0x4a>
 800c37a:	f1c4 0401 	rsb	r4, r4, #1
 800c37e:	4414      	add	r4, r2
 800c380:	603c      	str	r4, [r7, #0]
 800c382:	2000      	movs	r0, #0
 800c384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c386:	2301      	movs	r3, #1
 800c388:	6033      	str	r3, [r6, #0]
 800c38a:	2f00      	cmp	r7, #0
 800c38c:	d0f9      	beq.n	800c382 <rmw_validate_node_name+0x4a>
 800c38e:	2300      	movs	r3, #0
 800c390:	603b      	str	r3, [r7, #0]
 800c392:	e7f6      	b.n	800c382 <rmw_validate_node_name+0x4a>
 800c394:	4299      	cmp	r1, r3
 800c396:	d1dc      	bne.n	800c352 <rmw_validate_node_name+0x1a>
 800c398:	7823      	ldrb	r3, [r4, #0]
 800c39a:	4a0c      	ldr	r2, [pc, #48]	@ (800c3cc <rmw_validate_node_name+0x94>)
 800c39c:	5cd3      	ldrb	r3, [r2, r3]
 800c39e:	f013 0304 	ands.w	r3, r3, #4
 800c3a2:	d10e      	bne.n	800c3c2 <rmw_validate_node_name+0x8a>
 800c3a4:	28ff      	cmp	r0, #255	@ 0xff
 800c3a6:	d805      	bhi.n	800c3b4 <rmw_validate_node_name+0x7c>
 800c3a8:	6033      	str	r3, [r6, #0]
 800c3aa:	e7ea      	b.n	800c382 <rmw_validate_node_name+0x4a>
 800c3ac:	200b      	movs	r0, #11
 800c3ae:	4770      	bx	lr
 800c3b0:	200b      	movs	r0, #11
 800c3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3b4:	2304      	movs	r3, #4
 800c3b6:	6033      	str	r3, [r6, #0]
 800c3b8:	2f00      	cmp	r7, #0
 800c3ba:	d0e2      	beq.n	800c382 <rmw_validate_node_name+0x4a>
 800c3bc:	23fe      	movs	r3, #254	@ 0xfe
 800c3be:	603b      	str	r3, [r7, #0]
 800c3c0:	e7df      	b.n	800c382 <rmw_validate_node_name+0x4a>
 800c3c2:	2303      	movs	r3, #3
 800c3c4:	6033      	str	r3, [r6, #0]
 800c3c6:	2f00      	cmp	r7, #0
 800c3c8:	d1e1      	bne.n	800c38e <rmw_validate_node_name+0x56>
 800c3ca:	e7da      	b.n	800c382 <rmw_validate_node_name+0x4a>
 800c3cc:	0801570f 	.word	0x0801570f

0800c3d0 <rmw_node_name_validation_result_string>:
 800c3d0:	2804      	cmp	r0, #4
 800c3d2:	bf9a      	itte	ls
 800c3d4:	4b02      	ldrls	r3, [pc, #8]	@ (800c3e0 <rmw_node_name_validation_result_string+0x10>)
 800c3d6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800c3da:	4802      	ldrhi	r0, [pc, #8]	@ (800c3e4 <rmw_node_name_validation_result_string+0x14>)
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	08015388 	.word	0x08015388
 800c3e4:	08014e48 	.word	0x08014e48

0800c3e8 <rmw_destroy_client>:
 800c3e8:	b570      	push	{r4, r5, r6, lr}
 800c3ea:	b128      	cbz	r0, 800c3f8 <rmw_destroy_client+0x10>
 800c3ec:	4604      	mov	r4, r0
 800c3ee:	6800      	ldr	r0, [r0, #0]
 800c3f0:	460d      	mov	r5, r1
 800c3f2:	f001 fc69 	bl	800dcc8 <is_uxrce_rmw_identifier_valid>
 800c3f6:	b910      	cbnz	r0, 800c3fe <rmw_destroy_client+0x16>
 800c3f8:	2401      	movs	r4, #1
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	bd70      	pop	{r4, r5, r6, pc}
 800c3fe:	6863      	ldr	r3, [r4, #4]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d0f9      	beq.n	800c3f8 <rmw_destroy_client+0x10>
 800c404:	2d00      	cmp	r5, #0
 800c406:	d0f7      	beq.n	800c3f8 <rmw_destroy_client+0x10>
 800c408:	6828      	ldr	r0, [r5, #0]
 800c40a:	f001 fc5d 	bl	800dcc8 <is_uxrce_rmw_identifier_valid>
 800c40e:	2800      	cmp	r0, #0
 800c410:	d0f2      	beq.n	800c3f8 <rmw_destroy_client+0x10>
 800c412:	686e      	ldr	r6, [r5, #4]
 800c414:	2e00      	cmp	r6, #0
 800c416:	d0ef      	beq.n	800c3f8 <rmw_destroy_client+0x10>
 800c418:	6864      	ldr	r4, [r4, #4]
 800c41a:	6932      	ldr	r2, [r6, #16]
 800c41c:	6920      	ldr	r0, [r4, #16]
 800c41e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c422:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c426:	6819      	ldr	r1, [r3, #0]
 800c428:	f001 ff38 	bl	800e29c <uxr_buffer_cancel_data>
 800c42c:	4602      	mov	r2, r0
 800c42e:	6920      	ldr	r0, [r4, #16]
 800c430:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c434:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c438:	f001 fbc0 	bl	800dbbc <run_xrce_session>
 800c43c:	6920      	ldr	r0, [r4, #16]
 800c43e:	6932      	ldr	r2, [r6, #16]
 800c440:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c444:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c448:	6819      	ldr	r1, [r3, #0]
 800c44a:	f001 fcb9 	bl	800ddc0 <uxr_buffer_delete_entity>
 800c44e:	4602      	mov	r2, r0
 800c450:	6920      	ldr	r0, [r4, #16]
 800c452:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c456:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c45a:	f001 fbaf 	bl	800dbbc <run_xrce_session>
 800c45e:	f080 0401 	eor.w	r4, r0, #1
 800c462:	b2e4      	uxtb	r4, r4
 800c464:	4628      	mov	r0, r5
 800c466:	0064      	lsls	r4, r4, #1
 800c468:	f001 fa88 	bl	800d97c <rmw_uxrce_fini_client_memory>
 800c46c:	e7c5      	b.n	800c3fa <rmw_destroy_client+0x12>
 800c46e:	bf00      	nop

0800c470 <rmw_get_gid_for_client>:
 800c470:	b1a8      	cbz	r0, 800c49e <rmw_get_gid_for_client+0x2e>
 800c472:	b538      	push	{r3, r4, r5, lr}
 800c474:	460c      	mov	r4, r1
 800c476:	b1a1      	cbz	r1, 800c4a2 <rmw_get_gid_for_client+0x32>
 800c478:	4605      	mov	r5, r0
 800c47a:	6800      	ldr	r0, [r0, #0]
 800c47c:	b120      	cbz	r0, 800c488 <rmw_get_gid_for_client+0x18>
 800c47e:	4b0a      	ldr	r3, [pc, #40]	@ (800c4a8 <rmw_get_gid_for_client+0x38>)
 800c480:	6819      	ldr	r1, [r3, #0]
 800c482:	f7f3 fead 	bl	80001e0 <strcmp>
 800c486:	b940      	cbnz	r0, 800c49a <rmw_get_gid_for_client+0x2a>
 800c488:	686b      	ldr	r3, [r5, #4]
 800c48a:	2000      	movs	r0, #0
 800c48c:	6060      	str	r0, [r4, #4]
 800c48e:	60a0      	str	r0, [r4, #8]
 800c490:	60e0      	str	r0, [r4, #12]
 800c492:	6120      	str	r0, [r4, #16]
 800c494:	691b      	ldr	r3, [r3, #16]
 800c496:	6063      	str	r3, [r4, #4]
 800c498:	bd38      	pop	{r3, r4, r5, pc}
 800c49a:	200c      	movs	r0, #12
 800c49c:	bd38      	pop	{r3, r4, r5, pc}
 800c49e:	200b      	movs	r0, #11
 800c4a0:	4770      	bx	lr
 800c4a2:	200b      	movs	r0, #11
 800c4a4:	bd38      	pop	{r3, r4, r5, pc}
 800c4a6:	bf00      	nop
 800c4a8:	0801562c 	.word	0x0801562c

0800c4ac <rmw_get_implementation_identifier>:
 800c4ac:	4b01      	ldr	r3, [pc, #4]	@ (800c4b4 <rmw_get_implementation_identifier+0x8>)
 800c4ae:	6818      	ldr	r0, [r3, #0]
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	0801562c 	.word	0x0801562c

0800c4b8 <rmw_init_options_init>:
 800c4b8:	b084      	sub	sp, #16
 800c4ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4bc:	b083      	sub	sp, #12
 800c4be:	ad09      	add	r5, sp, #36	@ 0x24
 800c4c0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800c4c4:	b130      	cbz	r0, 800c4d4 <rmw_init_options_init+0x1c>
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	f7fb fc0f 	bl	8007cec <rcutils_allocator_is_valid>
 800c4ce:	b108      	cbz	r0, 800c4d4 <rmw_init_options_init+0x1c>
 800c4d0:	68a6      	ldr	r6, [r4, #8]
 800c4d2:	b12e      	cbz	r6, 800c4e0 <rmw_init_options_init+0x28>
 800c4d4:	200b      	movs	r0, #11
 800c4d6:	b003      	add	sp, #12
 800c4d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c4dc:	b004      	add	sp, #16
 800c4de:	4770      	bx	lr
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	e9c4 2300 	strd	r2, r3, [r4]
 800c4e8:	4b20      	ldr	r3, [pc, #128]	@ (800c56c <rmw_init_options_init+0xb4>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	60a3      	str	r3, [r4, #8]
 800c4ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4f0:	f104 0c3c 	add.w	ip, r4, #60	@ 0x3c
 800c4f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c4f8:	466f      	mov	r7, sp
 800c4fa:	682b      	ldr	r3, [r5, #0]
 800c4fc:	f8cc 3000 	str.w	r3, [ip]
 800c500:	4638      	mov	r0, r7
 800c502:	63a6      	str	r6, [r4, #56]	@ 0x38
 800c504:	60e6      	str	r6, [r4, #12]
 800c506:	f005 fcb5 	bl	8011e74 <rmw_get_default_security_options>
 800c50a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c50e:	f104 0310 	add.w	r3, r4, #16
 800c512:	e883 0003 	stmia.w	r3, {r0, r1}
 800c516:	2203      	movs	r2, #3
 800c518:	4815      	ldr	r0, [pc, #84]	@ (800c570 <rmw_init_options_init+0xb8>)
 800c51a:	4916      	ldr	r1, [pc, #88]	@ (800c574 <rmw_init_options_init+0xbc>)
 800c51c:	f001 f96e 	bl	800d7fc <rmw_uxrce_init_init_options_impl_memory>
 800c520:	4813      	ldr	r0, [pc, #76]	@ (800c570 <rmw_init_options_init+0xb8>)
 800c522:	f005 fe19 	bl	8012158 <get_memory>
 800c526:	b1f0      	cbz	r0, 800c566 <rmw_init_options_init+0xae>
 800c528:	4a13      	ldr	r2, [pc, #76]	@ (800c578 <rmw_init_options_init+0xc0>)
 800c52a:	6883      	ldr	r3, [r0, #8]
 800c52c:	6851      	ldr	r1, [r2, #4]
 800c52e:	7810      	ldrb	r0, [r2, #0]
 800c530:	6523      	str	r3, [r4, #80]	@ 0x50
 800c532:	7418      	strb	r0, [r3, #16]
 800c534:	6159      	str	r1, [r3, #20]
 800c536:	68d1      	ldr	r1, [r2, #12]
 800c538:	61d9      	str	r1, [r3, #28]
 800c53a:	6911      	ldr	r1, [r2, #16]
 800c53c:	6219      	str	r1, [r3, #32]
 800c53e:	6951      	ldr	r1, [r2, #20]
 800c540:	6892      	ldr	r2, [r2, #8]
 800c542:	619a      	str	r2, [r3, #24]
 800c544:	6259      	str	r1, [r3, #36]	@ 0x24
 800c546:	f003 fde5 	bl	8010114 <uxr_nanos>
 800c54a:	f006 ff45 	bl	80133d8 <srand>
 800c54e:	f006 ff71 	bl	8013434 <rand>
 800c552:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800c554:	6298      	str	r0, [r3, #40]	@ 0x28
 800c556:	2800      	cmp	r0, #0
 800c558:	d0f9      	beq.n	800c54e <rmw_init_options_init+0x96>
 800c55a:	2000      	movs	r0, #0
 800c55c:	b003      	add	sp, #12
 800c55e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c562:	b004      	add	sp, #16
 800c564:	4770      	bx	lr
 800c566:	2001      	movs	r0, #1
 800c568:	e7b5      	b.n	800c4d6 <rmw_init_options_init+0x1e>
 800c56a:	bf00      	nop
 800c56c:	0801562c 	.word	0x0801562c
 800c570:	200093a0 	.word	0x200093a0
 800c574:	2000931c 	.word	0x2000931c
 800c578:	20009198 	.word	0x20009198

0800c57c <rmw_init_options_copy>:
 800c57c:	2800      	cmp	r0, #0
 800c57e:	d03e      	beq.n	800c5fe <rmw_init_options_copy+0x82>
 800c580:	b570      	push	{r4, r5, r6, lr}
 800c582:	460d      	mov	r5, r1
 800c584:	b149      	cbz	r1, 800c59a <rmw_init_options_copy+0x1e>
 800c586:	4604      	mov	r4, r0
 800c588:	6880      	ldr	r0, [r0, #8]
 800c58a:	b120      	cbz	r0, 800c596 <rmw_init_options_copy+0x1a>
 800c58c:	4b21      	ldr	r3, [pc, #132]	@ (800c614 <rmw_init_options_copy+0x98>)
 800c58e:	6819      	ldr	r1, [r3, #0]
 800c590:	f7f3 fe26 	bl	80001e0 <strcmp>
 800c594:	bb78      	cbnz	r0, 800c5f6 <rmw_init_options_copy+0x7a>
 800c596:	68ab      	ldr	r3, [r5, #8]
 800c598:	b11b      	cbz	r3, 800c5a2 <rmw_init_options_copy+0x26>
 800c59a:	f04f 0c0b 	mov.w	ip, #11
 800c59e:	4660      	mov	r0, ip
 800c5a0:	bd70      	pop	{r4, r5, r6, pc}
 800c5a2:	2258      	movs	r2, #88	@ 0x58
 800c5a4:	4621      	mov	r1, r4
 800c5a6:	4628      	mov	r0, r5
 800c5a8:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 800c5ac:	f007 fabd 	bl	8013b2a <memcpy>
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	f7fb fb9b 	bl	8007cec <rcutils_allocator_is_valid>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d0ef      	beq.n	800c59a <rmw_init_options_copy+0x1e>
 800c5ba:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800c5bc:	b138      	cbz	r0, 800c5ce <rmw_init_options_copy+0x52>
 800c5be:	f105 0238 	add.w	r2, r5, #56	@ 0x38
 800c5c2:	4631      	mov	r1, r6
 800c5c4:	f005 fc22 	bl	8011e0c <rmw_enclave_options_copy>
 800c5c8:	4684      	mov	ip, r0
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	d1e7      	bne.n	800c59e <rmw_init_options_copy+0x22>
 800c5ce:	4812      	ldr	r0, [pc, #72]	@ (800c618 <rmw_init_options_copy+0x9c>)
 800c5d0:	f005 fdc2 	bl	8012158 <get_memory>
 800c5d4:	b1b8      	cbz	r0, 800c606 <rmw_init_options_copy+0x8a>
 800c5d6:	6883      	ldr	r3, [r0, #8]
 800c5d8:	652b      	str	r3, [r5, #80]	@ 0x50
 800c5da:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 800c5dc:	3510      	adds	r5, #16
 800c5de:	f103 0410 	add.w	r4, r3, #16
 800c5e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c5e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c5ea:	f04f 0c00 	mov.w	ip, #0
 800c5ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c5f2:	4660      	mov	r0, ip
 800c5f4:	bd70      	pop	{r4, r5, r6, pc}
 800c5f6:	f04f 0c0c 	mov.w	ip, #12
 800c5fa:	4660      	mov	r0, ip
 800c5fc:	bd70      	pop	{r4, r5, r6, pc}
 800c5fe:	f04f 0c0b 	mov.w	ip, #11
 800c602:	4660      	mov	r0, ip
 800c604:	4770      	bx	lr
 800c606:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800c608:	4631      	mov	r1, r6
 800c60a:	f005 fc21 	bl	8011e50 <rmw_enclave_options_fini>
 800c60e:	f04f 0c01 	mov.w	ip, #1
 800c612:	e7c4      	b.n	800c59e <rmw_init_options_copy+0x22>
 800c614:	0801562c 	.word	0x0801562c
 800c618:	200093a0 	.word	0x200093a0

0800c61c <rmw_init_options_fini>:
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d035      	beq.n	800c68c <rmw_init_options_fini+0x70>
 800c620:	b530      	push	{r4, r5, lr}
 800c622:	f100 053c 	add.w	r5, r0, #60	@ 0x3c
 800c626:	b097      	sub	sp, #92	@ 0x5c
 800c628:	4604      	mov	r4, r0
 800c62a:	4628      	mov	r0, r5
 800c62c:	f7fb fb5e 	bl	8007cec <rcutils_allocator_is_valid>
 800c630:	b320      	cbz	r0, 800c67c <rmw_init_options_fini+0x60>
 800c632:	68a0      	ldr	r0, [r4, #8]
 800c634:	b120      	cbz	r0, 800c640 <rmw_init_options_fini+0x24>
 800c636:	4b16      	ldr	r3, [pc, #88]	@ (800c690 <rmw_init_options_fini+0x74>)
 800c638:	6819      	ldr	r1, [r3, #0]
 800c63a:	f7f3 fdd1 	bl	80001e0 <strcmp>
 800c63e:	bb18      	cbnz	r0, 800c688 <rmw_init_options_fini+0x6c>
 800c640:	4b14      	ldr	r3, [pc, #80]	@ (800c694 <rmw_init_options_fini+0x78>)
 800c642:	6819      	ldr	r1, [r3, #0]
 800c644:	b1e9      	cbz	r1, 800c682 <rmw_init_options_fini+0x66>
 800c646:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800c648:	e001      	b.n	800c64e <rmw_init_options_fini+0x32>
 800c64a:	6849      	ldr	r1, [r1, #4]
 800c64c:	b1c9      	cbz	r1, 800c682 <rmw_init_options_fini+0x66>
 800c64e:	688b      	ldr	r3, [r1, #8]
 800c650:	429a      	cmp	r2, r3
 800c652:	d1fa      	bne.n	800c64a <rmw_init_options_fini+0x2e>
 800c654:	480f      	ldr	r0, [pc, #60]	@ (800c694 <rmw_init_options_fini+0x78>)
 800c656:	f005 fd8f 	bl	8012178 <put_memory>
 800c65a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800c65c:	b118      	cbz	r0, 800c666 <rmw_init_options_fini+0x4a>
 800c65e:	4629      	mov	r1, r5
 800c660:	f005 fbf6 	bl	8011e50 <rmw_enclave_options_fini>
 800c664:	b940      	cbnz	r0, 800c678 <rmw_init_options_fini+0x5c>
 800c666:	4668      	mov	r0, sp
 800c668:	f7ff fd50 	bl	800c10c <rmw_get_zero_initialized_init_options>
 800c66c:	2258      	movs	r2, #88	@ 0x58
 800c66e:	4669      	mov	r1, sp
 800c670:	4620      	mov	r0, r4
 800c672:	f007 fa5a 	bl	8013b2a <memcpy>
 800c676:	2000      	movs	r0, #0
 800c678:	b017      	add	sp, #92	@ 0x5c
 800c67a:	bd30      	pop	{r4, r5, pc}
 800c67c:	200b      	movs	r0, #11
 800c67e:	b017      	add	sp, #92	@ 0x5c
 800c680:	bd30      	pop	{r4, r5, pc}
 800c682:	2001      	movs	r0, #1
 800c684:	b017      	add	sp, #92	@ 0x5c
 800c686:	bd30      	pop	{r4, r5, pc}
 800c688:	200c      	movs	r0, #12
 800c68a:	e7f5      	b.n	800c678 <rmw_init_options_fini+0x5c>
 800c68c:	200b      	movs	r0, #11
 800c68e:	4770      	bx	lr
 800c690:	0801562c 	.word	0x0801562c
 800c694:	200093a0 	.word	0x200093a0

0800c698 <rmw_init>:
 800c698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c69c:	b083      	sub	sp, #12
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	f000 80d4 	beq.w	800c84c <rmw_init+0x1b4>
 800c6a4:	460e      	mov	r6, r1
 800c6a6:	2900      	cmp	r1, #0
 800c6a8:	f000 80d0 	beq.w	800c84c <rmw_init+0x1b4>
 800c6ac:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	f000 80cb 	beq.w	800c84c <rmw_init+0x1b4>
 800c6b6:	4b77      	ldr	r3, [pc, #476]	@ (800c894 <rmw_init+0x1fc>)
 800c6b8:	6880      	ldr	r0, [r0, #8]
 800c6ba:	681f      	ldr	r7, [r3, #0]
 800c6bc:	b128      	cbz	r0, 800c6ca <rmw_init+0x32>
 800c6be:	4639      	mov	r1, r7
 800c6c0:	f7f3 fd8e 	bl	80001e0 <strcmp>
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	f040 80d3 	bne.w	800c870 <rmw_init+0x1d8>
 800c6ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c6ce:	4c72      	ldr	r4, [pc, #456]	@ (800c898 <rmw_init+0x200>)
 800c6d0:	4972      	ldr	r1, [pc, #456]	@ (800c89c <rmw_init+0x204>)
 800c6d2:	4873      	ldr	r0, [pc, #460]	@ (800c8a0 <rmw_init+0x208>)
 800c6d4:	60b7      	str	r7, [r6, #8]
 800c6d6:	e9c6 2300 	strd	r2, r3, [r6]
 800c6da:	68eb      	ldr	r3, [r5, #12]
 800c6dc:	66b3      	str	r3, [r6, #104]	@ 0x68
 800c6de:	2201      	movs	r2, #1
 800c6e0:	f001 f82c 	bl	800d73c <rmw_uxrce_init_session_memory>
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	496f      	ldr	r1, [pc, #444]	@ (800c8a4 <rmw_init+0x20c>)
 800c6e8:	2204      	movs	r2, #4
 800c6ea:	f001 f867 	bl	800d7bc <rmw_uxrce_init_static_input_buffer_memory>
 800c6ee:	f04f 0800 	mov.w	r8, #0
 800c6f2:	486b      	ldr	r0, [pc, #428]	@ (800c8a0 <rmw_init+0x208>)
 800c6f4:	f884 800d 	strb.w	r8, [r4, #13]
 800c6f8:	f005 fd2e 	bl	8012158 <get_memory>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	f000 80b2 	beq.w	800c866 <rmw_init+0x1ce>
 800c702:	6884      	ldr	r4, [r0, #8]
 800c704:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 800c706:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800c708:	f890 c010 	ldrb.w	ip, [r0, #16]
 800c70c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800c710:	9101      	str	r1, [sp, #4]
 800c712:	6a00      	ldr	r0, [r0, #32]
 800c714:	9000      	str	r0, [sp, #0]
 800c716:	f104 0910 	add.w	r9, r4, #16
 800c71a:	4661      	mov	r1, ip
 800c71c:	4648      	mov	r0, r9
 800c71e:	f001 fd11 	bl	800e144 <uxr_set_custom_transport_callbacks>
 800c722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c726:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 800c72a:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800c72e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800c732:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800c736:	495c      	ldr	r1, [pc, #368]	@ (800c8a8 <rmw_init+0x210>)
 800c738:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800c73c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800c740:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800c744:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800c748:	4858      	ldr	r0, [pc, #352]	@ (800c8ac <rmw_init+0x214>)
 800c74a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800c74e:	2201      	movs	r2, #1
 800c750:	66f4      	str	r4, [r6, #108]	@ 0x6c
 800c752:	f000 ffd3 	bl	800d6fc <rmw_uxrce_init_node_memory>
 800c756:	4956      	ldr	r1, [pc, #344]	@ (800c8b0 <rmw_init+0x218>)
 800c758:	4856      	ldr	r0, [pc, #344]	@ (800c8b4 <rmw_init+0x21c>)
 800c75a:	2205      	movs	r2, #5
 800c75c:	f000 ffae 	bl	800d6bc <rmw_uxrce_init_subscription_memory>
 800c760:	4955      	ldr	r1, [pc, #340]	@ (800c8b8 <rmw_init+0x220>)
 800c762:	4856      	ldr	r0, [pc, #344]	@ (800c8bc <rmw_init+0x224>)
 800c764:	220a      	movs	r2, #10
 800c766:	f000 ff89 	bl	800d67c <rmw_uxrce_init_publisher_memory>
 800c76a:	4955      	ldr	r1, [pc, #340]	@ (800c8c0 <rmw_init+0x228>)
 800c76c:	4855      	ldr	r0, [pc, #340]	@ (800c8c4 <rmw_init+0x22c>)
 800c76e:	2201      	movs	r2, #1
 800c770:	f000 ff44 	bl	800d5fc <rmw_uxrce_init_service_memory>
 800c774:	4954      	ldr	r1, [pc, #336]	@ (800c8c8 <rmw_init+0x230>)
 800c776:	4855      	ldr	r0, [pc, #340]	@ (800c8cc <rmw_init+0x234>)
 800c778:	2201      	movs	r2, #1
 800c77a:	f000 ff5f 	bl	800d63c <rmw_uxrce_init_client_memory>
 800c77e:	4954      	ldr	r1, [pc, #336]	@ (800c8d0 <rmw_init+0x238>)
 800c780:	4854      	ldr	r0, [pc, #336]	@ (800c8d4 <rmw_init+0x23c>)
 800c782:	220f      	movs	r2, #15
 800c784:	f000 fffa 	bl	800d77c <rmw_uxrce_init_topic_memory>
 800c788:	4953      	ldr	r1, [pc, #332]	@ (800c8d8 <rmw_init+0x240>)
 800c78a:	4854      	ldr	r0, [pc, #336]	@ (800c8dc <rmw_init+0x244>)
 800c78c:	2203      	movs	r2, #3
 800c78e:	f001 f835 	bl	800d7fc <rmw_uxrce_init_init_options_impl_memory>
 800c792:	4953      	ldr	r1, [pc, #332]	@ (800c8e0 <rmw_init+0x248>)
 800c794:	4853      	ldr	r0, [pc, #332]	@ (800c8e4 <rmw_init+0x24c>)
 800c796:	2204      	movs	r2, #4
 800c798:	f001 f850 	bl	800d83c <rmw_uxrce_init_wait_set_memory>
 800c79c:	4952      	ldr	r1, [pc, #328]	@ (800c8e8 <rmw_init+0x250>)
 800c79e:	4853      	ldr	r0, [pc, #332]	@ (800c8ec <rmw_init+0x254>)
 800c7a0:	2204      	movs	r2, #4
 800c7a2:	f001 f86b 	bl	800d87c <rmw_uxrce_init_guard_condition_memory>
 800c7a6:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800c7a8:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800c7aa:	4642      	mov	r2, r8
 800c7ac:	f000 fd6e 	bl	800d28c <rmw_uxrce_transport_init>
 800c7b0:	4607      	mov	r7, r0
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	d161      	bne.n	800c87a <rmw_init+0x1e2>
 800c7b6:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c7b8:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800c7bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c7be:	4628      	mov	r0, r5
 800c7c0:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800c7c4:	f001 fef8 	bl	800e5b8 <uxr_init_session>
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	4949      	ldr	r1, [pc, #292]	@ (800c8f0 <rmw_init+0x258>)
 800c7cc:	4622      	mov	r2, r4
 800c7ce:	f001 ff17 	bl	800e600 <uxr_set_topic_callback>
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	4947      	ldr	r1, [pc, #284]	@ (800c8f4 <rmw_init+0x25c>)
 800c7d6:	463a      	mov	r2, r7
 800c7d8:	f001 ff0e 	bl	800e5f8 <uxr_set_status_callback>
 800c7dc:	4628      	mov	r0, r5
 800c7de:	4946      	ldr	r1, [pc, #280]	@ (800c8f8 <rmw_init+0x260>)
 800c7e0:	463a      	mov	r2, r7
 800c7e2:	f001 ff11 	bl	800e608 <uxr_set_request_callback>
 800c7e6:	4628      	mov	r0, r5
 800c7e8:	4944      	ldr	r1, [pc, #272]	@ (800c8fc <rmw_init+0x264>)
 800c7ea:	463a      	mov	r2, r7
 800c7ec:	f001 ff10 	bl	800e610 <uxr_set_reply_callback>
 800c7f0:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800c7f4:	2304      	movs	r3, #4
 800c7f6:	0092      	lsls	r2, r2, #2
 800c7f8:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	f001 ff35 	bl	800e66c <uxr_create_input_reliable_stream>
 800c802:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800c806:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800c80a:	2304      	movs	r3, #4
 800c80c:	0092      	lsls	r2, r2, #2
 800c80e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800c812:	4628      	mov	r0, r5
 800c814:	f001 ff12 	bl	800e63c <uxr_create_output_reliable_stream>
 800c818:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800c81c:	4628      	mov	r0, r5
 800c81e:	f001 ff1f 	bl	800e660 <uxr_create_input_best_effort_stream>
 800c822:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800c826:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800c82a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800c82e:	3114      	adds	r1, #20
 800c830:	4628      	mov	r0, r5
 800c832:	f001 fef1 	bl	800e618 <uxr_create_output_best_effort_stream>
 800c836:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800c83a:	4628      	mov	r0, r5
 800c83c:	f002 fc3a 	bl	800f0b4 <uxr_create_session>
 800c840:	4605      	mov	r5, r0
 800c842:	b140      	cbz	r0, 800c856 <rmw_init+0x1be>
 800c844:	4638      	mov	r0, r7
 800c846:	b003      	add	sp, #12
 800c848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c84c:	270b      	movs	r7, #11
 800c84e:	4638      	mov	r0, r7
 800c850:	b003      	add	sp, #12
 800c852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c856:	4648      	mov	r0, r9
 800c858:	f001 fcb6 	bl	800e1c8 <uxr_close_custom_transport>
 800c85c:	4810      	ldr	r0, [pc, #64]	@ (800c8a0 <rmw_init+0x208>)
 800c85e:	4621      	mov	r1, r4
 800c860:	f005 fc8a 	bl	8012178 <put_memory>
 800c864:	66f5      	str	r5, [r6, #108]	@ 0x6c
 800c866:	2701      	movs	r7, #1
 800c868:	4638      	mov	r0, r7
 800c86a:	b003      	add	sp, #12
 800c86c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c870:	270c      	movs	r7, #12
 800c872:	4638      	mov	r0, r7
 800c874:	b003      	add	sp, #12
 800c876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c87a:	4648      	mov	r0, r9
 800c87c:	f001 fca4 	bl	800e1c8 <uxr_close_custom_transport>
 800c880:	4807      	ldr	r0, [pc, #28]	@ (800c8a0 <rmw_init+0x208>)
 800c882:	4621      	mov	r1, r4
 800c884:	f005 fc78 	bl	8012178 <put_memory>
 800c888:	4638      	mov	r0, r7
 800c88a:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 800c88e:	b003      	add	sp, #12
 800c890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c894:	0801562c 	.word	0x0801562c
 800c898:	2000b4b0 	.word	0x2000b4b0
 800c89c:	2000c5a8 	.word	0x2000c5a8
 800c8a0:	2000db50 	.word	0x2000db50
 800c8a4:	200093b0 	.word	0x200093b0
 800c8a8:	2000c4f0 	.word	0x2000c4f0
 800c8ac:	2000c594 	.word	0x2000c594
 800c8b0:	2000b828 	.word	0x2000b828
 800c8b4:	2000bc60 	.word	0x2000bc60
 800c8b8:	2000bc70 	.word	0x2000bc70
 800c8bc:	2000c4e0 	.word	0x2000c4e0
 800c8c0:	2000b750 	.word	0x2000b750
 800c8c4:	2000b818 	.word	0x2000b818
 800c8c8:	2000b678 	.word	0x2000b678
 800c8cc:	2000b740 	.word	0x2000b740
 800c8d0:	2000b4c0 	.word	0x2000b4c0
 800c8d4:	2000b664 	.word	0x2000b664
 800c8d8:	2000931c 	.word	0x2000931c
 800c8dc:	200093a0 	.word	0x200093a0
 800c8e0:	2000929c 	.word	0x2000929c
 800c8e4:	2000930c 	.word	0x2000930c
 800c8e8:	2000920c 	.word	0x2000920c
 800c8ec:	2000928c 	.word	0x2000928c
 800c8f0:	08011f91 	.word	0x08011f91
 800c8f4:	08011f89 	.word	0x08011f89
 800c8f8:	08012029 	.word	0x08012029
 800c8fc:	080120c5 	.word	0x080120c5

0800c900 <rmw_context_fini>:
 800c900:	4b17      	ldr	r3, [pc, #92]	@ (800c960 <rmw_context_fini+0x60>)
 800c902:	b570      	push	{r4, r5, r6, lr}
 800c904:	681c      	ldr	r4, [r3, #0]
 800c906:	4605      	mov	r5, r0
 800c908:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 800c90a:	b33c      	cbz	r4, 800c95c <rmw_context_fini+0x5c>
 800c90c:	2600      	movs	r6, #0
 800c90e:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 800c912:	691a      	ldr	r2, [r3, #16]
 800c914:	4282      	cmp	r2, r0
 800c916:	d018      	beq.n	800c94a <rmw_context_fini+0x4a>
 800c918:	2c00      	cmp	r4, #0
 800c91a:	d1f8      	bne.n	800c90e <rmw_context_fini+0xe>
 800c91c:	b188      	cbz	r0, 800c942 <rmw_context_fini+0x42>
 800c91e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c922:	789b      	ldrb	r3, [r3, #2]
 800c924:	2b01      	cmp	r3, #1
 800c926:	bf14      	ite	ne
 800c928:	210a      	movne	r1, #10
 800c92a:	2100      	moveq	r1, #0
 800c92c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c930:	f002 fb98 	bl	800f064 <uxr_delete_session_retries>
 800c934:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 800c936:	f000 ffc1 	bl	800d8bc <rmw_uxrce_fini_session_memory>
 800c93a:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 800c93c:	3010      	adds	r0, #16
 800c93e:	f001 fc43 	bl	800e1c8 <uxr_close_custom_transport>
 800c942:	2300      	movs	r3, #0
 800c944:	66eb      	str	r3, [r5, #108]	@ 0x6c
 800c946:	4630      	mov	r0, r6
 800c948:	bd70      	pop	{r4, r5, r6, pc}
 800c94a:	f103 0018 	add.w	r0, r3, #24
 800c94e:	f000 f89b 	bl	800ca88 <rmw_destroy_node>
 800c952:	4606      	mov	r6, r0
 800c954:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 800c956:	2c00      	cmp	r4, #0
 800c958:	d1d9      	bne.n	800c90e <rmw_context_fini+0xe>
 800c95a:	e7df      	b.n	800c91c <rmw_context_fini+0x1c>
 800c95c:	4626      	mov	r6, r4
 800c95e:	e7dd      	b.n	800c91c <rmw_context_fini+0x1c>
 800c960:	2000c594 	.word	0x2000c594

0800c964 <create_node>:
 800c964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c968:	b083      	sub	sp, #12
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d063      	beq.n	800ca36 <create_node+0xd2>
 800c96e:	4606      	mov	r6, r0
 800c970:	4836      	ldr	r0, [pc, #216]	@ (800ca4c <create_node+0xe8>)
 800c972:	460f      	mov	r7, r1
 800c974:	4690      	mov	r8, r2
 800c976:	461d      	mov	r5, r3
 800c978:	f005 fbee 	bl	8012158 <get_memory>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	d05a      	beq.n	800ca36 <create_node+0xd2>
 800c980:	6884      	ldr	r4, [r0, #8]
 800c982:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800c984:	6123      	str	r3, [r4, #16]
 800c986:	f7ff fd91 	bl	800c4ac <rmw_get_implementation_identifier>
 800c98a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800c98e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800c992:	f8c4 9020 	str.w	r9, [r4, #32]
 800c996:	4630      	mov	r0, r6
 800c998:	f7f3 fc82 	bl	80002a0 <strlen>
 800c99c:	1c42      	adds	r2, r0, #1
 800c99e:	2a3c      	cmp	r2, #60	@ 0x3c
 800c9a0:	f104 0518 	add.w	r5, r4, #24
 800c9a4:	d844      	bhi.n	800ca30 <create_node+0xcc>
 800c9a6:	4648      	mov	r0, r9
 800c9a8:	4631      	mov	r1, r6
 800c9aa:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800c9ae:	f007 f8bc 	bl	8013b2a <memcpy>
 800c9b2:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800c9b6:	4638      	mov	r0, r7
 800c9b8:	f7f3 fc72 	bl	80002a0 <strlen>
 800c9bc:	1c42      	adds	r2, r0, #1
 800c9be:	2a3c      	cmp	r2, #60	@ 0x3c
 800c9c0:	d836      	bhi.n	800ca30 <create_node+0xcc>
 800c9c2:	4639      	mov	r1, r7
 800c9c4:	4648      	mov	r0, r9
 800c9c6:	f007 f8b0 	bl	8013b2a <memcpy>
 800c9ca:	6923      	ldr	r3, [r4, #16]
 800c9cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9d0:	2101      	movs	r1, #1
 800c9d2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800c9d6:	1842      	adds	r2, r0, r1
 800c9d8:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800c9dc:	f001 fbf8 	bl	800e1d0 <uxr_object_id>
 800c9e0:	6160      	str	r0, [r4, #20]
 800c9e2:	783b      	ldrb	r3, [r7, #0]
 800c9e4:	2b2f      	cmp	r3, #47	@ 0x2f
 800c9e6:	d128      	bne.n	800ca3a <create_node+0xd6>
 800c9e8:	787b      	ldrb	r3, [r7, #1]
 800c9ea:	bb33      	cbnz	r3, 800ca3a <create_node+0xd6>
 800c9ec:	4a18      	ldr	r2, [pc, #96]	@ (800ca50 <create_node+0xec>)
 800c9ee:	4819      	ldr	r0, [pc, #100]	@ (800ca54 <create_node+0xf0>)
 800c9f0:	4633      	mov	r3, r6
 800c9f2:	213c      	movs	r1, #60	@ 0x3c
 800c9f4:	f006 fede 	bl	80137b4 <sniprintf>
 800c9f8:	6920      	ldr	r0, [r4, #16]
 800c9fa:	4916      	ldr	r1, [pc, #88]	@ (800ca54 <create_node+0xf0>)
 800c9fc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800ca00:	9100      	str	r1, [sp, #0]
 800ca02:	2106      	movs	r1, #6
 800ca04:	9101      	str	r1, [sp, #4]
 800ca06:	6811      	ldr	r1, [r2, #0]
 800ca08:	6962      	ldr	r2, [r4, #20]
 800ca0a:	fa1f f388 	uxth.w	r3, r8
 800ca0e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ca12:	f001 fa1f 	bl	800de54 <uxr_buffer_create_participant_bin>
 800ca16:	4602      	mov	r2, r0
 800ca18:	6920      	ldr	r0, [r4, #16]
 800ca1a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ca1e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ca22:	f001 f8cb 	bl	800dbbc <run_xrce_session>
 800ca26:	b118      	cbz	r0, 800ca30 <create_node+0xcc>
 800ca28:	4628      	mov	r0, r5
 800ca2a:	b003      	add	sp, #12
 800ca2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca30:	4628      	mov	r0, r5
 800ca32:	f000 ff49 	bl	800d8c8 <rmw_uxrce_fini_node_memory>
 800ca36:	2500      	movs	r5, #0
 800ca38:	e7f6      	b.n	800ca28 <create_node+0xc4>
 800ca3a:	4a07      	ldr	r2, [pc, #28]	@ (800ca58 <create_node+0xf4>)
 800ca3c:	9600      	str	r6, [sp, #0]
 800ca3e:	463b      	mov	r3, r7
 800ca40:	213c      	movs	r1, #60	@ 0x3c
 800ca42:	4804      	ldr	r0, [pc, #16]	@ (800ca54 <create_node+0xf0>)
 800ca44:	f006 feb6 	bl	80137b4 <sniprintf>
 800ca48:	e7d6      	b.n	800c9f8 <create_node+0x94>
 800ca4a:	bf00      	nop
 800ca4c:	2000c594 	.word	0x2000c594
 800ca50:	08014f44 	.word	0x08014f44
 800ca54:	200091d0 	.word	0x200091d0
 800ca58:	08014c10 	.word	0x08014c10

0800ca5c <rmw_create_node>:
 800ca5c:	b191      	cbz	r1, 800ca84 <rmw_create_node+0x28>
 800ca5e:	b410      	push	{r4}
 800ca60:	4614      	mov	r4, r2
 800ca62:	780a      	ldrb	r2, [r1, #0]
 800ca64:	4603      	mov	r3, r0
 800ca66:	4608      	mov	r0, r1
 800ca68:	b142      	cbz	r2, 800ca7c <rmw_create_node+0x20>
 800ca6a:	b13c      	cbz	r4, 800ca7c <rmw_create_node+0x20>
 800ca6c:	7822      	ldrb	r2, [r4, #0]
 800ca6e:	b12a      	cbz	r2, 800ca7c <rmw_create_node+0x20>
 800ca70:	4621      	mov	r1, r4
 800ca72:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ca74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca78:	f7ff bf74 	b.w	800c964 <create_node>
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca82:	4770      	bx	lr
 800ca84:	2000      	movs	r0, #0
 800ca86:	4770      	bx	lr

0800ca88 <rmw_destroy_node>:
 800ca88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8a:	b328      	cbz	r0, 800cad8 <rmw_destroy_node+0x50>
 800ca8c:	4607      	mov	r7, r0
 800ca8e:	6800      	ldr	r0, [r0, #0]
 800ca90:	b120      	cbz	r0, 800ca9c <rmw_destroy_node+0x14>
 800ca92:	4b36      	ldr	r3, [pc, #216]	@ (800cb6c <rmw_destroy_node+0xe4>)
 800ca94:	6819      	ldr	r1, [r3, #0]
 800ca96:	f7f3 fba3 	bl	80001e0 <strcmp>
 800ca9a:	b9e8      	cbnz	r0, 800cad8 <rmw_destroy_node+0x50>
 800ca9c:	687d      	ldr	r5, [r7, #4]
 800ca9e:	b1dd      	cbz	r5, 800cad8 <rmw_destroy_node+0x50>
 800caa0:	4b33      	ldr	r3, [pc, #204]	@ (800cb70 <rmw_destroy_node+0xe8>)
 800caa2:	681c      	ldr	r4, [r3, #0]
 800caa4:	2c00      	cmp	r4, #0
 800caa6:	d05f      	beq.n	800cb68 <rmw_destroy_node+0xe0>
 800caa8:	2600      	movs	r6, #0
 800caaa:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800caae:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800cab2:	429d      	cmp	r5, r3
 800cab4:	d013      	beq.n	800cade <rmw_destroy_node+0x56>
 800cab6:	2c00      	cmp	r4, #0
 800cab8:	d1f7      	bne.n	800caaa <rmw_destroy_node+0x22>
 800caba:	4b2e      	ldr	r3, [pc, #184]	@ (800cb74 <rmw_destroy_node+0xec>)
 800cabc:	681c      	ldr	r4, [r3, #0]
 800cabe:	b1c4      	cbz	r4, 800caf2 <rmw_destroy_node+0x6a>
 800cac0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800cac4:	6a0b      	ldr	r3, [r1, #32]
 800cac6:	429d      	cmp	r5, r3
 800cac8:	d1f9      	bne.n	800cabe <rmw_destroy_node+0x36>
 800caca:	317c      	adds	r1, #124	@ 0x7c
 800cacc:	4638      	mov	r0, r7
 800cace:	f000 fb2b 	bl	800d128 <rmw_destroy_subscription>
 800cad2:	2801      	cmp	r0, #1
 800cad4:	4606      	mov	r6, r0
 800cad6:	d1f2      	bne.n	800cabe <rmw_destroy_node+0x36>
 800cad8:	2601      	movs	r6, #1
 800cada:	4630      	mov	r0, r6
 800cadc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cade:	3184      	adds	r1, #132	@ 0x84
 800cae0:	4638      	mov	r0, r7
 800cae2:	f000 f853 	bl	800cb8c <rmw_destroy_publisher>
 800cae6:	2801      	cmp	r0, #1
 800cae8:	4606      	mov	r6, r0
 800caea:	d0f5      	beq.n	800cad8 <rmw_destroy_node+0x50>
 800caec:	2c00      	cmp	r4, #0
 800caee:	d1dc      	bne.n	800caaa <rmw_destroy_node+0x22>
 800caf0:	e7e3      	b.n	800caba <rmw_destroy_node+0x32>
 800caf2:	4b21      	ldr	r3, [pc, #132]	@ (800cb78 <rmw_destroy_node+0xf0>)
 800caf4:	681c      	ldr	r4, [r3, #0]
 800caf6:	b16c      	cbz	r4, 800cb14 <rmw_destroy_node+0x8c>
 800caf8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800cafc:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800cafe:	429d      	cmp	r5, r3
 800cb00:	d1f9      	bne.n	800caf6 <rmw_destroy_node+0x6e>
 800cb02:	317c      	adds	r1, #124	@ 0x7c
 800cb04:	4638      	mov	r0, r7
 800cb06:	f000 f9dd 	bl	800cec4 <rmw_destroy_service>
 800cb0a:	2801      	cmp	r0, #1
 800cb0c:	4606      	mov	r6, r0
 800cb0e:	d0e3      	beq.n	800cad8 <rmw_destroy_node+0x50>
 800cb10:	2c00      	cmp	r4, #0
 800cb12:	d1f1      	bne.n	800caf8 <rmw_destroy_node+0x70>
 800cb14:	4b19      	ldr	r3, [pc, #100]	@ (800cb7c <rmw_destroy_node+0xf4>)
 800cb16:	681c      	ldr	r4, [r3, #0]
 800cb18:	b16c      	cbz	r4, 800cb36 <rmw_destroy_node+0xae>
 800cb1a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800cb1e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800cb20:	429d      	cmp	r5, r3
 800cb22:	d1f9      	bne.n	800cb18 <rmw_destroy_node+0x90>
 800cb24:	317c      	adds	r1, #124	@ 0x7c
 800cb26:	4638      	mov	r0, r7
 800cb28:	f7ff fc5e 	bl	800c3e8 <rmw_destroy_client>
 800cb2c:	2801      	cmp	r0, #1
 800cb2e:	4606      	mov	r6, r0
 800cb30:	d0d2      	beq.n	800cad8 <rmw_destroy_node+0x50>
 800cb32:	2c00      	cmp	r4, #0
 800cb34:	d1f1      	bne.n	800cb1a <rmw_destroy_node+0x92>
 800cb36:	6928      	ldr	r0, [r5, #16]
 800cb38:	696a      	ldr	r2, [r5, #20]
 800cb3a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cb3e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cb42:	6819      	ldr	r1, [r3, #0]
 800cb44:	f001 f93c 	bl	800ddc0 <uxr_buffer_delete_entity>
 800cb48:	4602      	mov	r2, r0
 800cb4a:	6928      	ldr	r0, [r5, #16]
 800cb4c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800cb50:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800cb54:	f001 f832 	bl	800dbbc <run_xrce_session>
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	bf08      	it	eq
 800cb5c:	2602      	moveq	r6, #2
 800cb5e:	4638      	mov	r0, r7
 800cb60:	f000 feb2 	bl	800d8c8 <rmw_uxrce_fini_node_memory>
 800cb64:	4630      	mov	r0, r6
 800cb66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb68:	4626      	mov	r6, r4
 800cb6a:	e7a6      	b.n	800caba <rmw_destroy_node+0x32>
 800cb6c:	0801562c 	.word	0x0801562c
 800cb70:	2000c4e0 	.word	0x2000c4e0
 800cb74:	2000bc60 	.word	0x2000bc60
 800cb78:	2000b818 	.word	0x2000b818
 800cb7c:	2000b740 	.word	0x2000b740

0800cb80 <rmw_node_get_graph_guard_condition>:
 800cb80:	6843      	ldr	r3, [r0, #4]
 800cb82:	6918      	ldr	r0, [r3, #16]
 800cb84:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop

0800cb8c <rmw_destroy_publisher>:
 800cb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb90:	b128      	cbz	r0, 800cb9e <rmw_destroy_publisher+0x12>
 800cb92:	4604      	mov	r4, r0
 800cb94:	6800      	ldr	r0, [r0, #0]
 800cb96:	460d      	mov	r5, r1
 800cb98:	f001 f896 	bl	800dcc8 <is_uxrce_rmw_identifier_valid>
 800cb9c:	b918      	cbnz	r0, 800cba6 <rmw_destroy_publisher+0x1a>
 800cb9e:	2401      	movs	r4, #1
 800cba0:	4620      	mov	r0, r4
 800cba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cba6:	6863      	ldr	r3, [r4, #4]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d0f8      	beq.n	800cb9e <rmw_destroy_publisher+0x12>
 800cbac:	2d00      	cmp	r5, #0
 800cbae:	d0f6      	beq.n	800cb9e <rmw_destroy_publisher+0x12>
 800cbb0:	6828      	ldr	r0, [r5, #0]
 800cbb2:	f001 f889 	bl	800dcc8 <is_uxrce_rmw_identifier_valid>
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d0f1      	beq.n	800cb9e <rmw_destroy_publisher+0x12>
 800cbba:	686c      	ldr	r4, [r5, #4]
 800cbbc:	2c00      	cmp	r4, #0
 800cbbe:	d0ee      	beq.n	800cb9e <rmw_destroy_publisher+0x12>
 800cbc0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800cbc2:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800cbc6:	f005 fb67 	bl	8012298 <destroy_topic>
 800cbca:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cbce:	6962      	ldr	r2, [r4, #20]
 800cbd0:	6918      	ldr	r0, [r3, #16]
 800cbd2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cbd6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cbda:	6819      	ldr	r1, [r3, #0]
 800cbdc:	f001 f8f0 	bl	800ddc0 <uxr_buffer_delete_entity>
 800cbe0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cbe4:	6922      	ldr	r2, [r4, #16]
 800cbe6:	4680      	mov	r8, r0
 800cbe8:	6918      	ldr	r0, [r3, #16]
 800cbea:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cbee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cbf2:	6819      	ldr	r1, [r3, #0]
 800cbf4:	f001 f8e4 	bl	800ddc0 <uxr_buffer_delete_entity>
 800cbf8:	4606      	mov	r6, r0
 800cbfa:	6938      	ldr	r0, [r7, #16]
 800cbfc:	4642      	mov	r2, r8
 800cbfe:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800cc02:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800cc06:	f000 ffd9 	bl	800dbbc <run_xrce_session>
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	6938      	ldr	r0, [r7, #16]
 800cc0e:	4632      	mov	r2, r6
 800cc10:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800cc14:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800cc18:	f000 ffd0 	bl	800dbbc <run_xrce_session>
 800cc1c:	4004      	ands	r4, r0
 800cc1e:	f084 0401 	eor.w	r4, r4, #1
 800cc22:	b2e4      	uxtb	r4, r4
 800cc24:	4628      	mov	r0, r5
 800cc26:	0064      	lsls	r4, r4, #1
 800cc28:	f000 fe66 	bl	800d8f8 <rmw_uxrce_fini_publisher_memory>
 800cc2c:	e7b8      	b.n	800cba0 <rmw_destroy_publisher+0x14>
 800cc2e:	bf00      	nop

0800cc30 <rmw_send_request>:
 800cc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc34:	4604      	mov	r4, r0
 800cc36:	6800      	ldr	r0, [r0, #0]
 800cc38:	b08a      	sub	sp, #40	@ 0x28
 800cc3a:	460e      	mov	r6, r1
 800cc3c:	4615      	mov	r5, r2
 800cc3e:	b128      	cbz	r0, 800cc4c <rmw_send_request+0x1c>
 800cc40:	4b1e      	ldr	r3, [pc, #120]	@ (800ccbc <rmw_send_request+0x8c>)
 800cc42:	6819      	ldr	r1, [r3, #0]
 800cc44:	f7f3 facc 	bl	80001e0 <strcmp>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	d133      	bne.n	800ccb4 <rmw_send_request+0x84>
 800cc4c:	6864      	ldr	r4, [r4, #4]
 800cc4e:	6963      	ldr	r3, [r4, #20]
 800cc50:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	4798      	blx	r3
 800cc56:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800cc5a:	4630      	mov	r0, r6
 800cc5c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cc60:	4798      	blx	r3
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	9000      	str	r0, [sp, #0]
 800cc66:	6922      	ldr	r2, [r4, #16]
 800cc68:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800cc6a:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800cc6e:	ab02      	add	r3, sp, #8
 800cc70:	f003 faf2 	bl	8010258 <uxr_prepare_output_stream>
 800cc74:	2300      	movs	r3, #0
 800cc76:	6028      	str	r0, [r5, #0]
 800cc78:	606b      	str	r3, [r5, #4]
 800cc7a:	b190      	cbz	r0, 800cca2 <rmw_send_request+0x72>
 800cc7c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc80:	a902      	add	r1, sp, #8
 800cc82:	4630      	mov	r0, r6
 800cc84:	4798      	blx	r3
 800cc86:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 800cc8a:	6938      	ldr	r0, [r7, #16]
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d00c      	beq.n	800ccaa <rmw_send_request+0x7a>
 800cc90:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800cc92:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cc96:	f002 f897 	bl	800edc8 <uxr_run_session_until_confirm_delivery>
 800cc9a:	2000      	movs	r0, #0
 800cc9c:	b00a      	add	sp, #40	@ 0x28
 800cc9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cca2:	2001      	movs	r0, #1
 800cca4:	b00a      	add	sp, #40	@ 0x28
 800cca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccaa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ccae:	f001 fcf3 	bl	800e698 <uxr_flash_output_streams>
 800ccb2:	e7f2      	b.n	800cc9a <rmw_send_request+0x6a>
 800ccb4:	200c      	movs	r0, #12
 800ccb6:	b00a      	add	sp, #40	@ 0x28
 800ccb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccbc:	0801562c 	.word	0x0801562c

0800ccc0 <rmw_take_request>:
 800ccc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	6800      	ldr	r0, [r0, #0]
 800ccc8:	b089      	sub	sp, #36	@ 0x24
 800ccca:	460c      	mov	r4, r1
 800cccc:	4690      	mov	r8, r2
 800ccce:	461e      	mov	r6, r3
 800ccd0:	b128      	cbz	r0, 800ccde <rmw_take_request+0x1e>
 800ccd2:	4b28      	ldr	r3, [pc, #160]	@ (800cd74 <rmw_take_request+0xb4>)
 800ccd4:	6819      	ldr	r1, [r3, #0]
 800ccd6:	f7f3 fa83 	bl	80001e0 <strcmp>
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	d146      	bne.n	800cd6c <rmw_take_request+0xac>
 800ccde:	b10e      	cbz	r6, 800cce4 <rmw_take_request+0x24>
 800cce0:	2300      	movs	r3, #0
 800cce2:	7033      	strb	r3, [r6, #0]
 800cce4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800cce8:	f000 feea 	bl	800dac0 <rmw_uxrce_clean_expired_static_input_buffer>
 800ccec:	4648      	mov	r0, r9
 800ccee:	f000 febf 	bl	800da70 <rmw_uxrce_find_static_input_buffer_by_owner>
 800ccf2:	4607      	mov	r7, r0
 800ccf4:	b3b0      	cbz	r0, 800cd64 <rmw_take_request+0xa4>
 800ccf6:	6885      	ldr	r5, [r0, #8]
 800ccf8:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 800ccfc:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 800cd00:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800cd04:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 800cd08:	7423      	strb	r3, [r4, #16]
 800cd0a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 800cd0e:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 800cd12:	74e2      	strb	r2, [r4, #19]
 800cd14:	f8a4 3011 	strh.w	r3, [r4, #17]
 800cd18:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 800cd1c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 800cd20:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 800cd24:	61e1      	str	r1, [r4, #28]
 800cd26:	6162      	str	r2, [r4, #20]
 800cd28:	61a3      	str	r3, [r4, #24]
 800cd2a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800cd2e:	689b      	ldr	r3, [r3, #8]
 800cd30:	4798      	blx	r3
 800cd32:	6844      	ldr	r4, [r0, #4]
 800cd34:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 800cd38:	f105 0110 	add.w	r1, r5, #16
 800cd3c:	4668      	mov	r0, sp
 800cd3e:	f7fc f8b3 	bl	8008ea8 <ucdr_init_buffer>
 800cd42:	68e3      	ldr	r3, [r4, #12]
 800cd44:	4641      	mov	r1, r8
 800cd46:	4668      	mov	r0, sp
 800cd48:	4798      	blx	r3
 800cd4a:	4639      	mov	r1, r7
 800cd4c:	4604      	mov	r4, r0
 800cd4e:	480a      	ldr	r0, [pc, #40]	@ (800cd78 <rmw_take_request+0xb8>)
 800cd50:	f005 fa12 	bl	8012178 <put_memory>
 800cd54:	b106      	cbz	r6, 800cd58 <rmw_take_request+0x98>
 800cd56:	7034      	strb	r4, [r6, #0]
 800cd58:	f084 0001 	eor.w	r0, r4, #1
 800cd5c:	b2c0      	uxtb	r0, r0
 800cd5e:	b009      	add	sp, #36	@ 0x24
 800cd60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd64:	2001      	movs	r0, #1
 800cd66:	b009      	add	sp, #36	@ 0x24
 800cd68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd6c:	200c      	movs	r0, #12
 800cd6e:	b009      	add	sp, #36	@ 0x24
 800cd70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd74:	0801562c 	.word	0x0801562c
 800cd78:	2000b4b0 	.word	0x2000b4b0

0800cd7c <rmw_send_response>:
 800cd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd7e:	4605      	mov	r5, r0
 800cd80:	6800      	ldr	r0, [r0, #0]
 800cd82:	b091      	sub	sp, #68	@ 0x44
 800cd84:	460c      	mov	r4, r1
 800cd86:	4616      	mov	r6, r2
 800cd88:	b128      	cbz	r0, 800cd96 <rmw_send_response+0x1a>
 800cd8a:	4b28      	ldr	r3, [pc, #160]	@ (800ce2c <rmw_send_response+0xb0>)
 800cd8c:	6819      	ldr	r1, [r3, #0]
 800cd8e:	f7f3 fa27 	bl	80001e0 <strcmp>
 800cd92:	2800      	cmp	r0, #0
 800cd94:	d141      	bne.n	800ce1a <rmw_send_response+0x9e>
 800cd96:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800cd9a:	9306      	str	r3, [sp, #24]
 800cd9c:	4623      	mov	r3, r4
 800cd9e:	9207      	str	r2, [sp, #28]
 800cda0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cda4:	686d      	ldr	r5, [r5, #4]
 800cda6:	789b      	ldrb	r3, [r3, #2]
 800cda8:	68a1      	ldr	r1, [r4, #8]
 800cdaa:	f88d 2017 	strb.w	r2, [sp, #23]
 800cdae:	f88d 3016 	strb.w	r3, [sp, #22]
 800cdb2:	68e2      	ldr	r2, [r4, #12]
 800cdb4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 800cdb8:	6860      	ldr	r0, [r4, #4]
 800cdba:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cdbe:	ab02      	add	r3, sp, #8
 800cdc0:	c307      	stmia	r3!, {r0, r1, r2}
 800cdc2:	696b      	ldr	r3, [r5, #20]
 800cdc4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 800cdc6:	68db      	ldr	r3, [r3, #12]
 800cdc8:	4798      	blx	r3
 800cdca:	6844      	ldr	r4, [r0, #4]
 800cdcc:	4630      	mov	r0, r6
 800cdce:	6923      	ldr	r3, [r4, #16]
 800cdd0:	4798      	blx	r3
 800cdd2:	f100 0318 	add.w	r3, r0, #24
 800cdd6:	6938      	ldr	r0, [r7, #16]
 800cdd8:	9300      	str	r3, [sp, #0]
 800cdda:	692a      	ldr	r2, [r5, #16]
 800cddc:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 800cdde:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cde2:	ab08      	add	r3, sp, #32
 800cde4:	f003 fa38 	bl	8010258 <uxr_prepare_output_stream>
 800cde8:	b910      	cbnz	r0, 800cdf0 <rmw_send_response+0x74>
 800cdea:	2001      	movs	r0, #1
 800cdec:	b011      	add	sp, #68	@ 0x44
 800cdee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdf0:	a902      	add	r1, sp, #8
 800cdf2:	a808      	add	r0, sp, #32
 800cdf4:	f004 fa62 	bl	80112bc <uxr_serialize_SampleIdentity>
 800cdf8:	68a3      	ldr	r3, [r4, #8]
 800cdfa:	a908      	add	r1, sp, #32
 800cdfc:	4630      	mov	r0, r6
 800cdfe:	4798      	blx	r3
 800ce00:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 800ce04:	6938      	ldr	r0, [r7, #16]
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d00a      	beq.n	800ce20 <rmw_send_response+0xa4>
 800ce0a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800ce0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ce10:	f001 ffda 	bl	800edc8 <uxr_run_session_until_confirm_delivery>
 800ce14:	2000      	movs	r0, #0
 800ce16:	b011      	add	sp, #68	@ 0x44
 800ce18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce1a:	200c      	movs	r0, #12
 800ce1c:	b011      	add	sp, #68	@ 0x44
 800ce1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ce24:	f001 fc38 	bl	800e698 <uxr_flash_output_streams>
 800ce28:	e7f4      	b.n	800ce14 <rmw_send_response+0x98>
 800ce2a:	bf00      	nop
 800ce2c:	0801562c 	.word	0x0801562c

0800ce30 <rmw_take_response>:
 800ce30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce34:	4604      	mov	r4, r0
 800ce36:	6800      	ldr	r0, [r0, #0]
 800ce38:	b088      	sub	sp, #32
 800ce3a:	4688      	mov	r8, r1
 800ce3c:	4617      	mov	r7, r2
 800ce3e:	461d      	mov	r5, r3
 800ce40:	b120      	cbz	r0, 800ce4c <rmw_take_response+0x1c>
 800ce42:	4b1e      	ldr	r3, [pc, #120]	@ (800cebc <rmw_take_response+0x8c>)
 800ce44:	6819      	ldr	r1, [r3, #0]
 800ce46:	f7f3 f9cb 	bl	80001e0 <strcmp>
 800ce4a:	bb78      	cbnz	r0, 800ceac <rmw_take_response+0x7c>
 800ce4c:	b10d      	cbz	r5, 800ce52 <rmw_take_response+0x22>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	702b      	strb	r3, [r5, #0]
 800ce52:	6864      	ldr	r4, [r4, #4]
 800ce54:	f000 fe34 	bl	800dac0 <rmw_uxrce_clean_expired_static_input_buffer>
 800ce58:	4620      	mov	r0, r4
 800ce5a:	f000 fe09 	bl	800da70 <rmw_uxrce_find_static_input_buffer_by_owner>
 800ce5e:	4606      	mov	r6, r0
 800ce60:	b340      	cbz	r0, 800ceb4 <rmw_take_response+0x84>
 800ce62:	6963      	ldr	r3, [r4, #20]
 800ce64:	6884      	ldr	r4, [r0, #8]
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 800ce6c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 800ce70:	e9c8 0108 	strd	r0, r1, [r8, #32]
 800ce74:	4798      	blx	r3
 800ce76:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800ce7a:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 800ce7e:	f104 0110 	add.w	r1, r4, #16
 800ce82:	4668      	mov	r0, sp
 800ce84:	f7fc f810 	bl	8008ea8 <ucdr_init_buffer>
 800ce88:	4639      	mov	r1, r7
 800ce8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce8e:	4668      	mov	r0, sp
 800ce90:	4798      	blx	r3
 800ce92:	4631      	mov	r1, r6
 800ce94:	4604      	mov	r4, r0
 800ce96:	480a      	ldr	r0, [pc, #40]	@ (800cec0 <rmw_take_response+0x90>)
 800ce98:	f005 f96e 	bl	8012178 <put_memory>
 800ce9c:	b105      	cbz	r5, 800cea0 <rmw_take_response+0x70>
 800ce9e:	702c      	strb	r4, [r5, #0]
 800cea0:	f084 0001 	eor.w	r0, r4, #1
 800cea4:	b2c0      	uxtb	r0, r0
 800cea6:	b008      	add	sp, #32
 800cea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceac:	200c      	movs	r0, #12
 800ceae:	b008      	add	sp, #32
 800ceb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceb4:	2001      	movs	r0, #1
 800ceb6:	b008      	add	sp, #32
 800ceb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cebc:	0801562c 	.word	0x0801562c
 800cec0:	2000b4b0 	.word	0x2000b4b0

0800cec4 <rmw_destroy_service>:
 800cec4:	b570      	push	{r4, r5, r6, lr}
 800cec6:	b128      	cbz	r0, 800ced4 <rmw_destroy_service+0x10>
 800cec8:	4604      	mov	r4, r0
 800ceca:	6800      	ldr	r0, [r0, #0]
 800cecc:	460d      	mov	r5, r1
 800cece:	f000 fefb 	bl	800dcc8 <is_uxrce_rmw_identifier_valid>
 800ced2:	b910      	cbnz	r0, 800ceda <rmw_destroy_service+0x16>
 800ced4:	2401      	movs	r4, #1
 800ced6:	4620      	mov	r0, r4
 800ced8:	bd70      	pop	{r4, r5, r6, pc}
 800ceda:	6863      	ldr	r3, [r4, #4]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d0f9      	beq.n	800ced4 <rmw_destroy_service+0x10>
 800cee0:	2d00      	cmp	r5, #0
 800cee2:	d0f7      	beq.n	800ced4 <rmw_destroy_service+0x10>
 800cee4:	6828      	ldr	r0, [r5, #0]
 800cee6:	f000 feef 	bl	800dcc8 <is_uxrce_rmw_identifier_valid>
 800ceea:	2800      	cmp	r0, #0
 800ceec:	d0f2      	beq.n	800ced4 <rmw_destroy_service+0x10>
 800ceee:	686e      	ldr	r6, [r5, #4]
 800cef0:	2e00      	cmp	r6, #0
 800cef2:	d0ef      	beq.n	800ced4 <rmw_destroy_service+0x10>
 800cef4:	6864      	ldr	r4, [r4, #4]
 800cef6:	6932      	ldr	r2, [r6, #16]
 800cef8:	6920      	ldr	r0, [r4, #16]
 800cefa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cefe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cf02:	6819      	ldr	r1, [r3, #0]
 800cf04:	f001 f9ca 	bl	800e29c <uxr_buffer_cancel_data>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	6920      	ldr	r0, [r4, #16]
 800cf0c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800cf10:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800cf14:	f000 fe52 	bl	800dbbc <run_xrce_session>
 800cf18:	6920      	ldr	r0, [r4, #16]
 800cf1a:	6932      	ldr	r2, [r6, #16]
 800cf1c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cf20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cf24:	6819      	ldr	r1, [r3, #0]
 800cf26:	f000 ff4b 	bl	800ddc0 <uxr_buffer_delete_entity>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	6920      	ldr	r0, [r4, #16]
 800cf2e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800cf32:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800cf36:	f000 fe41 	bl	800dbbc <run_xrce_session>
 800cf3a:	f080 0401 	eor.w	r4, r0, #1
 800cf3e:	b2e4      	uxtb	r4, r4
 800cf40:	4628      	mov	r0, r5
 800cf42:	0064      	lsls	r4, r4, #1
 800cf44:	f000 fd04 	bl	800d950 <rmw_uxrce_fini_service_memory>
 800cf48:	e7c5      	b.n	800ced6 <rmw_destroy_service+0x12>
 800cf4a:	bf00      	nop

0800cf4c <rmw_create_subscription>:
 800cf4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf50:	b08d      	sub	sp, #52	@ 0x34
 800cf52:	2800      	cmp	r0, #0
 800cf54:	f000 80d1 	beq.w	800d0fa <rmw_create_subscription+0x1ae>
 800cf58:	460f      	mov	r7, r1
 800cf5a:	2900      	cmp	r1, #0
 800cf5c:	f000 80cd 	beq.w	800d0fa <rmw_create_subscription+0x1ae>
 800cf60:	4604      	mov	r4, r0
 800cf62:	6800      	ldr	r0, [r0, #0]
 800cf64:	4615      	mov	r5, r2
 800cf66:	461e      	mov	r6, r3
 800cf68:	f000 feae 	bl	800dcc8 <is_uxrce_rmw_identifier_valid>
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	f000 80c4 	beq.w	800d0fa <rmw_create_subscription+0x1ae>
 800cf72:	2d00      	cmp	r5, #0
 800cf74:	f000 80c1 	beq.w	800d0fa <rmw_create_subscription+0x1ae>
 800cf78:	782b      	ldrb	r3, [r5, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	f000 80bd 	beq.w	800d0fa <rmw_create_subscription+0x1ae>
 800cf80:	2e00      	cmp	r6, #0
 800cf82:	f000 80ba 	beq.w	800d0fa <rmw_create_subscription+0x1ae>
 800cf86:	485e      	ldr	r0, [pc, #376]	@ (800d100 <rmw_create_subscription+0x1b4>)
 800cf88:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800cf8c:	f005 f8e4 	bl	8012158 <get_memory>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	f000 80b2 	beq.w	800d0fa <rmw_create_subscription+0x1ae>
 800cf96:	6884      	ldr	r4, [r0, #8]
 800cf98:	f8c4 4080 	str.w	r4, [r4, #128]	@ 0x80
 800cf9c:	f7ff fa86 	bl	800c4ac <rmw_get_implementation_identifier>
 800cfa0:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 800cfa4:	67e0      	str	r0, [r4, #124]	@ 0x7c
 800cfa6:	f8c4 a084 	str.w	sl, [r4, #132]	@ 0x84
 800cfaa:	4628      	mov	r0, r5
 800cfac:	f7f3 f978 	bl	80002a0 <strlen>
 800cfb0:	3001      	adds	r0, #1
 800cfb2:	283c      	cmp	r0, #60	@ 0x3c
 800cfb4:	f104 087c 	add.w	r8, r4, #124	@ 0x7c
 800cfb8:	f200 8098 	bhi.w	800d0ec <rmw_create_subscription+0x1a0>
 800cfbc:	4a51      	ldr	r2, [pc, #324]	@ (800d104 <rmw_create_subscription+0x1b8>)
 800cfbe:	462b      	mov	r3, r5
 800cfc0:	213c      	movs	r1, #60	@ 0x3c
 800cfc2:	4650      	mov	r0, sl
 800cfc4:	f006 fbf6 	bl	80137b4 <sniprintf>
 800cfc8:	4631      	mov	r1, r6
 800cfca:	f8c4 9020 	str.w	r9, [r4, #32]
 800cfce:	2250      	movs	r2, #80	@ 0x50
 800cfd0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800cfd4:	f006 fda9 	bl	8013b2a <memcpy>
 800cfd8:	494b      	ldr	r1, [pc, #300]	@ (800d108 <rmw_create_subscription+0x1bc>)
 800cfda:	4638      	mov	r0, r7
 800cfdc:	f000 fe82 	bl	800dce4 <get_message_typesupport_handle>
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	f000 8083 	beq.w	800d0ec <rmw_create_subscription+0x1a0>
 800cfe6:	6842      	ldr	r2, [r0, #4]
 800cfe8:	61a2      	str	r2, [r4, #24]
 800cfea:	2a00      	cmp	r2, #0
 800cfec:	d07e      	beq.n	800d0ec <rmw_create_subscription+0x1a0>
 800cfee:	4629      	mov	r1, r5
 800cff0:	4633      	mov	r3, r6
 800cff2:	4648      	mov	r0, r9
 800cff4:	f005 f8fc 	bl	80121f0 <create_topic>
 800cff8:	61e0      	str	r0, [r4, #28]
 800cffa:	2800      	cmp	r0, #0
 800cffc:	d07a      	beq.n	800d0f4 <rmw_create_subscription+0x1a8>
 800cffe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d006:	2104      	movs	r1, #4
 800d008:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800d00c:	1c42      	adds	r2, r0, #1
 800d00e:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800d012:	f001 f8dd 	bl	800e1d0 <uxr_object_id>
 800d016:	6120      	str	r0, [r4, #16]
 800d018:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d01c:	2506      	movs	r5, #6
 800d01e:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800d022:	9500      	str	r5, [sp, #0]
 800d024:	6819      	ldr	r1, [r3, #0]
 800d026:	6922      	ldr	r2, [r4, #16]
 800d028:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d02c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d030:	f000 ff76 	bl	800df20 <uxr_buffer_create_subscriber_bin>
 800d034:	4602      	mov	r2, r0
 800d036:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d03a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d03e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d042:	f000 fdbb 	bl	800dbbc <run_xrce_session>
 800d046:	2800      	cmp	r0, #0
 800d048:	d050      	beq.n	800d0ec <rmw_create_subscription+0x1a0>
 800d04a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d04e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d052:	4629      	mov	r1, r5
 800d054:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800d058:	1c42      	adds	r2, r0, #1
 800d05a:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800d05e:	f001 f8b7 	bl	800e1d0 <uxr_object_id>
 800d062:	af08      	add	r7, sp, #32
 800d064:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d068:	69e3      	ldr	r3, [r4, #28]
 800d06a:	6160      	str	r0, [r4, #20]
 800d06c:	4631      	mov	r1, r6
 800d06e:	4638      	mov	r0, r7
 800d070:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800d074:	9305      	str	r3, [sp, #20]
 800d076:	f000 fdc1 	bl	800dbfc <convert_qos_profile>
 800d07a:	9503      	str	r5, [sp, #12]
 800d07c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d080:	9b05      	ldr	r3, [sp, #20]
 800d082:	9001      	str	r0, [sp, #4]
 800d084:	f8ad 1008 	strh.w	r1, [sp, #8]
 800d088:	691b      	ldr	r3, [r3, #16]
 800d08a:	9300      	str	r3, [sp, #0]
 800d08c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800d090:	f8db 1000 	ldr.w	r1, [fp]
 800d094:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800d098:	f000 ff72 	bl	800df80 <uxr_buffer_create_datareader_bin>
 800d09c:	4602      	mov	r2, r0
 800d09e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d0a2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d0a6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d0aa:	f000 fd87 	bl	800dbbc <run_xrce_session>
 800d0ae:	b1e8      	cbz	r0, 800d0ec <rmw_create_subscription+0x1a0>
 800d0b0:	7a33      	ldrb	r3, [r6, #8]
 800d0b2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d0b6:	2b02      	cmp	r3, #2
 800d0b8:	bf0c      	ite	eq
 800d0ba:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800d0be:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800d0c2:	9307      	str	r3, [sp, #28]
 800d0c4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800d0ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800d0d0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d0d4:	9300      	str	r3, [sp, #0]
 800d0d6:	6962      	ldr	r2, [r4, #20]
 800d0d8:	9b07      	ldr	r3, [sp, #28]
 800d0da:	6809      	ldr	r1, [r1, #0]
 800d0dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d0e0:	f001 f8a4 	bl	800e22c <uxr_buffer_request_data>
 800d0e4:	4640      	mov	r0, r8
 800d0e6:	b00d      	add	sp, #52	@ 0x34
 800d0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ec:	69e0      	ldr	r0, [r4, #28]
 800d0ee:	b108      	cbz	r0, 800d0f4 <rmw_create_subscription+0x1a8>
 800d0f0:	f000 fc5a 	bl	800d9a8 <rmw_uxrce_fini_topic_memory>
 800d0f4:	4640      	mov	r0, r8
 800d0f6:	f000 fc15 	bl	800d924 <rmw_uxrce_fini_subscription_memory>
 800d0fa:	f04f 0800 	mov.w	r8, #0
 800d0fe:	e7f1      	b.n	800d0e4 <rmw_create_subscription+0x198>
 800d100:	2000bc60 	.word	0x2000bc60
 800d104:	08014f44 	.word	0x08014f44
 800d108:	08014bb0 	.word	0x08014bb0

0800d10c <rmw_subscription_get_actual_qos>:
 800d10c:	b508      	push	{r3, lr}
 800d10e:	4603      	mov	r3, r0
 800d110:	b140      	cbz	r0, 800d124 <rmw_subscription_get_actual_qos+0x18>
 800d112:	4608      	mov	r0, r1
 800d114:	b131      	cbz	r1, 800d124 <rmw_subscription_get_actual_qos+0x18>
 800d116:	6859      	ldr	r1, [r3, #4]
 800d118:	2250      	movs	r2, #80	@ 0x50
 800d11a:	3128      	adds	r1, #40	@ 0x28
 800d11c:	f006 fd05 	bl	8013b2a <memcpy>
 800d120:	2000      	movs	r0, #0
 800d122:	bd08      	pop	{r3, pc}
 800d124:	200b      	movs	r0, #11
 800d126:	bd08      	pop	{r3, pc}

0800d128 <rmw_destroy_subscription>:
 800d128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d12c:	b128      	cbz	r0, 800d13a <rmw_destroy_subscription+0x12>
 800d12e:	4604      	mov	r4, r0
 800d130:	6800      	ldr	r0, [r0, #0]
 800d132:	460d      	mov	r5, r1
 800d134:	f000 fdc8 	bl	800dcc8 <is_uxrce_rmw_identifier_valid>
 800d138:	b918      	cbnz	r0, 800d142 <rmw_destroy_subscription+0x1a>
 800d13a:	2401      	movs	r4, #1
 800d13c:	4620      	mov	r0, r4
 800d13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d142:	6863      	ldr	r3, [r4, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d0f8      	beq.n	800d13a <rmw_destroy_subscription+0x12>
 800d148:	2d00      	cmp	r5, #0
 800d14a:	d0f6      	beq.n	800d13a <rmw_destroy_subscription+0x12>
 800d14c:	6828      	ldr	r0, [r5, #0]
 800d14e:	f000 fdbb 	bl	800dcc8 <is_uxrce_rmw_identifier_valid>
 800d152:	2800      	cmp	r0, #0
 800d154:	d0f1      	beq.n	800d13a <rmw_destroy_subscription+0x12>
 800d156:	686c      	ldr	r4, [r5, #4]
 800d158:	2c00      	cmp	r4, #0
 800d15a:	d0ee      	beq.n	800d13a <rmw_destroy_subscription+0x12>
 800d15c:	6a26      	ldr	r6, [r4, #32]
 800d15e:	6962      	ldr	r2, [r4, #20]
 800d160:	6930      	ldr	r0, [r6, #16]
 800d162:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d166:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d16a:	6819      	ldr	r1, [r3, #0]
 800d16c:	f001 f896 	bl	800e29c <uxr_buffer_cancel_data>
 800d170:	4602      	mov	r2, r0
 800d172:	6930      	ldr	r0, [r6, #16]
 800d174:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d178:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d17c:	f000 fd1e 	bl	800dbbc <run_xrce_session>
 800d180:	69e0      	ldr	r0, [r4, #28]
 800d182:	f005 f889 	bl	8012298 <destroy_topic>
 800d186:	6a23      	ldr	r3, [r4, #32]
 800d188:	6962      	ldr	r2, [r4, #20]
 800d18a:	6918      	ldr	r0, [r3, #16]
 800d18c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d190:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d194:	6819      	ldr	r1, [r3, #0]
 800d196:	f000 fe13 	bl	800ddc0 <uxr_buffer_delete_entity>
 800d19a:	6a23      	ldr	r3, [r4, #32]
 800d19c:	6922      	ldr	r2, [r4, #16]
 800d19e:	4680      	mov	r8, r0
 800d1a0:	6918      	ldr	r0, [r3, #16]
 800d1a2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d1a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d1aa:	6819      	ldr	r1, [r3, #0]
 800d1ac:	f000 fe08 	bl	800ddc0 <uxr_buffer_delete_entity>
 800d1b0:	4607      	mov	r7, r0
 800d1b2:	6930      	ldr	r0, [r6, #16]
 800d1b4:	4642      	mov	r2, r8
 800d1b6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d1ba:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d1be:	f000 fcfd 	bl	800dbbc <run_xrce_session>
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	6930      	ldr	r0, [r6, #16]
 800d1c6:	463a      	mov	r2, r7
 800d1c8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d1cc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d1d0:	f000 fcf4 	bl	800dbbc <run_xrce_session>
 800d1d4:	4004      	ands	r4, r0
 800d1d6:	f084 0401 	eor.w	r4, r4, #1
 800d1da:	b2e4      	uxtb	r4, r4
 800d1dc:	4628      	mov	r0, r5
 800d1de:	0064      	lsls	r4, r4, #1
 800d1e0:	f000 fba0 	bl	800d924 <rmw_uxrce_fini_subscription_memory>
 800d1e4:	e7aa      	b.n	800d13c <rmw_destroy_subscription+0x14>
 800d1e6:	bf00      	nop

0800d1e8 <rmw_take_with_info>:
 800d1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	6800      	ldr	r0, [r0, #0]
 800d1ee:	b089      	sub	sp, #36	@ 0x24
 800d1f0:	460f      	mov	r7, r1
 800d1f2:	4615      	mov	r5, r2
 800d1f4:	b128      	cbz	r0, 800d202 <rmw_take_with_info+0x1a>
 800d1f6:	4b23      	ldr	r3, [pc, #140]	@ (800d284 <rmw_take_with_info+0x9c>)
 800d1f8:	6819      	ldr	r1, [r3, #0]
 800d1fa:	f7f2 fff1 	bl	80001e0 <strcmp>
 800d1fe:	2800      	cmp	r0, #0
 800d200:	d13d      	bne.n	800d27e <rmw_take_with_info+0x96>
 800d202:	6864      	ldr	r4, [r4, #4]
 800d204:	b1fd      	cbz	r5, 800d246 <rmw_take_with_info+0x5e>
 800d206:	2300      	movs	r3, #0
 800d208:	702b      	strb	r3, [r5, #0]
 800d20a:	f000 fc59 	bl	800dac0 <rmw_uxrce_clean_expired_static_input_buffer>
 800d20e:	4620      	mov	r0, r4
 800d210:	f000 fc2e 	bl	800da70 <rmw_uxrce_find_static_input_buffer_by_owner>
 800d214:	4606      	mov	r6, r0
 800d216:	b1e8      	cbz	r0, 800d254 <rmw_take_with_info+0x6c>
 800d218:	6881      	ldr	r1, [r0, #8]
 800d21a:	4668      	mov	r0, sp
 800d21c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800d220:	3110      	adds	r1, #16
 800d222:	f7fb fe41 	bl	8008ea8 <ucdr_init_buffer>
 800d226:	69a3      	ldr	r3, [r4, #24]
 800d228:	4639      	mov	r1, r7
 800d22a:	68db      	ldr	r3, [r3, #12]
 800d22c:	4668      	mov	r0, sp
 800d22e:	4798      	blx	r3
 800d230:	4631      	mov	r1, r6
 800d232:	4604      	mov	r4, r0
 800d234:	4814      	ldr	r0, [pc, #80]	@ (800d288 <rmw_take_with_info+0xa0>)
 800d236:	f004 ff9f 	bl	8012178 <put_memory>
 800d23a:	702c      	strb	r4, [r5, #0]
 800d23c:	f084 0001 	eor.w	r0, r4, #1
 800d240:	b2c0      	uxtb	r0, r0
 800d242:	b009      	add	sp, #36	@ 0x24
 800d244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d246:	f000 fc3b 	bl	800dac0 <rmw_uxrce_clean_expired_static_input_buffer>
 800d24a:	4620      	mov	r0, r4
 800d24c:	f000 fc10 	bl	800da70 <rmw_uxrce_find_static_input_buffer_by_owner>
 800d250:	4605      	mov	r5, r0
 800d252:	b910      	cbnz	r0, 800d25a <rmw_take_with_info+0x72>
 800d254:	2001      	movs	r0, #1
 800d256:	b009      	add	sp, #36	@ 0x24
 800d258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d25a:	68a9      	ldr	r1, [r5, #8]
 800d25c:	4668      	mov	r0, sp
 800d25e:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800d262:	3110      	adds	r1, #16
 800d264:	f7fb fe20 	bl	8008ea8 <ucdr_init_buffer>
 800d268:	69a3      	ldr	r3, [r4, #24]
 800d26a:	4639      	mov	r1, r7
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	4668      	mov	r0, sp
 800d270:	4798      	blx	r3
 800d272:	4629      	mov	r1, r5
 800d274:	4604      	mov	r4, r0
 800d276:	4804      	ldr	r0, [pc, #16]	@ (800d288 <rmw_take_with_info+0xa0>)
 800d278:	f004 ff7e 	bl	8012178 <put_memory>
 800d27c:	e7de      	b.n	800d23c <rmw_take_with_info+0x54>
 800d27e:	200c      	movs	r0, #12
 800d280:	b009      	add	sp, #36	@ 0x24
 800d282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d284:	0801562c 	.word	0x0801562c
 800d288:	2000b4b0 	.word	0x2000b4b0

0800d28c <rmw_uxrce_transport_init>:
 800d28c:	b508      	push	{r3, lr}
 800d28e:	b108      	cbz	r0, 800d294 <rmw_uxrce_transport_init+0x8>
 800d290:	f100 0210 	add.w	r2, r0, #16
 800d294:	b139      	cbz	r1, 800d2a6 <rmw_uxrce_transport_init+0x1a>
 800d296:	6949      	ldr	r1, [r1, #20]
 800d298:	4610      	mov	r0, r2
 800d29a:	f000 ff61 	bl	800e160 <uxr_init_custom_transport>
 800d29e:	f080 0001 	eor.w	r0, r0, #1
 800d2a2:	b2c0      	uxtb	r0, r0
 800d2a4:	bd08      	pop	{r3, pc}
 800d2a6:	4b04      	ldr	r3, [pc, #16]	@ (800d2b8 <rmw_uxrce_transport_init+0x2c>)
 800d2a8:	4610      	mov	r0, r2
 800d2aa:	6859      	ldr	r1, [r3, #4]
 800d2ac:	f000 ff58 	bl	800e160 <uxr_init_custom_transport>
 800d2b0:	f080 0001 	eor.w	r0, r0, #1
 800d2b4:	b2c0      	uxtb	r0, r0
 800d2b6:	bd08      	pop	{r3, pc}
 800d2b8:	20009198 	.word	0x20009198

0800d2bc <rmw_wait>:
 800d2bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2c0:	b089      	sub	sp, #36	@ 0x24
 800d2c2:	4607      	mov	r7, r0
 800d2c4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800d2c6:	460e      	mov	r6, r1
 800d2c8:	4698      	mov	r8, r3
 800d2ca:	4691      	mov	r9, r2
 800d2cc:	2a00      	cmp	r2, #0
 800d2ce:	f000 811e 	beq.w	800d50e <rmw_wait+0x252>
 800d2d2:	2c00      	cmp	r4, #0
 800d2d4:	f000 80ef 	beq.w	800d4b6 <rmw_wait+0x1fa>
 800d2d8:	4bb5      	ldr	r3, [pc, #724]	@ (800d5b0 <rmw_wait+0x2f4>)
 800d2da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d2dc:	ad04      	add	r5, sp, #16
 800d2de:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800d2e2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d2e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d2ea:	f004 fdc7 	bl	8011e7c <rmw_time_equal>
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	f000 811b 	beq.w	800d52a <rmw_wait+0x26e>
 800d2f4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d2f8:	f000 fbe2 	bl	800dac0 <rmw_uxrce_clean_expired_static_input_buffer>
 800d2fc:	4bad      	ldr	r3, [pc, #692]	@ (800d5b4 <rmw_wait+0x2f8>)
 800d2fe:	681c      	ldr	r4, [r3, #0]
 800d300:	b14c      	cbz	r4, 800d316 <rmw_wait+0x5a>
 800d302:	4623      	mov	r3, r4
 800d304:	2100      	movs	r1, #0
 800d306:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 800d30a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d30e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 800d312:	2b00      	cmp	r3, #0
 800d314:	d1f7      	bne.n	800d306 <rmw_wait+0x4a>
 800d316:	f1b9 0f00 	cmp.w	r9, #0
 800d31a:	d011      	beq.n	800d340 <rmw_wait+0x84>
 800d31c:	f8d9 1000 	ldr.w	r1, [r9]
 800d320:	b171      	cbz	r1, 800d340 <rmw_wait+0x84>
 800d322:	f8d9 c004 	ldr.w	ip, [r9, #4]
 800d326:	2300      	movs	r3, #0
 800d328:	2001      	movs	r0, #1
 800d32a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800d32e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 800d330:	6912      	ldr	r2, [r2, #16]
 800d332:	3301      	adds	r3, #1
 800d334:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d338:	4299      	cmp	r1, r3
 800d33a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 800d33e:	d1f4      	bne.n	800d32a <rmw_wait+0x6e>
 800d340:	f1b8 0f00 	cmp.w	r8, #0
 800d344:	f000 8109 	beq.w	800d55a <rmw_wait+0x29e>
 800d348:	f8d8 1000 	ldr.w	r1, [r8]
 800d34c:	2900      	cmp	r1, #0
 800d34e:	f000 8116 	beq.w	800d57e <rmw_wait+0x2c2>
 800d352:	f8d8 c004 	ldr.w	ip, [r8, #4]
 800d356:	2300      	movs	r3, #0
 800d358:	2001      	movs	r0, #1
 800d35a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800d35e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 800d360:	6912      	ldr	r2, [r2, #16]
 800d362:	3301      	adds	r3, #1
 800d364:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d368:	4299      	cmp	r1, r3
 800d36a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 800d36e:	d1f4      	bne.n	800d35a <rmw_wait+0x9e>
 800d370:	2f00      	cmp	r7, #0
 800d372:	f000 8114 	beq.w	800d59e <rmw_wait+0x2e2>
 800d376:	6839      	ldr	r1, [r7, #0]
 800d378:	b171      	cbz	r1, 800d398 <rmw_wait+0xdc>
 800d37a:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800d37e:	2300      	movs	r3, #0
 800d380:	2001      	movs	r0, #1
 800d382:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800d386:	6a12      	ldr	r2, [r2, #32]
 800d388:	6912      	ldr	r2, [r2, #16]
 800d38a:	3301      	adds	r3, #1
 800d38c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d390:	4299      	cmp	r1, r3
 800d392:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 800d396:	d1f4      	bne.n	800d382 <rmw_wait+0xc6>
 800d398:	b344      	cbz	r4, 800d3ec <rmw_wait+0x130>
 800d39a:	4622      	mov	r2, r4
 800d39c:	2300      	movs	r3, #0
 800d39e:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 800d3a2:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800d3a6:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 800d3aa:	440b      	add	r3, r1
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	2a00      	cmp	r2, #0
 800d3b0:	d1f5      	bne.n	800d39e <rmw_wait+0xe2>
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d075      	beq.n	800d4a2 <rmw_wait+0x1e6>
 800d3b6:	1c6a      	adds	r2, r5, #1
 800d3b8:	d00d      	beq.n	800d3d6 <rmw_wait+0x11a>
 800d3ba:	ee07 5a90 	vmov	s15, r5
 800d3be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d3c2:	ee07 3a90 	vmov	s15, r3
 800d3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3ce:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800d3d2:	ee17 5a90 	vmov	r5, s15
 800d3d6:	68a0      	ldr	r0, [r4, #8]
 800d3d8:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 800d3dc:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	f040 808a 	bne.w	800d4fa <rmw_wait+0x23e>
 800d3e6:	6864      	ldr	r4, [r4, #4]
 800d3e8:	2c00      	cmp	r4, #0
 800d3ea:	d1f4      	bne.n	800d3d6 <rmw_wait+0x11a>
 800d3ec:	f1b9 0f00 	cmp.w	r9, #0
 800d3f0:	f000 80c3 	beq.w	800d57a <rmw_wait+0x2be>
 800d3f4:	f8d9 5000 	ldr.w	r5, [r9]
 800d3f8:	b185      	cbz	r5, 800d41c <rmw_wait+0x160>
 800d3fa:	2400      	movs	r4, #0
 800d3fc:	4625      	mov	r5, r4
 800d3fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d402:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d406:	f000 fb33 	bl	800da70 <rmw_uxrce_find_static_input_buffer_by_owner>
 800d40a:	2800      	cmp	r0, #0
 800d40c:	d06d      	beq.n	800d4ea <rmw_wait+0x22e>
 800d40e:	f8d9 3000 	ldr.w	r3, [r9]
 800d412:	3401      	adds	r4, #1
 800d414:	42a3      	cmp	r3, r4
 800d416:	f04f 0501 	mov.w	r5, #1
 800d41a:	d8f0      	bhi.n	800d3fe <rmw_wait+0x142>
 800d41c:	f1b8 0f00 	cmp.w	r8, #0
 800d420:	d012      	beq.n	800d448 <rmw_wait+0x18c>
 800d422:	f8d8 1000 	ldr.w	r1, [r8]
 800d426:	2400      	movs	r4, #0
 800d428:	b171      	cbz	r1, 800d448 <rmw_wait+0x18c>
 800d42a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d42e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d432:	f000 fb1d 	bl	800da70 <rmw_uxrce_find_static_input_buffer_by_owner>
 800d436:	2800      	cmp	r0, #0
 800d438:	d047      	beq.n	800d4ca <rmw_wait+0x20e>
 800d43a:	f8d8 3000 	ldr.w	r3, [r8]
 800d43e:	3401      	adds	r4, #1
 800d440:	42a3      	cmp	r3, r4
 800d442:	f04f 0501 	mov.w	r5, #1
 800d446:	d8f0      	bhi.n	800d42a <rmw_wait+0x16e>
 800d448:	b17f      	cbz	r7, 800d46a <rmw_wait+0x1ae>
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	2400      	movs	r4, #0
 800d44e:	b163      	cbz	r3, 800d46a <rmw_wait+0x1ae>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d456:	f000 fb0b 	bl	800da70 <rmw_uxrce_find_static_input_buffer_by_owner>
 800d45a:	2800      	cmp	r0, #0
 800d45c:	d03d      	beq.n	800d4da <rmw_wait+0x21e>
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	3401      	adds	r4, #1
 800d462:	42a3      	cmp	r3, r4
 800d464:	f04f 0501 	mov.w	r5, #1
 800d468:	d8f2      	bhi.n	800d450 <rmw_wait+0x194>
 800d46a:	b1a6      	cbz	r6, 800d496 <rmw_wait+0x1da>
 800d46c:	6834      	ldr	r4, [r6, #0]
 800d46e:	b194      	cbz	r4, 800d496 <rmw_wait+0x1da>
 800d470:	2300      	movs	r3, #0
 800d472:	461f      	mov	r7, r3
 800d474:	e004      	b.n	800d480 <rmw_wait+0x1c4>
 800d476:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800d47a:	3301      	adds	r3, #1
 800d47c:	429c      	cmp	r4, r3
 800d47e:	d00a      	beq.n	800d496 <rmw_wait+0x1da>
 800d480:	6870      	ldr	r0, [r6, #4]
 800d482:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800d486:	7c0a      	ldrb	r2, [r1, #16]
 800d488:	2a00      	cmp	r2, #0
 800d48a:	d0f4      	beq.n	800d476 <rmw_wait+0x1ba>
 800d48c:	3301      	adds	r3, #1
 800d48e:	429c      	cmp	r4, r3
 800d490:	740f      	strb	r7, [r1, #16]
 800d492:	4615      	mov	r5, r2
 800d494:	d1f4      	bne.n	800d480 <rmw_wait+0x1c4>
 800d496:	f085 0001 	eor.w	r0, r5, #1
 800d49a:	0040      	lsls	r0, r0, #1
 800d49c:	b009      	add	sp, #36	@ 0x24
 800d49e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4a2:	68a0      	ldr	r0, [r4, #8]
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d4aa:	f001 fc53 	bl	800ed54 <uxr_run_session_timeout>
 800d4ae:	6864      	ldr	r4, [r4, #4]
 800d4b0:	2c00      	cmp	r4, #0
 800d4b2:	d1f6      	bne.n	800d4a2 <rmw_wait+0x1e6>
 800d4b4:	e79a      	b.n	800d3ec <rmw_wait+0x130>
 800d4b6:	f000 fb03 	bl	800dac0 <rmw_uxrce_clean_expired_static_input_buffer>
 800d4ba:	4b3e      	ldr	r3, [pc, #248]	@ (800d5b4 <rmw_wait+0x2f8>)
 800d4bc:	681c      	ldr	r4, [r3, #0]
 800d4be:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d4c2:	2c00      	cmp	r4, #0
 800d4c4:	f47f af1d 	bne.w	800d302 <rmw_wait+0x46>
 800d4c8:	e728      	b.n	800d31c <rmw_wait+0x60>
 800d4ca:	e9d8 3200 	ldrd	r3, r2, [r8]
 800d4ce:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800d4d2:	3401      	adds	r4, #1
 800d4d4:	429c      	cmp	r4, r3
 800d4d6:	d3a8      	bcc.n	800d42a <rmw_wait+0x16e>
 800d4d8:	e7b6      	b.n	800d448 <rmw_wait+0x18c>
 800d4da:	e9d7 3200 	ldrd	r3, r2, [r7]
 800d4de:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800d4e2:	3401      	adds	r4, #1
 800d4e4:	42a3      	cmp	r3, r4
 800d4e6:	d8b3      	bhi.n	800d450 <rmw_wait+0x194>
 800d4e8:	e7bf      	b.n	800d46a <rmw_wait+0x1ae>
 800d4ea:	e9d9 3200 	ldrd	r3, r2, [r9]
 800d4ee:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800d4f2:	3401      	adds	r4, #1
 800d4f4:	42a3      	cmp	r3, r4
 800d4f6:	d882      	bhi.n	800d3fe <rmw_wait+0x142>
 800d4f8:	e790      	b.n	800d41c <rmw_wait+0x160>
 800d4fa:	4629      	mov	r1, r5
 800d4fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d500:	f001 fc42 	bl	800ed88 <uxr_run_session_until_data>
 800d504:	6864      	ldr	r4, [r4, #4]
 800d506:	2c00      	cmp	r4, #0
 800d508:	f47f af65 	bne.w	800d3d6 <rmw_wait+0x11a>
 800d50c:	e76e      	b.n	800d3ec <rmw_wait+0x130>
 800d50e:	b1f3      	cbz	r3, 800d54e <rmw_wait+0x292>
 800d510:	2c00      	cmp	r4, #0
 800d512:	f47f aee1 	bne.w	800d2d8 <rmw_wait+0x1c>
 800d516:	f000 fad3 	bl	800dac0 <rmw_uxrce_clean_expired_static_input_buffer>
 800d51a:	4b26      	ldr	r3, [pc, #152]	@ (800d5b4 <rmw_wait+0x2f8>)
 800d51c:	681c      	ldr	r4, [r3, #0]
 800d51e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d522:	2c00      	cmp	r4, #0
 800d524:	f47f aeed 	bne.w	800d302 <rmw_wait+0x46>
 800d528:	e70a      	b.n	800d340 <rmw_wait+0x84>
 800d52a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d52e:	f004 fcf9 	bl	8011f24 <rmw_time_total_nsec>
 800d532:	4a21      	ldr	r2, [pc, #132]	@ (800d5b8 <rmw_wait+0x2fc>)
 800d534:	2300      	movs	r3, #0
 800d536:	f7f2 ff0b 	bl	8000350 <__aeabi_uldivmod>
 800d53a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 800d53e:	f171 0100 	sbcs.w	r1, r1, #0
 800d542:	4605      	mov	r5, r0
 800d544:	f6ff aed8 	blt.w	800d2f8 <rmw_wait+0x3c>
 800d548:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800d54c:	e6d4      	b.n	800d2f8 <rmw_wait+0x3c>
 800d54e:	2800      	cmp	r0, #0
 800d550:	d1de      	bne.n	800d510 <rmw_wait+0x254>
 800d552:	2900      	cmp	r1, #0
 800d554:	d1dc      	bne.n	800d510 <rmw_wait+0x254>
 800d556:	4608      	mov	r0, r1
 800d558:	e7a0      	b.n	800d49c <rmw_wait+0x1e0>
 800d55a:	2f00      	cmp	r7, #0
 800d55c:	f47f af0b 	bne.w	800d376 <rmw_wait+0xba>
 800d560:	2c00      	cmp	r4, #0
 800d562:	f47f af1a 	bne.w	800d39a <rmw_wait+0xde>
 800d566:	f1b9 0f00 	cmp.w	r9, #0
 800d56a:	d027      	beq.n	800d5bc <rmw_wait+0x300>
 800d56c:	f8d9 3000 	ldr.w	r3, [r9]
 800d570:	4625      	mov	r5, r4
 800d572:	2b00      	cmp	r3, #0
 800d574:	f47f af41 	bne.w	800d3fa <rmw_wait+0x13e>
 800d578:	e777      	b.n	800d46a <rmw_wait+0x1ae>
 800d57a:	464d      	mov	r5, r9
 800d57c:	e74e      	b.n	800d41c <rmw_wait+0x160>
 800d57e:	2f00      	cmp	r7, #0
 800d580:	f47f aef9 	bne.w	800d376 <rmw_wait+0xba>
 800d584:	2c00      	cmp	r4, #0
 800d586:	f47f af08 	bne.w	800d39a <rmw_wait+0xde>
 800d58a:	f1b9 0f00 	cmp.w	r9, #0
 800d58e:	d015      	beq.n	800d5bc <rmw_wait+0x300>
 800d590:	f8d9 3000 	ldr.w	r3, [r9]
 800d594:	2b00      	cmp	r3, #0
 800d596:	f47f af30 	bne.w	800d3fa <rmw_wait+0x13e>
 800d59a:	2500      	movs	r5, #0
 800d59c:	e743      	b.n	800d426 <rmw_wait+0x16a>
 800d59e:	2c00      	cmp	r4, #0
 800d5a0:	f47f aefb 	bne.w	800d39a <rmw_wait+0xde>
 800d5a4:	f1b9 0f00 	cmp.w	r9, #0
 800d5a8:	f47f af24 	bne.w	800d3f4 <rmw_wait+0x138>
 800d5ac:	e7f5      	b.n	800d59a <rmw_wait+0x2de>
 800d5ae:	bf00      	nop
 800d5b0:	08014970 	.word	0x08014970
 800d5b4:	2000db50 	.word	0x2000db50
 800d5b8:	000f4240 	.word	0x000f4240
 800d5bc:	464d      	mov	r5, r9
 800d5be:	e754      	b.n	800d46a <rmw_wait+0x1ae>

0800d5c0 <rmw_create_wait_set>:
 800d5c0:	b508      	push	{r3, lr}
 800d5c2:	4803      	ldr	r0, [pc, #12]	@ (800d5d0 <rmw_create_wait_set+0x10>)
 800d5c4:	f004 fdc8 	bl	8012158 <get_memory>
 800d5c8:	b108      	cbz	r0, 800d5ce <rmw_create_wait_set+0xe>
 800d5ca:	6880      	ldr	r0, [r0, #8]
 800d5cc:	3010      	adds	r0, #16
 800d5ce:	bd08      	pop	{r3, pc}
 800d5d0:	2000930c 	.word	0x2000930c

0800d5d4 <rmw_destroy_wait_set>:
 800d5d4:	b508      	push	{r3, lr}
 800d5d6:	4b08      	ldr	r3, [pc, #32]	@ (800d5f8 <rmw_destroy_wait_set+0x24>)
 800d5d8:	6819      	ldr	r1, [r3, #0]
 800d5da:	b911      	cbnz	r1, 800d5e2 <rmw_destroy_wait_set+0xe>
 800d5dc:	e00a      	b.n	800d5f4 <rmw_destroy_wait_set+0x20>
 800d5de:	6849      	ldr	r1, [r1, #4]
 800d5e0:	b141      	cbz	r1, 800d5f4 <rmw_destroy_wait_set+0x20>
 800d5e2:	688b      	ldr	r3, [r1, #8]
 800d5e4:	3310      	adds	r3, #16
 800d5e6:	4298      	cmp	r0, r3
 800d5e8:	d1f9      	bne.n	800d5de <rmw_destroy_wait_set+0xa>
 800d5ea:	4803      	ldr	r0, [pc, #12]	@ (800d5f8 <rmw_destroy_wait_set+0x24>)
 800d5ec:	f004 fdc4 	bl	8012178 <put_memory>
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	bd08      	pop	{r3, pc}
 800d5f4:	2001      	movs	r0, #1
 800d5f6:	bd08      	pop	{r3, pc}
 800d5f8:	2000930c 	.word	0x2000930c

0800d5fc <rmw_uxrce_init_service_memory>:
 800d5fc:	b1e2      	cbz	r2, 800d638 <rmw_uxrce_init_service_memory+0x3c>
 800d5fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d602:	7b05      	ldrb	r5, [r0, #12]
 800d604:	4606      	mov	r6, r0
 800d606:	b9ad      	cbnz	r5, 800d634 <rmw_uxrce_init_service_memory+0x38>
 800d608:	23c8      	movs	r3, #200	@ 0xc8
 800d60a:	e9c0 5500 	strd	r5, r5, [r0]
 800d60e:	6083      	str	r3, [r0, #8]
 800d610:	f240 1301 	movw	r3, #257	@ 0x101
 800d614:	4617      	mov	r7, r2
 800d616:	8183      	strh	r3, [r0, #12]
 800d618:	460c      	mov	r4, r1
 800d61a:	46a8      	mov	r8, r5
 800d61c:	4621      	mov	r1, r4
 800d61e:	4630      	mov	r0, r6
 800d620:	3501      	adds	r5, #1
 800d622:	f004 fda9 	bl	8012178 <put_memory>
 800d626:	42af      	cmp	r7, r5
 800d628:	60a4      	str	r4, [r4, #8]
 800d62a:	f884 800c 	strb.w	r8, [r4, #12]
 800d62e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800d632:	d1f3      	bne.n	800d61c <rmw_uxrce_init_service_memory+0x20>
 800d634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d638:	4770      	bx	lr
 800d63a:	bf00      	nop

0800d63c <rmw_uxrce_init_client_memory>:
 800d63c:	b1e2      	cbz	r2, 800d678 <rmw_uxrce_init_client_memory+0x3c>
 800d63e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d642:	7b05      	ldrb	r5, [r0, #12]
 800d644:	4606      	mov	r6, r0
 800d646:	b9ad      	cbnz	r5, 800d674 <rmw_uxrce_init_client_memory+0x38>
 800d648:	23c8      	movs	r3, #200	@ 0xc8
 800d64a:	e9c0 5500 	strd	r5, r5, [r0]
 800d64e:	6083      	str	r3, [r0, #8]
 800d650:	f240 1301 	movw	r3, #257	@ 0x101
 800d654:	4617      	mov	r7, r2
 800d656:	8183      	strh	r3, [r0, #12]
 800d658:	460c      	mov	r4, r1
 800d65a:	46a8      	mov	r8, r5
 800d65c:	4621      	mov	r1, r4
 800d65e:	4630      	mov	r0, r6
 800d660:	3501      	adds	r5, #1
 800d662:	f004 fd89 	bl	8012178 <put_memory>
 800d666:	42af      	cmp	r7, r5
 800d668:	60a4      	str	r4, [r4, #8]
 800d66a:	f884 800c 	strb.w	r8, [r4, #12]
 800d66e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800d672:	d1f3      	bne.n	800d65c <rmw_uxrce_init_client_memory+0x20>
 800d674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop

0800d67c <rmw_uxrce_init_publisher_memory>:
 800d67c:	b1e2      	cbz	r2, 800d6b8 <rmw_uxrce_init_publisher_memory+0x3c>
 800d67e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d682:	7b05      	ldrb	r5, [r0, #12]
 800d684:	4606      	mov	r6, r0
 800d686:	b9ad      	cbnz	r5, 800d6b4 <rmw_uxrce_init_publisher_memory+0x38>
 800d688:	23d8      	movs	r3, #216	@ 0xd8
 800d68a:	e9c0 5500 	strd	r5, r5, [r0]
 800d68e:	6083      	str	r3, [r0, #8]
 800d690:	f240 1301 	movw	r3, #257	@ 0x101
 800d694:	4617      	mov	r7, r2
 800d696:	8183      	strh	r3, [r0, #12]
 800d698:	460c      	mov	r4, r1
 800d69a:	46a8      	mov	r8, r5
 800d69c:	4621      	mov	r1, r4
 800d69e:	4630      	mov	r0, r6
 800d6a0:	3501      	adds	r5, #1
 800d6a2:	f004 fd69 	bl	8012178 <put_memory>
 800d6a6:	42af      	cmp	r7, r5
 800d6a8:	60a4      	str	r4, [r4, #8]
 800d6aa:	f884 800c 	strb.w	r8, [r4, #12]
 800d6ae:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d6b2:	d1f3      	bne.n	800d69c <rmw_uxrce_init_publisher_memory+0x20>
 800d6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b8:	4770      	bx	lr
 800d6ba:	bf00      	nop

0800d6bc <rmw_uxrce_init_subscription_memory>:
 800d6bc:	b1e2      	cbz	r2, 800d6f8 <rmw_uxrce_init_subscription_memory+0x3c>
 800d6be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c2:	7b05      	ldrb	r5, [r0, #12]
 800d6c4:	4606      	mov	r6, r0
 800d6c6:	b9ad      	cbnz	r5, 800d6f4 <rmw_uxrce_init_subscription_memory+0x38>
 800d6c8:	23d8      	movs	r3, #216	@ 0xd8
 800d6ca:	e9c0 5500 	strd	r5, r5, [r0]
 800d6ce:	6083      	str	r3, [r0, #8]
 800d6d0:	f240 1301 	movw	r3, #257	@ 0x101
 800d6d4:	4617      	mov	r7, r2
 800d6d6:	8183      	strh	r3, [r0, #12]
 800d6d8:	460c      	mov	r4, r1
 800d6da:	46a8      	mov	r8, r5
 800d6dc:	4621      	mov	r1, r4
 800d6de:	4630      	mov	r0, r6
 800d6e0:	3501      	adds	r5, #1
 800d6e2:	f004 fd49 	bl	8012178 <put_memory>
 800d6e6:	42af      	cmp	r7, r5
 800d6e8:	60a4      	str	r4, [r4, #8]
 800d6ea:	f884 800c 	strb.w	r8, [r4, #12]
 800d6ee:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d6f2:	d1f3      	bne.n	800d6dc <rmw_uxrce_init_subscription_memory+0x20>
 800d6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6f8:	4770      	bx	lr
 800d6fa:	bf00      	nop

0800d6fc <rmw_uxrce_init_node_memory>:
 800d6fc:	b1e2      	cbz	r2, 800d738 <rmw_uxrce_init_node_memory+0x3c>
 800d6fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d702:	7b05      	ldrb	r5, [r0, #12]
 800d704:	4606      	mov	r6, r0
 800d706:	b9ad      	cbnz	r5, 800d734 <rmw_uxrce_init_node_memory+0x38>
 800d708:	23a4      	movs	r3, #164	@ 0xa4
 800d70a:	e9c0 5500 	strd	r5, r5, [r0]
 800d70e:	6083      	str	r3, [r0, #8]
 800d710:	f240 1301 	movw	r3, #257	@ 0x101
 800d714:	4617      	mov	r7, r2
 800d716:	8183      	strh	r3, [r0, #12]
 800d718:	460c      	mov	r4, r1
 800d71a:	46a8      	mov	r8, r5
 800d71c:	4621      	mov	r1, r4
 800d71e:	4630      	mov	r0, r6
 800d720:	3501      	adds	r5, #1
 800d722:	f004 fd29 	bl	8012178 <put_memory>
 800d726:	42af      	cmp	r7, r5
 800d728:	60a4      	str	r4, [r4, #8]
 800d72a:	f884 800c 	strb.w	r8, [r4, #12]
 800d72e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800d732:	d1f3      	bne.n	800d71c <rmw_uxrce_init_node_memory+0x20>
 800d734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop

0800d73c <rmw_uxrce_init_session_memory>:
 800d73c:	b1ea      	cbz	r2, 800d77a <rmw_uxrce_init_session_memory+0x3e>
 800d73e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d742:	7b05      	ldrb	r5, [r0, #12]
 800d744:	4606      	mov	r6, r0
 800d746:	b9b5      	cbnz	r5, 800d776 <rmw_uxrce_init_session_memory+0x3a>
 800d748:	e9c0 5500 	strd	r5, r5, [r0]
 800d74c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800d750:	f240 1301 	movw	r3, #257	@ 0x101
 800d754:	4617      	mov	r7, r2
 800d756:	f8c0 8008 	str.w	r8, [r0, #8]
 800d75a:	460c      	mov	r4, r1
 800d75c:	8183      	strh	r3, [r0, #12]
 800d75e:	46a9      	mov	r9, r5
 800d760:	4621      	mov	r1, r4
 800d762:	4630      	mov	r0, r6
 800d764:	3501      	adds	r5, #1
 800d766:	f004 fd07 	bl	8012178 <put_memory>
 800d76a:	42af      	cmp	r7, r5
 800d76c:	60a4      	str	r4, [r4, #8]
 800d76e:	f884 900c 	strb.w	r9, [r4, #12]
 800d772:	4444      	add	r4, r8
 800d774:	d1f4      	bne.n	800d760 <rmw_uxrce_init_session_memory+0x24>
 800d776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d77a:	4770      	bx	lr

0800d77c <rmw_uxrce_init_topic_memory>:
 800d77c:	b1e2      	cbz	r2, 800d7b8 <rmw_uxrce_init_topic_memory+0x3c>
 800d77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d782:	7b05      	ldrb	r5, [r0, #12]
 800d784:	4606      	mov	r6, r0
 800d786:	b9ad      	cbnz	r5, 800d7b4 <rmw_uxrce_init_topic_memory+0x38>
 800d788:	231c      	movs	r3, #28
 800d78a:	e9c0 5500 	strd	r5, r5, [r0]
 800d78e:	6083      	str	r3, [r0, #8]
 800d790:	f240 1301 	movw	r3, #257	@ 0x101
 800d794:	4617      	mov	r7, r2
 800d796:	8183      	strh	r3, [r0, #12]
 800d798:	460c      	mov	r4, r1
 800d79a:	46a8      	mov	r8, r5
 800d79c:	4621      	mov	r1, r4
 800d79e:	4630      	mov	r0, r6
 800d7a0:	3501      	adds	r5, #1
 800d7a2:	f004 fce9 	bl	8012178 <put_memory>
 800d7a6:	42af      	cmp	r7, r5
 800d7a8:	60a4      	str	r4, [r4, #8]
 800d7aa:	f884 800c 	strb.w	r8, [r4, #12]
 800d7ae:	f104 041c 	add.w	r4, r4, #28
 800d7b2:	d1f3      	bne.n	800d79c <rmw_uxrce_init_topic_memory+0x20>
 800d7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7b8:	4770      	bx	lr
 800d7ba:	bf00      	nop

0800d7bc <rmw_uxrce_init_static_input_buffer_memory>:
 800d7bc:	b1ea      	cbz	r2, 800d7fa <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800d7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c2:	7b05      	ldrb	r5, [r0, #12]
 800d7c4:	4606      	mov	r6, r0
 800d7c6:	b9b5      	cbnz	r5, 800d7f6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800d7c8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800d7cc:	e9c0 5500 	strd	r5, r5, [r0]
 800d7d0:	6083      	str	r3, [r0, #8]
 800d7d2:	f240 1301 	movw	r3, #257	@ 0x101
 800d7d6:	4617      	mov	r7, r2
 800d7d8:	8183      	strh	r3, [r0, #12]
 800d7da:	460c      	mov	r4, r1
 800d7dc:	46a8      	mov	r8, r5
 800d7de:	4621      	mov	r1, r4
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	3501      	adds	r5, #1
 800d7e4:	f004 fcc8 	bl	8012178 <put_memory>
 800d7e8:	42af      	cmp	r7, r5
 800d7ea:	60a4      	str	r4, [r4, #8]
 800d7ec:	f884 800c 	strb.w	r8, [r4, #12]
 800d7f0:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800d7f4:	d1f3      	bne.n	800d7de <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800d7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7fa:	4770      	bx	lr

0800d7fc <rmw_uxrce_init_init_options_impl_memory>:
 800d7fc:	b1e2      	cbz	r2, 800d838 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800d7fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d802:	7b05      	ldrb	r5, [r0, #12]
 800d804:	4606      	mov	r6, r0
 800d806:	b9ad      	cbnz	r5, 800d834 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800d808:	232c      	movs	r3, #44	@ 0x2c
 800d80a:	e9c0 5500 	strd	r5, r5, [r0]
 800d80e:	6083      	str	r3, [r0, #8]
 800d810:	f240 1301 	movw	r3, #257	@ 0x101
 800d814:	4617      	mov	r7, r2
 800d816:	8183      	strh	r3, [r0, #12]
 800d818:	460c      	mov	r4, r1
 800d81a:	46a8      	mov	r8, r5
 800d81c:	4621      	mov	r1, r4
 800d81e:	4630      	mov	r0, r6
 800d820:	3501      	adds	r5, #1
 800d822:	f004 fca9 	bl	8012178 <put_memory>
 800d826:	42af      	cmp	r7, r5
 800d828:	60a4      	str	r4, [r4, #8]
 800d82a:	f884 800c 	strb.w	r8, [r4, #12]
 800d82e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800d832:	d1f3      	bne.n	800d81c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800d834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop

0800d83c <rmw_uxrce_init_wait_set_memory>:
 800d83c:	b1e2      	cbz	r2, 800d878 <rmw_uxrce_init_wait_set_memory+0x3c>
 800d83e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d842:	7b05      	ldrb	r5, [r0, #12]
 800d844:	4606      	mov	r6, r0
 800d846:	b9ad      	cbnz	r5, 800d874 <rmw_uxrce_init_wait_set_memory+0x38>
 800d848:	231c      	movs	r3, #28
 800d84a:	e9c0 5500 	strd	r5, r5, [r0]
 800d84e:	6083      	str	r3, [r0, #8]
 800d850:	f240 1301 	movw	r3, #257	@ 0x101
 800d854:	4617      	mov	r7, r2
 800d856:	8183      	strh	r3, [r0, #12]
 800d858:	460c      	mov	r4, r1
 800d85a:	46a8      	mov	r8, r5
 800d85c:	4621      	mov	r1, r4
 800d85e:	4630      	mov	r0, r6
 800d860:	3501      	adds	r5, #1
 800d862:	f004 fc89 	bl	8012178 <put_memory>
 800d866:	42af      	cmp	r7, r5
 800d868:	60a4      	str	r4, [r4, #8]
 800d86a:	f884 800c 	strb.w	r8, [r4, #12]
 800d86e:	f104 041c 	add.w	r4, r4, #28
 800d872:	d1f3      	bne.n	800d85c <rmw_uxrce_init_wait_set_memory+0x20>
 800d874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop

0800d87c <rmw_uxrce_init_guard_condition_memory>:
 800d87c:	b1e2      	cbz	r2, 800d8b8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800d87e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d882:	7b05      	ldrb	r5, [r0, #12]
 800d884:	4606      	mov	r6, r0
 800d886:	b9ad      	cbnz	r5, 800d8b4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800d888:	2320      	movs	r3, #32
 800d88a:	e9c0 5500 	strd	r5, r5, [r0]
 800d88e:	6083      	str	r3, [r0, #8]
 800d890:	f240 1301 	movw	r3, #257	@ 0x101
 800d894:	4617      	mov	r7, r2
 800d896:	8183      	strh	r3, [r0, #12]
 800d898:	460c      	mov	r4, r1
 800d89a:	46a8      	mov	r8, r5
 800d89c:	4621      	mov	r1, r4
 800d89e:	4630      	mov	r0, r6
 800d8a0:	3501      	adds	r5, #1
 800d8a2:	f004 fc69 	bl	8012178 <put_memory>
 800d8a6:	42af      	cmp	r7, r5
 800d8a8:	60a4      	str	r4, [r4, #8]
 800d8aa:	f884 800c 	strb.w	r8, [r4, #12]
 800d8ae:	f104 0420 	add.w	r4, r4, #32
 800d8b2:	d1f3      	bne.n	800d89c <rmw_uxrce_init_guard_condition_memory+0x20>
 800d8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8b8:	4770      	bx	lr
 800d8ba:	bf00      	nop

0800d8bc <rmw_uxrce_fini_session_memory>:
 800d8bc:	4601      	mov	r1, r0
 800d8be:	4801      	ldr	r0, [pc, #4]	@ (800d8c4 <rmw_uxrce_fini_session_memory+0x8>)
 800d8c0:	f004 bc5a 	b.w	8012178 <put_memory>
 800d8c4:	2000db50 	.word	0x2000db50

0800d8c8 <rmw_uxrce_fini_node_memory>:
 800d8c8:	b538      	push	{r3, r4, r5, lr}
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	6800      	ldr	r0, [r0, #0]
 800d8ce:	b128      	cbz	r0, 800d8dc <rmw_uxrce_fini_node_memory+0x14>
 800d8d0:	4b07      	ldr	r3, [pc, #28]	@ (800d8f0 <rmw_uxrce_fini_node_memory+0x28>)
 800d8d2:	6819      	ldr	r1, [r3, #0]
 800d8d4:	f7f2 fc84 	bl	80001e0 <strcmp>
 800d8d8:	b940      	cbnz	r0, 800d8ec <rmw_uxrce_fini_node_memory+0x24>
 800d8da:	6020      	str	r0, [r4, #0]
 800d8dc:	6861      	ldr	r1, [r4, #4]
 800d8de:	b129      	cbz	r1, 800d8ec <rmw_uxrce_fini_node_memory+0x24>
 800d8e0:	2500      	movs	r5, #0
 800d8e2:	4804      	ldr	r0, [pc, #16]	@ (800d8f4 <rmw_uxrce_fini_node_memory+0x2c>)
 800d8e4:	610d      	str	r5, [r1, #16]
 800d8e6:	f004 fc47 	bl	8012178 <put_memory>
 800d8ea:	6065      	str	r5, [r4, #4]
 800d8ec:	bd38      	pop	{r3, r4, r5, pc}
 800d8ee:	bf00      	nop
 800d8f0:	0801562c 	.word	0x0801562c
 800d8f4:	2000c594 	.word	0x2000c594

0800d8f8 <rmw_uxrce_fini_publisher_memory>:
 800d8f8:	b510      	push	{r4, lr}
 800d8fa:	4604      	mov	r4, r0
 800d8fc:	6800      	ldr	r0, [r0, #0]
 800d8fe:	b128      	cbz	r0, 800d90c <rmw_uxrce_fini_publisher_memory+0x14>
 800d900:	4b06      	ldr	r3, [pc, #24]	@ (800d91c <rmw_uxrce_fini_publisher_memory+0x24>)
 800d902:	6819      	ldr	r1, [r3, #0]
 800d904:	f7f2 fc6c 	bl	80001e0 <strcmp>
 800d908:	b938      	cbnz	r0, 800d91a <rmw_uxrce_fini_publisher_memory+0x22>
 800d90a:	6020      	str	r0, [r4, #0]
 800d90c:	6861      	ldr	r1, [r4, #4]
 800d90e:	b121      	cbz	r1, 800d91a <rmw_uxrce_fini_publisher_memory+0x22>
 800d910:	4803      	ldr	r0, [pc, #12]	@ (800d920 <rmw_uxrce_fini_publisher_memory+0x28>)
 800d912:	f004 fc31 	bl	8012178 <put_memory>
 800d916:	2300      	movs	r3, #0
 800d918:	6063      	str	r3, [r4, #4]
 800d91a:	bd10      	pop	{r4, pc}
 800d91c:	0801562c 	.word	0x0801562c
 800d920:	2000c4e0 	.word	0x2000c4e0

0800d924 <rmw_uxrce_fini_subscription_memory>:
 800d924:	b510      	push	{r4, lr}
 800d926:	4604      	mov	r4, r0
 800d928:	6800      	ldr	r0, [r0, #0]
 800d92a:	b128      	cbz	r0, 800d938 <rmw_uxrce_fini_subscription_memory+0x14>
 800d92c:	4b06      	ldr	r3, [pc, #24]	@ (800d948 <rmw_uxrce_fini_subscription_memory+0x24>)
 800d92e:	6819      	ldr	r1, [r3, #0]
 800d930:	f7f2 fc56 	bl	80001e0 <strcmp>
 800d934:	b938      	cbnz	r0, 800d946 <rmw_uxrce_fini_subscription_memory+0x22>
 800d936:	6020      	str	r0, [r4, #0]
 800d938:	6861      	ldr	r1, [r4, #4]
 800d93a:	b121      	cbz	r1, 800d946 <rmw_uxrce_fini_subscription_memory+0x22>
 800d93c:	4803      	ldr	r0, [pc, #12]	@ (800d94c <rmw_uxrce_fini_subscription_memory+0x28>)
 800d93e:	f004 fc1b 	bl	8012178 <put_memory>
 800d942:	2300      	movs	r3, #0
 800d944:	6063      	str	r3, [r4, #4]
 800d946:	bd10      	pop	{r4, pc}
 800d948:	0801562c 	.word	0x0801562c
 800d94c:	2000bc60 	.word	0x2000bc60

0800d950 <rmw_uxrce_fini_service_memory>:
 800d950:	b510      	push	{r4, lr}
 800d952:	4604      	mov	r4, r0
 800d954:	6800      	ldr	r0, [r0, #0]
 800d956:	b128      	cbz	r0, 800d964 <rmw_uxrce_fini_service_memory+0x14>
 800d958:	4b06      	ldr	r3, [pc, #24]	@ (800d974 <rmw_uxrce_fini_service_memory+0x24>)
 800d95a:	6819      	ldr	r1, [r3, #0]
 800d95c:	f7f2 fc40 	bl	80001e0 <strcmp>
 800d960:	b938      	cbnz	r0, 800d972 <rmw_uxrce_fini_service_memory+0x22>
 800d962:	6020      	str	r0, [r4, #0]
 800d964:	6861      	ldr	r1, [r4, #4]
 800d966:	b121      	cbz	r1, 800d972 <rmw_uxrce_fini_service_memory+0x22>
 800d968:	4803      	ldr	r0, [pc, #12]	@ (800d978 <rmw_uxrce_fini_service_memory+0x28>)
 800d96a:	f004 fc05 	bl	8012178 <put_memory>
 800d96e:	2300      	movs	r3, #0
 800d970:	6063      	str	r3, [r4, #4]
 800d972:	bd10      	pop	{r4, pc}
 800d974:	0801562c 	.word	0x0801562c
 800d978:	2000b818 	.word	0x2000b818

0800d97c <rmw_uxrce_fini_client_memory>:
 800d97c:	b510      	push	{r4, lr}
 800d97e:	4604      	mov	r4, r0
 800d980:	6800      	ldr	r0, [r0, #0]
 800d982:	b128      	cbz	r0, 800d990 <rmw_uxrce_fini_client_memory+0x14>
 800d984:	4b06      	ldr	r3, [pc, #24]	@ (800d9a0 <rmw_uxrce_fini_client_memory+0x24>)
 800d986:	6819      	ldr	r1, [r3, #0]
 800d988:	f7f2 fc2a 	bl	80001e0 <strcmp>
 800d98c:	b938      	cbnz	r0, 800d99e <rmw_uxrce_fini_client_memory+0x22>
 800d98e:	6020      	str	r0, [r4, #0]
 800d990:	6861      	ldr	r1, [r4, #4]
 800d992:	b121      	cbz	r1, 800d99e <rmw_uxrce_fini_client_memory+0x22>
 800d994:	4803      	ldr	r0, [pc, #12]	@ (800d9a4 <rmw_uxrce_fini_client_memory+0x28>)
 800d996:	f004 fbef 	bl	8012178 <put_memory>
 800d99a:	2300      	movs	r3, #0
 800d99c:	6063      	str	r3, [r4, #4]
 800d99e:	bd10      	pop	{r4, pc}
 800d9a0:	0801562c 	.word	0x0801562c
 800d9a4:	2000b740 	.word	0x2000b740

0800d9a8 <rmw_uxrce_fini_topic_memory>:
 800d9a8:	b510      	push	{r4, lr}
 800d9aa:	4604      	mov	r4, r0
 800d9ac:	4621      	mov	r1, r4
 800d9ae:	4803      	ldr	r0, [pc, #12]	@ (800d9bc <rmw_uxrce_fini_topic_memory+0x14>)
 800d9b0:	f004 fbe2 	bl	8012178 <put_memory>
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	61a3      	str	r3, [r4, #24]
 800d9b8:	bd10      	pop	{r4, pc}
 800d9ba:	bf00      	nop
 800d9bc:	2000b664 	.word	0x2000b664

0800d9c0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800d9c0:	b082      	sub	sp, #8
 800d9c2:	b530      	push	{r4, r5, lr}
 800d9c4:	4929      	ldr	r1, [pc, #164]	@ (800da6c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800d9c6:	ac03      	add	r4, sp, #12
 800d9c8:	e884 000c 	stmia.w	r4, {r2, r3}
 800d9cc:	680c      	ldr	r4, [r1, #0]
 800d9ce:	461d      	mov	r5, r3
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	2c00      	cmp	r4, #0
 800d9d4:	d043      	beq.n	800da5e <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	2100      	movs	r1, #0
 800d9da:	6883      	ldr	r3, [r0, #8]
 800d9dc:	6840      	ldr	r0, [r0, #4]
 800d9de:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	bf08      	it	eq
 800d9e6:	3101      	addeq	r1, #1
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	d1f6      	bne.n	800d9da <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800d9ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d9f0:	2b02      	cmp	r3, #2
 800d9f2:	d027      	beq.n	800da44 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 800d9f4:	d906      	bls.n	800da04 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d9f6:	2b03      	cmp	r3, #3
 800d9f8:	d004      	beq.n	800da04 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d9fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9fe:	2000      	movs	r0, #0
 800da00:	b002      	add	sp, #8
 800da02:	4770      	bx	lr
 800da04:	b1fd      	cbz	r5, 800da46 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800da06:	428d      	cmp	r5, r1
 800da08:	d81d      	bhi.n	800da46 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800da0a:	2c00      	cmp	r4, #0
 800da0c:	d0f5      	beq.n	800d9fa <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800da0e:	2000      	movs	r0, #0
 800da10:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800da14:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800da18:	e001      	b.n	800da1e <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800da1a:	6864      	ldr	r4, [r4, #4]
 800da1c:	b1dc      	cbz	r4, 800da56 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800da1e:	68a3      	ldr	r3, [r4, #8]
 800da20:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800da24:	428a      	cmp	r2, r1
 800da26:	d1f8      	bne.n	800da1a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800da28:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800da2c:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800da30:	4561      	cmp	r1, ip
 800da32:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800da36:	eb73 0e05 	sbcs.w	lr, r3, r5
 800da3a:	daee      	bge.n	800da1a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800da3c:	468c      	mov	ip, r1
 800da3e:	461d      	mov	r5, r3
 800da40:	4620      	mov	r0, r4
 800da42:	e7ea      	b.n	800da1a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800da44:	b92d      	cbnz	r5, 800da52 <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 800da46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da4a:	4808      	ldr	r0, [pc, #32]	@ (800da6c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800da4c:	b002      	add	sp, #8
 800da4e:	f004 bb83 	b.w	8012158 <get_memory>
 800da52:	428d      	cmp	r5, r1
 800da54:	d8f7      	bhi.n	800da46 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800da56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da5a:	b002      	add	sp, #8
 800da5c:	4770      	bx	lr
 800da5e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800da62:	2b02      	cmp	r3, #2
 800da64:	d0ef      	beq.n	800da46 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800da66:	d9ee      	bls.n	800da46 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800da68:	4621      	mov	r1, r4
 800da6a:	e7c4      	b.n	800d9f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 800da6c:	2000b4b0 	.word	0x2000b4b0

0800da70 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800da70:	4b11      	ldr	r3, [pc, #68]	@ (800dab8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	b1eb      	cbz	r3, 800dab2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800da76:	b530      	push	{r4, r5, lr}
 800da78:	4684      	mov	ip, r0
 800da7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800da7e:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800da82:	2000      	movs	r0, #0
 800da84:	e001      	b.n	800da8a <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	b193      	cbz	r3, 800dab0 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800da8a:	689a      	ldr	r2, [r3, #8]
 800da8c:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800da90:	458c      	cmp	ip, r1
 800da92:	d1f8      	bne.n	800da86 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800da94:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800da98:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800da9c:	42a1      	cmp	r1, r4
 800da9e:	eb72 050e 	sbcs.w	r5, r2, lr
 800daa2:	daf0      	bge.n	800da86 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800daa4:	4618      	mov	r0, r3
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	460c      	mov	r4, r1
 800daaa:	4696      	mov	lr, r2
 800daac:	2b00      	cmp	r3, #0
 800daae:	d1ec      	bne.n	800da8a <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800dab0:	bd30      	pop	{r4, r5, pc}
 800dab2:	4618      	mov	r0, r3
 800dab4:	4770      	bx	lr
 800dab6:	bf00      	nop
 800dab8:	2000b4b0 	.word	0x2000b4b0
 800dabc:	00000000 	.word	0x00000000

0800dac0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800dac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac4:	4b3c      	ldr	r3, [pc, #240]	@ (800dbb8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800dac6:	ed2d 8b06 	vpush	{d8-d10}
 800daca:	f8d3 8000 	ldr.w	r8, [r3]
 800dace:	b08d      	sub	sp, #52	@ 0x34
 800dad0:	f004 fc68 	bl	80123a4 <rmw_uros_epoch_nanos>
 800dad4:	f1b8 0f00 	cmp.w	r8, #0
 800dad8:	d05c      	beq.n	800db94 <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800dada:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800dade:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800dae2:	2b04      	cmp	r3, #4
 800dae4:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 800dba0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800dae8:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 800dba8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800daec:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 800dbb0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800daf0:	4683      	mov	fp, r0
 800daf2:	ac04      	add	r4, sp, #16
 800daf4:	468a      	mov	sl, r1
 800daf6:	d03f      	beq.n	800db78 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800daf8:	2b05      	cmp	r3, #5
 800dafa:	d044      	beq.n	800db86 <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 800dafc:	2b03      	cmp	r3, #3
 800dafe:	d03b      	beq.n	800db78 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800db00:	ed8d 8b04 	vstr	d8, [sp, #16]
 800db04:	ed8d ab06 	vstr	d10, [sp, #24]
 800db08:	ed8d 8b08 	vstr	d8, [sp, #32]
 800db0c:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800db10:	ab08      	add	r3, sp, #32
 800db12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db14:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800db18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800db1c:	f004 f9ae 	bl	8011e7c <rmw_time_equal>
 800db20:	b118      	cbz	r0, 800db2a <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 800db22:	ed8d 9b04 	vstr	d9, [sp, #16]
 800db26:	ed8d 8b06 	vstr	d8, [sp, #24]
 800db2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800db2e:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 800db32:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 800db36:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800db3a:	f004 f9f3 	bl	8011f24 <rmw_time_total_nsec>
 800db3e:	183f      	adds	r7, r7, r0
 800db40:	eb46 0601 	adc.w	r6, r6, r1
 800db44:	455f      	cmp	r7, fp
 800db46:	eb76 060a 	sbcs.w	r6, r6, sl
 800db4a:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800db4e:	db05      	blt.n	800db5c <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 800db50:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800db54:	4593      	cmp	fp, r2
 800db56:	eb7a 0303 	sbcs.w	r3, sl, r3
 800db5a:	da03      	bge.n	800db64 <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 800db5c:	4816      	ldr	r0, [pc, #88]	@ (800dbb8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800db5e:	4641      	mov	r1, r8
 800db60:	f004 fb0a 	bl	8012178 <put_memory>
 800db64:	f1b9 0f00 	cmp.w	r9, #0
 800db68:	d014      	beq.n	800db94 <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800db6a:	46c8      	mov	r8, r9
 800db6c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800db70:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800db74:	2b04      	cmp	r3, #4
 800db76:	d1bf      	bne.n	800daf8 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 800db78:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800db7c:	3340      	adds	r3, #64	@ 0x40
 800db7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800db84:	e7c0      	b.n	800db08 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800db86:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800db8a:	3348      	adds	r3, #72	@ 0x48
 800db8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800db92:	e7b9      	b.n	800db08 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800db94:	b00d      	add	sp, #52	@ 0x34
 800db96:	ecbd 8b06 	vpop	{d8-d10}
 800db9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db9e:	bf00      	nop
	...
 800dba8:	00000001 	.word	0x00000001
 800dbac:	00000000 	.word	0x00000000
 800dbb0:	0000001e 	.word	0x0000001e
 800dbb4:	00000000 	.word	0x00000000
 800dbb8:	2000b4b0 	.word	0x2000b4b0

0800dbbc <run_xrce_session>:
 800dbbc:	b500      	push	{lr}
 800dbbe:	f891 c002 	ldrb.w	ip, [r1, #2]
 800dbc2:	b087      	sub	sp, #28
 800dbc4:	f1bc 0f01 	cmp.w	ip, #1
 800dbc8:	f8ad 200e 	strh.w	r2, [sp, #14]
 800dbcc:	d00f      	beq.n	800dbee <run_xrce_session+0x32>
 800dbce:	4619      	mov	r1, r3
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	9300      	str	r3, [sp, #0]
 800dbd4:	f10d 020e 	add.w	r2, sp, #14
 800dbd8:	f10d 0317 	add.w	r3, sp, #23
 800dbdc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dbe0:	f001 f918 	bl	800ee14 <uxr_run_session_until_all_status>
 800dbe4:	b100      	cbz	r0, 800dbe8 <run_xrce_session+0x2c>
 800dbe6:	2001      	movs	r0, #1
 800dbe8:	b007      	add	sp, #28
 800dbea:	f85d fb04 	ldr.w	pc, [sp], #4
 800dbee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dbf2:	f000 fd51 	bl	800e698 <uxr_flash_output_streams>
 800dbf6:	2001      	movs	r0, #1
 800dbf8:	e7f6      	b.n	800dbe8 <run_xrce_session+0x2c>
 800dbfa:	bf00      	nop

0800dbfc <convert_qos_profile>:
 800dbfc:	780a      	ldrb	r2, [r1, #0]
 800dbfe:	f891 c008 	ldrb.w	ip, [r1, #8]
 800dc02:	f1a2 0202 	sub.w	r2, r2, #2
 800dc06:	fab2 f282 	clz	r2, r2
 800dc0a:	0952      	lsrs	r2, r2, #5
 800dc0c:	7082      	strb	r2, [r0, #2]
 800dc0e:	7a4a      	ldrb	r2, [r1, #9]
 800dc10:	8889      	ldrh	r1, [r1, #4]
 800dc12:	8081      	strh	r1, [r0, #4]
 800dc14:	f1a2 0202 	sub.w	r2, r2, #2
 800dc18:	f1ac 0c02 	sub.w	ip, ip, #2
 800dc1c:	fab2 f282 	clz	r2, r2
 800dc20:	fabc fc8c 	clz	ip, ip
 800dc24:	0952      	lsrs	r2, r2, #5
 800dc26:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800dc2a:	0052      	lsls	r2, r2, #1
 800dc2c:	f880 c001 	strb.w	ip, [r0, #1]
 800dc30:	7002      	strb	r2, [r0, #0]
 800dc32:	4770      	bx	lr

0800dc34 <generate_type_name>:
 800dc34:	b530      	push	{r4, r5, lr}
 800dc36:	2300      	movs	r3, #0
 800dc38:	700b      	strb	r3, [r1, #0]
 800dc3a:	6803      	ldr	r3, [r0, #0]
 800dc3c:	b087      	sub	sp, #28
 800dc3e:	4614      	mov	r4, r2
 800dc40:	b1d3      	cbz	r3, 800dc78 <generate_type_name+0x44>
 800dc42:	4a0f      	ldr	r2, [pc, #60]	@ (800dc80 <generate_type_name+0x4c>)
 800dc44:	4615      	mov	r5, r2
 800dc46:	9203      	str	r2, [sp, #12]
 800dc48:	9500      	str	r5, [sp, #0]
 800dc4a:	6842      	ldr	r2, [r0, #4]
 800dc4c:	480d      	ldr	r0, [pc, #52]	@ (800dc84 <generate_type_name+0x50>)
 800dc4e:	9001      	str	r0, [sp, #4]
 800dc50:	4608      	mov	r0, r1
 800dc52:	490d      	ldr	r1, [pc, #52]	@ (800dc88 <generate_type_name+0x54>)
 800dc54:	9204      	str	r2, [sp, #16]
 800dc56:	9105      	str	r1, [sp, #20]
 800dc58:	9102      	str	r1, [sp, #8]
 800dc5a:	4a0c      	ldr	r2, [pc, #48]	@ (800dc8c <generate_type_name+0x58>)
 800dc5c:	4621      	mov	r1, r4
 800dc5e:	f005 fda9 	bl	80137b4 <sniprintf>
 800dc62:	2800      	cmp	r0, #0
 800dc64:	db05      	blt.n	800dc72 <generate_type_name+0x3e>
 800dc66:	4284      	cmp	r4, r0
 800dc68:	bfd4      	ite	le
 800dc6a:	2000      	movle	r0, #0
 800dc6c:	2001      	movgt	r0, #1
 800dc6e:	b007      	add	sp, #28
 800dc70:	bd30      	pop	{r4, r5, pc}
 800dc72:	2000      	movs	r0, #0
 800dc74:	b007      	add	sp, #28
 800dc76:	bd30      	pop	{r4, r5, pc}
 800dc78:	4b05      	ldr	r3, [pc, #20]	@ (800dc90 <generate_type_name+0x5c>)
 800dc7a:	4a01      	ldr	r2, [pc, #4]	@ (800dc80 <generate_type_name+0x4c>)
 800dc7c:	461d      	mov	r5, r3
 800dc7e:	e7e2      	b.n	800dc46 <generate_type_name+0x12>
 800dc80:	08014f34 	.word	0x08014f34
 800dc84:	08014f4c 	.word	0x08014f4c
 800dc88:	08014f48 	.word	0x08014f48
 800dc8c:	08014f38 	.word	0x08014f38
 800dc90:	08014d58 	.word	0x08014d58

0800dc94 <generate_topic_name>:
 800dc94:	b510      	push	{r4, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	4614      	mov	r4, r2
 800dc9a:	9000      	str	r0, [sp, #0]
 800dc9c:	4b08      	ldr	r3, [pc, #32]	@ (800dcc0 <generate_topic_name+0x2c>)
 800dc9e:	4a09      	ldr	r2, [pc, #36]	@ (800dcc4 <generate_topic_name+0x30>)
 800dca0:	4608      	mov	r0, r1
 800dca2:	4621      	mov	r1, r4
 800dca4:	f005 fd86 	bl	80137b4 <sniprintf>
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	db05      	blt.n	800dcb8 <generate_topic_name+0x24>
 800dcac:	4284      	cmp	r4, r0
 800dcae:	bfd4      	ite	le
 800dcb0:	2000      	movle	r0, #0
 800dcb2:	2001      	movgt	r0, #1
 800dcb4:	b002      	add	sp, #8
 800dcb6:	bd10      	pop	{r4, pc}
 800dcb8:	2000      	movs	r0, #0
 800dcba:	b002      	add	sp, #8
 800dcbc:	bd10      	pop	{r4, pc}
 800dcbe:	bf00      	nop
 800dcc0:	0801539c 	.word	0x0801539c
 800dcc4:	08014c08 	.word	0x08014c08

0800dcc8 <is_uxrce_rmw_identifier_valid>:
 800dcc8:	b510      	push	{r4, lr}
 800dcca:	4604      	mov	r4, r0
 800dccc:	b140      	cbz	r0, 800dce0 <is_uxrce_rmw_identifier_valid+0x18>
 800dcce:	f7fe fbed 	bl	800c4ac <rmw_get_implementation_identifier>
 800dcd2:	4601      	mov	r1, r0
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	f7f2 fa83 	bl	80001e0 <strcmp>
 800dcda:	fab0 f080 	clz	r0, r0
 800dcde:	0940      	lsrs	r0, r0, #5
 800dce0:	bd10      	pop	{r4, pc}
 800dce2:	bf00      	nop

0800dce4 <get_message_typesupport_handle>:
 800dce4:	6883      	ldr	r3, [r0, #8]
 800dce6:	4718      	bx	r3

0800dce8 <get_message_typesupport_handle_function>:
 800dce8:	b510      	push	{r4, lr}
 800dcea:	4604      	mov	r4, r0
 800dcec:	6800      	ldr	r0, [r0, #0]
 800dcee:	f7f2 fa77 	bl	80001e0 <strcmp>
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	bf0c      	ite	eq
 800dcf6:	4620      	moveq	r0, r4
 800dcf8:	2000      	movne	r0, #0
 800dcfa:	bd10      	pop	{r4, pc}

0800dcfc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800dcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd00:	6805      	ldr	r5, [r0, #0]
 800dd02:	4604      	mov	r4, r0
 800dd04:	4628      	mov	r0, r5
 800dd06:	460e      	mov	r6, r1
 800dd08:	f7f2 fa6a 	bl	80001e0 <strcmp>
 800dd0c:	b308      	cbz	r0, 800dd52 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800dd0e:	4b12      	ldr	r3, [pc, #72]	@ (800dd58 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 800dd10:	4628      	mov	r0, r5
 800dd12:	6819      	ldr	r1, [r3, #0]
 800dd14:	f7f2 fa64 	bl	80001e0 <strcmp>
 800dd18:	4605      	mov	r5, r0
 800dd1a:	b980      	cbnz	r0, 800dd3e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 800dd1c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800dd20:	f8d8 4000 	ldr.w	r4, [r8]
 800dd24:	b1ac      	cbz	r4, 800dd52 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800dd26:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800dd2a:	3f04      	subs	r7, #4
 800dd2c:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800dd30:	4631      	mov	r1, r6
 800dd32:	f7f2 fa55 	bl	80001e0 <strcmp>
 800dd36:	b128      	cbz	r0, 800dd44 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 800dd38:	3501      	adds	r5, #1
 800dd3a:	42a5      	cmp	r5, r4
 800dd3c:	d1f6      	bne.n	800dd2c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 800dd3e:	2000      	movs	r0, #0
 800dd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd44:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dd48:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800dd4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd50:	4718      	bx	r3
 800dd52:	4620      	mov	r0, r4
 800dd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd58:	200000d0 	.word	0x200000d0

0800dd5c <std_msgs__msg__Int32__get_type_hash>:
 800dd5c:	4800      	ldr	r0, [pc, #0]	@ (800dd60 <std_msgs__msg__Int32__get_type_hash+0x4>)
 800dd5e:	4770      	bx	lr
 800dd60:	200000d8 	.word	0x200000d8

0800dd64 <std_msgs__msg__Int32__get_type_description>:
 800dd64:	4b03      	ldr	r3, [pc, #12]	@ (800dd74 <std_msgs__msg__Int32__get_type_description+0x10>)
 800dd66:	781a      	ldrb	r2, [r3, #0]
 800dd68:	b90a      	cbnz	r2, 800dd6e <std_msgs__msg__Int32__get_type_description+0xa>
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	701a      	strb	r2, [r3, #0]
 800dd6e:	4802      	ldr	r0, [pc, #8]	@ (800dd78 <std_msgs__msg__Int32__get_type_description+0x14>)
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	2000db85 	.word	0x2000db85
 800dd78:	080153d0 	.word	0x080153d0

0800dd7c <std_msgs__msg__Int32__get_type_description_sources>:
 800dd7c:	4b09      	ldr	r3, [pc, #36]	@ (800dda4 <std_msgs__msg__Int32__get_type_description_sources+0x28>)
 800dd7e:	781a      	ldrb	r2, [r3, #0]
 800dd80:	b96a      	cbnz	r2, 800dd9e <std_msgs__msg__Int32__get_type_description_sources+0x22>
 800dd82:	b430      	push	{r4, r5}
 800dd84:	4d08      	ldr	r5, [pc, #32]	@ (800dda8 <std_msgs__msg__Int32__get_type_description_sources+0x2c>)
 800dd86:	4c09      	ldr	r4, [pc, #36]	@ (800ddac <std_msgs__msg__Int32__get_type_description_sources+0x30>)
 800dd88:	2201      	movs	r2, #1
 800dd8a:	701a      	strb	r2, [r3, #0]
 800dd8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd94:	682b      	ldr	r3, [r5, #0]
 800dd96:	4806      	ldr	r0, [pc, #24]	@ (800ddb0 <std_msgs__msg__Int32__get_type_description_sources+0x34>)
 800dd98:	6023      	str	r3, [r4, #0]
 800dd9a:	bc30      	pop	{r4, r5}
 800dd9c:	4770      	bx	lr
 800dd9e:	4804      	ldr	r0, [pc, #16]	@ (800ddb0 <std_msgs__msg__Int32__get_type_description_sources+0x34>)
 800dda0:	4770      	bx	lr
 800dda2:	bf00      	nop
 800dda4:	2000db84 	.word	0x2000db84
 800dda8:	080153ac 	.word	0x080153ac
 800ddac:	2000db60 	.word	0x2000db60
 800ddb0:	080153a0 	.word	0x080153a0

0800ddb4 <std_msgs__msg__Int32__init>:
 800ddb4:	3800      	subs	r0, #0
 800ddb6:	bf18      	it	ne
 800ddb8:	2001      	movne	r0, #1
 800ddba:	4770      	bx	lr

0800ddbc <std_msgs__msg__Int32__fini>:
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop

0800ddc0 <uxr_buffer_delete_entity>:
 800ddc0:	b510      	push	{r4, lr}
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	b08e      	sub	sp, #56	@ 0x38
 800ddc6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ddca:	2303      	movs	r3, #3
 800ddcc:	9300      	str	r3, [sp, #0]
 800ddce:	2204      	movs	r2, #4
 800ddd0:	ab06      	add	r3, sp, #24
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	f001 fa54 	bl	800f280 <uxr_prepare_stream_to_write_submessage>
 800ddd8:	b918      	cbnz	r0, 800dde2 <uxr_buffer_delete_entity+0x22>
 800ddda:	4604      	mov	r4, r0
 800dddc:	4620      	mov	r0, r4
 800ddde:	b00e      	add	sp, #56	@ 0x38
 800dde0:	bd10      	pop	{r4, pc}
 800dde2:	9902      	ldr	r1, [sp, #8]
 800dde4:	aa05      	add	r2, sp, #20
 800dde6:	4620      	mov	r0, r4
 800dde8:	f001 fb84 	bl	800f4f4 <uxr_init_base_object_request>
 800ddec:	a905      	add	r1, sp, #20
 800ddee:	4604      	mov	r4, r0
 800ddf0:	a806      	add	r0, sp, #24
 800ddf2:	f003 f919 	bl	8011028 <uxr_serialize_DELETE_Payload>
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	b00e      	add	sp, #56	@ 0x38
 800ddfa:	bd10      	pop	{r4, pc}

0800ddfc <uxr_common_create_entity>:
 800ddfc:	b510      	push	{r4, lr}
 800ddfe:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800de02:	b08c      	sub	sp, #48	@ 0x30
 800de04:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800de08:	f1bc 0f01 	cmp.w	ip, #1
 800de0c:	bf08      	it	eq
 800de0e:	f003 0201 	andeq.w	r2, r3, #1
 800de12:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800de16:	bf18      	it	ne
 800de18:	2200      	movne	r2, #0
 800de1a:	330e      	adds	r3, #14
 800de1c:	441a      	add	r2, r3
 800de1e:	2301      	movs	r3, #1
 800de20:	e9cd 3100 	strd	r3, r1, [sp]
 800de24:	b292      	uxth	r2, r2
 800de26:	9903      	ldr	r1, [sp, #12]
 800de28:	ab04      	add	r3, sp, #16
 800de2a:	4604      	mov	r4, r0
 800de2c:	f001 fa28 	bl	800f280 <uxr_prepare_stream_to_write_submessage>
 800de30:	b918      	cbnz	r0, 800de3a <uxr_common_create_entity+0x3e>
 800de32:	4604      	mov	r4, r0
 800de34:	4620      	mov	r0, r4
 800de36:	b00c      	add	sp, #48	@ 0x30
 800de38:	bd10      	pop	{r4, pc}
 800de3a:	9902      	ldr	r1, [sp, #8]
 800de3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800de3e:	4620      	mov	r0, r4
 800de40:	f001 fb58 	bl	800f4f4 <uxr_init_base_object_request>
 800de44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800de46:	4604      	mov	r4, r0
 800de48:	a804      	add	r0, sp, #16
 800de4a:	f003 f84b 	bl	8010ee4 <uxr_serialize_CREATE_Payload>
 800de4e:	4620      	mov	r0, r4
 800de50:	b00c      	add	sp, #48	@ 0x30
 800de52:	bd10      	pop	{r4, pc}

0800de54 <uxr_buffer_create_participant_bin>:
 800de54:	b570      	push	{r4, r5, r6, lr}
 800de56:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800de5a:	ac11      	add	r4, sp, #68	@ 0x44
 800de5c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800de60:	2303      	movs	r3, #3
 800de62:	7223      	strb	r3, [r4, #8]
 800de64:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800de66:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800de6a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800de6e:	2201      	movs	r2, #1
 800de70:	2100      	movs	r1, #0
 800de72:	4605      	mov	r5, r0
 800de74:	7122      	strb	r2, [r4, #4]
 800de76:	f88d 1014 	strb.w	r1, [sp, #20]
 800de7a:	b1cb      	cbz	r3, 800deb0 <uxr_buffer_create_participant_bin+0x5c>
 800de7c:	f88d 201c 	strb.w	r2, [sp, #28]
 800de80:	9308      	str	r3, [sp, #32]
 800de82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800de86:	a915      	add	r1, sp, #84	@ 0x54
 800de88:	a809      	add	r0, sp, #36	@ 0x24
 800de8a:	f7fb f80d 	bl	8008ea8 <ucdr_init_buffer>
 800de8e:	a905      	add	r1, sp, #20
 800de90:	a809      	add	r0, sp, #36	@ 0x24
 800de92:	f002 fd0d 	bl	80108b0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800de96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de98:	9600      	str	r6, [sp, #0]
 800de9a:	9401      	str	r4, [sp, #4]
 800de9c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dea0:	60e3      	str	r3, [r4, #12]
 800dea2:	4628      	mov	r0, r5
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	f7ff ffa9 	bl	800ddfc <uxr_common_create_entity>
 800deaa:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800deae:	bd70      	pop	{r4, r5, r6, pc}
 800deb0:	f88d 301c 	strb.w	r3, [sp, #28]
 800deb4:	e7e5      	b.n	800de82 <uxr_buffer_create_participant_bin+0x2e>
 800deb6:	bf00      	nop

0800deb8 <uxr_buffer_create_topic_bin>:
 800deb8:	b570      	push	{r4, r5, r6, lr}
 800deba:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800debe:	4605      	mov	r5, r0
 800dec0:	9105      	str	r1, [sp, #20]
 800dec2:	4618      	mov	r0, r3
 800dec4:	a997      	add	r1, sp, #604	@ 0x25c
 800dec6:	2302      	movs	r3, #2
 800dec8:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800decc:	9204      	str	r2, [sp, #16]
 800dece:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800ded2:	f000 f99f 	bl	800e214 <uxr_object_id_to_raw>
 800ded6:	2303      	movs	r3, #3
 800ded8:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800dedc:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800dede:	9306      	str	r3, [sp, #24]
 800dee0:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800dee2:	930a      	str	r3, [sp, #40]	@ 0x28
 800dee4:	2301      	movs	r3, #1
 800dee6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800deea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800deee:	2300      	movs	r3, #0
 800def0:	a917      	add	r1, sp, #92	@ 0x5c
 800def2:	a80b      	add	r0, sp, #44	@ 0x2c
 800def4:	f88d 301c 	strb.w	r3, [sp, #28]
 800def8:	f7fa ffd6 	bl	8008ea8 <ucdr_init_buffer>
 800defc:	a906      	add	r1, sp, #24
 800defe:	a80b      	add	r0, sp, #44	@ 0x2c
 800df00:	f002 fcf8 	bl	80108f4 <uxr_serialize_OBJK_Topic_Binary>
 800df04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df06:	9316      	str	r3, [sp, #88]	@ 0x58
 800df08:	ac13      	add	r4, sp, #76	@ 0x4c
 800df0a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800df0e:	9600      	str	r6, [sp, #0]
 800df10:	9401      	str	r4, [sp, #4]
 800df12:	b29b      	uxth	r3, r3
 800df14:	4628      	mov	r0, r5
 800df16:	f7ff ff71 	bl	800ddfc <uxr_common_create_entity>
 800df1a:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800df1e:	bd70      	pop	{r4, r5, r6, pc}

0800df20 <uxr_buffer_create_subscriber_bin>:
 800df20:	b570      	push	{r4, r5, r6, lr}
 800df22:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800df26:	4605      	mov	r5, r0
 800df28:	9105      	str	r1, [sp, #20]
 800df2a:	4618      	mov	r0, r3
 800df2c:	a992      	add	r1, sp, #584	@ 0x248
 800df2e:	2304      	movs	r3, #4
 800df30:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800df34:	9204      	str	r2, [sp, #16]
 800df36:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800df3a:	f000 f96b 	bl	800e214 <uxr_object_id_to_raw>
 800df3e:	2203      	movs	r2, #3
 800df40:	2300      	movs	r3, #0
 800df42:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
 800df46:	a912      	add	r1, sp, #72	@ 0x48
 800df48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df4c:	a806      	add	r0, sp, #24
 800df4e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800df52:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800df56:	f7fa ffa7 	bl	8008ea8 <ucdr_init_buffer>
 800df5a:	a993      	add	r1, sp, #588	@ 0x24c
 800df5c:	a806      	add	r0, sp, #24
 800df5e:	f002 fd7f 	bl	8010a60 <uxr_serialize_OBJK_Subscriber_Binary>
 800df62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df64:	9311      	str	r3, [sp, #68]	@ 0x44
 800df66:	ac0e      	add	r4, sp, #56	@ 0x38
 800df68:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800df6c:	9600      	str	r6, [sp, #0]
 800df6e:	9401      	str	r4, [sp, #4]
 800df70:	b29b      	uxth	r3, r3
 800df72:	4628      	mov	r0, r5
 800df74:	f7ff ff42 	bl	800ddfc <uxr_common_create_entity>
 800df78:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800df7c:	bd70      	pop	{r4, r5, r6, pc}
 800df7e:	bf00      	nop

0800df80 <uxr_buffer_create_datareader_bin>:
 800df80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df82:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 800df86:	ac1f      	add	r4, sp, #124	@ 0x7c
 800df88:	9105      	str	r1, [sp, #20]
 800df8a:	4605      	mov	r5, r0
 800df8c:	a9a3      	add	r1, sp, #652	@ 0x28c
 800df8e:	4618      	mov	r0, r3
 800df90:	2306      	movs	r3, #6
 800df92:	f8bd 72b0 	ldrh.w	r7, [sp, #688]	@ 0x2b0
 800df96:	9204      	str	r2, [sp, #16]
 800df98:	7123      	strb	r3, [r4, #4]
 800df9a:	f89d 62b4 	ldrb.w	r6, [sp, #692]	@ 0x2b4
 800df9e:	f000 f939 	bl	800e214 <uxr_object_id_to_raw>
 800dfa2:	2303      	movs	r3, #3
 800dfa4:	a90e      	add	r1, sp, #56	@ 0x38
 800dfa6:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800dfa8:	7223      	strb	r3, [r4, #8]
 800dfaa:	f000 f933 	bl	800e214 <uxr_object_id_to_raw>
 800dfae:	f89d 32ad 	ldrb.w	r3, [sp, #685]	@ 0x2ad
 800dfb2:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	3f00      	subs	r7, #0
 800dfba:	fab3 f383 	clz	r3, r3
 800dfbe:	f89d 12ae 	ldrb.w	r1, [sp, #686]	@ 0x2ae
 800dfc2:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 800dfc6:	bf18      	it	ne
 800dfc8:	2701      	movne	r7, #1
 800dfca:	095b      	lsrs	r3, r3, #5
 800dfcc:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800dfd0:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800dfd4:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800dfd8:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800dfdc:	2201      	movs	r2, #1
 800dfde:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800dfe2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800dfe6:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800dfea:	b919      	cbnz	r1, 800dff4 <uxr_buffer_create_datareader_bin+0x74>
 800dfec:	f043 0302 	orr.w	r3, r3, #2
 800dff0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800dff4:	f89d 22ac 	ldrb.w	r2, [sp, #684]	@ 0x2ac
 800dff8:	2a01      	cmp	r2, #1
 800dffa:	d022      	beq.n	800e042 <uxr_buffer_create_datareader_bin+0xc2>
 800dffc:	2a03      	cmp	r2, #3
 800dffe:	d01b      	beq.n	800e038 <uxr_buffer_create_datareader_bin+0xb8>
 800e000:	b91a      	cbnz	r2, 800e00a <uxr_buffer_create_datareader_bin+0x8a>
 800e002:	f043 0308 	orr.w	r3, r3, #8
 800e006:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e00a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e00e:	a923      	add	r1, sp, #140	@ 0x8c
 800e010:	a806      	add	r0, sp, #24
 800e012:	f7fa ff49 	bl	8008ea8 <ucdr_init_buffer>
 800e016:	a90e      	add	r1, sp, #56	@ 0x38
 800e018:	a806      	add	r0, sp, #24
 800e01a:	f002 fd87 	bl	8010b2c <uxr_serialize_OBJK_DataReader_Binary>
 800e01e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e020:	9600      	str	r6, [sp, #0]
 800e022:	9401      	str	r4, [sp, #4]
 800e024:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e028:	60e3      	str	r3, [r4, #12]
 800e02a:	4628      	mov	r0, r5
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	f7ff fee5 	bl	800ddfc <uxr_common_create_entity>
 800e032:	f50d 7d25 	add.w	sp, sp, #660	@ 0x294
 800e036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e038:	f043 0320 	orr.w	r3, r3, #32
 800e03c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e040:	e7e3      	b.n	800e00a <uxr_buffer_create_datareader_bin+0x8a>
 800e042:	f043 0310 	orr.w	r3, r3, #16
 800e046:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e04a:	e7de      	b.n	800e00a <uxr_buffer_create_datareader_bin+0x8a>

0800e04c <get_custom_error>:
 800e04c:	4b01      	ldr	r3, [pc, #4]	@ (800e054 <get_custom_error+0x8>)
 800e04e:	7818      	ldrb	r0, [r3, #0]
 800e050:	4770      	bx	lr
 800e052:	bf00      	nop
 800e054:	2000db86 	.word	0x2000db86

0800e058 <recv_custom_msg>:
 800e058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e05c:	b089      	sub	sp, #36	@ 0x24
 800e05e:	4693      	mov	fp, r2
 800e060:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800e064:	9104      	str	r1, [sp, #16]
 800e066:	2100      	movs	r1, #0
 800e068:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800e06c:	9305      	str	r3, [sp, #20]
 800e06e:	4604      	mov	r4, r0
 800e070:	f88d 101e 	strb.w	r1, [sp, #30]
 800e074:	b332      	cbz	r2, 800e0c4 <recv_custom_msg+0x6c>
 800e076:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 800e07a:	f10d 091f 	add.w	r9, sp, #31
 800e07e:	f10d 0814 	add.w	r8, sp, #20
 800e082:	f10d 071e 	add.w	r7, sp, #30
 800e086:	f44f 7600 	mov.w	r6, #512	@ 0x200
 800e08a:	e004      	b.n	800e096 <recv_custom_msg+0x3e>
 800e08c:	9b05      	ldr	r3, [sp, #20]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	dd10      	ble.n	800e0b4 <recv_custom_msg+0x5c>
 800e092:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 800e096:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e09a:	e9cd 6700 	strd	r6, r7, [sp]
 800e09e:	4623      	mov	r3, r4
 800e0a0:	4622      	mov	r2, r4
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	4650      	mov	r0, sl
 800e0a6:	f001 fc37 	bl	800f918 <uxr_read_framed_msg>
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	d0ee      	beq.n	800e08c <recv_custom_msg+0x34>
 800e0ae:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e0b2:	b1a3      	cbz	r3, 800e0de <recv_custom_msg+0x86>
 800e0b4:	4b0e      	ldr	r3, [pc, #56]	@ (800e0f0 <recv_custom_msg+0x98>)
 800e0b6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e0ba:	701a      	strb	r2, [r3, #0]
 800e0bc:	2000      	movs	r0, #0
 800e0be:	b009      	add	sp, #36	@ 0x24
 800e0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0c4:	f10d 021f 	add.w	r2, sp, #31
 800e0c8:	9200      	str	r2, [sp, #0]
 800e0ca:	4601      	mov	r1, r0
 800e0cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e0d0:	47a8      	blx	r5
 800e0d2:	2800      	cmp	r0, #0
 800e0d4:	d0ee      	beq.n	800e0b4 <recv_custom_msg+0x5c>
 800e0d6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d1ea      	bne.n	800e0b4 <recv_custom_msg+0x5c>
 800e0de:	9b04      	ldr	r3, [sp, #16]
 800e0e0:	f8cb 0000 	str.w	r0, [fp]
 800e0e4:	2001      	movs	r0, #1
 800e0e6:	601c      	str	r4, [r3, #0]
 800e0e8:	b009      	add	sp, #36	@ 0x24
 800e0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ee:	bf00      	nop
 800e0f0:	2000db86 	.word	0x2000db86

0800e0f4 <send_custom_msg>:
 800e0f4:	b570      	push	{r4, r5, r6, lr}
 800e0f6:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800e0fa:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800e0fe:	b086      	sub	sp, #24
 800e100:	4616      	mov	r6, r2
 800e102:	b965      	cbnz	r5, 800e11e <send_custom_msg+0x2a>
 800e104:	f10d 0317 	add.w	r3, sp, #23
 800e108:	47a0      	blx	r4
 800e10a:	b108      	cbz	r0, 800e110 <send_custom_msg+0x1c>
 800e10c:	42b0      	cmp	r0, r6
 800e10e:	d014      	beq.n	800e13a <send_custom_msg+0x46>
 800e110:	4b0b      	ldr	r3, [pc, #44]	@ (800e140 <send_custom_msg+0x4c>)
 800e112:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e116:	701a      	strb	r2, [r3, #0]
 800e118:	2000      	movs	r0, #0
 800e11a:	b006      	add	sp, #24
 800e11c:	bd70      	pop	{r4, r5, r6, pc}
 800e11e:	f10d 0217 	add.w	r2, sp, #23
 800e122:	9202      	str	r2, [sp, #8]
 800e124:	2200      	movs	r2, #0
 800e126:	e9cd 6200 	strd	r6, r2, [sp]
 800e12a:	460b      	mov	r3, r1
 800e12c:	4602      	mov	r2, r0
 800e12e:	4621      	mov	r1, r4
 800e130:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800e134:	f001 fa12 	bl	800f55c <uxr_write_framed_msg>
 800e138:	e7e7      	b.n	800e10a <send_custom_msg+0x16>
 800e13a:	2001      	movs	r0, #1
 800e13c:	b006      	add	sp, #24
 800e13e:	bd70      	pop	{r4, r5, r6, pc}
 800e140:	2000db86 	.word	0x2000db86

0800e144 <uxr_set_custom_transport_callbacks>:
 800e144:	b410      	push	{r4}
 800e146:	9c01      	ldr	r4, [sp, #4]
 800e148:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800e14c:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800e150:	9b02      	ldr	r3, [sp, #8]
 800e152:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800e156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e15a:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800e15e:	4770      	bx	lr

0800e160 <uxr_init_custom_transport>:
 800e160:	b538      	push	{r3, r4, r5, lr}
 800e162:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800e166:	b303      	cbz	r3, 800e1aa <uxr_init_custom_transport+0x4a>
 800e168:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800e16c:	4604      	mov	r4, r0
 800e16e:	b1e2      	cbz	r2, 800e1aa <uxr_init_custom_transport+0x4a>
 800e170:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800e174:	b1ca      	cbz	r2, 800e1aa <uxr_init_custom_transport+0x4a>
 800e176:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800e17a:	b1b2      	cbz	r2, 800e1aa <uxr_init_custom_transport+0x4a>
 800e17c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800e180:	4798      	blx	r3
 800e182:	4605      	mov	r5, r0
 800e184:	b188      	cbz	r0, 800e1aa <uxr_init_custom_transport+0x4a>
 800e186:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800e18a:	b98b      	cbnz	r3, 800e1b0 <uxr_init_custom_transport+0x50>
 800e18c:	490b      	ldr	r1, [pc, #44]	@ (800e1bc <uxr_init_custom_transport+0x5c>)
 800e18e:	4b0c      	ldr	r3, [pc, #48]	@ (800e1c0 <uxr_init_custom_transport+0x60>)
 800e190:	4a0c      	ldr	r2, [pc, #48]	@ (800e1c4 <uxr_init_custom_transport+0x64>)
 800e192:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800e196:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e19a:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800e19e:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800e1a2:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	bd38      	pop	{r3, r4, r5, pc}
 800e1aa:	2500      	movs	r5, #0
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	bd38      	pop	{r3, r4, r5, pc}
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800e1b6:	f001 f9cb 	bl	800f550 <uxr_init_framing_io>
 800e1ba:	e7e7      	b.n	800e18c <uxr_init_custom_transport+0x2c>
 800e1bc:	0800e0f5 	.word	0x0800e0f5
 800e1c0:	0800e059 	.word	0x0800e059
 800e1c4:	0800e04d 	.word	0x0800e04d

0800e1c8 <uxr_close_custom_transport>:
 800e1c8:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800e1cc:	4718      	bx	r3
 800e1ce:	bf00      	nop

0800e1d0 <uxr_object_id>:
 800e1d0:	b082      	sub	sp, #8
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	f88d 1006 	strb.w	r1, [sp, #6]
 800e1d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e1dc:	f360 030f 	bfi	r3, r0, #0, #16
 800e1e0:	f362 431f 	bfi	r3, r2, #16, #16
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	b002      	add	sp, #8
 800e1e8:	4770      	bx	lr
 800e1ea:	bf00      	nop

0800e1ec <uxr_object_id_from_raw>:
 800e1ec:	7843      	ldrb	r3, [r0, #1]
 800e1ee:	7801      	ldrb	r1, [r0, #0]
 800e1f0:	b082      	sub	sp, #8
 800e1f2:	f003 020f 	and.w	r2, r3, #15
 800e1f6:	f88d 2006 	strb.w	r2, [sp, #6]
 800e1fa:	091b      	lsrs	r3, r3, #4
 800e1fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e200:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800e204:	2000      	movs	r0, #0
 800e206:	f363 000f 	bfi	r0, r3, #0, #16
 800e20a:	f362 401f 	bfi	r0, r2, #16, #16
 800e20e:	b002      	add	sp, #8
 800e210:	4770      	bx	lr
 800e212:	bf00      	nop

0800e214 <uxr_object_id_to_raw>:
 800e214:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800e218:	b082      	sub	sp, #8
 800e21a:	f3c0 120b 	ubfx	r2, r0, #4, #12
 800e21e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800e222:	700a      	strb	r2, [r1, #0]
 800e224:	704b      	strb	r3, [r1, #1]
 800e226:	b002      	add	sp, #8
 800e228:	4770      	bx	lr
 800e22a:	bf00      	nop

0800e22c <uxr_buffer_request_data>:
 800e22c:	b530      	push	{r4, r5, lr}
 800e22e:	b095      	sub	sp, #84	@ 0x54
 800e230:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800e234:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800e236:	f88d 301c 	strb.w	r3, [sp, #28]
 800e23a:	2200      	movs	r2, #0
 800e23c:	2d00      	cmp	r5, #0
 800e23e:	bf14      	ite	ne
 800e240:	2101      	movne	r1, #1
 800e242:	4611      	moveq	r1, r2
 800e244:	4604      	mov	r4, r0
 800e246:	f88d 201d 	strb.w	r2, [sp, #29]
 800e24a:	f88d 201e 	strb.w	r2, [sp, #30]
 800e24e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800e252:	d021      	beq.n	800e298 <uxr_buffer_request_data+0x6c>
 800e254:	682a      	ldr	r2, [r5, #0]
 800e256:	686b      	ldr	r3, [r5, #4]
 800e258:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800e25c:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800e260:	2210      	movs	r2, #16
 800e262:	2308      	movs	r3, #8
 800e264:	2100      	movs	r1, #0
 800e266:	e9cd 3100 	strd	r3, r1, [sp]
 800e26a:	4620      	mov	r0, r4
 800e26c:	9905      	ldr	r1, [sp, #20]
 800e26e:	ab0c      	add	r3, sp, #48	@ 0x30
 800e270:	f001 f806 	bl	800f280 <uxr_prepare_stream_to_write_submessage>
 800e274:	b918      	cbnz	r0, 800e27e <uxr_buffer_request_data+0x52>
 800e276:	4604      	mov	r4, r0
 800e278:	4620      	mov	r0, r4
 800e27a:	b015      	add	sp, #84	@ 0x54
 800e27c:	bd30      	pop	{r4, r5, pc}
 800e27e:	9904      	ldr	r1, [sp, #16]
 800e280:	aa06      	add	r2, sp, #24
 800e282:	4620      	mov	r0, r4
 800e284:	f001 f936 	bl	800f4f4 <uxr_init_base_object_request>
 800e288:	a906      	add	r1, sp, #24
 800e28a:	4604      	mov	r4, r0
 800e28c:	a80c      	add	r0, sp, #48	@ 0x30
 800e28e:	f002 ff75 	bl	801117c <uxr_serialize_READ_DATA_Payload>
 800e292:	4620      	mov	r0, r4
 800e294:	b015      	add	sp, #84	@ 0x54
 800e296:	bd30      	pop	{r4, r5, pc}
 800e298:	2208      	movs	r2, #8
 800e29a:	e7e2      	b.n	800e262 <uxr_buffer_request_data+0x36>

0800e29c <uxr_buffer_cancel_data>:
 800e29c:	b510      	push	{r4, lr}
 800e29e:	b094      	sub	sp, #80	@ 0x50
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	9301      	str	r3, [sp, #4]
 800e2a4:	9205      	str	r2, [sp, #20]
 800e2a6:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	f88d 301e 	strb.w	r3, [sp, #30]
 800e2b0:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800e2b4:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800e2b8:	2308      	movs	r3, #8
 800e2ba:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800e2be:	9300      	str	r3, [sp, #0]
 800e2c0:	2210      	movs	r2, #16
 800e2c2:	ab0c      	add	r3, sp, #48	@ 0x30
 800e2c4:	4604      	mov	r4, r0
 800e2c6:	f000 ffdb 	bl	800f280 <uxr_prepare_stream_to_write_submessage>
 800e2ca:	b918      	cbnz	r0, 800e2d4 <uxr_buffer_cancel_data+0x38>
 800e2cc:	4604      	mov	r4, r0
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	b014      	add	sp, #80	@ 0x50
 800e2d2:	bd10      	pop	{r4, pc}
 800e2d4:	9905      	ldr	r1, [sp, #20]
 800e2d6:	aa06      	add	r2, sp, #24
 800e2d8:	4620      	mov	r0, r4
 800e2da:	f001 f90b 	bl	800f4f4 <uxr_init_base_object_request>
 800e2de:	a906      	add	r1, sp, #24
 800e2e0:	4604      	mov	r4, r0
 800e2e2:	a80c      	add	r0, sp, #48	@ 0x30
 800e2e4:	f002 ff4a 	bl	801117c <uxr_serialize_READ_DATA_Payload>
 800e2e8:	4620      	mov	r0, r4
 800e2ea:	b014      	add	sp, #80	@ 0x50
 800e2ec:	bd10      	pop	{r4, pc}
 800e2ee:	bf00      	nop

0800e2f0 <read_submessage_format>:
 800e2f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2f4:	b095      	sub	sp, #84	@ 0x54
 800e2f6:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 800e2fa:	b113      	cbz	r3, 800e302 <read_submessage_format+0x12>
 800e2fc:	b015      	add	sp, #84	@ 0x54
 800e2fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e302:	460c      	mov	r4, r1
 800e304:	4616      	mov	r6, r2
 800e306:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800e30a:	461d      	mov	r5, r3
 800e30c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800e30e:	9304      	str	r3, [sp, #16]
 800e310:	1a52      	subs	r2, r2, r1
 800e312:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e314:	9305      	str	r3, [sp, #20]
 800e316:	4680      	mov	r8, r0
 800e318:	a80c      	add	r0, sp, #48	@ 0x30
 800e31a:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 800e31e:	f7fa fdc3 	bl	8008ea8 <ucdr_init_buffer>
 800e322:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e326:	a80c      	add	r0, sp, #48	@ 0x30
 800e328:	f7fa fd92 	bl	8008e50 <ucdr_set_on_full_buffer_callback>
 800e32c:	69e3      	ldr	r3, [r4, #28]
 800e32e:	b35b      	cbz	r3, 800e388 <read_submessage_format+0x98>
 800e330:	f1b9 0f07 	cmp.w	r9, #7
 800e334:	751d      	strb	r5, [r3, #20]
 800e336:	d043      	beq.n	800e3c0 <read_submessage_format+0xd0>
 800e338:	f1b9 0f08 	cmp.w	r9, #8
 800e33c:	d032      	beq.n	800e3a4 <read_submessage_format+0xb4>
 800e33e:	f1b9 0f06 	cmp.w	r9, #6
 800e342:	d008      	beq.n	800e356 <read_submessage_format+0x66>
 800e344:	2201      	movs	r2, #1
 800e346:	751a      	strb	r2, [r3, #20]
 800e348:	4631      	mov	r1, r6
 800e34a:	4620      	mov	r0, r4
 800e34c:	f7fa fdfc 	bl	8008f48 <ucdr_advance_buffer>
 800e350:	b015      	add	sp, #84	@ 0x54
 800e352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e356:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 800e35a:	2d00      	cmp	r5, #0
 800e35c:	d0f2      	beq.n	800e344 <read_submessage_format+0x54>
 800e35e:	ab0c      	add	r3, sp, #48	@ 0x30
 800e360:	e9cd 3600 	strd	r3, r6, [sp]
 800e364:	2306      	movs	r3, #6
 800e366:	f88d 3016 	strb.w	r3, [sp, #22]
 800e36a:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 800e36e:	9302      	str	r3, [sp, #8]
 800e370:	463a      	mov	r2, r7
 800e372:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800e376:	4640      	mov	r0, r8
 800e378:	47a8      	blx	r5
 800e37a:	69e3      	ldr	r3, [r4, #28]
 800e37c:	2201      	movs	r2, #1
 800e37e:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 800e382:	2b00      	cmp	r3, #0
 800e384:	d1de      	bne.n	800e344 <read_submessage_format+0x54>
 800e386:	e7df      	b.n	800e348 <read_submessage_format+0x58>
 800e388:	f1b9 0f07 	cmp.w	r9, #7
 800e38c:	d032      	beq.n	800e3f4 <read_submessage_format+0x104>
 800e38e:	f1b9 0f08 	cmp.w	r9, #8
 800e392:	d02a      	beq.n	800e3ea <read_submessage_format+0xfa>
 800e394:	f1b9 0f06 	cmp.w	r9, #6
 800e398:	d1d6      	bne.n	800e348 <read_submessage_format+0x58>
 800e39a:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 800e39e:	2d00      	cmp	r5, #0
 800e3a0:	d1dd      	bne.n	800e35e <read_submessage_format+0x6e>
 800e3a2:	e7d1      	b.n	800e348 <read_submessage_format+0x58>
 800e3a4:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 800e3a8:	2a00      	cmp	r2, #0
 800e3aa:	d0cb      	beq.n	800e344 <read_submessage_format+0x54>
 800e3ac:	a906      	add	r1, sp, #24
 800e3ae:	a80c      	add	r0, sp, #48	@ 0x30
 800e3b0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e3b2:	f002 ffa9 	bl	8011308 <uxr_deserialize_SampleIdentity>
 800e3b6:	bb28      	cbnz	r0, 800e404 <read_submessage_format+0x114>
 800e3b8:	69e3      	ldr	r3, [r4, #28]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d1c2      	bne.n	800e344 <read_submessage_format+0x54>
 800e3be:	e7c3      	b.n	800e348 <read_submessage_format+0x58>
 800e3c0:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 800e3c4:	b16a      	cbz	r2, 800e3e2 <read_submessage_format+0xf2>
 800e3c6:	a906      	add	r1, sp, #24
 800e3c8:	a80c      	add	r0, sp, #48	@ 0x30
 800e3ca:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e3cc:	f002 fc8a 	bl	8010ce4 <uxr_deserialize_BaseObjectRequest>
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	d13a      	bne.n	800e44a <read_submessage_format+0x15a>
 800e3d4:	68a2      	ldr	r2, [r4, #8]
 800e3d6:	69e3      	ldr	r3, [r4, #28]
 800e3d8:	4432      	add	r2, r6
 800e3da:	60a2      	str	r2, [r4, #8]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d1b1      	bne.n	800e344 <read_submessage_format+0x54>
 800e3e0:	e7b2      	b.n	800e348 <read_submessage_format+0x58>
 800e3e2:	68a2      	ldr	r2, [r4, #8]
 800e3e4:	4432      	add	r2, r6
 800e3e6:	60a2      	str	r2, [r4, #8]
 800e3e8:	e7ac      	b.n	800e344 <read_submessage_format+0x54>
 800e3ea:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d1dc      	bne.n	800e3ac <read_submessage_format+0xbc>
 800e3f2:	e7a9      	b.n	800e348 <read_submessage_format+0x58>
 800e3f4:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d1e4      	bne.n	800e3c6 <read_submessage_format+0xd6>
 800e3fc:	68a3      	ldr	r3, [r4, #8]
 800e3fe:	4433      	add	r3, r6
 800e400:	60a3      	str	r3, [r4, #8]
 800e402:	e7a1      	b.n	800e348 <read_submessage_format+0x58>
 800e404:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e408:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e40a:	1a52      	subs	r2, r2, r1
 800e40c:	1aed      	subs	r5, r5, r3
 800e40e:	a80c      	add	r0, sp, #48	@ 0x30
 800e410:	f7fa fd4a 	bl	8008ea8 <ucdr_init_buffer>
 800e414:	4435      	add	r5, r6
 800e416:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e41a:	a80c      	add	r0, sp, #48	@ 0x30
 800e41c:	f7fa fd18 	bl	8008e50 <ucdr_set_on_full_buffer_callback>
 800e420:	b2ad      	uxth	r5, r5
 800e422:	ab0c      	add	r3, sp, #48	@ 0x30
 800e424:	9300      	str	r3, [sp, #0]
 800e426:	9501      	str	r5, [sp, #4]
 800e428:	2108      	movs	r1, #8
 800e42a:	f88d 1016 	strb.w	r1, [sp, #22]
 800e42e:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 800e432:	9102      	str	r1, [sp, #8]
 800e434:	ab06      	add	r3, sp, #24
 800e436:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 800e43a:	9905      	ldr	r1, [sp, #20]
 800e43c:	463a      	mov	r2, r7
 800e43e:	4640      	mov	r0, r8
 800e440:	47a8      	blx	r5
 800e442:	2301      	movs	r3, #1
 800e444:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 800e448:	e7b6      	b.n	800e3b8 <read_submessage_format+0xc8>
 800e44a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e44e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e450:	1a52      	subs	r2, r2, r1
 800e452:	1aed      	subs	r5, r5, r3
 800e454:	a80c      	add	r0, sp, #48	@ 0x30
 800e456:	f7fa fd27 	bl	8008ea8 <ucdr_init_buffer>
 800e45a:	4435      	add	r5, r6
 800e45c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e460:	a80c      	add	r0, sp, #48	@ 0x30
 800e462:	f7fa fcf5 	bl	8008e50 <ucdr_set_on_full_buffer_callback>
 800e466:	b2ad      	uxth	r5, r5
 800e468:	ab0c      	add	r3, sp, #48	@ 0x30
 800e46a:	9300      	str	r3, [sp, #0]
 800e46c:	9501      	str	r5, [sp, #4]
 800e46e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800e472:	2107      	movs	r1, #7
 800e474:	f88d 1016 	strb.w	r1, [sp, #22]
 800e478:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 800e47c:	9102      	str	r1, [sp, #8]
 800e47e:	ba5b      	rev16	r3, r3
 800e480:	b29b      	uxth	r3, r3
 800e482:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 800e486:	9905      	ldr	r1, [sp, #20]
 800e488:	463a      	mov	r2, r7
 800e48a:	4640      	mov	r0, r8
 800e48c:	47a8      	blx	r5
 800e48e:	2301      	movs	r3, #1
 800e490:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 800e494:	e79e      	b.n	800e3d4 <read_submessage_format+0xe4>
 800e496:	bf00      	nop

0800e498 <on_get_fragmentation_info>:
 800e498:	b500      	push	{lr}
 800e49a:	b08b      	sub	sp, #44	@ 0x2c
 800e49c:	4601      	mov	r1, r0
 800e49e:	2204      	movs	r2, #4
 800e4a0:	a802      	add	r0, sp, #8
 800e4a2:	f7fa fd01 	bl	8008ea8 <ucdr_init_buffer>
 800e4a6:	f10d 0305 	add.w	r3, sp, #5
 800e4aa:	f10d 0206 	add.w	r2, sp, #6
 800e4ae:	a901      	add	r1, sp, #4
 800e4b0:	a802      	add	r0, sp, #8
 800e4b2:	f001 fde9 	bl	8010088 <uxr_read_submessage_header>
 800e4b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e4ba:	2b0d      	cmp	r3, #13
 800e4bc:	d003      	beq.n	800e4c6 <on_get_fragmentation_info+0x2e>
 800e4be:	2000      	movs	r0, #0
 800e4c0:	b00b      	add	sp, #44	@ 0x2c
 800e4c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e4ca:	f013 0f02 	tst.w	r3, #2
 800e4ce:	bf0c      	ite	eq
 800e4d0:	2001      	moveq	r0, #1
 800e4d2:	2002      	movne	r0, #2
 800e4d4:	b00b      	add	sp, #44	@ 0x2c
 800e4d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4da:	bf00      	nop

0800e4dc <read_submessage_get_info>:
 800e4dc:	b570      	push	{r4, r5, r6, lr}
 800e4de:	2500      	movs	r5, #0
 800e4e0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800e4e4:	4604      	mov	r4, r0
 800e4e6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800e4ea:	460e      	mov	r6, r1
 800e4ec:	a810      	add	r0, sp, #64	@ 0x40
 800e4ee:	4629      	mov	r1, r5
 800e4f0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800e4f4:	f005 fa3e 	bl	8013974 <memset>
 800e4f8:	a903      	add	r1, sp, #12
 800e4fa:	4630      	mov	r0, r6
 800e4fc:	f002 fd80 	bl	8011000 <uxr_deserialize_GET_INFO_Payload>
 800e500:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e504:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e508:	4620      	mov	r0, r4
 800e50a:	f000 ffeb 	bl	800f4e4 <uxr_session_header_offset>
 800e50e:	462b      	mov	r3, r5
 800e510:	9000      	str	r0, [sp, #0]
 800e512:	220c      	movs	r2, #12
 800e514:	a905      	add	r1, sp, #20
 800e516:	a808      	add	r0, sp, #32
 800e518:	f7fa fcb4 	bl	8008e84 <ucdr_init_buffer_origin_offset>
 800e51c:	a910      	add	r1, sp, #64	@ 0x40
 800e51e:	a808      	add	r0, sp, #32
 800e520:	f002 fde0 	bl	80110e4 <uxr_serialize_INFO_Payload>
 800e524:	9b08      	ldr	r3, [sp, #32]
 800e526:	462a      	mov	r2, r5
 800e528:	4629      	mov	r1, r5
 800e52a:	4620      	mov	r0, r4
 800e52c:	f000 ff86 	bl	800f43c <uxr_stamp_session_header>
 800e530:	a808      	add	r0, sp, #32
 800e532:	f7fa fce5 	bl	8008f00 <ucdr_buffer_length>
 800e536:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e538:	4602      	mov	r2, r0
 800e53a:	a905      	add	r1, sp, #20
 800e53c:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e540:	47a0      	blx	r4
 800e542:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800e546:	bd70      	pop	{r4, r5, r6, pc}

0800e548 <write_submessage_acknack.isra.0>:
 800e548:	b570      	push	{r4, r5, r6, lr}
 800e54a:	b092      	sub	sp, #72	@ 0x48
 800e54c:	4605      	mov	r5, r0
 800e54e:	460e      	mov	r6, r1
 800e550:	4614      	mov	r4, r2
 800e552:	f000 ffc7 	bl	800f4e4 <uxr_session_header_offset>
 800e556:	a905      	add	r1, sp, #20
 800e558:	9000      	str	r0, [sp, #0]
 800e55a:	2300      	movs	r3, #0
 800e55c:	a80a      	add	r0, sp, #40	@ 0x28
 800e55e:	2211      	movs	r2, #17
 800e560:	f7fa fc90 	bl	8008e84 <ucdr_init_buffer_origin_offset>
 800e564:	2318      	movs	r3, #24
 800e566:	fb03 5404 	mla	r4, r3, r4, r5
 800e56a:	2205      	movs	r2, #5
 800e56c:	2300      	movs	r3, #0
 800e56e:	3450      	adds	r4, #80	@ 0x50
 800e570:	210a      	movs	r1, #10
 800e572:	a80a      	add	r0, sp, #40	@ 0x28
 800e574:	f001 fd6e 	bl	8010054 <uxr_buffer_submessage_header>
 800e578:	a903      	add	r1, sp, #12
 800e57a:	4620      	mov	r0, r4
 800e57c:	f004 fa54 	bl	8012a28 <uxr_compute_acknack>
 800e580:	ba40      	rev16	r0, r0
 800e582:	f8ad 000e 	strh.w	r0, [sp, #14]
 800e586:	a903      	add	r1, sp, #12
 800e588:	a80a      	add	r0, sp, #40	@ 0x28
 800e58a:	f88d 6010 	strb.w	r6, [sp, #16]
 800e58e:	f002 fe19 	bl	80111c4 <uxr_serialize_ACKNACK_Payload>
 800e592:	2200      	movs	r2, #0
 800e594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e596:	4611      	mov	r1, r2
 800e598:	4628      	mov	r0, r5
 800e59a:	f000 ff4f 	bl	800f43c <uxr_stamp_session_header>
 800e59e:	a80a      	add	r0, sp, #40	@ 0x28
 800e5a0:	f7fa fcae 	bl	8008f00 <ucdr_buffer_length>
 800e5a4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	a905      	add	r1, sp, #20
 800e5aa:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e5ae:	47a0      	blx	r4
 800e5b0:	b012      	add	sp, #72	@ 0x48
 800e5b2:	bd70      	pop	{r4, r5, r6, pc}
 800e5b4:	0000      	movs	r0, r0
	...

0800e5b8 <uxr_init_session>:
 800e5b8:	b510      	push	{r4, lr}
 800e5ba:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800e5f0 <uxr_init_session+0x38>
 800e5be:	2300      	movs	r3, #0
 800e5c0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800e5c4:	4604      	mov	r4, r0
 800e5c6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800e5ca:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800e5ce:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800e5d2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800e5d6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800e5da:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800e5de:	2181      	movs	r1, #129	@ 0x81
 800e5e0:	f000 fe90 	bl	800f304 <uxr_init_session_info>
 800e5e4:	f104 0008 	add.w	r0, r4, #8
 800e5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5ec:	f001 bc4e 	b.w	800fe8c <uxr_init_stream_storage>
	...

0800e5f8 <uxr_set_status_callback>:
 800e5f8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800e5fc:	4770      	bx	lr
 800e5fe:	bf00      	nop

0800e600 <uxr_set_topic_callback>:
 800e600:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800e604:	4770      	bx	lr
 800e606:	bf00      	nop

0800e608 <uxr_set_request_callback>:
 800e608:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800e60c:	4770      	bx	lr
 800e60e:	bf00      	nop

0800e610 <uxr_set_reply_callback>:
 800e610:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800e614:	4770      	bx	lr
 800e616:	bf00      	nop

0800e618 <uxr_create_output_best_effort_stream>:
 800e618:	b570      	push	{r4, r5, r6, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	4604      	mov	r4, r0
 800e61e:	460d      	mov	r5, r1
 800e620:	4616      	mov	r6, r2
 800e622:	f000 ff5f 	bl	800f4e4 <uxr_session_header_offset>
 800e626:	4632      	mov	r2, r6
 800e628:	4603      	mov	r3, r0
 800e62a:	4629      	mov	r1, r5
 800e62c:	f104 0008 	add.w	r0, r4, #8
 800e630:	b002      	add	sp, #8
 800e632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e636:	f001 bc73 	b.w	800ff20 <uxr_add_output_best_effort_buffer>
 800e63a:	bf00      	nop

0800e63c <uxr_create_output_reliable_stream>:
 800e63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e63e:	b085      	sub	sp, #20
 800e640:	4604      	mov	r4, r0
 800e642:	460d      	mov	r5, r1
 800e644:	4616      	mov	r6, r2
 800e646:	461f      	mov	r7, r3
 800e648:	f000 ff4c 	bl	800f4e4 <uxr_session_header_offset>
 800e64c:	463b      	mov	r3, r7
 800e64e:	9000      	str	r0, [sp, #0]
 800e650:	4632      	mov	r2, r6
 800e652:	4629      	mov	r1, r5
 800e654:	f104 0008 	add.w	r0, r4, #8
 800e658:	f001 fc76 	bl	800ff48 <uxr_add_output_reliable_buffer>
 800e65c:	b005      	add	sp, #20
 800e65e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e660 <uxr_create_input_best_effort_stream>:
 800e660:	b082      	sub	sp, #8
 800e662:	3008      	adds	r0, #8
 800e664:	b002      	add	sp, #8
 800e666:	f001 bc89 	b.w	800ff7c <uxr_add_input_best_effort_buffer>
 800e66a:	bf00      	nop

0800e66c <uxr_create_input_reliable_stream>:
 800e66c:	b510      	push	{r4, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	4c03      	ldr	r4, [pc, #12]	@ (800e680 <uxr_create_input_reliable_stream+0x14>)
 800e672:	9400      	str	r4, [sp, #0]
 800e674:	3008      	adds	r0, #8
 800e676:	f001 fc97 	bl	800ffa8 <uxr_add_input_reliable_buffer>
 800e67a:	b004      	add	sp, #16
 800e67c:	bd10      	pop	{r4, pc}
 800e67e:	bf00      	nop
 800e680:	0800e499 	.word	0x0800e499

0800e684 <uxr_epoch_nanos>:
 800e684:	b510      	push	{r4, lr}
 800e686:	4604      	mov	r4, r0
 800e688:	f001 fd44 	bl	8010114 <uxr_nanos>
 800e68c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800e690:	1ac0      	subs	r0, r0, r3
 800e692:	eb61 0102 	sbc.w	r1, r1, r2
 800e696:	bd10      	pop	{r4, pc}

0800e698 <uxr_flash_output_streams>:
 800e698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e69c:	7e03      	ldrb	r3, [r0, #24]
 800e69e:	b084      	sub	sp, #16
 800e6a0:	4604      	mov	r4, r0
 800e6a2:	b373      	cbz	r3, 800e702 <uxr_flash_output_streams+0x6a>
 800e6a4:	2500      	movs	r5, #0
 800e6a6:	f100 0908 	add.w	r9, r0, #8
 800e6aa:	f10d 0802 	add.w	r8, sp, #2
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	af03      	add	r7, sp, #12
 800e6b2:	ae02      	add	r6, sp, #8
 800e6b4:	e006      	b.n	800e6c4 <uxr_flash_output_streams+0x2c>
 800e6b6:	7e23      	ldrb	r3, [r4, #24]
 800e6b8:	3501      	adds	r5, #1
 800e6ba:	b2e8      	uxtb	r0, r5
 800e6bc:	4283      	cmp	r3, r0
 800e6be:	f109 0910 	add.w	r9, r9, #16
 800e6c2:	d91e      	bls.n	800e702 <uxr_flash_output_streams+0x6a>
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	4611      	mov	r1, r2
 800e6c8:	f001 fba8 	bl	800fe1c <uxr_stream_id>
 800e6cc:	4643      	mov	r3, r8
 800e6ce:	4684      	mov	ip, r0
 800e6d0:	463a      	mov	r2, r7
 800e6d2:	4631      	mov	r1, r6
 800e6d4:	4648      	mov	r0, r9
 800e6d6:	f8cd c004 	str.w	ip, [sp, #4]
 800e6da:	f004 fa29 	bl	8012b30 <uxr_prepare_best_effort_buffer_to_send>
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	d0e9      	beq.n	800e6b6 <uxr_flash_output_streams+0x1e>
 800e6e2:	9b02      	ldr	r3, [sp, #8]
 800e6e4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e6e8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	f000 fea5 	bl	800f43c <uxr_stamp_session_header>
 800e6f2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e6f4:	9a03      	ldr	r2, [sp, #12]
 800e6f6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800e6fa:	9902      	ldr	r1, [sp, #8]
 800e6fc:	6818      	ldr	r0, [r3, #0]
 800e6fe:	47d0      	blx	sl
 800e700:	e7d9      	b.n	800e6b6 <uxr_flash_output_streams+0x1e>
 800e702:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800e706:	b37b      	cbz	r3, 800e768 <uxr_flash_output_streams+0xd0>
 800e708:	f04f 0900 	mov.w	r9, #0
 800e70c:	f104 0520 	add.w	r5, r4, #32
 800e710:	f10d 0802 	add.w	r8, sp, #2
 800e714:	af03      	add	r7, sp, #12
 800e716:	ae02      	add	r6, sp, #8
 800e718:	4648      	mov	r0, r9
 800e71a:	2201      	movs	r2, #1
 800e71c:	2102      	movs	r1, #2
 800e71e:	f001 fb7d 	bl	800fe1c <uxr_stream_id>
 800e722:	9001      	str	r0, [sp, #4]
 800e724:	e00e      	b.n	800e744 <uxr_flash_output_streams+0xac>
 800e726:	9b02      	ldr	r3, [sp, #8]
 800e728:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e72c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e730:	4620      	mov	r0, r4
 800e732:	f000 fe83 	bl	800f43c <uxr_stamp_session_header>
 800e736:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e738:	9a03      	ldr	r2, [sp, #12]
 800e73a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800e73e:	9902      	ldr	r1, [sp, #8]
 800e740:	6818      	ldr	r0, [r3, #0]
 800e742:	47d0      	blx	sl
 800e744:	4643      	mov	r3, r8
 800e746:	463a      	mov	r2, r7
 800e748:	4631      	mov	r1, r6
 800e74a:	4628      	mov	r0, r5
 800e74c:	f004 fc04 	bl	8012f58 <uxr_prepare_next_reliable_buffer_to_send>
 800e750:	2800      	cmp	r0, #0
 800e752:	d1e8      	bne.n	800e726 <uxr_flash_output_streams+0x8e>
 800e754:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800e758:	f109 0901 	add.w	r9, r9, #1
 800e75c:	fa5f f089 	uxtb.w	r0, r9
 800e760:	4283      	cmp	r3, r0
 800e762:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 800e766:	d8d8      	bhi.n	800e71a <uxr_flash_output_streams+0x82>
 800e768:	b004      	add	sp, #16
 800e76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e76e:	bf00      	nop

0800e770 <read_submessage_info>:
 800e770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e774:	460d      	mov	r5, r1
 800e776:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800e77a:	4669      	mov	r1, sp
 800e77c:	4607      	mov	r7, r0
 800e77e:	4628      	mov	r0, r5
 800e780:	f002 fb4e 	bl	8010e20 <uxr_deserialize_BaseObjectReply>
 800e784:	a902      	add	r1, sp, #8
 800e786:	4604      	mov	r4, r0
 800e788:	4628      	mov	r0, r5
 800e78a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800e78e:	f7f9 fbc9 	bl	8007f24 <ucdr_deserialize_bool>
 800e792:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e796:	4004      	ands	r4, r0
 800e798:	b2e4      	uxtb	r4, r4
 800e79a:	b95b      	cbnz	r3, 800e7b4 <read_submessage_info+0x44>
 800e79c:	a987      	add	r1, sp, #540	@ 0x21c
 800e79e:	4628      	mov	r0, r5
 800e7a0:	f7f9 fbc0 	bl	8007f24 <ucdr_deserialize_bool>
 800e7a4:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800e7a8:	4606      	mov	r6, r0
 800e7aa:	b94b      	cbnz	r3, 800e7c0 <read_submessage_info+0x50>
 800e7ac:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800e7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7b4:	a903      	add	r1, sp, #12
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	f002 f9f4 	bl	8010ba4 <uxr_deserialize_ObjectVariant>
 800e7bc:	4004      	ands	r4, r0
 800e7be:	e7ed      	b.n	800e79c <read_submessage_info+0x2c>
 800e7c0:	a988      	add	r1, sp, #544	@ 0x220
 800e7c2:	4628      	mov	r0, r5
 800e7c4:	f7f9 fbdc 	bl	8007f80 <ucdr_deserialize_uint8_t>
 800e7c8:	4234      	tst	r4, r6
 800e7ca:	d0ef      	beq.n	800e7ac <read_submessage_info+0x3c>
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	d0ed      	beq.n	800e7ac <read_submessage_info+0x3c>
 800e7d0:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800e7d4:	2b0d      	cmp	r3, #13
 800e7d6:	d1e9      	bne.n	800e7ac <read_submessage_info+0x3c>
 800e7d8:	a98a      	add	r1, sp, #552	@ 0x228
 800e7da:	4628      	mov	r0, r5
 800e7dc:	f7fa f96c 	bl	8008ab8 <ucdr_deserialize_int16_t>
 800e7e0:	b140      	cbz	r0, 800e7f4 <read_submessage_info+0x84>
 800e7e2:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	dd07      	ble.n	800e7fa <read_submessage_info+0x8a>
 800e7ea:	f1b8 0f00 	cmp.w	r8, #0
 800e7ee:	bf0c      	ite	eq
 800e7f0:	2002      	moveq	r0, #2
 800e7f2:	2001      	movne	r0, #1
 800e7f4:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800e7f8:	e7d8      	b.n	800e7ac <read_submessage_info+0x3c>
 800e7fa:	2000      	movs	r0, #0
 800e7fc:	e7fa      	b.n	800e7f4 <read_submessage_info+0x84>
 800e7fe:	bf00      	nop

0800e800 <read_submessage_list>:
 800e800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e804:	b097      	sub	sp, #92	@ 0x5c
 800e806:	4604      	mov	r4, r0
 800e808:	460d      	mov	r5, r1
 800e80a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e80c:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800e810:	aa0c      	add	r2, sp, #48	@ 0x30
 800e812:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800e816:	4628      	mov	r0, r5
 800e818:	f001 fc36 	bl	8010088 <uxr_read_submessage_header>
 800e81c:	2800      	cmp	r0, #0
 800e81e:	f000 812c 	beq.w	800ea7a <read_submessage_list+0x27a>
 800e822:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 800e826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e828:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 800e82c:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 800e830:	3902      	subs	r1, #2
 800e832:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e836:	290d      	cmp	r1, #13
 800e838:	d8e8      	bhi.n	800e80c <read_submessage_list+0xc>
 800e83a:	a201      	add	r2, pc, #4	@ (adr r2, 800e840 <read_submessage_list+0x40>)
 800e83c:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800e840:	0800ea71 	.word	0x0800ea71
 800e844:	0800e80d 	.word	0x0800e80d
 800e848:	0800ea61 	.word	0x0800ea61
 800e84c:	0800ea03 	.word	0x0800ea03
 800e850:	0800e9f9 	.word	0x0800e9f9
 800e854:	0800e80d 	.word	0x0800e80d
 800e858:	0800e80d 	.word	0x0800e80d
 800e85c:	0800e97d 	.word	0x0800e97d
 800e860:	0800e915 	.word	0x0800e915
 800e864:	0800e8d5 	.word	0x0800e8d5
 800e868:	0800e80d 	.word	0x0800e80d
 800e86c:	0800e80d 	.word	0x0800e80d
 800e870:	0800e80d 	.word	0x0800e80d
 800e874:	0800e879 	.word	0x0800e879
 800e878:	a910      	add	r1, sp, #64	@ 0x40
 800e87a:	4628      	mov	r0, r5
 800e87c:	f002 fcf2 	bl	8011264 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800e880:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 800e884:	2e00      	cmp	r6, #0
 800e886:	f000 8100 	beq.w	800ea8a <read_submessage_list+0x28a>
 800e88a:	f001 fc43 	bl	8010114 <uxr_nanos>
 800e88e:	f04f 0800 	mov.w	r8, #0
 800e892:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800e894:	4602      	mov	r2, r0
 800e896:	460b      	mov	r3, r1
 800e898:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800e89a:	4990      	ldr	r1, [pc, #576]	@ (800eadc <read_submessage_list+0x2dc>)
 800e89c:	46c4      	mov	ip, r8
 800e89e:	fbc0 7c01 	smlal	r7, ip, r0, r1
 800e8a2:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800e8a6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e8a8:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800e8aa:	46c6      	mov	lr, r8
 800e8ac:	fbc0 7e01 	smlal	r7, lr, r0, r1
 800e8b0:	46bc      	mov	ip, r7
 800e8b2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800e8b6:	fbc0 7801 	smlal	r7, r8, r0, r1
 800e8ba:	e9cd ce02 	strd	ip, lr, [sp, #8]
 800e8be:	e9cd 7800 	strd	r7, r8, [sp]
 800e8c2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800e8c6:	9106      	str	r1, [sp, #24]
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	47b0      	blx	r6
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800e8d2:	e79b      	b.n	800e80c <read_submessage_list+0xc>
 800e8d4:	a910      	add	r1, sp, #64	@ 0x40
 800e8d6:	4628      	mov	r0, r5
 800e8d8:	f002 fcb2 	bl	8011240 <uxr_deserialize_HEARTBEAT_Payload>
 800e8dc:	2100      	movs	r1, #0
 800e8de:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800e8e2:	f001 fab7 	bl	800fe54 <uxr_stream_id_from_raw>
 800e8e6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e8ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e8ec:	4631      	mov	r1, r6
 800e8ee:	f104 0008 	add.w	r0, r4, #8
 800e8f2:	f001 fb8f 	bl	8010014 <uxr_get_input_reliable_stream>
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	d088      	beq.n	800e80c <read_submessage_list+0xc>
 800e8fa:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800e8fe:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800e902:	f004 f885 	bl	8012a10 <uxr_process_heartbeat>
 800e906:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800e90a:	4632      	mov	r2, r6
 800e90c:	4620      	mov	r0, r4
 800e90e:	f7ff fe1b 	bl	800e548 <write_submessage_acknack.isra.0>
 800e912:	e77b      	b.n	800e80c <read_submessage_list+0xc>
 800e914:	a910      	add	r1, sp, #64	@ 0x40
 800e916:	4628      	mov	r0, r5
 800e918:	f002 fc6a 	bl	80111f0 <uxr_deserialize_ACKNACK_Payload>
 800e91c:	2100      	movs	r1, #0
 800e91e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800e922:	f001 fa97 	bl	800fe54 <uxr_stream_id_from_raw>
 800e926:	900d      	str	r0, [sp, #52]	@ 0x34
 800e928:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800e92c:	f104 0008 	add.w	r0, r4, #8
 800e930:	f001 fb5c 	bl	800ffec <uxr_get_output_reliable_stream>
 800e934:	4606      	mov	r6, r0
 800e936:	2800      	cmp	r0, #0
 800e938:	f43f af68 	beq.w	800e80c <read_submessage_list+0xc>
 800e93c:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 800e940:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800e944:	ba49      	rev16	r1, r1
 800e946:	b289      	uxth	r1, r1
 800e948:	f004 fbb0 	bl	80130ac <uxr_process_acknack>
 800e94c:	4630      	mov	r0, r6
 800e94e:	f004 fb71 	bl	8013034 <uxr_begin_output_nack_buffer_it>
 800e952:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800e956:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800e95a:	e005      	b.n	800e968 <read_submessage_list+0x168>
 800e95c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e95e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e960:	685f      	ldr	r7, [r3, #4]
 800e962:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e964:	6818      	ldr	r0, [r3, #0]
 800e966:	47b8      	blx	r7
 800e968:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800e96c:	aa0f      	add	r2, sp, #60	@ 0x3c
 800e96e:	4641      	mov	r1, r8
 800e970:	4630      	mov	r0, r6
 800e972:	f004 fb61 	bl	8013038 <uxr_next_reliable_nack_buffer_to_send>
 800e976:	2800      	cmp	r0, #0
 800e978:	d1f0      	bne.n	800e95c <read_submessage_list+0x15c>
 800e97a:	e747      	b.n	800e80c <read_submessage_list+0xc>
 800e97c:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800e980:	4641      	mov	r1, r8
 800e982:	900d      	str	r0, [sp, #52]	@ 0x34
 800e984:	4628      	mov	r0, r5
 800e986:	f002 f9ad 	bl	8010ce4 <uxr_deserialize_BaseObjectRequest>
 800e98a:	3e04      	subs	r6, #4
 800e98c:	4640      	mov	r0, r8
 800e98e:	a90f      	add	r1, sp, #60	@ 0x3c
 800e990:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800e994:	f000 fdcc 	bl	800f530 <uxr_parse_base_object_request>
 800e998:	fa1f f886 	uxth.w	r8, r6
 800e99c:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800e9a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e9a2:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 800e9a6:	9110      	str	r1, [sp, #64]	@ 0x40
 800e9a8:	f007 070e 	and.w	r7, r7, #14
 800e9ac:	b136      	cbz	r6, 800e9bc <read_submessage_list+0x1bc>
 800e9ae:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e9b2:	9300      	str	r3, [sp, #0]
 800e9b4:	464a      	mov	r2, r9
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	4620      	mov	r0, r4
 800e9ba:	47b0      	blx	r6
 800e9bc:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800e9be:	b16b      	cbz	r3, 800e9dc <read_submessage_list+0x1dc>
 800e9c0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e9c2:	2100      	movs	r1, #0
 800e9c4:	3802      	subs	r0, #2
 800e9c6:	e002      	b.n	800e9ce <read_submessage_list+0x1ce>
 800e9c8:	3101      	adds	r1, #1
 800e9ca:	428b      	cmp	r3, r1
 800e9cc:	d006      	beq.n	800e9dc <read_submessage_list+0x1dc>
 800e9ce:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800e9d2:	454e      	cmp	r6, r9
 800e9d4:	d1f8      	bne.n	800e9c8 <read_submessage_list+0x1c8>
 800e9d6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800e9d8:	2200      	movs	r2, #0
 800e9da:	545a      	strb	r2, [r3, r1]
 800e9dc:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800e9e0:	9102      	str	r1, [sp, #8]
 800e9e2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e9e4:	9101      	str	r1, [sp, #4]
 800e9e6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e9e8:	9100      	str	r1, [sp, #0]
 800e9ea:	463b      	mov	r3, r7
 800e9ec:	4642      	mov	r2, r8
 800e9ee:	4629      	mov	r1, r5
 800e9f0:	4620      	mov	r0, r4
 800e9f2:	f7ff fc7d 	bl	800e2f0 <read_submessage_format>
 800e9f6:	e709      	b.n	800e80c <read_submessage_list+0xc>
 800e9f8:	4629      	mov	r1, r5
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	f7ff feb8 	bl	800e770 <read_submessage_info>
 800ea00:	e704      	b.n	800e80c <read_submessage_list+0xc>
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d03c      	beq.n	800ea80 <read_submessage_list+0x280>
 800ea06:	a910      	add	r1, sp, #64	@ 0x40
 800ea08:	4628      	mov	r0, r5
 800ea0a:	f002 fb4d 	bl	80110a8 <uxr_deserialize_STATUS_Payload>
 800ea0e:	a90e      	add	r1, sp, #56	@ 0x38
 800ea10:	a810      	add	r0, sp, #64	@ 0x40
 800ea12:	aa0d      	add	r2, sp, #52	@ 0x34
 800ea14:	f000 fd8c 	bl	800f530 <uxr_parse_base_object_request>
 800ea18:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800ea1c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ea1e:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 800ea22:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800ea26:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ea28:	b136      	cbz	r6, 800ea38 <read_submessage_list+0x238>
 800ea2a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ea2e:	9300      	str	r3, [sp, #0]
 800ea30:	463a      	mov	r2, r7
 800ea32:	4643      	mov	r3, r8
 800ea34:	4620      	mov	r0, r4
 800ea36:	47b0      	blx	r6
 800ea38:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800ea3a:	2a00      	cmp	r2, #0
 800ea3c:	f43f aee6 	beq.w	800e80c <read_submessage_list+0xc>
 800ea40:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800ea42:	2100      	movs	r1, #0
 800ea44:	3802      	subs	r0, #2
 800ea46:	e003      	b.n	800ea50 <read_submessage_list+0x250>
 800ea48:	3101      	adds	r1, #1
 800ea4a:	4291      	cmp	r1, r2
 800ea4c:	f43f aede 	beq.w	800e80c <read_submessage_list+0xc>
 800ea50:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800ea54:	42be      	cmp	r6, r7
 800ea56:	d1f7      	bne.n	800ea48 <read_submessage_list+0x248>
 800ea58:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ea5a:	f803 8001 	strb.w	r8, [r3, r1]
 800ea5e:	e6d5      	b.n	800e80c <read_submessage_list+0xc>
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	f47f aed3 	bne.w	800e80c <read_submessage_list+0xc>
 800ea66:	4629      	mov	r1, r5
 800ea68:	4620      	mov	r0, r4
 800ea6a:	f000 fca9 	bl	800f3c0 <uxr_read_create_session_status>
 800ea6e:	e6cd      	b.n	800e80c <read_submessage_list+0xc>
 800ea70:	4629      	mov	r1, r5
 800ea72:	4620      	mov	r0, r4
 800ea74:	f7ff fd32 	bl	800e4dc <read_submessage_get_info>
 800ea78:	e6c8      	b.n	800e80c <read_submessage_list+0xc>
 800ea7a:	b017      	add	sp, #92	@ 0x5c
 800ea7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea80:	4629      	mov	r1, r5
 800ea82:	4620      	mov	r0, r4
 800ea84:	f000 fcaa 	bl	800f3dc <uxr_read_delete_session_status>
 800ea88:	e6c0      	b.n	800e80c <read_submessage_list+0xc>
 800ea8a:	f001 fb43 	bl	8010114 <uxr_nanos>
 800ea8e:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 800ea92:	f8df c048 	ldr.w	ip, [pc, #72]	@ 800eadc <read_submessage_list+0x2dc>
 800ea96:	4633      	mov	r3, r6
 800ea98:	fbc7 230c 	smlal	r2, r3, r7, ip
 800ea9c:	1810      	adds	r0, r2, r0
 800ea9e:	eb43 0301 	adc.w	r3, r3, r1
 800eaa2:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 800eaa6:	46b6      	mov	lr, r6
 800eaa8:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 800eaac:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 800eab0:	fbc1 760c 	smlal	r7, r6, r1, ip
 800eab4:	19d2      	adds	r2, r2, r7
 800eab6:	eb4e 0106 	adc.w	r1, lr, r6
 800eaba:	1a80      	subs	r0, r0, r2
 800eabc:	eb63 0301 	sbc.w	r3, r3, r1
 800eac0:	0fda      	lsrs	r2, r3, #31
 800eac2:	1812      	adds	r2, r2, r0
 800eac4:	f143 0300 	adc.w	r3, r3, #0
 800eac8:	0852      	lsrs	r2, r2, #1
 800eaca:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800eace:	105b      	asrs	r3, r3, #1
 800ead0:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800ead4:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800ead8:	e6f8      	b.n	800e8cc <read_submessage_list+0xcc>
 800eada:	bf00      	nop
 800eadc:	3b9aca00 	.word	0x3b9aca00

0800eae0 <listen_message_reliably>:
 800eae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae4:	f1b1 0b00 	subs.w	fp, r1, #0
 800eae8:	b09f      	sub	sp, #124	@ 0x7c
 800eaea:	4606      	mov	r6, r0
 800eaec:	bfb8      	it	lt
 800eaee:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 800eaf2:	f001 faf5 	bl	80100e0 <uxr_millis>
 800eaf6:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800eafa:	9003      	str	r0, [sp, #12]
 800eafc:	9104      	str	r1, [sp, #16]
 800eafe:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800eb02:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	f000 80a4 	beq.w	800ec54 <listen_message_reliably+0x174>
 800eb0c:	2500      	movs	r5, #0
 800eb0e:	e9cd b806 	strd	fp, r8, [sp, #24]
 800eb12:	f106 0420 	add.w	r4, r6, #32
 800eb16:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800eb1a:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 800eb1e:	4628      	mov	r0, r5
 800eb20:	e011      	b.n	800eb46 <listen_message_reliably+0x66>
 800eb22:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800eb26:	42ba      	cmp	r2, r7
 800eb28:	eb73 0109 	sbcs.w	r1, r3, r9
 800eb2c:	bfb8      	it	lt
 800eb2e:	4699      	movlt	r9, r3
 800eb30:	f105 0501 	add.w	r5, r5, #1
 800eb34:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800eb38:	b2e8      	uxtb	r0, r5
 800eb3a:	bfb8      	it	lt
 800eb3c:	4617      	movlt	r7, r2
 800eb3e:	4283      	cmp	r3, r0
 800eb40:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 800eb44:	d94a      	bls.n	800ebdc <listen_message_reliably+0xfc>
 800eb46:	2201      	movs	r2, #1
 800eb48:	2102      	movs	r1, #2
 800eb4a:	f001 f967 	bl	800fe1c <uxr_stream_id>
 800eb4e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800eb52:	4601      	mov	r1, r0
 800eb54:	4620      	mov	r0, r4
 800eb56:	910b      	str	r1, [sp, #44]	@ 0x2c
 800eb58:	f004 fa3c 	bl	8012fd4 <uxr_update_output_stream_heartbeat_timestamp>
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	d0e0      	beq.n	800eb22 <listen_message_reliably+0x42>
 800eb60:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800eb64:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 800eb68:	9305      	str	r3, [sp, #20]
 800eb6a:	4630      	mov	r0, r6
 800eb6c:	f000 fcba 	bl	800f4e4 <uxr_session_header_offset>
 800eb70:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 800eb74:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800eb78:	9000      	str	r0, [sp, #0]
 800eb7a:	a90e      	add	r1, sp, #56	@ 0x38
 800eb7c:	4640      	mov	r0, r8
 800eb7e:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 800eb82:	2300      	movs	r3, #0
 800eb84:	2211      	movs	r2, #17
 800eb86:	f7fa f97d 	bl	8008e84 <ucdr_init_buffer_origin_offset>
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	2205      	movs	r2, #5
 800eb8e:	210b      	movs	r1, #11
 800eb90:	4640      	mov	r0, r8
 800eb92:	f001 fa5f 	bl	8010054 <uxr_buffer_submessage_header>
 800eb96:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 800eb9a:	2101      	movs	r1, #1
 800eb9c:	f004 fadc 	bl	8013158 <uxr_seq_num_add>
 800eba0:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 800eba4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800eba8:	4602      	mov	r2, r0
 800ebaa:	9b05      	ldr	r3, [sp, #20]
 800ebac:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800ebb0:	a90c      	add	r1, sp, #48	@ 0x30
 800ebb2:	4640      	mov	r0, r8
 800ebb4:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800ebb8:	f002 fb2e 	bl	8011218 <uxr_serialize_HEARTBEAT_Payload>
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ebc0:	4611      	mov	r1, r2
 800ebc2:	4630      	mov	r0, r6
 800ebc4:	f000 fc3a 	bl	800f43c <uxr_stamp_session_header>
 800ebc8:	4640      	mov	r0, r8
 800ebca:	f7fa f999 	bl	8008f00 <ucdr_buffer_length>
 800ebce:	4602      	mov	r2, r0
 800ebd0:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 800ebd2:	a90e      	add	r1, sp, #56	@ 0x38
 800ebd4:	e9d0 0300 	ldrd	r0, r3, [r0]
 800ebd8:	4798      	blx	r3
 800ebda:	e7a2      	b.n	800eb22 <listen_message_reliably+0x42>
 800ebdc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ebe0:	4599      	cmp	r9, r3
 800ebe2:	bf08      	it	eq
 800ebe4:	f1b7 3fff 	cmpeq.w	r7, #4294967295	@ 0xffffffff
 800ebe8:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 800ebec:	d032      	beq.n	800ec54 <listen_message_reliably+0x174>
 800ebee:	9b03      	ldr	r3, [sp, #12]
 800ebf0:	1aff      	subs	r7, r7, r3
 800ebf2:	2f00      	cmp	r7, #0
 800ebf4:	bf08      	it	eq
 800ebf6:	2701      	moveq	r7, #1
 800ebf8:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800ebfa:	455f      	cmp	r7, fp
 800ebfc:	bfa8      	it	ge
 800ebfe:	465f      	movge	r7, fp
 800ec00:	689c      	ldr	r4, [r3, #8]
 800ec02:	6818      	ldr	r0, [r3, #0]
 800ec04:	4642      	mov	r2, r8
 800ec06:	463b      	mov	r3, r7
 800ec08:	4651      	mov	r1, sl
 800ec0a:	47a0      	blx	r4
 800ec0c:	ebab 0b07 	sub.w	fp, fp, r7
 800ec10:	b958      	cbnz	r0, 800ec2a <listen_message_reliably+0x14a>
 800ec12:	f1bb 0f00 	cmp.w	fp, #0
 800ec16:	dd44      	ble.n	800eca2 <listen_message_reliably+0x1c2>
 800ec18:	f001 fa62 	bl	80100e0 <uxr_millis>
 800ec1c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d03c      	beq.n	800ec9e <listen_message_reliably+0x1be>
 800ec24:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800ec28:	e770      	b.n	800eb0c <listen_message_reliably+0x2c>
 800ec2a:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800ec2e:	4604      	mov	r4, r0
 800ec30:	a80e      	add	r0, sp, #56	@ 0x38
 800ec32:	f7fa f939 	bl	8008ea8 <ucdr_init_buffer>
 800ec36:	2500      	movs	r5, #0
 800ec38:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 800ec3c:	aa08      	add	r2, sp, #32
 800ec3e:	a90e      	add	r1, sp, #56	@ 0x38
 800ec40:	4630      	mov	r0, r6
 800ec42:	f88d 5020 	strb.w	r5, [sp, #32]
 800ec46:	f000 fc0f 	bl	800f468 <uxr_read_session_header>
 800ec4a:	b928      	cbnz	r0, 800ec58 <listen_message_reliably+0x178>
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	b01f      	add	sp, #124	@ 0x7c
 800ec50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec54:	465f      	mov	r7, fp
 800ec56:	e7cc      	b.n	800ebf2 <listen_message_reliably+0x112>
 800ec58:	4629      	mov	r1, r5
 800ec5a:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800ec5e:	f001 f8f9 	bl	800fe54 <uxr_stream_id_from_raw>
 800ec62:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800ec66:	2f01      	cmp	r7, #1
 800ec68:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 800ec6c:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 800ec70:	fa5f f880 	uxtb.w	r8, r0
 800ec74:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800ec78:	d050      	beq.n	800ed1c <listen_message_reliably+0x23c>
 800ec7a:	2f02      	cmp	r7, #2
 800ec7c:	d016      	beq.n	800ecac <listen_message_reliably+0x1cc>
 800ec7e:	2f00      	cmp	r7, #0
 800ec80:	d1e4      	bne.n	800ec4c <listen_message_reliably+0x16c>
 800ec82:	4639      	mov	r1, r7
 800ec84:	4638      	mov	r0, r7
 800ec86:	f001 f8e5 	bl	800fe54 <uxr_stream_id_from_raw>
 800ec8a:	a90e      	add	r1, sp, #56	@ 0x38
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	4630      	mov	r0, r6
 800ec90:	920c      	str	r2, [sp, #48]	@ 0x30
 800ec92:	f7ff fdb5 	bl	800e800 <read_submessage_list>
 800ec96:	4620      	mov	r0, r4
 800ec98:	b01f      	add	sp, #124	@ 0x7c
 800ec9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec9e:	465f      	mov	r7, fp
 800eca0:	e7aa      	b.n	800ebf8 <listen_message_reliably+0x118>
 800eca2:	4604      	mov	r4, r0
 800eca4:	4620      	mov	r0, r4
 800eca6:	b01f      	add	sp, #124	@ 0x7c
 800eca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecac:	4629      	mov	r1, r5
 800ecae:	f106 0008 	add.w	r0, r6, #8
 800ecb2:	f001 f9af 	bl	8010014 <uxr_get_input_reliable_stream>
 800ecb6:	4681      	mov	r9, r0
 800ecb8:	b338      	cbz	r0, 800ed0a <listen_message_reliably+0x22a>
 800ecba:	a80e      	add	r0, sp, #56	@ 0x38
 800ecbc:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 800ecc0:	f7fa f922 	bl	8008f08 <ucdr_buffer_remaining>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 800ecca:	9000      	str	r0, [sp, #0]
 800eccc:	465a      	mov	r2, fp
 800ecce:	4651      	mov	r1, sl
 800ecd0:	4648      	mov	r0, r9
 800ecd2:	f003 fdab 	bl	801282c <uxr_receive_reliable_message>
 800ecd6:	b1c0      	cbz	r0, 800ed0a <listen_message_reliably+0x22a>
 800ecd8:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800ecdc:	b393      	cbz	r3, 800ed44 <listen_message_reliably+0x264>
 800ecde:	af16      	add	r7, sp, #88	@ 0x58
 800ece0:	f04f 0a02 	mov.w	sl, #2
 800ece4:	e00a      	b.n	800ecfc <listen_message_reliably+0x21c>
 800ece6:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 800ecea:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 800ecee:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 800ecf2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ecf4:	4639      	mov	r1, r7
 800ecf6:	4630      	mov	r0, r6
 800ecf8:	f7ff fd82 	bl	800e800 <read_submessage_list>
 800ecfc:	2204      	movs	r2, #4
 800ecfe:	4639      	mov	r1, r7
 800ed00:	4648      	mov	r0, r9
 800ed02:	f003 fe0d 	bl	8012920 <uxr_next_input_reliable_buffer_available>
 800ed06:	2800      	cmp	r0, #0
 800ed08:	d1ed      	bne.n	800ece6 <listen_message_reliably+0x206>
 800ed0a:	4630      	mov	r0, r6
 800ed0c:	462a      	mov	r2, r5
 800ed0e:	4641      	mov	r1, r8
 800ed10:	f7ff fc1a 	bl	800e548 <write_submessage_acknack.isra.0>
 800ed14:	4620      	mov	r0, r4
 800ed16:	b01f      	add	sp, #124	@ 0x7c
 800ed18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed1c:	4629      	mov	r1, r5
 800ed1e:	f106 0008 	add.w	r0, r6, #8
 800ed22:	f001 f96d 	bl	8010000 <uxr_get_input_best_effort_stream>
 800ed26:	2800      	cmp	r0, #0
 800ed28:	d090      	beq.n	800ec4c <listen_message_reliably+0x16c>
 800ed2a:	4651      	mov	r1, sl
 800ed2c:	f003 fcee 	bl	801270c <uxr_receive_best_effort_message>
 800ed30:	2800      	cmp	r0, #0
 800ed32:	d08b      	beq.n	800ec4c <listen_message_reliably+0x16c>
 800ed34:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800ed38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ed3a:	a90e      	add	r1, sp, #56	@ 0x38
 800ed3c:	4630      	mov	r0, r6
 800ed3e:	f7ff fd5f 	bl	800e800 <read_submessage_list>
 800ed42:	e783      	b.n	800ec4c <listen_message_reliably+0x16c>
 800ed44:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800ed48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ed4a:	a90e      	add	r1, sp, #56	@ 0x38
 800ed4c:	4630      	mov	r0, r6
 800ed4e:	f7ff fd57 	bl	800e800 <read_submessage_list>
 800ed52:	e7c4      	b.n	800ecde <listen_message_reliably+0x1fe>

0800ed54 <uxr_run_session_timeout>:
 800ed54:	b570      	push	{r4, r5, r6, lr}
 800ed56:	4604      	mov	r4, r0
 800ed58:	460d      	mov	r5, r1
 800ed5a:	f001 f9c1 	bl	80100e0 <uxr_millis>
 800ed5e:	4606      	mov	r6, r0
 800ed60:	4620      	mov	r0, r4
 800ed62:	f7ff fc99 	bl	800e698 <uxr_flash_output_streams>
 800ed66:	4629      	mov	r1, r5
 800ed68:	4620      	mov	r0, r4
 800ed6a:	f7ff feb9 	bl	800eae0 <listen_message_reliably>
 800ed6e:	f001 f9b7 	bl	80100e0 <uxr_millis>
 800ed72:	1b81      	subs	r1, r0, r6
 800ed74:	1a69      	subs	r1, r5, r1
 800ed76:	2900      	cmp	r1, #0
 800ed78:	dcf6      	bgt.n	800ed68 <uxr_run_session_timeout+0x14>
 800ed7a:	f104 0008 	add.w	r0, r4, #8
 800ed7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed82:	f001 b951 	b.w	8010028 <uxr_output_streams_confirmed>
 800ed86:	bf00      	nop

0800ed88 <uxr_run_session_until_data>:
 800ed88:	b570      	push	{r4, r5, r6, lr}
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	460d      	mov	r5, r1
 800ed8e:	f001 f9a7 	bl	80100e0 <uxr_millis>
 800ed92:	4606      	mov	r6, r0
 800ed94:	4620      	mov	r0, r4
 800ed96:	f7ff fc7f 	bl	800e698 <uxr_flash_output_streams>
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800eda0:	4629      	mov	r1, r5
 800eda2:	e005      	b.n	800edb0 <uxr_run_session_until_data+0x28>
 800eda4:	f001 f99c 	bl	80100e0 <uxr_millis>
 800eda8:	1b81      	subs	r1, r0, r6
 800edaa:	1a69      	subs	r1, r5, r1
 800edac:	2900      	cmp	r1, #0
 800edae:	dd07      	ble.n	800edc0 <uxr_run_session_until_data+0x38>
 800edb0:	4620      	mov	r0, r4
 800edb2:	f7ff fe95 	bl	800eae0 <listen_message_reliably>
 800edb6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800edba:	2800      	cmp	r0, #0
 800edbc:	d0f2      	beq.n	800eda4 <uxr_run_session_until_data+0x1c>
 800edbe:	bd70      	pop	{r4, r5, r6, pc}
 800edc0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800edc4:	bd70      	pop	{r4, r5, r6, pc}
 800edc6:	bf00      	nop

0800edc8 <uxr_run_session_until_confirm_delivery>:
 800edc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edcc:	4606      	mov	r6, r0
 800edce:	460d      	mov	r5, r1
 800edd0:	f001 f986 	bl	80100e0 <uxr_millis>
 800edd4:	4607      	mov	r7, r0
 800edd6:	4630      	mov	r0, r6
 800edd8:	f7ff fc5e 	bl	800e698 <uxr_flash_output_streams>
 800eddc:	2d00      	cmp	r5, #0
 800edde:	db16      	blt.n	800ee0e <uxr_run_session_until_confirm_delivery+0x46>
 800ede0:	462c      	mov	r4, r5
 800ede2:	f106 0808 	add.w	r8, r6, #8
 800ede6:	e008      	b.n	800edfa <uxr_run_session_until_confirm_delivery+0x32>
 800ede8:	4621      	mov	r1, r4
 800edea:	4630      	mov	r0, r6
 800edec:	f7ff fe78 	bl	800eae0 <listen_message_reliably>
 800edf0:	f001 f976 	bl	80100e0 <uxr_millis>
 800edf4:	1bc1      	subs	r1, r0, r7
 800edf6:	1a6c      	subs	r4, r5, r1
 800edf8:	d404      	bmi.n	800ee04 <uxr_run_session_until_confirm_delivery+0x3c>
 800edfa:	4640      	mov	r0, r8
 800edfc:	f001 f914 	bl	8010028 <uxr_output_streams_confirmed>
 800ee00:	2800      	cmp	r0, #0
 800ee02:	d0f1      	beq.n	800ede8 <uxr_run_session_until_confirm_delivery+0x20>
 800ee04:	4640      	mov	r0, r8
 800ee06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee0a:	f001 b90d 	b.w	8010028 <uxr_output_streams_confirmed>
 800ee0e:	f106 0808 	add.w	r8, r6, #8
 800ee12:	e7f7      	b.n	800ee04 <uxr_run_session_until_confirm_delivery+0x3c>

0800ee14 <uxr_run_session_until_all_status>:
 800ee14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee18:	9c08      	ldr	r4, [sp, #32]
 800ee1a:	4605      	mov	r5, r0
 800ee1c:	460f      	mov	r7, r1
 800ee1e:	4690      	mov	r8, r2
 800ee20:	461e      	mov	r6, r3
 800ee22:	f7ff fc39 	bl	800e698 <uxr_flash_output_streams>
 800ee26:	b124      	cbz	r4, 800ee32 <uxr_run_session_until_all_status+0x1e>
 800ee28:	4622      	mov	r2, r4
 800ee2a:	21ff      	movs	r1, #255	@ 0xff
 800ee2c:	4630      	mov	r0, r6
 800ee2e:	f004 fda1 	bl	8013974 <memset>
 800ee32:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 800ee36:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800ee38:	f001 f952 	bl	80100e0 <uxr_millis>
 800ee3c:	4639      	mov	r1, r7
 800ee3e:	4681      	mov	r9, r0
 800ee40:	4628      	mov	r0, r5
 800ee42:	f7ff fe4d 	bl	800eae0 <listen_message_reliably>
 800ee46:	f001 f94b 	bl	80100e0 <uxr_millis>
 800ee4a:	eba0 0109 	sub.w	r1, r0, r9
 800ee4e:	1a79      	subs	r1, r7, r1
 800ee50:	b36c      	cbz	r4, 800eeae <uxr_run_session_until_all_status+0x9a>
 800ee52:	1e70      	subs	r0, r6, #1
 800ee54:	46c6      	mov	lr, r8
 800ee56:	1902      	adds	r2, r0, r4
 800ee58:	4684      	mov	ip, r0
 800ee5a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800ee5e:	2bff      	cmp	r3, #255	@ 0xff
 800ee60:	d007      	beq.n	800ee72 <uxr_run_session_until_all_status+0x5e>
 800ee62:	4594      	cmp	ip, r2
 800ee64:	d00f      	beq.n	800ee86 <uxr_run_session_until_all_status+0x72>
 800ee66:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800ee6a:	2bff      	cmp	r3, #255	@ 0xff
 800ee6c:	f10e 0e02 	add.w	lr, lr, #2
 800ee70:	d1f7      	bne.n	800ee62 <uxr_run_session_until_all_status+0x4e>
 800ee72:	4594      	cmp	ip, r2
 800ee74:	f8be 3000 	ldrh.w	r3, [lr]
 800ee78:	d014      	beq.n	800eea4 <uxr_run_session_until_all_status+0x90>
 800ee7a:	f10e 0e02 	add.w	lr, lr, #2
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d0eb      	beq.n	800ee5a <uxr_run_session_until_all_status+0x46>
 800ee82:	2900      	cmp	r1, #0
 800ee84:	dcdc      	bgt.n	800ee40 <uxr_run_session_until_all_status+0x2c>
 800ee86:	2300      	movs	r3, #0
 800ee88:	67eb      	str	r3, [r5, #124]	@ 0x7c
 800ee8a:	e001      	b.n	800ee90 <uxr_run_session_until_all_status+0x7c>
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	d812      	bhi.n	800eeb6 <uxr_run_session_until_all_status+0xa2>
 800ee90:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800ee94:	4290      	cmp	r0, r2
 800ee96:	d1f9      	bne.n	800ee8c <uxr_run_session_until_all_status+0x78>
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	bf8c      	ite	hi
 800ee9c:	2000      	movhi	r0, #0
 800ee9e:	2001      	movls	r0, #1
 800eea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eea4:	2900      	cmp	r1, #0
 800eea6:	ddee      	ble.n	800ee86 <uxr_run_session_until_all_status+0x72>
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d1c9      	bne.n	800ee40 <uxr_run_session_until_all_status+0x2c>
 800eeac:	e7eb      	b.n	800ee86 <uxr_run_session_until_all_status+0x72>
 800eeae:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800eeb0:	2001      	movs	r0, #1
 800eeb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eeb6:	2000      	movs	r0, #0
 800eeb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800eebc <wait_session_status>:
 800eebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec0:	4604      	mov	r4, r0
 800eec2:	20ff      	movs	r0, #255	@ 0xff
 800eec4:	b09f      	sub	sp, #124	@ 0x7c
 800eec6:	7160      	strb	r0, [r4, #5]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	f000 80bb 	beq.w	800f044 <wait_session_status+0x188>
 800eece:	4692      	mov	sl, r2
 800eed0:	469b      	mov	fp, r3
 800eed2:	f04f 0800 	mov.w	r8, #0
 800eed6:	9105      	str	r1, [sp, #20]
 800eed8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800eeda:	9905      	ldr	r1, [sp, #20]
 800eedc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800eee0:	4652      	mov	r2, sl
 800eee2:	47a8      	blx	r5
 800eee4:	f001 f8fc 	bl	80100e0 <uxr_millis>
 800eee8:	2700      	movs	r7, #0
 800eeea:	4605      	mov	r5, r0
 800eeec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800eef0:	e009      	b.n	800ef06 <wait_session_status+0x4a>
 800eef2:	f001 f8f5 	bl	80100e0 <uxr_millis>
 800eef6:	1b43      	subs	r3, r0, r5
 800eef8:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	7962      	ldrb	r2, [r4, #5]
 800ef00:	dd3d      	ble.n	800ef7e <wait_session_status+0xc2>
 800ef02:	2aff      	cmp	r2, #255	@ 0xff
 800ef04:	d13b      	bne.n	800ef7e <wait_session_status+0xc2>
 800ef06:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800ef08:	a90a      	add	r1, sp, #40	@ 0x28
 800ef0a:	6896      	ldr	r6, [r2, #8]
 800ef0c:	6810      	ldr	r0, [r2, #0]
 800ef0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ef10:	47b0      	blx	r6
 800ef12:	2800      	cmp	r0, #0
 800ef14:	d0ed      	beq.n	800eef2 <wait_session_status+0x36>
 800ef16:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 800ef1a:	a80e      	add	r0, sp, #56	@ 0x38
 800ef1c:	f7f9 ffc4 	bl	8008ea8 <ucdr_init_buffer>
 800ef20:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 800ef24:	aa09      	add	r2, sp, #36	@ 0x24
 800ef26:	a90e      	add	r1, sp, #56	@ 0x38
 800ef28:	4620      	mov	r0, r4
 800ef2a:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 800ef2e:	f000 fa9b 	bl	800f468 <uxr_read_session_header>
 800ef32:	2800      	cmp	r0, #0
 800ef34:	d0dd      	beq.n	800eef2 <wait_session_status+0x36>
 800ef36:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 800ef3a:	2100      	movs	r1, #0
 800ef3c:	f000 ff8a 	bl	800fe54 <uxr_stream_id_from_raw>
 800ef40:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800ef44:	9304      	str	r3, [sp, #16]
 800ef46:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800ef4a:	b2c3      	uxtb	r3, r0
 800ef4c:	f1b9 0f01 	cmp.w	r9, #1
 800ef50:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 800ef54:	9303      	str	r3, [sp, #12]
 800ef56:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ef5a:	d05d      	beq.n	800f018 <wait_session_status+0x15c>
 800ef5c:	f1b9 0f02 	cmp.w	r9, #2
 800ef60:	d01a      	beq.n	800ef98 <wait_session_status+0xdc>
 800ef62:	f1b9 0f00 	cmp.w	r9, #0
 800ef66:	d1c4      	bne.n	800eef2 <wait_session_status+0x36>
 800ef68:	4649      	mov	r1, r9
 800ef6a:	4648      	mov	r0, r9
 800ef6c:	f000 ff72 	bl	800fe54 <uxr_stream_id_from_raw>
 800ef70:	a90e      	add	r1, sp, #56	@ 0x38
 800ef72:	4602      	mov	r2, r0
 800ef74:	900d      	str	r0, [sp, #52]	@ 0x34
 800ef76:	4620      	mov	r0, r4
 800ef78:	f7ff fc42 	bl	800e800 <read_submessage_list>
 800ef7c:	e7b9      	b.n	800eef2 <wait_session_status+0x36>
 800ef7e:	f108 0801 	add.w	r8, r8, #1
 800ef82:	45c3      	cmp	fp, r8
 800ef84:	d001      	beq.n	800ef8a <wait_session_status+0xce>
 800ef86:	2aff      	cmp	r2, #255	@ 0xff
 800ef88:	d0a6      	beq.n	800eed8 <wait_session_status+0x1c>
 800ef8a:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 800ef8e:	bf18      	it	ne
 800ef90:	2001      	movne	r0, #1
 800ef92:	b01f      	add	sp, #124	@ 0x7c
 800ef94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef98:	4631      	mov	r1, r6
 800ef9a:	f104 0008 	add.w	r0, r4, #8
 800ef9e:	f001 f839 	bl	8010014 <uxr_get_input_reliable_stream>
 800efa2:	9006      	str	r0, [sp, #24]
 800efa4:	2800      	cmp	r0, #0
 800efa6:	d031      	beq.n	800f00c <wait_session_status+0x150>
 800efa8:	aa0e      	add	r2, sp, #56	@ 0x38
 800efaa:	4610      	mov	r0, r2
 800efac:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800efae:	9207      	str	r2, [sp, #28]
 800efb0:	f7f9 ffaa 	bl	8008f08 <ucdr_buffer_remaining>
 800efb4:	4603      	mov	r3, r0
 800efb6:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 800efba:	9000      	str	r0, [sp, #0]
 800efbc:	9a07      	ldr	r2, [sp, #28]
 800efbe:	9904      	ldr	r1, [sp, #16]
 800efc0:	9806      	ldr	r0, [sp, #24]
 800efc2:	f003 fc33 	bl	801282c <uxr_receive_reliable_message>
 800efc6:	b308      	cbz	r0, 800f00c <wait_session_status+0x150>
 800efc8:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d041      	beq.n	800f054 <wait_session_status+0x198>
 800efd0:	f8cd 8010 	str.w	r8, [sp, #16]
 800efd4:	9507      	str	r5, [sp, #28]
 800efd6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800efda:	9d06      	ldr	r5, [sp, #24]
 800efdc:	f04f 0902 	mov.w	r9, #2
 800efe0:	e00a      	b.n	800eff8 <wait_session_status+0x13c>
 800efe2:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 800efe6:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 800efea:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800efee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eff0:	a916      	add	r1, sp, #88	@ 0x58
 800eff2:	4620      	mov	r0, r4
 800eff4:	f7ff fc04 	bl	800e800 <read_submessage_list>
 800eff8:	2204      	movs	r2, #4
 800effa:	a916      	add	r1, sp, #88	@ 0x58
 800effc:	4628      	mov	r0, r5
 800effe:	f003 fc8f 	bl	8012920 <uxr_next_input_reliable_buffer_available>
 800f002:	2800      	cmp	r0, #0
 800f004:	d1ed      	bne.n	800efe2 <wait_session_status+0x126>
 800f006:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f00a:	9d07      	ldr	r5, [sp, #28]
 800f00c:	9903      	ldr	r1, [sp, #12]
 800f00e:	4632      	mov	r2, r6
 800f010:	4620      	mov	r0, r4
 800f012:	f7ff fa99 	bl	800e548 <write_submessage_acknack.isra.0>
 800f016:	e76c      	b.n	800eef2 <wait_session_status+0x36>
 800f018:	4631      	mov	r1, r6
 800f01a:	f104 0008 	add.w	r0, r4, #8
 800f01e:	f000 ffef 	bl	8010000 <uxr_get_input_best_effort_stream>
 800f022:	2800      	cmp	r0, #0
 800f024:	f43f af65 	beq.w	800eef2 <wait_session_status+0x36>
 800f028:	9904      	ldr	r1, [sp, #16]
 800f02a:	f003 fb6f 	bl	801270c <uxr_receive_best_effort_message>
 800f02e:	2800      	cmp	r0, #0
 800f030:	f43f af5f 	beq.w	800eef2 <wait_session_status+0x36>
 800f034:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800f038:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f03a:	a90e      	add	r1, sp, #56	@ 0x38
 800f03c:	4620      	mov	r0, r4
 800f03e:	f7ff fbdf 	bl	800e800 <read_submessage_list>
 800f042:	e756      	b.n	800eef2 <wait_session_status+0x36>
 800f044:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f046:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f04a:	47a0      	blx	r4
 800f04c:	2001      	movs	r0, #1
 800f04e:	b01f      	add	sp, #124	@ 0x7c
 800f050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f054:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800f058:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f05a:	a90e      	add	r1, sp, #56	@ 0x38
 800f05c:	4620      	mov	r0, r4
 800f05e:	f7ff fbcf 	bl	800e800 <read_submessage_list>
 800f062:	e7b5      	b.n	800efd0 <wait_session_status+0x114>

0800f064 <uxr_delete_session_retries>:
 800f064:	b530      	push	{r4, r5, lr}
 800f066:	b08f      	sub	sp, #60	@ 0x3c
 800f068:	4604      	mov	r4, r0
 800f06a:	460d      	mov	r5, r1
 800f06c:	f000 fa3a 	bl	800f4e4 <uxr_session_header_offset>
 800f070:	2300      	movs	r3, #0
 800f072:	2210      	movs	r2, #16
 800f074:	9000      	str	r0, [sp, #0]
 800f076:	a902      	add	r1, sp, #8
 800f078:	a806      	add	r0, sp, #24
 800f07a:	f7f9 ff03 	bl	8008e84 <ucdr_init_buffer_origin_offset>
 800f07e:	a906      	add	r1, sp, #24
 800f080:	4620      	mov	r0, r4
 800f082:	f000 f981 	bl	800f388 <uxr_buffer_delete_session>
 800f086:	2200      	movs	r2, #0
 800f088:	4611      	mov	r1, r2
 800f08a:	9b06      	ldr	r3, [sp, #24]
 800f08c:	4620      	mov	r0, r4
 800f08e:	f000 f9d5 	bl	800f43c <uxr_stamp_session_header>
 800f092:	a806      	add	r0, sp, #24
 800f094:	f7f9 ff34 	bl	8008f00 <ucdr_buffer_length>
 800f098:	462b      	mov	r3, r5
 800f09a:	4602      	mov	r2, r0
 800f09c:	a902      	add	r1, sp, #8
 800f09e:	4620      	mov	r0, r4
 800f0a0:	f7ff ff0c 	bl	800eebc <wait_session_status>
 800f0a4:	b118      	cbz	r0, 800f0ae <uxr_delete_session_retries+0x4a>
 800f0a6:	7960      	ldrb	r0, [r4, #5]
 800f0a8:	fab0 f080 	clz	r0, r0
 800f0ac:	0940      	lsrs	r0, r0, #5
 800f0ae:	b00f      	add	sp, #60	@ 0x3c
 800f0b0:	bd30      	pop	{r4, r5, pc}
 800f0b2:	bf00      	nop

0800f0b4 <uxr_create_session>:
 800f0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0b8:	f100 0308 	add.w	r3, r0, #8
 800f0bc:	b0ab      	sub	sp, #172	@ 0xac
 800f0be:	4604      	mov	r4, r0
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	9303      	str	r3, [sp, #12]
 800f0c4:	f000 feec 	bl	800fea0 <uxr_reset_stream_storage>
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	f000 fa0b 	bl	800f4e4 <uxr_session_header_offset>
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	9000      	str	r0, [sp, #0]
 800f0d2:	221c      	movs	r2, #28
 800f0d4:	a90b      	add	r1, sp, #44	@ 0x2c
 800f0d6:	a812      	add	r0, sp, #72	@ 0x48
 800f0d8:	f7f9 fed4 	bl	8008e84 <ucdr_init_buffer_origin_offset>
 800f0dc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f0de:	8a1a      	ldrh	r2, [r3, #16]
 800f0e0:	3a04      	subs	r2, #4
 800f0e2:	b292      	uxth	r2, r2
 800f0e4:	a912      	add	r1, sp, #72	@ 0x48
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	f000 f924 	bl	800f334 <uxr_buffer_create_session>
 800f0ec:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f0ee:	4620      	mov	r0, r4
 800f0f0:	f000 f990 	bl	800f414 <uxr_stamp_create_session_header>
 800f0f4:	a812      	add	r0, sp, #72	@ 0x48
 800f0f6:	f7f9 ff03 	bl	8008f00 <ucdr_buffer_length>
 800f0fa:	23ff      	movs	r3, #255	@ 0xff
 800f0fc:	4683      	mov	fp, r0
 800f0fe:	7163      	strb	r3, [r4, #5]
 800f100:	f04f 080a 	mov.w	r8, #10
 800f104:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f106:	465a      	mov	r2, fp
 800f108:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f10c:	a90b      	add	r1, sp, #44	@ 0x2c
 800f10e:	47a8      	blx	r5
 800f110:	f000 ffe6 	bl	80100e0 <uxr_millis>
 800f114:	2700      	movs	r7, #0
 800f116:	4605      	mov	r5, r0
 800f118:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f11c:	e009      	b.n	800f132 <uxr_create_session+0x7e>
 800f11e:	f000 ffdf 	bl	80100e0 <uxr_millis>
 800f122:	1b43      	subs	r3, r0, r5
 800f124:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800f128:	2b00      	cmp	r3, #0
 800f12a:	7962      	ldrb	r2, [r4, #5]
 800f12c:	dd3d      	ble.n	800f1aa <uxr_create_session+0xf6>
 800f12e:	2aff      	cmp	r2, #255	@ 0xff
 800f130:	d13b      	bne.n	800f1aa <uxr_create_session+0xf6>
 800f132:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f134:	a907      	add	r1, sp, #28
 800f136:	6896      	ldr	r6, [r2, #8]
 800f138:	6810      	ldr	r0, [r2, #0]
 800f13a:	aa08      	add	r2, sp, #32
 800f13c:	47b0      	blx	r6
 800f13e:	2800      	cmp	r0, #0
 800f140:	d0ed      	beq.n	800f11e <uxr_create_session+0x6a>
 800f142:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f146:	a81a      	add	r0, sp, #104	@ 0x68
 800f148:	f7f9 feae 	bl	8008ea8 <ucdr_init_buffer>
 800f14c:	f10d 031a 	add.w	r3, sp, #26
 800f150:	aa06      	add	r2, sp, #24
 800f152:	a91a      	add	r1, sp, #104	@ 0x68
 800f154:	4620      	mov	r0, r4
 800f156:	f88d 7018 	strb.w	r7, [sp, #24]
 800f15a:	f000 f985 	bl	800f468 <uxr_read_session_header>
 800f15e:	2800      	cmp	r0, #0
 800f160:	d0dd      	beq.n	800f11e <uxr_create_session+0x6a>
 800f162:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f166:	2100      	movs	r1, #0
 800f168:	f000 fe74 	bl	800fe54 <uxr_stream_id_from_raw>
 800f16c:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800f170:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800f174:	9302      	str	r3, [sp, #8]
 800f176:	f1b9 0f01 	cmp.w	r9, #1
 800f17a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f17e:	fa5f fa80 	uxtb.w	sl, r0
 800f182:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f186:	d056      	beq.n	800f236 <uxr_create_session+0x182>
 800f188:	f1b9 0f02 	cmp.w	r9, #2
 800f18c:	d018      	beq.n	800f1c0 <uxr_create_session+0x10c>
 800f18e:	f1b9 0f00 	cmp.w	r9, #0
 800f192:	d1c4      	bne.n	800f11e <uxr_create_session+0x6a>
 800f194:	4649      	mov	r1, r9
 800f196:	4648      	mov	r0, r9
 800f198:	f000 fe5c 	bl	800fe54 <uxr_stream_id_from_raw>
 800f19c:	a91a      	add	r1, sp, #104	@ 0x68
 800f19e:	4602      	mov	r2, r0
 800f1a0:	900a      	str	r0, [sp, #40]	@ 0x28
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	f7ff fb2c 	bl	800e800 <read_submessage_list>
 800f1a8:	e7b9      	b.n	800f11e <uxr_create_session+0x6a>
 800f1aa:	f1b8 0801 	subs.w	r8, r8, #1
 800f1ae:	d001      	beq.n	800f1b4 <uxr_create_session+0x100>
 800f1b0:	2aff      	cmp	r2, #255	@ 0xff
 800f1b2:	d0a7      	beq.n	800f104 <uxr_create_session+0x50>
 800f1b4:	2a00      	cmp	r2, #0
 800f1b6:	d05b      	beq.n	800f270 <uxr_create_session+0x1bc>
 800f1b8:	2000      	movs	r0, #0
 800f1ba:	b02b      	add	sp, #172	@ 0xac
 800f1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1c0:	9803      	ldr	r0, [sp, #12]
 800f1c2:	4631      	mov	r1, r6
 800f1c4:	f000 ff26 	bl	8010014 <uxr_get_input_reliable_stream>
 800f1c8:	9004      	str	r0, [sp, #16]
 800f1ca:	b370      	cbz	r0, 800f22a <uxr_create_session+0x176>
 800f1cc:	aa1a      	add	r2, sp, #104	@ 0x68
 800f1ce:	4610      	mov	r0, r2
 800f1d0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f1d2:	9205      	str	r2, [sp, #20]
 800f1d4:	f7f9 fe98 	bl	8008f08 <ucdr_buffer_remaining>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	f10d 0019 	add.w	r0, sp, #25
 800f1de:	9000      	str	r0, [sp, #0]
 800f1e0:	9a05      	ldr	r2, [sp, #20]
 800f1e2:	9902      	ldr	r1, [sp, #8]
 800f1e4:	9804      	ldr	r0, [sp, #16]
 800f1e6:	f003 fb21 	bl	801282c <uxr_receive_reliable_message>
 800f1ea:	b1f0      	cbz	r0, 800f22a <uxr_create_session+0x176>
 800f1ec:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d035      	beq.n	800f260 <uxr_create_session+0x1ac>
 800f1f4:	f8cd b008 	str.w	fp, [sp, #8]
 800f1f8:	f04f 0902 	mov.w	r9, #2
 800f1fc:	f8dd b010 	ldr.w	fp, [sp, #16]
 800f200:	e00a      	b.n	800f218 <uxr_create_session+0x164>
 800f202:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800f206:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800f20a:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800f20e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f210:	a922      	add	r1, sp, #136	@ 0x88
 800f212:	4620      	mov	r0, r4
 800f214:	f7ff faf4 	bl	800e800 <read_submessage_list>
 800f218:	2204      	movs	r2, #4
 800f21a:	a922      	add	r1, sp, #136	@ 0x88
 800f21c:	4658      	mov	r0, fp
 800f21e:	f003 fb7f 	bl	8012920 <uxr_next_input_reliable_buffer_available>
 800f222:	2800      	cmp	r0, #0
 800f224:	d1ed      	bne.n	800f202 <uxr_create_session+0x14e>
 800f226:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f22a:	4632      	mov	r2, r6
 800f22c:	4651      	mov	r1, sl
 800f22e:	4620      	mov	r0, r4
 800f230:	f7ff f98a 	bl	800e548 <write_submessage_acknack.isra.0>
 800f234:	e773      	b.n	800f11e <uxr_create_session+0x6a>
 800f236:	9803      	ldr	r0, [sp, #12]
 800f238:	4631      	mov	r1, r6
 800f23a:	f000 fee1 	bl	8010000 <uxr_get_input_best_effort_stream>
 800f23e:	2800      	cmp	r0, #0
 800f240:	f43f af6d 	beq.w	800f11e <uxr_create_session+0x6a>
 800f244:	9902      	ldr	r1, [sp, #8]
 800f246:	f003 fa61 	bl	801270c <uxr_receive_best_effort_message>
 800f24a:	2800      	cmp	r0, #0
 800f24c:	f43f af67 	beq.w	800f11e <uxr_create_session+0x6a>
 800f250:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800f254:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f256:	a91a      	add	r1, sp, #104	@ 0x68
 800f258:	4620      	mov	r0, r4
 800f25a:	f7ff fad1 	bl	800e800 <read_submessage_list>
 800f25e:	e75e      	b.n	800f11e <uxr_create_session+0x6a>
 800f260:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800f264:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f266:	a91a      	add	r1, sp, #104	@ 0x68
 800f268:	4620      	mov	r0, r4
 800f26a:	f7ff fac9 	bl	800e800 <read_submessage_list>
 800f26e:	e7c1      	b.n	800f1f4 <uxr_create_session+0x140>
 800f270:	9803      	ldr	r0, [sp, #12]
 800f272:	f000 fe15 	bl	800fea0 <uxr_reset_stream_storage>
 800f276:	2001      	movs	r0, #1
 800f278:	b02b      	add	sp, #172	@ 0xac
 800f27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f27e:	bf00      	nop

0800f280 <uxr_prepare_stream_to_write_submessage>:
 800f280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f284:	b082      	sub	sp, #8
 800f286:	4606      	mov	r6, r0
 800f288:	4610      	mov	r0, r2
 800f28a:	4614      	mov	r4, r2
 800f28c:	9101      	str	r1, [sp, #4]
 800f28e:	461f      	mov	r7, r3
 800f290:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800f294:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800f298:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800f29c:	f000 ff1a 	bl	80100d4 <uxr_submessage_padding>
 800f2a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f2a4:	1d21      	adds	r1, r4, #4
 800f2a6:	2b01      	cmp	r3, #1
 800f2a8:	eb01 0a00 	add.w	sl, r1, r0
 800f2ac:	d012      	beq.n	800f2d4 <uxr_prepare_stream_to_write_submessage+0x54>
 800f2ae:	2b02      	cmp	r3, #2
 800f2b0:	d003      	beq.n	800f2ba <uxr_prepare_stream_to_write_submessage+0x3a>
 800f2b2:	2000      	movs	r0, #0
 800f2b4:	b002      	add	sp, #8
 800f2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2ba:	4629      	mov	r1, r5
 800f2bc:	f106 0008 	add.w	r0, r6, #8
 800f2c0:	f000 fe94 	bl	800ffec <uxr_get_output_reliable_stream>
 800f2c4:	2800      	cmp	r0, #0
 800f2c6:	d0f4      	beq.n	800f2b2 <uxr_prepare_stream_to_write_submessage+0x32>
 800f2c8:	4651      	mov	r1, sl
 800f2ca:	463a      	mov	r2, r7
 800f2cc:	f003 fcde 	bl	8012c8c <uxr_prepare_reliable_buffer_to_write>
 800f2d0:	b968      	cbnz	r0, 800f2ee <uxr_prepare_stream_to_write_submessage+0x6e>
 800f2d2:	e7ee      	b.n	800f2b2 <uxr_prepare_stream_to_write_submessage+0x32>
 800f2d4:	4629      	mov	r1, r5
 800f2d6:	f106 0008 	add.w	r0, r6, #8
 800f2da:	f000 fe7f 	bl	800ffdc <uxr_get_output_best_effort_stream>
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	d0e7      	beq.n	800f2b2 <uxr_prepare_stream_to_write_submessage+0x32>
 800f2e2:	4651      	mov	r1, sl
 800f2e4:	463a      	mov	r2, r7
 800f2e6:	f003 fc03 	bl	8012af0 <uxr_prepare_best_effort_buffer_to_write>
 800f2ea:	2800      	cmp	r0, #0
 800f2ec:	d0e1      	beq.n	800f2b2 <uxr_prepare_stream_to_write_submessage+0x32>
 800f2ee:	464b      	mov	r3, r9
 800f2f0:	b2a2      	uxth	r2, r4
 800f2f2:	4641      	mov	r1, r8
 800f2f4:	4638      	mov	r0, r7
 800f2f6:	f000 fead 	bl	8010054 <uxr_buffer_submessage_header>
 800f2fa:	2001      	movs	r0, #1
 800f2fc:	b002      	add	sp, #8
 800f2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f302:	bf00      	nop

0800f304 <uxr_init_session_info>:
 800f304:	2300      	movs	r3, #0
 800f306:	f361 0307 	bfi	r3, r1, #0, #8
 800f30a:	0e11      	lsrs	r1, r2, #24
 800f30c:	f361 230f 	bfi	r3, r1, #8, #8
 800f310:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800f314:	f361 4317 	bfi	r3, r1, #16, #8
 800f318:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800f31c:	f361 631f 	bfi	r3, r1, #24, #8
 800f320:	f04f 0c09 	mov.w	ip, #9
 800f324:	21ff      	movs	r1, #255	@ 0xff
 800f326:	6003      	str	r3, [r0, #0]
 800f328:	7102      	strb	r2, [r0, #4]
 800f32a:	f8a0 c006 	strh.w	ip, [r0, #6]
 800f32e:	7141      	strb	r1, [r0, #5]
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop

0800f334 <uxr_buffer_create_session>:
 800f334:	b530      	push	{r4, r5, lr}
 800f336:	4d13      	ldr	r5, [pc, #76]	@ (800f384 <uxr_buffer_create_session+0x50>)
 800f338:	b089      	sub	sp, #36	@ 0x24
 800f33a:	2300      	movs	r3, #0
 800f33c:	9307      	str	r3, [sp, #28]
 800f33e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f342:	682a      	ldr	r2, [r5, #0]
 800f344:	9200      	str	r2, [sp, #0]
 800f346:	460c      	mov	r4, r1
 800f348:	2201      	movs	r2, #1
 800f34a:	88a9      	ldrh	r1, [r5, #4]
 800f34c:	9301      	str	r3, [sp, #4]
 800f34e:	80c2      	strh	r2, [r0, #6]
 800f350:	f8ad 1006 	strh.w	r1, [sp, #6]
 800f354:	f8d0 1001 	ldr.w	r1, [r0, #1]
 800f358:	7800      	ldrb	r0, [r0, #0]
 800f35a:	9303      	str	r3, [sp, #12]
 800f35c:	f88d 2004 	strb.w	r2, [sp, #4]
 800f360:	9102      	str	r1, [sp, #8]
 800f362:	2210      	movs	r2, #16
 800f364:	4619      	mov	r1, r3
 800f366:	f88d 000c 	strb.w	r0, [sp, #12]
 800f36a:	4620      	mov	r0, r4
 800f36c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800f370:	9306      	str	r3, [sp, #24]
 800f372:	f000 fe6f 	bl	8010054 <uxr_buffer_submessage_header>
 800f376:	4669      	mov	r1, sp
 800f378:	4620      	mov	r0, r4
 800f37a:	f001 fdb1 	bl	8010ee0 <uxr_serialize_CREATE_CLIENT_Payload>
 800f37e:	b009      	add	sp, #36	@ 0x24
 800f380:	bd30      	pop	{r4, r5, pc}
 800f382:	bf00      	nop
 800f384:	08014980 	.word	0x08014980

0800f388 <uxr_buffer_delete_session>:
 800f388:	b510      	push	{r4, lr}
 800f38a:	4a0c      	ldr	r2, [pc, #48]	@ (800f3bc <uxr_buffer_delete_session+0x34>)
 800f38c:	b082      	sub	sp, #8
 800f38e:	460c      	mov	r4, r1
 800f390:	2302      	movs	r3, #2
 800f392:	8911      	ldrh	r1, [r2, #8]
 800f394:	80c3      	strh	r3, [r0, #6]
 800f396:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 800f39a:	2300      	movs	r3, #0
 800f39c:	2204      	movs	r2, #4
 800f39e:	f8ad 1006 	strh.w	r1, [sp, #6]
 800f3a2:	4620      	mov	r0, r4
 800f3a4:	2103      	movs	r1, #3
 800f3a6:	f8ad c004 	strh.w	ip, [sp, #4]
 800f3aa:	f000 fe53 	bl	8010054 <uxr_buffer_submessage_header>
 800f3ae:	a901      	add	r1, sp, #4
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	f001 fe39 	bl	8011028 <uxr_serialize_DELETE_Payload>
 800f3b6:	b002      	add	sp, #8
 800f3b8:	bd10      	pop	{r4, pc}
 800f3ba:	bf00      	nop
 800f3bc:	08014980 	.word	0x08014980

0800f3c0 <uxr_read_create_session_status>:
 800f3c0:	b510      	push	{r4, lr}
 800f3c2:	460b      	mov	r3, r1
 800f3c4:	b088      	sub	sp, #32
 800f3c6:	4604      	mov	r4, r0
 800f3c8:	a901      	add	r1, sp, #4
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f001 fe3c 	bl	8011048 <uxr_deserialize_STATUS_AGENT_Payload>
 800f3d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f3d4:	7163      	strb	r3, [r4, #5]
 800f3d6:	b008      	add	sp, #32
 800f3d8:	bd10      	pop	{r4, pc}
 800f3da:	bf00      	nop

0800f3dc <uxr_read_delete_session_status>:
 800f3dc:	b510      	push	{r4, lr}
 800f3de:	460b      	mov	r3, r1
 800f3e0:	b082      	sub	sp, #8
 800f3e2:	4604      	mov	r4, r0
 800f3e4:	4669      	mov	r1, sp
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f001 fe5e 	bl	80110a8 <uxr_deserialize_STATUS_Payload>
 800f3ec:	88e3      	ldrh	r3, [r4, #6]
 800f3ee:	2b02      	cmp	r3, #2
 800f3f0:	d001      	beq.n	800f3f6 <uxr_read_delete_session_status+0x1a>
 800f3f2:	b002      	add	sp, #8
 800f3f4:	bd10      	pop	{r4, pc}
 800f3f6:	f10d 0002 	add.w	r0, sp, #2
 800f3fa:	f7fe fef7 	bl	800e1ec <uxr_object_id_from_raw>
 800f3fe:	f8bd 3000 	ldrh.w	r3, [sp]
 800f402:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f40a:	bf08      	it	eq
 800f40c:	7162      	strbeq	r2, [r4, #5]
 800f40e:	b002      	add	sp, #8
 800f410:	bd10      	pop	{r4, pc}
 800f412:	bf00      	nop

0800f414 <uxr_stamp_create_session_header>:
 800f414:	b510      	push	{r4, lr}
 800f416:	2208      	movs	r2, #8
 800f418:	b08a      	sub	sp, #40	@ 0x28
 800f41a:	4604      	mov	r4, r0
 800f41c:	eb0d 0002 	add.w	r0, sp, r2
 800f420:	f7f9 fd42 	bl	8008ea8 <ucdr_init_buffer>
 800f424:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f428:	9400      	str	r4, [sp, #0]
 800f42a:	2300      	movs	r3, #0
 800f42c:	461a      	mov	r2, r3
 800f42e:	a802      	add	r0, sp, #8
 800f430:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800f434:	f001 f80c 	bl	8010450 <uxr_serialize_message_header>
 800f438:	b00a      	add	sp, #40	@ 0x28
 800f43a:	bd10      	pop	{r4, pc}

0800f43c <uxr_stamp_session_header>:
 800f43c:	b570      	push	{r4, r5, r6, lr}
 800f43e:	4604      	mov	r4, r0
 800f440:	b08a      	sub	sp, #40	@ 0x28
 800f442:	4616      	mov	r6, r2
 800f444:	2208      	movs	r2, #8
 800f446:	eb0d 0002 	add.w	r0, sp, r2
 800f44a:	460d      	mov	r5, r1
 800f44c:	4619      	mov	r1, r3
 800f44e:	f7f9 fd2b 	bl	8008ea8 <ucdr_init_buffer>
 800f452:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f456:	9400      	str	r4, [sp, #0]
 800f458:	4633      	mov	r3, r6
 800f45a:	462a      	mov	r2, r5
 800f45c:	a802      	add	r0, sp, #8
 800f45e:	f000 fff7 	bl	8010450 <uxr_serialize_message_header>
 800f462:	b00a      	add	sp, #40	@ 0x28
 800f464:	bd70      	pop	{r4, r5, r6, pc}
 800f466:	bf00      	nop

0800f468 <uxr_read_session_header>:
 800f468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f46a:	4607      	mov	r7, r0
 800f46c:	b085      	sub	sp, #20
 800f46e:	4608      	mov	r0, r1
 800f470:	460c      	mov	r4, r1
 800f472:	4615      	mov	r5, r2
 800f474:	461e      	mov	r6, r3
 800f476:	f7f9 fd47 	bl	8008f08 <ucdr_buffer_remaining>
 800f47a:	2808      	cmp	r0, #8
 800f47c:	d802      	bhi.n	800f484 <uxr_read_session_header+0x1c>
 800f47e:	2000      	movs	r0, #0
 800f480:	b005      	add	sp, #20
 800f482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f484:	ab03      	add	r3, sp, #12
 800f486:	9300      	str	r3, [sp, #0]
 800f488:	462a      	mov	r2, r5
 800f48a:	4633      	mov	r3, r6
 800f48c:	f10d 010b 	add.w	r1, sp, #11
 800f490:	4620      	mov	r0, r4
 800f492:	f000 fffb 	bl	801048c <uxr_deserialize_message_header>
 800f496:	783a      	ldrb	r2, [r7, #0]
 800f498:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f49c:	4293      	cmp	r3, r2
 800f49e:	d1ee      	bne.n	800f47e <uxr_read_session_header+0x16>
 800f4a0:	061b      	lsls	r3, r3, #24
 800f4a2:	d41c      	bmi.n	800f4de <uxr_read_session_header+0x76>
 800f4a4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800f4a8:	787b      	ldrb	r3, [r7, #1]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d003      	beq.n	800f4b6 <uxr_read_session_header+0x4e>
 800f4ae:	2001      	movs	r0, #1
 800f4b0:	f080 0001 	eor.w	r0, r0, #1
 800f4b4:	e7e4      	b.n	800f480 <uxr_read_session_header+0x18>
 800f4b6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800f4ba:	78bb      	ldrb	r3, [r7, #2]
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	f107 0102 	add.w	r1, r7, #2
 800f4c2:	d1f4      	bne.n	800f4ae <uxr_read_session_header+0x46>
 800f4c4:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800f4c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d1ee      	bne.n	800f4ae <uxr_read_session_header+0x46>
 800f4d0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800f4d4:	784b      	ldrb	r3, [r1, #1]
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d1e9      	bne.n	800f4ae <uxr_read_session_header+0x46>
 800f4da:	2000      	movs	r0, #0
 800f4dc:	e7e8      	b.n	800f4b0 <uxr_read_session_header+0x48>
 800f4de:	2001      	movs	r0, #1
 800f4e0:	e7ce      	b.n	800f480 <uxr_read_session_header+0x18>
 800f4e2:	bf00      	nop

0800f4e4 <uxr_session_header_offset>:
 800f4e4:	f990 3000 	ldrsb.w	r3, [r0]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	bfb4      	ite	lt
 800f4ec:	2004      	movlt	r0, #4
 800f4ee:	2008      	movge	r0, #8
 800f4f0:	4770      	bx	lr
 800f4f2:	bf00      	nop

0800f4f4 <uxr_init_base_object_request>:
 800f4f4:	b510      	push	{r4, lr}
 800f4f6:	88c3      	ldrh	r3, [r0, #6]
 800f4f8:	b082      	sub	sp, #8
 800f4fa:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800f4fe:	9101      	str	r1, [sp, #4]
 800f500:	f1a3 010a 	sub.w	r1, r3, #10
 800f504:	b289      	uxth	r1, r1
 800f506:	42a1      	cmp	r1, r4
 800f508:	d80e      	bhi.n	800f528 <uxr_init_base_object_request+0x34>
 800f50a:	3301      	adds	r3, #1
 800f50c:	b29c      	uxth	r4, r3
 800f50e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f512:	b2db      	uxtb	r3, r3
 800f514:	80c4      	strh	r4, [r0, #6]
 800f516:	9801      	ldr	r0, [sp, #4]
 800f518:	7011      	strb	r1, [r2, #0]
 800f51a:	7053      	strb	r3, [r2, #1]
 800f51c:	1c91      	adds	r1, r2, #2
 800f51e:	f7fe fe79 	bl	800e214 <uxr_object_id_to_raw>
 800f522:	4620      	mov	r0, r4
 800f524:	b002      	add	sp, #8
 800f526:	bd10      	pop	{r4, pc}
 800f528:	230a      	movs	r3, #10
 800f52a:	2100      	movs	r1, #0
 800f52c:	461c      	mov	r4, r3
 800f52e:	e7f1      	b.n	800f514 <uxr_init_base_object_request+0x20>

0800f530 <uxr_parse_base_object_request>:
 800f530:	b570      	push	{r4, r5, r6, lr}
 800f532:	4604      	mov	r4, r0
 800f534:	3002      	adds	r0, #2
 800f536:	460d      	mov	r5, r1
 800f538:	4616      	mov	r6, r2
 800f53a:	f7fe fe57 	bl	800e1ec <uxr_object_id_from_raw>
 800f53e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800f542:	8028      	strh	r0, [r5, #0]
 800f544:	806b      	strh	r3, [r5, #2]
 800f546:	8823      	ldrh	r3, [r4, #0]
 800f548:	ba5b      	rev16	r3, r3
 800f54a:	8033      	strh	r3, [r6, #0]
 800f54c:	bd70      	pop	{r4, r5, r6, pc}
 800f54e:	bf00      	nop

0800f550 <uxr_init_framing_io>:
 800f550:	2300      	movs	r3, #0
 800f552:	7041      	strb	r1, [r0, #1]
 800f554:	7003      	strb	r3, [r0, #0]
 800f556:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop

0800f55c <uxr_write_framed_msg>:
 800f55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f560:	f890 c001 	ldrb.w	ip, [r0, #1]
 800f564:	4617      	mov	r7, r2
 800f566:	227e      	movs	r2, #126	@ 0x7e
 800f568:	b085      	sub	sp, #20
 800f56a:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 800f56e:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 800f572:	2a01      	cmp	r2, #1
 800f574:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800f578:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 800f57c:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800f580:	4604      	mov	r4, r0
 800f582:	460e      	mov	r6, r1
 800f584:	469a      	mov	sl, r3
 800f586:	f240 812e 	bls.w	800f7e6 <uxr_write_framed_msg+0x28a>
 800f58a:	2003      	movs	r0, #3
 800f58c:	2102      	movs	r1, #2
 800f58e:	f04f 0905 	mov.w	r9, #5
 800f592:	2204      	movs	r2, #4
 800f594:	4686      	mov	lr, r0
 800f596:	460b      	mov	r3, r1
 800f598:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 800f59c:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 800f5a0:	f1bc 0f01 	cmp.w	ip, #1
 800f5a4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f5a8:	4421      	add	r1, r4
 800f5aa:	f240 8110 	bls.w	800f7ce <uxr_write_framed_msg+0x272>
 800f5ae:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800f5b2:	fa5f fc8b 	uxtb.w	ip, fp
 800f5b6:	f3cb 2107 	ubfx	r1, fp, #8, #8
 800f5ba:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 800f5be:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 800f5c2:	f1be 0f01 	cmp.w	lr, #1
 800f5c6:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 800f5ca:	b2ed      	uxtb	r5, r5
 800f5cc:	d94c      	bls.n	800f668 <uxr_write_framed_msg+0x10c>
 800f5ce:	4420      	add	r0, r4
 800f5d0:	2d01      	cmp	r5, #1
 800f5d2:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800f5d6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f5da:	d95d      	bls.n	800f698 <uxr_write_framed_msg+0x13c>
 800f5dc:	18a0      	adds	r0, r4, r2
 800f5de:	3201      	adds	r2, #1
 800f5e0:	b2d2      	uxtb	r2, r2
 800f5e2:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800f5e6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f5ea:	f1bb 0f00 	cmp.w	fp, #0
 800f5ee:	f000 8108 	beq.w	800f802 <uxr_write_framed_msg+0x2a6>
 800f5f2:	f04f 0c00 	mov.w	ip, #0
 800f5f6:	4661      	mov	r1, ip
 800f5f8:	46de      	mov	lr, fp
 800f5fa:	46e3      	mov	fp, ip
 800f5fc:	46d4      	mov	ip, sl
 800f5fe:	468a      	mov	sl, r1
 800f600:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 800f80c <uxr_write_framed_msg+0x2b0>
 800f604:	f81c 300a 	ldrb.w	r3, [ip, sl]
 800f608:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800f60c:	2901      	cmp	r1, #1
 800f60e:	d91b      	bls.n	800f648 <uxr_write_framed_msg+0xec>
 800f610:	2a29      	cmp	r2, #41	@ 0x29
 800f612:	d84e      	bhi.n	800f6b2 <uxr_write_framed_msg+0x156>
 800f614:	18a1      	adds	r1, r4, r2
 800f616:	3201      	adds	r2, #1
 800f618:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800f61c:	b2d2      	uxtb	r2, r2
 800f61e:	ea8b 0303 	eor.w	r3, fp, r3
 800f622:	b2db      	uxtb	r3, r3
 800f624:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f628:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 800f62c:	f10a 0a01 	add.w	sl, sl, #1
 800f630:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 800f634:	45d6      	cmp	lr, sl
 800f636:	d95a      	bls.n	800f6ee <uxr_write_framed_msg+0x192>
 800f638:	f81c 300a 	ldrb.w	r3, [ip, sl]
 800f63c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f640:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800f644:	2901      	cmp	r1, #1
 800f646:	d8e3      	bhi.n	800f610 <uxr_write_framed_msg+0xb4>
 800f648:	1c51      	adds	r1, r2, #1
 800f64a:	b2c9      	uxtb	r1, r1
 800f64c:	2929      	cmp	r1, #41	@ 0x29
 800f64e:	d830      	bhi.n	800f6b2 <uxr_write_framed_msg+0x156>
 800f650:	18a1      	adds	r1, r4, r2
 800f652:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 800f656:	3202      	adds	r2, #2
 800f658:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800f65c:	f083 0020 	eor.w	r0, r3, #32
 800f660:	b2d2      	uxtb	r2, r2
 800f662:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 800f666:	e7da      	b.n	800f61e <uxr_write_framed_msg+0xc2>
 800f668:	eb04 0e00 	add.w	lr, r4, r0
 800f66c:	f08c 0c20 	eor.w	ip, ip, #32
 800f670:	1c82      	adds	r2, r0, #2
 800f672:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 800f676:	b2d2      	uxtb	r2, r2
 800f678:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800f67c:	2d01      	cmp	r5, #1
 800f67e:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 800f682:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f686:	d907      	bls.n	800f698 <uxr_write_framed_msg+0x13c>
 800f688:	4422      	add	r2, r4
 800f68a:	3003      	adds	r0, #3
 800f68c:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 800f690:	b2c2      	uxtb	r2, r0
 800f692:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f696:	e7ac      	b.n	800f5f2 <uxr_write_framed_msg+0x96>
 800f698:	18a0      	adds	r0, r4, r2
 800f69a:	f081 0120 	eor.w	r1, r1, #32
 800f69e:	3202      	adds	r2, #2
 800f6a0:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 800f6a4:	b2d2      	uxtb	r2, r2
 800f6a6:	217d      	movs	r1, #125	@ 0x7d
 800f6a8:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800f6ac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f6b0:	e79f      	b.n	800f5f2 <uxr_write_framed_msg+0x96>
 800f6b2:	e9cd ba00 	strd	fp, sl, [sp]
 800f6b6:	2500      	movs	r5, #0
 800f6b8:	46e2      	mov	sl, ip
 800f6ba:	46f3      	mov	fp, lr
 800f6bc:	e000      	b.n	800f6c0 <uxr_write_framed_msg+0x164>
 800f6be:	b190      	cbz	r0, 800f6e6 <uxr_write_framed_msg+0x18a>
 800f6c0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f6c4:	1b52      	subs	r2, r2, r5
 800f6c6:	4643      	mov	r3, r8
 800f6c8:	4421      	add	r1, r4
 800f6ca:	4638      	mov	r0, r7
 800f6cc:	47b0      	blx	r6
 800f6ce:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f6d2:	4405      	add	r5, r0
 800f6d4:	4295      	cmp	r5, r2
 800f6d6:	d3f2      	bcc.n	800f6be <uxr_write_framed_msg+0x162>
 800f6d8:	46d4      	mov	ip, sl
 800f6da:	46de      	mov	lr, fp
 800f6dc:	f8dd a004 	ldr.w	sl, [sp, #4]
 800f6e0:	f8dd b000 	ldr.w	fp, [sp]
 800f6e4:	d06f      	beq.n	800f7c6 <uxr_write_framed_msg+0x26a>
 800f6e6:	2000      	movs	r0, #0
 800f6e8:	b005      	add	sp, #20
 800f6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ee:	46dc      	mov	ip, fp
 800f6f0:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f6f4:	f8ad c00c 	strh.w	ip, [sp, #12]
 800f6f8:	46f3      	mov	fp, lr
 800f6fa:	fa5f fc8c 	uxtb.w	ip, ip
 800f6fe:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800f702:	2b01      	cmp	r3, #1
 800f704:	f04f 0900 	mov.w	r9, #0
 800f708:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 800f70c:	d930      	bls.n	800f770 <uxr_write_framed_msg+0x214>
 800f70e:	2a29      	cmp	r2, #41	@ 0x29
 800f710:	d91c      	bls.n	800f74c <uxr_write_framed_msg+0x1f0>
 800f712:	2500      	movs	r5, #0
 800f714:	e001      	b.n	800f71a <uxr_write_framed_msg+0x1be>
 800f716:	2800      	cmp	r0, #0
 800f718:	d0e5      	beq.n	800f6e6 <uxr_write_framed_msg+0x18a>
 800f71a:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f71e:	1b52      	subs	r2, r2, r5
 800f720:	4643      	mov	r3, r8
 800f722:	4421      	add	r1, r4
 800f724:	4638      	mov	r0, r7
 800f726:	47b0      	blx	r6
 800f728:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f72c:	4405      	add	r5, r0
 800f72e:	4295      	cmp	r5, r2
 800f730:	d3f1      	bcc.n	800f716 <uxr_write_framed_msg+0x1ba>
 800f732:	d1d8      	bne.n	800f6e6 <uxr_write_framed_msg+0x18a>
 800f734:	f109 0310 	add.w	r3, r9, #16
 800f738:	446b      	add	r3, sp
 800f73a:	2200      	movs	r2, #0
 800f73c:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 800f740:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f744:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800f748:	2b01      	cmp	r3, #1
 800f74a:	d911      	bls.n	800f770 <uxr_write_framed_msg+0x214>
 800f74c:	18a3      	adds	r3, r4, r2
 800f74e:	3201      	adds	r2, #1
 800f750:	b2d2      	uxtb	r2, r2
 800f752:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 800f756:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f75a:	f1b9 0f00 	cmp.w	r9, #0
 800f75e:	d119      	bne.n	800f794 <uxr_write_framed_msg+0x238>
 800f760:	f89d c00d 	ldrb.w	ip, [sp, #13]
 800f764:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800f768:	2b01      	cmp	r3, #1
 800f76a:	f04f 0901 	mov.w	r9, #1
 800f76e:	d8ce      	bhi.n	800f70e <uxr_write_framed_msg+0x1b2>
 800f770:	1c53      	adds	r3, r2, #1
 800f772:	b2db      	uxtb	r3, r3
 800f774:	2b29      	cmp	r3, #41	@ 0x29
 800f776:	d8cc      	bhi.n	800f712 <uxr_write_framed_msg+0x1b6>
 800f778:	18a3      	adds	r3, r4, r2
 800f77a:	3202      	adds	r2, #2
 800f77c:	f08c 0c20 	eor.w	ip, ip, #32
 800f780:	b2d2      	uxtb	r2, r2
 800f782:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 800f786:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 800f78a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f78e:	f1b9 0f00 	cmp.w	r9, #0
 800f792:	d0e5      	beq.n	800f760 <uxr_write_framed_msg+0x204>
 800f794:	2500      	movs	r5, #0
 800f796:	e001      	b.n	800f79c <uxr_write_framed_msg+0x240>
 800f798:	2800      	cmp	r0, #0
 800f79a:	d0a4      	beq.n	800f6e6 <uxr_write_framed_msg+0x18a>
 800f79c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f7a0:	1b52      	subs	r2, r2, r5
 800f7a2:	4643      	mov	r3, r8
 800f7a4:	4421      	add	r1, r4
 800f7a6:	4638      	mov	r0, r7
 800f7a8:	47b0      	blx	r6
 800f7aa:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f7ae:	4405      	add	r5, r0
 800f7b0:	4295      	cmp	r5, r2
 800f7b2:	d3f1      	bcc.n	800f798 <uxr_write_framed_msg+0x23c>
 800f7b4:	d197      	bne.n	800f6e6 <uxr_write_framed_msg+0x18a>
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	fa1f f08b 	uxth.w	r0, fp
 800f7bc:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f7c0:	b005      	add	sp, #20
 800f7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f7cc:	e732      	b.n	800f634 <uxr_write_framed_msg+0xd8>
 800f7ce:	44a6      	add	lr, r4
 800f7d0:	f085 0520 	eor.w	r5, r5, #32
 800f7d4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800f7d8:	4610      	mov	r0, r2
 800f7da:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 800f7de:	464a      	mov	r2, r9
 800f7e0:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 800f7e4:	e6e5      	b.n	800f5b2 <uxr_write_framed_msg+0x56>
 800f7e6:	f08c 0c20 	eor.w	ip, ip, #32
 800f7ea:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 800f7ee:	2103      	movs	r1, #3
 800f7f0:	2004      	movs	r0, #4
 800f7f2:	f04f 0906 	mov.w	r9, #6
 800f7f6:	2205      	movs	r2, #5
 800f7f8:	4686      	mov	lr, r0
 800f7fa:	460b      	mov	r3, r1
 800f7fc:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800f800:	e6ca      	b.n	800f598 <uxr_write_framed_msg+0x3c>
 800f802:	f8ad b00c 	strh.w	fp, [sp, #12]
 800f806:	46dc      	mov	ip, fp
 800f808:	e779      	b.n	800f6fe <uxr_write_framed_msg+0x1a2>
 800f80a:	bf00      	nop
 800f80c:	080153f4 	.word	0x080153f4

0800f810 <uxr_framing_read_transport>:
 800f810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f814:	4604      	mov	r4, r0
 800f816:	b083      	sub	sp, #12
 800f818:	461f      	mov	r7, r3
 800f81a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800f81e:	4689      	mov	r9, r1
 800f820:	4692      	mov	sl, r2
 800f822:	f000 fc5d 	bl	80100e0 <uxr_millis>
 800f826:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f82a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800f82e:	42b3      	cmp	r3, r6
 800f830:	4680      	mov	r8, r0
 800f832:	d062      	beq.n	800f8fa <uxr_framing_read_transport+0xea>
 800f834:	d81c      	bhi.n	800f870 <uxr_framing_read_transport+0x60>
 800f836:	1e75      	subs	r5, r6, #1
 800f838:	1aed      	subs	r5, r5, r3
 800f83a:	b2ed      	uxtb	r5, r5
 800f83c:	2600      	movs	r6, #0
 800f83e:	455d      	cmp	r5, fp
 800f840:	d81f      	bhi.n	800f882 <uxr_framing_read_transport+0x72>
 800f842:	19ab      	adds	r3, r5, r6
 800f844:	455b      	cmp	r3, fp
 800f846:	bf84      	itt	hi
 800f848:	ebab 0b05 	subhi.w	fp, fp, r5
 800f84c:	fa5f f68b 	uxtbhi.w	r6, fp
 800f850:	b9e5      	cbnz	r5, 800f88c <uxr_framing_read_transport+0x7c>
 800f852:	f04f 0b00 	mov.w	fp, #0
 800f856:	f000 fc43 	bl	80100e0 <uxr_millis>
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	eba0 0108 	sub.w	r1, r0, r8
 800f860:	1a5b      	subs	r3, r3, r1
 800f862:	4658      	mov	r0, fp
 800f864:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f868:	603b      	str	r3, [r7, #0]
 800f86a:	b003      	add	sp, #12
 800f86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f870:	2e00      	cmp	r6, #0
 800f872:	d04a      	beq.n	800f90a <uxr_framing_read_transport+0xfa>
 800f874:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 800f878:	b2dd      	uxtb	r5, r3
 800f87a:	3e01      	subs	r6, #1
 800f87c:	455d      	cmp	r5, fp
 800f87e:	b2f6      	uxtb	r6, r6
 800f880:	d9df      	bls.n	800f842 <uxr_framing_read_transport+0x32>
 800f882:	fa5f f58b 	uxtb.w	r5, fp
 800f886:	2600      	movs	r6, #0
 800f888:	2d00      	cmp	r5, #0
 800f88a:	d0e2      	beq.n	800f852 <uxr_framing_read_transport+0x42>
 800f88c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f890:	3102      	adds	r1, #2
 800f892:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f894:	9300      	str	r3, [sp, #0]
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	4421      	add	r1, r4
 800f89a:	462a      	mov	r2, r5
 800f89c:	4650      	mov	r0, sl
 800f89e:	47c8      	blx	r9
 800f8a0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f8a4:	4a1b      	ldr	r2, [pc, #108]	@ (800f914 <uxr_framing_read_transport+0x104>)
 800f8a6:	4403      	add	r3, r0
 800f8a8:	0859      	lsrs	r1, r3, #1
 800f8aa:	4683      	mov	fp, r0
 800f8ac:	fba2 0101 	umull	r0, r1, r2, r1
 800f8b0:	0889      	lsrs	r1, r1, #2
 800f8b2:	222a      	movs	r2, #42	@ 0x2a
 800f8b4:	fb02 3111 	mls	r1, r2, r1, r3
 800f8b8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800f8bc:	f1bb 0f00 	cmp.w	fp, #0
 800f8c0:	d0c7      	beq.n	800f852 <uxr_framing_read_transport+0x42>
 800f8c2:	45ab      	cmp	fp, r5
 800f8c4:	d1c7      	bne.n	800f856 <uxr_framing_read_transport+0x46>
 800f8c6:	2e00      	cmp	r6, #0
 800f8c8:	d0c5      	beq.n	800f856 <uxr_framing_read_transport+0x46>
 800f8ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f8cc:	9300      	str	r3, [sp, #0]
 800f8ce:	3102      	adds	r1, #2
 800f8d0:	4632      	mov	r2, r6
 800f8d2:	4421      	add	r1, r4
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	4650      	mov	r0, sl
 800f8d8:	47c8      	blx	r9
 800f8da:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f8de:	4a0d      	ldr	r2, [pc, #52]	@ (800f914 <uxr_framing_read_transport+0x104>)
 800f8e0:	4403      	add	r3, r0
 800f8e2:	0859      	lsrs	r1, r3, #1
 800f8e4:	fba2 2101 	umull	r2, r1, r2, r1
 800f8e8:	0889      	lsrs	r1, r1, #2
 800f8ea:	222a      	movs	r2, #42	@ 0x2a
 800f8ec:	fb02 3311 	mls	r3, r2, r1, r3
 800f8f0:	eb00 0b05 	add.w	fp, r0, r5
 800f8f4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800f8f8:	e7ad      	b.n	800f856 <uxr_framing_read_transport+0x46>
 800f8fa:	2600      	movs	r6, #0
 800f8fc:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800f900:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800f902:	d9be      	bls.n	800f882 <uxr_framing_read_transport+0x72>
 800f904:	2529      	movs	r5, #41	@ 0x29
 800f906:	2102      	movs	r1, #2
 800f908:	e7c3      	b.n	800f892 <uxr_framing_read_transport+0x82>
 800f90a:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 800f90e:	b2dd      	uxtb	r5, r3
 800f910:	e795      	b.n	800f83e <uxr_framing_read_transport+0x2e>
 800f912:	bf00      	nop
 800f914:	30c30c31 	.word	0x30c30c31

0800f918 <uxr_read_framed_msg>:
 800f918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f91c:	461d      	mov	r5, r3
 800f91e:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 800f922:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800f926:	b085      	sub	sp, #20
 800f928:	459c      	cmp	ip, r3
 800f92a:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 800f92e:	4604      	mov	r4, r0
 800f930:	460f      	mov	r7, r1
 800f932:	4616      	mov	r6, r2
 800f934:	f000 81ae 	beq.w	800fc94 <uxr_read_framed_msg+0x37c>
 800f938:	2000      	movs	r0, #0
 800f93a:	4639      	mov	r1, r7
 800f93c:	2800      	cmp	r0, #0
 800f93e:	d138      	bne.n	800f9b2 <uxr_read_framed_msg+0x9a>
 800f940:	468a      	mov	sl, r1
 800f942:	7823      	ldrb	r3, [r4, #0]
 800f944:	2b07      	cmp	r3, #7
 800f946:	d8fd      	bhi.n	800f944 <uxr_read_framed_msg+0x2c>
 800f948:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f94c:	0116013b 	.word	0x0116013b
 800f950:	00cd00f0 	.word	0x00cd00f0
 800f954:	005a00a0 	.word	0x005a00a0
 800f958:	00080037 	.word	0x00080037
 800f95c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f960:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f964:	4290      	cmp	r0, r2
 800f966:	f000 8167 	beq.w	800fc38 <uxr_read_framed_msg+0x320>
 800f96a:	18a3      	adds	r3, r4, r2
 800f96c:	1c57      	adds	r7, r2, #1
 800f96e:	49c7      	ldr	r1, [pc, #796]	@ (800fc8c <uxr_read_framed_msg+0x374>)
 800f970:	f893 c002 	ldrb.w	ip, [r3, #2]
 800f974:	087b      	lsrs	r3, r7, #1
 800f976:	fba1 8303 	umull	r8, r3, r1, r3
 800f97a:	089b      	lsrs	r3, r3, #2
 800f97c:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800f980:	fb08 7313 	mls	r3, r8, r3, r7
 800f984:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800f988:	b2df      	uxtb	r7, r3
 800f98a:	f000 81b2 	beq.w	800fcf2 <uxr_read_framed_msg+0x3da>
 800f98e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800f992:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 800f996:	f000 8220 	beq.w	800fdda <uxr_read_framed_msg+0x4c2>
 800f99a:	4661      	mov	r1, ip
 800f99c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800f99e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800f9a0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f9a4:	b29b      	uxth	r3, r3
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800f9ac:	7021      	strb	r1, [r4, #0]
 800f9ae:	f000 8198 	beq.w	800fce2 <uxr_read_framed_msg+0x3ca>
 800f9b2:	2000      	movs	r0, #0
 800f9b4:	b005      	add	sp, #20
 800f9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ba:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800f9be:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f9c2:	4297      	cmp	r7, r2
 800f9c4:	f000 8148 	beq.w	800fc58 <uxr_read_framed_msg+0x340>
 800f9c8:	18a3      	adds	r3, r4, r2
 800f9ca:	f102 0c01 	add.w	ip, r2, #1
 800f9ce:	49af      	ldr	r1, [pc, #700]	@ (800fc8c <uxr_read_framed_msg+0x374>)
 800f9d0:	7898      	ldrb	r0, [r3, #2]
 800f9d2:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800f9d6:	fba1 8303 	umull	r8, r3, r1, r3
 800f9da:	089b      	lsrs	r3, r3, #2
 800f9dc:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800f9e0:	fb08 c313 	mls	r3, r8, r3, ip
 800f9e4:	287d      	cmp	r0, #125	@ 0x7d
 800f9e6:	fa5f fc83 	uxtb.w	ip, r3
 800f9ea:	f000 8194 	beq.w	800fd16 <uxr_read_framed_msg+0x3fe>
 800f9ee:	287e      	cmp	r0, #126	@ 0x7e
 800f9f0:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800f9f4:	f000 8200 	beq.w	800fdf8 <uxr_read_framed_msg+0x4e0>
 800f9f8:	2307      	movs	r3, #7
 800f9fa:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800f9fc:	7023      	strb	r3, [r4, #0]
 800f9fe:	e7a0      	b.n	800f942 <uxr_read_framed_msg+0x2a>
 800fa00:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800fa02:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800fa04:	429f      	cmp	r7, r3
 800fa06:	f240 8164 	bls.w	800fcd2 <uxr_read_framed_msg+0x3ba>
 800fa0a:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 800fc8c <uxr_read_framed_msg+0x374>
 800fa0e:	f8cd a00c 	str.w	sl, [sp, #12]
 800fa12:	212a      	movs	r1, #42	@ 0x2a
 800fa14:	e01f      	b.n	800fa56 <uxr_read_framed_msg+0x13e>
 800fa16:	f89a e002 	ldrb.w	lr, [sl, #2]
 800fa1a:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 800fa1e:	f000 80ea 	beq.w	800fbf6 <uxr_read_framed_msg+0x2de>
 800fa22:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800fa26:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800fa2a:	f000 8142 	beq.w	800fcb2 <uxr_read_framed_msg+0x39a>
 800fa2e:	f805 e003 	strb.w	lr, [r5, r3]
 800fa32:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 800fa34:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800fa36:	4f96      	ldr	r7, [pc, #600]	@ (800fc90 <uxr_read_framed_msg+0x378>)
 800fa38:	ea80 020e 	eor.w	r2, r0, lr
 800fa3c:	b2d2      	uxtb	r2, r2
 800fa3e:	3301      	adds	r3, #1
 800fa40:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800fa44:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 800fa4c:	42bb      	cmp	r3, r7
 800fa4e:	8663      	strh	r3, [r4, #50]	@ 0x32
 800fa50:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800fa52:	f080 80e7 	bcs.w	800fc24 <uxr_read_framed_msg+0x30c>
 800fa56:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800fa5a:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 800fa5e:	f100 0c01 	add.w	ip, r0, #1
 800fa62:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 800fa66:	fba9 e20e 	umull	lr, r2, r9, lr
 800fa6a:	0892      	lsrs	r2, r2, #2
 800fa6c:	fb01 c212 	mls	r2, r1, r2, ip
 800fa70:	4580      	cmp	r8, r0
 800fa72:	eb04 0a00 	add.w	sl, r4, r0
 800fa76:	fa5f fc82 	uxtb.w	ip, r2
 800fa7a:	d1cc      	bne.n	800fa16 <uxr_read_framed_msg+0xfe>
 800fa7c:	42bb      	cmp	r3, r7
 800fa7e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800fa82:	f040 8128 	bne.w	800fcd6 <uxr_read_framed_msg+0x3be>
 800fa86:	2306      	movs	r3, #6
 800fa88:	7023      	strb	r3, [r4, #0]
 800fa8a:	e75a      	b.n	800f942 <uxr_read_framed_msg+0x2a>
 800fa8c:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800fa90:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800fa94:	4297      	cmp	r7, r2
 800fa96:	f000 80cf 	beq.w	800fc38 <uxr_read_framed_msg+0x320>
 800fa9a:	18a3      	adds	r3, r4, r2
 800fa9c:	f102 0c01 	add.w	ip, r2, #1
 800faa0:	497a      	ldr	r1, [pc, #488]	@ (800fc8c <uxr_read_framed_msg+0x374>)
 800faa2:	7898      	ldrb	r0, [r3, #2]
 800faa4:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800faa8:	fba1 8303 	umull	r8, r3, r1, r3
 800faac:	089b      	lsrs	r3, r3, #2
 800faae:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800fab2:	fb08 c313 	mls	r3, r8, r3, ip
 800fab6:	287d      	cmp	r0, #125	@ 0x7d
 800fab8:	fa5f fc83 	uxtb.w	ip, r3
 800fabc:	f000 813d 	beq.w	800fd3a <uxr_read_framed_msg+0x422>
 800fac0:	287e      	cmp	r0, #126	@ 0x7e
 800fac2:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800fac6:	f000 8188 	beq.w	800fdda <uxr_read_framed_msg+0x4c2>
 800faca:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800facc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800face:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 800fad2:	b29b      	uxth	r3, r3
 800fad4:	2200      	movs	r2, #0
 800fad6:	428b      	cmp	r3, r1
 800fad8:	8623      	strh	r3, [r4, #48]	@ 0x30
 800fada:	8662      	strh	r2, [r4, #50]	@ 0x32
 800fadc:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800fade:	f240 80f5 	bls.w	800fccc <uxr_read_framed_msg+0x3b4>
 800fae2:	7022      	strb	r2, [r4, #0]
 800fae4:	e765      	b.n	800f9b2 <uxr_read_framed_msg+0x9a>
 800fae6:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800faea:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800faee:	4297      	cmp	r7, r2
 800faf0:	f000 80b2 	beq.w	800fc58 <uxr_read_framed_msg+0x340>
 800faf4:	18a3      	adds	r3, r4, r2
 800faf6:	f102 0c01 	add.w	ip, r2, #1
 800fafa:	4964      	ldr	r1, [pc, #400]	@ (800fc8c <uxr_read_framed_msg+0x374>)
 800fafc:	7898      	ldrb	r0, [r3, #2]
 800fafe:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800fb02:	fba1 8303 	umull	r8, r3, r1, r3
 800fb06:	089b      	lsrs	r3, r3, #2
 800fb08:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800fb0c:	fb08 c313 	mls	r3, r8, r3, ip
 800fb10:	287d      	cmp	r0, #125	@ 0x7d
 800fb12:	fa5f fc83 	uxtb.w	ip, r3
 800fb16:	f000 813b 	beq.w	800fd90 <uxr_read_framed_msg+0x478>
 800fb1a:	287e      	cmp	r0, #126	@ 0x7e
 800fb1c:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800fb20:	f000 816a 	beq.w	800fdf8 <uxr_read_framed_msg+0x4e0>
 800fb24:	2304      	movs	r3, #4
 800fb26:	8620      	strh	r0, [r4, #48]	@ 0x30
 800fb28:	7023      	strb	r3, [r4, #0]
 800fb2a:	e70a      	b.n	800f942 <uxr_read_framed_msg+0x2a>
 800fb2c:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800fb30:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800fb34:	4297      	cmp	r7, r2
 800fb36:	f000 80c4 	beq.w	800fcc2 <uxr_read_framed_msg+0x3aa>
 800fb3a:	18a3      	adds	r3, r4, r2
 800fb3c:	f102 0c01 	add.w	ip, r2, #1
 800fb40:	4952      	ldr	r1, [pc, #328]	@ (800fc8c <uxr_read_framed_msg+0x374>)
 800fb42:	7898      	ldrb	r0, [r3, #2]
 800fb44:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800fb48:	fba1 8303 	umull	r8, r3, r1, r3
 800fb4c:	089b      	lsrs	r3, r3, #2
 800fb4e:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800fb52:	fb08 c313 	mls	r3, r8, r3, ip
 800fb56:	287d      	cmp	r0, #125	@ 0x7d
 800fb58:	fa5f fc83 	uxtb.w	ip, r3
 800fb5c:	f000 812b 	beq.w	800fdb6 <uxr_read_framed_msg+0x49e>
 800fb60:	287e      	cmp	r0, #126	@ 0x7e
 800fb62:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800fb66:	f000 8155 	beq.w	800fe14 <uxr_read_framed_msg+0x4fc>
 800fb6a:	7863      	ldrb	r3, [r4, #1]
 800fb6c:	4283      	cmp	r3, r0
 800fb6e:	bf0c      	ite	eq
 800fb70:	2303      	moveq	r3, #3
 800fb72:	2300      	movne	r3, #0
 800fb74:	7023      	strb	r3, [r4, #0]
 800fb76:	e6e4      	b.n	800f942 <uxr_read_framed_msg+0x2a>
 800fb78:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800fb7c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800fb80:	2300      	movs	r3, #0
 800fb82:	4290      	cmp	r0, r2
 800fb84:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 800fb88:	d06b      	beq.n	800fc62 <uxr_read_framed_msg+0x34a>
 800fb8a:	18a3      	adds	r3, r4, r2
 800fb8c:	f102 0c01 	add.w	ip, r2, #1
 800fb90:	493e      	ldr	r1, [pc, #248]	@ (800fc8c <uxr_read_framed_msg+0x374>)
 800fb92:	789f      	ldrb	r7, [r3, #2]
 800fb94:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800fb98:	fba1 8303 	umull	r8, r3, r1, r3
 800fb9c:	089b      	lsrs	r3, r3, #2
 800fb9e:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800fba2:	fb08 c313 	mls	r3, r8, r3, ip
 800fba6:	2f7d      	cmp	r7, #125	@ 0x7d
 800fba8:	fa5f fc83 	uxtb.w	ip, r3
 800fbac:	f000 80d8 	beq.w	800fd60 <uxr_read_framed_msg+0x448>
 800fbb0:	2f7e      	cmp	r7, #126	@ 0x7e
 800fbb2:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800fbb6:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 800fbba:	d052      	beq.n	800fc62 <uxr_read_framed_msg+0x34a>
 800fbbc:	2302      	movs	r3, #2
 800fbbe:	7023      	strb	r3, [r4, #0]
 800fbc0:	e6bf      	b.n	800f942 <uxr_read_framed_msg+0x2a>
 800fbc2:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 800fbc6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800fbca:	4930      	ldr	r1, [pc, #192]	@ (800fc8c <uxr_read_framed_msg+0x374>)
 800fbcc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800fbd0:	e004      	b.n	800fbdc <uxr_read_framed_msg+0x2c4>
 800fbd2:	78bb      	ldrb	r3, [r7, #2]
 800fbd4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800fbd8:	2b7e      	cmp	r3, #126	@ 0x7e
 800fbda:	d02a      	beq.n	800fc32 <uxr_read_framed_msg+0x31a>
 800fbdc:	1c50      	adds	r0, r2, #1
 800fbde:	0843      	lsrs	r3, r0, #1
 800fbe0:	fba1 e303 	umull	lr, r3, r1, r3
 800fbe4:	089b      	lsrs	r3, r3, #2
 800fbe6:	fb0c 0013 	mls	r0, ip, r3, r0
 800fbea:	4590      	cmp	r8, r2
 800fbec:	eb04 0702 	add.w	r7, r4, r2
 800fbf0:	b2c2      	uxtb	r2, r0
 800fbf2:	d1ee      	bne.n	800fbd2 <uxr_read_framed_msg+0x2ba>
 800fbf4:	e6dd      	b.n	800f9b2 <uxr_read_framed_msg+0x9a>
 800fbf6:	3002      	adds	r0, #2
 800fbf8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 800fbfc:	eb04 0a02 	add.w	sl, r4, r2
 800fc00:	fba9 e20e 	umull	lr, r2, r9, lr
 800fc04:	0892      	lsrs	r2, r2, #2
 800fc06:	45e0      	cmp	r8, ip
 800fc08:	fb01 0012 	mls	r0, r1, r2, r0
 800fc0c:	f43f af36 	beq.w	800fa7c <uxr_read_framed_msg+0x164>
 800fc10:	f89a e002 	ldrb.w	lr, [sl, #2]
 800fc14:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800fc18:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800fc1c:	d049      	beq.n	800fcb2 <uxr_read_framed_msg+0x39a>
 800fc1e:	f08e 0e20 	eor.w	lr, lr, #32
 800fc22:	e704      	b.n	800fa2e <uxr_read_framed_msg+0x116>
 800fc24:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800fc28:	f43f af2d 	beq.w	800fa86 <uxr_read_framed_msg+0x16e>
 800fc2c:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800fc30:	d151      	bne.n	800fcd6 <uxr_read_framed_msg+0x3be>
 800fc32:	2301      	movs	r3, #1
 800fc34:	7023      	strb	r3, [r4, #0]
 800fc36:	e684      	b.n	800f942 <uxr_read_framed_msg+0x2a>
 800fc38:	4651      	mov	r1, sl
 800fc3a:	f8cd b000 	str.w	fp, [sp]
 800fc3e:	2301      	movs	r3, #1
 800fc40:	9301      	str	r3, [sp, #4]
 800fc42:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fc44:	9103      	str	r1, [sp, #12]
 800fc46:	4632      	mov	r2, r6
 800fc48:	4620      	mov	r0, r4
 800fc4a:	f7ff fde1 	bl	800f810 <uxr_framing_read_transport>
 800fc4e:	fab0 f080 	clz	r0, r0
 800fc52:	9903      	ldr	r1, [sp, #12]
 800fc54:	0940      	lsrs	r0, r0, #5
 800fc56:	e671      	b.n	800f93c <uxr_read_framed_msg+0x24>
 800fc58:	4651      	mov	r1, sl
 800fc5a:	f8cd b000 	str.w	fp, [sp]
 800fc5e:	2302      	movs	r3, #2
 800fc60:	e7ee      	b.n	800fc40 <uxr_read_framed_msg+0x328>
 800fc62:	2304      	movs	r3, #4
 800fc64:	9301      	str	r3, [sp, #4]
 800fc66:	f8cd b000 	str.w	fp, [sp]
 800fc6a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fc6c:	4632      	mov	r2, r6
 800fc6e:	4651      	mov	r1, sl
 800fc70:	4620      	mov	r0, r4
 800fc72:	f7ff fdcd 	bl	800f810 <uxr_framing_read_transport>
 800fc76:	2800      	cmp	r0, #0
 800fc78:	f47f ae63 	bne.w	800f942 <uxr_read_framed_msg+0x2a>
 800fc7c:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 800fc80:	387e      	subs	r0, #126	@ 0x7e
 800fc82:	4651      	mov	r1, sl
 800fc84:	bf18      	it	ne
 800fc86:	2001      	movne	r0, #1
 800fc88:	e658      	b.n	800f93c <uxr_read_framed_msg+0x24>
 800fc8a:	bf00      	nop
 800fc8c:	30c30c31 	.word	0x30c30c31
 800fc90:	080153f4 	.word	0x080153f4
 800fc94:	2305      	movs	r3, #5
 800fc96:	9301      	str	r3, [sp, #4]
 800fc98:	f8cd b000 	str.w	fp, [sp]
 800fc9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fc9e:	f7ff fdb7 	bl	800f810 <uxr_framing_read_transport>
 800fca2:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 800fca6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	f43f ae81 	beq.w	800f9b2 <uxr_read_framed_msg+0x9a>
 800fcb0:	e642      	b.n	800f938 <uxr_read_framed_msg+0x20>
 800fcb2:	42bb      	cmp	r3, r7
 800fcb4:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800fcb8:	f43f aee5 	beq.w	800fa86 <uxr_read_framed_msg+0x16e>
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	7023      	strb	r3, [r4, #0]
 800fcc0:	e63f      	b.n	800f942 <uxr_read_framed_msg+0x2a>
 800fcc2:	4651      	mov	r1, sl
 800fcc4:	f8cd b000 	str.w	fp, [sp]
 800fcc8:	2303      	movs	r3, #3
 800fcca:	e7b9      	b.n	800fc40 <uxr_read_framed_msg+0x328>
 800fccc:	2305      	movs	r3, #5
 800fcce:	7023      	strb	r3, [r4, #0]
 800fcd0:	e637      	b.n	800f942 <uxr_read_framed_msg+0x2a>
 800fcd2:	f43f aed8 	beq.w	800fa86 <uxr_read_framed_msg+0x16e>
 800fcd6:	1afb      	subs	r3, r7, r3
 800fcd8:	3302      	adds	r3, #2
 800fcda:	e9cd b300 	strd	fp, r3, [sp]
 800fcde:	4651      	mov	r1, sl
 800fce0:	e7af      	b.n	800fc42 <uxr_read_framed_msg+0x32a>
 800fce2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fce4:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800fce8:	7013      	strb	r3, [r2, #0]
 800fcea:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800fcec:	b005      	add	sp, #20
 800fcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcf2:	4287      	cmp	r7, r0
 800fcf4:	d0a0      	beq.n	800fc38 <uxr_read_framed_msg+0x320>
 800fcf6:	4423      	add	r3, r4
 800fcf8:	3202      	adds	r2, #2
 800fcfa:	7898      	ldrb	r0, [r3, #2]
 800fcfc:	0853      	lsrs	r3, r2, #1
 800fcfe:	fba1 e303 	umull	lr, r3, r1, r3
 800fd02:	089b      	lsrs	r3, r3, #2
 800fd04:	fb08 2213 	mls	r2, r8, r3, r2
 800fd08:	287e      	cmp	r0, #126	@ 0x7e
 800fd0a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800fd0e:	d064      	beq.n	800fdda <uxr_read_framed_msg+0x4c2>
 800fd10:	f080 0120 	eor.w	r1, r0, #32
 800fd14:	e642      	b.n	800f99c <uxr_read_framed_msg+0x84>
 800fd16:	45bc      	cmp	ip, r7
 800fd18:	d09e      	beq.n	800fc58 <uxr_read_framed_msg+0x340>
 800fd1a:	4423      	add	r3, r4
 800fd1c:	3202      	adds	r2, #2
 800fd1e:	7898      	ldrb	r0, [r3, #2]
 800fd20:	0853      	lsrs	r3, r2, #1
 800fd22:	fba1 e303 	umull	lr, r3, r1, r3
 800fd26:	089b      	lsrs	r3, r3, #2
 800fd28:	fb08 2213 	mls	r2, r8, r3, r2
 800fd2c:	287e      	cmp	r0, #126	@ 0x7e
 800fd2e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800fd32:	d061      	beq.n	800fdf8 <uxr_read_framed_msg+0x4e0>
 800fd34:	f080 0020 	eor.w	r0, r0, #32
 800fd38:	e65e      	b.n	800f9f8 <uxr_read_framed_msg+0xe0>
 800fd3a:	4567      	cmp	r7, ip
 800fd3c:	f43f af7c 	beq.w	800fc38 <uxr_read_framed_msg+0x320>
 800fd40:	4423      	add	r3, r4
 800fd42:	3202      	adds	r2, #2
 800fd44:	7898      	ldrb	r0, [r3, #2]
 800fd46:	0853      	lsrs	r3, r2, #1
 800fd48:	fba1 e303 	umull	lr, r3, r1, r3
 800fd4c:	089b      	lsrs	r3, r3, #2
 800fd4e:	fb08 2213 	mls	r2, r8, r3, r2
 800fd52:	287e      	cmp	r0, #126	@ 0x7e
 800fd54:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800fd58:	d03f      	beq.n	800fdda <uxr_read_framed_msg+0x4c2>
 800fd5a:	f080 0020 	eor.w	r0, r0, #32
 800fd5e:	e6b4      	b.n	800faca <uxr_read_framed_msg+0x1b2>
 800fd60:	4560      	cmp	r0, ip
 800fd62:	f43f af7e 	beq.w	800fc62 <uxr_read_framed_msg+0x34a>
 800fd66:	4423      	add	r3, r4
 800fd68:	3202      	adds	r2, #2
 800fd6a:	7898      	ldrb	r0, [r3, #2]
 800fd6c:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800fd70:	0853      	lsrs	r3, r2, #1
 800fd72:	fba1 e303 	umull	lr, r3, r1, r3
 800fd76:	089b      	lsrs	r3, r3, #2
 800fd78:	fb08 2213 	mls	r2, r8, r3, r2
 800fd7c:	287e      	cmp	r0, #126	@ 0x7e
 800fd7e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800fd82:	f43f af6e 	beq.w	800fc62 <uxr_read_framed_msg+0x34a>
 800fd86:	f080 0020 	eor.w	r0, r0, #32
 800fd8a:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800fd8e:	e715      	b.n	800fbbc <uxr_read_framed_msg+0x2a4>
 800fd90:	4567      	cmp	r7, ip
 800fd92:	f43f af61 	beq.w	800fc58 <uxr_read_framed_msg+0x340>
 800fd96:	4423      	add	r3, r4
 800fd98:	3202      	adds	r2, #2
 800fd9a:	7898      	ldrb	r0, [r3, #2]
 800fd9c:	0853      	lsrs	r3, r2, #1
 800fd9e:	fba1 e303 	umull	lr, r3, r1, r3
 800fda2:	089b      	lsrs	r3, r3, #2
 800fda4:	fb08 2213 	mls	r2, r8, r3, r2
 800fda8:	287e      	cmp	r0, #126	@ 0x7e
 800fdaa:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800fdae:	d023      	beq.n	800fdf8 <uxr_read_framed_msg+0x4e0>
 800fdb0:	f080 0020 	eor.w	r0, r0, #32
 800fdb4:	e6b6      	b.n	800fb24 <uxr_read_framed_msg+0x20c>
 800fdb6:	45bc      	cmp	ip, r7
 800fdb8:	d083      	beq.n	800fcc2 <uxr_read_framed_msg+0x3aa>
 800fdba:	4423      	add	r3, r4
 800fdbc:	3202      	adds	r2, #2
 800fdbe:	7898      	ldrb	r0, [r3, #2]
 800fdc0:	0853      	lsrs	r3, r2, #1
 800fdc2:	fba1 e303 	umull	lr, r3, r1, r3
 800fdc6:	089b      	lsrs	r3, r3, #2
 800fdc8:	fb08 2213 	mls	r2, r8, r3, r2
 800fdcc:	287e      	cmp	r0, #126	@ 0x7e
 800fdce:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800fdd2:	d01f      	beq.n	800fe14 <uxr_read_framed_msg+0x4fc>
 800fdd4:	f080 0020 	eor.w	r0, r0, #32
 800fdd8:	e6c7      	b.n	800fb6a <uxr_read_framed_msg+0x252>
 800fdda:	2701      	movs	r7, #1
 800fddc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fdde:	f8cd b000 	str.w	fp, [sp]
 800fde2:	9701      	str	r7, [sp, #4]
 800fde4:	4632      	mov	r2, r6
 800fde6:	4651      	mov	r1, sl
 800fde8:	4620      	mov	r0, r4
 800fdea:	f7ff fd11 	bl	800f810 <uxr_framing_read_transport>
 800fdee:	2800      	cmp	r0, #0
 800fdf0:	f47f ada7 	bne.w	800f942 <uxr_read_framed_msg+0x2a>
 800fdf4:	7027      	strb	r7, [r4, #0]
 800fdf6:	e5a4      	b.n	800f942 <uxr_read_framed_msg+0x2a>
 800fdf8:	f8cd b000 	str.w	fp, [sp]
 800fdfc:	2302      	movs	r3, #2
 800fdfe:	9301      	str	r3, [sp, #4]
 800fe00:	4632      	mov	r2, r6
 800fe02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fe04:	4651      	mov	r1, sl
 800fe06:	4620      	mov	r0, r4
 800fe08:	f7ff fd02 	bl	800f810 <uxr_framing_read_transport>
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	f47f ad98 	bne.w	800f942 <uxr_read_framed_msg+0x2a>
 800fe12:	e70e      	b.n	800fc32 <uxr_read_framed_msg+0x31a>
 800fe14:	f8cd b000 	str.w	fp, [sp]
 800fe18:	2303      	movs	r3, #3
 800fe1a:	e7f0      	b.n	800fdfe <uxr_read_framed_msg+0x4e6>

0800fe1c <uxr_stream_id>:
 800fe1c:	2901      	cmp	r1, #1
 800fe1e:	b082      	sub	sp, #8
 800fe20:	4603      	mov	r3, r0
 800fe22:	d011      	beq.n	800fe48 <uxr_stream_id+0x2c>
 800fe24:	2902      	cmp	r1, #2
 800fe26:	f04f 0c00 	mov.w	ip, #0
 800fe2a:	d00a      	beq.n	800fe42 <uxr_stream_id+0x26>
 800fe2c:	2000      	movs	r0, #0
 800fe2e:	f36c 0007 	bfi	r0, ip, #0, #8
 800fe32:	f363 200f 	bfi	r0, r3, #8, #8
 800fe36:	f361 4017 	bfi	r0, r1, #16, #8
 800fe3a:	f362 601f 	bfi	r0, r2, #24, #8
 800fe3e:	b002      	add	sp, #8
 800fe40:	4770      	bx	lr
 800fe42:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800fe46:	e7f1      	b.n	800fe2c <uxr_stream_id+0x10>
 800fe48:	f100 0c01 	add.w	ip, r0, #1
 800fe4c:	fa5f fc8c 	uxtb.w	ip, ip
 800fe50:	e7ec      	b.n	800fe2c <uxr_stream_id+0x10>
 800fe52:	bf00      	nop

0800fe54 <uxr_stream_id_from_raw>:
 800fe54:	b082      	sub	sp, #8
 800fe56:	4603      	mov	r3, r0
 800fe58:	b130      	cbz	r0, 800fe68 <uxr_stream_id_from_raw+0x14>
 800fe5a:	0602      	lsls	r2, r0, #24
 800fe5c:	d411      	bmi.n	800fe82 <uxr_stream_id_from_raw+0x2e>
 800fe5e:	1e42      	subs	r2, r0, #1
 800fe60:	b2d2      	uxtb	r2, r2
 800fe62:	f04f 0c01 	mov.w	ip, #1
 800fe66:	e001      	b.n	800fe6c <uxr_stream_id_from_raw+0x18>
 800fe68:	4684      	mov	ip, r0
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	2000      	movs	r0, #0
 800fe6e:	f363 0007 	bfi	r0, r3, #0, #8
 800fe72:	f362 200f 	bfi	r0, r2, #8, #8
 800fe76:	f36c 4017 	bfi	r0, ip, #16, #8
 800fe7a:	f361 601f 	bfi	r0, r1, #24, #8
 800fe7e:	b002      	add	sp, #8
 800fe80:	4770      	bx	lr
 800fe82:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800fe86:	f04f 0c02 	mov.w	ip, #2
 800fe8a:	e7ef      	b.n	800fe6c <uxr_stream_id_from_raw+0x18>

0800fe8c <uxr_init_stream_storage>:
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	7403      	strb	r3, [r0, #16]
 800fe90:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800fe94:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800fe98:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800fe9c:	4770      	bx	lr
 800fe9e:	bf00      	nop

0800fea0 <uxr_reset_stream_storage>:
 800fea0:	b570      	push	{r4, r5, r6, lr}
 800fea2:	7c03      	ldrb	r3, [r0, #16]
 800fea4:	4604      	mov	r4, r0
 800fea6:	b153      	cbz	r3, 800febe <uxr_reset_stream_storage+0x1e>
 800fea8:	4606      	mov	r6, r0
 800feaa:	2500      	movs	r5, #0
 800feac:	4630      	mov	r0, r6
 800feae:	f002 fe19 	bl	8012ae4 <uxr_reset_output_best_effort_stream>
 800feb2:	7c23      	ldrb	r3, [r4, #16]
 800feb4:	3501      	adds	r5, #1
 800feb6:	42ab      	cmp	r3, r5
 800feb8:	f106 0610 	add.w	r6, r6, #16
 800febc:	d8f6      	bhi.n	800feac <uxr_reset_stream_storage+0xc>
 800febe:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800fec2:	b163      	cbz	r3, 800fede <uxr_reset_stream_storage+0x3e>
 800fec4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fec8:	2500      	movs	r5, #0
 800feca:	4630      	mov	r0, r6
 800fecc:	f002 fc1a 	bl	8012704 <uxr_reset_input_best_effort_stream>
 800fed0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800fed4:	3501      	adds	r5, #1
 800fed6:	42ab      	cmp	r3, r5
 800fed8:	f106 0602 	add.w	r6, r6, #2
 800fedc:	d8f5      	bhi.n	800feca <uxr_reset_stream_storage+0x2a>
 800fede:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800fee2:	b163      	cbz	r3, 800fefe <uxr_reset_stream_storage+0x5e>
 800fee4:	f104 0618 	add.w	r6, r4, #24
 800fee8:	2500      	movs	r5, #0
 800feea:	4630      	mov	r0, r6
 800feec:	f002 fea4 	bl	8012c38 <uxr_reset_output_reliable_stream>
 800fef0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800fef4:	3501      	adds	r5, #1
 800fef6:	42ab      	cmp	r3, r5
 800fef8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800fefc:	d8f5      	bhi.n	800feea <uxr_reset_stream_storage+0x4a>
 800fefe:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ff02:	b163      	cbz	r3, 800ff1e <uxr_reset_stream_storage+0x7e>
 800ff04:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800ff08:	2500      	movs	r5, #0
 800ff0a:	4630      	mov	r0, r6
 800ff0c:	f002 fc6a 	bl	80127e4 <uxr_reset_input_reliable_stream>
 800ff10:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ff14:	3501      	adds	r5, #1
 800ff16:	42ab      	cmp	r3, r5
 800ff18:	f106 0618 	add.w	r6, r6, #24
 800ff1c:	d8f5      	bhi.n	800ff0a <uxr_reset_stream_storage+0x6a>
 800ff1e:	bd70      	pop	{r4, r5, r6, pc}

0800ff20 <uxr_add_output_best_effort_buffer>:
 800ff20:	b510      	push	{r4, lr}
 800ff22:	7c04      	ldrb	r4, [r0, #16]
 800ff24:	f104 0c01 	add.w	ip, r4, #1
 800ff28:	b082      	sub	sp, #8
 800ff2a:	f880 c010 	strb.w	ip, [r0, #16]
 800ff2e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ff32:	f002 fdcd 	bl	8012ad0 <uxr_init_output_best_effort_stream>
 800ff36:	2201      	movs	r2, #1
 800ff38:	4611      	mov	r1, r2
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	b002      	add	sp, #8
 800ff3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff42:	f7ff bf6b 	b.w	800fe1c <uxr_stream_id>
 800ff46:	bf00      	nop

0800ff48 <uxr_add_output_reliable_buffer>:
 800ff48:	b510      	push	{r4, lr}
 800ff4a:	b084      	sub	sp, #16
 800ff4c:	4684      	mov	ip, r0
 800ff4e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ff52:	9000      	str	r0, [sp, #0]
 800ff54:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800ff58:	2028      	movs	r0, #40	@ 0x28
 800ff5a:	fb00 c004 	mla	r0, r0, r4, ip
 800ff5e:	f104 0e01 	add.w	lr, r4, #1
 800ff62:	3018      	adds	r0, #24
 800ff64:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800ff68:	f002 fe2e 	bl	8012bc8 <uxr_init_output_reliable_stream>
 800ff6c:	2201      	movs	r2, #1
 800ff6e:	2102      	movs	r1, #2
 800ff70:	4620      	mov	r0, r4
 800ff72:	b004      	add	sp, #16
 800ff74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff78:	f7ff bf50 	b.w	800fe1c <uxr_stream_id>

0800ff7c <uxr_add_input_best_effort_buffer>:
 800ff7c:	b510      	push	{r4, lr}
 800ff7e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800ff82:	1c62      	adds	r2, r4, #1
 800ff84:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800ff88:	b082      	sub	sp, #8
 800ff8a:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 800ff8e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800ff92:	f002 fbb3 	bl	80126fc <uxr_init_input_best_effort_stream>
 800ff96:	2200      	movs	r2, #0
 800ff98:	2101      	movs	r1, #1
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	b002      	add	sp, #8
 800ff9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffa2:	f7ff bf3b 	b.w	800fe1c <uxr_stream_id>
 800ffa6:	bf00      	nop

0800ffa8 <uxr_add_input_reliable_buffer>:
 800ffa8:	b510      	push	{r4, lr}
 800ffaa:	b084      	sub	sp, #16
 800ffac:	4684      	mov	ip, r0
 800ffae:	9806      	ldr	r0, [sp, #24]
 800ffb0:	9000      	str	r0, [sp, #0]
 800ffb2:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800ffb6:	2018      	movs	r0, #24
 800ffb8:	fb00 c004 	mla	r0, r0, r4, ip
 800ffbc:	f104 0e01 	add.w	lr, r4, #1
 800ffc0:	3048      	adds	r0, #72	@ 0x48
 800ffc2:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800ffc6:	f002 fbe1 	bl	801278c <uxr_init_input_reliable_stream>
 800ffca:	2200      	movs	r2, #0
 800ffcc:	2102      	movs	r1, #2
 800ffce:	4620      	mov	r0, r4
 800ffd0:	b004      	add	sp, #16
 800ffd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffd6:	f7ff bf21 	b.w	800fe1c <uxr_stream_id>
 800ffda:	bf00      	nop

0800ffdc <uxr_get_output_best_effort_stream>:
 800ffdc:	7c03      	ldrb	r3, [r0, #16]
 800ffde:	428b      	cmp	r3, r1
 800ffe0:	bf8c      	ite	hi
 800ffe2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800ffe6:	2000      	movls	r0, #0
 800ffe8:	4770      	bx	lr
 800ffea:	bf00      	nop

0800ffec <uxr_get_output_reliable_stream>:
 800ffec:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800fff0:	428b      	cmp	r3, r1
 800fff2:	bf83      	ittte	hi
 800fff4:	2328      	movhi	r3, #40	@ 0x28
 800fff6:	fb03 0001 	mlahi	r0, r3, r1, r0
 800fffa:	3018      	addhi	r0, #24
 800fffc:	2000      	movls	r0, #0
 800fffe:	4770      	bx	lr

08010000 <uxr_get_input_best_effort_stream>:
 8010000:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010004:	428b      	cmp	r3, r1
 8010006:	bf86      	itte	hi
 8010008:	3121      	addhi	r1, #33	@ 0x21
 801000a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801000e:	2000      	movls	r0, #0
 8010010:	4770      	bx	lr
 8010012:	bf00      	nop

08010014 <uxr_get_input_reliable_stream>:
 8010014:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010018:	428b      	cmp	r3, r1
 801001a:	bf83      	ittte	hi
 801001c:	2318      	movhi	r3, #24
 801001e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010022:	3048      	addhi	r0, #72	@ 0x48
 8010024:	2000      	movls	r0, #0
 8010026:	4770      	bx	lr

08010028 <uxr_output_streams_confirmed>:
 8010028:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801002c:	b183      	cbz	r3, 8010050 <uxr_output_streams_confirmed+0x28>
 801002e:	b570      	push	{r4, r5, r6, lr}
 8010030:	4606      	mov	r6, r0
 8010032:	f100 0518 	add.w	r5, r0, #24
 8010036:	2400      	movs	r4, #0
 8010038:	e001      	b.n	801003e <uxr_output_streams_confirmed+0x16>
 801003a:	3528      	adds	r5, #40	@ 0x28
 801003c:	b138      	cbz	r0, 801004e <uxr_output_streams_confirmed+0x26>
 801003e:	4628      	mov	r0, r5
 8010040:	f003 f862 	bl	8013108 <uxr_is_output_up_to_date>
 8010044:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010048:	3401      	adds	r4, #1
 801004a:	42a3      	cmp	r3, r4
 801004c:	d8f5      	bhi.n	801003a <uxr_output_streams_confirmed+0x12>
 801004e:	bd70      	pop	{r4, r5, r6, pc}
 8010050:	2001      	movs	r0, #1
 8010052:	4770      	bx	lr

08010054 <uxr_buffer_submessage_header>:
 8010054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010056:	4604      	mov	r4, r0
 8010058:	460e      	mov	r6, r1
 801005a:	2104      	movs	r1, #4
 801005c:	4615      	mov	r5, r2
 801005e:	461f      	mov	r7, r3
 8010060:	f7f8 ff3c 	bl	8008edc <ucdr_align_to>
 8010064:	2301      	movs	r3, #1
 8010066:	7523      	strb	r3, [r4, #20]
 8010068:	f047 0201 	orr.w	r2, r7, #1
 801006c:	462b      	mov	r3, r5
 801006e:	4631      	mov	r1, r6
 8010070:	4620      	mov	r0, r4
 8010072:	f000 fa2b 	bl	80104cc <uxr_serialize_submessage_header>
 8010076:	4620      	mov	r0, r4
 8010078:	f7f8 ff46 	bl	8008f08 <ucdr_buffer_remaining>
 801007c:	42a8      	cmp	r0, r5
 801007e:	bf34      	ite	cc
 8010080:	2000      	movcc	r0, #0
 8010082:	2001      	movcs	r0, #1
 8010084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010086:	bf00      	nop

08010088 <uxr_read_submessage_header>:
 8010088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801008c:	4604      	mov	r4, r0
 801008e:	460d      	mov	r5, r1
 8010090:	2104      	movs	r1, #4
 8010092:	4616      	mov	r6, r2
 8010094:	4698      	mov	r8, r3
 8010096:	f7f8 ff21 	bl	8008edc <ucdr_align_to>
 801009a:	4620      	mov	r0, r4
 801009c:	f7f8 ff34 	bl	8008f08 <ucdr_buffer_remaining>
 80100a0:	2803      	cmp	r0, #3
 80100a2:	bf8c      	ite	hi
 80100a4:	2701      	movhi	r7, #1
 80100a6:	2700      	movls	r7, #0
 80100a8:	d802      	bhi.n	80100b0 <uxr_read_submessage_header+0x28>
 80100aa:	4638      	mov	r0, r7
 80100ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100b0:	4633      	mov	r3, r6
 80100b2:	4642      	mov	r2, r8
 80100b4:	4620      	mov	r0, r4
 80100b6:	4629      	mov	r1, r5
 80100b8:	f000 fa1a 	bl	80104f0 <uxr_deserialize_submessage_header>
 80100bc:	f898 3000 	ldrb.w	r3, [r8]
 80100c0:	f003 0201 	and.w	r2, r3, #1
 80100c4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80100c8:	f888 3000 	strb.w	r3, [r8]
 80100cc:	7522      	strb	r2, [r4, #20]
 80100ce:	4638      	mov	r0, r7
 80100d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080100d4 <uxr_submessage_padding>:
 80100d4:	f010 0003 	ands.w	r0, r0, #3
 80100d8:	bf18      	it	ne
 80100da:	f1c0 0004 	rsbne	r0, r0, #4
 80100de:	4770      	bx	lr

080100e0 <uxr_millis>:
 80100e0:	b510      	push	{r4, lr}
 80100e2:	b084      	sub	sp, #16
 80100e4:	4669      	mov	r1, sp
 80100e6:	2001      	movs	r0, #1
 80100e8:	f7f0 ffe6 	bl	80010b8 <clock_gettime>
 80100ec:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80100f0:	4b06      	ldr	r3, [pc, #24]	@ (801010c <uxr_millis+0x2c>)
 80100f2:	fba0 0103 	umull	r0, r1, r0, r3
 80100f6:	1900      	adds	r0, r0, r4
 80100f8:	fb03 1102 	mla	r1, r3, r2, r1
 80100fc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8010100:	4a03      	ldr	r2, [pc, #12]	@ (8010110 <uxr_millis+0x30>)
 8010102:	2300      	movs	r3, #0
 8010104:	f7f0 f8d4 	bl	80002b0 <__aeabi_ldivmod>
 8010108:	b004      	add	sp, #16
 801010a:	bd10      	pop	{r4, pc}
 801010c:	3b9aca00 	.word	0x3b9aca00
 8010110:	000f4240 	.word	0x000f4240

08010114 <uxr_nanos>:
 8010114:	b510      	push	{r4, lr}
 8010116:	b084      	sub	sp, #16
 8010118:	4669      	mov	r1, sp
 801011a:	2001      	movs	r0, #1
 801011c:	f7f0 ffcc 	bl	80010b8 <clock_gettime>
 8010120:	4a06      	ldr	r2, [pc, #24]	@ (801013c <uxr_nanos+0x28>)
 8010122:	9800      	ldr	r0, [sp, #0]
 8010124:	9902      	ldr	r1, [sp, #8]
 8010126:	9c01      	ldr	r4, [sp, #4]
 8010128:	fba0 0302 	umull	r0, r3, r0, r2
 801012c:	1840      	adds	r0, r0, r1
 801012e:	fb02 3304 	mla	r3, r2, r4, r3
 8010132:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010136:	b004      	add	sp, #16
 8010138:	bd10      	pop	{r4, pc}
 801013a:	bf00      	nop
 801013c:	3b9aca00 	.word	0x3b9aca00

08010140 <on_full_output_buffer_fragmented>:
 8010140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010144:	460c      	mov	r4, r1
 8010146:	b08a      	sub	sp, #40	@ 0x28
 8010148:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 801014c:	4606      	mov	r6, r0
 801014e:	f104 0008 	add.w	r0, r4, #8
 8010152:	f7ff ff4b 	bl	800ffec <uxr_get_output_reliable_stream>
 8010156:	4605      	mov	r5, r0
 8010158:	f002 ffe0 	bl	801311c <get_available_free_slots>
 801015c:	b968      	cbnz	r0, 801017a <on_full_output_buffer_fragmented+0x3a>
 801015e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8010162:	4620      	mov	r0, r4
 8010164:	4798      	blx	r3
 8010166:	b918      	cbnz	r0, 8010170 <on_full_output_buffer_fragmented+0x30>
 8010168:	2001      	movs	r0, #1
 801016a:	b00a      	add	sp, #40	@ 0x28
 801016c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010170:	4628      	mov	r0, r5
 8010172:	f002 ffd3 	bl	801311c <get_available_free_slots>
 8010176:	2800      	cmp	r0, #0
 8010178:	d0f6      	beq.n	8010168 <on_full_output_buffer_fragmented+0x28>
 801017a:	892a      	ldrh	r2, [r5, #8]
 801017c:	686b      	ldr	r3, [r5, #4]
 801017e:	fbb3 f8f2 	udiv	r8, r3, r2
 8010182:	89eb      	ldrh	r3, [r5, #14]
 8010184:	7b29      	ldrb	r1, [r5, #12]
 8010186:	fbb3 f0f2 	udiv	r0, r3, r2
 801018a:	fb02 3310 	mls	r3, r2, r0, r3
 801018e:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 8010192:	b29b      	uxth	r3, r3
 8010194:	fb08 f303 	mul.w	r3, r8, r3
 8010198:	31fc      	adds	r1, #252	@ 0xfc
 801019a:	f1a8 0804 	sub.w	r8, r8, #4
 801019e:	4441      	add	r1, r8
 80101a0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80101a4:	b28f      	uxth	r7, r1
 80101a6:	6829      	ldr	r1, [r5, #0]
 80101a8:	3304      	adds	r3, #4
 80101aa:	1bd2      	subs	r2, r2, r7
 80101ac:	4419      	add	r1, r3
 80101ae:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 80101b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101b6:	9300      	str	r3, [sp, #0]
 80101b8:	4642      	mov	r2, r8
 80101ba:	2300      	movs	r3, #0
 80101bc:	a802      	add	r0, sp, #8
 80101be:	f7f8 fe61 	bl	8008e84 <ucdr_init_buffer_origin_offset>
 80101c2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80101c6:	f102 0308 	add.w	r3, r2, #8
 80101ca:	4543      	cmp	r3, r8
 80101cc:	d928      	bls.n	8010220 <on_full_output_buffer_fragmented+0xe0>
 80101ce:	463a      	mov	r2, r7
 80101d0:	2300      	movs	r3, #0
 80101d2:	210d      	movs	r1, #13
 80101d4:	a802      	add	r0, sp, #8
 80101d6:	f7ff ff3d 	bl	8010054 <uxr_buffer_submessage_header>
 80101da:	8929      	ldrh	r1, [r5, #8]
 80101dc:	89eb      	ldrh	r3, [r5, #14]
 80101de:	fbb3 f2f1 	udiv	r2, r3, r1
 80101e2:	fb01 3312 	mls	r3, r1, r2, r3
 80101e6:	b29b      	uxth	r3, r3
 80101e8:	686a      	ldr	r2, [r5, #4]
 80101ea:	fbb2 f2f1 	udiv	r2, r2, r1
 80101ee:	fb02 f303 	mul.w	r3, r2, r3
 80101f2:	682a      	ldr	r2, [r5, #0]
 80101f4:	f842 8003 	str.w	r8, [r2, r3]
 80101f8:	89e8      	ldrh	r0, [r5, #14]
 80101fa:	2101      	movs	r1, #1
 80101fc:	f002 ffac 	bl	8013158 <uxr_seq_num_add>
 8010200:	9904      	ldr	r1, [sp, #16]
 8010202:	9a03      	ldr	r2, [sp, #12]
 8010204:	81e8      	strh	r0, [r5, #14]
 8010206:	1a52      	subs	r2, r2, r1
 8010208:	4630      	mov	r0, r6
 801020a:	f7f8 fe4d 	bl	8008ea8 <ucdr_init_buffer>
 801020e:	4630      	mov	r0, r6
 8010210:	4910      	ldr	r1, [pc, #64]	@ (8010254 <on_full_output_buffer_fragmented+0x114>)
 8010212:	4622      	mov	r2, r4
 8010214:	f7f8 fe1c 	bl	8008e50 <ucdr_set_on_full_buffer_callback>
 8010218:	2000      	movs	r0, #0
 801021a:	b00a      	add	sp, #40	@ 0x28
 801021c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010220:	b292      	uxth	r2, r2
 8010222:	2302      	movs	r3, #2
 8010224:	210d      	movs	r1, #13
 8010226:	a802      	add	r0, sp, #8
 8010228:	f7ff ff14 	bl	8010054 <uxr_buffer_submessage_header>
 801022c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8010230:	8928      	ldrh	r0, [r5, #8]
 8010232:	f103 0208 	add.w	r2, r3, #8
 8010236:	89eb      	ldrh	r3, [r5, #14]
 8010238:	fbb3 f1f0 	udiv	r1, r3, r0
 801023c:	fb00 3311 	mls	r3, r0, r1, r3
 8010240:	b29b      	uxth	r3, r3
 8010242:	6869      	ldr	r1, [r5, #4]
 8010244:	fbb1 f1f0 	udiv	r1, r1, r0
 8010248:	fb01 f303 	mul.w	r3, r1, r3
 801024c:	6829      	ldr	r1, [r5, #0]
 801024e:	50ca      	str	r2, [r1, r3]
 8010250:	e7d2      	b.n	80101f8 <on_full_output_buffer_fragmented+0xb8>
 8010252:	bf00      	nop
 8010254:	08010141 	.word	0x08010141

08010258 <uxr_prepare_output_stream>:
 8010258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801025a:	b087      	sub	sp, #28
 801025c:	2707      	movs	r7, #7
 801025e:	9202      	str	r2, [sp, #8]
 8010260:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010262:	2500      	movs	r5, #0
 8010264:	3204      	adds	r2, #4
 8010266:	e9cd 7500 	strd	r7, r5, [sp]
 801026a:	461c      	mov	r4, r3
 801026c:	4606      	mov	r6, r0
 801026e:	f7ff f807 	bl	800f280 <uxr_prepare_stream_to_write_submessage>
 8010272:	f080 0201 	eor.w	r2, r0, #1
 8010276:	b2d2      	uxtb	r2, r2
 8010278:	75a2      	strb	r2, [r4, #22]
 801027a:	b112      	cbz	r2, 8010282 <uxr_prepare_output_stream+0x2a>
 801027c:	4628      	mov	r0, r5
 801027e:	b007      	add	sp, #28
 8010280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010282:	aa05      	add	r2, sp, #20
 8010284:	9902      	ldr	r1, [sp, #8]
 8010286:	4630      	mov	r0, r6
 8010288:	f7ff f934 	bl	800f4f4 <uxr_init_base_object_request>
 801028c:	a905      	add	r1, sp, #20
 801028e:	4605      	mov	r5, r0
 8010290:	4620      	mov	r0, r4
 8010292:	f000 ff87 	bl	80111a4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010296:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801029a:	69a6      	ldr	r6, [r4, #24]
 801029c:	69e7      	ldr	r7, [r4, #28]
 801029e:	1a52      	subs	r2, r2, r1
 80102a0:	4620      	mov	r0, r4
 80102a2:	f7f8 fe01 	bl	8008ea8 <ucdr_init_buffer>
 80102a6:	4620      	mov	r0, r4
 80102a8:	463a      	mov	r2, r7
 80102aa:	4631      	mov	r1, r6
 80102ac:	f7f8 fdd0 	bl	8008e50 <ucdr_set_on_full_buffer_callback>
 80102b0:	4628      	mov	r0, r5
 80102b2:	b007      	add	sp, #28
 80102b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102b6:	bf00      	nop

080102b8 <uxr_prepare_output_stream_fragmented>:
 80102b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102bc:	b093      	sub	sp, #76	@ 0x4c
 80102be:	4605      	mov	r5, r0
 80102c0:	9107      	str	r1, [sp, #28]
 80102c2:	3008      	adds	r0, #8
 80102c4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80102c8:	9303      	str	r3, [sp, #12]
 80102ca:	9206      	str	r2, [sp, #24]
 80102cc:	f7ff fe8e 	bl	800ffec <uxr_get_output_reliable_stream>
 80102d0:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80102d4:	2b01      	cmp	r3, #1
 80102d6:	f000 8095 	beq.w	8010404 <uxr_prepare_output_stream_fragmented+0x14c>
 80102da:	4604      	mov	r4, r0
 80102dc:	2800      	cmp	r0, #0
 80102de:	f000 8091 	beq.w	8010404 <uxr_prepare_output_stream_fragmented+0x14c>
 80102e2:	f002 ff1b 	bl	801311c <get_available_free_slots>
 80102e6:	2800      	cmp	r0, #0
 80102e8:	f000 8087 	beq.w	80103fa <uxr_prepare_output_stream_fragmented+0x142>
 80102ec:	8922      	ldrh	r2, [r4, #8]
 80102ee:	89e7      	ldrh	r7, [r4, #14]
 80102f0:	fbb7 f3f2 	udiv	r3, r7, r2
 80102f4:	fb02 7313 	mls	r3, r2, r3, r7
 80102f8:	b29b      	uxth	r3, r3
 80102fa:	6861      	ldr	r1, [r4, #4]
 80102fc:	fbb1 f1f2 	udiv	r1, r1, r2
 8010300:	6822      	ldr	r2, [r4, #0]
 8010302:	9105      	str	r1, [sp, #20]
 8010304:	fb01 f303 	mul.w	r3, r1, r3
 8010308:	3304      	adds	r3, #4
 801030a:	eb02 0903 	add.w	r9, r2, r3
 801030e:	7b23      	ldrb	r3, [r4, #12]
 8010310:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010314:	4543      	cmp	r3, r8
 8010316:	f1a1 0b04 	sub.w	fp, r1, #4
 801031a:	d37f      	bcc.n	801041c <uxr_prepare_output_stream_fragmented+0x164>
 801031c:	f1ab 0a04 	sub.w	sl, fp, #4
 8010320:	ebaa 0a03 	sub.w	sl, sl, r3
 8010324:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010326:	f8cd 8000 	str.w	r8, [sp]
 801032a:	fa1f f38a 	uxth.w	r3, sl
 801032e:	9304      	str	r3, [sp, #16]
 8010330:	465a      	mov	r2, fp
 8010332:	2300      	movs	r3, #0
 8010334:	4649      	mov	r1, r9
 8010336:	a80a      	add	r0, sp, #40	@ 0x28
 8010338:	f7f8 fda4 	bl	8008e84 <ucdr_init_buffer_origin_offset>
 801033c:	f106 0a08 	add.w	sl, r6, #8
 8010340:	45da      	cmp	sl, fp
 8010342:	bf2c      	ite	cs
 8010344:	2300      	movcs	r3, #0
 8010346:	2301      	movcc	r3, #1
 8010348:	9a04      	ldr	r2, [sp, #16]
 801034a:	005b      	lsls	r3, r3, #1
 801034c:	210d      	movs	r1, #13
 801034e:	a80a      	add	r0, sp, #40	@ 0x28
 8010350:	f7ff fe80 	bl	8010054 <uxr_buffer_submessage_header>
 8010354:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8010358:	fbb7 f2fc 	udiv	r2, r7, ip
 801035c:	fb0c 7212 	mls	r2, ip, r2, r7
 8010360:	b292      	uxth	r2, r2
 8010362:	6863      	ldr	r3, [r4, #4]
 8010364:	fbb3 f3fc 	udiv	r3, r3, ip
 8010368:	fb02 f303 	mul.w	r3, r2, r3
 801036c:	6822      	ldr	r2, [r4, #0]
 801036e:	2101      	movs	r1, #1
 8010370:	f842 b003 	str.w	fp, [r2, r3]
 8010374:	4638      	mov	r0, r7
 8010376:	f002 feef 	bl	8013158 <uxr_seq_num_add>
 801037a:	9b05      	ldr	r3, [sp, #20]
 801037c:	9e03      	ldr	r6, [sp, #12]
 801037e:	f1a3 0208 	sub.w	r2, r3, #8
 8010382:	f108 0104 	add.w	r1, r8, #4
 8010386:	4607      	mov	r7, r0
 8010388:	eba2 0208 	sub.w	r2, r2, r8
 801038c:	4449      	add	r1, r9
 801038e:	4630      	mov	r0, r6
 8010390:	f7f8 fd8a 	bl	8008ea8 <ucdr_init_buffer>
 8010394:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010396:	81e7      	strh	r7, [r4, #14]
 8010398:	1d1a      	adds	r2, r3, #4
 801039a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801039e:	bf28      	it	cs
 80103a0:	2200      	movcs	r2, #0
 80103a2:	2300      	movs	r3, #0
 80103a4:	b292      	uxth	r2, r2
 80103a6:	2107      	movs	r1, #7
 80103a8:	4630      	mov	r0, r6
 80103aa:	f7ff fe53 	bl	8010054 <uxr_buffer_submessage_header>
 80103ae:	9906      	ldr	r1, [sp, #24]
 80103b0:	aa09      	add	r2, sp, #36	@ 0x24
 80103b2:	4628      	mov	r0, r5
 80103b4:	f7ff f89e 	bl	800f4f4 <uxr_init_base_object_request>
 80103b8:	4604      	mov	r4, r0
 80103ba:	b320      	cbz	r0, 8010406 <uxr_prepare_output_stream_fragmented+0x14e>
 80103bc:	9e03      	ldr	r6, [sp, #12]
 80103be:	a909      	add	r1, sp, #36	@ 0x24
 80103c0:	4630      	mov	r0, r6
 80103c2:	f000 feef 	bl	80111a4 <uxr_serialize_WRITE_DATA_Payload_Data>
 80103c6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80103ca:	4630      	mov	r0, r6
 80103cc:	1a52      	subs	r2, r2, r1
 80103ce:	f7f8 fd6b 	bl	8008ea8 <ucdr_init_buffer>
 80103d2:	9b07      	ldr	r3, [sp, #28]
 80103d4:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80103d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80103da:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80103de:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80103e0:	491a      	ldr	r1, [pc, #104]	@ (801044c <uxr_prepare_output_stream_fragmented+0x194>)
 80103e2:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80103e6:	4630      	mov	r0, r6
 80103e8:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80103ec:	462a      	mov	r2, r5
 80103ee:	f7f8 fd2f 	bl	8008e50 <ucdr_set_on_full_buffer_callback>
 80103f2:	4620      	mov	r0, r4
 80103f4:	b013      	add	sp, #76	@ 0x4c
 80103f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103fa:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80103fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80103fe:	4628      	mov	r0, r5
 8010400:	4798      	blx	r3
 8010402:	b920      	cbnz	r0, 801040e <uxr_prepare_output_stream_fragmented+0x156>
 8010404:	2400      	movs	r4, #0
 8010406:	4620      	mov	r0, r4
 8010408:	b013      	add	sp, #76	@ 0x4c
 801040a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801040e:	4620      	mov	r0, r4
 8010410:	f002 fe84 	bl	801311c <get_available_free_slots>
 8010414:	2800      	cmp	r0, #0
 8010416:	f47f af69 	bne.w	80102ec <uxr_prepare_output_stream_fragmented+0x34>
 801041a:	e7f3      	b.n	8010404 <uxr_prepare_output_stream_fragmented+0x14c>
 801041c:	4638      	mov	r0, r7
 801041e:	2101      	movs	r1, #1
 8010420:	f002 fe9a 	bl	8013158 <uxr_seq_num_add>
 8010424:	8921      	ldrh	r1, [r4, #8]
 8010426:	fbb0 f2f1 	udiv	r2, r0, r1
 801042a:	fb01 0212 	mls	r2, r1, r2, r0
 801042e:	b292      	uxth	r2, r2
 8010430:	6863      	ldr	r3, [r4, #4]
 8010432:	fbb3 f3f1 	udiv	r3, r3, r1
 8010436:	fb02 f303 	mul.w	r3, r2, r3
 801043a:	6822      	ldr	r2, [r4, #0]
 801043c:	3304      	adds	r3, #4
 801043e:	eb02 0903 	add.w	r9, r2, r3
 8010442:	4607      	mov	r7, r0
 8010444:	7b23      	ldrb	r3, [r4, #12]
 8010446:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801044a:	e767      	b.n	801031c <uxr_prepare_output_stream_fragmented+0x64>
 801044c:	08010141 	.word	0x08010141

08010450 <uxr_serialize_message_header>:
 8010450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010454:	4617      	mov	r7, r2
 8010456:	4604      	mov	r4, r0
 8010458:	461e      	mov	r6, r3
 801045a:	460d      	mov	r5, r1
 801045c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8010460:	f7f7 fd78 	bl	8007f54 <ucdr_serialize_uint8_t>
 8010464:	4639      	mov	r1, r7
 8010466:	4620      	mov	r0, r4
 8010468:	f7f7 fd74 	bl	8007f54 <ucdr_serialize_uint8_t>
 801046c:	4632      	mov	r2, r6
 801046e:	2101      	movs	r1, #1
 8010470:	4620      	mov	r0, r4
 8010472:	f7f7 fe25 	bl	80080c0 <ucdr_serialize_endian_uint16_t>
 8010476:	062b      	lsls	r3, r5, #24
 8010478:	d501      	bpl.n	801047e <uxr_serialize_message_header+0x2e>
 801047a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801047e:	4641      	mov	r1, r8
 8010480:	4620      	mov	r0, r4
 8010482:	2204      	movs	r2, #4
 8010484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010488:	f001 bffe 	b.w	8012488 <ucdr_serialize_array_uint8_t>

0801048c <uxr_deserialize_message_header>:
 801048c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010490:	4617      	mov	r7, r2
 8010492:	4604      	mov	r4, r0
 8010494:	461e      	mov	r6, r3
 8010496:	460d      	mov	r5, r1
 8010498:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801049c:	f7f7 fd70 	bl	8007f80 <ucdr_deserialize_uint8_t>
 80104a0:	4639      	mov	r1, r7
 80104a2:	4620      	mov	r0, r4
 80104a4:	f7f7 fd6c 	bl	8007f80 <ucdr_deserialize_uint8_t>
 80104a8:	4632      	mov	r2, r6
 80104aa:	2101      	movs	r1, #1
 80104ac:	4620      	mov	r0, r4
 80104ae:	f7f7 fefd 	bl	80082ac <ucdr_deserialize_endian_uint16_t>
 80104b2:	f995 3000 	ldrsb.w	r3, [r5]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	da01      	bge.n	80104be <uxr_deserialize_message_header+0x32>
 80104ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104be:	4641      	mov	r1, r8
 80104c0:	4620      	mov	r0, r4
 80104c2:	2204      	movs	r2, #4
 80104c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104c8:	f002 b842 	b.w	8012550 <ucdr_deserialize_array_uint8_t>

080104cc <uxr_serialize_submessage_header>:
 80104cc:	b570      	push	{r4, r5, r6, lr}
 80104ce:	4616      	mov	r6, r2
 80104d0:	4604      	mov	r4, r0
 80104d2:	461d      	mov	r5, r3
 80104d4:	f7f7 fd3e 	bl	8007f54 <ucdr_serialize_uint8_t>
 80104d8:	4631      	mov	r1, r6
 80104da:	4620      	mov	r0, r4
 80104dc:	f7f7 fd3a 	bl	8007f54 <ucdr_serialize_uint8_t>
 80104e0:	462a      	mov	r2, r5
 80104e2:	4620      	mov	r0, r4
 80104e4:	2101      	movs	r1, #1
 80104e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104ea:	f7f7 bde9 	b.w	80080c0 <ucdr_serialize_endian_uint16_t>
 80104ee:	bf00      	nop

080104f0 <uxr_deserialize_submessage_header>:
 80104f0:	b570      	push	{r4, r5, r6, lr}
 80104f2:	4616      	mov	r6, r2
 80104f4:	4604      	mov	r4, r0
 80104f6:	461d      	mov	r5, r3
 80104f8:	f7f7 fd42 	bl	8007f80 <ucdr_deserialize_uint8_t>
 80104fc:	4631      	mov	r1, r6
 80104fe:	4620      	mov	r0, r4
 8010500:	f7f7 fd3e 	bl	8007f80 <ucdr_deserialize_uint8_t>
 8010504:	462a      	mov	r2, r5
 8010506:	4620      	mov	r0, r4
 8010508:	2101      	movs	r1, #1
 801050a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801050e:	f7f7 becd 	b.w	80082ac <ucdr_deserialize_endian_uint16_t>
 8010512:	bf00      	nop

08010514 <uxr_serialize_CLIENT_Representation>:
 8010514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010518:	2204      	movs	r2, #4
 801051a:	460e      	mov	r6, r1
 801051c:	4605      	mov	r5, r0
 801051e:	f001 ffb3 	bl	8012488 <ucdr_serialize_array_uint8_t>
 8010522:	2202      	movs	r2, #2
 8010524:	1d31      	adds	r1, r6, #4
 8010526:	4604      	mov	r4, r0
 8010528:	4628      	mov	r0, r5
 801052a:	f001 ffad 	bl	8012488 <ucdr_serialize_array_uint8_t>
 801052e:	2202      	movs	r2, #2
 8010530:	4004      	ands	r4, r0
 8010532:	1db1      	adds	r1, r6, #6
 8010534:	4628      	mov	r0, r5
 8010536:	f001 ffa7 	bl	8012488 <ucdr_serialize_array_uint8_t>
 801053a:	b2e4      	uxtb	r4, r4
 801053c:	2204      	movs	r2, #4
 801053e:	4004      	ands	r4, r0
 8010540:	f106 0108 	add.w	r1, r6, #8
 8010544:	4628      	mov	r0, r5
 8010546:	f001 ff9f 	bl	8012488 <ucdr_serialize_array_uint8_t>
 801054a:	7b31      	ldrb	r1, [r6, #12]
 801054c:	ea00 0804 	and.w	r8, r0, r4
 8010550:	4628      	mov	r0, r5
 8010552:	f7f7 fcff 	bl	8007f54 <ucdr_serialize_uint8_t>
 8010556:	7b71      	ldrb	r1, [r6, #13]
 8010558:	ea08 0800 	and.w	r8, r8, r0
 801055c:	4628      	mov	r0, r5
 801055e:	f7f7 fccb 	bl	8007ef8 <ucdr_serialize_bool>
 8010562:	7b73      	ldrb	r3, [r6, #13]
 8010564:	ea08 0800 	and.w	r8, r8, r0
 8010568:	b93b      	cbnz	r3, 801057a <uxr_serialize_CLIENT_Representation+0x66>
 801056a:	8bb1      	ldrh	r1, [r6, #28]
 801056c:	4628      	mov	r0, r5
 801056e:	f7f7 fd1d 	bl	8007fac <ucdr_serialize_uint16_t>
 8010572:	ea08 0000 	and.w	r0, r8, r0
 8010576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801057a:	6931      	ldr	r1, [r6, #16]
 801057c:	4628      	mov	r0, r5
 801057e:	f7f7 ff05 	bl	800838c <ucdr_serialize_uint32_t>
 8010582:	6933      	ldr	r3, [r6, #16]
 8010584:	b1e3      	cbz	r3, 80105c0 <uxr_serialize_CLIENT_Representation+0xac>
 8010586:	b1c0      	cbz	r0, 80105ba <uxr_serialize_CLIENT_Representation+0xa6>
 8010588:	4637      	mov	r7, r6
 801058a:	f04f 0900 	mov.w	r9, #0
 801058e:	e001      	b.n	8010594 <uxr_serialize_CLIENT_Representation+0x80>
 8010590:	3708      	adds	r7, #8
 8010592:	b194      	cbz	r4, 80105ba <uxr_serialize_CLIENT_Representation+0xa6>
 8010594:	6979      	ldr	r1, [r7, #20]
 8010596:	4628      	mov	r0, r5
 8010598:	f002 f89a 	bl	80126d0 <ucdr_serialize_string>
 801059c:	69b9      	ldr	r1, [r7, #24]
 801059e:	4604      	mov	r4, r0
 80105a0:	4628      	mov	r0, r5
 80105a2:	f002 f895 	bl	80126d0 <ucdr_serialize_string>
 80105a6:	6933      	ldr	r3, [r6, #16]
 80105a8:	f109 0901 	add.w	r9, r9, #1
 80105ac:	4004      	ands	r4, r0
 80105ae:	4599      	cmp	r9, r3
 80105b0:	b2e4      	uxtb	r4, r4
 80105b2:	d3ed      	bcc.n	8010590 <uxr_serialize_CLIENT_Representation+0x7c>
 80105b4:	ea08 0804 	and.w	r8, r8, r4
 80105b8:	e7d7      	b.n	801056a <uxr_serialize_CLIENT_Representation+0x56>
 80105ba:	f04f 0800 	mov.w	r8, #0
 80105be:	e7d4      	b.n	801056a <uxr_serialize_CLIENT_Representation+0x56>
 80105c0:	ea08 0800 	and.w	r8, r8, r0
 80105c4:	e7d1      	b.n	801056a <uxr_serialize_CLIENT_Representation+0x56>
 80105c6:	bf00      	nop

080105c8 <uxr_deserialize_CLIENT_Representation>:
 80105c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105cc:	2204      	movs	r2, #4
 80105ce:	460c      	mov	r4, r1
 80105d0:	4605      	mov	r5, r0
 80105d2:	f001 ffbd 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 80105d6:	2202      	movs	r2, #2
 80105d8:	1d21      	adds	r1, r4, #4
 80105da:	4606      	mov	r6, r0
 80105dc:	4628      	mov	r0, r5
 80105de:	f001 ffb7 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 80105e2:	2202      	movs	r2, #2
 80105e4:	4006      	ands	r6, r0
 80105e6:	1da1      	adds	r1, r4, #6
 80105e8:	4628      	mov	r0, r5
 80105ea:	f001 ffb1 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 80105ee:	b2f6      	uxtb	r6, r6
 80105f0:	2204      	movs	r2, #4
 80105f2:	4006      	ands	r6, r0
 80105f4:	f104 0108 	add.w	r1, r4, #8
 80105f8:	4628      	mov	r0, r5
 80105fa:	f001 ffa9 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 80105fe:	f104 010c 	add.w	r1, r4, #12
 8010602:	ea00 0706 	and.w	r7, r0, r6
 8010606:	4628      	mov	r0, r5
 8010608:	f7f7 fcba 	bl	8007f80 <ucdr_deserialize_uint8_t>
 801060c:	f104 010d 	add.w	r1, r4, #13
 8010610:	4007      	ands	r7, r0
 8010612:	4628      	mov	r0, r5
 8010614:	f7f7 fc86 	bl	8007f24 <ucdr_deserialize_bool>
 8010618:	7b63      	ldrb	r3, [r4, #13]
 801061a:	4007      	ands	r7, r0
 801061c:	b93b      	cbnz	r3, 801062e <uxr_deserialize_CLIENT_Representation+0x66>
 801061e:	f104 011c 	add.w	r1, r4, #28
 8010622:	4628      	mov	r0, r5
 8010624:	f7f7 fdc6 	bl	80081b4 <ucdr_deserialize_uint16_t>
 8010628:	4038      	ands	r0, r7
 801062a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801062e:	f104 0110 	add.w	r1, r4, #16
 8010632:	4628      	mov	r0, r5
 8010634:	f7f7 ffd4 	bl	80085e0 <ucdr_deserialize_uint32_t>
 8010638:	6923      	ldr	r3, [r4, #16]
 801063a:	2b01      	cmp	r3, #1
 801063c:	d903      	bls.n	8010646 <uxr_deserialize_CLIENT_Representation+0x7e>
 801063e:	2301      	movs	r3, #1
 8010640:	75ab      	strb	r3, [r5, #22]
 8010642:	2700      	movs	r7, #0
 8010644:	e7eb      	b.n	801061e <uxr_deserialize_CLIENT_Representation+0x56>
 8010646:	b30b      	cbz	r3, 801068c <uxr_deserialize_CLIENT_Representation+0xc4>
 8010648:	2800      	cmp	r0, #0
 801064a:	d0fa      	beq.n	8010642 <uxr_deserialize_CLIENT_Representation+0x7a>
 801064c:	46a0      	mov	r8, r4
 801064e:	f04f 0900 	mov.w	r9, #0
 8010652:	e003      	b.n	801065c <uxr_deserialize_CLIENT_Representation+0x94>
 8010654:	f108 0808 	add.w	r8, r8, #8
 8010658:	2e00      	cmp	r6, #0
 801065a:	d0f2      	beq.n	8010642 <uxr_deserialize_CLIENT_Representation+0x7a>
 801065c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010664:	4628      	mov	r0, r5
 8010666:	f002 f841 	bl	80126ec <ucdr_deserialize_string>
 801066a:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801066e:	4606      	mov	r6, r0
 8010670:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010674:	4628      	mov	r0, r5
 8010676:	f002 f839 	bl	80126ec <ucdr_deserialize_string>
 801067a:	6923      	ldr	r3, [r4, #16]
 801067c:	f109 0901 	add.w	r9, r9, #1
 8010680:	4006      	ands	r6, r0
 8010682:	4599      	cmp	r9, r3
 8010684:	b2f6      	uxtb	r6, r6
 8010686:	d3e5      	bcc.n	8010654 <uxr_deserialize_CLIENT_Representation+0x8c>
 8010688:	4037      	ands	r7, r6
 801068a:	e7c8      	b.n	801061e <uxr_deserialize_CLIENT_Representation+0x56>
 801068c:	4007      	ands	r7, r0
 801068e:	e7c6      	b.n	801061e <uxr_deserialize_CLIENT_Representation+0x56>

08010690 <uxr_serialize_AGENT_Representation>:
 8010690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010694:	2204      	movs	r2, #4
 8010696:	460f      	mov	r7, r1
 8010698:	4605      	mov	r5, r0
 801069a:	f001 fef5 	bl	8012488 <ucdr_serialize_array_uint8_t>
 801069e:	2202      	movs	r2, #2
 80106a0:	4604      	mov	r4, r0
 80106a2:	1d39      	adds	r1, r7, #4
 80106a4:	4628      	mov	r0, r5
 80106a6:	f001 feef 	bl	8012488 <ucdr_serialize_array_uint8_t>
 80106aa:	4020      	ands	r0, r4
 80106ac:	2202      	movs	r2, #2
 80106ae:	b2c4      	uxtb	r4, r0
 80106b0:	1db9      	adds	r1, r7, #6
 80106b2:	4628      	mov	r0, r5
 80106b4:	f001 fee8 	bl	8012488 <ucdr_serialize_array_uint8_t>
 80106b8:	7a39      	ldrb	r1, [r7, #8]
 80106ba:	4004      	ands	r4, r0
 80106bc:	4628      	mov	r0, r5
 80106be:	f7f7 fc1b 	bl	8007ef8 <ucdr_serialize_bool>
 80106c2:	7a3b      	ldrb	r3, [r7, #8]
 80106c4:	ea00 0804 	and.w	r8, r0, r4
 80106c8:	b913      	cbnz	r3, 80106d0 <uxr_serialize_AGENT_Representation+0x40>
 80106ca:	4640      	mov	r0, r8
 80106cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106d0:	68f9      	ldr	r1, [r7, #12]
 80106d2:	4628      	mov	r0, r5
 80106d4:	f7f7 fe5a 	bl	800838c <ucdr_serialize_uint32_t>
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	b303      	cbz	r3, 801071e <uxr_serialize_AGENT_Representation+0x8e>
 80106dc:	b1d0      	cbz	r0, 8010714 <uxr_serialize_AGENT_Representation+0x84>
 80106de:	463e      	mov	r6, r7
 80106e0:	f04f 0900 	mov.w	r9, #0
 80106e4:	e001      	b.n	80106ea <uxr_serialize_AGENT_Representation+0x5a>
 80106e6:	3608      	adds	r6, #8
 80106e8:	b1a4      	cbz	r4, 8010714 <uxr_serialize_AGENT_Representation+0x84>
 80106ea:	6931      	ldr	r1, [r6, #16]
 80106ec:	4628      	mov	r0, r5
 80106ee:	f001 ffef 	bl	80126d0 <ucdr_serialize_string>
 80106f2:	6971      	ldr	r1, [r6, #20]
 80106f4:	4604      	mov	r4, r0
 80106f6:	4628      	mov	r0, r5
 80106f8:	f001 ffea 	bl	80126d0 <ucdr_serialize_string>
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	f109 0901 	add.w	r9, r9, #1
 8010702:	4004      	ands	r4, r0
 8010704:	4599      	cmp	r9, r3
 8010706:	b2e4      	uxtb	r4, r4
 8010708:	d3ed      	bcc.n	80106e6 <uxr_serialize_AGENT_Representation+0x56>
 801070a:	ea08 0804 	and.w	r8, r8, r4
 801070e:	4640      	mov	r0, r8
 8010710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010714:	f04f 0800 	mov.w	r8, #0
 8010718:	4640      	mov	r0, r8
 801071a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801071e:	ea08 0800 	and.w	r8, r8, r0
 8010722:	e7d2      	b.n	80106ca <uxr_serialize_AGENT_Representation+0x3a>

08010724 <uxr_serialize_DATAWRITER_Representation>:
 8010724:	b570      	push	{r4, r5, r6, lr}
 8010726:	460d      	mov	r5, r1
 8010728:	7809      	ldrb	r1, [r1, #0]
 801072a:	4606      	mov	r6, r0
 801072c:	f7f7 fc12 	bl	8007f54 <ucdr_serialize_uint8_t>
 8010730:	4604      	mov	r4, r0
 8010732:	b130      	cbz	r0, 8010742 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010734:	782b      	ldrb	r3, [r5, #0]
 8010736:	2b02      	cmp	r3, #2
 8010738:	d00c      	beq.n	8010754 <uxr_serialize_DATAWRITER_Representation+0x30>
 801073a:	2b03      	cmp	r3, #3
 801073c:	d010      	beq.n	8010760 <uxr_serialize_DATAWRITER_Representation+0x3c>
 801073e:	2b01      	cmp	r3, #1
 8010740:	d008      	beq.n	8010754 <uxr_serialize_DATAWRITER_Representation+0x30>
 8010742:	2202      	movs	r2, #2
 8010744:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010748:	4630      	mov	r0, r6
 801074a:	f001 fe9d 	bl	8012488 <ucdr_serialize_array_uint8_t>
 801074e:	4020      	ands	r0, r4
 8010750:	b2c0      	uxtb	r0, r0
 8010752:	bd70      	pop	{r4, r5, r6, pc}
 8010754:	6869      	ldr	r1, [r5, #4]
 8010756:	4630      	mov	r0, r6
 8010758:	f001 ffba 	bl	80126d0 <ucdr_serialize_string>
 801075c:	4604      	mov	r4, r0
 801075e:	e7f0      	b.n	8010742 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010760:	4629      	mov	r1, r5
 8010762:	4630      	mov	r0, r6
 8010764:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8010768:	3104      	adds	r1, #4
 801076a:	f001 ff83 	bl	8012674 <ucdr_serialize_sequence_uint8_t>
 801076e:	4604      	mov	r4, r0
 8010770:	e7e7      	b.n	8010742 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010772:	bf00      	nop

08010774 <uxr_serialize_ObjectVariant.part.0>:
 8010774:	b570      	push	{r4, r5, r6, lr}
 8010776:	780b      	ldrb	r3, [r1, #0]
 8010778:	3b01      	subs	r3, #1
 801077a:	460c      	mov	r4, r1
 801077c:	4605      	mov	r5, r0
 801077e:	2b0d      	cmp	r3, #13
 8010780:	d816      	bhi.n	80107b0 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8010782:	e8df f003 	tbb	[pc, r3]
 8010786:	0733      	.short	0x0733
 8010788:	07071717 	.word	0x07071717
 801078c:	0c150707 	.word	0x0c150707
 8010790:	4c510c0c 	.word	0x4c510c0c
 8010794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010798:	3104      	adds	r1, #4
 801079a:	f7ff bfc3 	b.w	8010724 <uxr_serialize_DATAWRITER_Representation>
 801079e:	7909      	ldrb	r1, [r1, #4]
 80107a0:	f7f7 fbd8 	bl	8007f54 <ucdr_serialize_uint8_t>
 80107a4:	b300      	cbz	r0, 80107e8 <uxr_serialize_ObjectVariant.part.0+0x74>
 80107a6:	7923      	ldrb	r3, [r4, #4]
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	d042      	beq.n	8010832 <uxr_serialize_ObjectVariant.part.0+0xbe>
 80107ac:	2b02      	cmp	r3, #2
 80107ae:	d040      	beq.n	8010832 <uxr_serialize_ObjectVariant.part.0+0xbe>
 80107b0:	2001      	movs	r0, #1
 80107b2:	bd70      	pop	{r4, r5, r6, pc}
 80107b4:	7909      	ldrb	r1, [r1, #4]
 80107b6:	f7f7 fbcd 	bl	8007f54 <ucdr_serialize_uint8_t>
 80107ba:	4606      	mov	r6, r0
 80107bc:	b158      	cbz	r0, 80107d6 <uxr_serialize_ObjectVariant.part.0+0x62>
 80107be:	7923      	ldrb	r3, [r4, #4]
 80107c0:	2b02      	cmp	r3, #2
 80107c2:	d03c      	beq.n	801083e <uxr_serialize_ObjectVariant.part.0+0xca>
 80107c4:	2b03      	cmp	r3, #3
 80107c6:	d106      	bne.n	80107d6 <uxr_serialize_ObjectVariant.part.0+0x62>
 80107c8:	68a2      	ldr	r2, [r4, #8]
 80107ca:	f104 010c 	add.w	r1, r4, #12
 80107ce:	4628      	mov	r0, r5
 80107d0:	f001 ff50 	bl	8012674 <ucdr_serialize_sequence_uint8_t>
 80107d4:	4606      	mov	r6, r0
 80107d6:	2202      	movs	r2, #2
 80107d8:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80107dc:	4628      	mov	r0, r5
 80107de:	f001 fe53 	bl	8012488 <ucdr_serialize_array_uint8_t>
 80107e2:	4030      	ands	r0, r6
 80107e4:	b2c0      	uxtb	r0, r0
 80107e6:	bd70      	pop	{r4, r5, r6, pc}
 80107e8:	2000      	movs	r0, #0
 80107ea:	bd70      	pop	{r4, r5, r6, pc}
 80107ec:	7909      	ldrb	r1, [r1, #4]
 80107ee:	f7f7 fbb1 	bl	8007f54 <ucdr_serialize_uint8_t>
 80107f2:	4606      	mov	r6, r0
 80107f4:	b158      	cbz	r0, 801080e <uxr_serialize_ObjectVariant.part.0+0x9a>
 80107f6:	7923      	ldrb	r3, [r4, #4]
 80107f8:	2b02      	cmp	r3, #2
 80107fa:	d003      	beq.n	8010804 <uxr_serialize_ObjectVariant.part.0+0x90>
 80107fc:	2b03      	cmp	r3, #3
 80107fe:	d024      	beq.n	801084a <uxr_serialize_ObjectVariant.part.0+0xd6>
 8010800:	2b01      	cmp	r3, #1
 8010802:	d104      	bne.n	801080e <uxr_serialize_ObjectVariant.part.0+0x9a>
 8010804:	68a1      	ldr	r1, [r4, #8]
 8010806:	4628      	mov	r0, r5
 8010808:	f001 ff62 	bl	80126d0 <ucdr_serialize_string>
 801080c:	4606      	mov	r6, r0
 801080e:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8010812:	4628      	mov	r0, r5
 8010814:	f7f8 f8c6 	bl	80089a4 <ucdr_serialize_int16_t>
 8010818:	4030      	ands	r0, r6
 801081a:	b2c0      	uxtb	r0, r0
 801081c:	bd70      	pop	{r4, r5, r6, pc}
 801081e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010822:	3104      	adds	r1, #4
 8010824:	f7ff be76 	b.w	8010514 <uxr_serialize_CLIENT_Representation>
 8010828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801082c:	3104      	adds	r1, #4
 801082e:	f7ff bf2f 	b.w	8010690 <uxr_serialize_AGENT_Representation>
 8010832:	68a1      	ldr	r1, [r4, #8]
 8010834:	4628      	mov	r0, r5
 8010836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801083a:	f001 bf49 	b.w	80126d0 <ucdr_serialize_string>
 801083e:	68a1      	ldr	r1, [r4, #8]
 8010840:	4628      	mov	r0, r5
 8010842:	f001 ff45 	bl	80126d0 <ucdr_serialize_string>
 8010846:	4606      	mov	r6, r0
 8010848:	e7c5      	b.n	80107d6 <uxr_serialize_ObjectVariant.part.0+0x62>
 801084a:	68a2      	ldr	r2, [r4, #8]
 801084c:	f104 010c 	add.w	r1, r4, #12
 8010850:	4628      	mov	r0, r5
 8010852:	f001 ff0f 	bl	8012674 <ucdr_serialize_sequence_uint8_t>
 8010856:	4606      	mov	r6, r0
 8010858:	e7d9      	b.n	801080e <uxr_serialize_ObjectVariant.part.0+0x9a>
 801085a:	bf00      	nop

0801085c <uxr_deserialize_DATAWRITER_Representation>:
 801085c:	b570      	push	{r4, r5, r6, lr}
 801085e:	4606      	mov	r6, r0
 8010860:	460d      	mov	r5, r1
 8010862:	f7f7 fb8d 	bl	8007f80 <ucdr_deserialize_uint8_t>
 8010866:	4604      	mov	r4, r0
 8010868:	b130      	cbz	r0, 8010878 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801086a:	782b      	ldrb	r3, [r5, #0]
 801086c:	2b02      	cmp	r3, #2
 801086e:	d00c      	beq.n	801088a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010870:	2b03      	cmp	r3, #3
 8010872:	d012      	beq.n	801089a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8010874:	2b01      	cmp	r3, #1
 8010876:	d008      	beq.n	801088a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010878:	2202      	movs	r2, #2
 801087a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801087e:	4630      	mov	r0, r6
 8010880:	f001 fe66 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 8010884:	4020      	ands	r0, r4
 8010886:	b2c0      	uxtb	r0, r0
 8010888:	bd70      	pop	{r4, r5, r6, pc}
 801088a:	6869      	ldr	r1, [r5, #4]
 801088c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010890:	4630      	mov	r0, r6
 8010892:	f001 ff2b 	bl	80126ec <ucdr_deserialize_string>
 8010896:	4604      	mov	r4, r0
 8010898:	e7ee      	b.n	8010878 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801089a:	1d2b      	adds	r3, r5, #4
 801089c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80108a0:	f105 0108 	add.w	r1, r5, #8
 80108a4:	4630      	mov	r0, r6
 80108a6:	f001 fef7 	bl	8012698 <ucdr_deserialize_sequence_uint8_t>
 80108aa:	4604      	mov	r4, r0
 80108ac:	e7e4      	b.n	8010878 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80108ae:	bf00      	nop

080108b0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80108b0:	b570      	push	{r4, r5, r6, lr}
 80108b2:	460d      	mov	r5, r1
 80108b4:	7809      	ldrb	r1, [r1, #0]
 80108b6:	4606      	mov	r6, r0
 80108b8:	f7f7 fb1e 	bl	8007ef8 <ucdr_serialize_bool>
 80108bc:	782b      	ldrb	r3, [r5, #0]
 80108be:	4604      	mov	r4, r0
 80108c0:	b94b      	cbnz	r3, 80108d6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80108c2:	7a29      	ldrb	r1, [r5, #8]
 80108c4:	4630      	mov	r0, r6
 80108c6:	f7f7 fb17 	bl	8007ef8 <ucdr_serialize_bool>
 80108ca:	7a2b      	ldrb	r3, [r5, #8]
 80108cc:	4004      	ands	r4, r0
 80108ce:	b2e4      	uxtb	r4, r4
 80108d0:	b943      	cbnz	r3, 80108e4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80108d2:	4620      	mov	r0, r4
 80108d4:	bd70      	pop	{r4, r5, r6, pc}
 80108d6:	6869      	ldr	r1, [r5, #4]
 80108d8:	4630      	mov	r0, r6
 80108da:	f001 fef9 	bl	80126d0 <ucdr_serialize_string>
 80108de:	4004      	ands	r4, r0
 80108e0:	b2e4      	uxtb	r4, r4
 80108e2:	e7ee      	b.n	80108c2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80108e4:	68e9      	ldr	r1, [r5, #12]
 80108e6:	4630      	mov	r0, r6
 80108e8:	f001 fef2 	bl	80126d0 <ucdr_serialize_string>
 80108ec:	4004      	ands	r4, r0
 80108ee:	4620      	mov	r0, r4
 80108f0:	bd70      	pop	{r4, r5, r6, pc}
 80108f2:	bf00      	nop

080108f4 <uxr_serialize_OBJK_Topic_Binary>:
 80108f4:	b570      	push	{r4, r5, r6, lr}
 80108f6:	460d      	mov	r5, r1
 80108f8:	6809      	ldr	r1, [r1, #0]
 80108fa:	4606      	mov	r6, r0
 80108fc:	f001 fee8 	bl	80126d0 <ucdr_serialize_string>
 8010900:	7929      	ldrb	r1, [r5, #4]
 8010902:	4604      	mov	r4, r0
 8010904:	4630      	mov	r0, r6
 8010906:	f7f7 faf7 	bl	8007ef8 <ucdr_serialize_bool>
 801090a:	792b      	ldrb	r3, [r5, #4]
 801090c:	4004      	ands	r4, r0
 801090e:	b2e4      	uxtb	r4, r4
 8010910:	b943      	cbnz	r3, 8010924 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8010912:	7b29      	ldrb	r1, [r5, #12]
 8010914:	4630      	mov	r0, r6
 8010916:	f7f7 faef 	bl	8007ef8 <ucdr_serialize_bool>
 801091a:	7b2b      	ldrb	r3, [r5, #12]
 801091c:	4004      	ands	r4, r0
 801091e:	b93b      	cbnz	r3, 8010930 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8010920:	4620      	mov	r0, r4
 8010922:	bd70      	pop	{r4, r5, r6, pc}
 8010924:	68a9      	ldr	r1, [r5, #8]
 8010926:	4630      	mov	r0, r6
 8010928:	f001 fed2 	bl	80126d0 <ucdr_serialize_string>
 801092c:	4004      	ands	r4, r0
 801092e:	e7f0      	b.n	8010912 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8010930:	6929      	ldr	r1, [r5, #16]
 8010932:	4630      	mov	r0, r6
 8010934:	f001 fecc 	bl	80126d0 <ucdr_serialize_string>
 8010938:	4004      	ands	r4, r0
 801093a:	b2e4      	uxtb	r4, r4
 801093c:	4620      	mov	r0, r4
 801093e:	bd70      	pop	{r4, r5, r6, pc}

08010940 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8010940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010944:	460c      	mov	r4, r1
 8010946:	7809      	ldrb	r1, [r1, #0]
 8010948:	4606      	mov	r6, r0
 801094a:	f7f7 fad5 	bl	8007ef8 <ucdr_serialize_bool>
 801094e:	7823      	ldrb	r3, [r4, #0]
 8010950:	4605      	mov	r5, r0
 8010952:	b96b      	cbnz	r3, 8010970 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8010954:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8010958:	4630      	mov	r0, r6
 801095a:	f7f7 facd 	bl	8007ef8 <ucdr_serialize_bool>
 801095e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010962:	4005      	ands	r5, r0
 8010964:	b2ed      	uxtb	r5, r5
 8010966:	2b00      	cmp	r3, #0
 8010968:	d16a      	bne.n	8010a40 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x100>
 801096a:	4628      	mov	r0, r5
 801096c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010970:	6861      	ldr	r1, [r4, #4]
 8010972:	4630      	mov	r0, r6
 8010974:	f7f7 fd0a 	bl	800838c <ucdr_serialize_uint32_t>
 8010978:	6863      	ldr	r3, [r4, #4]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d06c      	beq.n	8010a58 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x118>
 801097e:	2800      	cmp	r0, #0
 8010980:	d068      	beq.n	8010a54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8010982:	68a1      	ldr	r1, [r4, #8]
 8010984:	4630      	mov	r0, r6
 8010986:	f001 fea3 	bl	80126d0 <ucdr_serialize_string>
 801098a:	6862      	ldr	r2, [r4, #4]
 801098c:	2a01      	cmp	r2, #1
 801098e:	d953      	bls.n	8010a38 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010990:	2800      	cmp	r0, #0
 8010992:	d05f      	beq.n	8010a54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8010994:	68e1      	ldr	r1, [r4, #12]
 8010996:	4630      	mov	r0, r6
 8010998:	f001 fe9a 	bl	80126d0 <ucdr_serialize_string>
 801099c:	6862      	ldr	r2, [r4, #4]
 801099e:	2a02      	cmp	r2, #2
 80109a0:	d94a      	bls.n	8010a38 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80109a2:	2800      	cmp	r0, #0
 80109a4:	d056      	beq.n	8010a54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80109a6:	6921      	ldr	r1, [r4, #16]
 80109a8:	4630      	mov	r0, r6
 80109aa:	f001 fe91 	bl	80126d0 <ucdr_serialize_string>
 80109ae:	6862      	ldr	r2, [r4, #4]
 80109b0:	2a03      	cmp	r2, #3
 80109b2:	d941      	bls.n	8010a38 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80109b4:	2800      	cmp	r0, #0
 80109b6:	d04d      	beq.n	8010a54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80109b8:	6961      	ldr	r1, [r4, #20]
 80109ba:	4630      	mov	r0, r6
 80109bc:	f001 fe88 	bl	80126d0 <ucdr_serialize_string>
 80109c0:	6862      	ldr	r2, [r4, #4]
 80109c2:	2a04      	cmp	r2, #4
 80109c4:	d938      	bls.n	8010a38 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80109c6:	2800      	cmp	r0, #0
 80109c8:	d044      	beq.n	8010a54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80109ca:	69a1      	ldr	r1, [r4, #24]
 80109cc:	4630      	mov	r0, r6
 80109ce:	f001 fe7f 	bl	80126d0 <ucdr_serialize_string>
 80109d2:	6862      	ldr	r2, [r4, #4]
 80109d4:	2a05      	cmp	r2, #5
 80109d6:	d92f      	bls.n	8010a38 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80109d8:	2800      	cmp	r0, #0
 80109da:	d03b      	beq.n	8010a54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80109dc:	69e1      	ldr	r1, [r4, #28]
 80109de:	4630      	mov	r0, r6
 80109e0:	f001 fe76 	bl	80126d0 <ucdr_serialize_string>
 80109e4:	6862      	ldr	r2, [r4, #4]
 80109e6:	2a06      	cmp	r2, #6
 80109e8:	d926      	bls.n	8010a38 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80109ea:	b398      	cbz	r0, 8010a54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80109ec:	6a21      	ldr	r1, [r4, #32]
 80109ee:	4630      	mov	r0, r6
 80109f0:	f001 fe6e 	bl	80126d0 <ucdr_serialize_string>
 80109f4:	6862      	ldr	r2, [r4, #4]
 80109f6:	2a07      	cmp	r2, #7
 80109f8:	d91e      	bls.n	8010a38 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80109fa:	b358      	cbz	r0, 8010a54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80109fc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80109fe:	4630      	mov	r0, r6
 8010a00:	f001 fe66 	bl	80126d0 <ucdr_serialize_string>
 8010a04:	6862      	ldr	r2, [r4, #4]
 8010a06:	2a08      	cmp	r2, #8
 8010a08:	d916      	bls.n	8010a38 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010a0a:	b318      	cbz	r0, 8010a54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8010a0c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8010a0e:	4630      	mov	r0, r6
 8010a10:	f001 fe5e 	bl	80126d0 <ucdr_serialize_string>
 8010a14:	6862      	ldr	r2, [r4, #4]
 8010a16:	2a09      	cmp	r2, #9
 8010a18:	d90e      	bls.n	8010a38 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010a1a:	b1d8      	cbz	r0, 8010a54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8010a1c:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 8010a20:	2709      	movs	r7, #9
 8010a22:	e000      	b.n	8010a26 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8010a24:	b1b0      	cbz	r0, 8010a54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8010a26:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8010a2a:	4630      	mov	r0, r6
 8010a2c:	f001 fe50 	bl	80126d0 <ucdr_serialize_string>
 8010a30:	6862      	ldr	r2, [r4, #4]
 8010a32:	3701      	adds	r7, #1
 8010a34:	4297      	cmp	r7, r2
 8010a36:	d3f5      	bcc.n	8010a24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8010a38:	ea05 0300 	and.w	r3, r5, r0
 8010a3c:	b2dd      	uxtb	r5, r3
 8010a3e:	e789      	b.n	8010954 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8010a40:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010a42:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010a46:	4630      	mov	r0, r6
 8010a48:	f001 fe14 	bl	8012674 <ucdr_serialize_sequence_uint8_t>
 8010a4c:	4005      	ands	r5, r0
 8010a4e:	4628      	mov	r0, r5
 8010a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a54:	2500      	movs	r5, #0
 8010a56:	e77d      	b.n	8010954 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8010a58:	4028      	ands	r0, r5
 8010a5a:	b2c5      	uxtb	r5, r0
 8010a5c:	e77a      	b.n	8010954 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8010a5e:	bf00      	nop

08010a60 <uxr_serialize_OBJK_Subscriber_Binary>:
 8010a60:	b570      	push	{r4, r5, r6, lr}
 8010a62:	460d      	mov	r5, r1
 8010a64:	7809      	ldrb	r1, [r1, #0]
 8010a66:	4606      	mov	r6, r0
 8010a68:	f7f7 fa46 	bl	8007ef8 <ucdr_serialize_bool>
 8010a6c:	782b      	ldrb	r3, [r5, #0]
 8010a6e:	4604      	mov	r4, r0
 8010a70:	b94b      	cbnz	r3, 8010a86 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8010a72:	7a29      	ldrb	r1, [r5, #8]
 8010a74:	4630      	mov	r0, r6
 8010a76:	f7f7 fa3f 	bl	8007ef8 <ucdr_serialize_bool>
 8010a7a:	7a2b      	ldrb	r3, [r5, #8]
 8010a7c:	4004      	ands	r4, r0
 8010a7e:	b2e4      	uxtb	r4, r4
 8010a80:	b943      	cbnz	r3, 8010a94 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8010a82:	4620      	mov	r0, r4
 8010a84:	bd70      	pop	{r4, r5, r6, pc}
 8010a86:	6869      	ldr	r1, [r5, #4]
 8010a88:	4630      	mov	r0, r6
 8010a8a:	f001 fe21 	bl	80126d0 <ucdr_serialize_string>
 8010a8e:	4004      	ands	r4, r0
 8010a90:	b2e4      	uxtb	r4, r4
 8010a92:	e7ee      	b.n	8010a72 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8010a94:	f105 010c 	add.w	r1, r5, #12
 8010a98:	4630      	mov	r0, r6
 8010a9a:	f7ff ff51 	bl	8010940 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8010a9e:	4004      	ands	r4, r0
 8010aa0:	4620      	mov	r0, r4
 8010aa2:	bd70      	pop	{r4, r5, r6, pc}

08010aa4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8010aa4:	b570      	push	{r4, r5, r6, lr}
 8010aa6:	460d      	mov	r5, r1
 8010aa8:	8809      	ldrh	r1, [r1, #0]
 8010aaa:	4606      	mov	r6, r0
 8010aac:	f7f7 fa7e 	bl	8007fac <ucdr_serialize_uint16_t>
 8010ab0:	78a9      	ldrb	r1, [r5, #2]
 8010ab2:	4604      	mov	r4, r0
 8010ab4:	4630      	mov	r0, r6
 8010ab6:	f7f7 fa1f 	bl	8007ef8 <ucdr_serialize_bool>
 8010aba:	78ab      	ldrb	r3, [r5, #2]
 8010abc:	4004      	ands	r4, r0
 8010abe:	b2e4      	uxtb	r4, r4
 8010ac0:	b9b3      	cbnz	r3, 8010af0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 8010ac2:	79a9      	ldrb	r1, [r5, #6]
 8010ac4:	4630      	mov	r0, r6
 8010ac6:	f7f7 fa17 	bl	8007ef8 <ucdr_serialize_bool>
 8010aca:	79ab      	ldrb	r3, [r5, #6]
 8010acc:	4004      	ands	r4, r0
 8010ace:	bb33      	cbnz	r3, 8010b1e <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 8010ad0:	7b29      	ldrb	r1, [r5, #12]
 8010ad2:	4630      	mov	r0, r6
 8010ad4:	f7f7 fa10 	bl	8007ef8 <ucdr_serialize_bool>
 8010ad8:	7b2b      	ldrb	r3, [r5, #12]
 8010ada:	4004      	ands	r4, r0
 8010adc:	b9c3      	cbnz	r3, 8010b10 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 8010ade:	7d29      	ldrb	r1, [r5, #20]
 8010ae0:	4630      	mov	r0, r6
 8010ae2:	f7f7 fa09 	bl	8007ef8 <ucdr_serialize_bool>
 8010ae6:	7d2b      	ldrb	r3, [r5, #20]
 8010ae8:	4004      	ands	r4, r0
 8010aea:	b93b      	cbnz	r3, 8010afc <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 8010aec:	4620      	mov	r0, r4
 8010aee:	bd70      	pop	{r4, r5, r6, pc}
 8010af0:	88a9      	ldrh	r1, [r5, #4]
 8010af2:	4630      	mov	r0, r6
 8010af4:	f7f7 fa5a 	bl	8007fac <ucdr_serialize_uint16_t>
 8010af8:	4004      	ands	r4, r0
 8010afa:	e7e2      	b.n	8010ac2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 8010afc:	69aa      	ldr	r2, [r5, #24]
 8010afe:	f105 011c 	add.w	r1, r5, #28
 8010b02:	4630      	mov	r0, r6
 8010b04:	f001 fdb6 	bl	8012674 <ucdr_serialize_sequence_uint8_t>
 8010b08:	4004      	ands	r4, r0
 8010b0a:	b2e4      	uxtb	r4, r4
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	bd70      	pop	{r4, r5, r6, pc}
 8010b10:	6929      	ldr	r1, [r5, #16]
 8010b12:	4630      	mov	r0, r6
 8010b14:	f7f7 fc3a 	bl	800838c <ucdr_serialize_uint32_t>
 8010b18:	4004      	ands	r4, r0
 8010b1a:	b2e4      	uxtb	r4, r4
 8010b1c:	e7df      	b.n	8010ade <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 8010b1e:	68a9      	ldr	r1, [r5, #8]
 8010b20:	4630      	mov	r0, r6
 8010b22:	f7f7 fc33 	bl	800838c <ucdr_serialize_uint32_t>
 8010b26:	4004      	ands	r4, r0
 8010b28:	b2e4      	uxtb	r4, r4
 8010b2a:	e7d1      	b.n	8010ad0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

08010b2c <uxr_serialize_OBJK_DataReader_Binary>:
 8010b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b2e:	2202      	movs	r2, #2
 8010b30:	460c      	mov	r4, r1
 8010b32:	4606      	mov	r6, r0
 8010b34:	f001 fca8 	bl	8012488 <ucdr_serialize_array_uint8_t>
 8010b38:	78a1      	ldrb	r1, [r4, #2]
 8010b3a:	4605      	mov	r5, r0
 8010b3c:	4630      	mov	r0, r6
 8010b3e:	f7f7 f9db 	bl	8007ef8 <ucdr_serialize_bool>
 8010b42:	78a3      	ldrb	r3, [r4, #2]
 8010b44:	4005      	ands	r5, r0
 8010b46:	b2ed      	uxtb	r5, r5
 8010b48:	b90b      	cbnz	r3, 8010b4e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8010b4a:	4628      	mov	r0, r5
 8010b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b4e:	f104 0108 	add.w	r1, r4, #8
 8010b52:	4630      	mov	r0, r6
 8010b54:	f7ff ffa6 	bl	8010aa4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8010b58:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010b5c:	4607      	mov	r7, r0
 8010b5e:	4630      	mov	r0, r6
 8010b60:	f7f7 f9ca 	bl	8007ef8 <ucdr_serialize_bool>
 8010b64:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010b68:	4007      	ands	r7, r0
 8010b6a:	b2ff      	uxtb	r7, r7
 8010b6c:	b95b      	cbnz	r3, 8010b86 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8010b6e:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8010b72:	4630      	mov	r0, r6
 8010b74:	f7f7 f9c0 	bl	8007ef8 <ucdr_serialize_bool>
 8010b78:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010b7c:	4007      	ands	r7, r0
 8010b7e:	b94b      	cbnz	r3, 8010b94 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8010b80:	403d      	ands	r5, r7
 8010b82:	4628      	mov	r0, r5
 8010b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b86:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8010b8a:	4630      	mov	r0, r6
 8010b8c:	f7f7 fe42 	bl	8008814 <ucdr_serialize_uint64_t>
 8010b90:	4007      	ands	r7, r0
 8010b92:	e7ec      	b.n	8010b6e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8010b94:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8010b96:	4630      	mov	r0, r6
 8010b98:	f001 fd9a 	bl	80126d0 <ucdr_serialize_string>
 8010b9c:	4007      	ands	r7, r0
 8010b9e:	b2ff      	uxtb	r7, r7
 8010ba0:	e7ee      	b.n	8010b80 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8010ba2:	bf00      	nop

08010ba4 <uxr_deserialize_ObjectVariant>:
 8010ba4:	b570      	push	{r4, r5, r6, lr}
 8010ba6:	4605      	mov	r5, r0
 8010ba8:	460e      	mov	r6, r1
 8010baa:	f7f7 f9e9 	bl	8007f80 <ucdr_deserialize_uint8_t>
 8010bae:	b168      	cbz	r0, 8010bcc <uxr_deserialize_ObjectVariant+0x28>
 8010bb0:	7833      	ldrb	r3, [r6, #0]
 8010bb2:	3b01      	subs	r3, #1
 8010bb4:	4604      	mov	r4, r0
 8010bb6:	2b0d      	cmp	r3, #13
 8010bb8:	d809      	bhi.n	8010bce <uxr_deserialize_ObjectVariant+0x2a>
 8010bba:	e8df f003 	tbb	[pc, r3]
 8010bbe:	0a64      	.short	0x0a64
 8010bc0:	0a0a2323 	.word	0x0a0a2323
 8010bc4:	10080a0a 	.word	0x10080a0a
 8010bc8:	5e411010 	.word	0x5e411010
 8010bcc:	2400      	movs	r4, #0
 8010bce:	4620      	mov	r0, r4
 8010bd0:	bd70      	pop	{r4, r5, r6, pc}
 8010bd2:	1d31      	adds	r1, r6, #4
 8010bd4:	4628      	mov	r0, r5
 8010bd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bda:	f7ff be3f 	b.w	801085c <uxr_deserialize_DATAWRITER_Representation>
 8010bde:	1d31      	adds	r1, r6, #4
 8010be0:	4628      	mov	r0, r5
 8010be2:	f7f7 f9cd 	bl	8007f80 <ucdr_deserialize_uint8_t>
 8010be6:	2800      	cmp	r0, #0
 8010be8:	d0f0      	beq.n	8010bcc <uxr_deserialize_ObjectVariant+0x28>
 8010bea:	7933      	ldrb	r3, [r6, #4]
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d001      	beq.n	8010bf4 <uxr_deserialize_ObjectVariant+0x50>
 8010bf0:	2b02      	cmp	r3, #2
 8010bf2:	d1ec      	bne.n	8010bce <uxr_deserialize_ObjectVariant+0x2a>
 8010bf4:	68b1      	ldr	r1, [r6, #8]
 8010bf6:	4628      	mov	r0, r5
 8010bf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010bfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c00:	f001 bd74 	b.w	80126ec <ucdr_deserialize_string>
 8010c04:	1d31      	adds	r1, r6, #4
 8010c06:	4628      	mov	r0, r5
 8010c08:	f7f7 f9ba 	bl	8007f80 <ucdr_deserialize_uint8_t>
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	b170      	cbz	r0, 8010c2e <uxr_deserialize_ObjectVariant+0x8a>
 8010c10:	7933      	ldrb	r3, [r6, #4]
 8010c12:	2b02      	cmp	r3, #2
 8010c14:	d053      	beq.n	8010cbe <uxr_deserialize_ObjectVariant+0x11a>
 8010c16:	2b03      	cmp	r3, #3
 8010c18:	d109      	bne.n	8010c2e <uxr_deserialize_ObjectVariant+0x8a>
 8010c1a:	f106 0308 	add.w	r3, r6, #8
 8010c1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010c22:	f106 010c 	add.w	r1, r6, #12
 8010c26:	4628      	mov	r0, r5
 8010c28:	f001 fd36 	bl	8012698 <ucdr_deserialize_sequence_uint8_t>
 8010c2c:	4604      	mov	r4, r0
 8010c2e:	2202      	movs	r2, #2
 8010c30:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8010c34:	4628      	mov	r0, r5
 8010c36:	f001 fc8b 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 8010c3a:	4004      	ands	r4, r0
 8010c3c:	b2e4      	uxtb	r4, r4
 8010c3e:	e7c6      	b.n	8010bce <uxr_deserialize_ObjectVariant+0x2a>
 8010c40:	2204      	movs	r2, #4
 8010c42:	18b1      	adds	r1, r6, r2
 8010c44:	4628      	mov	r0, r5
 8010c46:	f001 fc83 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 8010c4a:	2202      	movs	r2, #2
 8010c4c:	f106 0108 	add.w	r1, r6, #8
 8010c50:	4604      	mov	r4, r0
 8010c52:	4628      	mov	r0, r5
 8010c54:	f001 fc7c 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 8010c58:	2202      	movs	r2, #2
 8010c5a:	4004      	ands	r4, r0
 8010c5c:	f106 010a 	add.w	r1, r6, #10
 8010c60:	4628      	mov	r0, r5
 8010c62:	f001 fc75 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 8010c66:	b2e4      	uxtb	r4, r4
 8010c68:	4603      	mov	r3, r0
 8010c6a:	f106 010c 	add.w	r1, r6, #12
 8010c6e:	4628      	mov	r0, r5
 8010c70:	401c      	ands	r4, r3
 8010c72:	f7f7 f957 	bl	8007f24 <ucdr_deserialize_bool>
 8010c76:	4004      	ands	r4, r0
 8010c78:	e7a9      	b.n	8010bce <uxr_deserialize_ObjectVariant+0x2a>
 8010c7a:	1d31      	adds	r1, r6, #4
 8010c7c:	4628      	mov	r0, r5
 8010c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c82:	f7ff bca1 	b.w	80105c8 <uxr_deserialize_CLIENT_Representation>
 8010c86:	1d31      	adds	r1, r6, #4
 8010c88:	4628      	mov	r0, r5
 8010c8a:	f7f7 f979 	bl	8007f80 <ucdr_deserialize_uint8_t>
 8010c8e:	4604      	mov	r4, r0
 8010c90:	b168      	cbz	r0, 8010cae <uxr_deserialize_ObjectVariant+0x10a>
 8010c92:	7933      	ldrb	r3, [r6, #4]
 8010c94:	2b02      	cmp	r3, #2
 8010c96:	d003      	beq.n	8010ca0 <uxr_deserialize_ObjectVariant+0xfc>
 8010c98:	2b03      	cmp	r3, #3
 8010c9a:	d018      	beq.n	8010cce <uxr_deserialize_ObjectVariant+0x12a>
 8010c9c:	2b01      	cmp	r3, #1
 8010c9e:	d106      	bne.n	8010cae <uxr_deserialize_ObjectVariant+0x10a>
 8010ca0:	68b1      	ldr	r1, [r6, #8]
 8010ca2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010ca6:	4628      	mov	r0, r5
 8010ca8:	f001 fd20 	bl	80126ec <ucdr_deserialize_string>
 8010cac:	4604      	mov	r4, r0
 8010cae:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8010cb2:	4628      	mov	r0, r5
 8010cb4:	f7f7 ff00 	bl	8008ab8 <ucdr_deserialize_int16_t>
 8010cb8:	4004      	ands	r4, r0
 8010cba:	b2e4      	uxtb	r4, r4
 8010cbc:	e787      	b.n	8010bce <uxr_deserialize_ObjectVariant+0x2a>
 8010cbe:	68b1      	ldr	r1, [r6, #8]
 8010cc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010cc4:	4628      	mov	r0, r5
 8010cc6:	f001 fd11 	bl	80126ec <ucdr_deserialize_string>
 8010cca:	4604      	mov	r4, r0
 8010ccc:	e7af      	b.n	8010c2e <uxr_deserialize_ObjectVariant+0x8a>
 8010cce:	f106 0308 	add.w	r3, r6, #8
 8010cd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010cd6:	f106 010c 	add.w	r1, r6, #12
 8010cda:	4628      	mov	r0, r5
 8010cdc:	f001 fcdc 	bl	8012698 <ucdr_deserialize_sequence_uint8_t>
 8010ce0:	4604      	mov	r4, r0
 8010ce2:	e7e4      	b.n	8010cae <uxr_deserialize_ObjectVariant+0x10a>

08010ce4 <uxr_deserialize_BaseObjectRequest>:
 8010ce4:	b570      	push	{r4, r5, r6, lr}
 8010ce6:	2202      	movs	r2, #2
 8010ce8:	4605      	mov	r5, r0
 8010cea:	460e      	mov	r6, r1
 8010cec:	f001 fc30 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 8010cf0:	2202      	movs	r2, #2
 8010cf2:	4604      	mov	r4, r0
 8010cf4:	18b1      	adds	r1, r6, r2
 8010cf6:	4628      	mov	r0, r5
 8010cf8:	f001 fc2a 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 8010cfc:	4020      	ands	r0, r4
 8010cfe:	b2c0      	uxtb	r0, r0
 8010d00:	bd70      	pop	{r4, r5, r6, pc}
 8010d02:	bf00      	nop

08010d04 <uxr_serialize_ActivityInfoVariant>:
 8010d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d08:	460d      	mov	r5, r1
 8010d0a:	7809      	ldrb	r1, [r1, #0]
 8010d0c:	4606      	mov	r6, r0
 8010d0e:	f7f7 f921 	bl	8007f54 <ucdr_serialize_uint8_t>
 8010d12:	b130      	cbz	r0, 8010d22 <uxr_serialize_ActivityInfoVariant+0x1e>
 8010d14:	782b      	ldrb	r3, [r5, #0]
 8010d16:	2b06      	cmp	r3, #6
 8010d18:	d014      	beq.n	8010d44 <uxr_serialize_ActivityInfoVariant+0x40>
 8010d1a:	2b0d      	cmp	r3, #13
 8010d1c:	d019      	beq.n	8010d52 <uxr_serialize_ActivityInfoVariant+0x4e>
 8010d1e:	2b05      	cmp	r3, #5
 8010d20:	d001      	beq.n	8010d26 <uxr_serialize_ActivityInfoVariant+0x22>
 8010d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d26:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010d2a:	4630      	mov	r0, r6
 8010d2c:	f7f7 fe3a 	bl	80089a4 <ucdr_serialize_int16_t>
 8010d30:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8010d34:	4604      	mov	r4, r0
 8010d36:	4630      	mov	r0, r6
 8010d38:	f7f7 fd6c 	bl	8008814 <ucdr_serialize_uint64_t>
 8010d3c:	4020      	ands	r0, r4
 8010d3e:	b2c0      	uxtb	r0, r0
 8010d40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d44:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010d48:	4630      	mov	r0, r6
 8010d4a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d4e:	f7f7 be29 	b.w	80089a4 <ucdr_serialize_int16_t>
 8010d52:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010d56:	4630      	mov	r0, r6
 8010d58:	f7f7 fe24 	bl	80089a4 <ucdr_serialize_int16_t>
 8010d5c:	68e9      	ldr	r1, [r5, #12]
 8010d5e:	4681      	mov	r9, r0
 8010d60:	4630      	mov	r0, r6
 8010d62:	f7f7 fb13 	bl	800838c <ucdr_serialize_uint32_t>
 8010d66:	68eb      	ldr	r3, [r5, #12]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d051      	beq.n	8010e10 <uxr_serialize_ActivityInfoVariant+0x10c>
 8010d6c:	b1e8      	cbz	r0, 8010daa <uxr_serialize_ActivityInfoVariant+0xa6>
 8010d6e:	f105 0714 	add.w	r7, r5, #20
 8010d72:	f04f 0800 	mov.w	r8, #0
 8010d76:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 8010d7a:	4630      	mov	r0, r6
 8010d7c:	f7f7 f8ea 	bl	8007f54 <ucdr_serialize_uint8_t>
 8010d80:	b198      	cbz	r0, 8010daa <uxr_serialize_ActivityInfoVariant+0xa6>
 8010d82:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8010d86:	2b03      	cmp	r3, #3
 8010d88:	d839      	bhi.n	8010dfe <uxr_serialize_ActivityInfoVariant+0xfa>
 8010d8a:	e8df f003 	tbb	[pc, r3]
 8010d8e:	1e2b      	.short	0x1e2b
 8010d90:	0211      	.short	0x0211
 8010d92:	6839      	ldr	r1, [r7, #0]
 8010d94:	4630      	mov	r0, r6
 8010d96:	f001 fc9b 	bl	80126d0 <ucdr_serialize_string>
 8010d9a:	68eb      	ldr	r3, [r5, #12]
 8010d9c:	f108 0801 	add.w	r8, r8, #1
 8010da0:	4598      	cmp	r8, r3
 8010da2:	d231      	bcs.n	8010e08 <uxr_serialize_ActivityInfoVariant+0x104>
 8010da4:	3718      	adds	r7, #24
 8010da6:	2800      	cmp	r0, #0
 8010da8:	d1e5      	bne.n	8010d76 <uxr_serialize_ActivityInfoVariant+0x72>
 8010daa:	2000      	movs	r0, #0
 8010dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010db0:	2210      	movs	r2, #16
 8010db2:	4639      	mov	r1, r7
 8010db4:	4630      	mov	r0, r6
 8010db6:	f001 fb67 	bl	8012488 <ucdr_serialize_array_uint8_t>
 8010dba:	6939      	ldr	r1, [r7, #16]
 8010dbc:	4604      	mov	r4, r0
 8010dbe:	4630      	mov	r0, r6
 8010dc0:	f7f7 fae4 	bl	800838c <ucdr_serialize_uint32_t>
 8010dc4:	4020      	ands	r0, r4
 8010dc6:	b2c0      	uxtb	r0, r0
 8010dc8:	e7e7      	b.n	8010d9a <uxr_serialize_ActivityInfoVariant+0x96>
 8010dca:	2204      	movs	r2, #4
 8010dcc:	4639      	mov	r1, r7
 8010dce:	4630      	mov	r0, r6
 8010dd0:	f001 fb5a 	bl	8012488 <ucdr_serialize_array_uint8_t>
 8010dd4:	88b9      	ldrh	r1, [r7, #4]
 8010dd6:	4604      	mov	r4, r0
 8010dd8:	4630      	mov	r0, r6
 8010dda:	f7f7 f8e7 	bl	8007fac <ucdr_serialize_uint16_t>
 8010dde:	4020      	ands	r0, r4
 8010de0:	b2c0      	uxtb	r0, r0
 8010de2:	e7da      	b.n	8010d9a <uxr_serialize_ActivityInfoVariant+0x96>
 8010de4:	2202      	movs	r2, #2
 8010de6:	4639      	mov	r1, r7
 8010de8:	4630      	mov	r0, r6
 8010dea:	f001 fb4d 	bl	8012488 <ucdr_serialize_array_uint8_t>
 8010dee:	78b9      	ldrb	r1, [r7, #2]
 8010df0:	4604      	mov	r4, r0
 8010df2:	4630      	mov	r0, r6
 8010df4:	f7f7 f8ae 	bl	8007f54 <ucdr_serialize_uint8_t>
 8010df8:	4020      	ands	r0, r4
 8010dfa:	b2c0      	uxtb	r0, r0
 8010dfc:	e7cd      	b.n	8010d9a <uxr_serialize_ActivityInfoVariant+0x96>
 8010dfe:	68eb      	ldr	r3, [r5, #12]
 8010e00:	f108 0801 	add.w	r8, r8, #1
 8010e04:	4598      	cmp	r8, r3
 8010e06:	d308      	bcc.n	8010e1a <uxr_serialize_ActivityInfoVariant+0x116>
 8010e08:	ea09 0000 	and.w	r0, r9, r0
 8010e0c:	b2c0      	uxtb	r0, r0
 8010e0e:	e788      	b.n	8010d22 <uxr_serialize_ActivityInfoVariant+0x1e>
 8010e10:	ea09 0900 	and.w	r9, r9, r0
 8010e14:	fa5f f089 	uxtb.w	r0, r9
 8010e18:	e783      	b.n	8010d22 <uxr_serialize_ActivityInfoVariant+0x1e>
 8010e1a:	3718      	adds	r7, #24
 8010e1c:	e7ab      	b.n	8010d76 <uxr_serialize_ActivityInfoVariant+0x72>
 8010e1e:	bf00      	nop

08010e20 <uxr_deserialize_BaseObjectReply>:
 8010e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e24:	2202      	movs	r2, #2
 8010e26:	4606      	mov	r6, r0
 8010e28:	460f      	mov	r7, r1
 8010e2a:	f001 fb91 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 8010e2e:	2202      	movs	r2, #2
 8010e30:	18b9      	adds	r1, r7, r2
 8010e32:	4605      	mov	r5, r0
 8010e34:	4630      	mov	r0, r6
 8010e36:	f001 fb8b 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 8010e3a:	1d39      	adds	r1, r7, #4
 8010e3c:	4680      	mov	r8, r0
 8010e3e:	4630      	mov	r0, r6
 8010e40:	f7f7 f89e 	bl	8007f80 <ucdr_deserialize_uint8_t>
 8010e44:	1d79      	adds	r1, r7, #5
 8010e46:	4604      	mov	r4, r0
 8010e48:	4630      	mov	r0, r6
 8010e4a:	f7f7 f899 	bl	8007f80 <ucdr_deserialize_uint8_t>
 8010e4e:	ea05 0508 	and.w	r5, r5, r8
 8010e52:	402c      	ands	r4, r5
 8010e54:	4020      	ands	r0, r4
 8010e56:	b2c0      	uxtb	r0, r0
 8010e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010e5c <uxr_serialize_ReadSpecification>:
 8010e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e60:	460d      	mov	r5, r1
 8010e62:	7809      	ldrb	r1, [r1, #0]
 8010e64:	4606      	mov	r6, r0
 8010e66:	f7f7 f875 	bl	8007f54 <ucdr_serialize_uint8_t>
 8010e6a:	7869      	ldrb	r1, [r5, #1]
 8010e6c:	4604      	mov	r4, r0
 8010e6e:	4630      	mov	r0, r6
 8010e70:	f7f7 f870 	bl	8007f54 <ucdr_serialize_uint8_t>
 8010e74:	78a9      	ldrb	r1, [r5, #2]
 8010e76:	4004      	ands	r4, r0
 8010e78:	4630      	mov	r0, r6
 8010e7a:	f7f7 f83d 	bl	8007ef8 <ucdr_serialize_bool>
 8010e7e:	78ab      	ldrb	r3, [r5, #2]
 8010e80:	b2e4      	uxtb	r4, r4
 8010e82:	4004      	ands	r4, r0
 8010e84:	b94b      	cbnz	r3, 8010e9a <uxr_serialize_ReadSpecification+0x3e>
 8010e86:	7a29      	ldrb	r1, [r5, #8]
 8010e88:	4630      	mov	r0, r6
 8010e8a:	f7f7 f835 	bl	8007ef8 <ucdr_serialize_bool>
 8010e8e:	7a2b      	ldrb	r3, [r5, #8]
 8010e90:	4004      	ands	r4, r0
 8010e92:	b943      	cbnz	r3, 8010ea6 <uxr_serialize_ReadSpecification+0x4a>
 8010e94:	4620      	mov	r0, r4
 8010e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e9a:	6869      	ldr	r1, [r5, #4]
 8010e9c:	4630      	mov	r0, r6
 8010e9e:	f001 fc17 	bl	80126d0 <ucdr_serialize_string>
 8010ea2:	4004      	ands	r4, r0
 8010ea4:	e7ef      	b.n	8010e86 <uxr_serialize_ReadSpecification+0x2a>
 8010ea6:	8969      	ldrh	r1, [r5, #10]
 8010ea8:	4630      	mov	r0, r6
 8010eaa:	f7f7 f87f 	bl	8007fac <ucdr_serialize_uint16_t>
 8010eae:	89a9      	ldrh	r1, [r5, #12]
 8010eb0:	4607      	mov	r7, r0
 8010eb2:	4630      	mov	r0, r6
 8010eb4:	f7f7 f87a 	bl	8007fac <ucdr_serialize_uint16_t>
 8010eb8:	89e9      	ldrh	r1, [r5, #14]
 8010eba:	4007      	ands	r7, r0
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	f7f7 f875 	bl	8007fac <ucdr_serialize_uint16_t>
 8010ec2:	8a29      	ldrh	r1, [r5, #16]
 8010ec4:	4680      	mov	r8, r0
 8010ec6:	4630      	mov	r0, r6
 8010ec8:	f7f7 f870 	bl	8007fac <ucdr_serialize_uint16_t>
 8010ecc:	b2ff      	uxtb	r7, r7
 8010ece:	ea04 0507 	and.w	r5, r4, r7
 8010ed2:	ea05 0508 	and.w	r5, r5, r8
 8010ed6:	ea00 0405 	and.w	r4, r0, r5
 8010eda:	4620      	mov	r0, r4
 8010edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010ee0 <uxr_serialize_CREATE_CLIENT_Payload>:
 8010ee0:	f7ff bb18 	b.w	8010514 <uxr_serialize_CLIENT_Representation>

08010ee4 <uxr_serialize_CREATE_Payload>:
 8010ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ee6:	2202      	movs	r2, #2
 8010ee8:	4606      	mov	r6, r0
 8010eea:	460d      	mov	r5, r1
 8010eec:	f001 facc 	bl	8012488 <ucdr_serialize_array_uint8_t>
 8010ef0:	2202      	movs	r2, #2
 8010ef2:	18a9      	adds	r1, r5, r2
 8010ef4:	4604      	mov	r4, r0
 8010ef6:	4630      	mov	r0, r6
 8010ef8:	f001 fac6 	bl	8012488 <ucdr_serialize_array_uint8_t>
 8010efc:	7929      	ldrb	r1, [r5, #4]
 8010efe:	4607      	mov	r7, r0
 8010f00:	4630      	mov	r0, r6
 8010f02:	f7f7 f827 	bl	8007f54 <ucdr_serialize_uint8_t>
 8010f06:	b170      	cbz	r0, 8010f26 <uxr_serialize_CREATE_Payload+0x42>
 8010f08:	792b      	ldrb	r3, [r5, #4]
 8010f0a:	403c      	ands	r4, r7
 8010f0c:	3b01      	subs	r3, #1
 8010f0e:	b2e4      	uxtb	r4, r4
 8010f10:	2b0d      	cmp	r3, #13
 8010f12:	d809      	bhi.n	8010f28 <uxr_serialize_CREATE_Payload+0x44>
 8010f14:	e8df f003 	tbb	[pc, r3]
 8010f18:	23230a3e 	.word	0x23230a3e
 8010f1c:	0a0a0a0a 	.word	0x0a0a0a0a
 8010f20:	12121208 	.word	0x12121208
 8010f24:	5f58      	.short	0x5f58
 8010f26:	2400      	movs	r4, #0
 8010f28:	4620      	mov	r0, r4
 8010f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f2c:	f105 0108 	add.w	r1, r5, #8
 8010f30:	4630      	mov	r0, r6
 8010f32:	f7ff fbf7 	bl	8010724 <uxr_serialize_DATAWRITER_Representation>
 8010f36:	4004      	ands	r4, r0
 8010f38:	4620      	mov	r0, r4
 8010f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f3c:	7a29      	ldrb	r1, [r5, #8]
 8010f3e:	4630      	mov	r0, r6
 8010f40:	f7f7 f808 	bl	8007f54 <ucdr_serialize_uint8_t>
 8010f44:	2800      	cmp	r0, #0
 8010f46:	d0ee      	beq.n	8010f26 <uxr_serialize_CREATE_Payload+0x42>
 8010f48:	7a2b      	ldrb	r3, [r5, #8]
 8010f4a:	2b01      	cmp	r3, #1
 8010f4c:	d001      	beq.n	8010f52 <uxr_serialize_CREATE_Payload+0x6e>
 8010f4e:	2b02      	cmp	r3, #2
 8010f50:	d1ea      	bne.n	8010f28 <uxr_serialize_CREATE_Payload+0x44>
 8010f52:	68e9      	ldr	r1, [r5, #12]
 8010f54:	4630      	mov	r0, r6
 8010f56:	f001 fbbb 	bl	80126d0 <ucdr_serialize_string>
 8010f5a:	4004      	ands	r4, r0
 8010f5c:	e7e4      	b.n	8010f28 <uxr_serialize_CREATE_Payload+0x44>
 8010f5e:	7a29      	ldrb	r1, [r5, #8]
 8010f60:	4630      	mov	r0, r6
 8010f62:	f7f6 fff7 	bl	8007f54 <ucdr_serialize_uint8_t>
 8010f66:	4607      	mov	r7, r0
 8010f68:	b158      	cbz	r0, 8010f82 <uxr_serialize_CREATE_Payload+0x9e>
 8010f6a:	7a2b      	ldrb	r3, [r5, #8]
 8010f6c:	2b02      	cmp	r3, #2
 8010f6e:	d039      	beq.n	8010fe4 <uxr_serialize_CREATE_Payload+0x100>
 8010f70:	2b03      	cmp	r3, #3
 8010f72:	d106      	bne.n	8010f82 <uxr_serialize_CREATE_Payload+0x9e>
 8010f74:	68ea      	ldr	r2, [r5, #12]
 8010f76:	f105 0110 	add.w	r1, r5, #16
 8010f7a:	4630      	mov	r0, r6
 8010f7c:	f001 fb7a 	bl	8012674 <ucdr_serialize_sequence_uint8_t>
 8010f80:	4607      	mov	r7, r0
 8010f82:	2202      	movs	r2, #2
 8010f84:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8010f88:	4630      	mov	r0, r6
 8010f8a:	f001 fa7d 	bl	8012488 <ucdr_serialize_array_uint8_t>
 8010f8e:	4038      	ands	r0, r7
 8010f90:	4004      	ands	r4, r0
 8010f92:	e7c9      	b.n	8010f28 <uxr_serialize_CREATE_Payload+0x44>
 8010f94:	7a29      	ldrb	r1, [r5, #8]
 8010f96:	4630      	mov	r0, r6
 8010f98:	f7f6 ffdc 	bl	8007f54 <ucdr_serialize_uint8_t>
 8010f9c:	4607      	mov	r7, r0
 8010f9e:	b158      	cbz	r0, 8010fb8 <uxr_serialize_CREATE_Payload+0xd4>
 8010fa0:	7a2b      	ldrb	r3, [r5, #8]
 8010fa2:	2b02      	cmp	r3, #2
 8010fa4:	d003      	beq.n	8010fae <uxr_serialize_CREATE_Payload+0xca>
 8010fa6:	2b03      	cmp	r3, #3
 8010fa8:	d022      	beq.n	8010ff0 <uxr_serialize_CREATE_Payload+0x10c>
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	d104      	bne.n	8010fb8 <uxr_serialize_CREATE_Payload+0xd4>
 8010fae:	68e9      	ldr	r1, [r5, #12]
 8010fb0:	4630      	mov	r0, r6
 8010fb2:	f001 fb8d 	bl	80126d0 <ucdr_serialize_string>
 8010fb6:	4607      	mov	r7, r0
 8010fb8:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8010fbc:	4630      	mov	r0, r6
 8010fbe:	f7f7 fcf1 	bl	80089a4 <ucdr_serialize_int16_t>
 8010fc2:	4038      	ands	r0, r7
 8010fc4:	4004      	ands	r4, r0
 8010fc6:	e7af      	b.n	8010f28 <uxr_serialize_CREATE_Payload+0x44>
 8010fc8:	f105 0108 	add.w	r1, r5, #8
 8010fcc:	4630      	mov	r0, r6
 8010fce:	f7ff fb5f 	bl	8010690 <uxr_serialize_AGENT_Representation>
 8010fd2:	4004      	ands	r4, r0
 8010fd4:	e7a8      	b.n	8010f28 <uxr_serialize_CREATE_Payload+0x44>
 8010fd6:	f105 0108 	add.w	r1, r5, #8
 8010fda:	4630      	mov	r0, r6
 8010fdc:	f7ff fa9a 	bl	8010514 <uxr_serialize_CLIENT_Representation>
 8010fe0:	4004      	ands	r4, r0
 8010fe2:	e7a1      	b.n	8010f28 <uxr_serialize_CREATE_Payload+0x44>
 8010fe4:	68e9      	ldr	r1, [r5, #12]
 8010fe6:	4630      	mov	r0, r6
 8010fe8:	f001 fb72 	bl	80126d0 <ucdr_serialize_string>
 8010fec:	4607      	mov	r7, r0
 8010fee:	e7c8      	b.n	8010f82 <uxr_serialize_CREATE_Payload+0x9e>
 8010ff0:	68ea      	ldr	r2, [r5, #12]
 8010ff2:	f105 0110 	add.w	r1, r5, #16
 8010ff6:	4630      	mov	r0, r6
 8010ff8:	f001 fb3c 	bl	8012674 <ucdr_serialize_sequence_uint8_t>
 8010ffc:	4607      	mov	r7, r0
 8010ffe:	e7db      	b.n	8010fb8 <uxr_serialize_CREATE_Payload+0xd4>

08011000 <uxr_deserialize_GET_INFO_Payload>:
 8011000:	b570      	push	{r4, r5, r6, lr}
 8011002:	2202      	movs	r2, #2
 8011004:	4605      	mov	r5, r0
 8011006:	460e      	mov	r6, r1
 8011008:	f001 faa2 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 801100c:	2202      	movs	r2, #2
 801100e:	18b1      	adds	r1, r6, r2
 8011010:	4604      	mov	r4, r0
 8011012:	4628      	mov	r0, r5
 8011014:	f001 fa9c 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 8011018:	1d31      	adds	r1, r6, #4
 801101a:	4004      	ands	r4, r0
 801101c:	4628      	mov	r0, r5
 801101e:	f7f7 fadf 	bl	80085e0 <ucdr_deserialize_uint32_t>
 8011022:	b2e4      	uxtb	r4, r4
 8011024:	4020      	ands	r0, r4
 8011026:	bd70      	pop	{r4, r5, r6, pc}

08011028 <uxr_serialize_DELETE_Payload>:
 8011028:	b570      	push	{r4, r5, r6, lr}
 801102a:	2202      	movs	r2, #2
 801102c:	4605      	mov	r5, r0
 801102e:	460e      	mov	r6, r1
 8011030:	f001 fa2a 	bl	8012488 <ucdr_serialize_array_uint8_t>
 8011034:	2202      	movs	r2, #2
 8011036:	4604      	mov	r4, r0
 8011038:	18b1      	adds	r1, r6, r2
 801103a:	4628      	mov	r0, r5
 801103c:	f001 fa24 	bl	8012488 <ucdr_serialize_array_uint8_t>
 8011040:	4020      	ands	r0, r4
 8011042:	b2c0      	uxtb	r0, r0
 8011044:	bd70      	pop	{r4, r5, r6, pc}
 8011046:	bf00      	nop

08011048 <uxr_deserialize_STATUS_AGENT_Payload>:
 8011048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801104c:	4605      	mov	r5, r0
 801104e:	460e      	mov	r6, r1
 8011050:	f7f6 ff96 	bl	8007f80 <ucdr_deserialize_uint8_t>
 8011054:	1c71      	adds	r1, r6, #1
 8011056:	4604      	mov	r4, r0
 8011058:	4628      	mov	r0, r5
 801105a:	f7f6 ff91 	bl	8007f80 <ucdr_deserialize_uint8_t>
 801105e:	2204      	movs	r2, #4
 8011060:	18b1      	adds	r1, r6, r2
 8011062:	4681      	mov	r9, r0
 8011064:	4628      	mov	r0, r5
 8011066:	f001 fa73 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 801106a:	f106 0108 	add.w	r1, r6, #8
 801106e:	4680      	mov	r8, r0
 8011070:	2202      	movs	r2, #2
 8011072:	4628      	mov	r0, r5
 8011074:	f001 fa6c 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 8011078:	2202      	movs	r2, #2
 801107a:	f106 010a 	add.w	r1, r6, #10
 801107e:	4607      	mov	r7, r0
 8011080:	4628      	mov	r0, r5
 8011082:	f001 fa65 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 8011086:	ea04 0409 	and.w	r4, r4, r9
 801108a:	4603      	mov	r3, r0
 801108c:	f106 010c 	add.w	r1, r6, #12
 8011090:	4628      	mov	r0, r5
 8011092:	b2e4      	uxtb	r4, r4
 8011094:	461d      	mov	r5, r3
 8011096:	ea04 0408 	and.w	r4, r4, r8
 801109a:	f7f6 ff43 	bl	8007f24 <ucdr_deserialize_bool>
 801109e:	4027      	ands	r7, r4
 80110a0:	403d      	ands	r5, r7
 80110a2:	4028      	ands	r0, r5
 80110a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080110a8 <uxr_deserialize_STATUS_Payload>:
 80110a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110ac:	2202      	movs	r2, #2
 80110ae:	4606      	mov	r6, r0
 80110b0:	460f      	mov	r7, r1
 80110b2:	f001 fa4d 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 80110b6:	2202      	movs	r2, #2
 80110b8:	18b9      	adds	r1, r7, r2
 80110ba:	4605      	mov	r5, r0
 80110bc:	4630      	mov	r0, r6
 80110be:	f001 fa47 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 80110c2:	1d39      	adds	r1, r7, #4
 80110c4:	4680      	mov	r8, r0
 80110c6:	4630      	mov	r0, r6
 80110c8:	f7f6 ff5a 	bl	8007f80 <ucdr_deserialize_uint8_t>
 80110cc:	1d79      	adds	r1, r7, #5
 80110ce:	4604      	mov	r4, r0
 80110d0:	4630      	mov	r0, r6
 80110d2:	f7f6 ff55 	bl	8007f80 <ucdr_deserialize_uint8_t>
 80110d6:	ea05 0508 	and.w	r5, r5, r8
 80110da:	402c      	ands	r4, r5
 80110dc:	4020      	ands	r0, r4
 80110de:	b2c0      	uxtb	r0, r0
 80110e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080110e4 <uxr_serialize_INFO_Payload>:
 80110e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110e8:	2202      	movs	r2, #2
 80110ea:	460c      	mov	r4, r1
 80110ec:	4605      	mov	r5, r0
 80110ee:	f001 f9cb 	bl	8012488 <ucdr_serialize_array_uint8_t>
 80110f2:	2202      	movs	r2, #2
 80110f4:	18a1      	adds	r1, r4, r2
 80110f6:	4680      	mov	r8, r0
 80110f8:	4628      	mov	r0, r5
 80110fa:	f001 f9c5 	bl	8012488 <ucdr_serialize_array_uint8_t>
 80110fe:	7921      	ldrb	r1, [r4, #4]
 8011100:	4607      	mov	r7, r0
 8011102:	4628      	mov	r0, r5
 8011104:	f7f6 ff26 	bl	8007f54 <ucdr_serialize_uint8_t>
 8011108:	7961      	ldrb	r1, [r4, #5]
 801110a:	4606      	mov	r6, r0
 801110c:	4628      	mov	r0, r5
 801110e:	f7f6 ff21 	bl	8007f54 <ucdr_serialize_uint8_t>
 8011112:	ea08 0807 	and.w	r8, r8, r7
 8011116:	ea06 0608 	and.w	r6, r6, r8
 801111a:	ea00 0706 	and.w	r7, r0, r6
 801111e:	7a21      	ldrb	r1, [r4, #8]
 8011120:	4628      	mov	r0, r5
 8011122:	f7f6 fee9 	bl	8007ef8 <ucdr_serialize_bool>
 8011126:	7a23      	ldrb	r3, [r4, #8]
 8011128:	b2ff      	uxtb	r7, r7
 801112a:	4606      	mov	r6, r0
 801112c:	b96b      	cbnz	r3, 801114a <uxr_serialize_INFO_Payload+0x66>
 801112e:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011132:	4628      	mov	r0, r5
 8011134:	f7f6 fee0 	bl	8007ef8 <ucdr_serialize_bool>
 8011138:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801113c:	4030      	ands	r0, r6
 801113e:	b2c6      	uxtb	r6, r0
 8011140:	b983      	cbnz	r3, 8011164 <uxr_serialize_INFO_Payload+0x80>
 8011142:	ea06 0007 	and.w	r0, r6, r7
 8011146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801114a:	7b21      	ldrb	r1, [r4, #12]
 801114c:	4628      	mov	r0, r5
 801114e:	f7f6 ff01 	bl	8007f54 <ucdr_serialize_uint8_t>
 8011152:	b188      	cbz	r0, 8011178 <uxr_serialize_INFO_Payload+0x94>
 8011154:	f104 010c 	add.w	r1, r4, #12
 8011158:	4628      	mov	r0, r5
 801115a:	f7ff fb0b 	bl	8010774 <uxr_serialize_ObjectVariant.part.0>
 801115e:	4030      	ands	r0, r6
 8011160:	b2c6      	uxtb	r6, r0
 8011162:	e7e4      	b.n	801112e <uxr_serialize_INFO_Payload+0x4a>
 8011164:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8011168:	4628      	mov	r0, r5
 801116a:	f7ff fdcb 	bl	8010d04 <uxr_serialize_ActivityInfoVariant>
 801116e:	4006      	ands	r6, r0
 8011170:	ea06 0007 	and.w	r0, r6, r7
 8011174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011178:	4606      	mov	r6, r0
 801117a:	e7d8      	b.n	801112e <uxr_serialize_INFO_Payload+0x4a>

0801117c <uxr_serialize_READ_DATA_Payload>:
 801117c:	b570      	push	{r4, r5, r6, lr}
 801117e:	2202      	movs	r2, #2
 8011180:	4605      	mov	r5, r0
 8011182:	460e      	mov	r6, r1
 8011184:	f001 f980 	bl	8012488 <ucdr_serialize_array_uint8_t>
 8011188:	2202      	movs	r2, #2
 801118a:	18b1      	adds	r1, r6, r2
 801118c:	4604      	mov	r4, r0
 801118e:	4628      	mov	r0, r5
 8011190:	f001 f97a 	bl	8012488 <ucdr_serialize_array_uint8_t>
 8011194:	1d31      	adds	r1, r6, #4
 8011196:	4004      	ands	r4, r0
 8011198:	4628      	mov	r0, r5
 801119a:	f7ff fe5f 	bl	8010e5c <uxr_serialize_ReadSpecification>
 801119e:	b2e4      	uxtb	r4, r4
 80111a0:	4020      	ands	r0, r4
 80111a2:	bd70      	pop	{r4, r5, r6, pc}

080111a4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80111a4:	b570      	push	{r4, r5, r6, lr}
 80111a6:	2202      	movs	r2, #2
 80111a8:	4605      	mov	r5, r0
 80111aa:	460e      	mov	r6, r1
 80111ac:	f001 f96c 	bl	8012488 <ucdr_serialize_array_uint8_t>
 80111b0:	2202      	movs	r2, #2
 80111b2:	4604      	mov	r4, r0
 80111b4:	18b1      	adds	r1, r6, r2
 80111b6:	4628      	mov	r0, r5
 80111b8:	f001 f966 	bl	8012488 <ucdr_serialize_array_uint8_t>
 80111bc:	4020      	ands	r0, r4
 80111be:	b2c0      	uxtb	r0, r0
 80111c0:	bd70      	pop	{r4, r5, r6, pc}
 80111c2:	bf00      	nop

080111c4 <uxr_serialize_ACKNACK_Payload>:
 80111c4:	b570      	push	{r4, r5, r6, lr}
 80111c6:	460c      	mov	r4, r1
 80111c8:	460e      	mov	r6, r1
 80111ca:	f834 1b02 	ldrh.w	r1, [r4], #2
 80111ce:	4605      	mov	r5, r0
 80111d0:	f7f6 feec 	bl	8007fac <ucdr_serialize_uint16_t>
 80111d4:	2202      	movs	r2, #2
 80111d6:	4621      	mov	r1, r4
 80111d8:	4604      	mov	r4, r0
 80111da:	4628      	mov	r0, r5
 80111dc:	f001 f954 	bl	8012488 <ucdr_serialize_array_uint8_t>
 80111e0:	7931      	ldrb	r1, [r6, #4]
 80111e2:	4004      	ands	r4, r0
 80111e4:	4628      	mov	r0, r5
 80111e6:	f7f6 feb5 	bl	8007f54 <ucdr_serialize_uint8_t>
 80111ea:	b2e4      	uxtb	r4, r4
 80111ec:	4020      	ands	r0, r4
 80111ee:	bd70      	pop	{r4, r5, r6, pc}

080111f0 <uxr_deserialize_ACKNACK_Payload>:
 80111f0:	b570      	push	{r4, r5, r6, lr}
 80111f2:	4605      	mov	r5, r0
 80111f4:	460e      	mov	r6, r1
 80111f6:	f7f6 ffdd 	bl	80081b4 <ucdr_deserialize_uint16_t>
 80111fa:	2202      	movs	r2, #2
 80111fc:	18b1      	adds	r1, r6, r2
 80111fe:	4604      	mov	r4, r0
 8011200:	4628      	mov	r0, r5
 8011202:	f001 f9a5 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 8011206:	1d31      	adds	r1, r6, #4
 8011208:	4004      	ands	r4, r0
 801120a:	4628      	mov	r0, r5
 801120c:	f7f6 feb8 	bl	8007f80 <ucdr_deserialize_uint8_t>
 8011210:	b2e4      	uxtb	r4, r4
 8011212:	4020      	ands	r0, r4
 8011214:	bd70      	pop	{r4, r5, r6, pc}
 8011216:	bf00      	nop

08011218 <uxr_serialize_HEARTBEAT_Payload>:
 8011218:	b570      	push	{r4, r5, r6, lr}
 801121a:	460d      	mov	r5, r1
 801121c:	8809      	ldrh	r1, [r1, #0]
 801121e:	4606      	mov	r6, r0
 8011220:	f7f6 fec4 	bl	8007fac <ucdr_serialize_uint16_t>
 8011224:	8869      	ldrh	r1, [r5, #2]
 8011226:	4604      	mov	r4, r0
 8011228:	4630      	mov	r0, r6
 801122a:	f7f6 febf 	bl	8007fac <ucdr_serialize_uint16_t>
 801122e:	7929      	ldrb	r1, [r5, #4]
 8011230:	4004      	ands	r4, r0
 8011232:	4630      	mov	r0, r6
 8011234:	f7f6 fe8e 	bl	8007f54 <ucdr_serialize_uint8_t>
 8011238:	b2e4      	uxtb	r4, r4
 801123a:	4020      	ands	r0, r4
 801123c:	bd70      	pop	{r4, r5, r6, pc}
 801123e:	bf00      	nop

08011240 <uxr_deserialize_HEARTBEAT_Payload>:
 8011240:	b570      	push	{r4, r5, r6, lr}
 8011242:	4605      	mov	r5, r0
 8011244:	460e      	mov	r6, r1
 8011246:	f7f6 ffb5 	bl	80081b4 <ucdr_deserialize_uint16_t>
 801124a:	1cb1      	adds	r1, r6, #2
 801124c:	4604      	mov	r4, r0
 801124e:	4628      	mov	r0, r5
 8011250:	f7f6 ffb0 	bl	80081b4 <ucdr_deserialize_uint16_t>
 8011254:	1d31      	adds	r1, r6, #4
 8011256:	4004      	ands	r4, r0
 8011258:	4628      	mov	r0, r5
 801125a:	f7f6 fe91 	bl	8007f80 <ucdr_deserialize_uint8_t>
 801125e:	b2e4      	uxtb	r4, r4
 8011260:	4020      	ands	r0, r4
 8011262:	bd70      	pop	{r4, r5, r6, pc}

08011264 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011268:	4605      	mov	r5, r0
 801126a:	460e      	mov	r6, r1
 801126c:	f7f7 fd3a 	bl	8008ce4 <ucdr_deserialize_int32_t>
 8011270:	1d31      	adds	r1, r6, #4
 8011272:	4607      	mov	r7, r0
 8011274:	4628      	mov	r0, r5
 8011276:	f7f7 f9b3 	bl	80085e0 <ucdr_deserialize_uint32_t>
 801127a:	f106 0108 	add.w	r1, r6, #8
 801127e:	4680      	mov	r8, r0
 8011280:	4628      	mov	r0, r5
 8011282:	f7f7 fd2f 	bl	8008ce4 <ucdr_deserialize_int32_t>
 8011286:	f106 010c 	add.w	r1, r6, #12
 801128a:	4604      	mov	r4, r0
 801128c:	4628      	mov	r0, r5
 801128e:	f7f7 f9a7 	bl	80085e0 <ucdr_deserialize_uint32_t>
 8011292:	ea07 0708 	and.w	r7, r7, r8
 8011296:	403c      	ands	r4, r7
 8011298:	f106 0110 	add.w	r1, r6, #16
 801129c:	4004      	ands	r4, r0
 801129e:	4628      	mov	r0, r5
 80112a0:	f7f7 fd20 	bl	8008ce4 <ucdr_deserialize_int32_t>
 80112a4:	f106 0114 	add.w	r1, r6, #20
 80112a8:	4607      	mov	r7, r0
 80112aa:	4628      	mov	r0, r5
 80112ac:	f7f7 f998 	bl	80085e0 <ucdr_deserialize_uint32_t>
 80112b0:	b2e4      	uxtb	r4, r4
 80112b2:	403c      	ands	r4, r7
 80112b4:	4020      	ands	r0, r4
 80112b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112ba:	bf00      	nop

080112bc <uxr_serialize_SampleIdentity>:
 80112bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112c0:	220c      	movs	r2, #12
 80112c2:	4604      	mov	r4, r0
 80112c4:	460d      	mov	r5, r1
 80112c6:	f001 f8df 	bl	8012488 <ucdr_serialize_array_uint8_t>
 80112ca:	2203      	movs	r2, #3
 80112cc:	f105 010c 	add.w	r1, r5, #12
 80112d0:	4680      	mov	r8, r0
 80112d2:	4620      	mov	r0, r4
 80112d4:	f001 f8d8 	bl	8012488 <ucdr_serialize_array_uint8_t>
 80112d8:	7be9      	ldrb	r1, [r5, #15]
 80112da:	4681      	mov	r9, r0
 80112dc:	4620      	mov	r0, r4
 80112de:	f7f6 fe39 	bl	8007f54 <ucdr_serialize_uint8_t>
 80112e2:	6929      	ldr	r1, [r5, #16]
 80112e4:	4607      	mov	r7, r0
 80112e6:	4620      	mov	r0, r4
 80112e8:	f7f7 fc62 	bl	8008bb0 <ucdr_serialize_int32_t>
 80112ec:	6969      	ldr	r1, [r5, #20]
 80112ee:	4606      	mov	r6, r0
 80112f0:	4620      	mov	r0, r4
 80112f2:	f7f7 f84b 	bl	800838c <ucdr_serialize_uint32_t>
 80112f6:	ea08 0809 	and.w	r8, r8, r9
 80112fa:	ea07 0708 	and.w	r7, r7, r8
 80112fe:	403e      	ands	r6, r7
 8011300:	4030      	ands	r0, r6
 8011302:	b2c0      	uxtb	r0, r0
 8011304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011308 <uxr_deserialize_SampleIdentity>:
 8011308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801130c:	220c      	movs	r2, #12
 801130e:	4604      	mov	r4, r0
 8011310:	460d      	mov	r5, r1
 8011312:	f001 f91d 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 8011316:	2203      	movs	r2, #3
 8011318:	f105 010c 	add.w	r1, r5, #12
 801131c:	4680      	mov	r8, r0
 801131e:	4620      	mov	r0, r4
 8011320:	f001 f916 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 8011324:	f105 010f 	add.w	r1, r5, #15
 8011328:	4681      	mov	r9, r0
 801132a:	4620      	mov	r0, r4
 801132c:	f7f6 fe28 	bl	8007f80 <ucdr_deserialize_uint8_t>
 8011330:	f105 0110 	add.w	r1, r5, #16
 8011334:	4607      	mov	r7, r0
 8011336:	4620      	mov	r0, r4
 8011338:	f7f7 fcd4 	bl	8008ce4 <ucdr_deserialize_int32_t>
 801133c:	f105 0114 	add.w	r1, r5, #20
 8011340:	4606      	mov	r6, r0
 8011342:	4620      	mov	r0, r4
 8011344:	f7f7 f94c 	bl	80085e0 <ucdr_deserialize_uint32_t>
 8011348:	ea08 0809 	and.w	r8, r8, r9
 801134c:	ea07 0708 	and.w	r7, r7, r8
 8011350:	403e      	ands	r6, r7
 8011352:	4030      	ands	r0, r6
 8011354:	b2c0      	uxtb	r0, r0
 8011356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801135a:	bf00      	nop

0801135c <rcl_get_automatic_discovery_range>:
 801135c:	b530      	push	{r4, r5, lr}
 801135e:	b083      	sub	sp, #12
 8011360:	2300      	movs	r3, #0
 8011362:	9301      	str	r3, [sp, #4]
 8011364:	b1c0      	cbz	r0, 8011398 <rcl_get_automatic_discovery_range+0x3c>
 8011366:	4604      	mov	r4, r0
 8011368:	a901      	add	r1, sp, #4
 801136a:	4818      	ldr	r0, [pc, #96]	@ (80113cc <rcl_get_automatic_discovery_range+0x70>)
 801136c:	f7fa fc12 	bl	800bb94 <rcutils_get_env>
 8011370:	b110      	cbz	r0, 8011378 <rcl_get_automatic_discovery_range+0x1c>
 8011372:	2001      	movs	r0, #1
 8011374:	b003      	add	sp, #12
 8011376:	bd30      	pop	{r4, r5, pc}
 8011378:	9d01      	ldr	r5, [sp, #4]
 801137a:	782b      	ldrb	r3, [r5, #0]
 801137c:	b923      	cbnz	r3, 8011388 <rcl_get_automatic_discovery_range+0x2c>
 801137e:	2303      	movs	r3, #3
 8011380:	7023      	strb	r3, [r4, #0]
 8011382:	2000      	movs	r0, #0
 8011384:	b003      	add	sp, #12
 8011386:	bd30      	pop	{r4, r5, pc}
 8011388:	4911      	ldr	r1, [pc, #68]	@ (80113d0 <rcl_get_automatic_discovery_range+0x74>)
 801138a:	4628      	mov	r0, r5
 801138c:	f7ee ff28 	bl	80001e0 <strcmp>
 8011390:	b928      	cbnz	r0, 801139e <rcl_get_automatic_discovery_range+0x42>
 8011392:	2301      	movs	r3, #1
 8011394:	7023      	strb	r3, [r4, #0]
 8011396:	e7f4      	b.n	8011382 <rcl_get_automatic_discovery_range+0x26>
 8011398:	200b      	movs	r0, #11
 801139a:	b003      	add	sp, #12
 801139c:	bd30      	pop	{r4, r5, pc}
 801139e:	490d      	ldr	r1, [pc, #52]	@ (80113d4 <rcl_get_automatic_discovery_range+0x78>)
 80113a0:	4628      	mov	r0, r5
 80113a2:	f7ee ff1d 	bl	80001e0 <strcmp>
 80113a6:	b168      	cbz	r0, 80113c4 <rcl_get_automatic_discovery_range+0x68>
 80113a8:	490b      	ldr	r1, [pc, #44]	@ (80113d8 <rcl_get_automatic_discovery_range+0x7c>)
 80113aa:	4628      	mov	r0, r5
 80113ac:	f7ee ff18 	bl	80001e0 <strcmp>
 80113b0:	2800      	cmp	r0, #0
 80113b2:	d0e4      	beq.n	801137e <rcl_get_automatic_discovery_range+0x22>
 80113b4:	4909      	ldr	r1, [pc, #36]	@ (80113dc <rcl_get_automatic_discovery_range+0x80>)
 80113b6:	4628      	mov	r0, r5
 80113b8:	f7ee ff12 	bl	80001e0 <strcmp>
 80113bc:	b910      	cbnz	r0, 80113c4 <rcl_get_automatic_discovery_range+0x68>
 80113be:	2304      	movs	r3, #4
 80113c0:	7023      	strb	r3, [r4, #0]
 80113c2:	e7de      	b.n	8011382 <rcl_get_automatic_discovery_range+0x26>
 80113c4:	2302      	movs	r3, #2
 80113c6:	7023      	strb	r3, [r4, #0]
 80113c8:	e7db      	b.n	8011382 <rcl_get_automatic_discovery_range+0x26>
 80113ca:	bf00      	nop
 80113cc:	08014f68 	.word	0x08014f68
 80113d0:	08014f88 	.word	0x08014f88
 80113d4:	08014f8c 	.word	0x08014f8c
 80113d8:	08014f98 	.word	0x08014f98
 80113dc:	08014fa0 	.word	0x08014fa0

080113e0 <rcl_automatic_discovery_range_to_string>:
 80113e0:	2804      	cmp	r0, #4
 80113e2:	bf9a      	itte	ls
 80113e4:	4b02      	ldrls	r3, [pc, #8]	@ (80113f0 <rcl_automatic_discovery_range_to_string+0x10>)
 80113e6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80113ea:	2000      	movhi	r0, #0
 80113ec:	4770      	bx	lr
 80113ee:	bf00      	nop
 80113f0:	080155f4 	.word	0x080155f4

080113f4 <rcl_get_discovery_static_peers>:
 80113f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113f8:	b08c      	sub	sp, #48	@ 0x30
 80113fa:	2300      	movs	r3, #0
 80113fc:	9304      	str	r3, [sp, #16]
 80113fe:	2800      	cmp	r0, #0
 8011400:	d04e      	beq.n	80114a0 <rcl_get_discovery_static_peers+0xac>
 8011402:	460d      	mov	r5, r1
 8011404:	2900      	cmp	r1, #0
 8011406:	d04b      	beq.n	80114a0 <rcl_get_discovery_static_peers+0xac>
 8011408:	4604      	mov	r4, r0
 801140a:	a904      	add	r1, sp, #16
 801140c:	482d      	ldr	r0, [pc, #180]	@ (80114c4 <rcl_get_discovery_static_peers+0xd0>)
 801140e:	f7fa fbc1 	bl	800bb94 <rcutils_get_env>
 8011412:	b118      	cbz	r0, 801141c <rcl_get_discovery_static_peers+0x28>
 8011414:	2001      	movs	r0, #1
 8011416:	b00c      	add	sp, #48	@ 0x30
 8011418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801141c:	9b04      	ldr	r3, [sp, #16]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d0f8      	beq.n	8011414 <rcl_get_discovery_static_peers+0x20>
 8011422:	af05      	add	r7, sp, #20
 8011424:	4638      	mov	r0, r7
 8011426:	f000 fc6d 	bl	8011d04 <rcutils_get_zero_initialized_string_array>
 801142a:	f105 0308 	add.w	r3, r5, #8
 801142e:	9703      	str	r7, [sp, #12]
 8011430:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011434:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011438:	9804      	ldr	r0, [sp, #16]
 801143a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801143e:	213b      	movs	r1, #59	@ 0x3b
 8011440:	f000 fbb0 	bl	8011ba4 <rcutils_split>
 8011444:	2800      	cmp	r0, #0
 8011446:	d1e5      	bne.n	8011414 <rcl_get_discovery_static_peers+0x20>
 8011448:	9905      	ldr	r1, [sp, #20]
 801144a:	462a      	mov	r2, r5
 801144c:	4620      	mov	r0, r4
 801144e:	f000 fcb1 	bl	8011db4 <rmw_discovery_options_init>
 8011452:	4606      	mov	r6, r0
 8011454:	bb90      	cbnz	r0, 80114bc <rcl_get_discovery_static_peers+0xc8>
 8011456:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801145a:	f1b9 0f00 	cmp.w	r9, #0
 801145e:	d026      	beq.n	80114ae <rcl_get_discovery_static_peers+0xba>
 8011460:	f8dd a018 	ldr.w	sl, [sp, #24]
 8011464:	4680      	mov	r8, r0
 8011466:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 801146a:	4628      	mov	r0, r5
 801146c:	f7ee ff18 	bl	80002a0 <strlen>
 8011470:	28ff      	cmp	r0, #255	@ 0xff
 8011472:	4629      	mov	r1, r5
 8011474:	ea4f 2506 	mov.w	r5, r6, lsl #8
 8011478:	d816      	bhi.n	80114a8 <rcl_get_discovery_static_peers+0xb4>
 801147a:	6860      	ldr	r0, [r4, #4]
 801147c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011480:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8011484:	f002 fa9d 	bl	80139c2 <strncpy>
 8011488:	6863      	ldr	r3, [r4, #4]
 801148a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801148e:	3601      	adds	r6, #1
 8011490:	442b      	add	r3, r5
 8011492:	454e      	cmp	r6, r9
 8011494:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 8011498:	d209      	bcs.n	80114ae <rcl_get_discovery_static_peers+0xba>
 801149a:	f8dd a018 	ldr.w	sl, [sp, #24]
 801149e:	e7e2      	b.n	8011466 <rcl_get_discovery_static_peers+0x72>
 80114a0:	200b      	movs	r0, #11
 80114a2:	b00c      	add	sp, #48	@ 0x30
 80114a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114a8:	3601      	adds	r6, #1
 80114aa:	454e      	cmp	r6, r9
 80114ac:	d3db      	bcc.n	8011466 <rcl_get_discovery_static_peers+0x72>
 80114ae:	4638      	mov	r0, r7
 80114b0:	f000 fc5a 	bl	8011d68 <rcutils_string_array_fini>
 80114b4:	3800      	subs	r0, #0
 80114b6:	bf18      	it	ne
 80114b8:	2001      	movne	r0, #1
 80114ba:	e7ac      	b.n	8011416 <rcl_get_discovery_static_peers+0x22>
 80114bc:	f7f7 fe32 	bl	8009124 <rcl_convert_rmw_ret_to_rcl_ret>
 80114c0:	e7a9      	b.n	8011416 <rcl_get_discovery_static_peers+0x22>
 80114c2:	bf00      	nop
 80114c4:	08014fb0 	.word	0x08014fb0

080114c8 <rcl_get_default_domain_id>:
 80114c8:	b530      	push	{r4, r5, lr}
 80114ca:	b083      	sub	sp, #12
 80114cc:	2300      	movs	r3, #0
 80114ce:	9300      	str	r3, [sp, #0]
 80114d0:	b1f0      	cbz	r0, 8011510 <rcl_get_default_domain_id+0x48>
 80114d2:	4604      	mov	r4, r0
 80114d4:	4669      	mov	r1, sp
 80114d6:	4812      	ldr	r0, [pc, #72]	@ (8011520 <rcl_get_default_domain_id+0x58>)
 80114d8:	f7fa fb5c 	bl	800bb94 <rcutils_get_env>
 80114dc:	4602      	mov	r2, r0
 80114de:	b108      	cbz	r0, 80114e4 <rcl_get_default_domain_id+0x1c>
 80114e0:	2001      	movs	r0, #1
 80114e2:	e004      	b.n	80114ee <rcl_get_default_domain_id+0x26>
 80114e4:	9800      	ldr	r0, [sp, #0]
 80114e6:	b108      	cbz	r0, 80114ec <rcl_get_default_domain_id+0x24>
 80114e8:	7803      	ldrb	r3, [r0, #0]
 80114ea:	b913      	cbnz	r3, 80114f2 <rcl_get_default_domain_id+0x2a>
 80114ec:	2000      	movs	r0, #0
 80114ee:	b003      	add	sp, #12
 80114f0:	bd30      	pop	{r4, r5, pc}
 80114f2:	a901      	add	r1, sp, #4
 80114f4:	9201      	str	r2, [sp, #4]
 80114f6:	f002 f87f 	bl	80135f8 <strtoul>
 80114fa:	4605      	mov	r5, r0
 80114fc:	b158      	cbz	r0, 8011516 <rcl_get_default_domain_id+0x4e>
 80114fe:	1c43      	adds	r3, r0, #1
 8011500:	d104      	bne.n	801150c <rcl_get_default_domain_id+0x44>
 8011502:	f002 fadd 	bl	8013ac0 <__errno>
 8011506:	6803      	ldr	r3, [r0, #0]
 8011508:	2b22      	cmp	r3, #34	@ 0x22
 801150a:	d0e9      	beq.n	80114e0 <rcl_get_default_domain_id+0x18>
 801150c:	6025      	str	r5, [r4, #0]
 801150e:	e7ed      	b.n	80114ec <rcl_get_default_domain_id+0x24>
 8011510:	200b      	movs	r0, #11
 8011512:	b003      	add	sp, #12
 8011514:	bd30      	pop	{r4, r5, pc}
 8011516:	9b01      	ldr	r3, [sp, #4]
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d0f6      	beq.n	801150c <rcl_get_default_domain_id+0x44>
 801151e:	e7df      	b.n	80114e0 <rcl_get_default_domain_id+0x18>
 8011520:	08015090 	.word	0x08015090

08011524 <rcl_expand_topic_name>:
 8011524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011528:	b08b      	sub	sp, #44	@ 0x2c
 801152a:	9306      	str	r3, [sp, #24]
 801152c:	2800      	cmp	r0, #0
 801152e:	f000 80ad 	beq.w	801168c <rcl_expand_topic_name+0x168>
 8011532:	460e      	mov	r6, r1
 8011534:	2900      	cmp	r1, #0
 8011536:	f000 80a9 	beq.w	801168c <rcl_expand_topic_name+0x168>
 801153a:	4617      	mov	r7, r2
 801153c:	2a00      	cmp	r2, #0
 801153e:	f000 80a5 	beq.w	801168c <rcl_expand_topic_name+0x168>
 8011542:	2b00      	cmp	r3, #0
 8011544:	f000 80a2 	beq.w	801168c <rcl_expand_topic_name+0x168>
 8011548:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801154a:	2b00      	cmp	r3, #0
 801154c:	f000 809e 	beq.w	801168c <rcl_expand_topic_name+0x168>
 8011550:	2200      	movs	r2, #0
 8011552:	a909      	add	r1, sp, #36	@ 0x24
 8011554:	4680      	mov	r8, r0
 8011556:	f000 fa33 	bl	80119c0 <rcl_validate_topic_name>
 801155a:	4605      	mov	r5, r0
 801155c:	2800      	cmp	r0, #0
 801155e:	f040 8096 	bne.w	801168e <rcl_expand_topic_name+0x16a>
 8011562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011564:	2b00      	cmp	r3, #0
 8011566:	f040 809a 	bne.w	801169e <rcl_expand_topic_name+0x17a>
 801156a:	4602      	mov	r2, r0
 801156c:	a909      	add	r1, sp, #36	@ 0x24
 801156e:	4630      	mov	r0, r6
 8011570:	f7fa fee2 	bl	800c338 <rmw_validate_node_name>
 8011574:	2800      	cmp	r0, #0
 8011576:	f040 808e 	bne.w	8011696 <rcl_expand_topic_name+0x172>
 801157a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801157c:	2a00      	cmp	r2, #0
 801157e:	f040 8093 	bne.w	80116a8 <rcl_expand_topic_name+0x184>
 8011582:	a909      	add	r1, sp, #36	@ 0x24
 8011584:	4638      	mov	r0, r7
 8011586:	f7fa feb9 	bl	800c2fc <rmw_validate_namespace>
 801158a:	2800      	cmp	r0, #0
 801158c:	f040 8083 	bne.w	8011696 <rcl_expand_topic_name+0x172>
 8011590:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011592:	2d00      	cmp	r5, #0
 8011594:	f040 80f5 	bne.w	8011782 <rcl_expand_topic_name+0x25e>
 8011598:	217b      	movs	r1, #123	@ 0x7b
 801159a:	4640      	mov	r0, r8
 801159c:	f002 f9f2 	bl	8013984 <strchr>
 80115a0:	f898 3000 	ldrb.w	r3, [r8]
 80115a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80115a6:	4604      	mov	r4, r0
 80115a8:	f000 809f 	beq.w	80116ea <rcl_expand_topic_name+0x1c6>
 80115ac:	2b7e      	cmp	r3, #126	@ 0x7e
 80115ae:	f040 80ea 	bne.w	8011786 <rcl_expand_topic_name+0x262>
 80115b2:	4638      	mov	r0, r7
 80115b4:	f7ee fe74 	bl	80002a0 <strlen>
 80115b8:	4a86      	ldr	r2, [pc, #536]	@ (80117d4 <rcl_expand_topic_name+0x2b0>)
 80115ba:	4b87      	ldr	r3, [pc, #540]	@ (80117d8 <rcl_expand_topic_name+0x2b4>)
 80115bc:	2801      	cmp	r0, #1
 80115be:	bf08      	it	eq
 80115c0:	4613      	moveq	r3, r2
 80115c2:	9302      	str	r3, [sp, #8]
 80115c4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80115c6:	9300      	str	r3, [sp, #0]
 80115c8:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80115cc:	f108 0301 	add.w	r3, r8, #1
 80115d0:	9305      	str	r3, [sp, #20]
 80115d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80115d6:	9301      	str	r3, [sp, #4]
 80115d8:	ab14      	add	r3, sp, #80	@ 0x50
 80115da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80115dc:	f7fa faf2 	bl	800bbc4 <rcutils_format_string_limit>
 80115e0:	4682      	mov	sl, r0
 80115e2:	2800      	cmp	r0, #0
 80115e4:	f000 80e1 	beq.w	80117aa <rcl_expand_topic_name+0x286>
 80115e8:	2c00      	cmp	r4, #0
 80115ea:	f000 8085 	beq.w	80116f8 <rcl_expand_topic_name+0x1d4>
 80115ee:	217b      	movs	r1, #123	@ 0x7b
 80115f0:	f002 f9c8 	bl	8013984 <strchr>
 80115f4:	46d1      	mov	r9, sl
 80115f6:	4604      	mov	r4, r0
 80115f8:	9507      	str	r5, [sp, #28]
 80115fa:	464d      	mov	r5, r9
 80115fc:	2c00      	cmp	r4, #0
 80115fe:	f000 80a1 	beq.w	8011744 <rcl_expand_topic_name+0x220>
 8011602:	217d      	movs	r1, #125	@ 0x7d
 8011604:	4628      	mov	r0, r5
 8011606:	f002 f9bd 	bl	8013984 <strchr>
 801160a:	eba0 0904 	sub.w	r9, r0, r4
 801160e:	f109 0b01 	add.w	fp, r9, #1
 8011612:	4872      	ldr	r0, [pc, #456]	@ (80117dc <rcl_expand_topic_name+0x2b8>)
 8011614:	465a      	mov	r2, fp
 8011616:	4621      	mov	r1, r4
 8011618:	f002 f9c1 	bl	801399e <strncmp>
 801161c:	2800      	cmp	r0, #0
 801161e:	d069      	beq.n	80116f4 <rcl_expand_topic_name+0x1d0>
 8011620:	486f      	ldr	r0, [pc, #444]	@ (80117e0 <rcl_expand_topic_name+0x2bc>)
 8011622:	465a      	mov	r2, fp
 8011624:	4621      	mov	r1, r4
 8011626:	f002 f9ba 	bl	801399e <strncmp>
 801162a:	b130      	cbz	r0, 801163a <rcl_expand_topic_name+0x116>
 801162c:	486d      	ldr	r0, [pc, #436]	@ (80117e4 <rcl_expand_topic_name+0x2c0>)
 801162e:	465a      	mov	r2, fp
 8011630:	4621      	mov	r1, r4
 8011632:	f002 f9b4 	bl	801399e <strncmp>
 8011636:	2800      	cmp	r0, #0
 8011638:	d138      	bne.n	80116ac <rcl_expand_topic_name+0x188>
 801163a:	46b9      	mov	r9, r7
 801163c:	ab16      	add	r3, sp, #88	@ 0x58
 801163e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011642:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011646:	ab14      	add	r3, sp, #80	@ 0x50
 8011648:	4620      	mov	r0, r4
 801164a:	cb0c      	ldmia	r3, {r2, r3}
 801164c:	4659      	mov	r1, fp
 801164e:	f7fa fc0d 	bl	800be6c <rcutils_strndup>
 8011652:	4604      	mov	r4, r0
 8011654:	2800      	cmp	r0, #0
 8011656:	f000 8099 	beq.w	801178c <rcl_expand_topic_name+0x268>
 801165a:	464a      	mov	r2, r9
 801165c:	4628      	mov	r0, r5
 801165e:	ab14      	add	r3, sp, #80	@ 0x50
 8011660:	4621      	mov	r1, r4
 8011662:	f7fa fae9 	bl	800bc38 <rcutils_repl_str>
 8011666:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011668:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801166a:	4605      	mov	r5, r0
 801166c:	4620      	mov	r0, r4
 801166e:	4798      	blx	r3
 8011670:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011672:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011674:	4650      	mov	r0, sl
 8011676:	4798      	blx	r3
 8011678:	2d00      	cmp	r5, #0
 801167a:	f000 8091 	beq.w	80117a0 <rcl_expand_topic_name+0x27c>
 801167e:	217b      	movs	r1, #123	@ 0x7b
 8011680:	4628      	mov	r0, r5
 8011682:	f002 f97f 	bl	8013984 <strchr>
 8011686:	46aa      	mov	sl, r5
 8011688:	4604      	mov	r4, r0
 801168a:	e7b7      	b.n	80115fc <rcl_expand_topic_name+0xd8>
 801168c:	250b      	movs	r5, #11
 801168e:	4628      	mov	r0, r5
 8011690:	b00b      	add	sp, #44	@ 0x2c
 8011692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011696:	f7f7 fd45 	bl	8009124 <rcl_convert_rmw_ret_to_rcl_ret>
 801169a:	4605      	mov	r5, r0
 801169c:	e7f7      	b.n	801168e <rcl_expand_topic_name+0x16a>
 801169e:	2567      	movs	r5, #103	@ 0x67
 80116a0:	4628      	mov	r0, r5
 80116a2:	b00b      	add	sp, #44	@ 0x2c
 80116a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116a8:	25c9      	movs	r5, #201	@ 0xc9
 80116aa:	e7f0      	b.n	801168e <rcl_expand_topic_name+0x16a>
 80116ac:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80116b0:	9806      	ldr	r0, [sp, #24]
 80116b2:	1c61      	adds	r1, r4, #1
 80116b4:	f7fa fcf6 	bl	800c0a4 <rcutils_string_map_getn>
 80116b8:	4681      	mov	r9, r0
 80116ba:	2800      	cmp	r0, #0
 80116bc:	d1be      	bne.n	801163c <rcl_expand_topic_name+0x118>
 80116be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80116c0:	ab16      	add	r3, sp, #88	@ 0x58
 80116c2:	6010      	str	r0, [r2, #0]
 80116c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80116c8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80116cc:	ab14      	add	r3, sp, #80	@ 0x50
 80116ce:	cb0c      	ldmia	r3, {r2, r3}
 80116d0:	4659      	mov	r1, fp
 80116d2:	4620      	mov	r0, r4
 80116d4:	f7fa fbca 	bl	800be6c <rcutils_strndup>
 80116d8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80116da:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80116dc:	4798      	blx	r3
 80116de:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80116e0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80116e2:	4650      	mov	r0, sl
 80116e4:	4798      	blx	r3
 80116e6:	2569      	movs	r5, #105	@ 0x69
 80116e8:	e7d1      	b.n	801168e <rcl_expand_topic_name+0x16a>
 80116ea:	2800      	cmp	r0, #0
 80116ec:	d061      	beq.n	80117b2 <rcl_expand_topic_name+0x28e>
 80116ee:	46c1      	mov	r9, r8
 80116f0:	46aa      	mov	sl, r5
 80116f2:	e781      	b.n	80115f8 <rcl_expand_topic_name+0xd4>
 80116f4:	46b1      	mov	r9, r6
 80116f6:	e7a1      	b.n	801163c <rcl_expand_topic_name+0x118>
 80116f8:	f89a 3000 	ldrb.w	r3, [sl]
 80116fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80116fe:	d01d      	beq.n	801173c <rcl_expand_topic_name+0x218>
 8011700:	4638      	mov	r0, r7
 8011702:	f7ee fdcd 	bl	80002a0 <strlen>
 8011706:	4a38      	ldr	r2, [pc, #224]	@ (80117e8 <rcl_expand_topic_name+0x2c4>)
 8011708:	4b38      	ldr	r3, [pc, #224]	@ (80117ec <rcl_expand_topic_name+0x2c8>)
 801170a:	f8cd a010 	str.w	sl, [sp, #16]
 801170e:	2801      	cmp	r0, #1
 8011710:	bf18      	it	ne
 8011712:	4613      	movne	r3, r2
 8011714:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011718:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801171c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801171e:	9703      	str	r7, [sp, #12]
 8011720:	9200      	str	r2, [sp, #0]
 8011722:	ab14      	add	r3, sp, #80	@ 0x50
 8011724:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011726:	f7fa fa4d 	bl	800bbc4 <rcutils_format_string_limit>
 801172a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801172c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801172e:	4604      	mov	r4, r0
 8011730:	4650      	mov	r0, sl
 8011732:	4798      	blx	r3
 8011734:	46a2      	mov	sl, r4
 8011736:	4653      	mov	r3, sl
 8011738:	2b00      	cmp	r3, #0
 801173a:	d036      	beq.n	80117aa <rcl_expand_topic_name+0x286>
 801173c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801173e:	f8c3 a000 	str.w	sl, [r3]
 8011742:	e7a4      	b.n	801168e <rcl_expand_topic_name+0x16a>
 8011744:	4653      	mov	r3, sl
 8011746:	9d07      	ldr	r5, [sp, #28]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d1d5      	bne.n	80116f8 <rcl_expand_topic_name+0x1d4>
 801174c:	f898 3000 	ldrb.w	r3, [r8]
 8011750:	2b2f      	cmp	r3, #47	@ 0x2f
 8011752:	d0f3      	beq.n	801173c <rcl_expand_topic_name+0x218>
 8011754:	4638      	mov	r0, r7
 8011756:	f7ee fda3 	bl	80002a0 <strlen>
 801175a:	4a23      	ldr	r2, [pc, #140]	@ (80117e8 <rcl_expand_topic_name+0x2c4>)
 801175c:	4b23      	ldr	r3, [pc, #140]	@ (80117ec <rcl_expand_topic_name+0x2c8>)
 801175e:	f8cd 8010 	str.w	r8, [sp, #16]
 8011762:	2801      	cmp	r0, #1
 8011764:	bf18      	it	ne
 8011766:	4613      	movne	r3, r2
 8011768:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801176c:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8011770:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8011772:	9703      	str	r7, [sp, #12]
 8011774:	9200      	str	r2, [sp, #0]
 8011776:	ab14      	add	r3, sp, #80	@ 0x50
 8011778:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801177a:	f7fa fa23 	bl	800bbc4 <rcutils_format_string_limit>
 801177e:	4682      	mov	sl, r0
 8011780:	e7d9      	b.n	8011736 <rcl_expand_topic_name+0x212>
 8011782:	25ca      	movs	r5, #202	@ 0xca
 8011784:	e783      	b.n	801168e <rcl_expand_topic_name+0x16a>
 8011786:	2800      	cmp	r0, #0
 8011788:	d1b1      	bne.n	80116ee <rcl_expand_topic_name+0x1ca>
 801178a:	e7e3      	b.n	8011754 <rcl_expand_topic_name+0x230>
 801178c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801178e:	6018      	str	r0, [r3, #0]
 8011790:	f7f6 fad6 	bl	8007d40 <rcutils_reset_error>
 8011794:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011796:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011798:	4650      	mov	r0, sl
 801179a:	4798      	blx	r3
 801179c:	250a      	movs	r5, #10
 801179e:	e776      	b.n	801168e <rcl_expand_topic_name+0x16a>
 80117a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80117a2:	601d      	str	r5, [r3, #0]
 80117a4:	f7f6 facc 	bl	8007d40 <rcutils_reset_error>
 80117a8:	e7f8      	b.n	801179c <rcl_expand_topic_name+0x278>
 80117aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80117ac:	2300      	movs	r3, #0
 80117ae:	6013      	str	r3, [r2, #0]
 80117b0:	e7f4      	b.n	801179c <rcl_expand_topic_name+0x278>
 80117b2:	ab17      	add	r3, sp, #92	@ 0x5c
 80117b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80117b8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80117bc:	ab14      	add	r3, sp, #80	@ 0x50
 80117be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80117c0:	4640      	mov	r0, r8
 80117c2:	f7fa fb1d 	bl	800be00 <rcutils_strdup>
 80117c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80117c8:	6018      	str	r0, [r3, #0]
 80117ca:	2800      	cmp	r0, #0
 80117cc:	f47f af5f 	bne.w	801168e <rcl_expand_topic_name+0x16a>
 80117d0:	e7e8      	b.n	80117a4 <rcl_expand_topic_name+0x280>
 80117d2:	bf00      	nop
 80117d4:	08014f40 	.word	0x08014f40
 80117d8:	080150a0 	.word	0x080150a0
 80117dc:	080150a8 	.word	0x080150a8
 80117e0:	080150b0 	.word	0x080150b0
 80117e4:	080150b8 	.word	0x080150b8
 80117e8:	08014c10 	.word	0x08014c10
 80117ec:	08014c08 	.word	0x08014c08

080117f0 <rcl_get_default_topic_name_substitutions>:
 80117f0:	2800      	cmp	r0, #0
 80117f2:	bf0c      	ite	eq
 80117f4:	200b      	moveq	r0, #11
 80117f6:	2000      	movne	r0, #0
 80117f8:	4770      	bx	lr
 80117fa:	bf00      	nop

080117fc <rcl_get_zero_initialized_guard_condition>:
 80117fc:	4a03      	ldr	r2, [pc, #12]	@ (801180c <rcl_get_zero_initialized_guard_condition+0x10>)
 80117fe:	4603      	mov	r3, r0
 8011800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011804:	e883 0003 	stmia.w	r3, {r0, r1}
 8011808:	4618      	mov	r0, r3
 801180a:	4770      	bx	lr
 801180c:	08015608 	.word	0x08015608

08011810 <rcl_guard_condition_init_from_rmw>:
 8011810:	b082      	sub	sp, #8
 8011812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011816:	b086      	sub	sp, #24
 8011818:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801181c:	4604      	mov	r4, r0
 801181e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8011822:	460e      	mov	r6, r1
 8011824:	4617      	mov	r7, r2
 8011826:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801182a:	f10d 0e04 	add.w	lr, sp, #4
 801182e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011832:	f8dc 3000 	ldr.w	r3, [ip]
 8011836:	f8ce 3000 	str.w	r3, [lr]
 801183a:	a801      	add	r0, sp, #4
 801183c:	f7f6 fa56 	bl	8007cec <rcutils_allocator_is_valid>
 8011840:	b350      	cbz	r0, 8011898 <rcl_guard_condition_init_from_rmw+0x88>
 8011842:	b34c      	cbz	r4, 8011898 <rcl_guard_condition_init_from_rmw+0x88>
 8011844:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8011848:	f1b8 0f00 	cmp.w	r8, #0
 801184c:	d11e      	bne.n	801188c <rcl_guard_condition_init_from_rmw+0x7c>
 801184e:	b31f      	cbz	r7, 8011898 <rcl_guard_condition_init_from_rmw+0x88>
 8011850:	4638      	mov	r0, r7
 8011852:	f7f7 fc81 	bl	8009158 <rcl_context_is_valid>
 8011856:	b328      	cbz	r0, 80118a4 <rcl_guard_condition_init_from_rmw+0x94>
 8011858:	9b01      	ldr	r3, [sp, #4]
 801185a:	9905      	ldr	r1, [sp, #20]
 801185c:	201c      	movs	r0, #28
 801185e:	4798      	blx	r3
 8011860:	4605      	mov	r5, r0
 8011862:	6060      	str	r0, [r4, #4]
 8011864:	b358      	cbz	r0, 80118be <rcl_guard_condition_init_from_rmw+0xae>
 8011866:	b1fe      	cbz	r6, 80118a8 <rcl_guard_condition_init_from_rmw+0x98>
 8011868:	6006      	str	r6, [r0, #0]
 801186a:	f880 8004 	strb.w	r8, [r0, #4]
 801186e:	ac01      	add	r4, sp, #4
 8011870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011872:	f105 0c08 	add.w	ip, r5, #8
 8011876:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801187a:	6823      	ldr	r3, [r4, #0]
 801187c:	f8cc 3000 	str.w	r3, [ip]
 8011880:	2000      	movs	r0, #0
 8011882:	b006      	add	sp, #24
 8011884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011888:	b002      	add	sp, #8
 801188a:	4770      	bx	lr
 801188c:	2064      	movs	r0, #100	@ 0x64
 801188e:	b006      	add	sp, #24
 8011890:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011894:	b002      	add	sp, #8
 8011896:	4770      	bx	lr
 8011898:	200b      	movs	r0, #11
 801189a:	b006      	add	sp, #24
 801189c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118a0:	b002      	add	sp, #8
 80118a2:	4770      	bx	lr
 80118a4:	2065      	movs	r0, #101	@ 0x65
 80118a6:	e7f2      	b.n	801188e <rcl_guard_condition_init_from_rmw+0x7e>
 80118a8:	6838      	ldr	r0, [r7, #0]
 80118aa:	3028      	adds	r0, #40	@ 0x28
 80118ac:	f000 fc78 	bl	80121a0 <rmw_create_guard_condition>
 80118b0:	6028      	str	r0, [r5, #0]
 80118b2:	6865      	ldr	r5, [r4, #4]
 80118b4:	682e      	ldr	r6, [r5, #0]
 80118b6:	b126      	cbz	r6, 80118c2 <rcl_guard_condition_init_from_rmw+0xb2>
 80118b8:	2301      	movs	r3, #1
 80118ba:	712b      	strb	r3, [r5, #4]
 80118bc:	e7d7      	b.n	801186e <rcl_guard_condition_init_from_rmw+0x5e>
 80118be:	200a      	movs	r0, #10
 80118c0:	e7e5      	b.n	801188e <rcl_guard_condition_init_from_rmw+0x7e>
 80118c2:	4628      	mov	r0, r5
 80118c4:	9b02      	ldr	r3, [sp, #8]
 80118c6:	9905      	ldr	r1, [sp, #20]
 80118c8:	4798      	blx	r3
 80118ca:	2001      	movs	r0, #1
 80118cc:	6066      	str	r6, [r4, #4]
 80118ce:	e7de      	b.n	801188e <rcl_guard_condition_init_from_rmw+0x7e>

080118d0 <rcl_guard_condition_fini>:
 80118d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118d2:	b1d8      	cbz	r0, 801190c <rcl_guard_condition_fini+0x3c>
 80118d4:	4604      	mov	r4, r0
 80118d6:	6840      	ldr	r0, [r0, #4]
 80118d8:	b158      	cbz	r0, 80118f2 <rcl_guard_condition_fini+0x22>
 80118da:	6803      	ldr	r3, [r0, #0]
 80118dc:	68c6      	ldr	r6, [r0, #12]
 80118de:	6987      	ldr	r7, [r0, #24]
 80118e0:	b153      	cbz	r3, 80118f8 <rcl_guard_condition_fini+0x28>
 80118e2:	7905      	ldrb	r5, [r0, #4]
 80118e4:	b955      	cbnz	r5, 80118fc <rcl_guard_condition_fini+0x2c>
 80118e6:	4639      	mov	r1, r7
 80118e8:	47b0      	blx	r6
 80118ea:	2300      	movs	r3, #0
 80118ec:	6063      	str	r3, [r4, #4]
 80118ee:	4628      	mov	r0, r5
 80118f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118f2:	4605      	mov	r5, r0
 80118f4:	4628      	mov	r0, r5
 80118f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118f8:	461d      	mov	r5, r3
 80118fa:	e7f4      	b.n	80118e6 <rcl_guard_condition_fini+0x16>
 80118fc:	4618      	mov	r0, r3
 80118fe:	f000 fc63 	bl	80121c8 <rmw_destroy_guard_condition>
 8011902:	1e05      	subs	r5, r0, #0
 8011904:	bf18      	it	ne
 8011906:	2501      	movne	r5, #1
 8011908:	6860      	ldr	r0, [r4, #4]
 801190a:	e7ec      	b.n	80118e6 <rcl_guard_condition_fini+0x16>
 801190c:	250b      	movs	r5, #11
 801190e:	4628      	mov	r0, r5
 8011910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011912:	bf00      	nop

08011914 <rcl_guard_condition_get_default_options>:
 8011914:	b510      	push	{r4, lr}
 8011916:	4604      	mov	r4, r0
 8011918:	f7f6 f9bc 	bl	8007c94 <rcutils_get_default_allocator>
 801191c:	4620      	mov	r0, r4
 801191e:	bd10      	pop	{r4, pc}

08011920 <rcl_guard_condition_get_rmw_handle>:
 8011920:	b110      	cbz	r0, 8011928 <rcl_guard_condition_get_rmw_handle+0x8>
 8011922:	6840      	ldr	r0, [r0, #4]
 8011924:	b100      	cbz	r0, 8011928 <rcl_guard_condition_get_rmw_handle+0x8>
 8011926:	6800      	ldr	r0, [r0, #0]
 8011928:	4770      	bx	lr
 801192a:	bf00      	nop

0801192c <rcl_publish>:
 801192c:	b308      	cbz	r0, 8011972 <rcl_publish+0x46>
 801192e:	6803      	ldr	r3, [r0, #0]
 8011930:	b570      	push	{r4, r5, r6, lr}
 8011932:	4604      	mov	r4, r0
 8011934:	b1c3      	cbz	r3, 8011968 <rcl_publish+0x3c>
 8011936:	4616      	mov	r6, r2
 8011938:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801193c:	b1a2      	cbz	r2, 8011968 <rcl_publish+0x3c>
 801193e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8011942:	460d      	mov	r5, r1
 8011944:	f7f7 fc08 	bl	8009158 <rcl_context_is_valid>
 8011948:	b160      	cbz	r0, 8011964 <rcl_publish+0x38>
 801194a:	6823      	ldr	r3, [r4, #0]
 801194c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8011950:	b150      	cbz	r0, 8011968 <rcl_publish+0x3c>
 8011952:	b165      	cbz	r5, 801196e <rcl_publish+0x42>
 8011954:	4632      	mov	r2, r6
 8011956:	4629      	mov	r1, r5
 8011958:	f000 fcc4 	bl	80122e4 <rmw_publish>
 801195c:	3800      	subs	r0, #0
 801195e:	bf18      	it	ne
 8011960:	2001      	movne	r0, #1
 8011962:	bd70      	pop	{r4, r5, r6, pc}
 8011964:	f7f6 f9d0 	bl	8007d08 <rcutils_error_is_set>
 8011968:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 801196c:	bd70      	pop	{r4, r5, r6, pc}
 801196e:	200b      	movs	r0, #11
 8011970:	bd70      	pop	{r4, r5, r6, pc}
 8011972:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8011976:	4770      	bx	lr

08011978 <rcl_publisher_is_valid>:
 8011978:	b1b0      	cbz	r0, 80119a8 <rcl_publisher_is_valid+0x30>
 801197a:	6803      	ldr	r3, [r0, #0]
 801197c:	b510      	push	{r4, lr}
 801197e:	4604      	mov	r4, r0
 8011980:	b183      	cbz	r3, 80119a4 <rcl_publisher_is_valid+0x2c>
 8011982:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8011986:	b16a      	cbz	r2, 80119a4 <rcl_publisher_is_valid+0x2c>
 8011988:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 801198c:	f7f7 fbe4 	bl	8009158 <rcl_context_is_valid>
 8011990:	b130      	cbz	r0, 80119a0 <rcl_publisher_is_valid+0x28>
 8011992:	6823      	ldr	r3, [r4, #0]
 8011994:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8011998:	3800      	subs	r0, #0
 801199a:	bf18      	it	ne
 801199c:	2001      	movne	r0, #1
 801199e:	bd10      	pop	{r4, pc}
 80119a0:	f7f6 f9b2 	bl	8007d08 <rcutils_error_is_set>
 80119a4:	2000      	movs	r0, #0
 80119a6:	bd10      	pop	{r4, pc}
 80119a8:	2000      	movs	r0, #0
 80119aa:	4770      	bx	lr

080119ac <rcl_publisher_is_valid_except_context>:
 80119ac:	b130      	cbz	r0, 80119bc <rcl_publisher_is_valid_except_context+0x10>
 80119ae:	6800      	ldr	r0, [r0, #0]
 80119b0:	b120      	cbz	r0, 80119bc <rcl_publisher_is_valid_except_context+0x10>
 80119b2:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 80119b6:	3800      	subs	r0, #0
 80119b8:	bf18      	it	ne
 80119ba:	2001      	movne	r0, #1
 80119bc:	4770      	bx	lr
 80119be:	bf00      	nop

080119c0 <rcl_validate_topic_name>:
 80119c0:	2800      	cmp	r0, #0
 80119c2:	d06b      	beq.n	8011a9c <rcl_validate_topic_name+0xdc>
 80119c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119c8:	460d      	mov	r5, r1
 80119ca:	2900      	cmp	r1, #0
 80119cc:	d06d      	beq.n	8011aaa <rcl_validate_topic_name+0xea>
 80119ce:	4616      	mov	r6, r2
 80119d0:	4604      	mov	r4, r0
 80119d2:	f7ee fc65 	bl	80002a0 <strlen>
 80119d6:	b190      	cbz	r0, 80119fe <rcl_validate_topic_name+0x3e>
 80119d8:	7821      	ldrb	r1, [r4, #0]
 80119da:	4a71      	ldr	r2, [pc, #452]	@ (8011ba0 <rcl_validate_topic_name+0x1e0>)
 80119dc:	5c53      	ldrb	r3, [r2, r1]
 80119de:	f013 0304 	ands.w	r3, r3, #4
 80119e2:	d15d      	bne.n	8011aa0 <rcl_validate_topic_name+0xe0>
 80119e4:	1e47      	subs	r7, r0, #1
 80119e6:	f814 c007 	ldrb.w	ip, [r4, r7]
 80119ea:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 80119ee:	d10d      	bne.n	8011a0c <rcl_validate_topic_name+0x4c>
 80119f0:	2302      	movs	r3, #2
 80119f2:	602b      	str	r3, [r5, #0]
 80119f4:	b146      	cbz	r6, 8011a08 <rcl_validate_topic_name+0x48>
 80119f6:	6037      	str	r7, [r6, #0]
 80119f8:	2000      	movs	r0, #0
 80119fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119fe:	2301      	movs	r3, #1
 8011a00:	602b      	str	r3, [r5, #0]
 8011a02:	b10e      	cbz	r6, 8011a08 <rcl_validate_topic_name+0x48>
 8011a04:	2300      	movs	r3, #0
 8011a06:	6033      	str	r3, [r6, #0]
 8011a08:	2000      	movs	r0, #0
 8011a0a:	e7f6      	b.n	80119fa <rcl_validate_topic_name+0x3a>
 8011a0c:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8011a10:	469a      	mov	sl, r3
 8011a12:	469e      	mov	lr, r3
 8011a14:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8011a18:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 8011a1c:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 8011a20:	d85b      	bhi.n	8011ada <rcl_validate_topic_name+0x11a>
 8011a22:	e8df f00c 	tbb	[pc, ip]
 8011a26:	4463      	.short	0x4463
 8011a28:	44444444 	.word	0x44444444
 8011a2c:	44444444 	.word	0x44444444
 8011a30:	5a5a5a44 	.word	0x5a5a5a44
 8011a34:	5a5a5a5a 	.word	0x5a5a5a5a
 8011a38:	44444444 	.word	0x44444444
 8011a3c:	44444444 	.word	0x44444444
 8011a40:	44444444 	.word	0x44444444
 8011a44:	44444444 	.word	0x44444444
 8011a48:	44444444 	.word	0x44444444
 8011a4c:	44444444 	.word	0x44444444
 8011a50:	5a5a4444 	.word	0x5a5a4444
 8011a54:	5a2e5a5a 	.word	0x5a2e5a5a
 8011a58:	44444444 	.word	0x44444444
 8011a5c:	44444444 	.word	0x44444444
 8011a60:	44444444 	.word	0x44444444
 8011a64:	44444444 	.word	0x44444444
 8011a68:	44444444 	.word	0x44444444
 8011a6c:	44444444 	.word	0x44444444
 8011a70:	5a284444 	.word	0x5a284444
 8011a74:	6b73      	.short	0x6b73
 8011a76:	f1ba 0f00 	cmp.w	sl, #0
 8011a7a:	d13a      	bne.n	8011af2 <rcl_validate_topic_name+0x132>
 8011a7c:	4673      	mov	r3, lr
 8011a7e:	f04f 0a01 	mov.w	sl, #1
 8011a82:	f10e 0e01 	add.w	lr, lr, #1
 8011a86:	4570      	cmp	r0, lr
 8011a88:	d1c4      	bne.n	8011a14 <rcl_validate_topic_name+0x54>
 8011a8a:	f1ba 0f00 	cmp.w	sl, #0
 8011a8e:	d048      	beq.n	8011b22 <rcl_validate_topic_name+0x162>
 8011a90:	2205      	movs	r2, #5
 8011a92:	602a      	str	r2, [r5, #0]
 8011a94:	2e00      	cmp	r6, #0
 8011a96:	d0b7      	beq.n	8011a08 <rcl_validate_topic_name+0x48>
 8011a98:	6033      	str	r3, [r6, #0]
 8011a9a:	e7b5      	b.n	8011a08 <rcl_validate_topic_name+0x48>
 8011a9c:	200b      	movs	r0, #11
 8011a9e:	4770      	bx	lr
 8011aa0:	2304      	movs	r3, #4
 8011aa2:	602b      	str	r3, [r5, #0]
 8011aa4:	2e00      	cmp	r6, #0
 8011aa6:	d1ad      	bne.n	8011a04 <rcl_validate_topic_name+0x44>
 8011aa8:	e7ae      	b.n	8011a08 <rcl_validate_topic_name+0x48>
 8011aaa:	200b      	movs	r0, #11
 8011aac:	e7a5      	b.n	80119fa <rcl_validate_topic_name+0x3a>
 8011aae:	f812 c009 	ldrb.w	ip, [r2, r9]
 8011ab2:	f01c 0f04 	tst.w	ip, #4
 8011ab6:	d0e4      	beq.n	8011a82 <rcl_validate_topic_name+0xc2>
 8011ab8:	f1ba 0f00 	cmp.w	sl, #0
 8011abc:	d0e1      	beq.n	8011a82 <rcl_validate_topic_name+0xc2>
 8011abe:	f1be 0f00 	cmp.w	lr, #0
 8011ac2:	d0de      	beq.n	8011a82 <rcl_validate_topic_name+0xc2>
 8011ac4:	f10e 3cff 	add.w	ip, lr, #4294967295	@ 0xffffffff
 8011ac8:	4563      	cmp	r3, ip
 8011aca:	d1da      	bne.n	8011a82 <rcl_validate_topic_name+0xc2>
 8011acc:	2309      	movs	r3, #9
 8011ace:	602b      	str	r3, [r5, #0]
 8011ad0:	2e00      	cmp	r6, #0
 8011ad2:	d099      	beq.n	8011a08 <rcl_validate_topic_name+0x48>
 8011ad4:	f8c6 e000 	str.w	lr, [r6]
 8011ad8:	e796      	b.n	8011a08 <rcl_validate_topic_name+0x48>
 8011ada:	f1ba 0f00 	cmp.w	sl, #0
 8011ade:	bf0c      	ite	eq
 8011ae0:	2303      	moveq	r3, #3
 8011ae2:	2308      	movne	r3, #8
 8011ae4:	602b      	str	r3, [r5, #0]
 8011ae6:	2e00      	cmp	r6, #0
 8011ae8:	d1f4      	bne.n	8011ad4 <rcl_validate_topic_name+0x114>
 8011aea:	e78d      	b.n	8011a08 <rcl_validate_topic_name+0x48>
 8011aec:	f1ba 0f00 	cmp.w	sl, #0
 8011af0:	d0c7      	beq.n	8011a82 <rcl_validate_topic_name+0xc2>
 8011af2:	2308      	movs	r3, #8
 8011af4:	602b      	str	r3, [r5, #0]
 8011af6:	2e00      	cmp	r6, #0
 8011af8:	d1ec      	bne.n	8011ad4 <rcl_validate_topic_name+0x114>
 8011afa:	e785      	b.n	8011a08 <rcl_validate_topic_name+0x48>
 8011afc:	f1be 0f00 	cmp.w	lr, #0
 8011b00:	d0bf      	beq.n	8011a82 <rcl_validate_topic_name+0xc2>
 8011b02:	2306      	movs	r3, #6
 8011b04:	602b      	str	r3, [r5, #0]
 8011b06:	2e00      	cmp	r6, #0
 8011b08:	d1e4      	bne.n	8011ad4 <rcl_validate_topic_name+0x114>
 8011b0a:	e77d      	b.n	8011a08 <rcl_validate_topic_name+0x48>
 8011b0c:	f1ba 0f00 	cmp.w	sl, #0
 8011b10:	d104      	bne.n	8011b1c <rcl_validate_topic_name+0x15c>
 8011b12:	2305      	movs	r3, #5
 8011b14:	602b      	str	r3, [r5, #0]
 8011b16:	2e00      	cmp	r6, #0
 8011b18:	d1dc      	bne.n	8011ad4 <rcl_validate_topic_name+0x114>
 8011b1a:	e775      	b.n	8011a08 <rcl_validate_topic_name+0x48>
 8011b1c:	f04f 0a00 	mov.w	sl, #0
 8011b20:	e7af      	b.n	8011a82 <rcl_validate_topic_name+0xc2>
 8011b22:	297e      	cmp	r1, #126	@ 0x7e
 8011b24:	d01d      	beq.n	8011b62 <rcl_validate_topic_name+0x1a2>
 8011b26:	2101      	movs	r1, #1
 8011b28:	e006      	b.n	8011b38 <rcl_validate_topic_name+0x178>
 8011b2a:	458e      	cmp	lr, r1
 8011b2c:	f104 0401 	add.w	r4, r4, #1
 8011b30:	f101 0301 	add.w	r3, r1, #1
 8011b34:	d912      	bls.n	8011b5c <rcl_validate_topic_name+0x19c>
 8011b36:	4619      	mov	r1, r3
 8011b38:	4557      	cmp	r7, sl
 8011b3a:	f10a 0a01 	add.w	sl, sl, #1
 8011b3e:	d0f4      	beq.n	8011b2a <rcl_validate_topic_name+0x16a>
 8011b40:	7823      	ldrb	r3, [r4, #0]
 8011b42:	2b2f      	cmp	r3, #47	@ 0x2f
 8011b44:	d1f1      	bne.n	8011b2a <rcl_validate_topic_name+0x16a>
 8011b46:	7863      	ldrb	r3, [r4, #1]
 8011b48:	5cd3      	ldrb	r3, [r2, r3]
 8011b4a:	075b      	lsls	r3, r3, #29
 8011b4c:	d5ed      	bpl.n	8011b2a <rcl_validate_topic_name+0x16a>
 8011b4e:	2304      	movs	r3, #4
 8011b50:	602b      	str	r3, [r5, #0]
 8011b52:	2e00      	cmp	r6, #0
 8011b54:	f43f af58 	beq.w	8011a08 <rcl_validate_topic_name+0x48>
 8011b58:	6031      	str	r1, [r6, #0]
 8011b5a:	e755      	b.n	8011a08 <rcl_validate_topic_name+0x48>
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	602b      	str	r3, [r5, #0]
 8011b60:	e752      	b.n	8011a08 <rcl_validate_topic_name+0x48>
 8011b62:	4653      	mov	r3, sl
 8011b64:	2101      	movs	r1, #1
 8011b66:	e00a      	b.n	8011b7e <rcl_validate_topic_name+0x1be>
 8011b68:	2b01      	cmp	r3, #1
 8011b6a:	d012      	beq.n	8011b92 <rcl_validate_topic_name+0x1d2>
 8011b6c:	458e      	cmp	lr, r1
 8011b6e:	f103 0301 	add.w	r3, r3, #1
 8011b72:	f104 0401 	add.w	r4, r4, #1
 8011b76:	f101 0001 	add.w	r0, r1, #1
 8011b7a:	d9ef      	bls.n	8011b5c <rcl_validate_topic_name+0x19c>
 8011b7c:	4601      	mov	r1, r0
 8011b7e:	429f      	cmp	r7, r3
 8011b80:	d0f4      	beq.n	8011b6c <rcl_validate_topic_name+0x1ac>
 8011b82:	7820      	ldrb	r0, [r4, #0]
 8011b84:	282f      	cmp	r0, #47	@ 0x2f
 8011b86:	d1ef      	bne.n	8011b68 <rcl_validate_topic_name+0x1a8>
 8011b88:	7860      	ldrb	r0, [r4, #1]
 8011b8a:	5c10      	ldrb	r0, [r2, r0]
 8011b8c:	0740      	lsls	r0, r0, #29
 8011b8e:	d5ed      	bpl.n	8011b6c <rcl_validate_topic_name+0x1ac>
 8011b90:	e7dd      	b.n	8011b4e <rcl_validate_topic_name+0x18e>
 8011b92:	2207      	movs	r2, #7
 8011b94:	602a      	str	r2, [r5, #0]
 8011b96:	2e00      	cmp	r6, #0
 8011b98:	f47f af7e 	bne.w	8011a98 <rcl_validate_topic_name+0xd8>
 8011b9c:	e734      	b.n	8011a08 <rcl_validate_topic_name+0x48>
 8011b9e:	bf00      	nop
 8011ba0:	0801570f 	.word	0x0801570f

08011ba4 <rcutils_split>:
 8011ba4:	b082      	sub	sp, #8
 8011ba6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011baa:	b08b      	sub	sp, #44	@ 0x2c
 8011bac:	ac14      	add	r4, sp, #80	@ 0x50
 8011bae:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8011bb0:	e884 000c 	stmia.w	r4, {r2, r3}
 8011bb4:	2f00      	cmp	r7, #0
 8011bb6:	f000 8091 	beq.w	8011cdc <rcutils_split+0x138>
 8011bba:	4606      	mov	r6, r0
 8011bbc:	2800      	cmp	r0, #0
 8011bbe:	d072      	beq.n	8011ca6 <rcutils_split+0x102>
 8011bc0:	7804      	ldrb	r4, [r0, #0]
 8011bc2:	2c00      	cmp	r4, #0
 8011bc4:	d06f      	beq.n	8011ca6 <rcutils_split+0x102>
 8011bc6:	460d      	mov	r5, r1
 8011bc8:	f7ee fb6a 	bl	80002a0 <strlen>
 8011bcc:	1833      	adds	r3, r6, r0
 8011bce:	1b64      	subs	r4, r4, r5
 8011bd0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011bd4:	4681      	mov	r9, r0
 8011bd6:	fab4 f484 	clz	r4, r4
 8011bda:	0964      	lsrs	r4, r4, #5
 8011bdc:	42ab      	cmp	r3, r5
 8011bde:	bf08      	it	eq
 8011be0:	f1a9 0901 	subeq.w	r9, r9, #1
 8011be4:	454c      	cmp	r4, r9
 8011be6:	d26a      	bcs.n	8011cbe <rcutils_split+0x11a>
 8011be8:	1933      	adds	r3, r6, r4
 8011bea:	eb06 0009 	add.w	r0, r6, r9
 8011bee:	2101      	movs	r1, #1
 8011bf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011bf4:	42aa      	cmp	r2, r5
 8011bf6:	bf08      	it	eq
 8011bf8:	3101      	addeq	r1, #1
 8011bfa:	4283      	cmp	r3, r0
 8011bfc:	d1f8      	bne.n	8011bf0 <rcutils_split+0x4c>
 8011bfe:	aa14      	add	r2, sp, #80	@ 0x50
 8011c00:	4638      	mov	r0, r7
 8011c02:	f000 f88f 	bl	8011d24 <rcutils_string_array_init>
 8011c06:	2800      	cmp	r0, #0
 8011c08:	d141      	bne.n	8011c8e <rcutils_split+0xea>
 8011c0a:	687a      	ldr	r2, [r7, #4]
 8011c0c:	4680      	mov	r8, r0
 8011c0e:	46a2      	mov	sl, r4
 8011c10:	e002      	b.n	8011c18 <rcutils_split+0x74>
 8011c12:	3401      	adds	r4, #1
 8011c14:	454c      	cmp	r4, r9
 8011c16:	d222      	bcs.n	8011c5e <rcutils_split+0xba>
 8011c18:	5d33      	ldrb	r3, [r6, r4]
 8011c1a:	42ab      	cmp	r3, r5
 8011c1c:	d1f9      	bne.n	8011c12 <rcutils_split+0x6e>
 8011c1e:	4554      	cmp	r4, sl
 8011c20:	eba4 0b0a 	sub.w	fp, r4, sl
 8011c24:	d038      	beq.n	8011c98 <rcutils_split+0xf4>
 8011c26:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011c28:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011c2a:	9201      	str	r2, [sp, #4]
 8011c2c:	f10b 0002 	add.w	r0, fp, #2
 8011c30:	4798      	blx	r3
 8011c32:	9a01      	ldr	r2, [sp, #4]
 8011c34:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 8011c38:	687a      	ldr	r2, [r7, #4]
 8011c3a:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8011c3e:	eb06 030a 	add.w	r3, r6, sl
 8011c42:	f10b 0101 	add.w	r1, fp, #1
 8011c46:	2800      	cmp	r0, #0
 8011c48:	d04e      	beq.n	8011ce8 <rcutils_split+0x144>
 8011c4a:	4a2d      	ldr	r2, [pc, #180]	@ (8011d00 <rcutils_split+0x15c>)
 8011c4c:	f001 fdb2 	bl	80137b4 <sniprintf>
 8011c50:	687a      	ldr	r2, [r7, #4]
 8011c52:	f108 0801 	add.w	r8, r8, #1
 8011c56:	3401      	adds	r4, #1
 8011c58:	454c      	cmp	r4, r9
 8011c5a:	46a2      	mov	sl, r4
 8011c5c:	d3dc      	bcc.n	8011c18 <rcutils_split+0x74>
 8011c5e:	4554      	cmp	r4, sl
 8011c60:	d035      	beq.n	8011cce <rcutils_split+0x12a>
 8011c62:	eba4 040a 	sub.w	r4, r4, sl
 8011c66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011c68:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011c6a:	9201      	str	r2, [sp, #4]
 8011c6c:	1ca0      	adds	r0, r4, #2
 8011c6e:	4798      	blx	r3
 8011c70:	9a01      	ldr	r2, [sp, #4]
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 8011c78:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011c7c:	2800      	cmp	r0, #0
 8011c7e:	d035      	beq.n	8011cec <rcutils_split+0x148>
 8011c80:	4a1f      	ldr	r2, [pc, #124]	@ (8011d00 <rcutils_split+0x15c>)
 8011c82:	eb06 030a 	add.w	r3, r6, sl
 8011c86:	1c61      	adds	r1, r4, #1
 8011c88:	f001 fd94 	bl	80137b4 <sniprintf>
 8011c8c:	2000      	movs	r0, #0
 8011c8e:	b00b      	add	sp, #44	@ 0x2c
 8011c90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c94:	b002      	add	sp, #8
 8011c96:	4770      	bx	lr
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	3b01      	subs	r3, #1
 8011c9c:	2100      	movs	r1, #0
 8011c9e:	603b      	str	r3, [r7, #0]
 8011ca0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8011ca4:	e7d7      	b.n	8011c56 <rcutils_split+0xb2>
 8011ca6:	a802      	add	r0, sp, #8
 8011ca8:	ac02      	add	r4, sp, #8
 8011caa:	f000 f82b 	bl	8011d04 <rcutils_get_zero_initialized_string_array>
 8011cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011cb0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011cb2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011cb6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8011cba:	2000      	movs	r0, #0
 8011cbc:	e7e7      	b.n	8011c8e <rcutils_split+0xea>
 8011cbe:	aa14      	add	r2, sp, #80	@ 0x50
 8011cc0:	2101      	movs	r1, #1
 8011cc2:	4638      	mov	r0, r7
 8011cc4:	f000 f82e 	bl	8011d24 <rcutils_string_array_init>
 8011cc8:	2800      	cmp	r0, #0
 8011cca:	d1e0      	bne.n	8011c8e <rcutils_split+0xea>
 8011ccc:	687a      	ldr	r2, [r7, #4]
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	3b01      	subs	r3, #1
 8011cd2:	2100      	movs	r1, #0
 8011cd4:	603b      	str	r3, [r7, #0]
 8011cd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8011cda:	e7ee      	b.n	8011cba <rcutils_split+0x116>
 8011cdc:	200b      	movs	r0, #11
 8011cde:	b00b      	add	sp, #44	@ 0x2c
 8011ce0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ce4:	b002      	add	sp, #8
 8011ce6:	4770      	bx	lr
 8011ce8:	f8c7 8000 	str.w	r8, [r7]
 8011cec:	4638      	mov	r0, r7
 8011cee:	f000 f83b 	bl	8011d68 <rcutils_string_array_fini>
 8011cf2:	b908      	cbnz	r0, 8011cf8 <rcutils_split+0x154>
 8011cf4:	200a      	movs	r0, #10
 8011cf6:	e7ca      	b.n	8011c8e <rcutils_split+0xea>
 8011cf8:	f7f6 f822 	bl	8007d40 <rcutils_reset_error>
 8011cfc:	e7fa      	b.n	8011cf4 <rcutils_split+0x150>
 8011cfe:	bf00      	nop
 8011d00:	08014f44 	.word	0x08014f44

08011d04 <rcutils_get_zero_initialized_string_array>:
 8011d04:	b510      	push	{r4, lr}
 8011d06:	4c06      	ldr	r4, [pc, #24]	@ (8011d20 <rcutils_get_zero_initialized_string_array+0x1c>)
 8011d08:	4686      	mov	lr, r0
 8011d0a:	4684      	mov	ip, r0
 8011d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011d0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d12:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011d16:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8011d1a:	4670      	mov	r0, lr
 8011d1c:	bd10      	pop	{r4, pc}
 8011d1e:	bf00      	nop
 8011d20:	08015610 	.word	0x08015610

08011d24 <rcutils_string_array_init>:
 8011d24:	b1da      	cbz	r2, 8011d5e <rcutils_string_array_init+0x3a>
 8011d26:	b570      	push	{r4, r5, r6, lr}
 8011d28:	4605      	mov	r5, r0
 8011d2a:	b1d0      	cbz	r0, 8011d62 <rcutils_string_array_init+0x3e>
 8011d2c:	460e      	mov	r6, r1
 8011d2e:	4614      	mov	r4, r2
 8011d30:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 8011d34:	6001      	str	r1, [r0, #0]
 8011d36:	2104      	movs	r1, #4
 8011d38:	4630      	mov	r0, r6
 8011d3a:	4798      	blx	r3
 8011d3c:	6068      	str	r0, [r5, #4]
 8011d3e:	b150      	cbz	r0, 8011d56 <rcutils_string_array_init+0x32>
 8011d40:	46a4      	mov	ip, r4
 8011d42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011d46:	f105 0408 	add.w	r4, r5, #8
 8011d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d4c:	f8dc 3000 	ldr.w	r3, [ip]
 8011d50:	6023      	str	r3, [r4, #0]
 8011d52:	2000      	movs	r0, #0
 8011d54:	bd70      	pop	{r4, r5, r6, pc}
 8011d56:	2e00      	cmp	r6, #0
 8011d58:	d0f2      	beq.n	8011d40 <rcutils_string_array_init+0x1c>
 8011d5a:	200a      	movs	r0, #10
 8011d5c:	bd70      	pop	{r4, r5, r6, pc}
 8011d5e:	200b      	movs	r0, #11
 8011d60:	4770      	bx	lr
 8011d62:	200b      	movs	r0, #11
 8011d64:	bd70      	pop	{r4, r5, r6, pc}
 8011d66:	bf00      	nop

08011d68 <rcutils_string_array_fini>:
 8011d68:	b310      	cbz	r0, 8011db0 <rcutils_string_array_fini+0x48>
 8011d6a:	6843      	ldr	r3, [r0, #4]
 8011d6c:	b570      	push	{r4, r5, r6, lr}
 8011d6e:	4604      	mov	r4, r0
 8011d70:	b1d3      	cbz	r3, 8011da8 <rcutils_string_array_fini+0x40>
 8011d72:	3008      	adds	r0, #8
 8011d74:	f7f5 ffba 	bl	8007cec <rcutils_allocator_is_valid>
 8011d78:	b1c0      	cbz	r0, 8011dac <rcutils_string_array_fini+0x44>
 8011d7a:	e9d4 3000 	ldrd	r3, r0, [r4]
 8011d7e:	b16b      	cbz	r3, 8011d9c <rcutils_string_array_fini+0x34>
 8011d80:	2500      	movs	r5, #0
 8011d82:	462e      	mov	r6, r5
 8011d84:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8011d88:	68e3      	ldr	r3, [r4, #12]
 8011d8a:	69a1      	ldr	r1, [r4, #24]
 8011d8c:	4798      	blx	r3
 8011d8e:	e9d4 3000 	ldrd	r3, r0, [r4]
 8011d92:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8011d96:	3501      	adds	r5, #1
 8011d98:	42ab      	cmp	r3, r5
 8011d9a:	d8f3      	bhi.n	8011d84 <rcutils_string_array_fini+0x1c>
 8011d9c:	68e3      	ldr	r3, [r4, #12]
 8011d9e:	69a1      	ldr	r1, [r4, #24]
 8011da0:	4798      	blx	r3
 8011da2:	2300      	movs	r3, #0
 8011da4:	e9c4 3300 	strd	r3, r3, [r4]
 8011da8:	2000      	movs	r0, #0
 8011daa:	bd70      	pop	{r4, r5, r6, pc}
 8011dac:	200b      	movs	r0, #11
 8011dae:	bd70      	pop	{r4, r5, r6, pc}
 8011db0:	200b      	movs	r0, #11
 8011db2:	4770      	bx	lr

08011db4 <rmw_discovery_options_init>:
 8011db4:	b328      	cbz	r0, 8011e02 <rmw_discovery_options_init+0x4e>
 8011db6:	b570      	push	{r4, r5, r6, lr}
 8011db8:	4604      	mov	r4, r0
 8011dba:	4610      	mov	r0, r2
 8011dbc:	460e      	mov	r6, r1
 8011dbe:	4615      	mov	r5, r2
 8011dc0:	f7f5 ff94 	bl	8007cec <rcutils_allocator_is_valid>
 8011dc4:	b1d8      	cbz	r0, 8011dfe <rmw_discovery_options_init+0x4a>
 8011dc6:	68a3      	ldr	r3, [r4, #8]
 8011dc8:	b9cb      	cbnz	r3, 8011dfe <rmw_discovery_options_init+0x4a>
 8011dca:	6863      	ldr	r3, [r4, #4]
 8011dcc:	b9bb      	cbnz	r3, 8011dfe <rmw_discovery_options_init+0x4a>
 8011dce:	7823      	ldrb	r3, [r4, #0]
 8011dd0:	b90b      	cbnz	r3, 8011dd6 <rmw_discovery_options_init+0x22>
 8011dd2:	2302      	movs	r3, #2
 8011dd4:	7023      	strb	r3, [r4, #0]
 8011dd6:	b186      	cbz	r6, 8011dfa <rmw_discovery_options_init+0x46>
 8011dd8:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8011ddc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011de0:	4630      	mov	r0, r6
 8011de2:	4798      	blx	r3
 8011de4:	6060      	str	r0, [r4, #4]
 8011de6:	b170      	cbz	r0, 8011e06 <rmw_discovery_options_init+0x52>
 8011de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011dea:	f104 0c0c 	add.w	ip, r4, #12
 8011dee:	60a6      	str	r6, [r4, #8]
 8011df0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011df4:	682b      	ldr	r3, [r5, #0]
 8011df6:	f8cc 3000 	str.w	r3, [ip]
 8011dfa:	2000      	movs	r0, #0
 8011dfc:	bd70      	pop	{r4, r5, r6, pc}
 8011dfe:	200b      	movs	r0, #11
 8011e00:	bd70      	pop	{r4, r5, r6, pc}
 8011e02:	200b      	movs	r0, #11
 8011e04:	4770      	bx	lr
 8011e06:	200a      	movs	r0, #10
 8011e08:	bd70      	pop	{r4, r5, r6, pc}
 8011e0a:	bf00      	nop

08011e0c <rmw_enclave_options_copy>:
 8011e0c:	b1e0      	cbz	r0, 8011e48 <rmw_enclave_options_copy+0x3c>
 8011e0e:	b570      	push	{r4, r5, r6, lr}
 8011e10:	4616      	mov	r6, r2
 8011e12:	b082      	sub	sp, #8
 8011e14:	b1aa      	cbz	r2, 8011e42 <rmw_enclave_options_copy+0x36>
 8011e16:	4605      	mov	r5, r0
 8011e18:	4608      	mov	r0, r1
 8011e1a:	460c      	mov	r4, r1
 8011e1c:	f7f5 ff66 	bl	8007cec <rcutils_allocator_is_valid>
 8011e20:	b178      	cbz	r0, 8011e42 <rmw_enclave_options_copy+0x36>
 8011e22:	f104 030c 	add.w	r3, r4, #12
 8011e26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e2a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011e2e:	4628      	mov	r0, r5
 8011e30:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011e34:	f7f9 ffe4 	bl	800be00 <rcutils_strdup>
 8011e38:	b140      	cbz	r0, 8011e4c <rmw_enclave_options_copy+0x40>
 8011e3a:	6030      	str	r0, [r6, #0]
 8011e3c:	2000      	movs	r0, #0
 8011e3e:	b002      	add	sp, #8
 8011e40:	bd70      	pop	{r4, r5, r6, pc}
 8011e42:	200b      	movs	r0, #11
 8011e44:	b002      	add	sp, #8
 8011e46:	bd70      	pop	{r4, r5, r6, pc}
 8011e48:	200b      	movs	r0, #11
 8011e4a:	4770      	bx	lr
 8011e4c:	200a      	movs	r0, #10
 8011e4e:	e7f6      	b.n	8011e3e <rmw_enclave_options_copy+0x32>

08011e50 <rmw_enclave_options_fini>:
 8011e50:	b170      	cbz	r0, 8011e70 <rmw_enclave_options_fini+0x20>
 8011e52:	b538      	push	{r3, r4, r5, lr}
 8011e54:	4605      	mov	r5, r0
 8011e56:	4608      	mov	r0, r1
 8011e58:	460c      	mov	r4, r1
 8011e5a:	f7f5 ff47 	bl	8007cec <rcutils_allocator_is_valid>
 8011e5e:	b128      	cbz	r0, 8011e6c <rmw_enclave_options_fini+0x1c>
 8011e60:	4628      	mov	r0, r5
 8011e62:	6863      	ldr	r3, [r4, #4]
 8011e64:	6921      	ldr	r1, [r4, #16]
 8011e66:	4798      	blx	r3
 8011e68:	2000      	movs	r0, #0
 8011e6a:	bd38      	pop	{r3, r4, r5, pc}
 8011e6c:	200b      	movs	r0, #11
 8011e6e:	bd38      	pop	{r3, r4, r5, pc}
 8011e70:	200b      	movs	r0, #11
 8011e72:	4770      	bx	lr

08011e74 <rmw_get_default_security_options>:
 8011e74:	2200      	movs	r2, #0
 8011e76:	7002      	strb	r2, [r0, #0]
 8011e78:	6042      	str	r2, [r0, #4]
 8011e7a:	4770      	bx	lr

08011e7c <rmw_time_equal>:
 8011e7c:	b570      	push	{r4, r5, r6, lr}
 8011e7e:	b084      	sub	sp, #16
 8011e80:	ac04      	add	r4, sp, #16
 8011e82:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8011e86:	4925      	ldr	r1, [pc, #148]	@ (8011f1c <rmw_time_equal+0xa0>)
 8011e88:	9c01      	ldr	r4, [sp, #4]
 8011e8a:	2202      	movs	r2, #2
 8011e8c:	4281      	cmp	r1, r0
 8011e8e:	41a2      	sbcs	r2, r4
 8011e90:	d333      	bcc.n	8011efa <rmw_time_equal+0x7e>
 8011e92:	4603      	mov	r3, r0
 8011e94:	4822      	ldr	r0, [pc, #136]	@ (8011f20 <rmw_time_equal+0xa4>)
 8011e96:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 8011e9a:	fba3 3200 	umull	r3, r2, r3, r0
 8011e9e:	fb00 2204 	mla	r2, r0, r4, r2
 8011ea2:	43de      	mvns	r6, r3
 8011ea4:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8011ea8:	1a84      	subs	r4, r0, r2
 8011eaa:	428e      	cmp	r6, r1
 8011eac:	41ac      	sbcs	r4, r5
 8011eae:	d332      	bcc.n	8011f16 <rmw_time_equal+0x9a>
 8011eb0:	eb11 0e03 	adds.w	lr, r1, r3
 8011eb4:	eb42 0005 	adc.w	r0, r2, r5
 8011eb8:	9b08      	ldr	r3, [sp, #32]
 8011eba:	4918      	ldr	r1, [pc, #96]	@ (8011f1c <rmw_time_equal+0xa0>)
 8011ebc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011ebe:	2202      	movs	r2, #2
 8011ec0:	4299      	cmp	r1, r3
 8011ec2:	41aa      	sbcs	r2, r5
 8011ec4:	d31e      	bcc.n	8011f04 <rmw_time_equal+0x88>
 8011ec6:	4c16      	ldr	r4, [pc, #88]	@ (8011f20 <rmw_time_equal+0xa4>)
 8011ec8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011eca:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011ecc:	fba3 3104 	umull	r3, r1, r3, r4
 8011ed0:	fb04 1105 	mla	r1, r4, r5, r1
 8011ed4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8011ed8:	43dd      	mvns	r5, r3
 8011eda:	ebac 0401 	sub.w	r4, ip, r1
 8011ede:	4295      	cmp	r5, r2
 8011ee0:	41b4      	sbcs	r4, r6
 8011ee2:	d314      	bcc.n	8011f0e <rmw_time_equal+0x92>
 8011ee4:	18d2      	adds	r2, r2, r3
 8011ee6:	eb41 0306 	adc.w	r3, r1, r6
 8011eea:	4283      	cmp	r3, r0
 8011eec:	bf08      	it	eq
 8011eee:	4572      	cmpeq	r2, lr
 8011ef0:	bf0c      	ite	eq
 8011ef2:	2001      	moveq	r0, #1
 8011ef4:	2000      	movne	r0, #0
 8011ef6:	b004      	add	sp, #16
 8011ef8:	bd70      	pop	{r4, r5, r6, pc}
 8011efa:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8011efe:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8011f02:	e7d9      	b.n	8011eb8 <rmw_time_equal+0x3c>
 8011f04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011f08:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011f0c:	e7ed      	b.n	8011eea <rmw_time_equal+0x6e>
 8011f0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011f12:	4663      	mov	r3, ip
 8011f14:	e7e9      	b.n	8011eea <rmw_time_equal+0x6e>
 8011f16:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8011f1a:	e7cd      	b.n	8011eb8 <rmw_time_equal+0x3c>
 8011f1c:	25c17d04 	.word	0x25c17d04
 8011f20:	3b9aca00 	.word	0x3b9aca00

08011f24 <rmw_time_total_nsec>:
 8011f24:	b430      	push	{r4, r5}
 8011f26:	b084      	sub	sp, #16
 8011f28:	ac04      	add	r4, sp, #16
 8011f2a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8011f2e:	4914      	ldr	r1, [pc, #80]	@ (8011f80 <rmw_time_total_nsec+0x5c>)
 8011f30:	9c01      	ldr	r4, [sp, #4]
 8011f32:	2202      	movs	r2, #2
 8011f34:	4281      	cmp	r1, r0
 8011f36:	41a2      	sbcs	r2, r4
 8011f38:	d315      	bcc.n	8011f66 <rmw_time_total_nsec+0x42>
 8011f3a:	4912      	ldr	r1, [pc, #72]	@ (8011f84 <rmw_time_total_nsec+0x60>)
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 8011f42:	fba3 3201 	umull	r3, r2, r3, r1
 8011f46:	fb01 2204 	mla	r2, r1, r4, r2
 8011f4a:	ea6f 0c03 	mvn.w	ip, r3
 8011f4e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011f52:	1a8c      	subs	r4, r1, r2
 8011f54:	4584      	cmp	ip, r0
 8011f56:	41ac      	sbcs	r4, r5
 8011f58:	d30c      	bcc.n	8011f74 <rmw_time_total_nsec+0x50>
 8011f5a:	1818      	adds	r0, r3, r0
 8011f5c:	eb42 0105 	adc.w	r1, r2, r5
 8011f60:	b004      	add	sp, #16
 8011f62:	bc30      	pop	{r4, r5}
 8011f64:	4770      	bx	lr
 8011f66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011f6a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011f6e:	b004      	add	sp, #16
 8011f70:	bc30      	pop	{r4, r5}
 8011f72:	4770      	bx	lr
 8011f74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011f78:	b004      	add	sp, #16
 8011f7a:	bc30      	pop	{r4, r5}
 8011f7c:	4770      	bx	lr
 8011f7e:	bf00      	nop
 8011f80:	25c17d04 	.word	0x25c17d04
 8011f84:	3b9aca00 	.word	0x3b9aca00

08011f88 <on_status>:
 8011f88:	b082      	sub	sp, #8
 8011f8a:	b002      	add	sp, #8
 8011f8c:	4770      	bx	lr
 8011f8e:	bf00      	nop

08011f90 <on_topic>:
 8011f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f94:	4a22      	ldr	r2, [pc, #136]	@ (8012020 <on_topic+0x90>)
 8011f96:	b094      	sub	sp, #80	@ 0x50
 8011f98:	6812      	ldr	r2, [r2, #0]
 8011f9a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8011f9c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8011fa0:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8011fa4:	b3c2      	cbz	r2, 8012018 <on_topic+0x88>
 8011fa6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8011faa:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8011fae:	e001      	b.n	8011fb4 <on_topic+0x24>
 8011fb0:	6852      	ldr	r2, [r2, #4]
 8011fb2:	b38a      	cbz	r2, 8012018 <on_topic+0x88>
 8011fb4:	6894      	ldr	r4, [r2, #8]
 8011fb6:	8aa3      	ldrh	r3, [r4, #20]
 8011fb8:	428b      	cmp	r3, r1
 8011fba:	d1f9      	bne.n	8011fb0 <on_topic+0x20>
 8011fbc:	7da3      	ldrb	r3, [r4, #22]
 8011fbe:	4283      	cmp	r3, r0
 8011fc0:	d1f6      	bne.n	8011fb0 <on_topic+0x20>
 8011fc2:	2248      	movs	r2, #72	@ 0x48
 8011fc4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011fc8:	4668      	mov	r0, sp
 8011fca:	f001 fdae 	bl	8013b2a <memcpy>
 8011fce:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8011fd2:	cb0c      	ldmia	r3, {r2, r3}
 8011fd4:	4620      	mov	r0, r4
 8011fd6:	f7fb fcf3 	bl	800d9c0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8011fda:	4607      	mov	r7, r0
 8011fdc:	b1e0      	cbz	r0, 8012018 <on_topic+0x88>
 8011fde:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8011fe2:	4632      	mov	r2, r6
 8011fe4:	4628      	mov	r0, r5
 8011fe6:	f108 0110 	add.w	r1, r8, #16
 8011fea:	f000 fab1 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 8011fee:	b930      	cbnz	r0, 8011ffe <on_topic+0x6e>
 8011ff0:	480c      	ldr	r0, [pc, #48]	@ (8012024 <on_topic+0x94>)
 8011ff2:	4639      	mov	r1, r7
 8011ff4:	b014      	add	sp, #80	@ 0x50
 8011ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ffa:	f000 b8bd 	b.w	8012178 <put_memory>
 8011ffe:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8012002:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8012006:	f000 f9cd 	bl	80123a4 <rmw_uros_epoch_nanos>
 801200a:	2305      	movs	r3, #5
 801200c:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8012010:	e942 0102 	strd	r0, r1, [r2, #-8]
 8012014:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8012018:	b014      	add	sp, #80	@ 0x50
 801201a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801201e:	bf00      	nop
 8012020:	2000bc60 	.word	0x2000bc60
 8012024:	2000b4b0 	.word	0x2000b4b0

08012028 <on_request>:
 8012028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801202c:	4823      	ldr	r0, [pc, #140]	@ (80120bc <on_request+0x94>)
 801202e:	b094      	sub	sp, #80	@ 0x50
 8012030:	6800      	ldr	r0, [r0, #0]
 8012032:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8012034:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8012038:	9113      	str	r1, [sp, #76]	@ 0x4c
 801203a:	2800      	cmp	r0, #0
 801203c:	d03b      	beq.n	80120b6 <on_request+0x8e>
 801203e:	461d      	mov	r5, r3
 8012040:	e001      	b.n	8012046 <on_request+0x1e>
 8012042:	6840      	ldr	r0, [r0, #4]
 8012044:	b3b8      	cbz	r0, 80120b6 <on_request+0x8e>
 8012046:	6884      	ldr	r4, [r0, #8]
 8012048:	8b21      	ldrh	r1, [r4, #24]
 801204a:	4291      	cmp	r1, r2
 801204c:	d1f9      	bne.n	8012042 <on_request+0x1a>
 801204e:	2248      	movs	r2, #72	@ 0x48
 8012050:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8012054:	4668      	mov	r0, sp
 8012056:	f001 fd68 	bl	8013b2a <memcpy>
 801205a:	f104 0320 	add.w	r3, r4, #32
 801205e:	cb0c      	ldmia	r3, {r2, r3}
 8012060:	4620      	mov	r0, r4
 8012062:	f7fb fcad 	bl	800d9c0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012066:	4680      	mov	r8, r0
 8012068:	b328      	cbz	r0, 80120b6 <on_request+0x8e>
 801206a:	4638      	mov	r0, r7
 801206c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8012070:	4632      	mov	r2, r6
 8012072:	f107 0110 	add.w	r1, r7, #16
 8012076:	f000 fa6b 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 801207a:	b930      	cbnz	r0, 801208a <on_request+0x62>
 801207c:	4810      	ldr	r0, [pc, #64]	@ (80120c0 <on_request+0x98>)
 801207e:	4641      	mov	r1, r8
 8012080:	b014      	add	sp, #80	@ 0x50
 8012082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012086:	f000 b877 	b.w	8012178 <put_memory>
 801208a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801208c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8012090:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8012094:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8012098:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801209c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80120a0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80120a4:	f000 f97e 	bl	80123a4 <rmw_uros_epoch_nanos>
 80120a8:	2303      	movs	r3, #3
 80120aa:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80120ae:	e942 0102 	strd	r0, r1, [r2, #-8]
 80120b2:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80120b6:	b014      	add	sp, #80	@ 0x50
 80120b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120bc:	2000b818 	.word	0x2000b818
 80120c0:	2000b4b0 	.word	0x2000b4b0

080120c4 <on_reply>:
 80120c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120c8:	4821      	ldr	r0, [pc, #132]	@ (8012150 <on_reply+0x8c>)
 80120ca:	b094      	sub	sp, #80	@ 0x50
 80120cc:	6800      	ldr	r0, [r0, #0]
 80120ce:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80120d0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80120d4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80120d6:	b3b8      	cbz	r0, 8012148 <on_reply+0x84>
 80120d8:	461d      	mov	r5, r3
 80120da:	e001      	b.n	80120e0 <on_reply+0x1c>
 80120dc:	6840      	ldr	r0, [r0, #4]
 80120de:	b398      	cbz	r0, 8012148 <on_reply+0x84>
 80120e0:	6884      	ldr	r4, [r0, #8]
 80120e2:	8b21      	ldrh	r1, [r4, #24]
 80120e4:	4291      	cmp	r1, r2
 80120e6:	d1f9      	bne.n	80120dc <on_reply+0x18>
 80120e8:	2248      	movs	r2, #72	@ 0x48
 80120ea:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80120ee:	4668      	mov	r0, sp
 80120f0:	f001 fd1b 	bl	8013b2a <memcpy>
 80120f4:	f104 0320 	add.w	r3, r4, #32
 80120f8:	cb0c      	ldmia	r3, {r2, r3}
 80120fa:	4620      	mov	r0, r4
 80120fc:	f7fb fc60 	bl	800d9c0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012100:	4680      	mov	r8, r0
 8012102:	b308      	cbz	r0, 8012148 <on_reply+0x84>
 8012104:	4638      	mov	r0, r7
 8012106:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801210a:	4632      	mov	r2, r6
 801210c:	f107 0110 	add.w	r1, r7, #16
 8012110:	f000 fa1e 	bl	8012550 <ucdr_deserialize_array_uint8_t>
 8012114:	b930      	cbnz	r0, 8012124 <on_reply+0x60>
 8012116:	480f      	ldr	r0, [pc, #60]	@ (8012154 <on_reply+0x90>)
 8012118:	4641      	mov	r1, r8
 801211a:	b014      	add	sp, #80	@ 0x50
 801211c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012120:	f000 b82a 	b.w	8012178 <put_memory>
 8012124:	2200      	movs	r2, #0
 8012126:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801212a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801212e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8012132:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8012136:	f000 f935 	bl	80123a4 <rmw_uros_epoch_nanos>
 801213a:	2304      	movs	r3, #4
 801213c:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8012140:	e942 0102 	strd	r0, r1, [r2, #-8]
 8012144:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8012148:	b014      	add	sp, #80	@ 0x50
 801214a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801214e:	bf00      	nop
 8012150:	2000b740 	.word	0x2000b740
 8012154:	2000b4b0 	.word	0x2000b4b0

08012158 <get_memory>:
 8012158:	4603      	mov	r3, r0
 801215a:	6840      	ldr	r0, [r0, #4]
 801215c:	b158      	cbz	r0, 8012176 <get_memory+0x1e>
 801215e:	6842      	ldr	r2, [r0, #4]
 8012160:	605a      	str	r2, [r3, #4]
 8012162:	b10a      	cbz	r2, 8012168 <get_memory+0x10>
 8012164:	2100      	movs	r1, #0
 8012166:	6011      	str	r1, [r2, #0]
 8012168:	681a      	ldr	r2, [r3, #0]
 801216a:	6042      	str	r2, [r0, #4]
 801216c:	b102      	cbz	r2, 8012170 <get_memory+0x18>
 801216e:	6010      	str	r0, [r2, #0]
 8012170:	2200      	movs	r2, #0
 8012172:	6002      	str	r2, [r0, #0]
 8012174:	6018      	str	r0, [r3, #0]
 8012176:	4770      	bx	lr

08012178 <put_memory>:
 8012178:	680b      	ldr	r3, [r1, #0]
 801217a:	b10b      	cbz	r3, 8012180 <put_memory+0x8>
 801217c:	684a      	ldr	r2, [r1, #4]
 801217e:	605a      	str	r2, [r3, #4]
 8012180:	684a      	ldr	r2, [r1, #4]
 8012182:	b102      	cbz	r2, 8012186 <put_memory+0xe>
 8012184:	6013      	str	r3, [r2, #0]
 8012186:	6803      	ldr	r3, [r0, #0]
 8012188:	428b      	cmp	r3, r1
 801218a:	6843      	ldr	r3, [r0, #4]
 801218c:	bf08      	it	eq
 801218e:	6002      	streq	r2, [r0, #0]
 8012190:	604b      	str	r3, [r1, #4]
 8012192:	b103      	cbz	r3, 8012196 <put_memory+0x1e>
 8012194:	6019      	str	r1, [r3, #0]
 8012196:	2300      	movs	r3, #0
 8012198:	600b      	str	r3, [r1, #0]
 801219a:	6041      	str	r1, [r0, #4]
 801219c:	4770      	bx	lr
 801219e:	bf00      	nop

080121a0 <rmw_create_guard_condition>:
 80121a0:	b538      	push	{r3, r4, r5, lr}
 80121a2:	4605      	mov	r5, r0
 80121a4:	4807      	ldr	r0, [pc, #28]	@ (80121c4 <rmw_create_guard_condition+0x24>)
 80121a6:	f7ff ffd7 	bl	8012158 <get_memory>
 80121aa:	b148      	cbz	r0, 80121c0 <rmw_create_guard_condition+0x20>
 80121ac:	6884      	ldr	r4, [r0, #8]
 80121ae:	2300      	movs	r3, #0
 80121b0:	7423      	strb	r3, [r4, #16]
 80121b2:	61e5      	str	r5, [r4, #28]
 80121b4:	f7fa f97a 	bl	800c4ac <rmw_get_implementation_identifier>
 80121b8:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80121bc:	f104 0014 	add.w	r0, r4, #20
 80121c0:	bd38      	pop	{r3, r4, r5, pc}
 80121c2:	bf00      	nop
 80121c4:	2000928c 	.word	0x2000928c

080121c8 <rmw_destroy_guard_condition>:
 80121c8:	b508      	push	{r3, lr}
 80121ca:	4b08      	ldr	r3, [pc, #32]	@ (80121ec <rmw_destroy_guard_condition+0x24>)
 80121cc:	6819      	ldr	r1, [r3, #0]
 80121ce:	b911      	cbnz	r1, 80121d6 <rmw_destroy_guard_condition+0xe>
 80121d0:	e00a      	b.n	80121e8 <rmw_destroy_guard_condition+0x20>
 80121d2:	6849      	ldr	r1, [r1, #4]
 80121d4:	b141      	cbz	r1, 80121e8 <rmw_destroy_guard_condition+0x20>
 80121d6:	688b      	ldr	r3, [r1, #8]
 80121d8:	3314      	adds	r3, #20
 80121da:	4298      	cmp	r0, r3
 80121dc:	d1f9      	bne.n	80121d2 <rmw_destroy_guard_condition+0xa>
 80121de:	4803      	ldr	r0, [pc, #12]	@ (80121ec <rmw_destroy_guard_condition+0x24>)
 80121e0:	f7ff ffca 	bl	8012178 <put_memory>
 80121e4:	2000      	movs	r0, #0
 80121e6:	bd08      	pop	{r3, pc}
 80121e8:	2001      	movs	r0, #1
 80121ea:	bd08      	pop	{r3, pc}
 80121ec:	2000928c 	.word	0x2000928c

080121f0 <create_topic>:
 80121f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121f4:	4604      	mov	r4, r0
 80121f6:	b084      	sub	sp, #16
 80121f8:	4824      	ldr	r0, [pc, #144]	@ (801228c <create_topic+0x9c>)
 80121fa:	460f      	mov	r7, r1
 80121fc:	4616      	mov	r6, r2
 80121fe:	f7ff ffab 	bl	8012158 <get_memory>
 8012202:	2800      	cmp	r0, #0
 8012204:	d03c      	beq.n	8012280 <create_topic+0x90>
 8012206:	6923      	ldr	r3, [r4, #16]
 8012208:	6885      	ldr	r5, [r0, #8]
 801220a:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8012294 <create_topic+0xa4>
 801220e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012212:	e9c5 6405 	strd	r6, r4, [r5, #20]
 8012216:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801221a:	1c42      	adds	r2, r0, #1
 801221c:	2102      	movs	r1, #2
 801221e:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8012222:	f7fb ffd5 	bl	800e1d0 <uxr_object_id>
 8012226:	223c      	movs	r2, #60	@ 0x3c
 8012228:	6128      	str	r0, [r5, #16]
 801222a:	4641      	mov	r1, r8
 801222c:	4638      	mov	r0, r7
 801222e:	f7fb fd31 	bl	800dc94 <generate_topic_name>
 8012232:	b310      	cbz	r0, 801227a <create_topic+0x8a>
 8012234:	4f16      	ldr	r7, [pc, #88]	@ (8012290 <create_topic+0xa0>)
 8012236:	4630      	mov	r0, r6
 8012238:	2264      	movs	r2, #100	@ 0x64
 801223a:	4639      	mov	r1, r7
 801223c:	f7fb fcfa 	bl	800dc34 <generate_type_name>
 8012240:	b1d8      	cbz	r0, 801227a <create_topic+0x8a>
 8012242:	6920      	ldr	r0, [r4, #16]
 8012244:	2306      	movs	r3, #6
 8012246:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801224a:	f8cd 8000 	str.w	r8, [sp]
 801224e:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8012252:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012256:	6811      	ldr	r1, [r2, #0]
 8012258:	6963      	ldr	r3, [r4, #20]
 801225a:	692a      	ldr	r2, [r5, #16]
 801225c:	f7fb fe2c 	bl	800deb8 <uxr_buffer_create_topic_bin>
 8012260:	4602      	mov	r2, r0
 8012262:	6920      	ldr	r0, [r4, #16]
 8012264:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8012268:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801226c:	f7fb fca6 	bl	800dbbc <run_xrce_session>
 8012270:	b118      	cbz	r0, 801227a <create_topic+0x8a>
 8012272:	4628      	mov	r0, r5
 8012274:	b004      	add	sp, #16
 8012276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801227a:	4628      	mov	r0, r5
 801227c:	f7fb fb94 	bl	800d9a8 <rmw_uxrce_fini_topic_memory>
 8012280:	2500      	movs	r5, #0
 8012282:	4628      	mov	r0, r5
 8012284:	b004      	add	sp, #16
 8012286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801228a:	bf00      	nop
 801228c:	2000b664 	.word	0x2000b664
 8012290:	2000db88 	.word	0x2000db88
 8012294:	2000dbec 	.word	0x2000dbec

08012298 <destroy_topic>:
 8012298:	b538      	push	{r3, r4, r5, lr}
 801229a:	6984      	ldr	r4, [r0, #24]
 801229c:	b1d4      	cbz	r4, 80122d4 <destroy_topic+0x3c>
 801229e:	4605      	mov	r5, r0
 80122a0:	6920      	ldr	r0, [r4, #16]
 80122a2:	692a      	ldr	r2, [r5, #16]
 80122a4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80122a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80122ac:	6819      	ldr	r1, [r3, #0]
 80122ae:	f7fb fd87 	bl	800ddc0 <uxr_buffer_delete_entity>
 80122b2:	4602      	mov	r2, r0
 80122b4:	6920      	ldr	r0, [r4, #16]
 80122b6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80122ba:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80122be:	f7fb fc7d 	bl	800dbbc <run_xrce_session>
 80122c2:	f080 0401 	eor.w	r4, r0, #1
 80122c6:	b2e4      	uxtb	r4, r4
 80122c8:	4628      	mov	r0, r5
 80122ca:	0064      	lsls	r4, r4, #1
 80122cc:	f7fb fb6c 	bl	800d9a8 <rmw_uxrce_fini_topic_memory>
 80122d0:	4620      	mov	r0, r4
 80122d2:	bd38      	pop	{r3, r4, r5, pc}
 80122d4:	2401      	movs	r4, #1
 80122d6:	4620      	mov	r0, r4
 80122d8:	bd38      	pop	{r3, r4, r5, pc}
 80122da:	bf00      	nop

080122dc <flush_session>:
 80122dc:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 80122de:	f7fc bd73 	b.w	800edc8 <uxr_run_session_until_confirm_delivery>
 80122e2:	bf00      	nop

080122e4 <rmw_publish>:
 80122e4:	2800      	cmp	r0, #0
 80122e6:	d053      	beq.n	8012390 <rmw_publish+0xac>
 80122e8:	b570      	push	{r4, r5, r6, lr}
 80122ea:	460d      	mov	r5, r1
 80122ec:	b08e      	sub	sp, #56	@ 0x38
 80122ee:	2900      	cmp	r1, #0
 80122f0:	d04b      	beq.n	801238a <rmw_publish+0xa6>
 80122f2:	4604      	mov	r4, r0
 80122f4:	6800      	ldr	r0, [r0, #0]
 80122f6:	f7fb fce7 	bl	800dcc8 <is_uxrce_rmw_identifier_valid>
 80122fa:	2800      	cmp	r0, #0
 80122fc:	d045      	beq.n	801238a <rmw_publish+0xa6>
 80122fe:	6866      	ldr	r6, [r4, #4]
 8012300:	2e00      	cmp	r6, #0
 8012302:	d042      	beq.n	801238a <rmw_publish+0xa6>
 8012304:	69b4      	ldr	r4, [r6, #24]
 8012306:	4628      	mov	r0, r5
 8012308:	6923      	ldr	r3, [r4, #16]
 801230a:	4798      	blx	r3
 801230c:	69f3      	ldr	r3, [r6, #28]
 801230e:	9005      	str	r0, [sp, #20]
 8012310:	b113      	cbz	r3, 8012318 <rmw_publish+0x34>
 8012312:	a805      	add	r0, sp, #20
 8012314:	4798      	blx	r3
 8012316:	9805      	ldr	r0, [sp, #20]
 8012318:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801231c:	691b      	ldr	r3, [r3, #16]
 801231e:	9000      	str	r0, [sp, #0]
 8012320:	6972      	ldr	r2, [r6, #20]
 8012322:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8012324:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8012328:	ab06      	add	r3, sp, #24
 801232a:	f7fd ff95 	bl	8010258 <uxr_prepare_output_stream>
 801232e:	b1d8      	cbz	r0, 8012368 <rmw_publish+0x84>
 8012330:	68a3      	ldr	r3, [r4, #8]
 8012332:	a906      	add	r1, sp, #24
 8012334:	4628      	mov	r0, r5
 8012336:	4798      	blx	r3
 8012338:	6a33      	ldr	r3, [r6, #32]
 801233a:	4604      	mov	r4, r0
 801233c:	b10b      	cbz	r3, 8012342 <rmw_publish+0x5e>
 801233e:	a806      	add	r0, sp, #24
 8012340:	4798      	blx	r3
 8012342:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8012346:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 801234a:	2b01      	cmp	r3, #1
 801234c:	6910      	ldr	r0, [r2, #16]
 801234e:	d021      	beq.n	8012394 <rmw_publish+0xb0>
 8012350:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8012352:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012356:	f7fc fd37 	bl	800edc8 <uxr_run_session_until_confirm_delivery>
 801235a:	4004      	ands	r4, r0
 801235c:	b2e4      	uxtb	r4, r4
 801235e:	f084 0001 	eor.w	r0, r4, #1
 8012362:	b2c0      	uxtb	r0, r0
 8012364:	b00e      	add	sp, #56	@ 0x38
 8012366:	bd70      	pop	{r4, r5, r6, pc}
 8012368:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801236c:	6918      	ldr	r0, [r3, #16]
 801236e:	4b0c      	ldr	r3, [pc, #48]	@ (80123a0 <rmw_publish+0xbc>)
 8012370:	9301      	str	r3, [sp, #4]
 8012372:	9b05      	ldr	r3, [sp, #20]
 8012374:	9300      	str	r3, [sp, #0]
 8012376:	9602      	str	r6, [sp, #8]
 8012378:	6972      	ldr	r2, [r6, #20]
 801237a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 801237c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012380:	ab06      	add	r3, sp, #24
 8012382:	f7fd ff99 	bl	80102b8 <uxr_prepare_output_stream_fragmented>
 8012386:	2800      	cmp	r0, #0
 8012388:	d1d2      	bne.n	8012330 <rmw_publish+0x4c>
 801238a:	2001      	movs	r0, #1
 801238c:	b00e      	add	sp, #56	@ 0x38
 801238e:	bd70      	pop	{r4, r5, r6, pc}
 8012390:	2001      	movs	r0, #1
 8012392:	4770      	bx	lr
 8012394:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012398:	f7fc f97e 	bl	800e698 <uxr_flash_output_streams>
 801239c:	e7df      	b.n	801235e <rmw_publish+0x7a>
 801239e:	bf00      	nop
 80123a0:	080122dd 	.word	0x080122dd

080123a4 <rmw_uros_epoch_nanos>:
 80123a4:	4b05      	ldr	r3, [pc, #20]	@ (80123bc <rmw_uros_epoch_nanos+0x18>)
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	b123      	cbz	r3, 80123b4 <rmw_uros_epoch_nanos+0x10>
 80123aa:	6898      	ldr	r0, [r3, #8]
 80123ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80123b0:	f7fc b968 	b.w	800e684 <uxr_epoch_nanos>
 80123b4:	2000      	movs	r0, #0
 80123b6:	2100      	movs	r1, #0
 80123b8:	4770      	bx	lr
 80123ba:	bf00      	nop
 80123bc:	2000db50 	.word	0x2000db50

080123c0 <ucdr_serialize_endian_array_char>:
 80123c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123c4:	4619      	mov	r1, r3
 80123c6:	461f      	mov	r7, r3
 80123c8:	4605      	mov	r5, r0
 80123ca:	4690      	mov	r8, r2
 80123cc:	f7f6 fd18 	bl	8008e00 <ucdr_check_buffer_available_for>
 80123d0:	b9e0      	cbnz	r0, 801240c <ucdr_serialize_endian_array_char+0x4c>
 80123d2:	463e      	mov	r6, r7
 80123d4:	e009      	b.n	80123ea <ucdr_serialize_endian_array_char+0x2a>
 80123d6:	68a8      	ldr	r0, [r5, #8]
 80123d8:	f001 fba7 	bl	8013b2a <memcpy>
 80123dc:	68ab      	ldr	r3, [r5, #8]
 80123de:	6928      	ldr	r0, [r5, #16]
 80123e0:	4423      	add	r3, r4
 80123e2:	4420      	add	r0, r4
 80123e4:	1b36      	subs	r6, r6, r4
 80123e6:	60ab      	str	r3, [r5, #8]
 80123e8:	6128      	str	r0, [r5, #16]
 80123ea:	2201      	movs	r2, #1
 80123ec:	4631      	mov	r1, r6
 80123ee:	4628      	mov	r0, r5
 80123f0:	f7f6 fd8e 	bl	8008f10 <ucdr_check_final_buffer_behavior_array>
 80123f4:	1bb9      	subs	r1, r7, r6
 80123f6:	4604      	mov	r4, r0
 80123f8:	4602      	mov	r2, r0
 80123fa:	4441      	add	r1, r8
 80123fc:	2800      	cmp	r0, #0
 80123fe:	d1ea      	bne.n	80123d6 <ucdr_serialize_endian_array_char+0x16>
 8012400:	2301      	movs	r3, #1
 8012402:	7da8      	ldrb	r0, [r5, #22]
 8012404:	756b      	strb	r3, [r5, #21]
 8012406:	4058      	eors	r0, r3
 8012408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801240c:	463a      	mov	r2, r7
 801240e:	68a8      	ldr	r0, [r5, #8]
 8012410:	4641      	mov	r1, r8
 8012412:	f001 fb8a 	bl	8013b2a <memcpy>
 8012416:	68aa      	ldr	r2, [r5, #8]
 8012418:	692b      	ldr	r3, [r5, #16]
 801241a:	443a      	add	r2, r7
 801241c:	443b      	add	r3, r7
 801241e:	60aa      	str	r2, [r5, #8]
 8012420:	612b      	str	r3, [r5, #16]
 8012422:	e7ed      	b.n	8012400 <ucdr_serialize_endian_array_char+0x40>

08012424 <ucdr_deserialize_endian_array_char>:
 8012424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012428:	4619      	mov	r1, r3
 801242a:	461f      	mov	r7, r3
 801242c:	4605      	mov	r5, r0
 801242e:	4690      	mov	r8, r2
 8012430:	f7f6 fce6 	bl	8008e00 <ucdr_check_buffer_available_for>
 8012434:	b9e0      	cbnz	r0, 8012470 <ucdr_deserialize_endian_array_char+0x4c>
 8012436:	463e      	mov	r6, r7
 8012438:	e009      	b.n	801244e <ucdr_deserialize_endian_array_char+0x2a>
 801243a:	68a9      	ldr	r1, [r5, #8]
 801243c:	f001 fb75 	bl	8013b2a <memcpy>
 8012440:	68aa      	ldr	r2, [r5, #8]
 8012442:	692b      	ldr	r3, [r5, #16]
 8012444:	4422      	add	r2, r4
 8012446:	4423      	add	r3, r4
 8012448:	1b36      	subs	r6, r6, r4
 801244a:	60aa      	str	r2, [r5, #8]
 801244c:	612b      	str	r3, [r5, #16]
 801244e:	2201      	movs	r2, #1
 8012450:	4631      	mov	r1, r6
 8012452:	4628      	mov	r0, r5
 8012454:	f7f6 fd5c 	bl	8008f10 <ucdr_check_final_buffer_behavior_array>
 8012458:	4604      	mov	r4, r0
 801245a:	1bb8      	subs	r0, r7, r6
 801245c:	4622      	mov	r2, r4
 801245e:	4440      	add	r0, r8
 8012460:	2c00      	cmp	r4, #0
 8012462:	d1ea      	bne.n	801243a <ucdr_deserialize_endian_array_char+0x16>
 8012464:	2301      	movs	r3, #1
 8012466:	7da8      	ldrb	r0, [r5, #22]
 8012468:	756b      	strb	r3, [r5, #21]
 801246a:	4058      	eors	r0, r3
 801246c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012470:	463a      	mov	r2, r7
 8012472:	68a9      	ldr	r1, [r5, #8]
 8012474:	4640      	mov	r0, r8
 8012476:	f001 fb58 	bl	8013b2a <memcpy>
 801247a:	68aa      	ldr	r2, [r5, #8]
 801247c:	692b      	ldr	r3, [r5, #16]
 801247e:	443a      	add	r2, r7
 8012480:	443b      	add	r3, r7
 8012482:	60aa      	str	r2, [r5, #8]
 8012484:	612b      	str	r3, [r5, #16]
 8012486:	e7ed      	b.n	8012464 <ucdr_deserialize_endian_array_char+0x40>

08012488 <ucdr_serialize_array_uint8_t>:
 8012488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801248c:	4688      	mov	r8, r1
 801248e:	4611      	mov	r1, r2
 8012490:	4617      	mov	r7, r2
 8012492:	4605      	mov	r5, r0
 8012494:	f7f6 fcb4 	bl	8008e00 <ucdr_check_buffer_available_for>
 8012498:	b9e0      	cbnz	r0, 80124d4 <ucdr_serialize_array_uint8_t+0x4c>
 801249a:	463e      	mov	r6, r7
 801249c:	e009      	b.n	80124b2 <ucdr_serialize_array_uint8_t+0x2a>
 801249e:	68a8      	ldr	r0, [r5, #8]
 80124a0:	f001 fb43 	bl	8013b2a <memcpy>
 80124a4:	68aa      	ldr	r2, [r5, #8]
 80124a6:	692b      	ldr	r3, [r5, #16]
 80124a8:	4422      	add	r2, r4
 80124aa:	4423      	add	r3, r4
 80124ac:	1b36      	subs	r6, r6, r4
 80124ae:	60aa      	str	r2, [r5, #8]
 80124b0:	612b      	str	r3, [r5, #16]
 80124b2:	2201      	movs	r2, #1
 80124b4:	4631      	mov	r1, r6
 80124b6:	4628      	mov	r0, r5
 80124b8:	f7f6 fd2a 	bl	8008f10 <ucdr_check_final_buffer_behavior_array>
 80124bc:	1bb9      	subs	r1, r7, r6
 80124be:	4604      	mov	r4, r0
 80124c0:	4602      	mov	r2, r0
 80124c2:	4441      	add	r1, r8
 80124c4:	2800      	cmp	r0, #0
 80124c6:	d1ea      	bne.n	801249e <ucdr_serialize_array_uint8_t+0x16>
 80124c8:	2301      	movs	r3, #1
 80124ca:	7da8      	ldrb	r0, [r5, #22]
 80124cc:	756b      	strb	r3, [r5, #21]
 80124ce:	4058      	eors	r0, r3
 80124d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124d4:	463a      	mov	r2, r7
 80124d6:	68a8      	ldr	r0, [r5, #8]
 80124d8:	4641      	mov	r1, r8
 80124da:	f001 fb26 	bl	8013b2a <memcpy>
 80124de:	68aa      	ldr	r2, [r5, #8]
 80124e0:	692b      	ldr	r3, [r5, #16]
 80124e2:	443a      	add	r2, r7
 80124e4:	443b      	add	r3, r7
 80124e6:	60aa      	str	r2, [r5, #8]
 80124e8:	612b      	str	r3, [r5, #16]
 80124ea:	e7ed      	b.n	80124c8 <ucdr_serialize_array_uint8_t+0x40>

080124ec <ucdr_serialize_endian_array_uint8_t>:
 80124ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124f0:	4619      	mov	r1, r3
 80124f2:	461f      	mov	r7, r3
 80124f4:	4605      	mov	r5, r0
 80124f6:	4690      	mov	r8, r2
 80124f8:	f7f6 fc82 	bl	8008e00 <ucdr_check_buffer_available_for>
 80124fc:	b9e0      	cbnz	r0, 8012538 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80124fe:	463e      	mov	r6, r7
 8012500:	e009      	b.n	8012516 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8012502:	68a8      	ldr	r0, [r5, #8]
 8012504:	f001 fb11 	bl	8013b2a <memcpy>
 8012508:	68ab      	ldr	r3, [r5, #8]
 801250a:	6928      	ldr	r0, [r5, #16]
 801250c:	4423      	add	r3, r4
 801250e:	4420      	add	r0, r4
 8012510:	1b36      	subs	r6, r6, r4
 8012512:	60ab      	str	r3, [r5, #8]
 8012514:	6128      	str	r0, [r5, #16]
 8012516:	2201      	movs	r2, #1
 8012518:	4631      	mov	r1, r6
 801251a:	4628      	mov	r0, r5
 801251c:	f7f6 fcf8 	bl	8008f10 <ucdr_check_final_buffer_behavior_array>
 8012520:	1bb9      	subs	r1, r7, r6
 8012522:	4604      	mov	r4, r0
 8012524:	4602      	mov	r2, r0
 8012526:	4441      	add	r1, r8
 8012528:	2800      	cmp	r0, #0
 801252a:	d1ea      	bne.n	8012502 <ucdr_serialize_endian_array_uint8_t+0x16>
 801252c:	2301      	movs	r3, #1
 801252e:	7da8      	ldrb	r0, [r5, #22]
 8012530:	756b      	strb	r3, [r5, #21]
 8012532:	4058      	eors	r0, r3
 8012534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012538:	463a      	mov	r2, r7
 801253a:	68a8      	ldr	r0, [r5, #8]
 801253c:	4641      	mov	r1, r8
 801253e:	f001 faf4 	bl	8013b2a <memcpy>
 8012542:	68aa      	ldr	r2, [r5, #8]
 8012544:	692b      	ldr	r3, [r5, #16]
 8012546:	443a      	add	r2, r7
 8012548:	443b      	add	r3, r7
 801254a:	60aa      	str	r2, [r5, #8]
 801254c:	612b      	str	r3, [r5, #16]
 801254e:	e7ed      	b.n	801252c <ucdr_serialize_endian_array_uint8_t+0x40>

08012550 <ucdr_deserialize_array_uint8_t>:
 8012550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012554:	4688      	mov	r8, r1
 8012556:	4611      	mov	r1, r2
 8012558:	4617      	mov	r7, r2
 801255a:	4605      	mov	r5, r0
 801255c:	f7f6 fc50 	bl	8008e00 <ucdr_check_buffer_available_for>
 8012560:	b9e0      	cbnz	r0, 801259c <ucdr_deserialize_array_uint8_t+0x4c>
 8012562:	463e      	mov	r6, r7
 8012564:	e009      	b.n	801257a <ucdr_deserialize_array_uint8_t+0x2a>
 8012566:	68a9      	ldr	r1, [r5, #8]
 8012568:	f001 fadf 	bl	8013b2a <memcpy>
 801256c:	68aa      	ldr	r2, [r5, #8]
 801256e:	692b      	ldr	r3, [r5, #16]
 8012570:	4422      	add	r2, r4
 8012572:	4423      	add	r3, r4
 8012574:	1b36      	subs	r6, r6, r4
 8012576:	60aa      	str	r2, [r5, #8]
 8012578:	612b      	str	r3, [r5, #16]
 801257a:	2201      	movs	r2, #1
 801257c:	4631      	mov	r1, r6
 801257e:	4628      	mov	r0, r5
 8012580:	f7f6 fcc6 	bl	8008f10 <ucdr_check_final_buffer_behavior_array>
 8012584:	4604      	mov	r4, r0
 8012586:	1bb8      	subs	r0, r7, r6
 8012588:	4622      	mov	r2, r4
 801258a:	4440      	add	r0, r8
 801258c:	2c00      	cmp	r4, #0
 801258e:	d1ea      	bne.n	8012566 <ucdr_deserialize_array_uint8_t+0x16>
 8012590:	2301      	movs	r3, #1
 8012592:	7da8      	ldrb	r0, [r5, #22]
 8012594:	756b      	strb	r3, [r5, #21]
 8012596:	4058      	eors	r0, r3
 8012598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801259c:	463a      	mov	r2, r7
 801259e:	68a9      	ldr	r1, [r5, #8]
 80125a0:	4640      	mov	r0, r8
 80125a2:	f001 fac2 	bl	8013b2a <memcpy>
 80125a6:	68aa      	ldr	r2, [r5, #8]
 80125a8:	692b      	ldr	r3, [r5, #16]
 80125aa:	443a      	add	r2, r7
 80125ac:	443b      	add	r3, r7
 80125ae:	60aa      	str	r2, [r5, #8]
 80125b0:	612b      	str	r3, [r5, #16]
 80125b2:	e7ed      	b.n	8012590 <ucdr_deserialize_array_uint8_t+0x40>

080125b4 <ucdr_deserialize_endian_array_uint8_t>:
 80125b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125b8:	4619      	mov	r1, r3
 80125ba:	461f      	mov	r7, r3
 80125bc:	4605      	mov	r5, r0
 80125be:	4690      	mov	r8, r2
 80125c0:	f7f6 fc1e 	bl	8008e00 <ucdr_check_buffer_available_for>
 80125c4:	b9e0      	cbnz	r0, 8012600 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80125c6:	463e      	mov	r6, r7
 80125c8:	e009      	b.n	80125de <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80125ca:	68a9      	ldr	r1, [r5, #8]
 80125cc:	f001 faad 	bl	8013b2a <memcpy>
 80125d0:	68aa      	ldr	r2, [r5, #8]
 80125d2:	692b      	ldr	r3, [r5, #16]
 80125d4:	4422      	add	r2, r4
 80125d6:	4423      	add	r3, r4
 80125d8:	1b36      	subs	r6, r6, r4
 80125da:	60aa      	str	r2, [r5, #8]
 80125dc:	612b      	str	r3, [r5, #16]
 80125de:	2201      	movs	r2, #1
 80125e0:	4631      	mov	r1, r6
 80125e2:	4628      	mov	r0, r5
 80125e4:	f7f6 fc94 	bl	8008f10 <ucdr_check_final_buffer_behavior_array>
 80125e8:	4604      	mov	r4, r0
 80125ea:	1bb8      	subs	r0, r7, r6
 80125ec:	4622      	mov	r2, r4
 80125ee:	4440      	add	r0, r8
 80125f0:	2c00      	cmp	r4, #0
 80125f2:	d1ea      	bne.n	80125ca <ucdr_deserialize_endian_array_uint8_t+0x16>
 80125f4:	2301      	movs	r3, #1
 80125f6:	7da8      	ldrb	r0, [r5, #22]
 80125f8:	756b      	strb	r3, [r5, #21]
 80125fa:	4058      	eors	r0, r3
 80125fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012600:	463a      	mov	r2, r7
 8012602:	68a9      	ldr	r1, [r5, #8]
 8012604:	4640      	mov	r0, r8
 8012606:	f001 fa90 	bl	8013b2a <memcpy>
 801260a:	68aa      	ldr	r2, [r5, #8]
 801260c:	692b      	ldr	r3, [r5, #16]
 801260e:	443a      	add	r2, r7
 8012610:	443b      	add	r3, r7
 8012612:	60aa      	str	r2, [r5, #8]
 8012614:	612b      	str	r3, [r5, #16]
 8012616:	e7ed      	b.n	80125f4 <ucdr_deserialize_endian_array_uint8_t+0x40>

08012618 <ucdr_serialize_sequence_char>:
 8012618:	b570      	push	{r4, r5, r6, lr}
 801261a:	460e      	mov	r6, r1
 801261c:	4615      	mov	r5, r2
 801261e:	7d01      	ldrb	r1, [r0, #20]
 8012620:	4604      	mov	r4, r0
 8012622:	f7f5 ff4d 	bl	80084c0 <ucdr_serialize_endian_uint32_t>
 8012626:	b90d      	cbnz	r5, 801262c <ucdr_serialize_sequence_char+0x14>
 8012628:	2001      	movs	r0, #1
 801262a:	bd70      	pop	{r4, r5, r6, pc}
 801262c:	7d21      	ldrb	r1, [r4, #20]
 801262e:	462b      	mov	r3, r5
 8012630:	4632      	mov	r2, r6
 8012632:	4620      	mov	r0, r4
 8012634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012638:	f7ff bec2 	b.w	80123c0 <ucdr_serialize_endian_array_char>

0801263c <ucdr_deserialize_sequence_char>:
 801263c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012640:	461d      	mov	r5, r3
 8012642:	4616      	mov	r6, r2
 8012644:	460f      	mov	r7, r1
 8012646:	461a      	mov	r2, r3
 8012648:	7d01      	ldrb	r1, [r0, #20]
 801264a:	4604      	mov	r4, r0
 801264c:	f7f6 f856 	bl	80086fc <ucdr_deserialize_endian_uint32_t>
 8012650:	682b      	ldr	r3, [r5, #0]
 8012652:	429e      	cmp	r6, r3
 8012654:	d208      	bcs.n	8012668 <ucdr_deserialize_sequence_char+0x2c>
 8012656:	2201      	movs	r2, #1
 8012658:	75a2      	strb	r2, [r4, #22]
 801265a:	7d21      	ldrb	r1, [r4, #20]
 801265c:	463a      	mov	r2, r7
 801265e:	4620      	mov	r0, r4
 8012660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012664:	f7ff bede 	b.w	8012424 <ucdr_deserialize_endian_array_char>
 8012668:	2b00      	cmp	r3, #0
 801266a:	d1f6      	bne.n	801265a <ucdr_deserialize_sequence_char+0x1e>
 801266c:	2001      	movs	r0, #1
 801266e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012672:	bf00      	nop

08012674 <ucdr_serialize_sequence_uint8_t>:
 8012674:	b570      	push	{r4, r5, r6, lr}
 8012676:	460e      	mov	r6, r1
 8012678:	4615      	mov	r5, r2
 801267a:	7d01      	ldrb	r1, [r0, #20]
 801267c:	4604      	mov	r4, r0
 801267e:	f7f5 ff1f 	bl	80084c0 <ucdr_serialize_endian_uint32_t>
 8012682:	b90d      	cbnz	r5, 8012688 <ucdr_serialize_sequence_uint8_t+0x14>
 8012684:	2001      	movs	r0, #1
 8012686:	bd70      	pop	{r4, r5, r6, pc}
 8012688:	7d21      	ldrb	r1, [r4, #20]
 801268a:	462b      	mov	r3, r5
 801268c:	4632      	mov	r2, r6
 801268e:	4620      	mov	r0, r4
 8012690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012694:	f7ff bf2a 	b.w	80124ec <ucdr_serialize_endian_array_uint8_t>

08012698 <ucdr_deserialize_sequence_uint8_t>:
 8012698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801269c:	461d      	mov	r5, r3
 801269e:	4616      	mov	r6, r2
 80126a0:	460f      	mov	r7, r1
 80126a2:	461a      	mov	r2, r3
 80126a4:	7d01      	ldrb	r1, [r0, #20]
 80126a6:	4604      	mov	r4, r0
 80126a8:	f7f6 f828 	bl	80086fc <ucdr_deserialize_endian_uint32_t>
 80126ac:	682b      	ldr	r3, [r5, #0]
 80126ae:	429e      	cmp	r6, r3
 80126b0:	d208      	bcs.n	80126c4 <ucdr_deserialize_sequence_uint8_t+0x2c>
 80126b2:	2201      	movs	r2, #1
 80126b4:	75a2      	strb	r2, [r4, #22]
 80126b6:	7d21      	ldrb	r1, [r4, #20]
 80126b8:	463a      	mov	r2, r7
 80126ba:	4620      	mov	r0, r4
 80126bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126c0:	f7ff bf78 	b.w	80125b4 <ucdr_deserialize_endian_array_uint8_t>
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d1f6      	bne.n	80126b6 <ucdr_deserialize_sequence_uint8_t+0x1e>
 80126c8:	2001      	movs	r0, #1
 80126ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126ce:	bf00      	nop

080126d0 <ucdr_serialize_string>:
 80126d0:	b538      	push	{r3, r4, r5, lr}
 80126d2:	4605      	mov	r5, r0
 80126d4:	4608      	mov	r0, r1
 80126d6:	460c      	mov	r4, r1
 80126d8:	f7ed fde2 	bl	80002a0 <strlen>
 80126dc:	4621      	mov	r1, r4
 80126de:	1c42      	adds	r2, r0, #1
 80126e0:	4628      	mov	r0, r5
 80126e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126e6:	f7ff bf97 	b.w	8012618 <ucdr_serialize_sequence_char>
 80126ea:	bf00      	nop

080126ec <ucdr_deserialize_string>:
 80126ec:	b500      	push	{lr}
 80126ee:	b083      	sub	sp, #12
 80126f0:	ab01      	add	r3, sp, #4
 80126f2:	f7ff ffa3 	bl	801263c <ucdr_deserialize_sequence_char>
 80126f6:	b003      	add	sp, #12
 80126f8:	f85d fb04 	ldr.w	pc, [sp], #4

080126fc <uxr_init_input_best_effort_stream>:
 80126fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012700:	8003      	strh	r3, [r0, #0]
 8012702:	4770      	bx	lr

08012704 <uxr_reset_input_best_effort_stream>:
 8012704:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012708:	8003      	strh	r3, [r0, #0]
 801270a:	4770      	bx	lr

0801270c <uxr_receive_best_effort_message>:
 801270c:	b538      	push	{r3, r4, r5, lr}
 801270e:	4604      	mov	r4, r0
 8012710:	8800      	ldrh	r0, [r0, #0]
 8012712:	460d      	mov	r5, r1
 8012714:	f000 fd28 	bl	8013168 <uxr_seq_num_cmp>
 8012718:	4603      	mov	r3, r0
 801271a:	2b00      	cmp	r3, #0
 801271c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8012720:	bfb8      	it	lt
 8012722:	8025      	strhlt	r5, [r4, #0]
 8012724:	bd38      	pop	{r3, r4, r5, pc}
 8012726:	bf00      	nop

08012728 <on_full_input_buffer>:
 8012728:	b570      	push	{r4, r5, r6, lr}
 801272a:	4605      	mov	r5, r0
 801272c:	460c      	mov	r4, r1
 801272e:	682b      	ldr	r3, [r5, #0]
 8012730:	6809      	ldr	r1, [r1, #0]
 8012732:	8920      	ldrh	r0, [r4, #8]
 8012734:	6862      	ldr	r2, [r4, #4]
 8012736:	fbb2 f2f0 	udiv	r2, r2, r0
 801273a:	1a5b      	subs	r3, r3, r1
 801273c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012740:	3301      	adds	r3, #1
 8012742:	b29b      	uxth	r3, r3
 8012744:	fbb3 f6f0 	udiv	r6, r3, r0
 8012748:	fb00 3316 	mls	r3, r0, r6, r3
 801274c:	b29b      	uxth	r3, r3
 801274e:	fb02 f303 	mul.w	r3, r2, r3
 8012752:	1d18      	adds	r0, r3, #4
 8012754:	4408      	add	r0, r1
 8012756:	7d26      	ldrb	r6, [r4, #20]
 8012758:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801275c:	b116      	cbz	r6, 8012764 <on_full_input_buffer+0x3c>
 801275e:	2600      	movs	r6, #0
 8012760:	f840 6c04 	str.w	r6, [r0, #-4]
 8012764:	2a03      	cmp	r2, #3
 8012766:	d801      	bhi.n	801276c <on_full_input_buffer+0x44>
 8012768:	2001      	movs	r0, #1
 801276a:	bd70      	pop	{r4, r5, r6, pc}
 801276c:	3308      	adds	r3, #8
 801276e:	4419      	add	r1, r3
 8012770:	4628      	mov	r0, r5
 8012772:	692b      	ldr	r3, [r5, #16]
 8012774:	3a04      	subs	r2, #4
 8012776:	f7f6 fb8f 	bl	8008e98 <ucdr_init_buffer_origin>
 801277a:	4628      	mov	r0, r5
 801277c:	4902      	ldr	r1, [pc, #8]	@ (8012788 <on_full_input_buffer+0x60>)
 801277e:	4622      	mov	r2, r4
 8012780:	f7f6 fb66 	bl	8008e50 <ucdr_set_on_full_buffer_callback>
 8012784:	2000      	movs	r0, #0
 8012786:	bd70      	pop	{r4, r5, r6, pc}
 8012788:	08012729 	.word	0x08012729

0801278c <uxr_init_input_reliable_stream>:
 801278c:	b500      	push	{lr}
 801278e:	e9c0 1200 	strd	r1, r2, [r0]
 8012792:	f04f 0e00 	mov.w	lr, #0
 8012796:	9a01      	ldr	r2, [sp, #4]
 8012798:	8103      	strh	r3, [r0, #8]
 801279a:	6102      	str	r2, [r0, #16]
 801279c:	f880 e014 	strb.w	lr, [r0, #20]
 80127a0:	b1d3      	cbz	r3, 80127d8 <uxr_init_input_reliable_stream+0x4c>
 80127a2:	f8c1 e000 	str.w	lr, [r1]
 80127a6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80127aa:	f1bc 0f01 	cmp.w	ip, #1
 80127ae:	d913      	bls.n	80127d8 <uxr_init_input_reliable_stream+0x4c>
 80127b0:	2301      	movs	r3, #1
 80127b2:	fbb3 f1fc 	udiv	r1, r3, ip
 80127b6:	fb0c 3111 	mls	r1, ip, r1, r3
 80127ba:	b289      	uxth	r1, r1
 80127bc:	6842      	ldr	r2, [r0, #4]
 80127be:	fbb2 f2fc 	udiv	r2, r2, ip
 80127c2:	fb01 f202 	mul.w	r2, r1, r2
 80127c6:	6801      	ldr	r1, [r0, #0]
 80127c8:	f841 e002 	str.w	lr, [r1, r2]
 80127cc:	3301      	adds	r3, #1
 80127ce:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80127d2:	b29b      	uxth	r3, r3
 80127d4:	459c      	cmp	ip, r3
 80127d6:	d8ec      	bhi.n	80127b2 <uxr_init_input_reliable_stream+0x26>
 80127d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80127dc:	60c3      	str	r3, [r0, #12]
 80127de:	f85d fb04 	ldr.w	pc, [sp], #4
 80127e2:	bf00      	nop

080127e4 <uxr_reset_input_reliable_stream>:
 80127e4:	8901      	ldrh	r1, [r0, #8]
 80127e6:	b1e9      	cbz	r1, 8012824 <uxr_reset_input_reliable_stream+0x40>
 80127e8:	f04f 0c00 	mov.w	ip, #0
 80127ec:	b500      	push	{lr}
 80127ee:	4663      	mov	r3, ip
 80127f0:	46e6      	mov	lr, ip
 80127f2:	fbb3 f2f1 	udiv	r2, r3, r1
 80127f6:	fb01 3312 	mls	r3, r1, r2, r3
 80127fa:	b29b      	uxth	r3, r3
 80127fc:	6842      	ldr	r2, [r0, #4]
 80127fe:	fbb2 f2f1 	udiv	r2, r2, r1
 8012802:	fb03 f202 	mul.w	r2, r3, r2
 8012806:	6803      	ldr	r3, [r0, #0]
 8012808:	f843 e002 	str.w	lr, [r3, r2]
 801280c:	f10c 0c01 	add.w	ip, ip, #1
 8012810:	8901      	ldrh	r1, [r0, #8]
 8012812:	fa1f f38c 	uxth.w	r3, ip
 8012816:	4299      	cmp	r1, r3
 8012818:	d8eb      	bhi.n	80127f2 <uxr_reset_input_reliable_stream+0xe>
 801281a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801281e:	60c3      	str	r3, [r0, #12]
 8012820:	f85d fb04 	ldr.w	pc, [sp], #4
 8012824:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012828:	60c3      	str	r3, [r0, #12]
 801282a:	4770      	bx	lr

0801282c <uxr_receive_reliable_message>:
 801282c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012830:	4604      	mov	r4, r0
 8012832:	460d      	mov	r5, r1
 8012834:	8901      	ldrh	r1, [r0, #8]
 8012836:	8980      	ldrh	r0, [r0, #12]
 8012838:	4690      	mov	r8, r2
 801283a:	461f      	mov	r7, r3
 801283c:	f000 fc8c 	bl	8013158 <uxr_seq_num_add>
 8012840:	4629      	mov	r1, r5
 8012842:	4606      	mov	r6, r0
 8012844:	89a0      	ldrh	r0, [r4, #12]
 8012846:	f000 fc8f 	bl	8013168 <uxr_seq_num_cmp>
 801284a:	2800      	cmp	r0, #0
 801284c:	db0a      	blt.n	8012864 <uxr_receive_reliable_message+0x38>
 801284e:	2600      	movs	r6, #0
 8012850:	89e0      	ldrh	r0, [r4, #14]
 8012852:	4629      	mov	r1, r5
 8012854:	f000 fc88 	bl	8013168 <uxr_seq_num_cmp>
 8012858:	2800      	cmp	r0, #0
 801285a:	bfb8      	it	lt
 801285c:	81e5      	strhlt	r5, [r4, #14]
 801285e:	4630      	mov	r0, r6
 8012860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012864:	4630      	mov	r0, r6
 8012866:	4629      	mov	r1, r5
 8012868:	f000 fc7e 	bl	8013168 <uxr_seq_num_cmp>
 801286c:	2800      	cmp	r0, #0
 801286e:	dbee      	blt.n	801284e <uxr_receive_reliable_message+0x22>
 8012870:	6923      	ldr	r3, [r4, #16]
 8012872:	4640      	mov	r0, r8
 8012874:	4798      	blx	r3
 8012876:	2101      	movs	r1, #1
 8012878:	4606      	mov	r6, r0
 801287a:	89a0      	ldrh	r0, [r4, #12]
 801287c:	f000 fc6c 	bl	8013158 <uxr_seq_num_add>
 8012880:	b90e      	cbnz	r6, 8012886 <uxr_receive_reliable_message+0x5a>
 8012882:	4285      	cmp	r5, r0
 8012884:	d046      	beq.n	8012914 <uxr_receive_reliable_message+0xe8>
 8012886:	8921      	ldrh	r1, [r4, #8]
 8012888:	fbb5 f2f1 	udiv	r2, r5, r1
 801288c:	fb01 5212 	mls	r2, r1, r2, r5
 8012890:	b292      	uxth	r2, r2
 8012892:	6863      	ldr	r3, [r4, #4]
 8012894:	6820      	ldr	r0, [r4, #0]
 8012896:	fbb3 f3f1 	udiv	r3, r3, r1
 801289a:	fb02 f303 	mul.w	r3, r2, r3
 801289e:	3304      	adds	r3, #4
 80128a0:	4418      	add	r0, r3
 80128a2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d1d1      	bne.n	801284e <uxr_receive_reliable_message+0x22>
 80128aa:	4641      	mov	r1, r8
 80128ac:	463a      	mov	r2, r7
 80128ae:	f001 f93c 	bl	8013b2a <memcpy>
 80128b2:	8921      	ldrh	r1, [r4, #8]
 80128b4:	fbb5 f2f1 	udiv	r2, r5, r1
 80128b8:	fb01 5212 	mls	r2, r1, r2, r5
 80128bc:	b292      	uxth	r2, r2
 80128be:	6863      	ldr	r3, [r4, #4]
 80128c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80128c4:	fb02 f303 	mul.w	r3, r2, r3
 80128c8:	6822      	ldr	r2, [r4, #0]
 80128ca:	50d7      	str	r7, [r2, r3]
 80128cc:	9a06      	ldr	r2, [sp, #24]
 80128ce:	2301      	movs	r3, #1
 80128d0:	7013      	strb	r3, [r2, #0]
 80128d2:	2e00      	cmp	r6, #0
 80128d4:	d0bb      	beq.n	801284e <uxr_receive_reliable_message+0x22>
 80128d6:	89a6      	ldrh	r6, [r4, #12]
 80128d8:	2101      	movs	r1, #1
 80128da:	4630      	mov	r0, r6
 80128dc:	f000 fc3c 	bl	8013158 <uxr_seq_num_add>
 80128e0:	8921      	ldrh	r1, [r4, #8]
 80128e2:	fbb0 f2f1 	udiv	r2, r0, r1
 80128e6:	fb01 0212 	mls	r2, r1, r2, r0
 80128ea:	b292      	uxth	r2, r2
 80128ec:	6863      	ldr	r3, [r4, #4]
 80128ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80128f2:	4606      	mov	r6, r0
 80128f4:	fb02 f303 	mul.w	r3, r2, r3
 80128f8:	6820      	ldr	r0, [r4, #0]
 80128fa:	3304      	adds	r3, #4
 80128fc:	4418      	add	r0, r3
 80128fe:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d0a3      	beq.n	801284e <uxr_receive_reliable_message+0x22>
 8012906:	6923      	ldr	r3, [r4, #16]
 8012908:	4798      	blx	r3
 801290a:	2802      	cmp	r0, #2
 801290c:	d005      	beq.n	801291a <uxr_receive_reliable_message+0xee>
 801290e:	2801      	cmp	r0, #1
 8012910:	d0e2      	beq.n	80128d8 <uxr_receive_reliable_message+0xac>
 8012912:	e79c      	b.n	801284e <uxr_receive_reliable_message+0x22>
 8012914:	9b06      	ldr	r3, [sp, #24]
 8012916:	81a5      	strh	r5, [r4, #12]
 8012918:	701e      	strb	r6, [r3, #0]
 801291a:	2601      	movs	r6, #1
 801291c:	e798      	b.n	8012850 <uxr_receive_reliable_message+0x24>
 801291e:	bf00      	nop

08012920 <uxr_next_input_reliable_buffer_available>:
 8012920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012924:	4604      	mov	r4, r0
 8012926:	460f      	mov	r7, r1
 8012928:	8980      	ldrh	r0, [r0, #12]
 801292a:	2101      	movs	r1, #1
 801292c:	4690      	mov	r8, r2
 801292e:	f000 fc13 	bl	8013158 <uxr_seq_num_add>
 8012932:	8921      	ldrh	r1, [r4, #8]
 8012934:	fbb0 f2f1 	udiv	r2, r0, r1
 8012938:	fb01 0212 	mls	r2, r1, r2, r0
 801293c:	b292      	uxth	r2, r2
 801293e:	6863      	ldr	r3, [r4, #4]
 8012940:	6826      	ldr	r6, [r4, #0]
 8012942:	fbb3 f3f1 	udiv	r3, r3, r1
 8012946:	fb02 f303 	mul.w	r3, r2, r3
 801294a:	3304      	adds	r3, #4
 801294c:	441e      	add	r6, r3
 801294e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8012952:	f1b9 0f00 	cmp.w	r9, #0
 8012956:	d023      	beq.n	80129a0 <uxr_next_input_reliable_buffer_available+0x80>
 8012958:	6923      	ldr	r3, [r4, #16]
 801295a:	4605      	mov	r5, r0
 801295c:	4630      	mov	r0, r6
 801295e:	4798      	blx	r3
 8012960:	4682      	mov	sl, r0
 8012962:	b300      	cbz	r0, 80129a6 <uxr_next_input_reliable_buffer_available+0x86>
 8012964:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8012968:	2101      	movs	r1, #1
 801296a:	4650      	mov	r0, sl
 801296c:	f000 fbf4 	bl	8013158 <uxr_seq_num_add>
 8012970:	8921      	ldrh	r1, [r4, #8]
 8012972:	fbb0 f2f1 	udiv	r2, r0, r1
 8012976:	4682      	mov	sl, r0
 8012978:	fb01 0212 	mls	r2, r1, r2, r0
 801297c:	e9d4 0300 	ldrd	r0, r3, [r4]
 8012980:	b292      	uxth	r2, r2
 8012982:	fbb3 f3f1 	udiv	r3, r3, r1
 8012986:	fb02 f303 	mul.w	r3, r2, r3
 801298a:	3304      	adds	r3, #4
 801298c:	4418      	add	r0, r3
 801298e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012992:	b12b      	cbz	r3, 80129a0 <uxr_next_input_reliable_buffer_available+0x80>
 8012994:	6923      	ldr	r3, [r4, #16]
 8012996:	4798      	blx	r3
 8012998:	2802      	cmp	r0, #2
 801299a:	d01b      	beq.n	80129d4 <uxr_next_input_reliable_buffer_available+0xb4>
 801299c:	2801      	cmp	r0, #1
 801299e:	d0e3      	beq.n	8012968 <uxr_next_input_reliable_buffer_available+0x48>
 80129a0:	2000      	movs	r0, #0
 80129a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129a6:	464a      	mov	r2, r9
 80129a8:	4631      	mov	r1, r6
 80129aa:	4638      	mov	r0, r7
 80129ac:	f7f6 fa7c 	bl	8008ea8 <ucdr_init_buffer>
 80129b0:	8921      	ldrh	r1, [r4, #8]
 80129b2:	fbb5 f2f1 	udiv	r2, r5, r1
 80129b6:	fb01 5212 	mls	r2, r1, r2, r5
 80129ba:	b292      	uxth	r2, r2
 80129bc:	6863      	ldr	r3, [r4, #4]
 80129be:	fbb3 f3f1 	udiv	r3, r3, r1
 80129c2:	fb02 f303 	mul.w	r3, r2, r3
 80129c6:	6822      	ldr	r2, [r4, #0]
 80129c8:	f842 a003 	str.w	sl, [r2, r3]
 80129cc:	81a5      	strh	r5, [r4, #12]
 80129ce:	2001      	movs	r0, #1
 80129d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129d4:	eb06 0108 	add.w	r1, r6, r8
 80129d8:	8926      	ldrh	r6, [r4, #8]
 80129da:	fbb5 f0f6 	udiv	r0, r5, r6
 80129de:	fb06 5010 	mls	r0, r6, r0, r5
 80129e2:	b280      	uxth	r0, r0
 80129e4:	6863      	ldr	r3, [r4, #4]
 80129e6:	fbb3 f3f6 	udiv	r3, r3, r6
 80129ea:	fb00 f303 	mul.w	r3, r0, r3
 80129ee:	6820      	ldr	r0, [r4, #0]
 80129f0:	2500      	movs	r5, #0
 80129f2:	50c5      	str	r5, [r0, r3]
 80129f4:	eba9 0208 	sub.w	r2, r9, r8
 80129f8:	4638      	mov	r0, r7
 80129fa:	f7f6 fa55 	bl	8008ea8 <ucdr_init_buffer>
 80129fe:	4903      	ldr	r1, [pc, #12]	@ (8012a0c <uxr_next_input_reliable_buffer_available+0xec>)
 8012a00:	4622      	mov	r2, r4
 8012a02:	4638      	mov	r0, r7
 8012a04:	f7f6 fa24 	bl	8008e50 <ucdr_set_on_full_buffer_callback>
 8012a08:	4655      	mov	r5, sl
 8012a0a:	e7df      	b.n	80129cc <uxr_next_input_reliable_buffer_available+0xac>
 8012a0c:	08012729 	.word	0x08012729

08012a10 <uxr_process_heartbeat>:
 8012a10:	b538      	push	{r3, r4, r5, lr}
 8012a12:	4611      	mov	r1, r2
 8012a14:	4604      	mov	r4, r0
 8012a16:	89c0      	ldrh	r0, [r0, #14]
 8012a18:	4615      	mov	r5, r2
 8012a1a:	f000 fba5 	bl	8013168 <uxr_seq_num_cmp>
 8012a1e:	2800      	cmp	r0, #0
 8012a20:	bfb8      	it	lt
 8012a22:	81e5      	strhlt	r5, [r4, #14]
 8012a24:	bd38      	pop	{r3, r4, r5, pc}
 8012a26:	bf00      	nop

08012a28 <uxr_compute_acknack>:
 8012a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a2c:	8903      	ldrh	r3, [r0, #8]
 8012a2e:	8985      	ldrh	r5, [r0, #12]
 8012a30:	4604      	mov	r4, r0
 8012a32:	460e      	mov	r6, r1
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d048      	beq.n	8012aca <uxr_compute_acknack+0xa2>
 8012a38:	4628      	mov	r0, r5
 8012a3a:	2701      	movs	r7, #1
 8012a3c:	e003      	b.n	8012a46 <uxr_compute_acknack+0x1e>
 8012a3e:	4567      	cmp	r7, ip
 8012a40:	d243      	bcs.n	8012aca <uxr_compute_acknack+0xa2>
 8012a42:	89a0      	ldrh	r0, [r4, #12]
 8012a44:	3701      	adds	r7, #1
 8012a46:	b2b9      	uxth	r1, r7
 8012a48:	f000 fb86 	bl	8013158 <uxr_seq_num_add>
 8012a4c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8012a50:	fbb0 f2fc 	udiv	r2, r0, ip
 8012a54:	e9d4 1300 	ldrd	r1, r3, [r4]
 8012a58:	fb0c 0212 	mls	r2, ip, r2, r0
 8012a5c:	b292      	uxth	r2, r2
 8012a5e:	fbb3 f3fc 	udiv	r3, r3, ip
 8012a62:	fb02 f303 	mul.w	r3, r2, r3
 8012a66:	58cb      	ldr	r3, [r1, r3]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d1e8      	bne.n	8012a3e <uxr_compute_acknack+0x16>
 8012a6c:	8030      	strh	r0, [r6, #0]
 8012a6e:	2101      	movs	r1, #1
 8012a70:	89e5      	ldrh	r5, [r4, #14]
 8012a72:	f000 fb75 	bl	8013160 <uxr_seq_num_sub>
 8012a76:	4601      	mov	r1, r0
 8012a78:	4628      	mov	r0, r5
 8012a7a:	f000 fb71 	bl	8013160 <uxr_seq_num_sub>
 8012a7e:	4605      	mov	r5, r0
 8012a80:	4607      	mov	r7, r0
 8012a82:	b1f8      	cbz	r0, 8012ac4 <uxr_compute_acknack+0x9c>
 8012a84:	f04f 0900 	mov.w	r9, #0
 8012a88:	464d      	mov	r5, r9
 8012a8a:	f04f 0801 	mov.w	r8, #1
 8012a8e:	fa1f f189 	uxth.w	r1, r9
 8012a92:	8830      	ldrh	r0, [r6, #0]
 8012a94:	f000 fb60 	bl	8013158 <uxr_seq_num_add>
 8012a98:	8921      	ldrh	r1, [r4, #8]
 8012a9a:	fbb0 f3f1 	udiv	r3, r0, r1
 8012a9e:	fb03 0011 	mls	r0, r3, r1, r0
 8012aa2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012aa6:	b280      	uxth	r0, r0
 8012aa8:	fbb3 f3f1 	udiv	r3, r3, r1
 8012aac:	fb00 f303 	mul.w	r3, r0, r3
 8012ab0:	fa08 f109 	lsl.w	r1, r8, r9
 8012ab4:	58d3      	ldr	r3, [r2, r3]
 8012ab6:	f109 0901 	add.w	r9, r9, #1
 8012aba:	b90b      	cbnz	r3, 8012ac0 <uxr_compute_acknack+0x98>
 8012abc:	4329      	orrs	r1, r5
 8012abe:	b28d      	uxth	r5, r1
 8012ac0:	454f      	cmp	r7, r9
 8012ac2:	d1e4      	bne.n	8012a8e <uxr_compute_acknack+0x66>
 8012ac4:	4628      	mov	r0, r5
 8012ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012aca:	4628      	mov	r0, r5
 8012acc:	e7ce      	b.n	8012a6c <uxr_compute_acknack+0x44>
 8012ace:	bf00      	nop

08012ad0 <uxr_init_output_best_effort_stream>:
 8012ad0:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8012ad4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8012ad8:	6001      	str	r1, [r0, #0]
 8012ada:	7303      	strb	r3, [r0, #12]
 8012adc:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8012ae0:	4770      	bx	lr
 8012ae2:	bf00      	nop

08012ae4 <uxr_reset_output_best_effort_stream>:
 8012ae4:	7b02      	ldrb	r2, [r0, #12]
 8012ae6:	6042      	str	r2, [r0, #4]
 8012ae8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012aec:	81c3      	strh	r3, [r0, #14]
 8012aee:	4770      	bx	lr

08012af0 <uxr_prepare_best_effort_buffer_to_write>:
 8012af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012af2:	4604      	mov	r4, r0
 8012af4:	b083      	sub	sp, #12
 8012af6:	6840      	ldr	r0, [r0, #4]
 8012af8:	460d      	mov	r5, r1
 8012afa:	4616      	mov	r6, r2
 8012afc:	f7fd faea 	bl	80100d4 <uxr_submessage_padding>
 8012b00:	6863      	ldr	r3, [r4, #4]
 8012b02:	4418      	add	r0, r3
 8012b04:	68a3      	ldr	r3, [r4, #8]
 8012b06:	1942      	adds	r2, r0, r5
 8012b08:	4293      	cmp	r3, r2
 8012b0a:	bf2c      	ite	cs
 8012b0c:	2701      	movcs	r7, #1
 8012b0e:	2700      	movcc	r7, #0
 8012b10:	d202      	bcs.n	8012b18 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8012b12:	4638      	mov	r0, r7
 8012b14:	b003      	add	sp, #12
 8012b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b18:	9000      	str	r0, [sp, #0]
 8012b1a:	6821      	ldr	r1, [r4, #0]
 8012b1c:	4630      	mov	r0, r6
 8012b1e:	2300      	movs	r3, #0
 8012b20:	f7f6 f9b0 	bl	8008e84 <ucdr_init_buffer_origin_offset>
 8012b24:	6863      	ldr	r3, [r4, #4]
 8012b26:	4638      	mov	r0, r7
 8012b28:	442b      	add	r3, r5
 8012b2a:	6063      	str	r3, [r4, #4]
 8012b2c:	b003      	add	sp, #12
 8012b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012b30 <uxr_prepare_best_effort_buffer_to_send>:
 8012b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b34:	4604      	mov	r4, r0
 8012b36:	461d      	mov	r5, r3
 8012b38:	6840      	ldr	r0, [r0, #4]
 8012b3a:	7b23      	ldrb	r3, [r4, #12]
 8012b3c:	4298      	cmp	r0, r3
 8012b3e:	bf8c      	ite	hi
 8012b40:	2601      	movhi	r6, #1
 8012b42:	2600      	movls	r6, #0
 8012b44:	d802      	bhi.n	8012b4c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8012b46:	4630      	mov	r0, r6
 8012b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b4c:	4688      	mov	r8, r1
 8012b4e:	89e0      	ldrh	r0, [r4, #14]
 8012b50:	2101      	movs	r1, #1
 8012b52:	4617      	mov	r7, r2
 8012b54:	f000 fb00 	bl	8013158 <uxr_seq_num_add>
 8012b58:	6823      	ldr	r3, [r4, #0]
 8012b5a:	81e0      	strh	r0, [r4, #14]
 8012b5c:	8028      	strh	r0, [r5, #0]
 8012b5e:	f8c8 3000 	str.w	r3, [r8]
 8012b62:	6863      	ldr	r3, [r4, #4]
 8012b64:	603b      	str	r3, [r7, #0]
 8012b66:	7b23      	ldrb	r3, [r4, #12]
 8012b68:	6063      	str	r3, [r4, #4]
 8012b6a:	4630      	mov	r0, r6
 8012b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012b70 <on_full_output_buffer>:
 8012b70:	b538      	push	{r3, r4, r5, lr}
 8012b72:	460c      	mov	r4, r1
 8012b74:	6803      	ldr	r3, [r0, #0]
 8012b76:	6809      	ldr	r1, [r1, #0]
 8012b78:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8012b7c:	6862      	ldr	r2, [r4, #4]
 8012b7e:	fbb2 f2fc 	udiv	r2, r2, ip
 8012b82:	1a5b      	subs	r3, r3, r1
 8012b84:	fbb3 f3f2 	udiv	r3, r3, r2
 8012b88:	3301      	adds	r3, #1
 8012b8a:	b29b      	uxth	r3, r3
 8012b8c:	fbb3 fefc 	udiv	lr, r3, ip
 8012b90:	fb0c 331e 	mls	r3, ip, lr, r3
 8012b94:	b29b      	uxth	r3, r3
 8012b96:	fb02 f303 	mul.w	r3, r2, r3
 8012b9a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8012b9e:	58ca      	ldr	r2, [r1, r3]
 8012ba0:	4463      	add	r3, ip
 8012ba2:	eba2 020c 	sub.w	r2, r2, ip
 8012ba6:	3308      	adds	r3, #8
 8012ba8:	4605      	mov	r5, r0
 8012baa:	4419      	add	r1, r3
 8012bac:	3a04      	subs	r2, #4
 8012bae:	6903      	ldr	r3, [r0, #16]
 8012bb0:	f7f6 f972 	bl	8008e98 <ucdr_init_buffer_origin>
 8012bb4:	4628      	mov	r0, r5
 8012bb6:	4903      	ldr	r1, [pc, #12]	@ (8012bc4 <on_full_output_buffer+0x54>)
 8012bb8:	4622      	mov	r2, r4
 8012bba:	f7f6 f949 	bl	8008e50 <ucdr_set_on_full_buffer_callback>
 8012bbe:	2000      	movs	r0, #0
 8012bc0:	bd38      	pop	{r3, r4, r5, pc}
 8012bc2:	bf00      	nop
 8012bc4:	08012b71 	.word	0x08012b71

08012bc8 <uxr_init_output_reliable_stream>:
 8012bc8:	b410      	push	{r4}
 8012bca:	f89d c004 	ldrb.w	ip, [sp, #4]
 8012bce:	8103      	strh	r3, [r0, #8]
 8012bd0:	e9c0 1200 	strd	r1, r2, [r0]
 8012bd4:	f880 c00c 	strb.w	ip, [r0, #12]
 8012bd8:	b1d3      	cbz	r3, 8012c10 <uxr_init_output_reliable_stream+0x48>
 8012bda:	f8c1 c000 	str.w	ip, [r1]
 8012bde:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8012be2:	f1bc 0f01 	cmp.w	ip, #1
 8012be6:	d913      	bls.n	8012c10 <uxr_init_output_reliable_stream+0x48>
 8012be8:	2301      	movs	r3, #1
 8012bea:	fbb3 f1fc 	udiv	r1, r3, ip
 8012bee:	fb0c 3111 	mls	r1, ip, r1, r3
 8012bf2:	b289      	uxth	r1, r1
 8012bf4:	6842      	ldr	r2, [r0, #4]
 8012bf6:	6804      	ldr	r4, [r0, #0]
 8012bf8:	fbb2 f2fc 	udiv	r2, r2, ip
 8012bfc:	fb01 f202 	mul.w	r2, r1, r2
 8012c00:	7b01      	ldrb	r1, [r0, #12]
 8012c02:	50a1      	str	r1, [r4, r2]
 8012c04:	3301      	adds	r3, #1
 8012c06:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8012c0a:	b29b      	uxth	r3, r3
 8012c0c:	459c      	cmp	ip, r3
 8012c0e:	d8ec      	bhi.n	8012bea <uxr_init_output_reliable_stream+0x22>
 8012c10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012c14:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012c18:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8012c1c:	4905      	ldr	r1, [pc, #20]	@ (8012c34 <uxr_init_output_reliable_stream+0x6c>)
 8012c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c22:	f8c0 100e 	str.w	r1, [r0, #14]
 8012c26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	8242      	strh	r2, [r0, #18]
 8012c2e:	8403      	strh	r3, [r0, #32]
 8012c30:	4770      	bx	lr
 8012c32:	bf00      	nop
 8012c34:	ffff0000 	.word	0xffff0000

08012c38 <uxr_reset_output_reliable_stream>:
 8012c38:	8901      	ldrh	r1, [r0, #8]
 8012c3a:	b1b1      	cbz	r1, 8012c6a <uxr_reset_output_reliable_stream+0x32>
 8012c3c:	f04f 0c00 	mov.w	ip, #0
 8012c40:	4663      	mov	r3, ip
 8012c42:	fbb3 f2f1 	udiv	r2, r3, r1
 8012c46:	fb01 3312 	mls	r3, r1, r2, r3
 8012c4a:	b29b      	uxth	r3, r3
 8012c4c:	6842      	ldr	r2, [r0, #4]
 8012c4e:	fbb2 f2f1 	udiv	r2, r2, r1
 8012c52:	6801      	ldr	r1, [r0, #0]
 8012c54:	fb03 f202 	mul.w	r2, r3, r2
 8012c58:	7b03      	ldrb	r3, [r0, #12]
 8012c5a:	508b      	str	r3, [r1, r2]
 8012c5c:	f10c 0c01 	add.w	ip, ip, #1
 8012c60:	8901      	ldrh	r1, [r0, #8]
 8012c62:	fa1f f38c 	uxth.w	r3, ip
 8012c66:	4299      	cmp	r1, r3
 8012c68:	d8eb      	bhi.n	8012c42 <uxr_reset_output_reliable_stream+0xa>
 8012c6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012c6e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012c72:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8012c76:	4904      	ldr	r1, [pc, #16]	@ (8012c88 <uxr_reset_output_reliable_stream+0x50>)
 8012c78:	f8c0 100e 	str.w	r1, [r0, #14]
 8012c7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012c80:	2300      	movs	r3, #0
 8012c82:	8242      	strh	r2, [r0, #18]
 8012c84:	8403      	strh	r3, [r0, #32]
 8012c86:	4770      	bx	lr
 8012c88:	ffff0000 	.word	0xffff0000

08012c8c <uxr_prepare_reliable_buffer_to_write>:
 8012c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c90:	4604      	mov	r4, r0
 8012c92:	b091      	sub	sp, #68	@ 0x44
 8012c94:	8900      	ldrh	r0, [r0, #8]
 8012c96:	89e7      	ldrh	r7, [r4, #14]
 8012c98:	6823      	ldr	r3, [r4, #0]
 8012c9a:	9204      	str	r2, [sp, #16]
 8012c9c:	fbb7 f2f0 	udiv	r2, r7, r0
 8012ca0:	fb00 7212 	mls	r2, r0, r2, r7
 8012ca4:	b292      	uxth	r2, r2
 8012ca6:	6865      	ldr	r5, [r4, #4]
 8012ca8:	fbb5 f5f0 	udiv	r5, r5, r0
 8012cac:	fb05 3202 	mla	r2, r5, r2, r3
 8012cb0:	3204      	adds	r2, #4
 8012cb2:	f852 ac04 	ldr.w	sl, [r2, #-4]
 8012cb6:	f894 b00c 	ldrb.w	fp, [r4, #12]
 8012cba:	9203      	str	r2, [sp, #12]
 8012cbc:	4688      	mov	r8, r1
 8012cbe:	f1a5 0904 	sub.w	r9, r5, #4
 8012cc2:	2800      	cmp	r0, #0
 8012cc4:	f000 8143 	beq.w	8012f4e <uxr_prepare_reliable_buffer_to_write+0x2c2>
 8012cc8:	2100      	movs	r1, #0
 8012cca:	460e      	mov	r6, r1
 8012ccc:	b28a      	uxth	r2, r1
 8012cce:	fbb2 fcf0 	udiv	ip, r2, r0
 8012cd2:	fb00 221c 	mls	r2, r0, ip, r2
 8012cd6:	b292      	uxth	r2, r2
 8012cd8:	fb05 f202 	mul.w	r2, r5, r2
 8012cdc:	3101      	adds	r1, #1
 8012cde:	589a      	ldr	r2, [r3, r2]
 8012ce0:	455a      	cmp	r2, fp
 8012ce2:	bf04      	itt	eq
 8012ce4:	3601      	addeq	r6, #1
 8012ce6:	b2b6      	uxtheq	r6, r6
 8012ce8:	4281      	cmp	r1, r0
 8012cea:	d1ef      	bne.n	8012ccc <uxr_prepare_reliable_buffer_to_write+0x40>
 8012cec:	4650      	mov	r0, sl
 8012cee:	2104      	movs	r1, #4
 8012cf0:	9605      	str	r6, [sp, #20]
 8012cf2:	f7f6 f8dd 	bl	8008eb0 <ucdr_alignment>
 8012cf6:	4482      	add	sl, r0
 8012cf8:	eb0a 0208 	add.w	r2, sl, r8
 8012cfc:	454a      	cmp	r2, r9
 8012cfe:	f240 80ca 	bls.w	8012e96 <uxr_prepare_reliable_buffer_to_write+0x20a>
 8012d02:	7b22      	ldrb	r2, [r4, #12]
 8012d04:	4442      	add	r2, r8
 8012d06:	454a      	cmp	r2, r9
 8012d08:	f240 80b2 	bls.w	8012e70 <uxr_prepare_reliable_buffer_to_write+0x1e4>
 8012d0c:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 8012d10:	32fc      	adds	r2, #252	@ 0xfc
 8012d12:	fa1f f389 	uxth.w	r3, r9
 8012d16:	441a      	add	r2, r3
 8012d18:	b292      	uxth	r2, r2
 8012d1a:	fb06 fb02 	mul.w	fp, r6, r2
 8012d1e:	45c3      	cmp	fp, r8
 8012d20:	9205      	str	r2, [sp, #20]
 8012d22:	9206      	str	r2, [sp, #24]
 8012d24:	f0c0 80b3 	bcc.w	8012e8e <uxr_prepare_reliable_buffer_to_write+0x202>
 8012d28:	f10a 0204 	add.w	r2, sl, #4
 8012d2c:	454a      	cmp	r2, r9
 8012d2e:	f080 80db 	bcs.w	8012ee8 <uxr_prepare_reliable_buffer_to_write+0x25c>
 8012d32:	f1a3 0b04 	sub.w	fp, r3, #4
 8012d36:	ebab 0b0a 	sub.w	fp, fp, sl
 8012d3a:	9b05      	ldr	r3, [sp, #20]
 8012d3c:	fa1f fb8b 	uxth.w	fp, fp
 8012d40:	eba8 080b 	sub.w	r8, r8, fp
 8012d44:	fbb8 fcf3 	udiv	ip, r8, r3
 8012d48:	fb03 831c 	mls	r3, r3, ip, r8
 8012d4c:	fa1f fc8c 	uxth.w	ip, ip
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	f040 80c1 	bne.w	8012ed8 <uxr_prepare_reliable_buffer_to_write+0x24c>
 8012d56:	45b4      	cmp	ip, r6
 8012d58:	f200 8099 	bhi.w	8012e8e <uxr_prepare_reliable_buffer_to_write+0x202>
 8012d5c:	f10d 0820 	add.w	r8, sp, #32
 8012d60:	f1bc 0f00 	cmp.w	ip, #0
 8012d64:	d040      	beq.n	8012de8 <uxr_prepare_reliable_buffer_to_write+0x15c>
 8012d66:	f8cd a01c 	str.w	sl, [sp, #28]
 8012d6a:	2600      	movs	r6, #0
 8012d6c:	f8dd a014 	ldr.w	sl, [sp, #20]
 8012d70:	9505      	str	r5, [sp, #20]
 8012d72:	f10d 0820 	add.w	r8, sp, #32
 8012d76:	4665      	mov	r5, ip
 8012d78:	e000      	b.n	8012d7c <uxr_prepare_reliable_buffer_to_write+0xf0>
 8012d7a:	46d3      	mov	fp, sl
 8012d7c:	8921      	ldrh	r1, [r4, #8]
 8012d7e:	fbb7 f2f1 	udiv	r2, r7, r1
 8012d82:	fb01 7212 	mls	r2, r1, r2, r7
 8012d86:	b292      	uxth	r2, r2
 8012d88:	6863      	ldr	r3, [r4, #4]
 8012d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8012d8e:	6821      	ldr	r1, [r4, #0]
 8012d90:	fb02 f303 	mul.w	r3, r2, r3
 8012d94:	3304      	adds	r3, #4
 8012d96:	4419      	add	r1, r3
 8012d98:	4640      	mov	r0, r8
 8012d9a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8012d9e:	9200      	str	r2, [sp, #0]
 8012da0:	2300      	movs	r3, #0
 8012da2:	464a      	mov	r2, r9
 8012da4:	f7f6 f86e 	bl	8008e84 <ucdr_init_buffer_origin_offset>
 8012da8:	465a      	mov	r2, fp
 8012daa:	2300      	movs	r3, #0
 8012dac:	210d      	movs	r1, #13
 8012dae:	4640      	mov	r0, r8
 8012db0:	f7fd f950 	bl	8010054 <uxr_buffer_submessage_header>
 8012db4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8012db8:	fbb7 f2fc 	udiv	r2, r7, ip
 8012dbc:	fb0c 7212 	mls	r2, ip, r2, r7
 8012dc0:	b292      	uxth	r2, r2
 8012dc2:	6863      	ldr	r3, [r4, #4]
 8012dc4:	fbb3 f3fc 	udiv	r3, r3, ip
 8012dc8:	fb02 f303 	mul.w	r3, r2, r3
 8012dcc:	6822      	ldr	r2, [r4, #0]
 8012dce:	4638      	mov	r0, r7
 8012dd0:	f842 9003 	str.w	r9, [r2, r3]
 8012dd4:	2101      	movs	r1, #1
 8012dd6:	f000 f9bf 	bl	8013158 <uxr_seq_num_add>
 8012dda:	3601      	adds	r6, #1
 8012ddc:	42ae      	cmp	r6, r5
 8012dde:	4607      	mov	r7, r0
 8012de0:	d1cb      	bne.n	8012d7a <uxr_prepare_reliable_buffer_to_write+0xee>
 8012de2:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012de6:	9d05      	ldr	r5, [sp, #20]
 8012de8:	8920      	ldrh	r0, [r4, #8]
 8012dea:	fbb7 f1f0 	udiv	r1, r7, r0
 8012dee:	fb00 7111 	mls	r1, r0, r1, r7
 8012df2:	b289      	uxth	r1, r1
 8012df4:	6863      	ldr	r3, [r4, #4]
 8012df6:	fbb3 f3f0 	udiv	r3, r3, r0
 8012dfa:	fb01 f303 	mul.w	r3, r1, r3
 8012dfe:	6821      	ldr	r1, [r4, #0]
 8012e00:	3304      	adds	r3, #4
 8012e02:	4419      	add	r1, r3
 8012e04:	464a      	mov	r2, r9
 8012e06:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8012e0a:	9000      	str	r0, [sp, #0]
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	4640      	mov	r0, r8
 8012e10:	f7f6 f838 	bl	8008e84 <ucdr_init_buffer_origin_offset>
 8012e14:	4640      	mov	r0, r8
 8012e16:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012e1a:	2302      	movs	r3, #2
 8012e1c:	fa1f f288 	uxth.w	r2, r8
 8012e20:	210d      	movs	r1, #13
 8012e22:	f7fd f917 	bl	8010054 <uxr_buffer_submessage_header>
 8012e26:	8926      	ldrh	r6, [r4, #8]
 8012e28:	9b03      	ldr	r3, [sp, #12]
 8012e2a:	7b20      	ldrb	r0, [r4, #12]
 8012e2c:	f1a5 0208 	sub.w	r2, r5, #8
 8012e30:	f10a 0104 	add.w	r1, sl, #4
 8012e34:	fbb7 f5f6 	udiv	r5, r7, r6
 8012e38:	fb06 7515 	mls	r5, r6, r5, r7
 8012e3c:	440b      	add	r3, r1
 8012e3e:	b2ad      	uxth	r5, r5
 8012e40:	4619      	mov	r1, r3
 8012e42:	3004      	adds	r0, #4
 8012e44:	6863      	ldr	r3, [r4, #4]
 8012e46:	fbb3 f3f6 	udiv	r3, r3, r6
 8012e4a:	fb05 f303 	mul.w	r3, r5, r3
 8012e4e:	6825      	ldr	r5, [r4, #0]
 8012e50:	4440      	add	r0, r8
 8012e52:	50e8      	str	r0, [r5, r3]
 8012e54:	9d04      	ldr	r5, [sp, #16]
 8012e56:	eba2 020a 	sub.w	r2, r2, sl
 8012e5a:	4628      	mov	r0, r5
 8012e5c:	f7f6 f824 	bl	8008ea8 <ucdr_init_buffer>
 8012e60:	493c      	ldr	r1, [pc, #240]	@ (8012f54 <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 8012e62:	4622      	mov	r2, r4
 8012e64:	4628      	mov	r0, r5
 8012e66:	f7f5 fff3 	bl	8008e50 <ucdr_set_on_full_buffer_callback>
 8012e6a:	81e7      	strh	r7, [r4, #14]
 8012e6c:	2001      	movs	r0, #1
 8012e6e:	e00f      	b.n	8012e90 <uxr_prepare_reliable_buffer_to_write+0x204>
 8012e70:	2101      	movs	r1, #1
 8012e72:	89e0      	ldrh	r0, [r4, #14]
 8012e74:	f000 f970 	bl	8013158 <uxr_seq_num_add>
 8012e78:	8921      	ldrh	r1, [r4, #8]
 8012e7a:	4605      	mov	r5, r0
 8012e7c:	8a60      	ldrh	r0, [r4, #18]
 8012e7e:	f000 f96b 	bl	8013158 <uxr_seq_num_add>
 8012e82:	4601      	mov	r1, r0
 8012e84:	4628      	mov	r0, r5
 8012e86:	f000 f96f 	bl	8013168 <uxr_seq_num_cmp>
 8012e8a:	2800      	cmp	r0, #0
 8012e8c:	dd45      	ble.n	8012f1a <uxr_prepare_reliable_buffer_to_write+0x28e>
 8012e8e:	2000      	movs	r0, #0
 8012e90:	b011      	add	sp, #68	@ 0x44
 8012e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e96:	8921      	ldrh	r1, [r4, #8]
 8012e98:	8a60      	ldrh	r0, [r4, #18]
 8012e9a:	9205      	str	r2, [sp, #20]
 8012e9c:	f000 f95c 	bl	8013158 <uxr_seq_num_add>
 8012ea0:	4601      	mov	r1, r0
 8012ea2:	4638      	mov	r0, r7
 8012ea4:	f000 f960 	bl	8013168 <uxr_seq_num_cmp>
 8012ea8:	2800      	cmp	r0, #0
 8012eaa:	9a05      	ldr	r2, [sp, #20]
 8012eac:	dcef      	bgt.n	8012e8e <uxr_prepare_reliable_buffer_to_write+0x202>
 8012eae:	8926      	ldrh	r6, [r4, #8]
 8012eb0:	fbb7 f5f6 	udiv	r5, r7, r6
 8012eb4:	fb06 7515 	mls	r5, r6, r5, r7
 8012eb8:	b2ad      	uxth	r5, r5
 8012eba:	6863      	ldr	r3, [r4, #4]
 8012ebc:	6824      	ldr	r4, [r4, #0]
 8012ebe:	fbb3 f3f6 	udiv	r3, r3, r6
 8012ec2:	fb05 f303 	mul.w	r3, r5, r3
 8012ec6:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8012eca:	50e2      	str	r2, [r4, r3]
 8012ecc:	2300      	movs	r3, #0
 8012ece:	f8cd a000 	str.w	sl, [sp]
 8012ed2:	f7f5 ffd7 	bl	8008e84 <ucdr_init_buffer_origin_offset>
 8012ed6:	e7c9      	b.n	8012e6c <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8012ed8:	f10c 0c01 	add.w	ip, ip, #1
 8012edc:	fa1f fc8c 	uxth.w	ip, ip
 8012ee0:	45b4      	cmp	ip, r6
 8012ee2:	9306      	str	r3, [sp, #24]
 8012ee4:	d8d3      	bhi.n	8012e8e <uxr_prepare_reliable_buffer_to_write+0x202>
 8012ee6:	e739      	b.n	8012d5c <uxr_prepare_reliable_buffer_to_write+0xd0>
 8012ee8:	4638      	mov	r0, r7
 8012eea:	2101      	movs	r1, #1
 8012eec:	9307      	str	r3, [sp, #28]
 8012eee:	f000 f933 	bl	8013158 <uxr_seq_num_add>
 8012ef2:	8921      	ldrh	r1, [r4, #8]
 8012ef4:	6862      	ldr	r2, [r4, #4]
 8012ef6:	4607      	mov	r7, r0
 8012ef8:	fbb0 f0f1 	udiv	r0, r0, r1
 8012efc:	fb01 7010 	mls	r0, r1, r0, r7
 8012f00:	b280      	uxth	r0, r0
 8012f02:	fbb2 f1f1 	udiv	r1, r2, r1
 8012f06:	6822      	ldr	r2, [r4, #0]
 8012f08:	fb00 f101 	mul.w	r1, r0, r1
 8012f0c:	3104      	adds	r1, #4
 8012f0e:	1853      	adds	r3, r2, r1
 8012f10:	9303      	str	r3, [sp, #12]
 8012f12:	f853 ac04 	ldr.w	sl, [r3, #-4]
 8012f16:	9b07      	ldr	r3, [sp, #28]
 8012f18:	e70b      	b.n	8012d32 <uxr_prepare_reliable_buffer_to_write+0xa6>
 8012f1a:	8921      	ldrh	r1, [r4, #8]
 8012f1c:	fbb5 f2f1 	udiv	r2, r5, r1
 8012f20:	fb01 5212 	mls	r2, r1, r2, r5
 8012f24:	b292      	uxth	r2, r2
 8012f26:	6863      	ldr	r3, [r4, #4]
 8012f28:	fbb3 f3f1 	udiv	r3, r3, r1
 8012f2c:	6821      	ldr	r1, [r4, #0]
 8012f2e:	9804      	ldr	r0, [sp, #16]
 8012f30:	fb02 f303 	mul.w	r3, r2, r3
 8012f34:	3304      	adds	r3, #4
 8012f36:	7b22      	ldrb	r2, [r4, #12]
 8012f38:	4419      	add	r1, r3
 8012f3a:	4442      	add	r2, r8
 8012f3c:	f841 2c04 	str.w	r2, [r1, #-4]
 8012f40:	7b23      	ldrb	r3, [r4, #12]
 8012f42:	9300      	str	r3, [sp, #0]
 8012f44:	2300      	movs	r3, #0
 8012f46:	f7f5 ff9d 	bl	8008e84 <ucdr_init_buffer_origin_offset>
 8012f4a:	81e5      	strh	r5, [r4, #14]
 8012f4c:	e78e      	b.n	8012e6c <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8012f4e:	4606      	mov	r6, r0
 8012f50:	e6cc      	b.n	8012cec <uxr_prepare_reliable_buffer_to_write+0x60>
 8012f52:	bf00      	nop
 8012f54:	08012b71 	.word	0x08012b71

08012f58 <uxr_prepare_next_reliable_buffer_to_send>:
 8012f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f5a:	4604      	mov	r4, r0
 8012f5c:	460f      	mov	r7, r1
 8012f5e:	8a00      	ldrh	r0, [r0, #16]
 8012f60:	2101      	movs	r1, #1
 8012f62:	4615      	mov	r5, r2
 8012f64:	461e      	mov	r6, r3
 8012f66:	f000 f8f7 	bl	8013158 <uxr_seq_num_add>
 8012f6a:	8030      	strh	r0, [r6, #0]
 8012f6c:	8922      	ldrh	r2, [r4, #8]
 8012f6e:	fbb0 f3f2 	udiv	r3, r0, r2
 8012f72:	fb02 0c13 	mls	ip, r2, r3, r0
 8012f76:	fa1f fc8c 	uxth.w	ip, ip
 8012f7a:	6863      	ldr	r3, [r4, #4]
 8012f7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f80:	fb0c fc03 	mul.w	ip, ip, r3
 8012f84:	6823      	ldr	r3, [r4, #0]
 8012f86:	89e1      	ldrh	r1, [r4, #14]
 8012f88:	f10c 0c04 	add.w	ip, ip, #4
 8012f8c:	4463      	add	r3, ip
 8012f8e:	603b      	str	r3, [r7, #0]
 8012f90:	6823      	ldr	r3, [r4, #0]
 8012f92:	4463      	add	r3, ip
 8012f94:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012f98:	602b      	str	r3, [r5, #0]
 8012f9a:	f000 f8e5 	bl	8013168 <uxr_seq_num_cmp>
 8012f9e:	2800      	cmp	r0, #0
 8012fa0:	dd01      	ble.n	8012fa6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8012fa2:	2000      	movs	r0, #0
 8012fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fa6:	7b23      	ldrb	r3, [r4, #12]
 8012fa8:	682a      	ldr	r2, [r5, #0]
 8012faa:	429a      	cmp	r2, r3
 8012fac:	d9f9      	bls.n	8012fa2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8012fae:	8a61      	ldrh	r1, [r4, #18]
 8012fb0:	8a20      	ldrh	r0, [r4, #16]
 8012fb2:	f000 f8d5 	bl	8013160 <uxr_seq_num_sub>
 8012fb6:	8923      	ldrh	r3, [r4, #8]
 8012fb8:	4283      	cmp	r3, r0
 8012fba:	d0f2      	beq.n	8012fa2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8012fbc:	8830      	ldrh	r0, [r6, #0]
 8012fbe:	89e3      	ldrh	r3, [r4, #14]
 8012fc0:	8220      	strh	r0, [r4, #16]
 8012fc2:	4298      	cmp	r0, r3
 8012fc4:	d001      	beq.n	8012fca <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8012fc6:	2001      	movs	r0, #1
 8012fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fca:	2101      	movs	r1, #1
 8012fcc:	f000 f8c4 	bl	8013158 <uxr_seq_num_add>
 8012fd0:	81e0      	strh	r0, [r4, #14]
 8012fd2:	e7f8      	b.n	8012fc6 <uxr_prepare_next_reliable_buffer_to_send+0x6e>

08012fd4 <uxr_update_output_stream_heartbeat_timestamp>:
 8012fd4:	b570      	push	{r4, r5, r6, lr}
 8012fd6:	8a01      	ldrh	r1, [r0, #16]
 8012fd8:	4604      	mov	r4, r0
 8012fda:	8a40      	ldrh	r0, [r0, #18]
 8012fdc:	4615      	mov	r5, r2
 8012fde:	461e      	mov	r6, r3
 8012fe0:	f000 f8c2 	bl	8013168 <uxr_seq_num_cmp>
 8012fe4:	2800      	cmp	r0, #0
 8012fe6:	db07      	blt.n	8012ff8 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8012fe8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8012fec:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8012ff0:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8012ff4:	2000      	movs	r0, #0
 8012ff6:	bd70      	pop	{r4, r5, r6, pc}
 8012ff8:	f894 3020 	ldrb.w	r3, [r4, #32]
 8012ffc:	b953      	cbnz	r3, 8013014 <uxr_update_output_stream_heartbeat_timestamp+0x40>
 8012ffe:	2301      	movs	r3, #1
 8013000:	f884 3020 	strb.w	r3, [r4, #32]
 8013004:	3564      	adds	r5, #100	@ 0x64
 8013006:	f04f 0000 	mov.w	r0, #0
 801300a:	f146 0600 	adc.w	r6, r6, #0
 801300e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8013012:	bd70      	pop	{r4, r5, r6, pc}
 8013014:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013018:	428d      	cmp	r5, r1
 801301a:	eb76 0202 	sbcs.w	r2, r6, r2
 801301e:	dbf1      	blt.n	8013004 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8013020:	3301      	adds	r3, #1
 8013022:	3564      	adds	r5, #100	@ 0x64
 8013024:	f884 3020 	strb.w	r3, [r4, #32]
 8013028:	f04f 0001 	mov.w	r0, #1
 801302c:	f146 0600 	adc.w	r6, r6, #0
 8013030:	e7ed      	b.n	801300e <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 8013032:	bf00      	nop

08013034 <uxr_begin_output_nack_buffer_it>:
 8013034:	8a40      	ldrh	r0, [r0, #18]
 8013036:	4770      	bx	lr

08013038 <uxr_next_reliable_nack_buffer_to_send>:
 8013038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801303c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8013040:	f1b8 0f00 	cmp.w	r8, #0
 8013044:	d104      	bne.n	8013050 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8013046:	f04f 0800 	mov.w	r8, #0
 801304a:	4640      	mov	r0, r8
 801304c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013050:	4604      	mov	r4, r0
 8013052:	460e      	mov	r6, r1
 8013054:	8818      	ldrh	r0, [r3, #0]
 8013056:	4617      	mov	r7, r2
 8013058:	461d      	mov	r5, r3
 801305a:	e019      	b.n	8013090 <uxr_next_reliable_nack_buffer_to_send+0x58>
 801305c:	8921      	ldrh	r1, [r4, #8]
 801305e:	8828      	ldrh	r0, [r5, #0]
 8013060:	fbb0 fcf1 	udiv	ip, r0, r1
 8013064:	e9d4 3200 	ldrd	r3, r2, [r4]
 8013068:	fb01 0c1c 	mls	ip, r1, ip, r0
 801306c:	fa1f fc8c 	uxth.w	ip, ip
 8013070:	fbb2 f2f1 	udiv	r2, r2, r1
 8013074:	fb02 fc0c 	mul.w	ip, r2, ip
 8013078:	f10c 0c04 	add.w	ip, ip, #4
 801307c:	4463      	add	r3, ip
 801307e:	6033      	str	r3, [r6, #0]
 8013080:	6823      	ldr	r3, [r4, #0]
 8013082:	4463      	add	r3, ip
 8013084:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8013088:	603b      	str	r3, [r7, #0]
 801308a:	7b22      	ldrb	r2, [r4, #12]
 801308c:	429a      	cmp	r2, r3
 801308e:	d1dc      	bne.n	801304a <uxr_next_reliable_nack_buffer_to_send+0x12>
 8013090:	2101      	movs	r1, #1
 8013092:	f000 f861 	bl	8013158 <uxr_seq_num_add>
 8013096:	8028      	strh	r0, [r5, #0]
 8013098:	8a21      	ldrh	r1, [r4, #16]
 801309a:	f000 f865 	bl	8013168 <uxr_seq_num_cmp>
 801309e:	2800      	cmp	r0, #0
 80130a0:	dddc      	ble.n	801305c <uxr_next_reliable_nack_buffer_to_send+0x24>
 80130a2:	2300      	movs	r3, #0
 80130a4:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 80130a8:	e7cd      	b.n	8013046 <uxr_next_reliable_nack_buffer_to_send+0xe>
 80130aa:	bf00      	nop

080130ac <uxr_process_acknack>:
 80130ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ae:	4604      	mov	r4, r0
 80130b0:	460e      	mov	r6, r1
 80130b2:	4610      	mov	r0, r2
 80130b4:	2101      	movs	r1, #1
 80130b6:	f000 f853 	bl	8013160 <uxr_seq_num_sub>
 80130ba:	8a61      	ldrh	r1, [r4, #18]
 80130bc:	f000 f850 	bl	8013160 <uxr_seq_num_sub>
 80130c0:	b1c0      	cbz	r0, 80130f4 <uxr_process_acknack+0x48>
 80130c2:	4605      	mov	r5, r0
 80130c4:	2700      	movs	r7, #0
 80130c6:	2101      	movs	r1, #1
 80130c8:	8a60      	ldrh	r0, [r4, #18]
 80130ca:	f000 f845 	bl	8013158 <uxr_seq_num_add>
 80130ce:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80130d2:	fbb0 f1fc 	udiv	r1, r0, ip
 80130d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80130da:	fb0c 0111 	mls	r1, ip, r1, r0
 80130de:	b289      	uxth	r1, r1
 80130e0:	3701      	adds	r7, #1
 80130e2:	fbb3 f3fc 	udiv	r3, r3, ip
 80130e6:	fb01 f303 	mul.w	r3, r1, r3
 80130ea:	42bd      	cmp	r5, r7
 80130ec:	7b21      	ldrb	r1, [r4, #12]
 80130ee:	8260      	strh	r0, [r4, #18]
 80130f0:	50d1      	str	r1, [r2, r3]
 80130f2:	d1e8      	bne.n	80130c6 <uxr_process_acknack+0x1a>
 80130f4:	3e00      	subs	r6, #0
 80130f6:	f04f 0300 	mov.w	r3, #0
 80130fa:	bf18      	it	ne
 80130fc:	2601      	movne	r6, #1
 80130fe:	f884 3020 	strb.w	r3, [r4, #32]
 8013102:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8013106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013108 <uxr_is_output_up_to_date>:
 8013108:	8a01      	ldrh	r1, [r0, #16]
 801310a:	8a40      	ldrh	r0, [r0, #18]
 801310c:	b508      	push	{r3, lr}
 801310e:	f000 f82b 	bl	8013168 <uxr_seq_num_cmp>
 8013112:	fab0 f080 	clz	r0, r0
 8013116:	0940      	lsrs	r0, r0, #5
 8013118:	bd08      	pop	{r3, pc}
 801311a:	bf00      	nop

0801311c <get_available_free_slots>:
 801311c:	8901      	ldrh	r1, [r0, #8]
 801311e:	b1c1      	cbz	r1, 8013152 <get_available_free_slots+0x36>
 8013120:	b530      	push	{r4, r5, lr}
 8013122:	2200      	movs	r2, #0
 8013124:	6843      	ldr	r3, [r0, #4]
 8013126:	6805      	ldr	r5, [r0, #0]
 8013128:	7b04      	ldrb	r4, [r0, #12]
 801312a:	fbb3 fef1 	udiv	lr, r3, r1
 801312e:	4610      	mov	r0, r2
 8013130:	b293      	uxth	r3, r2
 8013132:	fbb3 fcf1 	udiv	ip, r3, r1
 8013136:	fb01 331c 	mls	r3, r1, ip, r3
 801313a:	b29b      	uxth	r3, r3
 801313c:	fb0e f303 	mul.w	r3, lr, r3
 8013140:	3201      	adds	r2, #1
 8013142:	58eb      	ldr	r3, [r5, r3]
 8013144:	429c      	cmp	r4, r3
 8013146:	bf04      	itt	eq
 8013148:	3001      	addeq	r0, #1
 801314a:	b280      	uxtheq	r0, r0
 801314c:	4291      	cmp	r1, r2
 801314e:	d1ef      	bne.n	8013130 <get_available_free_slots+0x14>
 8013150:	bd30      	pop	{r4, r5, pc}
 8013152:	4608      	mov	r0, r1
 8013154:	4770      	bx	lr
 8013156:	bf00      	nop

08013158 <uxr_seq_num_add>:
 8013158:	4408      	add	r0, r1
 801315a:	b280      	uxth	r0, r0
 801315c:	4770      	bx	lr
 801315e:	bf00      	nop

08013160 <uxr_seq_num_sub>:
 8013160:	1a40      	subs	r0, r0, r1
 8013162:	b280      	uxth	r0, r0
 8013164:	4770      	bx	lr
 8013166:	bf00      	nop

08013168 <uxr_seq_num_cmp>:
 8013168:	4288      	cmp	r0, r1
 801316a:	d010      	beq.n	801318e <uxr_seq_num_cmp+0x26>
 801316c:	d207      	bcs.n	801317e <uxr_seq_num_cmp+0x16>
 801316e:	1a09      	subs	r1, r1, r0
 8013170:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8013174:	bfb4      	ite	lt
 8013176:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
 801317a:	2001      	movge	r0, #1
 801317c:	4770      	bx	lr
 801317e:	1a41      	subs	r1, r0, r1
 8013180:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8013184:	bfcc      	ite	gt
 8013186:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801318a:	2001      	movle	r0, #1
 801318c:	4770      	bx	lr
 801318e:	2000      	movs	r0, #0
 8013190:	4770      	bx	lr
 8013192:	bf00      	nop

08013194 <calloc>:
 8013194:	4b02      	ldr	r3, [pc, #8]	@ (80131a0 <calloc+0xc>)
 8013196:	460a      	mov	r2, r1
 8013198:	4601      	mov	r1, r0
 801319a:	6818      	ldr	r0, [r3, #0]
 801319c:	f000 b802 	b.w	80131a4 <_calloc_r>
 80131a0:	20000278 	.word	0x20000278

080131a4 <_calloc_r>:
 80131a4:	b570      	push	{r4, r5, r6, lr}
 80131a6:	fba1 5402 	umull	r5, r4, r1, r2
 80131aa:	b934      	cbnz	r4, 80131ba <_calloc_r+0x16>
 80131ac:	4629      	mov	r1, r5
 80131ae:	f000 f887 	bl	80132c0 <_malloc_r>
 80131b2:	4606      	mov	r6, r0
 80131b4:	b928      	cbnz	r0, 80131c2 <_calloc_r+0x1e>
 80131b6:	4630      	mov	r0, r6
 80131b8:	bd70      	pop	{r4, r5, r6, pc}
 80131ba:	220c      	movs	r2, #12
 80131bc:	6002      	str	r2, [r0, #0]
 80131be:	2600      	movs	r6, #0
 80131c0:	e7f9      	b.n	80131b6 <_calloc_r+0x12>
 80131c2:	462a      	mov	r2, r5
 80131c4:	4621      	mov	r1, r4
 80131c6:	f000 fbd5 	bl	8013974 <memset>
 80131ca:	e7f4      	b.n	80131b6 <_calloc_r+0x12>

080131cc <getenv>:
 80131cc:	b507      	push	{r0, r1, r2, lr}
 80131ce:	4b04      	ldr	r3, [pc, #16]	@ (80131e0 <getenv+0x14>)
 80131d0:	4601      	mov	r1, r0
 80131d2:	aa01      	add	r2, sp, #4
 80131d4:	6818      	ldr	r0, [r3, #0]
 80131d6:	f000 f805 	bl	80131e4 <_findenv_r>
 80131da:	b003      	add	sp, #12
 80131dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80131e0:	20000278 	.word	0x20000278

080131e4 <_findenv_r>:
 80131e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131e8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8013258 <_findenv_r+0x74>
 80131ec:	4606      	mov	r6, r0
 80131ee:	4689      	mov	r9, r1
 80131f0:	4617      	mov	r7, r2
 80131f2:	f000 fcc7 	bl	8013b84 <__env_lock>
 80131f6:	f8da 4000 	ldr.w	r4, [sl]
 80131fa:	b134      	cbz	r4, 801320a <_findenv_r+0x26>
 80131fc:	464b      	mov	r3, r9
 80131fe:	4698      	mov	r8, r3
 8013200:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013204:	b13a      	cbz	r2, 8013216 <_findenv_r+0x32>
 8013206:	2a3d      	cmp	r2, #61	@ 0x3d
 8013208:	d1f9      	bne.n	80131fe <_findenv_r+0x1a>
 801320a:	4630      	mov	r0, r6
 801320c:	f000 fcc0 	bl	8013b90 <__env_unlock>
 8013210:	2000      	movs	r0, #0
 8013212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013216:	eba8 0809 	sub.w	r8, r8, r9
 801321a:	46a3      	mov	fp, r4
 801321c:	f854 0b04 	ldr.w	r0, [r4], #4
 8013220:	2800      	cmp	r0, #0
 8013222:	d0f2      	beq.n	801320a <_findenv_r+0x26>
 8013224:	4642      	mov	r2, r8
 8013226:	4649      	mov	r1, r9
 8013228:	f000 fbb9 	bl	801399e <strncmp>
 801322c:	2800      	cmp	r0, #0
 801322e:	d1f4      	bne.n	801321a <_findenv_r+0x36>
 8013230:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013234:	eb03 0508 	add.w	r5, r3, r8
 8013238:	f813 3008 	ldrb.w	r3, [r3, r8]
 801323c:	2b3d      	cmp	r3, #61	@ 0x3d
 801323e:	d1ec      	bne.n	801321a <_findenv_r+0x36>
 8013240:	f8da 3000 	ldr.w	r3, [sl]
 8013244:	ebab 0303 	sub.w	r3, fp, r3
 8013248:	109b      	asrs	r3, r3, #2
 801324a:	4630      	mov	r0, r6
 801324c:	603b      	str	r3, [r7, #0]
 801324e:	f000 fc9f 	bl	8013b90 <__env_unlock>
 8013252:	1c68      	adds	r0, r5, #1
 8013254:	e7dd      	b.n	8013212 <_findenv_r+0x2e>
 8013256:	bf00      	nop
 8013258:	20000000 	.word	0x20000000

0801325c <malloc>:
 801325c:	4b02      	ldr	r3, [pc, #8]	@ (8013268 <malloc+0xc>)
 801325e:	4601      	mov	r1, r0
 8013260:	6818      	ldr	r0, [r3, #0]
 8013262:	f000 b82d 	b.w	80132c0 <_malloc_r>
 8013266:	bf00      	nop
 8013268:	20000278 	.word	0x20000278

0801326c <free>:
 801326c:	4b02      	ldr	r3, [pc, #8]	@ (8013278 <free+0xc>)
 801326e:	4601      	mov	r1, r0
 8013270:	6818      	ldr	r0, [r3, #0]
 8013272:	f000 bc93 	b.w	8013b9c <_free_r>
 8013276:	bf00      	nop
 8013278:	20000278 	.word	0x20000278

0801327c <sbrk_aligned>:
 801327c:	b570      	push	{r4, r5, r6, lr}
 801327e:	4e0f      	ldr	r6, [pc, #60]	@ (80132bc <sbrk_aligned+0x40>)
 8013280:	460c      	mov	r4, r1
 8013282:	6831      	ldr	r1, [r6, #0]
 8013284:	4605      	mov	r5, r0
 8013286:	b911      	cbnz	r1, 801328e <sbrk_aligned+0x12>
 8013288:	f000 fbf8 	bl	8013a7c <_sbrk_r>
 801328c:	6030      	str	r0, [r6, #0]
 801328e:	4621      	mov	r1, r4
 8013290:	4628      	mov	r0, r5
 8013292:	f000 fbf3 	bl	8013a7c <_sbrk_r>
 8013296:	1c43      	adds	r3, r0, #1
 8013298:	d103      	bne.n	80132a2 <sbrk_aligned+0x26>
 801329a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801329e:	4620      	mov	r0, r4
 80132a0:	bd70      	pop	{r4, r5, r6, pc}
 80132a2:	1cc4      	adds	r4, r0, #3
 80132a4:	f024 0403 	bic.w	r4, r4, #3
 80132a8:	42a0      	cmp	r0, r4
 80132aa:	d0f8      	beq.n	801329e <sbrk_aligned+0x22>
 80132ac:	1a21      	subs	r1, r4, r0
 80132ae:	4628      	mov	r0, r5
 80132b0:	f000 fbe4 	bl	8013a7c <_sbrk_r>
 80132b4:	3001      	adds	r0, #1
 80132b6:	d1f2      	bne.n	801329e <sbrk_aligned+0x22>
 80132b8:	e7ef      	b.n	801329a <sbrk_aligned+0x1e>
 80132ba:	bf00      	nop
 80132bc:	2000dc28 	.word	0x2000dc28

080132c0 <_malloc_r>:
 80132c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132c4:	1ccd      	adds	r5, r1, #3
 80132c6:	f025 0503 	bic.w	r5, r5, #3
 80132ca:	3508      	adds	r5, #8
 80132cc:	2d0c      	cmp	r5, #12
 80132ce:	bf38      	it	cc
 80132d0:	250c      	movcc	r5, #12
 80132d2:	2d00      	cmp	r5, #0
 80132d4:	4606      	mov	r6, r0
 80132d6:	db01      	blt.n	80132dc <_malloc_r+0x1c>
 80132d8:	42a9      	cmp	r1, r5
 80132da:	d904      	bls.n	80132e6 <_malloc_r+0x26>
 80132dc:	230c      	movs	r3, #12
 80132de:	6033      	str	r3, [r6, #0]
 80132e0:	2000      	movs	r0, #0
 80132e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80133bc <_malloc_r+0xfc>
 80132ea:	f000 f869 	bl	80133c0 <__malloc_lock>
 80132ee:	f8d8 3000 	ldr.w	r3, [r8]
 80132f2:	461c      	mov	r4, r3
 80132f4:	bb44      	cbnz	r4, 8013348 <_malloc_r+0x88>
 80132f6:	4629      	mov	r1, r5
 80132f8:	4630      	mov	r0, r6
 80132fa:	f7ff ffbf 	bl	801327c <sbrk_aligned>
 80132fe:	1c43      	adds	r3, r0, #1
 8013300:	4604      	mov	r4, r0
 8013302:	d158      	bne.n	80133b6 <_malloc_r+0xf6>
 8013304:	f8d8 4000 	ldr.w	r4, [r8]
 8013308:	4627      	mov	r7, r4
 801330a:	2f00      	cmp	r7, #0
 801330c:	d143      	bne.n	8013396 <_malloc_r+0xd6>
 801330e:	2c00      	cmp	r4, #0
 8013310:	d04b      	beq.n	80133aa <_malloc_r+0xea>
 8013312:	6823      	ldr	r3, [r4, #0]
 8013314:	4639      	mov	r1, r7
 8013316:	4630      	mov	r0, r6
 8013318:	eb04 0903 	add.w	r9, r4, r3
 801331c:	f000 fbae 	bl	8013a7c <_sbrk_r>
 8013320:	4581      	cmp	r9, r0
 8013322:	d142      	bne.n	80133aa <_malloc_r+0xea>
 8013324:	6821      	ldr	r1, [r4, #0]
 8013326:	1a6d      	subs	r5, r5, r1
 8013328:	4629      	mov	r1, r5
 801332a:	4630      	mov	r0, r6
 801332c:	f7ff ffa6 	bl	801327c <sbrk_aligned>
 8013330:	3001      	adds	r0, #1
 8013332:	d03a      	beq.n	80133aa <_malloc_r+0xea>
 8013334:	6823      	ldr	r3, [r4, #0]
 8013336:	442b      	add	r3, r5
 8013338:	6023      	str	r3, [r4, #0]
 801333a:	f8d8 3000 	ldr.w	r3, [r8]
 801333e:	685a      	ldr	r2, [r3, #4]
 8013340:	bb62      	cbnz	r2, 801339c <_malloc_r+0xdc>
 8013342:	f8c8 7000 	str.w	r7, [r8]
 8013346:	e00f      	b.n	8013368 <_malloc_r+0xa8>
 8013348:	6822      	ldr	r2, [r4, #0]
 801334a:	1b52      	subs	r2, r2, r5
 801334c:	d420      	bmi.n	8013390 <_malloc_r+0xd0>
 801334e:	2a0b      	cmp	r2, #11
 8013350:	d917      	bls.n	8013382 <_malloc_r+0xc2>
 8013352:	1961      	adds	r1, r4, r5
 8013354:	42a3      	cmp	r3, r4
 8013356:	6025      	str	r5, [r4, #0]
 8013358:	bf18      	it	ne
 801335a:	6059      	strne	r1, [r3, #4]
 801335c:	6863      	ldr	r3, [r4, #4]
 801335e:	bf08      	it	eq
 8013360:	f8c8 1000 	streq.w	r1, [r8]
 8013364:	5162      	str	r2, [r4, r5]
 8013366:	604b      	str	r3, [r1, #4]
 8013368:	4630      	mov	r0, r6
 801336a:	f000 f82f 	bl	80133cc <__malloc_unlock>
 801336e:	f104 000b 	add.w	r0, r4, #11
 8013372:	1d23      	adds	r3, r4, #4
 8013374:	f020 0007 	bic.w	r0, r0, #7
 8013378:	1ac2      	subs	r2, r0, r3
 801337a:	bf1c      	itt	ne
 801337c:	1a1b      	subne	r3, r3, r0
 801337e:	50a3      	strne	r3, [r4, r2]
 8013380:	e7af      	b.n	80132e2 <_malloc_r+0x22>
 8013382:	6862      	ldr	r2, [r4, #4]
 8013384:	42a3      	cmp	r3, r4
 8013386:	bf0c      	ite	eq
 8013388:	f8c8 2000 	streq.w	r2, [r8]
 801338c:	605a      	strne	r2, [r3, #4]
 801338e:	e7eb      	b.n	8013368 <_malloc_r+0xa8>
 8013390:	4623      	mov	r3, r4
 8013392:	6864      	ldr	r4, [r4, #4]
 8013394:	e7ae      	b.n	80132f4 <_malloc_r+0x34>
 8013396:	463c      	mov	r4, r7
 8013398:	687f      	ldr	r7, [r7, #4]
 801339a:	e7b6      	b.n	801330a <_malloc_r+0x4a>
 801339c:	461a      	mov	r2, r3
 801339e:	685b      	ldr	r3, [r3, #4]
 80133a0:	42a3      	cmp	r3, r4
 80133a2:	d1fb      	bne.n	801339c <_malloc_r+0xdc>
 80133a4:	2300      	movs	r3, #0
 80133a6:	6053      	str	r3, [r2, #4]
 80133a8:	e7de      	b.n	8013368 <_malloc_r+0xa8>
 80133aa:	230c      	movs	r3, #12
 80133ac:	6033      	str	r3, [r6, #0]
 80133ae:	4630      	mov	r0, r6
 80133b0:	f000 f80c 	bl	80133cc <__malloc_unlock>
 80133b4:	e794      	b.n	80132e0 <_malloc_r+0x20>
 80133b6:	6005      	str	r5, [r0, #0]
 80133b8:	e7d6      	b.n	8013368 <_malloc_r+0xa8>
 80133ba:	bf00      	nop
 80133bc:	2000dc2c 	.word	0x2000dc2c

080133c0 <__malloc_lock>:
 80133c0:	4801      	ldr	r0, [pc, #4]	@ (80133c8 <__malloc_lock+0x8>)
 80133c2:	f000 bba8 	b.w	8013b16 <__retarget_lock_acquire_recursive>
 80133c6:	bf00      	nop
 80133c8:	2000dd71 	.word	0x2000dd71

080133cc <__malloc_unlock>:
 80133cc:	4801      	ldr	r0, [pc, #4]	@ (80133d4 <__malloc_unlock+0x8>)
 80133ce:	f000 bba3 	b.w	8013b18 <__retarget_lock_release_recursive>
 80133d2:	bf00      	nop
 80133d4:	2000dd71 	.word	0x2000dd71

080133d8 <srand>:
 80133d8:	b538      	push	{r3, r4, r5, lr}
 80133da:	4b10      	ldr	r3, [pc, #64]	@ (801341c <srand+0x44>)
 80133dc:	681d      	ldr	r5, [r3, #0]
 80133de:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80133e0:	4604      	mov	r4, r0
 80133e2:	b9b3      	cbnz	r3, 8013412 <srand+0x3a>
 80133e4:	2018      	movs	r0, #24
 80133e6:	f7ff ff39 	bl	801325c <malloc>
 80133ea:	4602      	mov	r2, r0
 80133ec:	6328      	str	r0, [r5, #48]	@ 0x30
 80133ee:	b920      	cbnz	r0, 80133fa <srand+0x22>
 80133f0:	4b0b      	ldr	r3, [pc, #44]	@ (8013420 <srand+0x48>)
 80133f2:	480c      	ldr	r0, [pc, #48]	@ (8013424 <srand+0x4c>)
 80133f4:	2146      	movs	r1, #70	@ 0x46
 80133f6:	f000 fba7 	bl	8013b48 <__assert_func>
 80133fa:	490b      	ldr	r1, [pc, #44]	@ (8013428 <srand+0x50>)
 80133fc:	4b0b      	ldr	r3, [pc, #44]	@ (801342c <srand+0x54>)
 80133fe:	e9c0 1300 	strd	r1, r3, [r0]
 8013402:	4b0b      	ldr	r3, [pc, #44]	@ (8013430 <srand+0x58>)
 8013404:	6083      	str	r3, [r0, #8]
 8013406:	230b      	movs	r3, #11
 8013408:	8183      	strh	r3, [r0, #12]
 801340a:	2100      	movs	r1, #0
 801340c:	2001      	movs	r0, #1
 801340e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013412:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013414:	2200      	movs	r2, #0
 8013416:	611c      	str	r4, [r3, #16]
 8013418:	615a      	str	r2, [r3, #20]
 801341a:	bd38      	pop	{r3, r4, r5, pc}
 801341c:	20000278 	.word	0x20000278
 8013420:	08015630 	.word	0x08015630
 8013424:	08015647 	.word	0x08015647
 8013428:	abcd330e 	.word	0xabcd330e
 801342c:	e66d1234 	.word	0xe66d1234
 8013430:	0005deec 	.word	0x0005deec

08013434 <rand>:
 8013434:	4b16      	ldr	r3, [pc, #88]	@ (8013490 <rand+0x5c>)
 8013436:	b510      	push	{r4, lr}
 8013438:	681c      	ldr	r4, [r3, #0]
 801343a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801343c:	b9b3      	cbnz	r3, 801346c <rand+0x38>
 801343e:	2018      	movs	r0, #24
 8013440:	f7ff ff0c 	bl	801325c <malloc>
 8013444:	4602      	mov	r2, r0
 8013446:	6320      	str	r0, [r4, #48]	@ 0x30
 8013448:	b920      	cbnz	r0, 8013454 <rand+0x20>
 801344a:	4b12      	ldr	r3, [pc, #72]	@ (8013494 <rand+0x60>)
 801344c:	4812      	ldr	r0, [pc, #72]	@ (8013498 <rand+0x64>)
 801344e:	2152      	movs	r1, #82	@ 0x52
 8013450:	f000 fb7a 	bl	8013b48 <__assert_func>
 8013454:	4911      	ldr	r1, [pc, #68]	@ (801349c <rand+0x68>)
 8013456:	4b12      	ldr	r3, [pc, #72]	@ (80134a0 <rand+0x6c>)
 8013458:	e9c0 1300 	strd	r1, r3, [r0]
 801345c:	4b11      	ldr	r3, [pc, #68]	@ (80134a4 <rand+0x70>)
 801345e:	6083      	str	r3, [r0, #8]
 8013460:	230b      	movs	r3, #11
 8013462:	8183      	strh	r3, [r0, #12]
 8013464:	2100      	movs	r1, #0
 8013466:	2001      	movs	r0, #1
 8013468:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801346c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801346e:	480e      	ldr	r0, [pc, #56]	@ (80134a8 <rand+0x74>)
 8013470:	690b      	ldr	r3, [r1, #16]
 8013472:	694c      	ldr	r4, [r1, #20]
 8013474:	4a0d      	ldr	r2, [pc, #52]	@ (80134ac <rand+0x78>)
 8013476:	4358      	muls	r0, r3
 8013478:	fb02 0004 	mla	r0, r2, r4, r0
 801347c:	fba3 3202 	umull	r3, r2, r3, r2
 8013480:	3301      	adds	r3, #1
 8013482:	eb40 0002 	adc.w	r0, r0, r2
 8013486:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801348a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801348e:	bd10      	pop	{r4, pc}
 8013490:	20000278 	.word	0x20000278
 8013494:	08015630 	.word	0x08015630
 8013498:	08015647 	.word	0x08015647
 801349c:	abcd330e 	.word	0xabcd330e
 80134a0:	e66d1234 	.word	0xe66d1234
 80134a4:	0005deec 	.word	0x0005deec
 80134a8:	5851f42d 	.word	0x5851f42d
 80134ac:	4c957f2d 	.word	0x4c957f2d

080134b0 <realloc>:
 80134b0:	4b02      	ldr	r3, [pc, #8]	@ (80134bc <realloc+0xc>)
 80134b2:	460a      	mov	r2, r1
 80134b4:	4601      	mov	r1, r0
 80134b6:	6818      	ldr	r0, [r3, #0]
 80134b8:	f000 b802 	b.w	80134c0 <_realloc_r>
 80134bc:	20000278 	.word	0x20000278

080134c0 <_realloc_r>:
 80134c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134c4:	4607      	mov	r7, r0
 80134c6:	4614      	mov	r4, r2
 80134c8:	460d      	mov	r5, r1
 80134ca:	b921      	cbnz	r1, 80134d6 <_realloc_r+0x16>
 80134cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134d0:	4611      	mov	r1, r2
 80134d2:	f7ff bef5 	b.w	80132c0 <_malloc_r>
 80134d6:	b92a      	cbnz	r2, 80134e4 <_realloc_r+0x24>
 80134d8:	f000 fb60 	bl	8013b9c <_free_r>
 80134dc:	4625      	mov	r5, r4
 80134de:	4628      	mov	r0, r5
 80134e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134e4:	f000 fba4 	bl	8013c30 <_malloc_usable_size_r>
 80134e8:	4284      	cmp	r4, r0
 80134ea:	4606      	mov	r6, r0
 80134ec:	d802      	bhi.n	80134f4 <_realloc_r+0x34>
 80134ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80134f2:	d8f4      	bhi.n	80134de <_realloc_r+0x1e>
 80134f4:	4621      	mov	r1, r4
 80134f6:	4638      	mov	r0, r7
 80134f8:	f7ff fee2 	bl	80132c0 <_malloc_r>
 80134fc:	4680      	mov	r8, r0
 80134fe:	b908      	cbnz	r0, 8013504 <_realloc_r+0x44>
 8013500:	4645      	mov	r5, r8
 8013502:	e7ec      	b.n	80134de <_realloc_r+0x1e>
 8013504:	42b4      	cmp	r4, r6
 8013506:	4622      	mov	r2, r4
 8013508:	4629      	mov	r1, r5
 801350a:	bf28      	it	cs
 801350c:	4632      	movcs	r2, r6
 801350e:	f000 fb0c 	bl	8013b2a <memcpy>
 8013512:	4629      	mov	r1, r5
 8013514:	4638      	mov	r0, r7
 8013516:	f000 fb41 	bl	8013b9c <_free_r>
 801351a:	e7f1      	b.n	8013500 <_realloc_r+0x40>

0801351c <_strtoul_l.isra.0>:
 801351c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013520:	4e34      	ldr	r6, [pc, #208]	@ (80135f4 <_strtoul_l.isra.0+0xd8>)
 8013522:	4686      	mov	lr, r0
 8013524:	460d      	mov	r5, r1
 8013526:	4628      	mov	r0, r5
 8013528:	f815 4b01 	ldrb.w	r4, [r5], #1
 801352c:	5d37      	ldrb	r7, [r6, r4]
 801352e:	f017 0708 	ands.w	r7, r7, #8
 8013532:	d1f8      	bne.n	8013526 <_strtoul_l.isra.0+0xa>
 8013534:	2c2d      	cmp	r4, #45	@ 0x2d
 8013536:	d110      	bne.n	801355a <_strtoul_l.isra.0+0x3e>
 8013538:	782c      	ldrb	r4, [r5, #0]
 801353a:	2701      	movs	r7, #1
 801353c:	1c85      	adds	r5, r0, #2
 801353e:	f033 0010 	bics.w	r0, r3, #16
 8013542:	d115      	bne.n	8013570 <_strtoul_l.isra.0+0x54>
 8013544:	2c30      	cmp	r4, #48	@ 0x30
 8013546:	d10d      	bne.n	8013564 <_strtoul_l.isra.0+0x48>
 8013548:	7828      	ldrb	r0, [r5, #0]
 801354a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801354e:	2858      	cmp	r0, #88	@ 0x58
 8013550:	d108      	bne.n	8013564 <_strtoul_l.isra.0+0x48>
 8013552:	786c      	ldrb	r4, [r5, #1]
 8013554:	3502      	adds	r5, #2
 8013556:	2310      	movs	r3, #16
 8013558:	e00a      	b.n	8013570 <_strtoul_l.isra.0+0x54>
 801355a:	2c2b      	cmp	r4, #43	@ 0x2b
 801355c:	bf04      	itt	eq
 801355e:	782c      	ldrbeq	r4, [r5, #0]
 8013560:	1c85      	addeq	r5, r0, #2
 8013562:	e7ec      	b.n	801353e <_strtoul_l.isra.0+0x22>
 8013564:	2b00      	cmp	r3, #0
 8013566:	d1f6      	bne.n	8013556 <_strtoul_l.isra.0+0x3a>
 8013568:	2c30      	cmp	r4, #48	@ 0x30
 801356a:	bf14      	ite	ne
 801356c:	230a      	movne	r3, #10
 801356e:	2308      	moveq	r3, #8
 8013570:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013574:	2600      	movs	r6, #0
 8013576:	fbb8 f8f3 	udiv	r8, r8, r3
 801357a:	fb03 f908 	mul.w	r9, r3, r8
 801357e:	ea6f 0909 	mvn.w	r9, r9
 8013582:	4630      	mov	r0, r6
 8013584:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8013588:	f1bc 0f09 	cmp.w	ip, #9
 801358c:	d810      	bhi.n	80135b0 <_strtoul_l.isra.0+0x94>
 801358e:	4664      	mov	r4, ip
 8013590:	42a3      	cmp	r3, r4
 8013592:	dd1e      	ble.n	80135d2 <_strtoul_l.isra.0+0xb6>
 8013594:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8013598:	d007      	beq.n	80135aa <_strtoul_l.isra.0+0x8e>
 801359a:	4580      	cmp	r8, r0
 801359c:	d316      	bcc.n	80135cc <_strtoul_l.isra.0+0xb0>
 801359e:	d101      	bne.n	80135a4 <_strtoul_l.isra.0+0x88>
 80135a0:	45a1      	cmp	r9, r4
 80135a2:	db13      	blt.n	80135cc <_strtoul_l.isra.0+0xb0>
 80135a4:	fb00 4003 	mla	r0, r0, r3, r4
 80135a8:	2601      	movs	r6, #1
 80135aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80135ae:	e7e9      	b.n	8013584 <_strtoul_l.isra.0+0x68>
 80135b0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80135b4:	f1bc 0f19 	cmp.w	ip, #25
 80135b8:	d801      	bhi.n	80135be <_strtoul_l.isra.0+0xa2>
 80135ba:	3c37      	subs	r4, #55	@ 0x37
 80135bc:	e7e8      	b.n	8013590 <_strtoul_l.isra.0+0x74>
 80135be:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80135c2:	f1bc 0f19 	cmp.w	ip, #25
 80135c6:	d804      	bhi.n	80135d2 <_strtoul_l.isra.0+0xb6>
 80135c8:	3c57      	subs	r4, #87	@ 0x57
 80135ca:	e7e1      	b.n	8013590 <_strtoul_l.isra.0+0x74>
 80135cc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80135d0:	e7eb      	b.n	80135aa <_strtoul_l.isra.0+0x8e>
 80135d2:	1c73      	adds	r3, r6, #1
 80135d4:	d106      	bne.n	80135e4 <_strtoul_l.isra.0+0xc8>
 80135d6:	2322      	movs	r3, #34	@ 0x22
 80135d8:	f8ce 3000 	str.w	r3, [lr]
 80135dc:	4630      	mov	r0, r6
 80135de:	b932      	cbnz	r2, 80135ee <_strtoul_l.isra.0+0xd2>
 80135e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135e4:	b107      	cbz	r7, 80135e8 <_strtoul_l.isra.0+0xcc>
 80135e6:	4240      	negs	r0, r0
 80135e8:	2a00      	cmp	r2, #0
 80135ea:	d0f9      	beq.n	80135e0 <_strtoul_l.isra.0+0xc4>
 80135ec:	b106      	cbz	r6, 80135f0 <_strtoul_l.isra.0+0xd4>
 80135ee:	1e69      	subs	r1, r5, #1
 80135f0:	6011      	str	r1, [r2, #0]
 80135f2:	e7f5      	b.n	80135e0 <_strtoul_l.isra.0+0xc4>
 80135f4:	0801570f 	.word	0x0801570f

080135f8 <strtoul>:
 80135f8:	4613      	mov	r3, r2
 80135fa:	460a      	mov	r2, r1
 80135fc:	4601      	mov	r1, r0
 80135fe:	4802      	ldr	r0, [pc, #8]	@ (8013608 <strtoul+0x10>)
 8013600:	6800      	ldr	r0, [r0, #0]
 8013602:	f7ff bf8b 	b.w	801351c <_strtoul_l.isra.0>
 8013606:	bf00      	nop
 8013608:	20000278 	.word	0x20000278

0801360c <std>:
 801360c:	2300      	movs	r3, #0
 801360e:	b510      	push	{r4, lr}
 8013610:	4604      	mov	r4, r0
 8013612:	e9c0 3300 	strd	r3, r3, [r0]
 8013616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801361a:	6083      	str	r3, [r0, #8]
 801361c:	8181      	strh	r1, [r0, #12]
 801361e:	6643      	str	r3, [r0, #100]	@ 0x64
 8013620:	81c2      	strh	r2, [r0, #14]
 8013622:	6183      	str	r3, [r0, #24]
 8013624:	4619      	mov	r1, r3
 8013626:	2208      	movs	r2, #8
 8013628:	305c      	adds	r0, #92	@ 0x5c
 801362a:	f000 f9a3 	bl	8013974 <memset>
 801362e:	4b0d      	ldr	r3, [pc, #52]	@ (8013664 <std+0x58>)
 8013630:	6263      	str	r3, [r4, #36]	@ 0x24
 8013632:	4b0d      	ldr	r3, [pc, #52]	@ (8013668 <std+0x5c>)
 8013634:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013636:	4b0d      	ldr	r3, [pc, #52]	@ (801366c <std+0x60>)
 8013638:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801363a:	4b0d      	ldr	r3, [pc, #52]	@ (8013670 <std+0x64>)
 801363c:	6323      	str	r3, [r4, #48]	@ 0x30
 801363e:	4b0d      	ldr	r3, [pc, #52]	@ (8013674 <std+0x68>)
 8013640:	6224      	str	r4, [r4, #32]
 8013642:	429c      	cmp	r4, r3
 8013644:	d006      	beq.n	8013654 <std+0x48>
 8013646:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801364a:	4294      	cmp	r4, r2
 801364c:	d002      	beq.n	8013654 <std+0x48>
 801364e:	33d0      	adds	r3, #208	@ 0xd0
 8013650:	429c      	cmp	r4, r3
 8013652:	d105      	bne.n	8013660 <std+0x54>
 8013654:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801365c:	f000 ba5a 	b.w	8013b14 <__retarget_lock_init_recursive>
 8013660:	bd10      	pop	{r4, pc}
 8013662:	bf00      	nop
 8013664:	08013821 	.word	0x08013821
 8013668:	08013843 	.word	0x08013843
 801366c:	0801387b 	.word	0x0801387b
 8013670:	0801389f 	.word	0x0801389f
 8013674:	2000dc30 	.word	0x2000dc30

08013678 <stdio_exit_handler>:
 8013678:	4a02      	ldr	r2, [pc, #8]	@ (8013684 <stdio_exit_handler+0xc>)
 801367a:	4903      	ldr	r1, [pc, #12]	@ (8013688 <stdio_exit_handler+0x10>)
 801367c:	4803      	ldr	r0, [pc, #12]	@ (801368c <stdio_exit_handler+0x14>)
 801367e:	f000 b869 	b.w	8013754 <_fwalk_sglue>
 8013682:	bf00      	nop
 8013684:	2000026c 	.word	0x2000026c
 8013688:	08014595 	.word	0x08014595
 801368c:	2000027c 	.word	0x2000027c

08013690 <cleanup_stdio>:
 8013690:	6841      	ldr	r1, [r0, #4]
 8013692:	4b0c      	ldr	r3, [pc, #48]	@ (80136c4 <cleanup_stdio+0x34>)
 8013694:	4299      	cmp	r1, r3
 8013696:	b510      	push	{r4, lr}
 8013698:	4604      	mov	r4, r0
 801369a:	d001      	beq.n	80136a0 <cleanup_stdio+0x10>
 801369c:	f000 ff7a 	bl	8014594 <_fflush_r>
 80136a0:	68a1      	ldr	r1, [r4, #8]
 80136a2:	4b09      	ldr	r3, [pc, #36]	@ (80136c8 <cleanup_stdio+0x38>)
 80136a4:	4299      	cmp	r1, r3
 80136a6:	d002      	beq.n	80136ae <cleanup_stdio+0x1e>
 80136a8:	4620      	mov	r0, r4
 80136aa:	f000 ff73 	bl	8014594 <_fflush_r>
 80136ae:	68e1      	ldr	r1, [r4, #12]
 80136b0:	4b06      	ldr	r3, [pc, #24]	@ (80136cc <cleanup_stdio+0x3c>)
 80136b2:	4299      	cmp	r1, r3
 80136b4:	d004      	beq.n	80136c0 <cleanup_stdio+0x30>
 80136b6:	4620      	mov	r0, r4
 80136b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136bc:	f000 bf6a 	b.w	8014594 <_fflush_r>
 80136c0:	bd10      	pop	{r4, pc}
 80136c2:	bf00      	nop
 80136c4:	2000dc30 	.word	0x2000dc30
 80136c8:	2000dc98 	.word	0x2000dc98
 80136cc:	2000dd00 	.word	0x2000dd00

080136d0 <global_stdio_init.part.0>:
 80136d0:	b510      	push	{r4, lr}
 80136d2:	4b0b      	ldr	r3, [pc, #44]	@ (8013700 <global_stdio_init.part.0+0x30>)
 80136d4:	4c0b      	ldr	r4, [pc, #44]	@ (8013704 <global_stdio_init.part.0+0x34>)
 80136d6:	4a0c      	ldr	r2, [pc, #48]	@ (8013708 <global_stdio_init.part.0+0x38>)
 80136d8:	601a      	str	r2, [r3, #0]
 80136da:	4620      	mov	r0, r4
 80136dc:	2200      	movs	r2, #0
 80136de:	2104      	movs	r1, #4
 80136e0:	f7ff ff94 	bl	801360c <std>
 80136e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80136e8:	2201      	movs	r2, #1
 80136ea:	2109      	movs	r1, #9
 80136ec:	f7ff ff8e 	bl	801360c <std>
 80136f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80136f4:	2202      	movs	r2, #2
 80136f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136fa:	2112      	movs	r1, #18
 80136fc:	f7ff bf86 	b.w	801360c <std>
 8013700:	2000dd68 	.word	0x2000dd68
 8013704:	2000dc30 	.word	0x2000dc30
 8013708:	08013679 	.word	0x08013679

0801370c <__sfp_lock_acquire>:
 801370c:	4801      	ldr	r0, [pc, #4]	@ (8013714 <__sfp_lock_acquire+0x8>)
 801370e:	f000 ba02 	b.w	8013b16 <__retarget_lock_acquire_recursive>
 8013712:	bf00      	nop
 8013714:	2000dd72 	.word	0x2000dd72

08013718 <__sfp_lock_release>:
 8013718:	4801      	ldr	r0, [pc, #4]	@ (8013720 <__sfp_lock_release+0x8>)
 801371a:	f000 b9fd 	b.w	8013b18 <__retarget_lock_release_recursive>
 801371e:	bf00      	nop
 8013720:	2000dd72 	.word	0x2000dd72

08013724 <__sinit>:
 8013724:	b510      	push	{r4, lr}
 8013726:	4604      	mov	r4, r0
 8013728:	f7ff fff0 	bl	801370c <__sfp_lock_acquire>
 801372c:	6a23      	ldr	r3, [r4, #32]
 801372e:	b11b      	cbz	r3, 8013738 <__sinit+0x14>
 8013730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013734:	f7ff bff0 	b.w	8013718 <__sfp_lock_release>
 8013738:	4b04      	ldr	r3, [pc, #16]	@ (801374c <__sinit+0x28>)
 801373a:	6223      	str	r3, [r4, #32]
 801373c:	4b04      	ldr	r3, [pc, #16]	@ (8013750 <__sinit+0x2c>)
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d1f5      	bne.n	8013730 <__sinit+0xc>
 8013744:	f7ff ffc4 	bl	80136d0 <global_stdio_init.part.0>
 8013748:	e7f2      	b.n	8013730 <__sinit+0xc>
 801374a:	bf00      	nop
 801374c:	08013691 	.word	0x08013691
 8013750:	2000dd68 	.word	0x2000dd68

08013754 <_fwalk_sglue>:
 8013754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013758:	4607      	mov	r7, r0
 801375a:	4688      	mov	r8, r1
 801375c:	4614      	mov	r4, r2
 801375e:	2600      	movs	r6, #0
 8013760:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013764:	f1b9 0901 	subs.w	r9, r9, #1
 8013768:	d505      	bpl.n	8013776 <_fwalk_sglue+0x22>
 801376a:	6824      	ldr	r4, [r4, #0]
 801376c:	2c00      	cmp	r4, #0
 801376e:	d1f7      	bne.n	8013760 <_fwalk_sglue+0xc>
 8013770:	4630      	mov	r0, r6
 8013772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013776:	89ab      	ldrh	r3, [r5, #12]
 8013778:	2b01      	cmp	r3, #1
 801377a:	d907      	bls.n	801378c <_fwalk_sglue+0x38>
 801377c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013780:	3301      	adds	r3, #1
 8013782:	d003      	beq.n	801378c <_fwalk_sglue+0x38>
 8013784:	4629      	mov	r1, r5
 8013786:	4638      	mov	r0, r7
 8013788:	47c0      	blx	r8
 801378a:	4306      	orrs	r6, r0
 801378c:	3568      	adds	r5, #104	@ 0x68
 801378e:	e7e9      	b.n	8013764 <_fwalk_sglue+0x10>

08013790 <iprintf>:
 8013790:	b40f      	push	{r0, r1, r2, r3}
 8013792:	b507      	push	{r0, r1, r2, lr}
 8013794:	4906      	ldr	r1, [pc, #24]	@ (80137b0 <iprintf+0x20>)
 8013796:	ab04      	add	r3, sp, #16
 8013798:	6808      	ldr	r0, [r1, #0]
 801379a:	f853 2b04 	ldr.w	r2, [r3], #4
 801379e:	6881      	ldr	r1, [r0, #8]
 80137a0:	9301      	str	r3, [sp, #4]
 80137a2:	f000 fbcf 	bl	8013f44 <_vfiprintf_r>
 80137a6:	b003      	add	sp, #12
 80137a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80137ac:	b004      	add	sp, #16
 80137ae:	4770      	bx	lr
 80137b0:	20000278 	.word	0x20000278

080137b4 <sniprintf>:
 80137b4:	b40c      	push	{r2, r3}
 80137b6:	b530      	push	{r4, r5, lr}
 80137b8:	4b18      	ldr	r3, [pc, #96]	@ (801381c <sniprintf+0x68>)
 80137ba:	1e0c      	subs	r4, r1, #0
 80137bc:	681d      	ldr	r5, [r3, #0]
 80137be:	b09d      	sub	sp, #116	@ 0x74
 80137c0:	da08      	bge.n	80137d4 <sniprintf+0x20>
 80137c2:	238b      	movs	r3, #139	@ 0x8b
 80137c4:	602b      	str	r3, [r5, #0]
 80137c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80137ca:	b01d      	add	sp, #116	@ 0x74
 80137cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80137d0:	b002      	add	sp, #8
 80137d2:	4770      	bx	lr
 80137d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80137d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80137dc:	f04f 0300 	mov.w	r3, #0
 80137e0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80137e2:	bf14      	ite	ne
 80137e4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80137e8:	4623      	moveq	r3, r4
 80137ea:	9304      	str	r3, [sp, #16]
 80137ec:	9307      	str	r3, [sp, #28]
 80137ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80137f2:	9002      	str	r0, [sp, #8]
 80137f4:	9006      	str	r0, [sp, #24]
 80137f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80137fa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80137fc:	ab21      	add	r3, sp, #132	@ 0x84
 80137fe:	a902      	add	r1, sp, #8
 8013800:	4628      	mov	r0, r5
 8013802:	9301      	str	r3, [sp, #4]
 8013804:	f000 fa78 	bl	8013cf8 <_svfiprintf_r>
 8013808:	1c43      	adds	r3, r0, #1
 801380a:	bfbc      	itt	lt
 801380c:	238b      	movlt	r3, #139	@ 0x8b
 801380e:	602b      	strlt	r3, [r5, #0]
 8013810:	2c00      	cmp	r4, #0
 8013812:	d0da      	beq.n	80137ca <sniprintf+0x16>
 8013814:	9b02      	ldr	r3, [sp, #8]
 8013816:	2200      	movs	r2, #0
 8013818:	701a      	strb	r2, [r3, #0]
 801381a:	e7d6      	b.n	80137ca <sniprintf+0x16>
 801381c:	20000278 	.word	0x20000278

08013820 <__sread>:
 8013820:	b510      	push	{r4, lr}
 8013822:	460c      	mov	r4, r1
 8013824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013828:	f000 f916 	bl	8013a58 <_read_r>
 801382c:	2800      	cmp	r0, #0
 801382e:	bfab      	itete	ge
 8013830:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013832:	89a3      	ldrhlt	r3, [r4, #12]
 8013834:	181b      	addge	r3, r3, r0
 8013836:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801383a:	bfac      	ite	ge
 801383c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801383e:	81a3      	strhlt	r3, [r4, #12]
 8013840:	bd10      	pop	{r4, pc}

08013842 <__swrite>:
 8013842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013846:	461f      	mov	r7, r3
 8013848:	898b      	ldrh	r3, [r1, #12]
 801384a:	05db      	lsls	r3, r3, #23
 801384c:	4605      	mov	r5, r0
 801384e:	460c      	mov	r4, r1
 8013850:	4616      	mov	r6, r2
 8013852:	d505      	bpl.n	8013860 <__swrite+0x1e>
 8013854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013858:	2302      	movs	r3, #2
 801385a:	2200      	movs	r2, #0
 801385c:	f000 f8ea 	bl	8013a34 <_lseek_r>
 8013860:	89a3      	ldrh	r3, [r4, #12]
 8013862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013866:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801386a:	81a3      	strh	r3, [r4, #12]
 801386c:	4632      	mov	r2, r6
 801386e:	463b      	mov	r3, r7
 8013870:	4628      	mov	r0, r5
 8013872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013876:	f000 b911 	b.w	8013a9c <_write_r>

0801387a <__sseek>:
 801387a:	b510      	push	{r4, lr}
 801387c:	460c      	mov	r4, r1
 801387e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013882:	f000 f8d7 	bl	8013a34 <_lseek_r>
 8013886:	1c43      	adds	r3, r0, #1
 8013888:	89a3      	ldrh	r3, [r4, #12]
 801388a:	bf15      	itete	ne
 801388c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801388e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013892:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013896:	81a3      	strheq	r3, [r4, #12]
 8013898:	bf18      	it	ne
 801389a:	81a3      	strhne	r3, [r4, #12]
 801389c:	bd10      	pop	{r4, pc}

0801389e <__sclose>:
 801389e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138a2:	f000 b8b7 	b.w	8013a14 <_close_r>

080138a6 <_vsniprintf_r>:
 80138a6:	b530      	push	{r4, r5, lr}
 80138a8:	4614      	mov	r4, r2
 80138aa:	2c00      	cmp	r4, #0
 80138ac:	b09b      	sub	sp, #108	@ 0x6c
 80138ae:	4605      	mov	r5, r0
 80138b0:	461a      	mov	r2, r3
 80138b2:	da05      	bge.n	80138c0 <_vsniprintf_r+0x1a>
 80138b4:	238b      	movs	r3, #139	@ 0x8b
 80138b6:	6003      	str	r3, [r0, #0]
 80138b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80138bc:	b01b      	add	sp, #108	@ 0x6c
 80138be:	bd30      	pop	{r4, r5, pc}
 80138c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80138c4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80138c8:	f04f 0300 	mov.w	r3, #0
 80138cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80138ce:	bf14      	ite	ne
 80138d0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80138d4:	4623      	moveq	r3, r4
 80138d6:	9302      	str	r3, [sp, #8]
 80138d8:	9305      	str	r3, [sp, #20]
 80138da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80138de:	9100      	str	r1, [sp, #0]
 80138e0:	9104      	str	r1, [sp, #16]
 80138e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80138e6:	4669      	mov	r1, sp
 80138e8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80138ea:	f000 fa05 	bl	8013cf8 <_svfiprintf_r>
 80138ee:	1c43      	adds	r3, r0, #1
 80138f0:	bfbc      	itt	lt
 80138f2:	238b      	movlt	r3, #139	@ 0x8b
 80138f4:	602b      	strlt	r3, [r5, #0]
 80138f6:	2c00      	cmp	r4, #0
 80138f8:	d0e0      	beq.n	80138bc <_vsniprintf_r+0x16>
 80138fa:	9b00      	ldr	r3, [sp, #0]
 80138fc:	2200      	movs	r2, #0
 80138fe:	701a      	strb	r2, [r3, #0]
 8013900:	e7dc      	b.n	80138bc <_vsniprintf_r+0x16>
	...

08013904 <vsniprintf>:
 8013904:	b507      	push	{r0, r1, r2, lr}
 8013906:	9300      	str	r3, [sp, #0]
 8013908:	4613      	mov	r3, r2
 801390a:	460a      	mov	r2, r1
 801390c:	4601      	mov	r1, r0
 801390e:	4803      	ldr	r0, [pc, #12]	@ (801391c <vsniprintf+0x18>)
 8013910:	6800      	ldr	r0, [r0, #0]
 8013912:	f7ff ffc8 	bl	80138a6 <_vsniprintf_r>
 8013916:	b003      	add	sp, #12
 8013918:	f85d fb04 	ldr.w	pc, [sp], #4
 801391c:	20000278 	.word	0x20000278

08013920 <memcmp>:
 8013920:	b510      	push	{r4, lr}
 8013922:	3901      	subs	r1, #1
 8013924:	4402      	add	r2, r0
 8013926:	4290      	cmp	r0, r2
 8013928:	d101      	bne.n	801392e <memcmp+0xe>
 801392a:	2000      	movs	r0, #0
 801392c:	e005      	b.n	801393a <memcmp+0x1a>
 801392e:	7803      	ldrb	r3, [r0, #0]
 8013930:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013934:	42a3      	cmp	r3, r4
 8013936:	d001      	beq.n	801393c <memcmp+0x1c>
 8013938:	1b18      	subs	r0, r3, r4
 801393a:	bd10      	pop	{r4, pc}
 801393c:	3001      	adds	r0, #1
 801393e:	e7f2      	b.n	8013926 <memcmp+0x6>

08013940 <memmove>:
 8013940:	4288      	cmp	r0, r1
 8013942:	b510      	push	{r4, lr}
 8013944:	eb01 0402 	add.w	r4, r1, r2
 8013948:	d902      	bls.n	8013950 <memmove+0x10>
 801394a:	4284      	cmp	r4, r0
 801394c:	4623      	mov	r3, r4
 801394e:	d807      	bhi.n	8013960 <memmove+0x20>
 8013950:	1e43      	subs	r3, r0, #1
 8013952:	42a1      	cmp	r1, r4
 8013954:	d008      	beq.n	8013968 <memmove+0x28>
 8013956:	f811 2b01 	ldrb.w	r2, [r1], #1
 801395a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801395e:	e7f8      	b.n	8013952 <memmove+0x12>
 8013960:	4402      	add	r2, r0
 8013962:	4601      	mov	r1, r0
 8013964:	428a      	cmp	r2, r1
 8013966:	d100      	bne.n	801396a <memmove+0x2a>
 8013968:	bd10      	pop	{r4, pc}
 801396a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801396e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013972:	e7f7      	b.n	8013964 <memmove+0x24>

08013974 <memset>:
 8013974:	4402      	add	r2, r0
 8013976:	4603      	mov	r3, r0
 8013978:	4293      	cmp	r3, r2
 801397a:	d100      	bne.n	801397e <memset+0xa>
 801397c:	4770      	bx	lr
 801397e:	f803 1b01 	strb.w	r1, [r3], #1
 8013982:	e7f9      	b.n	8013978 <memset+0x4>

08013984 <strchr>:
 8013984:	b2c9      	uxtb	r1, r1
 8013986:	4603      	mov	r3, r0
 8013988:	4618      	mov	r0, r3
 801398a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801398e:	b112      	cbz	r2, 8013996 <strchr+0x12>
 8013990:	428a      	cmp	r2, r1
 8013992:	d1f9      	bne.n	8013988 <strchr+0x4>
 8013994:	4770      	bx	lr
 8013996:	2900      	cmp	r1, #0
 8013998:	bf18      	it	ne
 801399a:	2000      	movne	r0, #0
 801399c:	4770      	bx	lr

0801399e <strncmp>:
 801399e:	b510      	push	{r4, lr}
 80139a0:	b16a      	cbz	r2, 80139be <strncmp+0x20>
 80139a2:	3901      	subs	r1, #1
 80139a4:	1884      	adds	r4, r0, r2
 80139a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80139aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80139ae:	429a      	cmp	r2, r3
 80139b0:	d103      	bne.n	80139ba <strncmp+0x1c>
 80139b2:	42a0      	cmp	r0, r4
 80139b4:	d001      	beq.n	80139ba <strncmp+0x1c>
 80139b6:	2a00      	cmp	r2, #0
 80139b8:	d1f5      	bne.n	80139a6 <strncmp+0x8>
 80139ba:	1ad0      	subs	r0, r2, r3
 80139bc:	bd10      	pop	{r4, pc}
 80139be:	4610      	mov	r0, r2
 80139c0:	e7fc      	b.n	80139bc <strncmp+0x1e>

080139c2 <strncpy>:
 80139c2:	b510      	push	{r4, lr}
 80139c4:	3901      	subs	r1, #1
 80139c6:	4603      	mov	r3, r0
 80139c8:	b132      	cbz	r2, 80139d8 <strncpy+0x16>
 80139ca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80139ce:	f803 4b01 	strb.w	r4, [r3], #1
 80139d2:	3a01      	subs	r2, #1
 80139d4:	2c00      	cmp	r4, #0
 80139d6:	d1f7      	bne.n	80139c8 <strncpy+0x6>
 80139d8:	441a      	add	r2, r3
 80139da:	2100      	movs	r1, #0
 80139dc:	4293      	cmp	r3, r2
 80139de:	d100      	bne.n	80139e2 <strncpy+0x20>
 80139e0:	bd10      	pop	{r4, pc}
 80139e2:	f803 1b01 	strb.w	r1, [r3], #1
 80139e6:	e7f9      	b.n	80139dc <strncpy+0x1a>

080139e8 <strstr>:
 80139e8:	780a      	ldrb	r2, [r1, #0]
 80139ea:	b570      	push	{r4, r5, r6, lr}
 80139ec:	b96a      	cbnz	r2, 8013a0a <strstr+0x22>
 80139ee:	bd70      	pop	{r4, r5, r6, pc}
 80139f0:	429a      	cmp	r2, r3
 80139f2:	d109      	bne.n	8013a08 <strstr+0x20>
 80139f4:	460c      	mov	r4, r1
 80139f6:	4605      	mov	r5, r0
 80139f8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d0f6      	beq.n	80139ee <strstr+0x6>
 8013a00:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8013a04:	429e      	cmp	r6, r3
 8013a06:	d0f7      	beq.n	80139f8 <strstr+0x10>
 8013a08:	3001      	adds	r0, #1
 8013a0a:	7803      	ldrb	r3, [r0, #0]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d1ef      	bne.n	80139f0 <strstr+0x8>
 8013a10:	4618      	mov	r0, r3
 8013a12:	e7ec      	b.n	80139ee <strstr+0x6>

08013a14 <_close_r>:
 8013a14:	b538      	push	{r3, r4, r5, lr}
 8013a16:	4d06      	ldr	r5, [pc, #24]	@ (8013a30 <_close_r+0x1c>)
 8013a18:	2300      	movs	r3, #0
 8013a1a:	4604      	mov	r4, r0
 8013a1c:	4608      	mov	r0, r1
 8013a1e:	602b      	str	r3, [r5, #0]
 8013a20:	f7ed fd48 	bl	80014b4 <_close>
 8013a24:	1c43      	adds	r3, r0, #1
 8013a26:	d102      	bne.n	8013a2e <_close_r+0x1a>
 8013a28:	682b      	ldr	r3, [r5, #0]
 8013a2a:	b103      	cbz	r3, 8013a2e <_close_r+0x1a>
 8013a2c:	6023      	str	r3, [r4, #0]
 8013a2e:	bd38      	pop	{r3, r4, r5, pc}
 8013a30:	2000dd6c 	.word	0x2000dd6c

08013a34 <_lseek_r>:
 8013a34:	b538      	push	{r3, r4, r5, lr}
 8013a36:	4d07      	ldr	r5, [pc, #28]	@ (8013a54 <_lseek_r+0x20>)
 8013a38:	4604      	mov	r4, r0
 8013a3a:	4608      	mov	r0, r1
 8013a3c:	4611      	mov	r1, r2
 8013a3e:	2200      	movs	r2, #0
 8013a40:	602a      	str	r2, [r5, #0]
 8013a42:	461a      	mov	r2, r3
 8013a44:	f7ed fd5d 	bl	8001502 <_lseek>
 8013a48:	1c43      	adds	r3, r0, #1
 8013a4a:	d102      	bne.n	8013a52 <_lseek_r+0x1e>
 8013a4c:	682b      	ldr	r3, [r5, #0]
 8013a4e:	b103      	cbz	r3, 8013a52 <_lseek_r+0x1e>
 8013a50:	6023      	str	r3, [r4, #0]
 8013a52:	bd38      	pop	{r3, r4, r5, pc}
 8013a54:	2000dd6c 	.word	0x2000dd6c

08013a58 <_read_r>:
 8013a58:	b538      	push	{r3, r4, r5, lr}
 8013a5a:	4d07      	ldr	r5, [pc, #28]	@ (8013a78 <_read_r+0x20>)
 8013a5c:	4604      	mov	r4, r0
 8013a5e:	4608      	mov	r0, r1
 8013a60:	4611      	mov	r1, r2
 8013a62:	2200      	movs	r2, #0
 8013a64:	602a      	str	r2, [r5, #0]
 8013a66:	461a      	mov	r2, r3
 8013a68:	f7ed fceb 	bl	8001442 <_read>
 8013a6c:	1c43      	adds	r3, r0, #1
 8013a6e:	d102      	bne.n	8013a76 <_read_r+0x1e>
 8013a70:	682b      	ldr	r3, [r5, #0]
 8013a72:	b103      	cbz	r3, 8013a76 <_read_r+0x1e>
 8013a74:	6023      	str	r3, [r4, #0]
 8013a76:	bd38      	pop	{r3, r4, r5, pc}
 8013a78:	2000dd6c 	.word	0x2000dd6c

08013a7c <_sbrk_r>:
 8013a7c:	b538      	push	{r3, r4, r5, lr}
 8013a7e:	4d06      	ldr	r5, [pc, #24]	@ (8013a98 <_sbrk_r+0x1c>)
 8013a80:	2300      	movs	r3, #0
 8013a82:	4604      	mov	r4, r0
 8013a84:	4608      	mov	r0, r1
 8013a86:	602b      	str	r3, [r5, #0]
 8013a88:	f7ed fd48 	bl	800151c <_sbrk>
 8013a8c:	1c43      	adds	r3, r0, #1
 8013a8e:	d102      	bne.n	8013a96 <_sbrk_r+0x1a>
 8013a90:	682b      	ldr	r3, [r5, #0]
 8013a92:	b103      	cbz	r3, 8013a96 <_sbrk_r+0x1a>
 8013a94:	6023      	str	r3, [r4, #0]
 8013a96:	bd38      	pop	{r3, r4, r5, pc}
 8013a98:	2000dd6c 	.word	0x2000dd6c

08013a9c <_write_r>:
 8013a9c:	b538      	push	{r3, r4, r5, lr}
 8013a9e:	4d07      	ldr	r5, [pc, #28]	@ (8013abc <_write_r+0x20>)
 8013aa0:	4604      	mov	r4, r0
 8013aa2:	4608      	mov	r0, r1
 8013aa4:	4611      	mov	r1, r2
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	602a      	str	r2, [r5, #0]
 8013aaa:	461a      	mov	r2, r3
 8013aac:	f7ed fce6 	bl	800147c <_write>
 8013ab0:	1c43      	adds	r3, r0, #1
 8013ab2:	d102      	bne.n	8013aba <_write_r+0x1e>
 8013ab4:	682b      	ldr	r3, [r5, #0]
 8013ab6:	b103      	cbz	r3, 8013aba <_write_r+0x1e>
 8013ab8:	6023      	str	r3, [r4, #0]
 8013aba:	bd38      	pop	{r3, r4, r5, pc}
 8013abc:	2000dd6c 	.word	0x2000dd6c

08013ac0 <__errno>:
 8013ac0:	4b01      	ldr	r3, [pc, #4]	@ (8013ac8 <__errno+0x8>)
 8013ac2:	6818      	ldr	r0, [r3, #0]
 8013ac4:	4770      	bx	lr
 8013ac6:	bf00      	nop
 8013ac8:	20000278 	.word	0x20000278

08013acc <__libc_init_array>:
 8013acc:	b570      	push	{r4, r5, r6, lr}
 8013ace:	4d0d      	ldr	r5, [pc, #52]	@ (8013b04 <__libc_init_array+0x38>)
 8013ad0:	4c0d      	ldr	r4, [pc, #52]	@ (8013b08 <__libc_init_array+0x3c>)
 8013ad2:	1b64      	subs	r4, r4, r5
 8013ad4:	10a4      	asrs	r4, r4, #2
 8013ad6:	2600      	movs	r6, #0
 8013ad8:	42a6      	cmp	r6, r4
 8013ada:	d109      	bne.n	8013af0 <__libc_init_array+0x24>
 8013adc:	4d0b      	ldr	r5, [pc, #44]	@ (8013b0c <__libc_init_array+0x40>)
 8013ade:	4c0c      	ldr	r4, [pc, #48]	@ (8013b10 <__libc_init_array+0x44>)
 8013ae0:	f000 fef6 	bl	80148d0 <_init>
 8013ae4:	1b64      	subs	r4, r4, r5
 8013ae6:	10a4      	asrs	r4, r4, #2
 8013ae8:	2600      	movs	r6, #0
 8013aea:	42a6      	cmp	r6, r4
 8013aec:	d105      	bne.n	8013afa <__libc_init_array+0x2e>
 8013aee:	bd70      	pop	{r4, r5, r6, pc}
 8013af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8013af4:	4798      	blx	r3
 8013af6:	3601      	adds	r6, #1
 8013af8:	e7ee      	b.n	8013ad8 <__libc_init_array+0xc>
 8013afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8013afe:	4798      	blx	r3
 8013b00:	3601      	adds	r6, #1
 8013b02:	e7f2      	b.n	8013aea <__libc_init_array+0x1e>
 8013b04:	08015818 	.word	0x08015818
 8013b08:	08015818 	.word	0x08015818
 8013b0c:	08015818 	.word	0x08015818
 8013b10:	08015820 	.word	0x08015820

08013b14 <__retarget_lock_init_recursive>:
 8013b14:	4770      	bx	lr

08013b16 <__retarget_lock_acquire_recursive>:
 8013b16:	4770      	bx	lr

08013b18 <__retarget_lock_release_recursive>:
 8013b18:	4770      	bx	lr

08013b1a <strcpy>:
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b20:	f803 2b01 	strb.w	r2, [r3], #1
 8013b24:	2a00      	cmp	r2, #0
 8013b26:	d1f9      	bne.n	8013b1c <strcpy+0x2>
 8013b28:	4770      	bx	lr

08013b2a <memcpy>:
 8013b2a:	440a      	add	r2, r1
 8013b2c:	4291      	cmp	r1, r2
 8013b2e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013b32:	d100      	bne.n	8013b36 <memcpy+0xc>
 8013b34:	4770      	bx	lr
 8013b36:	b510      	push	{r4, lr}
 8013b38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013b40:	4291      	cmp	r1, r2
 8013b42:	d1f9      	bne.n	8013b38 <memcpy+0xe>
 8013b44:	bd10      	pop	{r4, pc}
	...

08013b48 <__assert_func>:
 8013b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b4a:	4614      	mov	r4, r2
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	4b09      	ldr	r3, [pc, #36]	@ (8013b74 <__assert_func+0x2c>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	4605      	mov	r5, r0
 8013b54:	68d8      	ldr	r0, [r3, #12]
 8013b56:	b14c      	cbz	r4, 8013b6c <__assert_func+0x24>
 8013b58:	4b07      	ldr	r3, [pc, #28]	@ (8013b78 <__assert_func+0x30>)
 8013b5a:	9100      	str	r1, [sp, #0]
 8013b5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013b60:	4906      	ldr	r1, [pc, #24]	@ (8013b7c <__assert_func+0x34>)
 8013b62:	462b      	mov	r3, r5
 8013b64:	f000 fd3e 	bl	80145e4 <fiprintf>
 8013b68:	f000 fde2 	bl	8014730 <abort>
 8013b6c:	4b04      	ldr	r3, [pc, #16]	@ (8013b80 <__assert_func+0x38>)
 8013b6e:	461c      	mov	r4, r3
 8013b70:	e7f3      	b.n	8013b5a <__assert_func+0x12>
 8013b72:	bf00      	nop
 8013b74:	20000278 	.word	0x20000278
 8013b78:	0801569f 	.word	0x0801569f
 8013b7c:	080156ac 	.word	0x080156ac
 8013b80:	080156da 	.word	0x080156da

08013b84 <__env_lock>:
 8013b84:	4801      	ldr	r0, [pc, #4]	@ (8013b8c <__env_lock+0x8>)
 8013b86:	f7ff bfc6 	b.w	8013b16 <__retarget_lock_acquire_recursive>
 8013b8a:	bf00      	nop
 8013b8c:	2000dd70 	.word	0x2000dd70

08013b90 <__env_unlock>:
 8013b90:	4801      	ldr	r0, [pc, #4]	@ (8013b98 <__env_unlock+0x8>)
 8013b92:	f7ff bfc1 	b.w	8013b18 <__retarget_lock_release_recursive>
 8013b96:	bf00      	nop
 8013b98:	2000dd70 	.word	0x2000dd70

08013b9c <_free_r>:
 8013b9c:	b538      	push	{r3, r4, r5, lr}
 8013b9e:	4605      	mov	r5, r0
 8013ba0:	2900      	cmp	r1, #0
 8013ba2:	d041      	beq.n	8013c28 <_free_r+0x8c>
 8013ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ba8:	1f0c      	subs	r4, r1, #4
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	bfb8      	it	lt
 8013bae:	18e4      	addlt	r4, r4, r3
 8013bb0:	f7ff fc06 	bl	80133c0 <__malloc_lock>
 8013bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8013c2c <_free_r+0x90>)
 8013bb6:	6813      	ldr	r3, [r2, #0]
 8013bb8:	b933      	cbnz	r3, 8013bc8 <_free_r+0x2c>
 8013bba:	6063      	str	r3, [r4, #4]
 8013bbc:	6014      	str	r4, [r2, #0]
 8013bbe:	4628      	mov	r0, r5
 8013bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013bc4:	f7ff bc02 	b.w	80133cc <__malloc_unlock>
 8013bc8:	42a3      	cmp	r3, r4
 8013bca:	d908      	bls.n	8013bde <_free_r+0x42>
 8013bcc:	6820      	ldr	r0, [r4, #0]
 8013bce:	1821      	adds	r1, r4, r0
 8013bd0:	428b      	cmp	r3, r1
 8013bd2:	bf01      	itttt	eq
 8013bd4:	6819      	ldreq	r1, [r3, #0]
 8013bd6:	685b      	ldreq	r3, [r3, #4]
 8013bd8:	1809      	addeq	r1, r1, r0
 8013bda:	6021      	streq	r1, [r4, #0]
 8013bdc:	e7ed      	b.n	8013bba <_free_r+0x1e>
 8013bde:	461a      	mov	r2, r3
 8013be0:	685b      	ldr	r3, [r3, #4]
 8013be2:	b10b      	cbz	r3, 8013be8 <_free_r+0x4c>
 8013be4:	42a3      	cmp	r3, r4
 8013be6:	d9fa      	bls.n	8013bde <_free_r+0x42>
 8013be8:	6811      	ldr	r1, [r2, #0]
 8013bea:	1850      	adds	r0, r2, r1
 8013bec:	42a0      	cmp	r0, r4
 8013bee:	d10b      	bne.n	8013c08 <_free_r+0x6c>
 8013bf0:	6820      	ldr	r0, [r4, #0]
 8013bf2:	4401      	add	r1, r0
 8013bf4:	1850      	adds	r0, r2, r1
 8013bf6:	4283      	cmp	r3, r0
 8013bf8:	6011      	str	r1, [r2, #0]
 8013bfa:	d1e0      	bne.n	8013bbe <_free_r+0x22>
 8013bfc:	6818      	ldr	r0, [r3, #0]
 8013bfe:	685b      	ldr	r3, [r3, #4]
 8013c00:	6053      	str	r3, [r2, #4]
 8013c02:	4408      	add	r0, r1
 8013c04:	6010      	str	r0, [r2, #0]
 8013c06:	e7da      	b.n	8013bbe <_free_r+0x22>
 8013c08:	d902      	bls.n	8013c10 <_free_r+0x74>
 8013c0a:	230c      	movs	r3, #12
 8013c0c:	602b      	str	r3, [r5, #0]
 8013c0e:	e7d6      	b.n	8013bbe <_free_r+0x22>
 8013c10:	6820      	ldr	r0, [r4, #0]
 8013c12:	1821      	adds	r1, r4, r0
 8013c14:	428b      	cmp	r3, r1
 8013c16:	bf04      	itt	eq
 8013c18:	6819      	ldreq	r1, [r3, #0]
 8013c1a:	685b      	ldreq	r3, [r3, #4]
 8013c1c:	6063      	str	r3, [r4, #4]
 8013c1e:	bf04      	itt	eq
 8013c20:	1809      	addeq	r1, r1, r0
 8013c22:	6021      	streq	r1, [r4, #0]
 8013c24:	6054      	str	r4, [r2, #4]
 8013c26:	e7ca      	b.n	8013bbe <_free_r+0x22>
 8013c28:	bd38      	pop	{r3, r4, r5, pc}
 8013c2a:	bf00      	nop
 8013c2c:	2000dc2c 	.word	0x2000dc2c

08013c30 <_malloc_usable_size_r>:
 8013c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c34:	1f18      	subs	r0, r3, #4
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	bfbc      	itt	lt
 8013c3a:	580b      	ldrlt	r3, [r1, r0]
 8013c3c:	18c0      	addlt	r0, r0, r3
 8013c3e:	4770      	bx	lr

08013c40 <__ssputs_r>:
 8013c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c44:	688e      	ldr	r6, [r1, #8]
 8013c46:	461f      	mov	r7, r3
 8013c48:	42be      	cmp	r6, r7
 8013c4a:	680b      	ldr	r3, [r1, #0]
 8013c4c:	4682      	mov	sl, r0
 8013c4e:	460c      	mov	r4, r1
 8013c50:	4690      	mov	r8, r2
 8013c52:	d82d      	bhi.n	8013cb0 <__ssputs_r+0x70>
 8013c54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013c58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013c5c:	d026      	beq.n	8013cac <__ssputs_r+0x6c>
 8013c5e:	6965      	ldr	r5, [r4, #20]
 8013c60:	6909      	ldr	r1, [r1, #16]
 8013c62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013c66:	eba3 0901 	sub.w	r9, r3, r1
 8013c6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013c6e:	1c7b      	adds	r3, r7, #1
 8013c70:	444b      	add	r3, r9
 8013c72:	106d      	asrs	r5, r5, #1
 8013c74:	429d      	cmp	r5, r3
 8013c76:	bf38      	it	cc
 8013c78:	461d      	movcc	r5, r3
 8013c7a:	0553      	lsls	r3, r2, #21
 8013c7c:	d527      	bpl.n	8013cce <__ssputs_r+0x8e>
 8013c7e:	4629      	mov	r1, r5
 8013c80:	f7ff fb1e 	bl	80132c0 <_malloc_r>
 8013c84:	4606      	mov	r6, r0
 8013c86:	b360      	cbz	r0, 8013ce2 <__ssputs_r+0xa2>
 8013c88:	6921      	ldr	r1, [r4, #16]
 8013c8a:	464a      	mov	r2, r9
 8013c8c:	f7ff ff4d 	bl	8013b2a <memcpy>
 8013c90:	89a3      	ldrh	r3, [r4, #12]
 8013c92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013c96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c9a:	81a3      	strh	r3, [r4, #12]
 8013c9c:	6126      	str	r6, [r4, #16]
 8013c9e:	6165      	str	r5, [r4, #20]
 8013ca0:	444e      	add	r6, r9
 8013ca2:	eba5 0509 	sub.w	r5, r5, r9
 8013ca6:	6026      	str	r6, [r4, #0]
 8013ca8:	60a5      	str	r5, [r4, #8]
 8013caa:	463e      	mov	r6, r7
 8013cac:	42be      	cmp	r6, r7
 8013cae:	d900      	bls.n	8013cb2 <__ssputs_r+0x72>
 8013cb0:	463e      	mov	r6, r7
 8013cb2:	6820      	ldr	r0, [r4, #0]
 8013cb4:	4632      	mov	r2, r6
 8013cb6:	4641      	mov	r1, r8
 8013cb8:	f7ff fe42 	bl	8013940 <memmove>
 8013cbc:	68a3      	ldr	r3, [r4, #8]
 8013cbe:	1b9b      	subs	r3, r3, r6
 8013cc0:	60a3      	str	r3, [r4, #8]
 8013cc2:	6823      	ldr	r3, [r4, #0]
 8013cc4:	4433      	add	r3, r6
 8013cc6:	6023      	str	r3, [r4, #0]
 8013cc8:	2000      	movs	r0, #0
 8013cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cce:	462a      	mov	r2, r5
 8013cd0:	f7ff fbf6 	bl	80134c0 <_realloc_r>
 8013cd4:	4606      	mov	r6, r0
 8013cd6:	2800      	cmp	r0, #0
 8013cd8:	d1e0      	bne.n	8013c9c <__ssputs_r+0x5c>
 8013cda:	6921      	ldr	r1, [r4, #16]
 8013cdc:	4650      	mov	r0, sl
 8013cde:	f7ff ff5d 	bl	8013b9c <_free_r>
 8013ce2:	230c      	movs	r3, #12
 8013ce4:	f8ca 3000 	str.w	r3, [sl]
 8013ce8:	89a3      	ldrh	r3, [r4, #12]
 8013cea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013cee:	81a3      	strh	r3, [r4, #12]
 8013cf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013cf4:	e7e9      	b.n	8013cca <__ssputs_r+0x8a>
	...

08013cf8 <_svfiprintf_r>:
 8013cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cfc:	4698      	mov	r8, r3
 8013cfe:	898b      	ldrh	r3, [r1, #12]
 8013d00:	061b      	lsls	r3, r3, #24
 8013d02:	b09d      	sub	sp, #116	@ 0x74
 8013d04:	4607      	mov	r7, r0
 8013d06:	460d      	mov	r5, r1
 8013d08:	4614      	mov	r4, r2
 8013d0a:	d510      	bpl.n	8013d2e <_svfiprintf_r+0x36>
 8013d0c:	690b      	ldr	r3, [r1, #16]
 8013d0e:	b973      	cbnz	r3, 8013d2e <_svfiprintf_r+0x36>
 8013d10:	2140      	movs	r1, #64	@ 0x40
 8013d12:	f7ff fad5 	bl	80132c0 <_malloc_r>
 8013d16:	6028      	str	r0, [r5, #0]
 8013d18:	6128      	str	r0, [r5, #16]
 8013d1a:	b930      	cbnz	r0, 8013d2a <_svfiprintf_r+0x32>
 8013d1c:	230c      	movs	r3, #12
 8013d1e:	603b      	str	r3, [r7, #0]
 8013d20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013d24:	b01d      	add	sp, #116	@ 0x74
 8013d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d2a:	2340      	movs	r3, #64	@ 0x40
 8013d2c:	616b      	str	r3, [r5, #20]
 8013d2e:	2300      	movs	r3, #0
 8013d30:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d32:	2320      	movs	r3, #32
 8013d34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013d38:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d3c:	2330      	movs	r3, #48	@ 0x30
 8013d3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013edc <_svfiprintf_r+0x1e4>
 8013d42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013d46:	f04f 0901 	mov.w	r9, #1
 8013d4a:	4623      	mov	r3, r4
 8013d4c:	469a      	mov	sl, r3
 8013d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d52:	b10a      	cbz	r2, 8013d58 <_svfiprintf_r+0x60>
 8013d54:	2a25      	cmp	r2, #37	@ 0x25
 8013d56:	d1f9      	bne.n	8013d4c <_svfiprintf_r+0x54>
 8013d58:	ebba 0b04 	subs.w	fp, sl, r4
 8013d5c:	d00b      	beq.n	8013d76 <_svfiprintf_r+0x7e>
 8013d5e:	465b      	mov	r3, fp
 8013d60:	4622      	mov	r2, r4
 8013d62:	4629      	mov	r1, r5
 8013d64:	4638      	mov	r0, r7
 8013d66:	f7ff ff6b 	bl	8013c40 <__ssputs_r>
 8013d6a:	3001      	adds	r0, #1
 8013d6c:	f000 80a7 	beq.w	8013ebe <_svfiprintf_r+0x1c6>
 8013d70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013d72:	445a      	add	r2, fp
 8013d74:	9209      	str	r2, [sp, #36]	@ 0x24
 8013d76:	f89a 3000 	ldrb.w	r3, [sl]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	f000 809f 	beq.w	8013ebe <_svfiprintf_r+0x1c6>
 8013d80:	2300      	movs	r3, #0
 8013d82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013d86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d8a:	f10a 0a01 	add.w	sl, sl, #1
 8013d8e:	9304      	str	r3, [sp, #16]
 8013d90:	9307      	str	r3, [sp, #28]
 8013d92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013d96:	931a      	str	r3, [sp, #104]	@ 0x68
 8013d98:	4654      	mov	r4, sl
 8013d9a:	2205      	movs	r2, #5
 8013d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013da0:	484e      	ldr	r0, [pc, #312]	@ (8013edc <_svfiprintf_r+0x1e4>)
 8013da2:	f7ec fa2d 	bl	8000200 <memchr>
 8013da6:	9a04      	ldr	r2, [sp, #16]
 8013da8:	b9d8      	cbnz	r0, 8013de2 <_svfiprintf_r+0xea>
 8013daa:	06d0      	lsls	r0, r2, #27
 8013dac:	bf44      	itt	mi
 8013dae:	2320      	movmi	r3, #32
 8013db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013db4:	0711      	lsls	r1, r2, #28
 8013db6:	bf44      	itt	mi
 8013db8:	232b      	movmi	r3, #43	@ 0x2b
 8013dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8013dc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8013dc4:	d015      	beq.n	8013df2 <_svfiprintf_r+0xfa>
 8013dc6:	9a07      	ldr	r2, [sp, #28]
 8013dc8:	4654      	mov	r4, sl
 8013dca:	2000      	movs	r0, #0
 8013dcc:	f04f 0c0a 	mov.w	ip, #10
 8013dd0:	4621      	mov	r1, r4
 8013dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013dd6:	3b30      	subs	r3, #48	@ 0x30
 8013dd8:	2b09      	cmp	r3, #9
 8013dda:	d94b      	bls.n	8013e74 <_svfiprintf_r+0x17c>
 8013ddc:	b1b0      	cbz	r0, 8013e0c <_svfiprintf_r+0x114>
 8013dde:	9207      	str	r2, [sp, #28]
 8013de0:	e014      	b.n	8013e0c <_svfiprintf_r+0x114>
 8013de2:	eba0 0308 	sub.w	r3, r0, r8
 8013de6:	fa09 f303 	lsl.w	r3, r9, r3
 8013dea:	4313      	orrs	r3, r2
 8013dec:	9304      	str	r3, [sp, #16]
 8013dee:	46a2      	mov	sl, r4
 8013df0:	e7d2      	b.n	8013d98 <_svfiprintf_r+0xa0>
 8013df2:	9b03      	ldr	r3, [sp, #12]
 8013df4:	1d19      	adds	r1, r3, #4
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	9103      	str	r1, [sp, #12]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	bfbb      	ittet	lt
 8013dfe:	425b      	neglt	r3, r3
 8013e00:	f042 0202 	orrlt.w	r2, r2, #2
 8013e04:	9307      	strge	r3, [sp, #28]
 8013e06:	9307      	strlt	r3, [sp, #28]
 8013e08:	bfb8      	it	lt
 8013e0a:	9204      	strlt	r2, [sp, #16]
 8013e0c:	7823      	ldrb	r3, [r4, #0]
 8013e0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8013e10:	d10a      	bne.n	8013e28 <_svfiprintf_r+0x130>
 8013e12:	7863      	ldrb	r3, [r4, #1]
 8013e14:	2b2a      	cmp	r3, #42	@ 0x2a
 8013e16:	d132      	bne.n	8013e7e <_svfiprintf_r+0x186>
 8013e18:	9b03      	ldr	r3, [sp, #12]
 8013e1a:	1d1a      	adds	r2, r3, #4
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	9203      	str	r2, [sp, #12]
 8013e20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013e24:	3402      	adds	r4, #2
 8013e26:	9305      	str	r3, [sp, #20]
 8013e28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013eec <_svfiprintf_r+0x1f4>
 8013e2c:	7821      	ldrb	r1, [r4, #0]
 8013e2e:	2203      	movs	r2, #3
 8013e30:	4650      	mov	r0, sl
 8013e32:	f7ec f9e5 	bl	8000200 <memchr>
 8013e36:	b138      	cbz	r0, 8013e48 <_svfiprintf_r+0x150>
 8013e38:	9b04      	ldr	r3, [sp, #16]
 8013e3a:	eba0 000a 	sub.w	r0, r0, sl
 8013e3e:	2240      	movs	r2, #64	@ 0x40
 8013e40:	4082      	lsls	r2, r0
 8013e42:	4313      	orrs	r3, r2
 8013e44:	3401      	adds	r4, #1
 8013e46:	9304      	str	r3, [sp, #16]
 8013e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e4c:	4824      	ldr	r0, [pc, #144]	@ (8013ee0 <_svfiprintf_r+0x1e8>)
 8013e4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013e52:	2206      	movs	r2, #6
 8013e54:	f7ec f9d4 	bl	8000200 <memchr>
 8013e58:	2800      	cmp	r0, #0
 8013e5a:	d036      	beq.n	8013eca <_svfiprintf_r+0x1d2>
 8013e5c:	4b21      	ldr	r3, [pc, #132]	@ (8013ee4 <_svfiprintf_r+0x1ec>)
 8013e5e:	bb1b      	cbnz	r3, 8013ea8 <_svfiprintf_r+0x1b0>
 8013e60:	9b03      	ldr	r3, [sp, #12]
 8013e62:	3307      	adds	r3, #7
 8013e64:	f023 0307 	bic.w	r3, r3, #7
 8013e68:	3308      	adds	r3, #8
 8013e6a:	9303      	str	r3, [sp, #12]
 8013e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e6e:	4433      	add	r3, r6
 8013e70:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e72:	e76a      	b.n	8013d4a <_svfiprintf_r+0x52>
 8013e74:	fb0c 3202 	mla	r2, ip, r2, r3
 8013e78:	460c      	mov	r4, r1
 8013e7a:	2001      	movs	r0, #1
 8013e7c:	e7a8      	b.n	8013dd0 <_svfiprintf_r+0xd8>
 8013e7e:	2300      	movs	r3, #0
 8013e80:	3401      	adds	r4, #1
 8013e82:	9305      	str	r3, [sp, #20]
 8013e84:	4619      	mov	r1, r3
 8013e86:	f04f 0c0a 	mov.w	ip, #10
 8013e8a:	4620      	mov	r0, r4
 8013e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e90:	3a30      	subs	r2, #48	@ 0x30
 8013e92:	2a09      	cmp	r2, #9
 8013e94:	d903      	bls.n	8013e9e <_svfiprintf_r+0x1a6>
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d0c6      	beq.n	8013e28 <_svfiprintf_r+0x130>
 8013e9a:	9105      	str	r1, [sp, #20]
 8013e9c:	e7c4      	b.n	8013e28 <_svfiprintf_r+0x130>
 8013e9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013ea2:	4604      	mov	r4, r0
 8013ea4:	2301      	movs	r3, #1
 8013ea6:	e7f0      	b.n	8013e8a <_svfiprintf_r+0x192>
 8013ea8:	ab03      	add	r3, sp, #12
 8013eaa:	9300      	str	r3, [sp, #0]
 8013eac:	462a      	mov	r2, r5
 8013eae:	4b0e      	ldr	r3, [pc, #56]	@ (8013ee8 <_svfiprintf_r+0x1f0>)
 8013eb0:	a904      	add	r1, sp, #16
 8013eb2:	4638      	mov	r0, r7
 8013eb4:	f3af 8000 	nop.w
 8013eb8:	1c42      	adds	r2, r0, #1
 8013eba:	4606      	mov	r6, r0
 8013ebc:	d1d6      	bne.n	8013e6c <_svfiprintf_r+0x174>
 8013ebe:	89ab      	ldrh	r3, [r5, #12]
 8013ec0:	065b      	lsls	r3, r3, #25
 8013ec2:	f53f af2d 	bmi.w	8013d20 <_svfiprintf_r+0x28>
 8013ec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013ec8:	e72c      	b.n	8013d24 <_svfiprintf_r+0x2c>
 8013eca:	ab03      	add	r3, sp, #12
 8013ecc:	9300      	str	r3, [sp, #0]
 8013ece:	462a      	mov	r2, r5
 8013ed0:	4b05      	ldr	r3, [pc, #20]	@ (8013ee8 <_svfiprintf_r+0x1f0>)
 8013ed2:	a904      	add	r1, sp, #16
 8013ed4:	4638      	mov	r0, r7
 8013ed6:	f000 f9bb 	bl	8014250 <_printf_i>
 8013eda:	e7ed      	b.n	8013eb8 <_svfiprintf_r+0x1c0>
 8013edc:	080156db 	.word	0x080156db
 8013ee0:	080156e5 	.word	0x080156e5
 8013ee4:	00000000 	.word	0x00000000
 8013ee8:	08013c41 	.word	0x08013c41
 8013eec:	080156e1 	.word	0x080156e1

08013ef0 <__sfputc_r>:
 8013ef0:	6893      	ldr	r3, [r2, #8]
 8013ef2:	3b01      	subs	r3, #1
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	b410      	push	{r4}
 8013ef8:	6093      	str	r3, [r2, #8]
 8013efa:	da08      	bge.n	8013f0e <__sfputc_r+0x1e>
 8013efc:	6994      	ldr	r4, [r2, #24]
 8013efe:	42a3      	cmp	r3, r4
 8013f00:	db01      	blt.n	8013f06 <__sfputc_r+0x16>
 8013f02:	290a      	cmp	r1, #10
 8013f04:	d103      	bne.n	8013f0e <__sfputc_r+0x1e>
 8013f06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f0a:	f000 bb7d 	b.w	8014608 <__swbuf_r>
 8013f0e:	6813      	ldr	r3, [r2, #0]
 8013f10:	1c58      	adds	r0, r3, #1
 8013f12:	6010      	str	r0, [r2, #0]
 8013f14:	7019      	strb	r1, [r3, #0]
 8013f16:	4608      	mov	r0, r1
 8013f18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f1c:	4770      	bx	lr

08013f1e <__sfputs_r>:
 8013f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f20:	4606      	mov	r6, r0
 8013f22:	460f      	mov	r7, r1
 8013f24:	4614      	mov	r4, r2
 8013f26:	18d5      	adds	r5, r2, r3
 8013f28:	42ac      	cmp	r4, r5
 8013f2a:	d101      	bne.n	8013f30 <__sfputs_r+0x12>
 8013f2c:	2000      	movs	r0, #0
 8013f2e:	e007      	b.n	8013f40 <__sfputs_r+0x22>
 8013f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f34:	463a      	mov	r2, r7
 8013f36:	4630      	mov	r0, r6
 8013f38:	f7ff ffda 	bl	8013ef0 <__sfputc_r>
 8013f3c:	1c43      	adds	r3, r0, #1
 8013f3e:	d1f3      	bne.n	8013f28 <__sfputs_r+0xa>
 8013f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013f44 <_vfiprintf_r>:
 8013f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f48:	460d      	mov	r5, r1
 8013f4a:	b09d      	sub	sp, #116	@ 0x74
 8013f4c:	4614      	mov	r4, r2
 8013f4e:	4698      	mov	r8, r3
 8013f50:	4606      	mov	r6, r0
 8013f52:	b118      	cbz	r0, 8013f5c <_vfiprintf_r+0x18>
 8013f54:	6a03      	ldr	r3, [r0, #32]
 8013f56:	b90b      	cbnz	r3, 8013f5c <_vfiprintf_r+0x18>
 8013f58:	f7ff fbe4 	bl	8013724 <__sinit>
 8013f5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013f5e:	07d9      	lsls	r1, r3, #31
 8013f60:	d405      	bmi.n	8013f6e <_vfiprintf_r+0x2a>
 8013f62:	89ab      	ldrh	r3, [r5, #12]
 8013f64:	059a      	lsls	r2, r3, #22
 8013f66:	d402      	bmi.n	8013f6e <_vfiprintf_r+0x2a>
 8013f68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013f6a:	f7ff fdd4 	bl	8013b16 <__retarget_lock_acquire_recursive>
 8013f6e:	89ab      	ldrh	r3, [r5, #12]
 8013f70:	071b      	lsls	r3, r3, #28
 8013f72:	d501      	bpl.n	8013f78 <_vfiprintf_r+0x34>
 8013f74:	692b      	ldr	r3, [r5, #16]
 8013f76:	b99b      	cbnz	r3, 8013fa0 <_vfiprintf_r+0x5c>
 8013f78:	4629      	mov	r1, r5
 8013f7a:	4630      	mov	r0, r6
 8013f7c:	f000 fb82 	bl	8014684 <__swsetup_r>
 8013f80:	b170      	cbz	r0, 8013fa0 <_vfiprintf_r+0x5c>
 8013f82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013f84:	07dc      	lsls	r4, r3, #31
 8013f86:	d504      	bpl.n	8013f92 <_vfiprintf_r+0x4e>
 8013f88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f8c:	b01d      	add	sp, #116	@ 0x74
 8013f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f92:	89ab      	ldrh	r3, [r5, #12]
 8013f94:	0598      	lsls	r0, r3, #22
 8013f96:	d4f7      	bmi.n	8013f88 <_vfiprintf_r+0x44>
 8013f98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013f9a:	f7ff fdbd 	bl	8013b18 <__retarget_lock_release_recursive>
 8013f9e:	e7f3      	b.n	8013f88 <_vfiprintf_r+0x44>
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8013fa4:	2320      	movs	r3, #32
 8013fa6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013faa:	f8cd 800c 	str.w	r8, [sp, #12]
 8013fae:	2330      	movs	r3, #48	@ 0x30
 8013fb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014160 <_vfiprintf_r+0x21c>
 8013fb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013fb8:	f04f 0901 	mov.w	r9, #1
 8013fbc:	4623      	mov	r3, r4
 8013fbe:	469a      	mov	sl, r3
 8013fc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013fc4:	b10a      	cbz	r2, 8013fca <_vfiprintf_r+0x86>
 8013fc6:	2a25      	cmp	r2, #37	@ 0x25
 8013fc8:	d1f9      	bne.n	8013fbe <_vfiprintf_r+0x7a>
 8013fca:	ebba 0b04 	subs.w	fp, sl, r4
 8013fce:	d00b      	beq.n	8013fe8 <_vfiprintf_r+0xa4>
 8013fd0:	465b      	mov	r3, fp
 8013fd2:	4622      	mov	r2, r4
 8013fd4:	4629      	mov	r1, r5
 8013fd6:	4630      	mov	r0, r6
 8013fd8:	f7ff ffa1 	bl	8013f1e <__sfputs_r>
 8013fdc:	3001      	adds	r0, #1
 8013fde:	f000 80a7 	beq.w	8014130 <_vfiprintf_r+0x1ec>
 8013fe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013fe4:	445a      	add	r2, fp
 8013fe6:	9209      	str	r2, [sp, #36]	@ 0x24
 8013fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	f000 809f 	beq.w	8014130 <_vfiprintf_r+0x1ec>
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013ff8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013ffc:	f10a 0a01 	add.w	sl, sl, #1
 8014000:	9304      	str	r3, [sp, #16]
 8014002:	9307      	str	r3, [sp, #28]
 8014004:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014008:	931a      	str	r3, [sp, #104]	@ 0x68
 801400a:	4654      	mov	r4, sl
 801400c:	2205      	movs	r2, #5
 801400e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014012:	4853      	ldr	r0, [pc, #332]	@ (8014160 <_vfiprintf_r+0x21c>)
 8014014:	f7ec f8f4 	bl	8000200 <memchr>
 8014018:	9a04      	ldr	r2, [sp, #16]
 801401a:	b9d8      	cbnz	r0, 8014054 <_vfiprintf_r+0x110>
 801401c:	06d1      	lsls	r1, r2, #27
 801401e:	bf44      	itt	mi
 8014020:	2320      	movmi	r3, #32
 8014022:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014026:	0713      	lsls	r3, r2, #28
 8014028:	bf44      	itt	mi
 801402a:	232b      	movmi	r3, #43	@ 0x2b
 801402c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014030:	f89a 3000 	ldrb.w	r3, [sl]
 8014034:	2b2a      	cmp	r3, #42	@ 0x2a
 8014036:	d015      	beq.n	8014064 <_vfiprintf_r+0x120>
 8014038:	9a07      	ldr	r2, [sp, #28]
 801403a:	4654      	mov	r4, sl
 801403c:	2000      	movs	r0, #0
 801403e:	f04f 0c0a 	mov.w	ip, #10
 8014042:	4621      	mov	r1, r4
 8014044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014048:	3b30      	subs	r3, #48	@ 0x30
 801404a:	2b09      	cmp	r3, #9
 801404c:	d94b      	bls.n	80140e6 <_vfiprintf_r+0x1a2>
 801404e:	b1b0      	cbz	r0, 801407e <_vfiprintf_r+0x13a>
 8014050:	9207      	str	r2, [sp, #28]
 8014052:	e014      	b.n	801407e <_vfiprintf_r+0x13a>
 8014054:	eba0 0308 	sub.w	r3, r0, r8
 8014058:	fa09 f303 	lsl.w	r3, r9, r3
 801405c:	4313      	orrs	r3, r2
 801405e:	9304      	str	r3, [sp, #16]
 8014060:	46a2      	mov	sl, r4
 8014062:	e7d2      	b.n	801400a <_vfiprintf_r+0xc6>
 8014064:	9b03      	ldr	r3, [sp, #12]
 8014066:	1d19      	adds	r1, r3, #4
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	9103      	str	r1, [sp, #12]
 801406c:	2b00      	cmp	r3, #0
 801406e:	bfbb      	ittet	lt
 8014070:	425b      	neglt	r3, r3
 8014072:	f042 0202 	orrlt.w	r2, r2, #2
 8014076:	9307      	strge	r3, [sp, #28]
 8014078:	9307      	strlt	r3, [sp, #28]
 801407a:	bfb8      	it	lt
 801407c:	9204      	strlt	r2, [sp, #16]
 801407e:	7823      	ldrb	r3, [r4, #0]
 8014080:	2b2e      	cmp	r3, #46	@ 0x2e
 8014082:	d10a      	bne.n	801409a <_vfiprintf_r+0x156>
 8014084:	7863      	ldrb	r3, [r4, #1]
 8014086:	2b2a      	cmp	r3, #42	@ 0x2a
 8014088:	d132      	bne.n	80140f0 <_vfiprintf_r+0x1ac>
 801408a:	9b03      	ldr	r3, [sp, #12]
 801408c:	1d1a      	adds	r2, r3, #4
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	9203      	str	r2, [sp, #12]
 8014092:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014096:	3402      	adds	r4, #2
 8014098:	9305      	str	r3, [sp, #20]
 801409a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014170 <_vfiprintf_r+0x22c>
 801409e:	7821      	ldrb	r1, [r4, #0]
 80140a0:	2203      	movs	r2, #3
 80140a2:	4650      	mov	r0, sl
 80140a4:	f7ec f8ac 	bl	8000200 <memchr>
 80140a8:	b138      	cbz	r0, 80140ba <_vfiprintf_r+0x176>
 80140aa:	9b04      	ldr	r3, [sp, #16]
 80140ac:	eba0 000a 	sub.w	r0, r0, sl
 80140b0:	2240      	movs	r2, #64	@ 0x40
 80140b2:	4082      	lsls	r2, r0
 80140b4:	4313      	orrs	r3, r2
 80140b6:	3401      	adds	r4, #1
 80140b8:	9304      	str	r3, [sp, #16]
 80140ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140be:	4829      	ldr	r0, [pc, #164]	@ (8014164 <_vfiprintf_r+0x220>)
 80140c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80140c4:	2206      	movs	r2, #6
 80140c6:	f7ec f89b 	bl	8000200 <memchr>
 80140ca:	2800      	cmp	r0, #0
 80140cc:	d03f      	beq.n	801414e <_vfiprintf_r+0x20a>
 80140ce:	4b26      	ldr	r3, [pc, #152]	@ (8014168 <_vfiprintf_r+0x224>)
 80140d0:	bb1b      	cbnz	r3, 801411a <_vfiprintf_r+0x1d6>
 80140d2:	9b03      	ldr	r3, [sp, #12]
 80140d4:	3307      	adds	r3, #7
 80140d6:	f023 0307 	bic.w	r3, r3, #7
 80140da:	3308      	adds	r3, #8
 80140dc:	9303      	str	r3, [sp, #12]
 80140de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140e0:	443b      	add	r3, r7
 80140e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80140e4:	e76a      	b.n	8013fbc <_vfiprintf_r+0x78>
 80140e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80140ea:	460c      	mov	r4, r1
 80140ec:	2001      	movs	r0, #1
 80140ee:	e7a8      	b.n	8014042 <_vfiprintf_r+0xfe>
 80140f0:	2300      	movs	r3, #0
 80140f2:	3401      	adds	r4, #1
 80140f4:	9305      	str	r3, [sp, #20]
 80140f6:	4619      	mov	r1, r3
 80140f8:	f04f 0c0a 	mov.w	ip, #10
 80140fc:	4620      	mov	r0, r4
 80140fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014102:	3a30      	subs	r2, #48	@ 0x30
 8014104:	2a09      	cmp	r2, #9
 8014106:	d903      	bls.n	8014110 <_vfiprintf_r+0x1cc>
 8014108:	2b00      	cmp	r3, #0
 801410a:	d0c6      	beq.n	801409a <_vfiprintf_r+0x156>
 801410c:	9105      	str	r1, [sp, #20]
 801410e:	e7c4      	b.n	801409a <_vfiprintf_r+0x156>
 8014110:	fb0c 2101 	mla	r1, ip, r1, r2
 8014114:	4604      	mov	r4, r0
 8014116:	2301      	movs	r3, #1
 8014118:	e7f0      	b.n	80140fc <_vfiprintf_r+0x1b8>
 801411a:	ab03      	add	r3, sp, #12
 801411c:	9300      	str	r3, [sp, #0]
 801411e:	462a      	mov	r2, r5
 8014120:	4b12      	ldr	r3, [pc, #72]	@ (801416c <_vfiprintf_r+0x228>)
 8014122:	a904      	add	r1, sp, #16
 8014124:	4630      	mov	r0, r6
 8014126:	f3af 8000 	nop.w
 801412a:	4607      	mov	r7, r0
 801412c:	1c78      	adds	r0, r7, #1
 801412e:	d1d6      	bne.n	80140de <_vfiprintf_r+0x19a>
 8014130:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014132:	07d9      	lsls	r1, r3, #31
 8014134:	d405      	bmi.n	8014142 <_vfiprintf_r+0x1fe>
 8014136:	89ab      	ldrh	r3, [r5, #12]
 8014138:	059a      	lsls	r2, r3, #22
 801413a:	d402      	bmi.n	8014142 <_vfiprintf_r+0x1fe>
 801413c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801413e:	f7ff fceb 	bl	8013b18 <__retarget_lock_release_recursive>
 8014142:	89ab      	ldrh	r3, [r5, #12]
 8014144:	065b      	lsls	r3, r3, #25
 8014146:	f53f af1f 	bmi.w	8013f88 <_vfiprintf_r+0x44>
 801414a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801414c:	e71e      	b.n	8013f8c <_vfiprintf_r+0x48>
 801414e:	ab03      	add	r3, sp, #12
 8014150:	9300      	str	r3, [sp, #0]
 8014152:	462a      	mov	r2, r5
 8014154:	4b05      	ldr	r3, [pc, #20]	@ (801416c <_vfiprintf_r+0x228>)
 8014156:	a904      	add	r1, sp, #16
 8014158:	4630      	mov	r0, r6
 801415a:	f000 f879 	bl	8014250 <_printf_i>
 801415e:	e7e4      	b.n	801412a <_vfiprintf_r+0x1e6>
 8014160:	080156db 	.word	0x080156db
 8014164:	080156e5 	.word	0x080156e5
 8014168:	00000000 	.word	0x00000000
 801416c:	08013f1f 	.word	0x08013f1f
 8014170:	080156e1 	.word	0x080156e1

08014174 <_printf_common>:
 8014174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014178:	4616      	mov	r6, r2
 801417a:	4698      	mov	r8, r3
 801417c:	688a      	ldr	r2, [r1, #8]
 801417e:	690b      	ldr	r3, [r1, #16]
 8014180:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014184:	4293      	cmp	r3, r2
 8014186:	bfb8      	it	lt
 8014188:	4613      	movlt	r3, r2
 801418a:	6033      	str	r3, [r6, #0]
 801418c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014190:	4607      	mov	r7, r0
 8014192:	460c      	mov	r4, r1
 8014194:	b10a      	cbz	r2, 801419a <_printf_common+0x26>
 8014196:	3301      	adds	r3, #1
 8014198:	6033      	str	r3, [r6, #0]
 801419a:	6823      	ldr	r3, [r4, #0]
 801419c:	0699      	lsls	r1, r3, #26
 801419e:	bf42      	ittt	mi
 80141a0:	6833      	ldrmi	r3, [r6, #0]
 80141a2:	3302      	addmi	r3, #2
 80141a4:	6033      	strmi	r3, [r6, #0]
 80141a6:	6825      	ldr	r5, [r4, #0]
 80141a8:	f015 0506 	ands.w	r5, r5, #6
 80141ac:	d106      	bne.n	80141bc <_printf_common+0x48>
 80141ae:	f104 0a19 	add.w	sl, r4, #25
 80141b2:	68e3      	ldr	r3, [r4, #12]
 80141b4:	6832      	ldr	r2, [r6, #0]
 80141b6:	1a9b      	subs	r3, r3, r2
 80141b8:	42ab      	cmp	r3, r5
 80141ba:	dc26      	bgt.n	801420a <_printf_common+0x96>
 80141bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80141c0:	6822      	ldr	r2, [r4, #0]
 80141c2:	3b00      	subs	r3, #0
 80141c4:	bf18      	it	ne
 80141c6:	2301      	movne	r3, #1
 80141c8:	0692      	lsls	r2, r2, #26
 80141ca:	d42b      	bmi.n	8014224 <_printf_common+0xb0>
 80141cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80141d0:	4641      	mov	r1, r8
 80141d2:	4638      	mov	r0, r7
 80141d4:	47c8      	blx	r9
 80141d6:	3001      	adds	r0, #1
 80141d8:	d01e      	beq.n	8014218 <_printf_common+0xa4>
 80141da:	6823      	ldr	r3, [r4, #0]
 80141dc:	6922      	ldr	r2, [r4, #16]
 80141de:	f003 0306 	and.w	r3, r3, #6
 80141e2:	2b04      	cmp	r3, #4
 80141e4:	bf02      	ittt	eq
 80141e6:	68e5      	ldreq	r5, [r4, #12]
 80141e8:	6833      	ldreq	r3, [r6, #0]
 80141ea:	1aed      	subeq	r5, r5, r3
 80141ec:	68a3      	ldr	r3, [r4, #8]
 80141ee:	bf0c      	ite	eq
 80141f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80141f4:	2500      	movne	r5, #0
 80141f6:	4293      	cmp	r3, r2
 80141f8:	bfc4      	itt	gt
 80141fa:	1a9b      	subgt	r3, r3, r2
 80141fc:	18ed      	addgt	r5, r5, r3
 80141fe:	2600      	movs	r6, #0
 8014200:	341a      	adds	r4, #26
 8014202:	42b5      	cmp	r5, r6
 8014204:	d11a      	bne.n	801423c <_printf_common+0xc8>
 8014206:	2000      	movs	r0, #0
 8014208:	e008      	b.n	801421c <_printf_common+0xa8>
 801420a:	2301      	movs	r3, #1
 801420c:	4652      	mov	r2, sl
 801420e:	4641      	mov	r1, r8
 8014210:	4638      	mov	r0, r7
 8014212:	47c8      	blx	r9
 8014214:	3001      	adds	r0, #1
 8014216:	d103      	bne.n	8014220 <_printf_common+0xac>
 8014218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801421c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014220:	3501      	adds	r5, #1
 8014222:	e7c6      	b.n	80141b2 <_printf_common+0x3e>
 8014224:	18e1      	adds	r1, r4, r3
 8014226:	1c5a      	adds	r2, r3, #1
 8014228:	2030      	movs	r0, #48	@ 0x30
 801422a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801422e:	4422      	add	r2, r4
 8014230:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014234:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014238:	3302      	adds	r3, #2
 801423a:	e7c7      	b.n	80141cc <_printf_common+0x58>
 801423c:	2301      	movs	r3, #1
 801423e:	4622      	mov	r2, r4
 8014240:	4641      	mov	r1, r8
 8014242:	4638      	mov	r0, r7
 8014244:	47c8      	blx	r9
 8014246:	3001      	adds	r0, #1
 8014248:	d0e6      	beq.n	8014218 <_printf_common+0xa4>
 801424a:	3601      	adds	r6, #1
 801424c:	e7d9      	b.n	8014202 <_printf_common+0x8e>
	...

08014250 <_printf_i>:
 8014250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014254:	7e0f      	ldrb	r7, [r1, #24]
 8014256:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014258:	2f78      	cmp	r7, #120	@ 0x78
 801425a:	4691      	mov	r9, r2
 801425c:	4680      	mov	r8, r0
 801425e:	460c      	mov	r4, r1
 8014260:	469a      	mov	sl, r3
 8014262:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014266:	d807      	bhi.n	8014278 <_printf_i+0x28>
 8014268:	2f62      	cmp	r7, #98	@ 0x62
 801426a:	d80a      	bhi.n	8014282 <_printf_i+0x32>
 801426c:	2f00      	cmp	r7, #0
 801426e:	f000 80d1 	beq.w	8014414 <_printf_i+0x1c4>
 8014272:	2f58      	cmp	r7, #88	@ 0x58
 8014274:	f000 80b8 	beq.w	80143e8 <_printf_i+0x198>
 8014278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801427c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014280:	e03a      	b.n	80142f8 <_printf_i+0xa8>
 8014282:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014286:	2b15      	cmp	r3, #21
 8014288:	d8f6      	bhi.n	8014278 <_printf_i+0x28>
 801428a:	a101      	add	r1, pc, #4	@ (adr r1, 8014290 <_printf_i+0x40>)
 801428c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014290:	080142e9 	.word	0x080142e9
 8014294:	080142fd 	.word	0x080142fd
 8014298:	08014279 	.word	0x08014279
 801429c:	08014279 	.word	0x08014279
 80142a0:	08014279 	.word	0x08014279
 80142a4:	08014279 	.word	0x08014279
 80142a8:	080142fd 	.word	0x080142fd
 80142ac:	08014279 	.word	0x08014279
 80142b0:	08014279 	.word	0x08014279
 80142b4:	08014279 	.word	0x08014279
 80142b8:	08014279 	.word	0x08014279
 80142bc:	080143fb 	.word	0x080143fb
 80142c0:	08014327 	.word	0x08014327
 80142c4:	080143b5 	.word	0x080143b5
 80142c8:	08014279 	.word	0x08014279
 80142cc:	08014279 	.word	0x08014279
 80142d0:	0801441d 	.word	0x0801441d
 80142d4:	08014279 	.word	0x08014279
 80142d8:	08014327 	.word	0x08014327
 80142dc:	08014279 	.word	0x08014279
 80142e0:	08014279 	.word	0x08014279
 80142e4:	080143bd 	.word	0x080143bd
 80142e8:	6833      	ldr	r3, [r6, #0]
 80142ea:	1d1a      	adds	r2, r3, #4
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	6032      	str	r2, [r6, #0]
 80142f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80142f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80142f8:	2301      	movs	r3, #1
 80142fa:	e09c      	b.n	8014436 <_printf_i+0x1e6>
 80142fc:	6833      	ldr	r3, [r6, #0]
 80142fe:	6820      	ldr	r0, [r4, #0]
 8014300:	1d19      	adds	r1, r3, #4
 8014302:	6031      	str	r1, [r6, #0]
 8014304:	0606      	lsls	r6, r0, #24
 8014306:	d501      	bpl.n	801430c <_printf_i+0xbc>
 8014308:	681d      	ldr	r5, [r3, #0]
 801430a:	e003      	b.n	8014314 <_printf_i+0xc4>
 801430c:	0645      	lsls	r5, r0, #25
 801430e:	d5fb      	bpl.n	8014308 <_printf_i+0xb8>
 8014310:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014314:	2d00      	cmp	r5, #0
 8014316:	da03      	bge.n	8014320 <_printf_i+0xd0>
 8014318:	232d      	movs	r3, #45	@ 0x2d
 801431a:	426d      	negs	r5, r5
 801431c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014320:	4858      	ldr	r0, [pc, #352]	@ (8014484 <_printf_i+0x234>)
 8014322:	230a      	movs	r3, #10
 8014324:	e011      	b.n	801434a <_printf_i+0xfa>
 8014326:	6821      	ldr	r1, [r4, #0]
 8014328:	6833      	ldr	r3, [r6, #0]
 801432a:	0608      	lsls	r0, r1, #24
 801432c:	f853 5b04 	ldr.w	r5, [r3], #4
 8014330:	d402      	bmi.n	8014338 <_printf_i+0xe8>
 8014332:	0649      	lsls	r1, r1, #25
 8014334:	bf48      	it	mi
 8014336:	b2ad      	uxthmi	r5, r5
 8014338:	2f6f      	cmp	r7, #111	@ 0x6f
 801433a:	4852      	ldr	r0, [pc, #328]	@ (8014484 <_printf_i+0x234>)
 801433c:	6033      	str	r3, [r6, #0]
 801433e:	bf14      	ite	ne
 8014340:	230a      	movne	r3, #10
 8014342:	2308      	moveq	r3, #8
 8014344:	2100      	movs	r1, #0
 8014346:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801434a:	6866      	ldr	r6, [r4, #4]
 801434c:	60a6      	str	r6, [r4, #8]
 801434e:	2e00      	cmp	r6, #0
 8014350:	db05      	blt.n	801435e <_printf_i+0x10e>
 8014352:	6821      	ldr	r1, [r4, #0]
 8014354:	432e      	orrs	r6, r5
 8014356:	f021 0104 	bic.w	r1, r1, #4
 801435a:	6021      	str	r1, [r4, #0]
 801435c:	d04b      	beq.n	80143f6 <_printf_i+0x1a6>
 801435e:	4616      	mov	r6, r2
 8014360:	fbb5 f1f3 	udiv	r1, r5, r3
 8014364:	fb03 5711 	mls	r7, r3, r1, r5
 8014368:	5dc7      	ldrb	r7, [r0, r7]
 801436a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801436e:	462f      	mov	r7, r5
 8014370:	42bb      	cmp	r3, r7
 8014372:	460d      	mov	r5, r1
 8014374:	d9f4      	bls.n	8014360 <_printf_i+0x110>
 8014376:	2b08      	cmp	r3, #8
 8014378:	d10b      	bne.n	8014392 <_printf_i+0x142>
 801437a:	6823      	ldr	r3, [r4, #0]
 801437c:	07df      	lsls	r7, r3, #31
 801437e:	d508      	bpl.n	8014392 <_printf_i+0x142>
 8014380:	6923      	ldr	r3, [r4, #16]
 8014382:	6861      	ldr	r1, [r4, #4]
 8014384:	4299      	cmp	r1, r3
 8014386:	bfde      	ittt	le
 8014388:	2330      	movle	r3, #48	@ 0x30
 801438a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801438e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8014392:	1b92      	subs	r2, r2, r6
 8014394:	6122      	str	r2, [r4, #16]
 8014396:	f8cd a000 	str.w	sl, [sp]
 801439a:	464b      	mov	r3, r9
 801439c:	aa03      	add	r2, sp, #12
 801439e:	4621      	mov	r1, r4
 80143a0:	4640      	mov	r0, r8
 80143a2:	f7ff fee7 	bl	8014174 <_printf_common>
 80143a6:	3001      	adds	r0, #1
 80143a8:	d14a      	bne.n	8014440 <_printf_i+0x1f0>
 80143aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80143ae:	b004      	add	sp, #16
 80143b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143b4:	6823      	ldr	r3, [r4, #0]
 80143b6:	f043 0320 	orr.w	r3, r3, #32
 80143ba:	6023      	str	r3, [r4, #0]
 80143bc:	4832      	ldr	r0, [pc, #200]	@ (8014488 <_printf_i+0x238>)
 80143be:	2778      	movs	r7, #120	@ 0x78
 80143c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80143c4:	6823      	ldr	r3, [r4, #0]
 80143c6:	6831      	ldr	r1, [r6, #0]
 80143c8:	061f      	lsls	r7, r3, #24
 80143ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80143ce:	d402      	bmi.n	80143d6 <_printf_i+0x186>
 80143d0:	065f      	lsls	r7, r3, #25
 80143d2:	bf48      	it	mi
 80143d4:	b2ad      	uxthmi	r5, r5
 80143d6:	6031      	str	r1, [r6, #0]
 80143d8:	07d9      	lsls	r1, r3, #31
 80143da:	bf44      	itt	mi
 80143dc:	f043 0320 	orrmi.w	r3, r3, #32
 80143e0:	6023      	strmi	r3, [r4, #0]
 80143e2:	b11d      	cbz	r5, 80143ec <_printf_i+0x19c>
 80143e4:	2310      	movs	r3, #16
 80143e6:	e7ad      	b.n	8014344 <_printf_i+0xf4>
 80143e8:	4826      	ldr	r0, [pc, #152]	@ (8014484 <_printf_i+0x234>)
 80143ea:	e7e9      	b.n	80143c0 <_printf_i+0x170>
 80143ec:	6823      	ldr	r3, [r4, #0]
 80143ee:	f023 0320 	bic.w	r3, r3, #32
 80143f2:	6023      	str	r3, [r4, #0]
 80143f4:	e7f6      	b.n	80143e4 <_printf_i+0x194>
 80143f6:	4616      	mov	r6, r2
 80143f8:	e7bd      	b.n	8014376 <_printf_i+0x126>
 80143fa:	6833      	ldr	r3, [r6, #0]
 80143fc:	6825      	ldr	r5, [r4, #0]
 80143fe:	6961      	ldr	r1, [r4, #20]
 8014400:	1d18      	adds	r0, r3, #4
 8014402:	6030      	str	r0, [r6, #0]
 8014404:	062e      	lsls	r6, r5, #24
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	d501      	bpl.n	801440e <_printf_i+0x1be>
 801440a:	6019      	str	r1, [r3, #0]
 801440c:	e002      	b.n	8014414 <_printf_i+0x1c4>
 801440e:	0668      	lsls	r0, r5, #25
 8014410:	d5fb      	bpl.n	801440a <_printf_i+0x1ba>
 8014412:	8019      	strh	r1, [r3, #0]
 8014414:	2300      	movs	r3, #0
 8014416:	6123      	str	r3, [r4, #16]
 8014418:	4616      	mov	r6, r2
 801441a:	e7bc      	b.n	8014396 <_printf_i+0x146>
 801441c:	6833      	ldr	r3, [r6, #0]
 801441e:	1d1a      	adds	r2, r3, #4
 8014420:	6032      	str	r2, [r6, #0]
 8014422:	681e      	ldr	r6, [r3, #0]
 8014424:	6862      	ldr	r2, [r4, #4]
 8014426:	2100      	movs	r1, #0
 8014428:	4630      	mov	r0, r6
 801442a:	f7eb fee9 	bl	8000200 <memchr>
 801442e:	b108      	cbz	r0, 8014434 <_printf_i+0x1e4>
 8014430:	1b80      	subs	r0, r0, r6
 8014432:	6060      	str	r0, [r4, #4]
 8014434:	6863      	ldr	r3, [r4, #4]
 8014436:	6123      	str	r3, [r4, #16]
 8014438:	2300      	movs	r3, #0
 801443a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801443e:	e7aa      	b.n	8014396 <_printf_i+0x146>
 8014440:	6923      	ldr	r3, [r4, #16]
 8014442:	4632      	mov	r2, r6
 8014444:	4649      	mov	r1, r9
 8014446:	4640      	mov	r0, r8
 8014448:	47d0      	blx	sl
 801444a:	3001      	adds	r0, #1
 801444c:	d0ad      	beq.n	80143aa <_printf_i+0x15a>
 801444e:	6823      	ldr	r3, [r4, #0]
 8014450:	079b      	lsls	r3, r3, #30
 8014452:	d413      	bmi.n	801447c <_printf_i+0x22c>
 8014454:	68e0      	ldr	r0, [r4, #12]
 8014456:	9b03      	ldr	r3, [sp, #12]
 8014458:	4298      	cmp	r0, r3
 801445a:	bfb8      	it	lt
 801445c:	4618      	movlt	r0, r3
 801445e:	e7a6      	b.n	80143ae <_printf_i+0x15e>
 8014460:	2301      	movs	r3, #1
 8014462:	4632      	mov	r2, r6
 8014464:	4649      	mov	r1, r9
 8014466:	4640      	mov	r0, r8
 8014468:	47d0      	blx	sl
 801446a:	3001      	adds	r0, #1
 801446c:	d09d      	beq.n	80143aa <_printf_i+0x15a>
 801446e:	3501      	adds	r5, #1
 8014470:	68e3      	ldr	r3, [r4, #12]
 8014472:	9903      	ldr	r1, [sp, #12]
 8014474:	1a5b      	subs	r3, r3, r1
 8014476:	42ab      	cmp	r3, r5
 8014478:	dcf2      	bgt.n	8014460 <_printf_i+0x210>
 801447a:	e7eb      	b.n	8014454 <_printf_i+0x204>
 801447c:	2500      	movs	r5, #0
 801447e:	f104 0619 	add.w	r6, r4, #25
 8014482:	e7f5      	b.n	8014470 <_printf_i+0x220>
 8014484:	080156ec 	.word	0x080156ec
 8014488:	080156fd 	.word	0x080156fd

0801448c <__sflush_r>:
 801448c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014494:	0716      	lsls	r6, r2, #28
 8014496:	4605      	mov	r5, r0
 8014498:	460c      	mov	r4, r1
 801449a:	d454      	bmi.n	8014546 <__sflush_r+0xba>
 801449c:	684b      	ldr	r3, [r1, #4]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	dc02      	bgt.n	80144a8 <__sflush_r+0x1c>
 80144a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	dd48      	ble.n	801453a <__sflush_r+0xae>
 80144a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80144aa:	2e00      	cmp	r6, #0
 80144ac:	d045      	beq.n	801453a <__sflush_r+0xae>
 80144ae:	2300      	movs	r3, #0
 80144b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80144b4:	682f      	ldr	r7, [r5, #0]
 80144b6:	6a21      	ldr	r1, [r4, #32]
 80144b8:	602b      	str	r3, [r5, #0]
 80144ba:	d030      	beq.n	801451e <__sflush_r+0x92>
 80144bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80144be:	89a3      	ldrh	r3, [r4, #12]
 80144c0:	0759      	lsls	r1, r3, #29
 80144c2:	d505      	bpl.n	80144d0 <__sflush_r+0x44>
 80144c4:	6863      	ldr	r3, [r4, #4]
 80144c6:	1ad2      	subs	r2, r2, r3
 80144c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80144ca:	b10b      	cbz	r3, 80144d0 <__sflush_r+0x44>
 80144cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80144ce:	1ad2      	subs	r2, r2, r3
 80144d0:	2300      	movs	r3, #0
 80144d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80144d4:	6a21      	ldr	r1, [r4, #32]
 80144d6:	4628      	mov	r0, r5
 80144d8:	47b0      	blx	r6
 80144da:	1c43      	adds	r3, r0, #1
 80144dc:	89a3      	ldrh	r3, [r4, #12]
 80144de:	d106      	bne.n	80144ee <__sflush_r+0x62>
 80144e0:	6829      	ldr	r1, [r5, #0]
 80144e2:	291d      	cmp	r1, #29
 80144e4:	d82b      	bhi.n	801453e <__sflush_r+0xb2>
 80144e6:	4a2a      	ldr	r2, [pc, #168]	@ (8014590 <__sflush_r+0x104>)
 80144e8:	40ca      	lsrs	r2, r1
 80144ea:	07d6      	lsls	r6, r2, #31
 80144ec:	d527      	bpl.n	801453e <__sflush_r+0xb2>
 80144ee:	2200      	movs	r2, #0
 80144f0:	6062      	str	r2, [r4, #4]
 80144f2:	04d9      	lsls	r1, r3, #19
 80144f4:	6922      	ldr	r2, [r4, #16]
 80144f6:	6022      	str	r2, [r4, #0]
 80144f8:	d504      	bpl.n	8014504 <__sflush_r+0x78>
 80144fa:	1c42      	adds	r2, r0, #1
 80144fc:	d101      	bne.n	8014502 <__sflush_r+0x76>
 80144fe:	682b      	ldr	r3, [r5, #0]
 8014500:	b903      	cbnz	r3, 8014504 <__sflush_r+0x78>
 8014502:	6560      	str	r0, [r4, #84]	@ 0x54
 8014504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014506:	602f      	str	r7, [r5, #0]
 8014508:	b1b9      	cbz	r1, 801453a <__sflush_r+0xae>
 801450a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801450e:	4299      	cmp	r1, r3
 8014510:	d002      	beq.n	8014518 <__sflush_r+0x8c>
 8014512:	4628      	mov	r0, r5
 8014514:	f7ff fb42 	bl	8013b9c <_free_r>
 8014518:	2300      	movs	r3, #0
 801451a:	6363      	str	r3, [r4, #52]	@ 0x34
 801451c:	e00d      	b.n	801453a <__sflush_r+0xae>
 801451e:	2301      	movs	r3, #1
 8014520:	4628      	mov	r0, r5
 8014522:	47b0      	blx	r6
 8014524:	4602      	mov	r2, r0
 8014526:	1c50      	adds	r0, r2, #1
 8014528:	d1c9      	bne.n	80144be <__sflush_r+0x32>
 801452a:	682b      	ldr	r3, [r5, #0]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d0c6      	beq.n	80144be <__sflush_r+0x32>
 8014530:	2b1d      	cmp	r3, #29
 8014532:	d001      	beq.n	8014538 <__sflush_r+0xac>
 8014534:	2b16      	cmp	r3, #22
 8014536:	d11e      	bne.n	8014576 <__sflush_r+0xea>
 8014538:	602f      	str	r7, [r5, #0]
 801453a:	2000      	movs	r0, #0
 801453c:	e022      	b.n	8014584 <__sflush_r+0xf8>
 801453e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014542:	b21b      	sxth	r3, r3
 8014544:	e01b      	b.n	801457e <__sflush_r+0xf2>
 8014546:	690f      	ldr	r7, [r1, #16]
 8014548:	2f00      	cmp	r7, #0
 801454a:	d0f6      	beq.n	801453a <__sflush_r+0xae>
 801454c:	0793      	lsls	r3, r2, #30
 801454e:	680e      	ldr	r6, [r1, #0]
 8014550:	bf08      	it	eq
 8014552:	694b      	ldreq	r3, [r1, #20]
 8014554:	600f      	str	r7, [r1, #0]
 8014556:	bf18      	it	ne
 8014558:	2300      	movne	r3, #0
 801455a:	eba6 0807 	sub.w	r8, r6, r7
 801455e:	608b      	str	r3, [r1, #8]
 8014560:	f1b8 0f00 	cmp.w	r8, #0
 8014564:	dde9      	ble.n	801453a <__sflush_r+0xae>
 8014566:	6a21      	ldr	r1, [r4, #32]
 8014568:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801456a:	4643      	mov	r3, r8
 801456c:	463a      	mov	r2, r7
 801456e:	4628      	mov	r0, r5
 8014570:	47b0      	blx	r6
 8014572:	2800      	cmp	r0, #0
 8014574:	dc08      	bgt.n	8014588 <__sflush_r+0xfc>
 8014576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801457a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801457e:	81a3      	strh	r3, [r4, #12]
 8014580:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014588:	4407      	add	r7, r0
 801458a:	eba8 0800 	sub.w	r8, r8, r0
 801458e:	e7e7      	b.n	8014560 <__sflush_r+0xd4>
 8014590:	20400001 	.word	0x20400001

08014594 <_fflush_r>:
 8014594:	b538      	push	{r3, r4, r5, lr}
 8014596:	690b      	ldr	r3, [r1, #16]
 8014598:	4605      	mov	r5, r0
 801459a:	460c      	mov	r4, r1
 801459c:	b913      	cbnz	r3, 80145a4 <_fflush_r+0x10>
 801459e:	2500      	movs	r5, #0
 80145a0:	4628      	mov	r0, r5
 80145a2:	bd38      	pop	{r3, r4, r5, pc}
 80145a4:	b118      	cbz	r0, 80145ae <_fflush_r+0x1a>
 80145a6:	6a03      	ldr	r3, [r0, #32]
 80145a8:	b90b      	cbnz	r3, 80145ae <_fflush_r+0x1a>
 80145aa:	f7ff f8bb 	bl	8013724 <__sinit>
 80145ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d0f3      	beq.n	801459e <_fflush_r+0xa>
 80145b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80145b8:	07d0      	lsls	r0, r2, #31
 80145ba:	d404      	bmi.n	80145c6 <_fflush_r+0x32>
 80145bc:	0599      	lsls	r1, r3, #22
 80145be:	d402      	bmi.n	80145c6 <_fflush_r+0x32>
 80145c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80145c2:	f7ff faa8 	bl	8013b16 <__retarget_lock_acquire_recursive>
 80145c6:	4628      	mov	r0, r5
 80145c8:	4621      	mov	r1, r4
 80145ca:	f7ff ff5f 	bl	801448c <__sflush_r>
 80145ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80145d0:	07da      	lsls	r2, r3, #31
 80145d2:	4605      	mov	r5, r0
 80145d4:	d4e4      	bmi.n	80145a0 <_fflush_r+0xc>
 80145d6:	89a3      	ldrh	r3, [r4, #12]
 80145d8:	059b      	lsls	r3, r3, #22
 80145da:	d4e1      	bmi.n	80145a0 <_fflush_r+0xc>
 80145dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80145de:	f7ff fa9b 	bl	8013b18 <__retarget_lock_release_recursive>
 80145e2:	e7dd      	b.n	80145a0 <_fflush_r+0xc>

080145e4 <fiprintf>:
 80145e4:	b40e      	push	{r1, r2, r3}
 80145e6:	b503      	push	{r0, r1, lr}
 80145e8:	4601      	mov	r1, r0
 80145ea:	ab03      	add	r3, sp, #12
 80145ec:	4805      	ldr	r0, [pc, #20]	@ (8014604 <fiprintf+0x20>)
 80145ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80145f2:	6800      	ldr	r0, [r0, #0]
 80145f4:	9301      	str	r3, [sp, #4]
 80145f6:	f7ff fca5 	bl	8013f44 <_vfiprintf_r>
 80145fa:	b002      	add	sp, #8
 80145fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014600:	b003      	add	sp, #12
 8014602:	4770      	bx	lr
 8014604:	20000278 	.word	0x20000278

08014608 <__swbuf_r>:
 8014608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801460a:	460e      	mov	r6, r1
 801460c:	4614      	mov	r4, r2
 801460e:	4605      	mov	r5, r0
 8014610:	b118      	cbz	r0, 801461a <__swbuf_r+0x12>
 8014612:	6a03      	ldr	r3, [r0, #32]
 8014614:	b90b      	cbnz	r3, 801461a <__swbuf_r+0x12>
 8014616:	f7ff f885 	bl	8013724 <__sinit>
 801461a:	69a3      	ldr	r3, [r4, #24]
 801461c:	60a3      	str	r3, [r4, #8]
 801461e:	89a3      	ldrh	r3, [r4, #12]
 8014620:	071a      	lsls	r2, r3, #28
 8014622:	d501      	bpl.n	8014628 <__swbuf_r+0x20>
 8014624:	6923      	ldr	r3, [r4, #16]
 8014626:	b943      	cbnz	r3, 801463a <__swbuf_r+0x32>
 8014628:	4621      	mov	r1, r4
 801462a:	4628      	mov	r0, r5
 801462c:	f000 f82a 	bl	8014684 <__swsetup_r>
 8014630:	b118      	cbz	r0, 801463a <__swbuf_r+0x32>
 8014632:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014636:	4638      	mov	r0, r7
 8014638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801463a:	6823      	ldr	r3, [r4, #0]
 801463c:	6922      	ldr	r2, [r4, #16]
 801463e:	1a98      	subs	r0, r3, r2
 8014640:	6963      	ldr	r3, [r4, #20]
 8014642:	b2f6      	uxtb	r6, r6
 8014644:	4283      	cmp	r3, r0
 8014646:	4637      	mov	r7, r6
 8014648:	dc05      	bgt.n	8014656 <__swbuf_r+0x4e>
 801464a:	4621      	mov	r1, r4
 801464c:	4628      	mov	r0, r5
 801464e:	f7ff ffa1 	bl	8014594 <_fflush_r>
 8014652:	2800      	cmp	r0, #0
 8014654:	d1ed      	bne.n	8014632 <__swbuf_r+0x2a>
 8014656:	68a3      	ldr	r3, [r4, #8]
 8014658:	3b01      	subs	r3, #1
 801465a:	60a3      	str	r3, [r4, #8]
 801465c:	6823      	ldr	r3, [r4, #0]
 801465e:	1c5a      	adds	r2, r3, #1
 8014660:	6022      	str	r2, [r4, #0]
 8014662:	701e      	strb	r6, [r3, #0]
 8014664:	6962      	ldr	r2, [r4, #20]
 8014666:	1c43      	adds	r3, r0, #1
 8014668:	429a      	cmp	r2, r3
 801466a:	d004      	beq.n	8014676 <__swbuf_r+0x6e>
 801466c:	89a3      	ldrh	r3, [r4, #12]
 801466e:	07db      	lsls	r3, r3, #31
 8014670:	d5e1      	bpl.n	8014636 <__swbuf_r+0x2e>
 8014672:	2e0a      	cmp	r6, #10
 8014674:	d1df      	bne.n	8014636 <__swbuf_r+0x2e>
 8014676:	4621      	mov	r1, r4
 8014678:	4628      	mov	r0, r5
 801467a:	f7ff ff8b 	bl	8014594 <_fflush_r>
 801467e:	2800      	cmp	r0, #0
 8014680:	d0d9      	beq.n	8014636 <__swbuf_r+0x2e>
 8014682:	e7d6      	b.n	8014632 <__swbuf_r+0x2a>

08014684 <__swsetup_r>:
 8014684:	b538      	push	{r3, r4, r5, lr}
 8014686:	4b29      	ldr	r3, [pc, #164]	@ (801472c <__swsetup_r+0xa8>)
 8014688:	4605      	mov	r5, r0
 801468a:	6818      	ldr	r0, [r3, #0]
 801468c:	460c      	mov	r4, r1
 801468e:	b118      	cbz	r0, 8014698 <__swsetup_r+0x14>
 8014690:	6a03      	ldr	r3, [r0, #32]
 8014692:	b90b      	cbnz	r3, 8014698 <__swsetup_r+0x14>
 8014694:	f7ff f846 	bl	8013724 <__sinit>
 8014698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801469c:	0719      	lsls	r1, r3, #28
 801469e:	d422      	bmi.n	80146e6 <__swsetup_r+0x62>
 80146a0:	06da      	lsls	r2, r3, #27
 80146a2:	d407      	bmi.n	80146b4 <__swsetup_r+0x30>
 80146a4:	2209      	movs	r2, #9
 80146a6:	602a      	str	r2, [r5, #0]
 80146a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146ac:	81a3      	strh	r3, [r4, #12]
 80146ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80146b2:	e033      	b.n	801471c <__swsetup_r+0x98>
 80146b4:	0758      	lsls	r0, r3, #29
 80146b6:	d512      	bpl.n	80146de <__swsetup_r+0x5a>
 80146b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80146ba:	b141      	cbz	r1, 80146ce <__swsetup_r+0x4a>
 80146bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80146c0:	4299      	cmp	r1, r3
 80146c2:	d002      	beq.n	80146ca <__swsetup_r+0x46>
 80146c4:	4628      	mov	r0, r5
 80146c6:	f7ff fa69 	bl	8013b9c <_free_r>
 80146ca:	2300      	movs	r3, #0
 80146cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80146ce:	89a3      	ldrh	r3, [r4, #12]
 80146d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80146d4:	81a3      	strh	r3, [r4, #12]
 80146d6:	2300      	movs	r3, #0
 80146d8:	6063      	str	r3, [r4, #4]
 80146da:	6923      	ldr	r3, [r4, #16]
 80146dc:	6023      	str	r3, [r4, #0]
 80146de:	89a3      	ldrh	r3, [r4, #12]
 80146e0:	f043 0308 	orr.w	r3, r3, #8
 80146e4:	81a3      	strh	r3, [r4, #12]
 80146e6:	6923      	ldr	r3, [r4, #16]
 80146e8:	b94b      	cbnz	r3, 80146fe <__swsetup_r+0x7a>
 80146ea:	89a3      	ldrh	r3, [r4, #12]
 80146ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80146f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80146f4:	d003      	beq.n	80146fe <__swsetup_r+0x7a>
 80146f6:	4621      	mov	r1, r4
 80146f8:	4628      	mov	r0, r5
 80146fa:	f000 f846 	bl	801478a <__smakebuf_r>
 80146fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014702:	f013 0201 	ands.w	r2, r3, #1
 8014706:	d00a      	beq.n	801471e <__swsetup_r+0x9a>
 8014708:	2200      	movs	r2, #0
 801470a:	60a2      	str	r2, [r4, #8]
 801470c:	6962      	ldr	r2, [r4, #20]
 801470e:	4252      	negs	r2, r2
 8014710:	61a2      	str	r2, [r4, #24]
 8014712:	6922      	ldr	r2, [r4, #16]
 8014714:	b942      	cbnz	r2, 8014728 <__swsetup_r+0xa4>
 8014716:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801471a:	d1c5      	bne.n	80146a8 <__swsetup_r+0x24>
 801471c:	bd38      	pop	{r3, r4, r5, pc}
 801471e:	0799      	lsls	r1, r3, #30
 8014720:	bf58      	it	pl
 8014722:	6962      	ldrpl	r2, [r4, #20]
 8014724:	60a2      	str	r2, [r4, #8]
 8014726:	e7f4      	b.n	8014712 <__swsetup_r+0x8e>
 8014728:	2000      	movs	r0, #0
 801472a:	e7f7      	b.n	801471c <__swsetup_r+0x98>
 801472c:	20000278 	.word	0x20000278

08014730 <abort>:
 8014730:	b508      	push	{r3, lr}
 8014732:	2006      	movs	r0, #6
 8014734:	f000 f88e 	bl	8014854 <raise>
 8014738:	2001      	movs	r0, #1
 801473a:	f7ec fe77 	bl	800142c <_exit>

0801473e <__swhatbuf_r>:
 801473e:	b570      	push	{r4, r5, r6, lr}
 8014740:	460c      	mov	r4, r1
 8014742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014746:	2900      	cmp	r1, #0
 8014748:	b096      	sub	sp, #88	@ 0x58
 801474a:	4615      	mov	r5, r2
 801474c:	461e      	mov	r6, r3
 801474e:	da0d      	bge.n	801476c <__swhatbuf_r+0x2e>
 8014750:	89a3      	ldrh	r3, [r4, #12]
 8014752:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014756:	f04f 0100 	mov.w	r1, #0
 801475a:	bf14      	ite	ne
 801475c:	2340      	movne	r3, #64	@ 0x40
 801475e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014762:	2000      	movs	r0, #0
 8014764:	6031      	str	r1, [r6, #0]
 8014766:	602b      	str	r3, [r5, #0]
 8014768:	b016      	add	sp, #88	@ 0x58
 801476a:	bd70      	pop	{r4, r5, r6, pc}
 801476c:	466a      	mov	r2, sp
 801476e:	f000 f879 	bl	8014864 <_fstat_r>
 8014772:	2800      	cmp	r0, #0
 8014774:	dbec      	blt.n	8014750 <__swhatbuf_r+0x12>
 8014776:	9901      	ldr	r1, [sp, #4]
 8014778:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801477c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014780:	4259      	negs	r1, r3
 8014782:	4159      	adcs	r1, r3
 8014784:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014788:	e7eb      	b.n	8014762 <__swhatbuf_r+0x24>

0801478a <__smakebuf_r>:
 801478a:	898b      	ldrh	r3, [r1, #12]
 801478c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801478e:	079d      	lsls	r5, r3, #30
 8014790:	4606      	mov	r6, r0
 8014792:	460c      	mov	r4, r1
 8014794:	d507      	bpl.n	80147a6 <__smakebuf_r+0x1c>
 8014796:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801479a:	6023      	str	r3, [r4, #0]
 801479c:	6123      	str	r3, [r4, #16]
 801479e:	2301      	movs	r3, #1
 80147a0:	6163      	str	r3, [r4, #20]
 80147a2:	b003      	add	sp, #12
 80147a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147a6:	ab01      	add	r3, sp, #4
 80147a8:	466a      	mov	r2, sp
 80147aa:	f7ff ffc8 	bl	801473e <__swhatbuf_r>
 80147ae:	9f00      	ldr	r7, [sp, #0]
 80147b0:	4605      	mov	r5, r0
 80147b2:	4639      	mov	r1, r7
 80147b4:	4630      	mov	r0, r6
 80147b6:	f7fe fd83 	bl	80132c0 <_malloc_r>
 80147ba:	b948      	cbnz	r0, 80147d0 <__smakebuf_r+0x46>
 80147bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147c0:	059a      	lsls	r2, r3, #22
 80147c2:	d4ee      	bmi.n	80147a2 <__smakebuf_r+0x18>
 80147c4:	f023 0303 	bic.w	r3, r3, #3
 80147c8:	f043 0302 	orr.w	r3, r3, #2
 80147cc:	81a3      	strh	r3, [r4, #12]
 80147ce:	e7e2      	b.n	8014796 <__smakebuf_r+0xc>
 80147d0:	89a3      	ldrh	r3, [r4, #12]
 80147d2:	6020      	str	r0, [r4, #0]
 80147d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80147d8:	81a3      	strh	r3, [r4, #12]
 80147da:	9b01      	ldr	r3, [sp, #4]
 80147dc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80147e0:	b15b      	cbz	r3, 80147fa <__smakebuf_r+0x70>
 80147e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80147e6:	4630      	mov	r0, r6
 80147e8:	f000 f84e 	bl	8014888 <_isatty_r>
 80147ec:	b128      	cbz	r0, 80147fa <__smakebuf_r+0x70>
 80147ee:	89a3      	ldrh	r3, [r4, #12]
 80147f0:	f023 0303 	bic.w	r3, r3, #3
 80147f4:	f043 0301 	orr.w	r3, r3, #1
 80147f8:	81a3      	strh	r3, [r4, #12]
 80147fa:	89a3      	ldrh	r3, [r4, #12]
 80147fc:	431d      	orrs	r5, r3
 80147fe:	81a5      	strh	r5, [r4, #12]
 8014800:	e7cf      	b.n	80147a2 <__smakebuf_r+0x18>

08014802 <_raise_r>:
 8014802:	291f      	cmp	r1, #31
 8014804:	b538      	push	{r3, r4, r5, lr}
 8014806:	4605      	mov	r5, r0
 8014808:	460c      	mov	r4, r1
 801480a:	d904      	bls.n	8014816 <_raise_r+0x14>
 801480c:	2316      	movs	r3, #22
 801480e:	6003      	str	r3, [r0, #0]
 8014810:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014814:	bd38      	pop	{r3, r4, r5, pc}
 8014816:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014818:	b112      	cbz	r2, 8014820 <_raise_r+0x1e>
 801481a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801481e:	b94b      	cbnz	r3, 8014834 <_raise_r+0x32>
 8014820:	4628      	mov	r0, r5
 8014822:	f000 f853 	bl	80148cc <_getpid_r>
 8014826:	4622      	mov	r2, r4
 8014828:	4601      	mov	r1, r0
 801482a:	4628      	mov	r0, r5
 801482c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014830:	f000 b83a 	b.w	80148a8 <_kill_r>
 8014834:	2b01      	cmp	r3, #1
 8014836:	d00a      	beq.n	801484e <_raise_r+0x4c>
 8014838:	1c59      	adds	r1, r3, #1
 801483a:	d103      	bne.n	8014844 <_raise_r+0x42>
 801483c:	2316      	movs	r3, #22
 801483e:	6003      	str	r3, [r0, #0]
 8014840:	2001      	movs	r0, #1
 8014842:	e7e7      	b.n	8014814 <_raise_r+0x12>
 8014844:	2100      	movs	r1, #0
 8014846:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801484a:	4620      	mov	r0, r4
 801484c:	4798      	blx	r3
 801484e:	2000      	movs	r0, #0
 8014850:	e7e0      	b.n	8014814 <_raise_r+0x12>
	...

08014854 <raise>:
 8014854:	4b02      	ldr	r3, [pc, #8]	@ (8014860 <raise+0xc>)
 8014856:	4601      	mov	r1, r0
 8014858:	6818      	ldr	r0, [r3, #0]
 801485a:	f7ff bfd2 	b.w	8014802 <_raise_r>
 801485e:	bf00      	nop
 8014860:	20000278 	.word	0x20000278

08014864 <_fstat_r>:
 8014864:	b538      	push	{r3, r4, r5, lr}
 8014866:	4d07      	ldr	r5, [pc, #28]	@ (8014884 <_fstat_r+0x20>)
 8014868:	2300      	movs	r3, #0
 801486a:	4604      	mov	r4, r0
 801486c:	4608      	mov	r0, r1
 801486e:	4611      	mov	r1, r2
 8014870:	602b      	str	r3, [r5, #0]
 8014872:	f7ec fe2b 	bl	80014cc <_fstat>
 8014876:	1c43      	adds	r3, r0, #1
 8014878:	d102      	bne.n	8014880 <_fstat_r+0x1c>
 801487a:	682b      	ldr	r3, [r5, #0]
 801487c:	b103      	cbz	r3, 8014880 <_fstat_r+0x1c>
 801487e:	6023      	str	r3, [r4, #0]
 8014880:	bd38      	pop	{r3, r4, r5, pc}
 8014882:	bf00      	nop
 8014884:	2000dd6c 	.word	0x2000dd6c

08014888 <_isatty_r>:
 8014888:	b538      	push	{r3, r4, r5, lr}
 801488a:	4d06      	ldr	r5, [pc, #24]	@ (80148a4 <_isatty_r+0x1c>)
 801488c:	2300      	movs	r3, #0
 801488e:	4604      	mov	r4, r0
 8014890:	4608      	mov	r0, r1
 8014892:	602b      	str	r3, [r5, #0]
 8014894:	f7ec fe2a 	bl	80014ec <_isatty>
 8014898:	1c43      	adds	r3, r0, #1
 801489a:	d102      	bne.n	80148a2 <_isatty_r+0x1a>
 801489c:	682b      	ldr	r3, [r5, #0]
 801489e:	b103      	cbz	r3, 80148a2 <_isatty_r+0x1a>
 80148a0:	6023      	str	r3, [r4, #0]
 80148a2:	bd38      	pop	{r3, r4, r5, pc}
 80148a4:	2000dd6c 	.word	0x2000dd6c

080148a8 <_kill_r>:
 80148a8:	b538      	push	{r3, r4, r5, lr}
 80148aa:	4d07      	ldr	r5, [pc, #28]	@ (80148c8 <_kill_r+0x20>)
 80148ac:	2300      	movs	r3, #0
 80148ae:	4604      	mov	r4, r0
 80148b0:	4608      	mov	r0, r1
 80148b2:	4611      	mov	r1, r2
 80148b4:	602b      	str	r3, [r5, #0]
 80148b6:	f7ec fda9 	bl	800140c <_kill>
 80148ba:	1c43      	adds	r3, r0, #1
 80148bc:	d102      	bne.n	80148c4 <_kill_r+0x1c>
 80148be:	682b      	ldr	r3, [r5, #0]
 80148c0:	b103      	cbz	r3, 80148c4 <_kill_r+0x1c>
 80148c2:	6023      	str	r3, [r4, #0]
 80148c4:	bd38      	pop	{r3, r4, r5, pc}
 80148c6:	bf00      	nop
 80148c8:	2000dd6c 	.word	0x2000dd6c

080148cc <_getpid_r>:
 80148cc:	f7ec bd96 	b.w	80013fc <_getpid>

080148d0 <_init>:
 80148d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148d2:	bf00      	nop
 80148d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148d6:	bc08      	pop	{r3}
 80148d8:	469e      	mov	lr, r3
 80148da:	4770      	bx	lr

080148dc <_fini>:
 80148dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148de:	bf00      	nop
 80148e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148e2:	bc08      	pop	{r3}
 80148e4:	469e      	mov	lr, r3
 80148e6:	4770      	bx	lr
